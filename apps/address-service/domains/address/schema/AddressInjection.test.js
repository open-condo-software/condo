/**
 * Generated by `createschema address.AddressInjection 'country:Text; region?:Text; area?:Text; city?:Text; settlement?:Text; street?:Text; building:Text; block?:Text; meta?:Json;'`
 */

const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    DATETIME_RE,
    expectToThrowGQLError,
} = require('@condo/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAccessDeniedErrorToObjects,
} = require('@condo/keystone/test.utils')

const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
} = require('@address-service/domains/user/utils/testSchema')

const {
    AddressInjection,
    createTestAddressInjection,
    updateTestAddressInjection, getTestInjections,
} = require('@address-service/domains/address/utils/testSchema')

const faker = require('faker')

describe('AddressInjection', () => {
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                // 1) prepare data
                const admin = await makeLoggedInAdminClient()

                // 2) action
                const [obj, attrs] = await createTestAddressInjection(admin)

                // 3) check
                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
            })

            test('support can', async () => {
                const client = await makeClientWithSupportUser()

                const [obj, attrs] = await createTestAddressInjection(client)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestAddressInjection(client)
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestAddressInjection(client)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestAddressInjection(admin)

                const [obj, attrs] = await updateTestAddressInjection(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
            })

            test('support can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestAddressInjection(admin)

                const client = await makeClientWithSupportUser()
                const [obj, attrs] = await updateTestAddressInjection(client, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestAddressInjection(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestAddressInjection(client, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestAddressInjection(admin)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestAddressInjection(client, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestAddressInjection(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await AddressInjection.delete(admin, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestAddressInjection(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await AddressInjection.delete(client, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestAddressInjection(admin)

                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await AddressInjection.delete(client, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj] = await createTestAddressInjection(admin)

                const objs = await AddressInjection.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                await createTestAddressInjection(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await AddressInjection.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                await createTestAddressInjection(admin)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await AddressInjection.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            const admin = await makeLoggedInAdminClient()

            await expectToThrowGQLError(
                async () => await createTestAddressInjection(admin, { dv: 42 }),
                {
                    'code': 'BAD_USER_INPUT',
                    'type': 'DV_VERSION_MISMATCH',
                    'message': 'Wrong value for data version number',
                    'mutation': 'createAddressInjection',
                    'variable': ['data', 'dv'],
                },
            )
        })
    })

    describe('Injecting', () => {
        test('Keywords created correctly', async () => {
            const admin = await makeLoggedInAdminClient()

            const country = 'Molvania'

            const [obj, attrs] = await createTestAddressInjection(admin, { country })

            expect(obj.keywords).toContain(country)
        })

        test('Injections found correctly', async () => {
            const admin = await makeLoggedInAdminClient()
            const country = 'InjectedMolvania'
            const city = 'InjectedCity'
            const street = `InjectedStreet${faker.datatype.number()}`
            const street1 = `${street}${faker.address.streetName()}`
            const street2 = `${street}${faker.address.streetName()}`
            await createTestAddressInjection(admin, { country, city, street: street1 })
            await createTestAddressInjection(admin, { country, city, street: street2 })


            const injectionsBothStreets = await getTestInjections(admin, street)
            const injectionsStreet1 = await getTestInjections(admin, street1)

            expect(injectionsBothStreets).toHaveLength(2)
            expect(injectionsBothStreets).toEqual(expect.arrayContaining([
                expect.objectContaining({ street: street1 }),
                expect.objectContaining({ street: street2 }),
            ]))

            expect(injectionsStreet1).toHaveLength(1)
            expect(injectionsBothStreets).toEqual(expect.arrayContaining([
                expect.objectContaining({ street: street1 }),
            ]))
        })
    })
})
