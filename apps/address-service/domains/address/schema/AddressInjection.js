/**
 * Generated by `createschema address.AddressInjection 'country:Text; region?:Text; area?:Text; city?:Text; settlement?:Text; street?:Text; building:Text; block?:Text; meta?:Json;'`
 */

const { Text } = require('@keystonejs/fields')
const { Json } = require('@condo/keystone/fields')
const { GQLListSchema } = require('@condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@condo/keystone/plugins')
const access = require('@address-service/domains/address/access/AddressInjection')
const get = require('lodash/get')

const AddressInjection = new GQLListSchema('AddressInjection', {
    schemaDoc: 'Addresses that do not exist in external providers',
    fields: {
        country: {
            schemaDoc: 'The country',
            type: Text,
            isRequired: true,
        },

        region: {
            schemaDoc: 'The region',
            type: Text,
        },

        area: {
            schemaDoc: 'Some area',
            type: Text,
        },

        city: {
            schemaDoc: 'The city name',
            type: Text,
        },

        settlement: {
            schemaDoc: 'The settlement name',
            type: Text,
        },

        street: {
            schemaDoc: 'The street name itself',
            type: Text,
        },

        building: {
            schemaDoc: 'The number of the building',
            type: Text,
            isRequired: true,
        },

        block: {
            schemaDoc: 'Some part of the building',
            type: Text,
        },

        keywords: {
            schemaDoc: 'The keywords for searching',
            type: Text,
        },

        meta: {
            schemaDoc: 'Additional data',
            type: Json,
        },

    },
    hooks: {
        resolveInput: async ({ resolvedData, existingItem }) => ({
            // Actualize address string on every data changing
            ...resolvedData,
            keywords: ['country', 'region', 'area', 'city', 'settlement', 'street', 'building', 'block']
                .map((field) => get({ ...existingItem, ...resolvedData }, field))
                .filter(Boolean)
                .join(' '),
        }),
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadAddressInjections,
        create: access.canManageAddressInjections,
        update: access.canManageAddressInjections,
        delete: false,
        auth: true,
    },
})

module.exports = {
    AddressInjection,
}
