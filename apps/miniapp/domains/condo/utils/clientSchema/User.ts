/**
 * Generated by `createschema condo.User 'name:Text;isAdmin:Checkbox;isSupport:Checkbox;type:Text' --force`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@miniapp/domains/common/utils/userid.utils'
import { generateReactHooks } from '@miniapp/domains/common/utils/codegeneration/generate.hooks'

import { User as UserGQL } from '@miniapp/domains/condo/gql'
import { User, UserUpdateInput, QueryAllUsersArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'name', 'isAdmin', 'isSupport', 'type']
const RELATIONS = []

export interface IUserUIState extends User {
    id: string
    // TODO(codegen): write IUserUIState or extends it from
}

function convertToUIState (item: User): IUserUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IUserUIState
}

export interface IUserFormState {
    id?: undefined
    // TODO(codegen): write IUserUIFormState or extends it from
}

function convertToUIFormState (state: IUserUIState): IUserFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IUserFormState
}

function convertToGQLInput (state: IUserFormState): UserUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<User, UserUpdateInput, IUserFormState, IUserUIState, QueryAllUsersArgs>(UserGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
