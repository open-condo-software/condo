/**
 * Generated by `createschema condo.User 'name:Text;isAdmin:Checkbox;isSupport:Checkbox;type:Text' --force`
 */

const { Text, Integer, Checkbox, Password } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { uuided, tracked, softDeleted } = require('@core/keystone/plugins')

// TODO(pahaz): move it to core? or vendor this plugin?
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')

const access = require('@miniapp/domains/condo/access/User')

const User = new GQLListSchema('User', {
    schemaDoc: 'condo.User (exported from condo API)',
    fields: {
        v: {
            schemaDoc: 'condo.User.v',
            type: Integer,
            isRequired: true,
        },
        name: {
            schemaDoc: 'condo.User.name',
            type: Text,
        },
        type: {
            schemaDoc: 'condo.User.type',
            type: Text,
            isRequired: true,
        },
        isAdmin: {
            schemaDoc: 'condo.User.isAdmin',
            type: Checkbox,
            defaultValue: false,
            access: access.canAccessToIsAdminField,
        },
        isSupport: {
            schemaDoc: 'condo.User.isSupport',
            type: Checkbox,
            defaultValue: false,
            access: access.canAccessToIsAdminField,
        },
        isLocal: {
            schemaDoc: 'Is this a local user (not from oidc auth)',
            type: Checkbox,
            defaultValue: true,
            access: access.canAccessToIsAdminField,
        },
        password: {
            schemaDoc: 'Password. Update only (for local auth without oidc)',
            type: Password,
            access: access.canAccessToIsAdminField,
        },
    },
    plugins: [uuided(), tracked(), softDeleted(), dvAndSender()],
    access: {
        read: access.canReadUsers,
        create: access.canManageUsers,
        update: access.canManageUsers,
        delete: false,
        auth: true,
    },
})

module.exports = {
    User,
}
