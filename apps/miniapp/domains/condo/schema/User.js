/**
 * Generated by `createschema condo.User 'name:Text;isAdmin:Checkbox;isSupport:Checkbox;type:Text' --force`
 */

const { Text, Select, Integer, Checkbox, Password, Virtual } = require('@keystonejs/fields')
const get = require('lodash/get')

const { uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@miniapp/domains/condo/access/User')
const { CONDO_ORGANIZATION_KEY } = require('@miniapp/domains/condo/constants/common')
const { SERVICE_USER_TYPE, USER_TYPES } = require('@miniapp/domains/condo/constants/user')

const User = new GQLListSchema('User', {
    schemaDoc: 'condo.User (exported from condo API)',
    fields: {
        v: {
            schemaDoc: 'condo.User.v',
            type: Integer,
            isRequired: true,
            defaultValue: 1,
            access: access.canReadByAnyAndChangeByAdmin,
            hooks: {
                resolveInput: ({ resolvedData, existingItem }) => {
                    if (get(existingItem, 'isLocal') || get(resolvedData, 'isLocal')) {
                        if (existingItem) {
                            resolvedData.v = Number(existingItem.v || 1) + 1
                        }
                    }
                    return resolvedData.v
                },
            },
        },
        name: {
            schemaDoc: 'condo.User.name',
            type: Text,
            access: access.canReadByAnyAndChangeByAdmin,
        },
        type: {
            schemaDoc: 'condo.User.type',
            type: Select,
            dataType: 'enum',
            options: USER_TYPES,
            defaultValue: SERVICE_USER_TYPE,
            isRequired: true,
            access: access.canReadByAnyAndChangeByAdmin,
        },
        isAdmin: {
            schemaDoc: 'condo.User.isAdmin',
            type: Checkbox,
            defaultValue: false,
            access: access.canReadByAnyAndChangeByAdmin,
        },
        isSupport: {
            schemaDoc: 'condo.User.isSupport',
            type: Checkbox,
            defaultValue: false,
            access: access.canReadByAnyAndChangeByAdmin,
        },

        // NOTE: this field should be validated by OIDC server and we just copy it.
        // This field is required for base test logic and base keystone auth logic.
        email: {
            schemaDoc: 'condo.User.email',
            type: Text,
            access: access.canReadByAnyAndChangeByAdmin,
        },

        // NOTE: We need some way to create admin users for test purposes.
        // We don't want to use importId and importRemoteSystem because it's already used by condo.User.
        isLocal: {
            schemaDoc: 'Is this a local user (not from oidc auth). We use such users for test purposes. Usecase: you need to check the app locally without the OIDC server or you need to run tests',
            type: Checkbox,
            defaultValue: true,
            access: access.canReadByAnyAndChangeByAdmin,
        },

        // NOTE: This field is required for local (non oidc) auth
        password: {
            schemaDoc: 'Password. Update only (for local auth without oidc). Check the `isLocal` field docs',
            type: Password,
            access: access.canAccessToPasswordField,
        },

        organizationId: {
            schemaDoc: 'Current organization id',
            type: Virtual,
            resolver: (item, _, context) => {
                return get(context, ['req', 'session', CONDO_ORGANIZATION_KEY], null)
            },
        },
    },
    plugins: [uuided(), tracked(), softDeleted(), dvAndSender()],
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['type', 'email'],
                name: 'unique_type_and_email',
            },
        ],
    },
    access: {
        read: access.canReadUsers,
        create: access.canManageUsers,
        update: access.canManageUsers,
        delete: false,
        auth: true,
    },
})

module.exports = {
    User,
}
