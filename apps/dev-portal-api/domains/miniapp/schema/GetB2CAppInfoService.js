/**
 * Generated by `createservice miniapp.GetB2CAppInfoService --type queries`
 */

const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { productionClient, developmentClient } = require('@dev-portal-api/domains/common/utils/serverClients')
const { CondoB2CAppWithInfoGql } = require('@dev-portal-api/domains/condo/gql')
const access = require('@dev-portal-api/domains/miniapp/access/GetB2CAppInfoService')
const { PROD_ENVIRONMENT } = require('@dev-portal-api/domains/miniapp/constants/publishing')


const GetB2CAppInfoService = new GQLCustomSchema('GetB2CAppInfoService', {
    types: [
        {
            access: true,
            type: 'input GetB2CAppInfoInput { app: B2CAppWhereUniqueInput!, environment: AppEnvironment! }',
        },
        {
            access: true,
            type: 'type B2CAppCurrentBuild { id: String!, version: String! }',
        },
        {
            access: true,
            type: 'type GetB2CAppInfoOutput { id: String!, environment: AppEnvironment!, currentBuild: B2CAppCurrentBuild }',
        },
    ],
    
    queries: [
        {
            access: access.canGetB2CAppInfo,
            schema: 'getB2CAppInfo (data: GetB2CAppInfoInput!): GetB2CAppInfoOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { app: { id }, environment } } = args

                const serverClient = environment === PROD_ENVIRONMENT
                    ? productionClient
                    : developmentClient

                const b2cApp = await serverClient.findExportedModel({
                    modelGql: CondoB2CAppWithInfoGql,
                    id,
                    context,
                })

                if (!b2cApp) return null

                return { id: b2cApp.id, environment, currentBuild: b2cApp.currentBuild }
            },
        },
    ],
    
})

module.exports = {
    GetB2CAppInfoService,
}
