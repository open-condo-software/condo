/**
 * Generated by `createschema announcement.AnnouncementTemplate 'name:Text;image?:File;title:Text;body?:Text;fields:Json'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')
const get = require('lodash/get')

const { GQLError } = require('@open-condo/keystone/errors')
const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@announcement/domains/announcement/access/AnnouncementTemplate')
const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { getFileMetaAfterChange } = require('@condo/domains/common/utils/fileAdapter')


const ANNOUNCEMENT_TEMPLATE_IMAGE = 'AnnouncementTemplateImage'
const Adapter = new FileAdapter(ANNOUNCEMENT_TEMPLATE_IMAGE)
const fileMetaAfterChange = getFileMetaAfterChange(Adapter)
const ALLOWED_MIME_TYPES = [
    'image/jpeg',
    'image/png',
    'image/heic',
]
const ERRORS = {
    FORBIDDEN_FILE_TYPE: (mimeType) => ({
        code: 'BAD_USER_INPUT',
        type: 'FORBIDDEN_FILE_TYPE',
        message: `Expected file to be one of the following mimetypes: ${ALLOWED_MIME_TYPES.map(type => `"${type}"`).join(', ')}. But got: ${mimeType}`,
    }),
}


const AnnouncementTemplate = new GQLListSchema('AnnouncementTemplate', {
    schemaDoc: 'TODO DOC!',
    fields: {
        name: {
            schemaDoc: 'TODO DOC!',
            type: 'Text',
            isRequired: true,
        },

        image: {
            schemaDoc: 'TODO DOC!',
            type: 'File',
            adapter: Adapter,
            hooks: {
                validateInput: ({ resolvedData, fieldPath, context }) => {
                    const mimetype = get(resolvedData, [fieldPath, 'mimetype'])
                    if (!ALLOWED_MIME_TYPES.includes(mimetype)) throw new GQLError(ERRORS.FORBIDDEN_FILE_TYPE(mimetype), context)
                },
            },
        },

        title: {
            schemaDoc: 'TODO DOC!',
            type: 'Text',
            isRequired: true,
        },

        body: {
            schemaDoc: 'TODO DOC!',
            type: 'Text',
        },

        fields: {
            schemaDoc: 'TODO DOC!',
            type: 'Json',
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadAnnouncementTemplates,
        create: access.canManageAnnouncementTemplates,
        update: access.canManageAnnouncementTemplates,
        delete: false,
        auth: true,
    },
})

module.exports = {
    AnnouncementTemplate,
}
