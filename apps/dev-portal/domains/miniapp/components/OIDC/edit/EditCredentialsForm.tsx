import { Form, notification } from 'antd'
import React, { useCallback, useEffect, useState } from 'react'
import { useIntl } from 'react-intl'

import { RefreshCw } from '@open-condo/icons'
import { Input, Typography, Space, Modal, Button } from '@open-condo/ui'

import { useMutationErrorHandler } from '@/domains/common/hooks/useMutationErrorHandler'
import { getClientSideSenderInfo } from '@/domains/common/utils/userid.utils'
import { useSecretContext } from '@/domains/miniapp/components/OIDC/edit/SecretContextProvider'
import { OIDC_SECRET_LENGTH } from '@dev-api/domains/miniapp/constants/oidc'

import styles from './EditCredentialsForm.module.css'

import { useUpdateOidcClientSecretMutation, UpdateOidcClientSecretMutation } from '@/lib/gql'


const MASKED_PASSWORD = '*'.repeat(OIDC_SECRET_LENGTH)

type EditCredentialsFormProps = {
    id: string
    clientId?: string | null
}

export const EditCredentialsForm: React.FC<EditCredentialsFormProps> = ({ id, clientId }) => {
    const intl = useIntl()
    const ClientIDLabel = intl.formatMessage({ id: 'apps.b2c.sections.oidc.editCredentialsSubsection.form.items.clientId.label' })
    const ClientSecretLabel = intl.formatMessage({ id: 'apps.b2c.sections.oidc.editCredentialsSubsection.form.items.clientSecret.label' })
    const GenerateNewSecretLabel = intl.formatMessage({ id: 'apps.b2c.sections.oidc.editCredentialsSubsection.form.items.clientSecret.actions.generateNew' })
    const ConfirmModalTitle = intl.formatMessage({ id: 'apps.b2c.sections.oidc.editCredentialsSubsection.confirmModal.title' })
    const ConfirmModalText = intl.formatMessage({ id: 'apps.b2c.sections.oidc.editCredentialsSubsection.confirmModal.text' })
    const ConfirmModalOkLabel = intl.formatMessage({ id: 'apps.b2c.sections.oidc.editCredentialsSubsection.confirmModal.actions.ok' })
    const ConfirmModalCancelLabel = intl.formatMessage({ id: 'apps.b2c.sections.oidc.editCredentialsSubsection.confirmModal.actions.cancel' })
    const NotificationSuccessTitle = intl.formatMessage({ id: 'apps.b2c.sections.oidc.editCredentialsSubsection.notifications.success.title' })
    const NotificationSuccessDescription = intl.formatMessage({ id: 'apps.b2c.sections.oidc.editCredentialsSubsection.notifications.success.description' })

    const [confirmModalOpen, setConfirmModalOpen] = useState(false)

    const [form] = Form.useForm()
    const { secret, setSecret } = useSecretContext()

    useEffect(() => {
        if (form) {
            if (secret) {
                form.setFieldValue('clientSecret', secret)
            } else {
                form.setFieldValue('clientSecret', MASKED_PASSWORD)
            }
        }
    }, [form, secret])

    const onError = useMutationErrorHandler()
    const onCompleted = useCallback((data: UpdateOidcClientSecretMutation) => {
        notification.success({ message: NotificationSuccessTitle, description: NotificationSuccessDescription })
        setSecret(data.client?.clientSecret || null)
        setConfirmModalOpen(false)
    }, [setSecret, NotificationSuccessTitle, NotificationSuccessDescription])
    const [updateSecretMutation] = useUpdateOidcClientSecretMutation({
        onError,
        onCompleted,
    })

    const updateSecret = useCallback(() => {
        updateSecretMutation({
            variables: {
                id,
                data: {
                    dv: 1,
                    sender: getClientSideSenderInfo(),
                    // NOTE: It's autogenerated, so payload is the way to trigger resolveInput
                    clientSecret: MASKED_PASSWORD,
                },
            },
        })
    }, [id, updateSecretMutation])

    const showConfirmModal = useCallback(() => {
        setConfirmModalOpen(true)
    }, [])
    const closeConfirmModal = useCallback(() => {
        setConfirmModalOpen(false)
    }, [])

    return (
        <>
            <Form
                name='edit-oidc-credentials'
                layout='vertical'
                form={form}
                initialValues={{ clientId }}
            >
                <Form.Item
                    name='clientId'
                    label={ClientIDLabel}
                >
                    <Input readOnly/>
                </Form.Item>
                <div>
                    <Form.Item
                        name='clientSecret'
                        label={ClientSecretLabel}
                        className={styles.passwordItem}
                    >
                        <Input.Password readOnly visibilityToggle={{ visible: Boolean(secret) }} disabled={!secret}/>
                    </Form.Item>
                    <Typography.Link onClick={showConfirmModal}>
                        <Space size={4} direction='horizontal'>
                            <RefreshCw size='small'/>
                            {GenerateNewSecretLabel}
                        </Space>
                    </Typography.Link>
                </div>
            </Form>
            {confirmModalOpen && (
                <Modal
                    open={confirmModalOpen}
                    title={ConfirmModalTitle}
                    onCancel={closeConfirmModal}
                    footer={[
                        <Button type='secondary' key='cancel' onClick={closeConfirmModal}>
                            {ConfirmModalCancelLabel}
                        </Button>,
                        <Button type='primary' key='ok' onClick={updateSecret}>
                            {ConfirmModalOkLabel}
                        </Button>,
                    ]}
                >
                    <Typography.Paragraph type='secondary'>
                        {ConfirmModalText}
                    </Typography.Paragraph>
                </Modal>
            )}
        </>
    )
}