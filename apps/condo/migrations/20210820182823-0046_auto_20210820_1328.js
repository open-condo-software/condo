// auto generated by kmigrator
// KMIGRATOR:0046_auto_20210820_1328:IyBHZW5lcmF0ZWQgYnkgRGphbmdvIDMuMi41IG9uIDIwMjEtMDgtMjAgMTM6MjgKCmZyb20gZGphbmdvLmRiIGltcG9ydCBtaWdyYXRpb25zLCBtb2RlbHMKCgpjbGFzcyBNaWdyYXRpb24obWlncmF0aW9ucy5NaWdyYXRpb24pOgoKICAgIGRlcGVuZGVuY2llcyA9IFsKICAgICAgICAoJ19kamFuZ29fc2NoZW1hJywgJzAwNDVfb3JnYW5pemF0aW9uZW1wbG95ZWVfc3BlY2lhbGl6YXRpb25zX21hbnknKSwKICAgIF0KCiAgICBvcGVyYXRpb25zID0gWwogICAgICAgIG1pZ3JhdGlvbnMuQWx0ZXJGaWVsZCgKICAgICAgICAgICAgbW9kZWxfbmFtZT0nYmlsbGluZ2ludGVncmF0aW9uYWNjZXNzcmlnaHQnLAogICAgICAgICAgICBuYW1lPSdpZCcsCiAgICAgICAgICAgIGZpZWxkPW1vZGVscy5VVUlERmllbGQocHJpbWFyeV9rZXk9VHJ1ZSwgc2VyaWFsaXplPUZhbHNlKSwKICAgICAgICApLAogICAgICAgIG1pZ3JhdGlvbnMuQWx0ZXJGaWVsZCgKICAgICAgICAgICAgbW9kZWxfbmFtZT0nYmlsbGluZ2ludGVncmF0aW9uYWNjZXNzcmlnaHRoaXN0b3J5cmVjb3JkJywKICAgICAgICAgICAgbmFtZT0naGlzdG9yeV9pZCcsCiAgICAgICAgICAgIGZpZWxkPW1vZGVscy5VVUlERmllbGQoZGJfaW5kZXg9VHJ1ZSksCiAgICAgICAgKSwKICAgIF0K

exports.up = async (knex) => {
    await knex.raw(`
    BEGIN;
        ALTER TABLE "BillingIntegrationAccessRight" RENAME COLUMN "id" TO "old_id";
        ALTER TABLE "BillingIntegrationAccessRight" DROP CONSTRAINT "BillingIntegrationAccessRight_pkey";
        ALTER TABLE "BillingIntegrationAccessRight" ADD COLUMN "id" UUID NULL;
        UPDATE "BillingIntegrationAccessRight" SET "id" = uuid_generate_v4();
        ALTER TABLE "BillingIntegrationAccessRight" ADD PRIMARY KEY ("id");

        ALTER TABLE "BillingIntegrationAccessRightHistoryRecord" RENAME COLUMN "history_id" TO "old_history_id";
        ALTER TABLE "BillingIntegrationAccessRightHistoryRecord" ADD COLUMN "history_id" UUID NULL;

        -- Set "history_id" of history records to "id" of corresponding records in new format [1]
        UPDATE "BillingIntegrationAccessRightHistoryRecord" hr
        SET "history_id" = ar."id"
        FROM "BillingIntegrationAccessRight" as ar
        WHERE(
            ar."old_id" = hr."old_history_id"
        );

        -- We can have hard-deleted rows in BillingIntegrationAccessRight table and orphaned rows in BillingIntegrationAccessRightHistoryRecord,
        -- that was correspond to them before hard-delete. Therefore after [1] a table BillingIntegrationAccessRightHistoryRecord
        -- can have NULL in "history_id" column in some rows. Since we don't have original rows in BillingIntegrationAccessRight
        -- table, we can set them to some value
        UPDATE "BillingIntegrationAccessRightHistoryRecord" hr
        SET "history_id" = '00000000-0000-0000-0000-000000000000'
        WHERE (
            hr.history_id IS NULL
        );

        ALTER TABLE "BillingIntegrationAccessRightHistoryRecord" ALTER COLUMN "history_id" SET NOT NULL;
        -- All future history record will not have old id anymore, because plugin does not saves them
        ALTER TABLE "BillingIntegrationAccessRightHistoryRecord" ALTER COLUMN "old_history_id" DROP NOT NULL;
        COMMIT;
    END;
    `)
}

exports.down = async (knex) => {
    await knex.raw(`
    BEGIN;
        --
        -- Change type of BillingIntegrationAccessRight.id column back to integer
        --

        ALTER TABLE "BillingIntegrationAccessRight" RENAME COLUMN "id" TO "_old_id";
        ALTER TABLE "BillingIntegrationAccessRight" RENAME COLUMN "old_id" TO "id";

        ALTER TABLE "BillingIntegrationAccessRightHistoryRecord" RENAME COLUMN "history_id" TO "_old_history_id";
        ALTER TABLE "BillingIntegrationAccessRightHistoryRecord" RENAME COLUMN "old_history_id" TO "history_id";

        -- Set old format values of history_id, that was not saved after up-migration for further inserted rows
        UPDATE "BillingIntegrationAccessRightHistoryRecord" hr
        SET "history_id" = ar."id"
        FROM "BillingIntegrationAccessRight" as ar
        WHERE(
            ar."_old_id" = hr."_old_history_id"
        );
        ALTER TABLE "BillingIntegrationAccessRight" DROP CONSTRAINT "BillingIntegrationAccessRight_pkey";
        ALTER TABLE "BillingIntegrationAccessRight" ADD PRIMARY KEY ("id");
        ALTER TABLE "BillingIntegrationAccessRightHistoryRecord" ALTER COLUMN "history_id" SET NOT NULL;
        ALTER TABLE "BillingIntegrationAccessRight" DROP COLUMN "_old_id";
        ALTER TABLE "BillingIntegrationAccessRightHistoryRecord" DROP COLUMN "_old_history_id";
    COMMIT;
    END;
    `)
}
