// auto generated by kmigrator
// KMIGRATOR:0213_organizationemployeerole_canmanagebankaccounts_and_more:IyBHZW5lcmF0ZWQgYnkgRGphbmdvIDQuMCBvbiAyMDIzLTAxLTIwIDA2OjUxCgpmcm9tIGRqYW5nby5kYiBpbXBvcnQgbWlncmF0aW9ucywgbW9kZWxzCgoKY2xhc3MgTWlncmF0aW9uKG1pZ3JhdGlvbnMuTWlncmF0aW9uKToKCiAgICBkZXBlbmRlbmNpZXMgPSBbCiAgICAgICAgKCdfZGphbmdvX3NjaGVtYScsICcwMjEyX2F1dG9fMjAyMzAxMTlfMDgyNScpLAogICAgXQoKICAgIG9wZXJhdGlvbnMgPSBbCiAgICAgICAgbWlncmF0aW9ucy5BZGRGaWVsZCgKICAgICAgICAgICAgbW9kZWxfbmFtZT0nb3JnYW5pemF0aW9uZW1wbG95ZWVyb2xlJywKICAgICAgICAgICAgbmFtZT0nY2FuTWFuYWdlQmFua0FjY291bnRzJywKICAgICAgICAgICAgZmllbGQ9bW9kZWxzLkJvb2xlYW5GaWVsZChkZWZhdWx0PUZhbHNlKSwKICAgICAgICAgICAgcHJlc2VydmVfZGVmYXVsdD1GYWxzZSwKICAgICAgICApLAogICAgICAgIG1pZ3JhdGlvbnMuQWRkRmllbGQoCiAgICAgICAgICAgIG1vZGVsX25hbWU9J29yZ2FuaXphdGlvbmVtcGxveWVlcm9sZWhpc3RvcnlyZWNvcmQnLAogICAgICAgICAgICBuYW1lPSdjYW5NYW5hZ2VCYW5rQWNjb3VudHMnLAogICAgICAgICAgICBmaWVsZD1tb2RlbHMuQm9vbGVhbkZpZWxkKGJsYW5rPVRydWUsIG51bGw9VHJ1ZSksCiAgICAgICAgKSwKICAgICAgICBtaWdyYXRpb25zLkFkZEZpZWxkKAogICAgICAgICAgICBtb2RlbF9uYW1lPSdwcm9wZXJ0eWhpc3RvcnlyZWNvcmQnLAogICAgICAgICAgICBuYW1lPSd0aWNrZXRzRGVmZXJyZWQnLAogICAgICAgICAgICBmaWVsZD1tb2RlbHMuSlNPTkZpZWxkKGJsYW5rPVRydWUsIG51bGw9VHJ1ZSksCiAgICAgICAgKSwKICAgIF0K

// NOTE(antonal): This migration has duplicated migration "20230112135017-0210_organizationemployeerole_canmanagebankaccounts_and_more.js",
// that was mistakenly rolled to production during during [release-v-2-19-0](https://github.com/open-condo-software/condo/commits/release-v-2-19-0),
// that has diverged migrations list against master.
// https://github.com/open-condo-software/condo/compare/release-v-2-18-0..release-v-2-19-0
// Normally, migration "20230112135017-0210_organizationemployeerole_canmanagebankaccounts_and_more.js" would not exist,
// because all operations are the same as here.
// Since this migration is going to perform all the operations already applied on prod database
// by migration "20230112135017-0210_organizationemployeerole_canmanagebankaccounts_and_more.js", it will fail.
// Therefore, it has been modified with `IF NOT EXISTS` in `up` method and with `IF EXISTS` in `down` method
// to avoid performing of already applied operations with database schema.

exports.up = async (knex) => {
    await knex.raw(`
    BEGIN;
--
-- Add field canManageBankAccounts to organizationemployeerole
--
ALTER TABLE "OrganizationEmployeeRole" ADD COLUMN IF NOT EXISTS "canManageBankAccounts" boolean DEFAULT false NOT NULL;
-- There is no such syntax "ALTER COLUMN IF NOT EXISTS" in PostegreSQL 13.8. Ignore this line because default value has already been set above
--ALTER TABLE "OrganizationEmployeeRole" ALTER COLUMN "canManageBankAccounts" DROP DEFAULT;

---
--- [CUSTOM] Set canManageBankAccounts to administrator role
---
UPDATE "OrganizationEmployeeRole"
SET "canManageBankAccounts" = true
WHERE "name" = 'employee.role.Administrator.name';

--
-- Add field canManageBankAccounts to organizationemployeerolehistoryrecord
--
ALTER TABLE "OrganizationEmployeeRoleHistoryRecord" ADD COLUMN IF NOT EXISTS "canManageBankAccounts" boolean NULL;
--
-- Add field ticketsDeferred to propertyhistoryrecord
--
ALTER TABLE "PropertyHistoryRecord" ADD COLUMN IF NOT EXISTS "ticketsDeferred" jsonb NULL;
COMMIT;

    `)
}

exports.down = async (knex) => {
    await knex.raw(`
    BEGIN;
--
-- Add field ticketsDeferred to propertyhistoryrecord
--
ALTER TABLE "PropertyHistoryRecord" DROP COLUMN IF EXISTS "ticketsDeferred" CASCADE;
--
-- Add field canManageBankAccounts to organizationemployeerolehistoryrecord
--
ALTER TABLE "OrganizationEmployeeRoleHistoryRecord" DROP COLUMN IF EXISTS "canManageBankAccounts" CASCADE;
--
-- Add field canManageBankAccounts to organizationemployeerole
--
ALTER TABLE "OrganizationEmployeeRole" DROP COLUMN IF EXISTS "canManageBankAccounts" CASCADE;
COMMIT;

    `)
}
