// auto generated by kmigrator
// KMIGRATOR:0326_newsitemsharinghistoryrecord_and_more:

exports.up = async (knex) => {
    await knex.raw(`
    BEGIN;
--
-- Create model newsitemsharinghistoryrecord
--
CREATE TABLE "NewsItemSharingHistoryRecord" ("newsItemSharingProvider" uuid NULL, "b2bAppContext" uuid NULL, "newsItem" uuid NULL, "sharingParams" jsonb NULL, "status" text NULL, "statusMessage" text NULL, "lastGetRecipientsRequest" jsonb NULL, "lastPostRequest" jsonb NULL, "lastGetStatusRequest" jsonb NULL, "publicationViewsCount" integer NULL, "id" uuid NOT NULL PRIMARY KEY, "v" integer NULL, "createdAt" timestamp with time zone NULL, "updatedAt" timestamp with time zone NULL, "createdBy" uuid NULL, "updatedBy" uuid NULL, "deletedAt" timestamp with time zone NULL, "newId" jsonb NULL, "dv" integer NULL, "sender" jsonb NULL, "history_date" timestamp with time zone NOT NULL, "history_action" varchar(50) NOT NULL, "history_id" uuid NOT NULL);
--
-- Create model newsitemsharingproviderhistoryrecord
--
CREATE TABLE "NewsItemSharingProviderHistoryRecord" ("b2bApp" uuid NULL, "name" text NULL, "newsItemPostUrl" text NULL, "newsItemPreviewUrl" text NULL, "newsItemSendingFeatures" jsonb NULL, "id" uuid NOT NULL PRIMARY KEY, "v" integer NULL, "createdAt" timestamp with time zone NULL, "updatedAt" timestamp with time zone NULL, "createdBy" uuid NULL, "updatedBy" uuid NULL, "deletedAt" timestamp with time zone NULL, "newId" jsonb NULL, "dv" integer NULL, "sender" jsonb NULL, "history_date" timestamp with time zone NOT NULL, "history_action" varchar(50) NOT NULL, "history_id" uuid NOT NULL);
--
-- Create model newsitemsharingprovider
--
CREATE TABLE "NewsItemSharingProvider" ("name" text NOT NULL, "newsItemPostUrl" text NOT NULL, "newsItemPreviewUrl" text NOT NULL, "newsItemSendingFeatures" jsonb NOT NULL, "id" uuid NOT NULL PRIMARY KEY, "v" integer NOT NULL, "createdAt" timestamp with time zone NULL, "updatedAt" timestamp with time zone NULL, "deletedAt" timestamp with time zone NULL, "newId" uuid NULL, "dv" integer NOT NULL, "sender" jsonb NOT NULL, "b2bApp" uuid NOT NULL, "createdBy" uuid NULL, "updatedBy" uuid NULL);
--
-- Create model newsitemsharing
--
CREATE TABLE "NewsItemSharing" ("sharingParams" jsonb NULL, "status" varchar(50) NOT NULL, "statusMessage" text NULL, "lastGetRecipientsRequest" jsonb NULL, "lastPostRequest" jsonb NULL, "lastGetStatusRequest" jsonb NULL, "publicationViewsCount" integer NOT NULL, "id" uuid NOT NULL PRIMARY KEY, "v" integer NOT NULL, "createdAt" timestamp with time zone NULL, "updatedAt" timestamp with time zone NULL, "deletedAt" timestamp with time zone NULL, "newId" uuid NULL, "dv" integer NOT NULL, "sender" jsonb NOT NULL, "b2bAppContext" uuid NOT NULL, "createdBy" uuid NULL, "newsItem" uuid NOT NULL, "newsItemSharingProvider" uuid NOT NULL, "updatedBy" uuid NULL);
CREATE INDEX "NewsItemSharingHistoryRecord_history_id_5fa11e8a" ON "NewsItemSharingHistoryRecord" ("history_id");
CREATE INDEX "NewsItemSharingProviderHistoryRecord_history_id_9791e15b" ON "NewsItemSharingProviderHistoryRecord" ("history_id");
ALTER TABLE "NewsItemSharingProvider" ADD CONSTRAINT "NewsItemSharingProvider_b2bApp_d2554fa7_fk_B2BApp_id" FOREIGN KEY ("b2bApp") REFERENCES "B2BApp" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "NewsItemSharingProvider" ADD CONSTRAINT "NewsItemSharingProvider_createdBy_b02ec1a4_fk_User_id" FOREIGN KEY ("createdBy") REFERENCES "User" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "NewsItemSharingProvider" ADD CONSTRAINT "NewsItemSharingProvider_updatedBy_79e1f978_fk_User_id" FOREIGN KEY ("updatedBy") REFERENCES "User" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "NewsItemSharingProvider_createdAt_8c95f454" ON "NewsItemSharingProvider" ("createdAt");
CREATE INDEX "NewsItemSharingProvider_updatedAt_fd8f671d" ON "NewsItemSharingProvider" ("updatedAt");
CREATE INDEX "NewsItemSharingProvider_deletedAt_f9354b62" ON "NewsItemSharingProvider" ("deletedAt");
CREATE INDEX "NewsItemSharingProvider_b2bApp_d2554fa7" ON "NewsItemSharingProvider" ("b2bApp");
CREATE INDEX "NewsItemSharingProvider_createdBy_b02ec1a4" ON "NewsItemSharingProvider" ("createdBy");
CREATE INDEX "NewsItemSharingProvider_updatedBy_79e1f978" ON "NewsItemSharingProvider" ("updatedBy");
ALTER TABLE "NewsItemSharing" ADD CONSTRAINT "NewsItemSharing_b2bAppContext_e0cf7cb0_fk_B2BAppContext_id" FOREIGN KEY ("b2bAppContext") REFERENCES "B2BAppContext" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "NewsItemSharing" ADD CONSTRAINT "NewsItemSharing_createdBy_88c15177_fk_User_id" FOREIGN KEY ("createdBy") REFERENCES "User" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "NewsItemSharing" ADD CONSTRAINT "NewsItemSharing_newsItem_a240ebff_fk_NewsItem_id" FOREIGN KEY ("newsItem") REFERENCES "NewsItem" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "NewsItemSharing" ADD CONSTRAINT "NewsItemSharing_newsItemSharingProvi_865bebf6_fk_NewsItemS" FOREIGN KEY ("newsItemSharingProvider") REFERENCES "NewsItemSharingProvider" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "NewsItemSharing" ADD CONSTRAINT "NewsItemSharing_updatedBy_2235acd6_fk_User_id" FOREIGN KEY ("updatedBy") REFERENCES "User" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "NewsItemSharing_createdAt_64d3c725" ON "NewsItemSharing" ("createdAt");
CREATE INDEX "NewsItemSharing_updatedAt_113d0da1" ON "NewsItemSharing" ("updatedAt");
CREATE INDEX "NewsItemSharing_deletedAt_cdfd0f39" ON "NewsItemSharing" ("deletedAt");
CREATE INDEX "NewsItemSharing_b2bAppContext_e0cf7cb0" ON "NewsItemSharing" ("b2bAppContext");
CREATE INDEX "NewsItemSharing_createdBy_88c15177" ON "NewsItemSharing" ("createdBy");
CREATE INDEX "NewsItemSharing_newsItem_a240ebff" ON "NewsItemSharing" ("newsItem");
CREATE INDEX "NewsItemSharing_newsItemSharingProvider_865bebf6" ON "NewsItemSharing" ("newsItemSharingProvider");
CREATE INDEX "NewsItemSharing_updatedBy_2235acd6" ON "NewsItemSharing" ("updatedBy");
COMMIT;

    `)
}

exports.down = async (knex) => {
    await knex.raw(`
    BEGIN;
--
-- Create model newsitemsharing
--
DROP TABLE "NewsItemSharing" CASCADE;
--
-- Create model newsitemsharingprovider
--
DROP TABLE "NewsItemSharingProvider" CASCADE;
--
-- Create model newsitemsharingproviderhistoryrecord
--
DROP TABLE "NewsItemSharingProviderHistoryRecord" CASCADE;
--
-- Create model newsitemsharinghistoryrecord
--
DROP TABLE "NewsItemSharingHistoryRecord" CASCADE;
COMMIT;

    `)
}
