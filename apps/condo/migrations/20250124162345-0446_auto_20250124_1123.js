// auto generated by kmigrator
// KMIGRATOR:0446_auto_20250124_1123:IyBHZW5lcmF0ZWQgYnkgRGphbmdvIDQuMCBvbiAyMDI1LTAxLTI0IDExOjIzCgpmcm9tIGRqYW5nby5kYiBpbXBvcnQgbWlncmF0aW9ucwoKCmNsYXNzIE1pZ3JhdGlvbihtaWdyYXRpb25zLk1pZ3JhdGlvbik6CgogICAgZGVwZW5kZW5jaWVzID0gWwogICAgICAgICgnX2RqYW5nb19zY2hlbWEnLCAnMDQ0NV9vcmdhbml6YXRpb25lbXBsb3llZXJlcXVlc3RoaXN0b3J5cmVjb3JkX2FuZF9tb3JlJyksCiAgICBdCgogICAgb3BlcmF0aW9ucyA9IFsKICAgIF0K

exports.up = async () => {
    const Redis = require('ioredis')
    const conf = require('@open-condo/config')

    if (conf['REDIS_URL'] === undefined) {
        throw new Error('Redis URL missing. You should specify a REDIS_URL env variable for establishing connection')
    }

    const client = new Redis(conf['REDIS_URL'])

    const stepSize = 1000
    const fromPrefix = ''
    const toPrefix = 'condo:'
    let cursor = '0'

    // eslint-disable-next-line no-constant-condition
    while (true) {
        const [newCursor, keys] = await client.scan(cursor, 'MATCH', '*', 'COUNT', stepSize)
        cursor = newCursor
        const transaction = client.multi()

        for (const key of keys) {
            if (fromPrefix.length && !key.startsWith(fromPrefix)) continue
            if (toPrefix.length && key.startsWith(toPrefix)) continue

            transaction.renamenx(key, toPrefix + key.substring(fromPrefix.length))
        }
        await transaction.exec()

        if (cursor === '0') {
            console.log('All keys successfully renamed')
            break
        }
    }
}

exports.down = async () => {
    const Redis = require('ioredis')
    const conf = require('@open-condo/config')

    if (conf['REDIS_URL'] === undefined) {
        throw new Error('Redis URL missing. You should specify a REDIS_URL env variable for establishing connection')
    }

    const client = new Redis(conf['REDIS_URL'])

    const stepSize = 1000
    const fromPrefix = 'condo:'
    const toPrefix = ''
    let cursor = '0'

    // eslint-disable-next-line no-constant-condition
    while (true) {
        const [newCursor, keys] = await client.scan(cursor, 'MATCH', '*', 'COUNT', stepSize)
        cursor = newCursor
        const transaction = client.multi()

        for (const key of keys) {
            if (fromPrefix.length && !key.startsWith(fromPrefix)) continue
            if (toPrefix.length && key.startsWith(toPrefix)) continue

            transaction.renamenx(key, toPrefix + key.substring(fromPrefix.length))
        }
        await transaction.exec()

        if (cursor === '0') {
            console.log('All keys successfully renamed')
            break
        }
    }
}
