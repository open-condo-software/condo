// auto generated by kmigrator
// KMIGRATOR:0338_auto_20231031_1126:

exports.up = async (knex) => {
    await knex.raw(`
    BEGIN;
--
-- Create model telegramuserchathistoryrecord
--
CREATE TABLE "TelegramUserChatHistoryRecord" ("user" uuid NULL, "telegramChatId" text NULL, "id" uuid NOT NULL PRIMARY KEY, "v" integer NULL, "createdAt" timestamp with time zone NULL, "updatedAt" timestamp with time zone NULL, "createdBy" uuid NULL, "updatedBy" uuid NULL, "deletedAt" timestamp with time zone NULL, "newId" jsonb NULL, "dv" integer NULL, "sender" jsonb NULL, "history_date" timestamp with time zone NOT NULL, "history_action" varchar(50) NOT NULL, "history_id" uuid NOT NULL);
--
-- Alter field messageType on notificationusersetting
--
--
-- Create model telegramuserchat
--
CREATE TABLE "TelegramUserChat" ("telegramChatId" text NOT NULL, "id" uuid NOT NULL PRIMARY KEY, "v" integer NOT NULL, "createdAt" timestamp with time zone NULL, "updatedAt" timestamp with time zone NULL, "deletedAt" timestamp with time zone NULL, "newId" uuid NULL, "dv" integer NOT NULL, "sender" jsonb NOT NULL, "createdBy" uuid NULL, "updatedBy" uuid NULL, "user" uuid NOT NULL);
--
-- Create constraint TelegramUserChat_unique_telegramChatId on model telegramuserchat
--
CREATE UNIQUE INDEX "TelegramUserChat_unique_telegramChatId" ON "TelegramUserChat" ("telegramChatId") WHERE "deletedAt" IS NULL;
CREATE INDEX "TelegramUserChatHistoryRecord_history_id_0b476dba" ON "TelegramUserChatHistoryRecord" ("history_id");
ALTER TABLE "TelegramUserChat" ADD CONSTRAINT "TelegramUserChat_createdBy_091d3f52_fk_User_id" FOREIGN KEY ("createdBy") REFERENCES "User" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "TelegramUserChat" ADD CONSTRAINT "TelegramUserChat_updatedBy_6a85980f_fk_User_id" FOREIGN KEY ("updatedBy") REFERENCES "User" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "TelegramUserChat" ADD CONSTRAINT "TelegramUserChat_user_56ec4bb0_fk_User_id" FOREIGN KEY ("user") REFERENCES "User" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "TelegramUserChat_createdAt_65f1ac24" ON "TelegramUserChat" ("createdAt");
CREATE INDEX "TelegramUserChat_updatedAt_7f6c0d34" ON "TelegramUserChat" ("updatedAt");
CREATE INDEX "TelegramUserChat_deletedAt_178fcd04" ON "TelegramUserChat" ("deletedAt");
CREATE INDEX "TelegramUserChat_createdBy_091d3f52" ON "TelegramUserChat" ("createdBy");
CREATE INDEX "TelegramUserChat_updatedBy_6a85980f" ON "TelegramUserChat" ("updatedBy");
CREATE INDEX "TelegramUserChat_user_56ec4bb0" ON "TelegramUserChat" ("user");
COMMIT;

    `)
}

exports.down = async (knex) => {
    await knex.raw(`
    BEGIN;
--
-- Create constraint TelegramUserChat_unique_telegramChatId on model telegramuserchat
--
DROP INDEX IF EXISTS "TelegramUserChat_unique_telegramChatId";
--
-- Create model telegramuserchat
--
DROP TABLE "TelegramUserChat" CASCADE;
--
-- Alter field messageType on notificationusersetting
--
--
-- Create model telegramuserchathistoryrecord
--
DROP TABLE "TelegramUserChatHistoryRecord" CASCADE;
COMMIT;

    `)
}
