/**
 * Generated by `createschema scope.AssigneeScope 'user:Relationship:User:CASCADE; ticket:Relationship:Ticket:CASCADE;'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@condo/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObjects,
} = require('@condo/domains/common/utils/testSchema')

const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

const { AssigneeScope, createTestAssigneeScope, updateTestAssigneeScope } = require('@condo/domains/scope/utils/testSchema')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestTicket, updateTestTicket } = require('@condo/domains/ticket/utils/testSchema')

describe('AssigneeScope', () => {
    describe('access', () => {
        describe('admin', () => {
            it('can create AssigneeScope', async () => {
                const admin = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [ticket] = await createTestTicket(admin, organization, property)

                const [assigneeScope] = await createTestAssigneeScope(admin, userClient.user, ticket)

                expect(assigneeScope.id).toMatch(UUID_RE)
                expect(assigneeScope.user.id).toEqual(userClient.user.id)
                expect(assigneeScope.ticket.id).toEqual(ticket.id)
            })

            it('can update property scope', async () => {
                const admin = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [ticket] = await createTestTicket(admin, organization, property)
                const [ticket1] = await createTestTicket(admin, organization, property)

                const [assigneeScope] = await createTestAssigneeScope(admin, userClient.user, ticket)
                const [updatedAssigneeScope] = await updateTestAssigneeScope(admin, assigneeScope.id, {
                    ticket: { connect: { id: ticket1.id } },
                })

                expect(updatedAssigneeScope.id).toEqual(assigneeScope.id)
                expect(updatedAssigneeScope.ticket.id).toEqual(ticket1.id)
            })
        })

        describe('employee', async () => {
            it('can read AssigneeScopes with user matches to client user', async () => {
                const admin = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                await createTestOrganizationEmployee(admin, organization, userClient.user, role)
                const [property] = await createTestProperty(admin, organization)
                const [ticket] = await createTestTicket(admin, organization, property)

                const [assigneeScope] = await createTestAssigneeScope(admin, userClient.user, ticket)

                const readAssigneeScope = await AssigneeScope.getOne(userClient, { id: assigneeScope.id })

                expect(readAssigneeScope.id).toEqual(assigneeScope.id)
            })

            it('cannot read AssigneeScopes with user not matches to client user', async () => {
                const admin = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const userClient1 = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                await createTestOrganizationEmployee(admin, organization, userClient.user, role)
                const [property] = await createTestProperty(admin, organization)
                const [ticket] = await createTestTicket(admin, organization, property)

                const [assigneeScope] = await createTestAssigneeScope(admin, userClient.user, ticket)

                const readAssigneeScope = await AssigneeScope.getOne(userClient1, { id: assigneeScope.id })

                expect(readAssigneeScope).toBeUndefined()
            })

            it('cannot create AssigneeScope', async () => {
                const admin = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                await createTestOrganizationEmployee(admin, organization, userClient.user, role)

                const [property] = await createTestProperty(admin, organization)
                const [ticket] = await createTestTicket(admin, organization, property)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestAssigneeScope(userClient, userClient.user, ticket)
                })
            })

            it('cannot update AssigneeScope', async () => {
                const admin = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [ticket] = await createTestTicket(admin, organization, property)
                const [ticket1] = await createTestTicket(admin, organization, property)

                const [assigneeScope] = await createTestAssigneeScope(admin, userClient.user, ticket)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestAssigneeScope(userClient, assigneeScope.id, {
                        ticket: { connect: { id: ticket1.id } },
                    })
                })
            })
        })

        describe('anonymous', async () => {
            it('cannot read AssigneeScope', async () => {
                const admin = await makeLoggedInAdminClient()
                const anonClient = await makeClient()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [ticket] = await createTestTicket(admin, organization, property)

                const [assigneeScope] = await createTestAssigneeScope(admin, admin.user, ticket)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await AssigneeScope.getOne(anonClient, { id: assigneeScope.id })
                })
            })

            it('cannot create AssigneeScope', async () => {
                const admin = await makeLoggedInAdminClient()
                const anonClient = await makeClient()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [ticket] = await createTestTicket(admin, organization, property)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestAssigneeScope(anonClient, admin.user, ticket)
                })
            })

            it('cannot update AssigneeScope', async () => {
                const admin = await makeLoggedInAdminClient()
                const anonClient = await makeClient()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [ticket] = await createTestTicket(admin, organization, property)

                const [assigneeScope] = await createTestAssigneeScope(admin, admin.user, ticket)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestAssigneeScope(anonClient, assigneeScope.id, {})
                })
            })
        })
    })

    describe('logic', () => {
        it('create AssigneeScope when user is assigned as executor or assignee to ticket', async () => {
            const admin = await makeLoggedInAdminClient()
            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

            const [organization] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canBeAssignedAsExecutor: true,
            })
            await createTestOrganizationEmployee(admin, organization, userClient.user, role)

            const [ticket1] = await createTestTicket(admin, organization, property, {
                assignee: { connect: { id: userClient.user.id } },
            })

            const readAssigneeScope1 = await AssigneeScope.getOne(userClient, {
                user: { id: userClient.id },
                ticket: { id: ticket1.id },
            })

            expect(readAssigneeScope1).toBeDefined()

            const [ticket2] = await createTestTicket(admin, organization, property, {
                executor: { connect: { id: userClient.user.id } },
            })

            const readAssigneeScope2 = await AssigneeScope.getOne(userClient, {
                user: { id: userClient.id },
                ticket: { id: ticket2.id },
            })

            expect(readAssigneeScope2).toBeDefined()
        })

        it('don\'t create AssigneeScope when user already assigned to ticket', async () => {
            const admin = await makeLoggedInAdminClient()
            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

            const [organization] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canBeAssignedAsExecutor: true,
            })
            await createTestOrganizationEmployee(admin, organization, userClient.user, role)

            const [ticket] = await createTestTicket(admin, organization, property, {
                assignee: { connect: { id: userClient.user.id } },
            })

            await updateTestTicket(admin, ticket.id, {
                executor: { connect: { id: userClient.user.id } },
            })

            const readAssigneeScope = await AssigneeScope.getAll(userClient, {
                user: { id: userClient.id },
                ticket: { id: ticket.id },
            })

            expect(readAssigneeScope).toHaveLength(1)
        })

        it('soft delete AssigneeScope when user is completely unassigned from ticket', async () => {
            const admin = await makeLoggedInAdminClient()
            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

            const [organization] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canBeAssignedAsExecutor: true,
            })
            await createTestOrganizationEmployee(admin, organization, userClient.user, role)

            const [ticket] = await createTestTicket(admin, organization, property, {
                assignee: { connect: { id: userClient.user.id } },
                executor: { connect: { id: userClient.user.id } },
            })

            await updateTestTicket(admin, ticket.id, {
                assignee: { disconnectAll: true },
                executor: { disconnectAll: true },
            })

            const readAssigneeScopes = await AssigneeScope.getAll(userClient, {
                user: { id: userClient.id },
                ticket: { id: ticket.id },
                deletedAt_not: null,
            })

            expect(readAssigneeScopes).toHaveLength(1)
            expect(readAssigneeScopes[0].deletedAt).toBeDefined()
        })

        it('don\'t soft delete AssigneeScope when user is unassigned from ticket as executor, but he is ticket assignee', async () => {
            const admin = await makeLoggedInAdminClient()
            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

            const [organization] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canBeAssignedAsExecutor: true,
            })
            await createTestOrganizationEmployee(admin, organization, userClient.user, role)

            const [ticket] = await createTestTicket(admin, organization, property, {
                assignee: { connect: { id: userClient.user.id } },
                executor: { connect: { id: userClient.user.id } },
            })

            await updateTestTicket(admin, ticket.id, {
                executor: { disconnectAll: true },
            })

            const readAssigneeScopes = await AssigneeScope.getAll(userClient, {
                user: { id: userClient.id },
                ticket: { id: ticket.id },
            })

            expect(readAssigneeScopes).toHaveLength(1)
        })

        it('don\'t soft delete AssigneeScope when user is unassigned from ticket as assignee, but he is ticket executor', async () => {
            const admin = await makeLoggedInAdminClient()
            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

            const [organization] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canBeAssignedAsExecutor: true,
            })
            await createTestOrganizationEmployee(admin, organization, userClient.user, role)

            const [ticket] = await createTestTicket(admin, organization, property, {
                assignee: { connect: { id: userClient.user.id } },
                executor: { connect: { id: userClient.user.id } },
            })

            await updateTestTicket(admin, ticket.id, {
                assignee: { disconnectAll: true },
            })

            const readAssigneeScopes = await AssigneeScope.getAll(userClient, {
                user: { id: userClient.id },
                ticket: { id: ticket.id },
            })

            expect(readAssigneeScopes).toHaveLength(1)
        })
    })
})
