/**
 * Generated by `createservice scope.ExportPropertyScopeService`
 */

const { GQLCustomSchema } = require('@condo/keystone/schema')
const access = require('@condo/domains/scope/access/ExportPropertyScopeService')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@condo/keystone/errors')
const { NOT_FOUND, NOTHING_TO_EXPORT } = require('@condo/domains/common/constants/errors')
const { extractReqLocale } = require('@condo/locales/extractReqLocale')
const conf = require('@condo/config')
const { i18n } = require('@condo/locales/loader')
const get = require('lodash/get')
const { createExportFile } = require('@condo/domains/common/utils/createExportFile')
const dayjs = require('dayjs')
const { getHeadersTranslations, EXPORT_TYPE_PROPERTY_SCOPES } = require('@condo/domains/common/utils/exportToExcel')
const { loadPropertyScopesForExcelExport, loadPropertyScopePropertiesForExcelExport, loadPropertyScopeEmployeesForExcelExport, loadOrganizationEmployeeSpecializationsForExcelExport } = require('@condo/domains/scope/utils/serverSchema')
const uniq = require('lodash/uniq')


const CONTACTS_EXPORT_TEMPLATE_PATH = './domains/scope/templates/PropertyScopesExportTemplate.xlsx'

const errors = {
    NOTHING_TO_EXPORT: {
        query: 'exportPropertyScopesToExcel',
        code: BAD_USER_INPUT,
        type: NOTHING_TO_EXPORT,
        message: 'No property scopes found to export',
        messageForUser: 'api.contact.exportContactsToExcel.NOTHING_TO_EXPORT',
    },
}

const mapEmployeesToExcelRow = (employees, employeesSpecializations, locale) => {
    const allSpecializationsMessage = i18n('employee.AllSpecializations', { locale })
    const employeeSpecializationsCountMessage = i18n('excelExport.propertyScopes.employeeSpecializationsCount', { locale })

    return employees
        .map(employee => {
            if (employee.hasAllSpecializations) {
                return `${employee.employeeName} (${allSpecializationsMessage})`
            }

            const employeeSpecializations = employeesSpecializations.filter(spec => spec.employee === employee.employee)

            if (employeeSpecializations.length > 0) {
                if (employeesSpecializations.length === 1) {
                    return `${employee.employeeName} (${employeeSpecializations[0].specialization})`
                } else {
                    return `${employee.employeeName} (${employeeSpecializationsCountMessage}${employeesSpecializations.length})`
                }
            } else {
                return employee.employeeName
            }
        })
        .join(';\n')
}

const ExportPropertyScopeToExcelService = new GQLCustomSchema('ExportPropertyScopeToExcelService', {
    types: [
        {
            access: true,
            type: 'input ExportPropertyScopeToExcelInput { dv: Int!, sender: SenderFieldInput!, where: PropertyScopeWhereInput!, sortBy: [SortPropertyScopesBy!] }',
        },
        {
            access: true,
            type: 'type ExportPropertyScopeToExcelOutput { status: String!, linkToFile: String! }',
        },
    ],
    queries: [
        {
            access: access.canExportPropertyScope,
            schema: 'exportPropertyScopesToExcel(data: ExportPropertyScopeToExcelInput!): ExportPropertyScopeToExcelOutput',
            resolver: async (parent, args, context) => {
                const { where, sortBy } = args.data
                const locale = extractReqLocale(context.req) || conf.DEFAULT_LOCALE
                const allPropertiesMessage = i18n('pages.condo.settings.propertyScope.allProperties', { locale })
                const allEmployeesMessage = i18n('pages.condo.settings.propertyScope.allEmployees', { locale })
                const headerMessage = i18n('excelExport.headers.propertyScopes.title', { locale, meta: { date: dayjs().format('DD.MM.YYYY') } })

                const propertyScopes = await loadPropertyScopesForExcelExport({ where, sortBy })
                if (propertyScopes.length === 0) {
                    throw new GQLError(errors.NOTHING_TO_EXPORT, context)
                }

                const propertyScopeIds = propertyScopes.map(scope => scope.id)
                const propertyScopeProperties = await loadPropertyScopePropertiesForExcelExport({
                    where: {
                        propertyScope: { id_in: propertyScopeIds },
                    },
                })

                const propertyScopeOrganizationEmployees = await loadPropertyScopeEmployeesForExcelExport({
                    where: {
                        propertyScope: { id_in: propertyScopeIds },
                    },
                })

                const employeeIds = uniq(propertyScopeOrganizationEmployees.map(scope => scope.employee))
                const employeesSpecializations = await loadOrganizationEmployeeSpecializationsForExcelExport({
                    employee: { id_in: employeeIds },
                })

                const excelRows = propertyScopes.map(propertyScope => {
                    const properties = propertyScopeProperties.filter(scope => scope.propertyScope === propertyScope.id)
                    const employees = propertyScopeOrganizationEmployees.filter(scope => scope.propertyScope === propertyScope.id)

                    return {
                        name: i18n(propertyScope.name, { locale }) || propertyScope.name,
                        properties: propertyScope.hasAllProperties ? allPropertiesMessage : properties.map(prop => prop.property).join(';\n'),
                        employees: propertyScope.hasAllEmployees ? allEmployeesMessage : mapEmployeesToExcelRow(employees, employeesSpecializations, locale),
                    }
                })

                const { url: linkToFile } = await createExportFile({
                    fileName: `propertyScopes_${dayjs().format('DD_MM')}.xlsx`,
                    templatePath: CONTACTS_EXPORT_TEMPLATE_PATH,
                    replaces: {
                        propertyScopes: excelRows,
                        header: headerMessage,
                        i18n: {
                            ...getHeadersTranslations(EXPORT_TYPE_PROPERTY_SCOPES, locale),
                            sheetName: i18n('excelExport.sheetNames.propertyScopes', { locale }),
                        },
                    },
                    meta: {
                        listkey: 'PropertyScope',
                        id: propertyScopes[0].id,
                    },
                })
                return { status: 'ok', linkToFile }
            },
        },
    ],
    mutations: [],
    
})

module.exports = {
    ExportPropertyScopeToExcelService,
}
