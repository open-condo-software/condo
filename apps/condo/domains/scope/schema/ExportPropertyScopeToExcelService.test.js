/**
 * Generated by `createservice scope.ExportPropertyScopeService`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')

const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { EXPORT_PROPERTY_SCOPE_QUERY } = require('@condo/domains/scope/gql')
const { createTestPropertyScope } = require('@condo/domains/scope/utils/testSchema')
const { createTestUser, makeLoggedInClient } = require('@condo/domains/user/utils/testSchema')
 
describe('ExportPropertyScopeToExcelService', () => {
    describe('User', () => {
        it('can get property scope export from selected organization', async () => {
            const client = await makeClientWithProperty()
            await createTestPropertyScope(client, client.organization)

            const variables = {
                data: {
                    dv: 1,
                    sender: { dv: 1, fingerprint: 'test-' + faker.random.alphaNumeric(8) },
                    where: { organization: { id: client.organization.id } },
                    sortBy: 'id_ASC',
                },
            }
            const { data: { result: { status, linkToFile } } } = await client.query(EXPORT_PROPERTY_SCOPE_QUERY, variables)

            expect(status).toBe('ok')
            expect(linkToFile).not.toHaveLength(0)
        })

        it('can not get property scope export from another organization', async () => {
            const admin = await makeLoggedInAdminClient()
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            const client2 = await makeClientWithProperty()
            await createTestPropertyScope(client2, client2.organization)

            const variables = {
                data: {
                    dv: 1,
                    sender: { dv: 1, fingerprint: 'test-' + faker.random.alphaNumeric(8) },
                    where: { organization: { id: client2.organization.id } },
                    sortBy: 'id_ASC',
                },
            }
            const { data: { result }, errors } = await client.query(EXPORT_PROPERTY_SCOPE_QUERY, variables)

            expect(result).toBeNull()
            expect(errors).toHaveLength(1)
        })
    })

    describe('Anonymous', () => {
        it('can not get property scopes export', async () => {
            const client = await makeClient()
            const client2 = await makeClientWithProperty()
            await createTestPropertyScope(client2, client2.organization)

            const { data: { result }, errors } = await client.query(EXPORT_PROPERTY_SCOPE_QUERY, {
                data: {
                    dv: 1,
                    sender: { dv: 1, fingerprint: 'test-' + faker.random.alphaNumeric(8) },
                    where: { organization: { id: client2.organization.id } },
                    sortBy: 'id_ASC',
                },
            })
            expect(result).toBeNull()
            expect(errors).toHaveLength(1)
        })
    })
})