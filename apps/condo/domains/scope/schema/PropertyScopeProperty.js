/**
 * Generated by `createschema scope.PropertyScopeProperty 'propertyScope:Relationship:PropertyScope:CASCADE; property:Relationship:Property:CASCADE;'`
 */

const { Relationship } = require('@keystonejs/fields')

const { GQLListSchema } = require('@condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@condo/keystone/plugins')

const access = require('@condo/domains/scope/access/PropertyScopeProperty')


const PropertyScopeProperty = new GQLListSchema('PropertyScopeProperty', {
    schemaDoc: 'Many-to-many relationship between PropertyScope and Property',
    fields: {

        propertyScope: {
            type: Relationship,
            ref: 'PropertyScope',
            schemaDoc: 'Property scope which has a property',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        property: {
            type: Relationship,
            ref: 'Property',
            schemaDoc: 'A property which is in the property scope',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['propertyScope', 'property'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'property_scope_property_unique_propertyScope_and_property',
            },
        ],
    },
    plugins: [
        uuided(),
        versioned(),
        tracked(),
        softDeleted(),
        dvAndSender(),
        historical(),
    ],
    access: {
        read: access.canReadPropertyScopeProperties,
        create: access.canManagePropertyScopeProperties,
        update: access.canManagePropertyScopeProperties,
        delete: false,
        auth: true,
    },
})

module.exports = {
    PropertyScopeProperty,
}
