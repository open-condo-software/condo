/**
 * Generated by `createschema scope.PropertyScopeProperty 'propertyScope:Relationship:PropertyScope:CASCADE; property:Relationship:Property:CASCADE;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')
const { Json } = require('@condo/keystone/fields')
const { GQLListSchema } = require('@condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@condo/keystone/plugins')
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')
const access = require('@condo/domains/scope/access/PropertyScopeProperty')


const PropertyScopeProperty = new GQLListSchema('PropertyScopeProperty', {
    // TODO(codegen): write doc for the PropertyScopeProperty domain model!
    schemaDoc: 'TODO DOC!',
    fields: {

        propertyScope: {
            // TODO(codegen): write doc for PropertyScopeProperty.propertyScope field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'PropertyScope',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        property: {
            // TODO(codegen): write doc for PropertyScopeProperty.property field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadPropertyScopeProperties,
        create: access.canManagePropertyScopeProperties,
        update: access.canManagePropertyScopeProperties,
        delete: false,
        auth: true,
    },
})

module.exports = {
    PropertyScopeProperty,
}
