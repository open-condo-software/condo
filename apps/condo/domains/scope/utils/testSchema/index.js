/**
 * Generated by `createschema scope.PropertyScope 'name:Text; organization:Relationship:Organization:CASCADE;isDefault:Checkbox;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const { faker } = require('@faker-js/faker')

const { PropertyScope: PropertyScopeGQL } = require('@condo/domains/scope/gql')
const { PropertyScopeOrganizationEmployee: PropertyScopeOrganizationEmployeeGQL } = require('@condo/domains/scope/gql')
const { PropertyScopeProperty: PropertyScopePropertyGQL } = require('@condo/domains/scope/gql')
const { AssigneeScope: AssigneeScopeGQL } = require('@condo/domains/scope/gql')
const { generateGQLTestUtils } = require('@open-condo/codegen/generate.test.utils')
const { EXPORT_PROPERTY_SCOPE_MUTATION } = require('@condo/domains/scope/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const PropertyScope = generateGQLTestUtils(PropertyScopeGQL)
const PropertyScopeOrganizationEmployee = generateGQLTestUtils(PropertyScopeOrganizationEmployeeGQL)
const PropertyScopeProperty = generateGQLTestUtils(PropertyScopePropertyGQL)
const AssigneeScope = generateGQLTestUtils(AssigneeScopeGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createTestPropertyScope (client, organization, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const name = faker.lorem.word()

    const attrs = {
        dv: 1,
        sender,
        organization: { connect: { id: organization.id } },
        name,
        ...extraAttrs,
    }
    const obj = await PropertyScope.create(client, attrs)
    return [obj, attrs]
}

async function updateTestPropertyScope (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await PropertyScope.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestPropertyScopeOrganizationEmployee (client, propertyScope, employee, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!propertyScope || !propertyScope.id) throw new Error('no propertyScope.id')
    if (!employee || !employee.id) throw new Error('no employee.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        propertyScope: { connect: { id: propertyScope.id } },
        employee: { connect: { id: employee.id } },
        ...extraAttrs,
    }
    const obj = await PropertyScopeOrganizationEmployee.create(client, attrs)
    return [obj, attrs]
}

async function updateTestPropertyScopeOrganizationEmployee (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await PropertyScopeOrganizationEmployee.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestPropertyScopeProperty (client, propertyScope, property, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!propertyScope || !propertyScope.id) throw new Error('no propertyScope.id')
    if (!property || !property.id) throw new Error('no property.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        propertyScope: { connect: { id: propertyScope.id } },
        property: { connect: { id: property.id } },
        ...extraAttrs,
    }
    const obj = await PropertyScopeProperty.create(client, attrs)
    return [obj, attrs]
}

async function updateTestPropertyScopeProperty (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await PropertyScopeProperty.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestAssigneeScope (client, user, ticket, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!user || !user.id) throw new Error('no user.id')
    if (!ticket || !ticket.id) throw new Error('no ticket.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        user: { connect: { id: user.id } },
        ticket: { connect: { id: ticket.id } },
        ...extraAttrs,
    }
    const obj = await AssigneeScope.create(client, attrs)
    return [obj, attrs]
}

async function updateTestAssigneeScope (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await AssigneeScope.update(client, id, attrs)
    return [obj, attrs]
}


async function exportPropertyScopeByTestClient(client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const { data, errors } = await client.mutate(EXPORT_PROPERTY_SCOPE_MUTATION, { data: attrs })
    throwIfError(data, errors)
    return [data.result, attrs]
}
/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    PropertyScope, createTestPropertyScope, updateTestPropertyScope,
    PropertyScopeOrganizationEmployee, createTestPropertyScopeOrganizationEmployee, updateTestPropertyScopeOrganizationEmployee,
    PropertyScopeProperty, createTestPropertyScopeProperty, updateTestPropertyScopeProperty,
    AssigneeScope, createTestAssigneeScope, updateTestAssigneeScope,
    exportPropertyScopeByTestClient,
/* AUTOGENERATE MARKER <EXPORTS> */
}
