/**
 * Generated by `createschema scope.PropertyScope 'name:Text; organization:Relationship:Organization:CASCADE;isDefault:Checkbox;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const { generateServerUtils, execGqlWithoutAccess } = require('@open-condo/codegen/generate.server.utils')
const { find } = require('@open-condo/keystone/schema')

const { GqlWithKnexLoadList } = require('@condo/domains/common/utils/serverSchema')
const { PropertyScope: PropertyScopeGQL } = require('@condo/domains/scope/gql')
const { PropertyScopeOrganizationEmployee: PropertyScopeOrganizationEmployeeGQL } = require('@condo/domains/scope/gql')
const { PropertyScopeProperty: PropertyScopePropertyGQL } = require('@condo/domains/scope/gql')
const { AssigneeScope: AssigneeScopeGQL } = require('@condo/domains/scope/gql')
const { EXPORT_PROPERTY_SCOPE_MUTATION } = require('@condo/domains/scope/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const PropertyScope = generateServerUtils(PropertyScopeGQL)
const PropertyScopeOrganizationEmployee = generateServerUtils(PropertyScopeOrganizationEmployeeGQL)
const PropertyScopeProperty = generateServerUtils(PropertyScopePropertyGQL)
const AssigneeScope = generateServerUtils(AssigneeScopeGQL)
/* AUTOGENERATE MARKER <CONST> */


async function exportPropertyScope (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: EXPORT_PROPERTY_SCOPE_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to exportPropertyScope',
        dataPath: 'obj',
    })
}

async function createDefaultPropertyScopeForNewOrganization (context, organization, dvSenderData) {
    await PropertyScope.create(context, {
        name: 'pages.condo.settings.propertyScope.default.name',
        organization: { connect: { id: organization.id } },
        hasAllProperties: true,
        hasAllEmployees: true,
        ...dvSenderData,
    })
}

async function softDeletePropertyScopeProperties (context, updatedItem) {
    const { dv, sender, id } = updatedItem

    const propertyScopeProperties = await PropertyScopeProperty.getAll(context, {
        property: { id },
        deletedAt: null,
    })

    for (const propertyScopeProperty of propertyScopeProperties) {
        await PropertyScopeProperty.update(context, propertyScopeProperty.id, {
            deletedAt: 'true',
            dv, sender,
        })
    }
}

async function softDeletePropertyScopeOrganizationEmployee (context, updatedItem) {
    const { dv, sender, id } = updatedItem

    const propertyScopeEmployees = await PropertyScopeOrganizationEmployee.getAll(context, {
        employee: { id },
        deletedAt: null,
    })

    for (const propertyScopeEmployee of propertyScopeEmployees) {
        await PropertyScopeOrganizationEmployee.update(context, propertyScopeEmployee.id, {
            deletedAt: 'true',
            dv, sender,
        })
    }
}

async function getPropertyScopes (employeeIds) {
    const propertyScopeEmployees = await find('PropertyScopeOrganizationEmployee', {
        employee: { id_in: employeeIds },
        deletedAt: null,
    })

    const propertyScopeIds = propertyScopeEmployees.map(propertyScopeEmployee => propertyScopeEmployee.propertyScope)
    const propertyScopes = await find('PropertyScope', {
        OR: [
            { id_in: propertyScopeIds },
            { hasAllEmployees: true },
        ],
        deletedAt: null,
    })

    const propertyScopeProperties = await find('PropertyScopeProperty', {
        propertyScope: { id_in: propertyScopes.map(scope => scope.id) },
        deletedAt: null,
    })

    return propertyScopes.map(scope => {
        const properties = propertyScopeProperties
            .filter(({ propertyScope }) => propertyScope === scope.id)
            .map(({ property }) => property)
        const employees = propertyScopeEmployees
            .filter(({ propertyScope }) => propertyScope === scope.id)
            .map(({ employee }) => employee)

        return { ...scope, properties, employees }
    })
}

const loadPropertyScopesForExcelExport = async ({ where = {}, sortBy = ['createdAt_DESC'] }) => {
    const propertyScopesLoader = new GqlWithKnexLoadList({
        listKey: 'PropertyScope',
        fields: 'id name hasAllProperties hasAllEmployees',
        sortBy,
        where,
    })
    return await propertyScopesLoader.load()
}

const loadPropertyScopePropertiesForExcelExport = async ({ where = {}, sortBy = ['createdAt_DESC'] }) => {
    const propertyScopePropertyLoader = new GqlWithKnexLoadList({
        listKey: 'PropertyScopeProperty',
        fields: 'id',
        singleRelations: [
            ['Property', 'property', 'address'],
            ['PropertyScope', 'propertyScope', 'id'],
        ],
        sortBy,
        where,
    })
    return await propertyScopePropertyLoader.load()
}

const loadPropertyScopeEmployeesForExcelExport = async ({ where = {}, sortBy = ['createdAt_DESC'] }) => {
    const propertyScopeEmployeesLoader = new GqlWithKnexLoadList({
        listKey: 'PropertyScopeOrganizationEmployee',
        fields: 'id',
        singleRelations: [
            ['OrganizationEmployee', 'employee', 'name', 'employeeName'],
            ['OrganizationEmployee', 'employee', 'id'],
            ['OrganizationEmployee', 'employee', 'hasAllSpecializations', 'hasAllSpecializations'],
            ['PropertyScope', 'propertyScope', 'id'],
            ['OrganizationEmployee', 'employee', 'isBlocked', 'isBlocked'],
        ],
        sortBy,
        where,
    })
    return await propertyScopeEmployeesLoader.load()
}

const loadOrganizationEmployeeSpecializationsForExcelExport = async ({ where = {}, sortBy = ['createdAt_DESC'] }) => {
    const organizationEmployeeSpecializationsLoader = new GqlWithKnexLoadList({
        listKey: 'OrganizationEmployeeSpecialization',
        fields: 'id',
        singleRelations: [
            ['TicketCategoryClassifier', 'specialization', 'name'],
            ['OrganizationEmployee', 'employee', 'id'],
        ],
        sortBy,
        where,
    })
    return await organizationEmployeeSpecializationsLoader.load()
}

module.exports = {
    PropertyScope,
    PropertyScopeOrganizationEmployee,
    PropertyScopeProperty,
    createDefaultPropertyScopeForNewOrganization,
    getPropertyScopes,
    softDeletePropertyScopeProperties,
    softDeletePropertyScopeOrganizationEmployee,
    AssigneeScope,
    exportPropertyScope,
    loadPropertyScopesForExcelExport,
    loadPropertyScopePropertiesForExcelExport,
    loadPropertyScopeEmployeesForExcelExport,
    loadOrganizationEmployeeSpecializationsForExcelExport,
/* AUTOGENERATE MARKER <EXPORTS> */
}
