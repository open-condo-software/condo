/**
 * Generated by `createschema scope.PropertyScope 'name:Text; organization:Relationship:Organization:CASCADE;isDefault:Checkbox;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */

const { generateServerUtils } = require('@condo/domains/common/utils/codegeneration/generate.server.utils')

const { PropertyScope: PropertyScopeGQL } = require('@condo/domains/scope/gql')
const { PropertyScopeOrganizationEmployee: PropertyScopeOrganizationEmployeeGQL } = require('@condo/domains/scope/gql')
const { PropertyScopeProperty: PropertyScopePropertyGQL } = require('@condo/domains/scope/gql')
const { SpecializationScope: SpecializationScopeGQL } = require('@condo/domains/scope/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const PropertyScope = generateServerUtils(PropertyScopeGQL)
const PropertyScopeOrganizationEmployee = generateServerUtils(PropertyScopeOrganizationEmployeeGQL)
const PropertyScopeProperty = generateServerUtils(PropertyScopePropertyGQL)
const SpecializationScope = generateServerUtils(SpecializationScopeGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createDefaultPropertyScopeForNewOrganization (context, organization, dvSenderData) {
    // TODO(DOMA-4065): Узнать какое имя должно быть у дефолтного скопа, сделать переводы, доставать из организации локаль (?)
    await PropertyScope.create(context, {
        name: 'Default',
        organization: { connect: { id: organization.id } },
        isDefault: true,
        ...dvSenderData,
    })
}

async function managePropertyScopeOrganizationEmployee (context, existingItem, updatedItem, operation) {
    const isCreateOperation = operation === 'create'
    const isSoftDeleteOperation = operation === 'update' && !existingItem.deletedAt && Boolean(updatedItem.deletedAt)
    const { dv, sender } = updatedItem

    if (isCreateOperation || isSoftDeleteOperation) {
        const employeeId = updatedItem.id

        if (isCreateOperation) {
            const organizationId = updatedItem.organization
            const defaultPropertyScope = await PropertyScope.getOne(context, { organization: { id: organizationId }, isDefault: true })

            if (!defaultPropertyScope) return

            await PropertyScopeOrganizationEmployee.create(context, {
                propertyScope: { connect: { id: defaultPropertyScope.id } },
                employee: { connect: { id: employeeId } },
                dv, sender,
            })
        } else {
            const propertyScopeOrganizationEmployees = await PropertyScopeOrganizationEmployee.getAll(context, {
                employee: { id: employeeId },
            })

            for (const propertyScopeOrganizationEmployee of propertyScopeOrganizationEmployees) {
                await PropertyScopeOrganizationEmployee.update(context, propertyScopeOrganizationEmployee.id, {
                    deletedAt: 'true',
                    dv, sender,
                })
            }
        }
    }
}

async function softDeletePropertyScopeProperties (context, updatedItem) {
    const { dv, sender, id } = updatedItem

    const propertyScopeProperties = await PropertyScopeProperty.getAll(context, {
        property: { id },
    })

    for (const propertyScopeProperty of propertyScopeProperties) {
        await PropertyScopeProperty.update(context, propertyScopeProperty.id, {
            deletedAt: 'true',
            dv, sender,
        })
    }
}

module.exports = {
    PropertyScope,
    PropertyScopeOrganizationEmployee,
    PropertyScopeProperty,
    SpecializationScope,
    createDefaultPropertyScopeForNewOrganization,
    managePropertyScopeOrganizationEmployee,
    softDeletePropertyScopeProperties,
/* AUTOGENERATE MARKER <EXPORTS> */
}
