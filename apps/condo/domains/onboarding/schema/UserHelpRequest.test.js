/**
 * Generated by `createschema onboarding.UserHelpRequest 'type:Select:callback;importFile;user:Relationship:User:CASCADE;organization:Relationship:Organization:CASCADE;phone:Text;file?:File;meta?:Json'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor, expectValuesOfCommonFields } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects,
} = require('@open-condo/keystone/test.utils')

const { UserHelpRequest, createTestUserHelpRequest, updateTestUserHelpRequest } = require('@condo/domains/onboarding/utils/testSchema')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { createTestPhone } = require('@condo/domains/user/utils/testSchema')


describe('UserHelpRequest', () => {
    let admin, support, anonymous, organization, employeeUser, notEmployeeUser, employeeUserRequest

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        notEmployeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()

        const [testOrganization] = await createTestOrganization(admin)
        organization = testOrganization

        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageCallRecords: true,
            canManageTickets: true,
        })
        await createTestOrganizationEmployee(admin, organization, employeeUser.user, role)

        const [helpRequest] = await createTestUserHelpRequest(employeeUser, organization)
        employeeUserRequest = helpRequest
    })

    describe('Access', () => {
        describe('Create', () => {
            it('admin can', async () => {
                const phone = createTestPhone()

                const [helpRequest] = await createTestUserHelpRequest(admin, organization, {
                    phone,
                })

                expect(helpRequest).toBeDefined()
                expect(helpRequest.phone).toEqual(phone)
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestUserHelpRequest(anonymous, organization)
                })
            })

            it('support can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestUserHelpRequest(support, organization)
                })
            })

            it('user: can if he is employee', async () => {
                const [helpRequest] = await createTestUserHelpRequest(employeeUser, organization)

                expect(helpRequest).toBeDefined()
                expect(helpRequest.phone).toEqual(employeeUser.userAttrs.phone)
            })

            it('user: can not if he is not employee', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestUserHelpRequest(notEmployeeUser, organization)
                })
            })
        })

        describe('Read', () => {
            it('admin can', async () => {
                const readHelpRequest = await UserHelpRequest.getOne(admin, { id: employeeUserRequest.id })
                expect(readHelpRequest).toBeDefined()
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await UserHelpRequest.getOne(anonymous, { id: employeeUserRequest.id })
                })
            })

            it('support can', async () => {
                const readHelpRequest = await UserHelpRequest.getOne(support, { id: employeeUserRequest.id })
                expect(readHelpRequest).toBeDefined()
            })

            it('user: can read own help requests', async () => {
                const readHelpRequest = await UserHelpRequest.getOne(employeeUser, { id: employeeUserRequest.id })
                expect(readHelpRequest).toBeDefined()
            })

            it('user: can not read not his help requests', async () => {
                const readHelpRequest = await UserHelpRequest.getOne(notEmployeeUser, { id: employeeUserRequest.id })
                expect(readHelpRequest).toBeUndefined()
            })
        })

        describe('Update', () => {
            let payload
            beforeAll(async () => {
                payload = { meta: { test: 'test' } }
            })

            it('admin can', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)
                const [updatedHelpRequest] = await updateTestUserHelpRequest(admin, helpRequest.id, payload)

                expect(updatedHelpRequest.meta).toEqual(payload.meta)
            })

            it('anonymous can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestUserHelpRequest(anonymous, helpRequest.id, payload)
                })
            })

            it('support can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(support, helpRequest.id, payload)
                })
            })

            it('user: can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(employeeUser, helpRequest.id, payload)
                })
            })
        })

        describe('Soft Delete', () => {
            it('admin can', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)
                const [deletedRequest] = await updateTestUserHelpRequest(admin, helpRequest.id, { deletedAt: 'true' })

                expect(deletedRequest.deletedAt).toBeDefined()
            })

            it('anonymous can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestUserHelpRequest(anonymous, helpRequest.id, { deletedAt: 'true' })
                })
            })

            it('support can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(support, helpRequest.id, { deletedAt: 'true' })
                })
            })

            it('user: can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(employeeUser, helpRequest.id, { deletedAt: 'true' })
                })
            })
        })

        describe('Delete', () => {
            it('admin can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await UserHelpRequest.delete(admin, helpRequest.id)
                })
            })

            it('anonymous can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await UserHelpRequest.delete(anonymous, helpRequest.id)
                })
            })

            it('support can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await UserHelpRequest.delete(support, helpRequest.id)
                })
            })

            it('user: can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await UserHelpRequest.delete(employeeUser, helpRequest.id)
                })
            })
        })
    })
})
