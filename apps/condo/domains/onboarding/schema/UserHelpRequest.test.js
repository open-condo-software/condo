/**
 * Generated by `createschema onboarding.UserHelpRequest 'type:Select:callback;importFile;user:Relationship:User:CASCADE;organization:Relationship:Organization:CASCADE;phone:Text;file?:File;meta?:Json'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, expectToThrowGQLError } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { COMMON_ERRORS } = require('@condo/domains/common/constants/errors')
const { UserHelpRequest, createTestUserHelpRequest, updateTestUserHelpRequest } = require('@condo/domains/onboarding/utils/testSchema')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser, makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')
const { createTestPhone } = require('@condo/domains/user/utils/testSchema')


const UPDATE_PAYLOAD = { isReadyToSend: true }

describe('UserHelpRequest', () => {
    let admin, support, anonymous, organization, employeeUser, notEmployeeUser, employeeUserRequest, residentClient

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        notEmployeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()

        const [testOrganization] = await createTestOrganization(admin)
        organization = testOrganization

        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageCallRecords: true,
            canManageTickets: true,
        })
        await createTestOrganizationEmployee(admin, organization, employeeUser.user, role, { isAccepted: true })

        const [helpRequest] = await createTestUserHelpRequest(employeeUser, organization)
        employeeUserRequest = helpRequest

        residentClient = await makeClientWithResidentUser()
    })

    describe('Access', () => {
        describe('Create', () => {
            it('admin can', async () => {
                const phone = createTestPhone()

                const [helpRequest] = await createTestUserHelpRequest(admin, organization, {
                    phone,
                })

                expect(helpRequest).toBeDefined()
                expect(helpRequest.phone).toEqual(phone)
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestUserHelpRequest(anonymous, organization)
                })
            })

            it('support can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestUserHelpRequest(support, organization)
                })
            })

            it('user: can if he is employee', async () => {
                const [helpRequest] = await createTestUserHelpRequest(employeeUser, organization)

                expect(helpRequest).toBeDefined()
                expect(helpRequest.phone).toEqual(employeeUser.userAttrs.phone)
            })

            it('user: can not if he is not employee', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestUserHelpRequest(notEmployeeUser, organization)
                })
            })

            it('user with resident type: can not create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestUserHelpRequest(residentClient, organization)
                })
            })
        })

        describe('Read', () => {
            it('admin can', async () => {
                const readHelpRequest = await UserHelpRequest.getOne(admin, { id: employeeUserRequest.id })
                expect(readHelpRequest).toBeDefined()
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await UserHelpRequest.getOne(anonymous, { id: employeeUserRequest.id })
                })
            })

            it('support can', async () => {
                const readHelpRequest = await UserHelpRequest.getOne(support, { id: employeeUserRequest.id })
                expect(readHelpRequest).toBeDefined()
            })

            it('user: can read own help requests', async () => {
                const readHelpRequest = await UserHelpRequest.getOne(employeeUser, { id: employeeUserRequest.id })
                expect(readHelpRequest).toBeDefined()
            })

            it('user: can not read not his help requests', async () => {
                const readHelpRequest = await UserHelpRequest.getOne(notEmployeeUser, { id: employeeUserRequest.id })
                expect(readHelpRequest).toBeUndefined()
            })
        })

        describe('Update', () => {
            it('admin can', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization, {
                    isReadyToSend: false,
                })
                const [updatedHelpRequest] = await updateTestUserHelpRequest(admin, helpRequest.id, UPDATE_PAYLOAD)

                expect(updatedHelpRequest.isReadyToSend).toBeTruthy()
            })

            it('anonymous can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization, {
                    isReadyToSend: false,
                })

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestUserHelpRequest(anonymous, helpRequest.id, UPDATE_PAYLOAD)
                })
            })

            it('support can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization, {
                    isReadyToSend: false,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(support, helpRequest.id, UPDATE_PAYLOAD)
                })
            })

            it('user: can update his help request', async () => {
                const [helpRequest] = await createTestUserHelpRequest(employeeUser, organization, {
                    isReadyToSend: false,
                })

                const [updatedHelpRequest] = await updateTestUserHelpRequest(employeeUser, helpRequest.id, UPDATE_PAYLOAD)

                expect(updatedHelpRequest.isReadyToSend).toBeTruthy()
            })

            it('user: can not update not his help request', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization, {
                    isReadyToSend: false,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(employeeUser, helpRequest.id, UPDATE_PAYLOAD)
                })
            })

            it('user: can update only isReadyToSend field from false to true', async () => {
                const [helpRequest] = await createTestUserHelpRequest(employeeUser, organization, {
                    isReadyToSend: false,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(employeeUser, helpRequest.id, {
                        meta: { test: '123' },
                    })
                })

                const [updatedHelpRequest] = await updateTestUserHelpRequest(employeeUser, helpRequest.id, {
                    isReadyToSend: true,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(employeeUser, updatedHelpRequest.id, {
                        isReadyToSend: false,
                    })
                })
            })

            it('user with resident type: can not update', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization, {
                    isReadyToSend: false,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(residentClient, helpRequest.id, UPDATE_PAYLOAD)
                })
            })
        })

        describe('Soft Delete', () => {
            it('admin can', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)
                const [deletedRequest] = await updateTestUserHelpRequest(admin, helpRequest.id, { deletedAt: 'true' })

                expect(deletedRequest.deletedAt).toBeDefined()
            })

            it('anonymous can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestUserHelpRequest(anonymous, helpRequest.id, { deletedAt: 'true' })
                })
            })

            it('support can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(support, helpRequest.id, { deletedAt: 'true' })
                })
            })

            it('user: can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserHelpRequest(employeeUser, helpRequest.id, { deletedAt: 'true' })
                })
            })
        })

        describe('Delete', () => {
            it('admin can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await UserHelpRequest.delete(admin, helpRequest.id)
                })
            })

            it('anonymous can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await UserHelpRequest.delete(anonymous, helpRequest.id)
                })
            })

            it('support can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await UserHelpRequest.delete(support, helpRequest.id)
                })
            })

            it('user: can not', async () => {
                const [helpRequest] = await createTestUserHelpRequest(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await UserHelpRequest.delete(employeeUser, helpRequest.id)
                })
            })
        })
    })

    describe('Validations', () => {
        it('can create help request with right format phone', async () => {
            const phone = createTestPhone()

            const [helpRequest] = await createTestUserHelpRequest(admin, organization, {
                phone,
            })

            expect(helpRequest).toBeDefined()
            expect(helpRequest.phone).toEqual(phone)
        })

        it('can not create help request with wrong format phone', async () => {
            const wrongPhone = faker.random.alphaNumeric(8)

            await expectToThrowGQLError(
                async () => await createTestUserHelpRequest(admin, organization, { phone: wrongPhone }),
                { ...COMMON_ERRORS.WRONG_PHONE_FORMAT }
            )
        })

        it('can not update phone if no phone passed in update input', async () => {
            const phone = createTestPhone()

            const [helpRequest] = await createTestUserHelpRequest(admin, organization, {
                phone,
            })

            expect(helpRequest).toBeDefined()
            expect(helpRequest.phone).toEqual(phone)

            const updatePayload = { meta: { test: '123' } }
            const [updatedHelpRequest] = await updateTestUserHelpRequest(admin, helpRequest.id, updatePayload)

            expect(updatedHelpRequest.phone).toEqual(helpRequest.phone)
            expect(updatedHelpRequest.meta).toEqual(updatePayload.meta)
        })

    })
})
