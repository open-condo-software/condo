/**
 * Generated by `createschema onboarding.TourStep 'organization:Relationship:Organization:CASCADE;type:Select:ticket,property;status:Select:todo,waiting,disabled,completed;order:Integer;'`
 */

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/onboarding/access/TourStep')
const { STEP_TYPES, STEP_STATUSES } = require('@condo/domains/onboarding/constants/steps')


const TourStep = new GQLListSchema('TourStep', {
    schemaDoc: 'One of the few steps in the tour for the organization',
    fields: {
        organization: {
            schemaDoc: 'The organization which tour connected',
            type: 'Relationship',
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
        type: {
            schemaDoc: 'Type of the tour step. It is need to understand what this step is responsible for',
            type: 'Select',
            options: STEP_TYPES,
            isRequired: true,
        },
        status: {
            schemaDoc: 'Step status, may be todo, waiting, completed and disabled',
            type: 'Select',
            options: STEP_STATUSES,
            isRequired: true,
        },
        order: {
            schemaDoc: 'Used for sorting',
            type: 'Integer',
            isRequired: true,
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization', 'type'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'tourStep_unique_organization_type',
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadTourSteps,
        create: access.canManageTourSteps,
        update: access.canManageTourSteps,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TourStep,
}
