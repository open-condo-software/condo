/**
 * Generated by `createschema onboarding.TourStep 'organization:Relationship:Organization:CASCADE;type:Select:ticket,property;status:Select:todo,waiting,disabled,completed;order:Integer;'`
 */

const isEmpty = require('lodash/isEmpty')

const { GQLError } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, find } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/onboarding/access/TourStep')
const { ERRORS } = require('@condo/domains/onboarding/constants/errors')
const { STEP_TYPES, STEP_STATUSES, COMPLETED_STEP_STATUS, ENABLED_STEPS_AFTER_COMPLETE, TODO_STEP_STATUS } = require('@condo/domains/onboarding/constants/steps')
const { TourStep: TourStepApi } = require('@condo/domains/onboarding/utils/serverSchema')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')


const TourStep = new GQLListSchema('TourStep', {
    schemaDoc: 'One of the few steps in the tour for the organization',
    fields: {
        organization: ORGANIZATION_OWNED_FIELD,
        type: {
            schemaDoc: 'Type of the tour step. It is need to understand what this step is responsible for',
            type: 'Select',
            options: STEP_TYPES,
            isRequired: true,
            access: { read: true, create: true, update: false },
        },
        status: {
            schemaDoc: 'Step status, may be todo, waiting, completed and disabled',
            type: 'Select',
            options: STEP_STATUSES,
            isRequired: true,
        },
        order: {
            schemaDoc: 'Used for sorting',
            type: 'Integer',
            isRequired: true,
            access: { read: true, create: true, update: false },
        },
    },
    hooks: {
        validateInput: async ({ existingItem, operation, context }) => {
            if (operation !== 'update') return

            const existedStatus = existingItem.status
            if (existedStatus === COMPLETED_STEP_STATUS) {
                throw new GQLError(ERRORS.UPDATE_COMPLETED_STEP_TYPE, context)
            }
        },
        afterChange: async ({ context, operation, existingItem, updatedItem }) => {
            const isCompleteStepOperation = operation === 'update' &&
                existingItem.status !== COMPLETED_STEP_STATUS &&
                updatedItem.status === COMPLETED_STEP_STATUS

            if (isCompleteStepOperation) {
                const typesToEnable = ENABLED_STEPS_AFTER_COMPLETE[existingItem.type]

                if (!isEmpty(typesToEnable)) {
                    const dvSenderFields = { dv: updatedItem.dv, sender: updatedItem.sender }
                    const stepOrganizationId = existingItem.organization
                    const stepsToUpdate = await find('TourStep', {
                        deletedAt: null,
                        type_in: typesToEnable,
                        organization: { id: stepOrganizationId },
                        status_not: COMPLETED_STEP_STATUS,
                    })
                    const data = stepsToUpdate.map(step => ({
                        id: step.id,
                        data: {
                            status: TODO_STEP_STATUS,
                            ...dvSenderFields,
                        },
                    }))

                    await TourStepApi.updateMany(context, data)
                }
            }
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization', 'type'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'tourStep_unique_organization_type',
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadTourSteps,
        create: access.canManageTourSteps,
        update: access.canManageTourSteps,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TourStep,
}
