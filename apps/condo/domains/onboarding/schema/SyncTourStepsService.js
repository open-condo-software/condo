/**
 * Generated by `createservice onboarding.SyncTourStepsService '--type=mutations'`
 */

const isEmpty = require('lodash/isEmpty')

const { GQLError } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, find, itemsQuery } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/onboarding/access/SyncTourStepsService')
const { SYNC_TOUR_STEPS_ERRORS } = require('@condo/domains/onboarding/constants/errors')
const {
    CREATE_PROPERTY_STEP_TYPE,
    CREATE_PROPERTY_MAP_STEP_TYPE,
    CREATE_TICKET_STEP_TYPE,
    CREATE_METER_STEP_TYPE,
    COMPLETED_STEP_STATUS,
    UPLOAD_RECEIPTS_STEP_TYPE,
    CREATE_METER_READINGS_STEP_TYPE,
    CREATE_NEWS_STEP_TYPE,
} = require('@condo/domains/onboarding/constants/steps')
const { TourStep } = require('@condo/domains/onboarding/utils/serverSchema')


const SyncTourStepsService = new GQLCustomSchema('SyncTourStepsService', {
    types: [
        {
            access: true,
            type: 'input SyncTourStepsInput { dv: Int!, sender: SenderFieldInput!, organization: OrganizationWhereUniqueInput! }',
        },
        {
            access: true,
            type: 'type SyncTourStepsOutput { ok: String! }',
        },
    ],

    mutations: [
        {
            access: access.canSyncTourSteps,
            schema: 'syncTourSteps(data: SyncTourStepsInput!): SyncTourStepsOutput',
            schemaDoc: 'Updates organization tour steps according to changes of related tour step objects. ' +
                'Used on web client to sync TourSteps state with actions which was made from api or something.',
            resolver: async (parent, args, context) => {
                const { data: { organization: { id: organizationId } } } = args

                const defaultOrganizationQuery = {
                    organization: { id: organizationId },
                    deletedAt: null,
                }
                const tourSteps = await find('TourStep', defaultOrganizationQuery)

                if (tourSteps.length === 0) {
                    throw new GQLError(SYNC_TOUR_STEPS_ERRORS.TOUR_STEPS_NOT_FOUND, context)
                }

                const stepToItemsQuery = {
                    [CREATE_PROPERTY_STEP_TYPE]: {
                        list: 'Property',
                        where: defaultOrganizationQuery,
                    },
                    [CREATE_PROPERTY_MAP_STEP_TYPE]: {
                        list: 'Property',
                        where: { ...defaultOrganizationQuery, map_not: null },
                    },
                    [CREATE_TICKET_STEP_TYPE]: {
                        list: 'Ticket',
                        where: defaultOrganizationQuery,
                    },
                    [UPLOAD_RECEIPTS_STEP_TYPE]: {
                        list: 'BillingReceipt',
                        where: {
                            context: { organization: { id: organizationId }, deletedAt: null },
                            deletedAt: null,
                        },
                    },
                    [CREATE_METER_STEP_TYPE]: {
                        list: 'Meter',
                        where: defaultOrganizationQuery,
                    },
                    [CREATE_METER_READINGS_STEP_TYPE]: {
                        list: 'MeterReading',
                        where: defaultOrganizationQuery,
                    },
                    [CREATE_NEWS_STEP_TYPE]: {
                        list: 'NewsItem',
                        where: defaultOrganizationQuery,
                    },
                }
                const notCompletedSteps = tourSteps.filter(step => step.status !== COMPLETED_STEP_STATUS)

                for (const { type, id } of notCompletedSteps) {
                    if (!stepToItemsQuery[type]) continue

                    const objs = await itemsQuery(stepToItemsQuery[type].list, {
                        where: stepToItemsQuery[type].where,
                        first: 1,
                    })

                    if (!isEmpty(objs)) {
                        await TourStep.update(context, id, {
                            status: COMPLETED_STEP_STATUS,
                            dv: 1,
                            sender: { fingerprint: 'sync-tour-steps', dv: 1 },
                        })
                    }
                }

                return { ok: true }
            },
        },
    ],

})

module.exports = {
    SyncTourStepsService,
}
