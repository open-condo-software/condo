/**
 * Generated by `createservice onboarding.SyncTourStepsService '--type=mutations'`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, find, itemsQuery } = require('@open-condo/keystone/schema')

const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const access = require('@condo/domains/onboarding/access/SyncTourStepsService')

const { TourStep } = require('../utils/serverSchema')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY: { mutation: 'syncTourSteps',
        variable: ['data', 'someVar'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
        code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@open-condo/keystone/errors'
        type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
        message: 'Describe what happened for developer',
        messageForUser: 'api.user.syncTourSteps.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
    },
}

const SyncTourStepsService = new GQLCustomSchema('SyncTourStepsService', {
    types: [
        {
            access: true,
            type: 'input SyncTourStepsInput { dv: Int!, sender: SenderFieldInput!, organizationId: ID! }',
        },
        {
            access: true,
            type: 'type SyncTourStepsOutput { ok: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canSyncTourSteps,
            schema: 'syncTourSteps(data: SyncTourStepsInput!): SyncTourStepsOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { organizationId } } = args

                const defaultOrganizationQuery = {
                    organization: { id: organizationId },
                    deletedAt: null,
                }

                const tourSteps = await find('TourStep', defaultOrganizationQuery)

                const { count: hasProperties } = await itemsQuery('Property', {
                    where: defaultOrganizationQuery,
                    first: 1,
                }, { meta: true })
                const { count: hasPropertiesWithMap } = await itemsQuery('Property', {
                    where: { ...defaultOrganizationQuery, map_not: null },
                    first: 1,
                }, { meta: true })
                const { count: hasTickets } = await itemsQuery('Ticket', {
                    where: defaultOrganizationQuery,
                    first: 1,
                }, { meta: true })
                const { count: hasBillingReceipts } = await itemsQuery('BillingReceipt', {
                    where: {
                        context: { organization: { id: organizationId }, deletedAt: null },
                        deletedAt: null,
                    },
                    first: 1,
                }, { meta: true })
                const { count: hasMeterReadings } = await itemsQuery('MeterReading', {
                    where: defaultOrganizationQuery,
                    first: 1,
                }, { meta: true })
                const { count: hasNews } = await itemsQuery('NewsItem', {
                    where: defaultOrganizationQuery,
                    first: 1,
                }, { meta: true })

                const stepTypeToCount = {
                    createProperty: hasProperties,
                    createPropertyMap: hasPropertiesWithMap,
                    createTicket: hasTickets,
                    uploadReceipts: hasBillingReceipts,
                    createMeterReadings: hasMeterReadings,
                    createNews: hasNews,
                }

                for (const step of tourSteps) {
                    if (step.status !== 'completed' && stepTypeToCount[step.type]) {
                        await TourStep.update(context, step.id, {
                            status: 'completed',
                            dv: 1,
                            sender: { fingerprint: 'sync-tour-steps', dv: 1 },
                        })
                    }
                }

                return { ok: true }
            },
        },
    ],
    
})

module.exports = {
    SyncTourStepsService,
}
