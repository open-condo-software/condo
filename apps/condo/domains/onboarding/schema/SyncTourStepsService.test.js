/**
 * Generated by `createservice onboarding.SyncTourStepsService '--type=mutations'`
 */

const { makeLoggedInAdminClient, makeClient, expectToThrowAccessDeniedErrorToResult, expectToThrowAuthenticationErrorToResult, catchErrorFrom } = require('@open-condo/keystone/test.utils')

const { SYNC_TOUR_STEPS_ERRORS } = require('@condo/domains/onboarding/constants/errors')
const { CREATE_PROPERTY_STEP_TYPE, TODO_STEP_STATUS, CREATE_PROPERTY_MAP_STEP_TYPE, DISABLED_STEP_STATUS, CREATE_TICKET_STEP_TYPE, COMPLETED_STEP_STATUS } = require('@condo/domains/onboarding/constants/steps')
const { syncTourStepsByTestClient, TourStep } = require('@condo/domains/onboarding/utils/testSchema')
const { registerNewOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee, createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { buildingMapJson } = require('@condo/domains/property/constants/property')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestTicket } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


describe('SyncTourStepsService', () => {
    let admin, support, organization
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        const [testOrganization] = await registerNewOrganization(admin)
        organization = testOrganization
    })

    describe('Access', () => {
        it('anonymous: can not execute', async () => {
            const client = await makeClient()

            await expectToThrowAuthenticationErrorToResult(async () => {
                await syncTourStepsByTestClient(client, organization)
            })
        })

        it('support: can not execute', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await syncTourStepsByTestClient(support, organization)
            })
        })

        it('admin: can execute', async () => {
            const [data] = await syncTourStepsByTestClient(admin, organization)
            expect(data.ok).toBeTruthy()
        })

        it('organization employee with canManageTour permission: can execute', async () => {
            const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, { canManageTour: true })
            await createTestOrganizationEmployee(admin, organization, employeeClient.user, role)

            const [data] = await syncTourStepsByTestClient(employeeClient, organization)
            expect(data.ok).toBeTruthy()
        })

        it('organization employee without canManageTour permission: can not execute', async () => {
            const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, { canManageTour: false })
            await createTestOrganizationEmployee(admin, organization, employeeClient.user, role)

            await expectToThrowAccessDeniedErrorToResult(async () => {
                await syncTourStepsByTestClient(employeeClient, organization)
            })
        })
    })

    describe('Logic', () => {
        it('updates TourSteps after create related objects and call syncTourSteps', async () => {
            const [organization] = await registerNewOrganization(admin)
            const stepsBeforeSync = await TourStep.getAll(admin, { organization: { id: organization.id } })

            expect(stepsBeforeSync).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    type: CREATE_PROPERTY_STEP_TYPE,
                    status: TODO_STEP_STATUS,
                }),
            ]))
            expect(stepsBeforeSync).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    type: CREATE_PROPERTY_MAP_STEP_TYPE,
                    status: DISABLED_STEP_STATUS,
                }),
            ]))
            expect(stepsBeforeSync).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    type: CREATE_TICKET_STEP_TYPE,
                    status: DISABLED_STEP_STATUS,
                }),
            ]))

            const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
            await createTestTicket(admin, organization, property)

            await syncTourStepsByTestClient(admin, organization)

            const stepsAfterSync = await TourStep.getAll(admin, { organization: { id: organization.id } })

            expect(stepsAfterSync).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    type: CREATE_PROPERTY_STEP_TYPE,
                    status: COMPLETED_STEP_STATUS,
                }),
            ]))
            expect(stepsAfterSync).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    type: CREATE_PROPERTY_MAP_STEP_TYPE,
                    status: COMPLETED_STEP_STATUS,
                }),
            ]))
            expect(stepsAfterSync).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    type: CREATE_TICKET_STEP_TYPE,
                    status: COMPLETED_STEP_STATUS,
                }),
            ]))
        })

        it('dont update completed step two times', async () => {
            const [organization] = await registerNewOrganization(admin)
            await createTestProperty(admin, organization)

            await syncTourStepsByTestClient(admin, organization)

            const syncedCreatePropertyStep = await TourStep.getOne(admin, {
                organization: { id: organization.id }, type: CREATE_PROPERTY_STEP_TYPE,
            })

            expect(syncedCreatePropertyStep.status).toEqual(COMPLETED_STEP_STATUS)

            const twoTimesSyncedCreatePropertyStep = await TourStep.getOne(admin, {
                organization: { id: organization.id }, type: CREATE_PROPERTY_STEP_TYPE,
            })

            expect(twoTimesSyncedCreatePropertyStep.status).toEqual(COMPLETED_STEP_STATUS)
            expect(twoTimesSyncedCreatePropertyStep.updatedAt).toEqual(syncedCreatePropertyStep.updatedAt)
        })

        it('throws TOUR_STEPS_NOT_FOUND error if no steps in organization', async () => {
            const [organization] = await createTestOrganization(admin)

            await catchErrorFrom(async () => {
                await syncTourStepsByTestClient(admin, organization)
            }, ({ errors }) => {
                expect(errors).toHaveLength(1)
                expect(errors[0].message).toEqual(SYNC_TOUR_STEPS_ERRORS.TOUR_STEPS_NOT_FOUND.message)
            })
        })
    })
})