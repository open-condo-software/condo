/**
 * Generated by `createschema onboarding.OnBoardingStep 'icon:Text; title:Text; description:Text; action:Select:create,read,update,delete; entity:Text; onBoarding:Relationship:OnBoarding:SET_NULL;'`
 */
const { createTestOnBoarding } = require('@condo/domains/onboarding/utils/testSchema')


const { makeClient, makeLoggedInClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { OnBoardingStep, createTestOnBoardingStep, updateTestOnBoardingStep } = require('@condo/domains/onboarding/utils/testSchema')
const { expectToThrowAuthenticationErrorToObjects, expectToThrowAuthenticationErrorToObj } = require('@condo/domains/common/utils/testSchema')

describe('OnBoardingStep', () => {
    test('user: create OnBoardingStep', async () => {
        const client = await makeLoggedInClient()

        const [onboarding] = await createTestOnBoarding(
            client,
            {
                type: 'ADMINISTRATOR',
                user: { connect: { id: client.user.id } },
                stepsTransitions: {},
            }
        )

        const [obj, attrs] = await createTestOnBoardingStep(client, onboarding, {
            icon: 'organization',
            required: true,
            title: 'title',
            description: 'description',
            action: 'create',
            entity: 'Organization',
            order: 1,
        })

        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.title).toEqual('title')
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
    })

    test('user: read OnBoardingStep', async () => {
        const client = await makeLoggedInClient()
        const [onboarding] = await createTestOnBoarding(
            client,
            {
                type: 'ADMINISTRATOR',
                user: { connect: { id: client.user.id } },
                stepsTransitions: {},
            }
        )

        const [obj, attrs] = await createTestOnBoardingStep(client, onboarding, {
            icon: 'organization',
            required: true,
            title: 'title',
            description: 'description',
            action: 'create',
            entity: 'Organization',
            order: 1,
        })

        const objs = await OnBoardingStep.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

        expect(objs.length >= 1).toBeTruthy()
        expect(objs[0].id).toMatch(obj.id)
        expect(objs[0].dv).toEqual(1)
        expect(objs[0].sender).toEqual(attrs.sender)
        expect(objs[0].v).toEqual(1)
        expect(objs[0].newId).toEqual(null)
        expect(objs[0].deletedAt).toEqual(null)
        expect(objs[0].createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objs[0].updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objs[0].createdAt).toMatch(obj.createdAt)
        expect(objs[0].updatedAt).toMatch(obj.updatedAt)
    })

    test('anonymous: read OnBoardingStep', async () => {
        const client = await makeClient()

        await expectToThrowAuthenticationErrorToObjects(async () => {
            await OnBoardingStep.getAll(client)
        })
    })

    test('user: update OnBoardingStep', async () => {
        const client = await makeLoggedInClient()
        const [onboarding] = await createTestOnBoarding(
            client,
            {
                type: 'ADMINISTRATOR',
                user: { connect: { id: client.user.id } },
                stepsTransitions: {},
            }
        )

        const [objCreated] = await createTestOnBoardingStep(client, onboarding, {
            icon: 'organization',
            required: true,
            title: 'title',
            description: 'description',
            action: 'create',
            entity: 'Organization',
            order: 1,
        })

        const payload = { completed: true }
        const [objUpdated, attrs] = await updateTestOnBoardingStep(client, objCreated.id, payload)

        expect(objUpdated.id).toEqual(objCreated.id)
        expect(objUpdated.dv).toEqual(1)
        expect(objUpdated.sender).toEqual(attrs.sender)
        expect(objUpdated.completed).toEqual(true)
        expect(objUpdated.v).toEqual(2)
        expect(objUpdated.newId).toEqual(null)
        expect(objUpdated.deletedAt).toEqual(null)
        expect(objUpdated.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objUpdated.createdAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).not.toEqual(objUpdated.createdAt)
    })

    test('anonymous: update OnBoardingStep', async () => {
        const client = await makeLoggedInClient()
        const [onboarding] = await createTestOnBoarding(
            client,
            {
                type: 'ADMINISTRATOR',
                user: { connect: { id: client.user.id } },
                stepsTransitions: {},
            }
        )

        const [objCreated] = await createTestOnBoardingStep(client, onboarding, {
            icon: 'organization',
            required: true,
            title: 'title',
            description: 'description',
            action: 'create',
            entity: 'Organization',
            order: 1,
        })

        const anonymus = await makeClient()
        const payload = { completed: true }
        await expectToThrowAuthenticationErrorToObj(async () => {
            await updateTestOnBoardingStep(anonymus, objCreated.id, payload)
        })
    })
})
