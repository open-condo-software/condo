/**
 * Generated by `createschema onboarding.TourStep 'organization:Relationship:Organization:CASCADE;type:Select:ticket,property;status:Select:todo,waiting,disabled,completed;order:Integer;'`
 */

const { makeLoggedInAdminClient, setFeatureFlag, expectToThrowGQLError, expectToThrowUniqueConstraintViolationError } = require('@open-condo/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToObj } = require('@open-condo/keystone/test.utils')

const { ORGANIZATION_TOUR } = require('@condo/domains/common/constants/featureflags')
const { ERRORS } = require('@condo/domains/onboarding/constants/errors')
const { STEP_TYPES, COMPLETED_STEP_STATUS, BILLING_STEP_TYPE, RESIDENT_STEP_TYPE, TODO_STEP_STATUS, DISABLED_STEP_STATUS } = require('@condo/domains/onboarding/constants/steps')
const { TourStep, createTestTourStep, updateTestTourStep } = require('@condo/domains/onboarding/utils/testSchema')
const { registerNewOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')


describe('TourStep', () => {
    let admin, organization, employeeWithPermissions, employeeWithoutPermissions

    beforeAll(async () => {
        setFeatureFlag(ORGANIZATION_TOUR, true)

        admin = await makeLoggedInAdminClient()
        const [newOrganization] = await registerNewOrganization(admin)
        organization = newOrganization

        const [roleWithPermissions] = await createTestOrganizationEmployeeRole(admin, organization, {
            canReadTour: true,
            canManageTour: true,
        })
        const [roleWithoutPermissions] = await createTestOrganizationEmployeeRole(admin, organization, {
            canReadTour: false,
            canManageTour: false,
        })

        employeeWithPermissions = await makeClientWithNewRegisteredAndLoggedInUser()
        employeeWithoutPermissions = await makeClientWithNewRegisteredAndLoggedInUser()

        await createTestOrganizationEmployee(admin, organization, employeeWithPermissions.user, roleWithPermissions)
        await createTestOrganizationEmployee(admin, organization, employeeWithoutPermissions.user, roleWithoutPermissions)
    })

    afterAll(() => {
        setFeatureFlag(ORGANIZATION_TOUR, false)
    })

    describe('Access', () => {
        describe('Employee', () => {
            it('With canManageTourPermission: can not create TourStep', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTourStep(employeeWithPermissions, organization, {})
                })
            })

            it('With canManageTourPermission: can update TourStep', async () => {
                const [step] = await TourStep.getAll(employeeWithPermissions, {
                    organization: { id: organization.id },
                    status: TODO_STEP_STATUS,
                })
                const [updatedStep] = await updateTestTourStep(employeeWithPermissions, step.id, { status: COMPLETED_STEP_STATUS })

                expect(updatedStep.status).toEqual(COMPLETED_STEP_STATUS)
            })

            it('Without canManageTourPermission: can not update TourStep', async () => {
                const [step] = await TourStep.getAll(employeeWithPermissions, {
                    organization: { id: organization.id },
                    status: TODO_STEP_STATUS,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTourStep(employeeWithoutPermissions, step.id, { status: COMPLETED_STEP_STATUS })
                })
            })

            it('With canReadTour: can read TourStep', async () => {
                const steps = await TourStep.getAll(employeeWithPermissions, { organization: { id: organization.id } })

                expect(steps).toHaveLength(STEP_TYPES.length)
            })

            it('Without canReadTour: can not read TourStep', async () => {
                const steps = await TourStep.getAll(employeeWithoutPermissions, { organization: { id: organization.id } })

                expect(steps).toHaveLength(0)
            })
        })
    })

    describe('Logic', () => {
        it('Tour steps created after organization registered', async () => {
            const [newOrganization] = await registerNewOrganization(admin)
            const steps = await TourStep.getAll(admin, { organization: { id: newOrganization.id } })

            expect(steps).toHaveLength(STEP_TYPES.length)
        })

        it('Enable step after complete previous step', async () => {
            const [newOrganization] = await registerNewOrganization(admin)
            const billingStep = await TourStep.getOne(admin, {
                type: BILLING_STEP_TYPE,
                organization: { id: newOrganization.id },
            })

            const residentStepBeforeUpdate = await TourStep.getOne(admin, {
                type: RESIDENT_STEP_TYPE,
                organization: { id: newOrganization.id },
            })

            expect(residentStepBeforeUpdate.status).toEqual(DISABLED_STEP_STATUS)

            await updateTestTourStep(admin, billingStep.id, {
                status: COMPLETED_STEP_STATUS,
            })

            const residentStep = await TourStep.getOne(admin, {
                type: RESIDENT_STEP_TYPE,
                organization: { id: newOrganization.id },
            })

            expect(residentStep.status).toEqual(TODO_STEP_STATUS)
        })
    })

    describe('Validation', () => {
        it('can not update TourStep fields, instead of status and order', async () => {
            const [step] = await TourStep.getAll(admin, {
                organization: { id: organization.id },
                status: TODO_STEP_STATUS,
                type_not: RESIDENT_STEP_TYPE,
            })

            await expectToThrowGQLError(async () => {
                await updateTestTourStep(admin, step.id, {
                    type: RESIDENT_STEP_TYPE,
                })
            }, ERRORS.UPDATE_FIELDS_ACCESS_DENIED)
        })

        it('can not update status of completed TourStep', async () => {
            const [step] = await TourStep.getAll(admin, {
                organization: { id: organization.id },
                status: COMPLETED_STEP_STATUS,
            })

            await expectToThrowGQLError(async () => {
                await updateTestTourStep(admin, step.id, {
                    status: TODO_STEP_STATUS,
                })
            }, ERRORS.UPDATE_COMPLETED_STEP_TYPE)
        })

        it('can not create TourStep with same organization and type', async () => {
            const [tourStep] = await TourStep.getAll(admin, { organization: { id: organization.id } })

            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestTourStep(admin, organization, {
                    type: tourStep.type,
                    status: TODO_STEP_STATUS,
                    order: 1,
                })
            }, 'tourStep_unique_organization_type')
        })
    })
})
