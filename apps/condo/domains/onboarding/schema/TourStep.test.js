/**
 * Generated by `createschema onboarding.TourStep 'organization:Relationship:Organization:CASCADE;type:Select:ticket,property;status:Select:todo,waiting,disabled,completed;order:Integer;'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor, expectValuesOfCommonFields, setFeatureFlag } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects,
} = require('@open-condo/keystone/test.utils')

const { ORGANIZATION_TOUR } = require('@condo/domains/common/constants/featureflags')
const { STEP_TYPES } = require('@condo/domains/onboarding/constants/steps')
const { TourStep, createTestTourStep, updateTestTourStep } = require('@condo/domains/onboarding/utils/testSchema')
const { registerNewOrganization } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


describe('TourStep', () => {
    beforeAll(() => {
        setFeatureFlag(ORGANIZATION_TOUR, true)
    })

    afterAll(() => {
        setFeatureFlag(ORGANIZATION_TOUR, false)
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()

                const [organization] = await registerNewOrganization(admin)

                const objs = await TourStep.getAll(admin, { organization: { id: organization.id } })

                expect(objs).toHaveLength(STEP_TYPES.length)
            })
        })
    })
})
