/**
 * Generated by `createschema onboarding.UserHelpRequest 'type:Select:callback;importFile;organization:Relationship:Organization:CASCADE;phone:Text;file?:File;meta?:Json'`
 */
const get = require('lodash/get')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { getFileMetaAfterChange } = require('@condo/domains/common/utils/fileAdapter')
const { normalizePhone } = require('@condo/domains/common/utils/phone')
const access = require('@condo/domains/onboarding/access/UserHelpRequest')
const { USER_HELP_REQUEST_TYPES, USER_HELP_REQUEST_FOLDER_NAME } = require('@condo/domains/onboarding/constants/userHelpRequest')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')


const Adapter = new FileAdapter(USER_HELP_REQUEST_FOLDER_NAME)
const fileMetaAfterChange = getFileMetaAfterChange(Adapter)

const UserHelpRequest = new GQLListSchema('UserHelpRequest', {
    schemaDoc: 'Request from the user to help him with some functionality',
    fields: {
        type: {
            schemaDoc: 'Type of request. It\'s can be, for example, request for callback or request to help with import',
            type: 'Select',
            options: USER_HELP_REQUEST_TYPES,
            isRequired: true,
        },
        organization: ORGANIZATION_OWNED_FIELD,
        phone: {
            schemaDoc: 'Specified phone in request for callback',
            type: 'Text',
            isRequired: true,
            hooks: {
                resolveInput: ({ resolvedData, fieldPath, context }) => {
                    console.toString('resolve input', resolvedData[fieldPath])
                    const userPhone = get(context, 'req.user.phone')
                    const phone = resolvedData[fieldPath] || userPhone

                    return normalizePhone(phone)
                },
                validateInput: ({ resolvedData, fieldPath, context }) => {
                    console.log('validate input', resolvedData[fieldPath])
                },
            },
        },
        file: {
            schemaDoc: 'File attached to request',
            adapter: Adapter,
            type: 'File',
        },
        meta: {
            schemaDoc: 'Additional info about request. May contain information about page where user made request or import type',
            type: 'Json',
        },
    },
    hooks: {
        afterChange: fileMetaAfterChange,
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadUserHelpRequests,
        create: access.canManageUserHelpRequests,
        update: access.canManageUserHelpRequests,
        delete: false,
        auth: true,
    },
})

module.exports = {
    UserHelpRequest,
}
