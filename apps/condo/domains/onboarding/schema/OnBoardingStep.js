/**
 * Generated by `createschema onboarding.OnBoardingStep 'icon:Text; title:Text; description:Text; action:Select:create,read,update,delete; entity:Text; onBoarding:Relationship:OnBoarding:SET_NULL;'`
 */

const { Text, Relationship, Select, Checkbox, Integer } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/onboarding/access/OnBoardingStep')

const OnBoardingStep = new GQLListSchema('OnBoardingStep', {
    // TODO(codegen): write doc for the OnBoardingStep domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        icon: {
            // TODO(codegen): write doc for OnBoardingStep.icon field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        order: {
            // TODO(codegen): write doc for OnBoardingStep.icon field!
            schemaDoc: 'TODO DOC!',
            type: Integer,
        },

        title: {
            // TODO(codegen): write doc for OnBoardingStep.title field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        description: {
            // TODO(codegen): write doc for OnBoardingStep.description field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        required: {
            // TODO(codegen): write doc for OnBoardingStep.description field!
            schemaDoc: 'TODO DOC!',
            type: Checkbox,
        },

        completed: {
            // TODO(codegen): write doc for OnBoardingStep.description field!
            schemaDoc: 'TODO DOC!',
            type: Checkbox,
            defaultValue: false,
        },

        action: {
            // TODO(codegen): write doc for OnBoardingStep.action field!
            schemaDoc: 'TODO DOC!',
            type: Select,
            options: 'create,read,update,delete',
            isRequired: true,
        },

        entity: {
            // TODO(codegen): write doc for OnBoardingStep.entity field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        onBoarding: {
            // TODO(codegen): write doc for OnBoardingStep.onBoarding field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'OnBoarding',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadOnBoardingSteps,
        create: access.canManageOnBoardingSteps,
        update: access.canManageOnBoardingSteps,
        delete: false,
        auth: true,
    },
})

module.exports = {
    OnBoardingStep,
}
