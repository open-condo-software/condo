/**
 * Generated by `createschema onboarding.UserHelpRequest 'type:Select:callback;importFile;user:Relationship:User:CASCADE;organization:Relationship:Organization:CASCADE;phone:Text;file?:File;meta?:Json'`
 */

const get = require('lodash/get')
const isEmpty = require('lodash/isEmpty')
const omit = require('lodash/omit')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { checkUserBelongsToOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { STAFF } = require('@condo/domains/user/constants/common')


const AVAILABLE_TO_UPDATE_USER_HELP_REQUEST_FIELDS = ['dv', 'sender', 'isReadyToSend']

async function canReadUserHelpRequests ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return { createdBy: { id: user.id } }
}

async function canManageUserHelpRequests ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type !== STAFF) return false

    if (operation === 'create') {
        const organizationIdInRequest = get(originalInput, 'organization.connect.id', null)

        return await checkUserBelongsToOrganization(user.id, organizationIdInRequest)
    } else if (operation === 'update') {
        const helpRequest = await getById('UserHelpRequest', itemId)
        const inaccessibleUpdatedFields = omit(originalInput, AVAILABLE_TO_UPDATE_USER_HELP_REQUEST_FIELDS)

        // can update only isReadyToSend field from false to true
        if (
            helpRequest.createdBy !== user.id ||
            !isEmpty(inaccessibleUpdatedFields) ||
            (helpRequest.isReadyToSend && originalInput.isReadyToSend === false)
        ) return false

        return true
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadUserHelpRequests,
    canManageUserHelpRequests,
}
