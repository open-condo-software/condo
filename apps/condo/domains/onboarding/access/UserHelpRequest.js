/**
 * Generated by `createschema onboarding.UserHelpRequest 'type:Select:callback;importFile;user:Relationship:User:CASCADE;organization:Relationship:Organization:CASCADE;phone:Text;file?:File;meta?:Json'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')


async function canReadUserHelpRequests ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return { createdBy: { id: get(user, 'id', null) } }
}

async function canManageUserHelpRequests ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation !== 'create') return false

    const organizationIdInRequest = get(originalInput, 'organization.connect.id', null)

    return await checkOrganizationPermission(user.id, organizationIdInRequest)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadUserHelpRequests,
    canManageUserHelpRequests,
}
