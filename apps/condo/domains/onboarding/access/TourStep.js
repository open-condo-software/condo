/**
 * Generated by `createschema onboarding.TourStep 'organization:Relationship:Organization:CASCADE;type:Select:ticket,property;status:Select:todo,waiting,disabled,completed;order:Integer;'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor, checkPermissionInUserOrganizationOrRelatedOrganization } = require('../../organization/utils/accessSchema')

async function canReadTourSteps ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return {
        organization: {
            OR: [
                queryOrganizationEmployeeFor(user.id, 'canReadTour'),
                queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadTour'),
            ],
        },
    }
}

async function canManageTourSteps ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (operation === 'create') {
        return false
    } else if (operation === 'update') {
        const tourStep = await getById('TourStep', itemId)
        const organizationId = get(tourStep, 'organization')

        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageTour')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTourSteps,
    canManageTourSteps,
}
