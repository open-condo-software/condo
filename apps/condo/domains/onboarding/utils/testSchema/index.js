/**
 * Generated by `createschema onboarding.OnBoarding 'completed:Checkbox; stepsTransitions:Json;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const { faker } = require('@faker-js/faker')

const { generateGQLTestUtils, throwIfError } = require('@open-condo/codegen/generate.test.utils')

const { TourStep: TourStepGQL } = require('@condo/domains/onboarding/gql')
const { SYNC_TOUR_STEPS_MUTATION } = require('@condo/domains/onboarding/gql')
const { UserHelpRequest: UserHelpRequestGQL } = require('@condo/domains/onboarding/gql')
const { UserHelpRequestFile: UserHelpRequestFileGQL } = require('@condo/domains/onboarding/gql')
const { createTestPhone } = require('@condo/domains/user/utils/testSchema')
const get = require('lodash/get')
/* AUTOGENERATE MARKER <IMPORT> */

const TourStep = generateGQLTestUtils(TourStepGQL)
const UserHelpRequest = generateGQLTestUtils(UserHelpRequestGQL)
const UserHelpRequestFile = generateGQLTestUtils(UserHelpRequestFileGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createTestTourStep (client, organization, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        organization: { connect: { id: organization.id } },
        ...extraAttrs,
    }
    const obj = await TourStep.create(client, attrs)
    return [obj, attrs]
}

async function updateTestTourStep (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await TourStep.update(client, id, attrs)
    return [obj, attrs]
}


async function syncTourStepsByTestClient(client, organization) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const attrs = {
        dv: 1,
        sender,
        organization: { id: organization.id }
    }
    const { data, errors } = await client.mutate(SYNC_TOUR_STEPS_MUTATION, { data: attrs })
    throwIfError(data, errors)
    return [data.result, attrs]
}

async function createTestUserHelpRequest (client, organization, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        organization: { connect: { id: organization.id } },
        type: 'callback',
        phone: get(client, 'userAttrs.phone', createTestPhone()),
        ...extraAttrs,
    }
    const obj = await UserHelpRequest.create(client, attrs)
    return [obj, attrs]
}

async function updateTestUserHelpRequest (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await UserHelpRequest.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestUserHelpRequestFile (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await UserHelpRequestFile.create(client, attrs)
    return [obj, attrs]
}

async function updateTestUserHelpRequestFile (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await UserHelpRequestFile.update(client, id, attrs)
    return [obj, attrs]
}

/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    TourStep, createTestTourStep, updateTestTourStep,
    syncTourStepsByTestClient,
    UserHelpRequest, createTestUserHelpRequest, updateTestUserHelpRequest,
    UserHelpRequestFile, createTestUserHelpRequestFile, updateTestUserHelpRequestFile,
/* AUTOGENERATE MARKER <EXPORTS> */
}
