/**
 * Generated by `createservice acquiring.SetPaymentPosReceiptUrlService --type mutations 'payment:PaymentWhereUniqueInput!, posReceiptUrl:String!'`
 */
const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowAuthenticationError,
    expectToThrowAccessDeniedErrorToResult,
} = require('@open-condo/keystone/test.utils')

const { setPaymentPosReceiptUrlByTestClient, createTestPayment, Payment } = require('@condo/domains/acquiring/utils/testSchema')
const {
    createTestB2BApp,
    createTestB2BAppContext,
    createTestB2BAppAccessRight, createTestB2BAppAccessRightSet,
} = require('@condo/domains/miniapp/utils/testSchema')
const {
    createTestOrganization,
} = require('@condo/domains/organization/utils/testSchema')
const {
    makeClientWithSupportUser,
    makeClientWithResidentUser,
    makeClientWithServiceUser,
    makeClientWithStaffUser,
} = require('@condo/domains/user/utils/testSchema')

describe('SetPaymentPosReceiptUrlService', () => {

    let adminClient, supportClient, residentClient, anonymousClient
    let organization, payment

    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        residentClient = await makeClientWithResidentUser()
        anonymousClient = await makeClient();
        [organization] = await createTestOrganization(adminClient);
        [payment] = await createTestPayment(adminClient, organization)
    })

    describe('access to execution', () => {
        test('admin can execute', async () => {
            const [data, attrs] = await setPaymentPosReceiptUrlByTestClient(adminClient, payment)

            expect(data).toEqual({ success: true })

            const payments = await Payment.getAll(adminClient, { id: payment.id })
            expect(payments).toHaveLength(1)
            expect(payments[0].posReceiptUrl).toBe(attrs.posReceiptUrl)
        })

        test('support can execute', async () => {
            const [data, attrs] = await setPaymentPosReceiptUrlByTestClient(supportClient, payment)

            expect(data).toEqual({ success: true })

            const payments = await Payment.getAll(supportClient, { id: payment.id })
            expect(payments).toHaveLength(1)
            expect(payments[0].posReceiptUrl).toBe(attrs.posReceiptUrl)
        })

        test('staff can\'t execute', async () => {
            const staffClient = await makeClientWithStaffUser()

            await expectToThrowAccessDeniedErrorToResult(async () => {
                await setPaymentPosReceiptUrlByTestClient(staffClient, payment)
            })
        })

        test('resident can\'t execute', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await setPaymentPosReceiptUrlByTestClient(residentClient, payment)
            })
        })

        test('anonymous can\'t execute', async () => {
            await expectToThrowAuthenticationError(async () => {
                await setPaymentPosReceiptUrlByTestClient(anonymousClient, payment)
            }, 'result')
        })

        describe('service user', () => {
            test('can\'t execute without permissions', async () => {
                const serviceClient = await makeClientWithServiceUser()

                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await setPaymentPosReceiptUrlByTestClient(serviceClient, payment)
                })
            })

            test('can execute with permissions', async () => {
                const serviceClient = await makeClientWithServiceUser()
                const [organization2] = await createTestOrganization(adminClient)
                const [payment2] = await createTestPayment(adminClient, organization2)
                const [app] = await createTestB2BApp(adminClient)
                await createTestB2BAppContext(adminClient, app, organization2, { status: 'Finished' })
                const [accessRightSet] = await createTestB2BAppAccessRightSet(adminClient, app, {
                    canExecuteSetPaymentPosReceiptUrl: true,
                })
                await createTestB2BAppAccessRight(adminClient, serviceClient.user, app, accessRightSet)

                const [data, attrs] = await setPaymentPosReceiptUrlByTestClient(serviceClient, payment2)

                expect(data).toEqual({ success: true })

                const payments = await Payment.getAll(adminClient, { id: payment2.id })
                expect(payments).toHaveLength(1)
                expect(payments[0].posReceiptUrl).toBe(attrs.posReceiptUrl)
            })

            test('can\'t execute for other organization\'s payment', async () => {
                const serviceClient = await makeClientWithServiceUser()
                const [organization2] = await createTestOrganization(adminClient)
                await createTestPayment(adminClient, organization2)
                const [app] = await createTestB2BApp(adminClient)
                await createTestB2BAppContext(adminClient, app, organization2, { status: 'Finished' })
                const [accessRightSet] = await createTestB2BAppAccessRightSet(adminClient, app, {
                    canExecuteSetPaymentPosReceiptUrl: true,
                })
                await createTestB2BAppAccessRight(adminClient, serviceClient.user, app, accessRightSet)

                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await setPaymentPosReceiptUrlByTestClient(serviceClient, payment)
                })
            })
        })
    })
})