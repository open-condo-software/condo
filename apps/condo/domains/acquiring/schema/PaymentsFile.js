/**
 * Generated by `createschema acquiring.PaymentsFile 'number:Text;file:File;billingIntegrationOrganizationContextId:Text;externalId:Text;account:Text;dateBegin:CalendarDay;dateEnd:CalendarDay;dateLoad:DateTimeUtc;uploadedRecords:Integer;amount:Decimal;amountBring:Decimal;registryName:Text;bankStatus:Text;bankComment:Text;fileName:Text;'`
 */

const FileAdapter = require('@open-condo/keystone/fileAdapter/fileAdapter')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/PaymentsFile')
const {
    PAYMENTS_FILES_FOLDER_NAME,
} = require('@condo/domains/acquiring/constants/constants')
const { PAYMENTS_FILE_STATUSES } = require('@condo/domains/acquiring/constants/constants')
const {
    NON_NEGATIVE_MONEY_FIELD,
} = require('@condo/domains/common/schema/fields')


const Adapter = new FileAdapter(PAYMENTS_FILES_FOLDER_NAME)

const PaymentsFile = new GQLListSchema('PaymentsFile', {
    schemaDoc: 'Payments registry file. A file that contains all payments detalization for a period of time',
    fields: {

        billingContext: {
            schemaDoc: 'Link to Billing Integration Context',
            type: 'Relationship',
            ref: 'BillingIntegrationOrganizationContext',
            isRequired: false,
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
        },

        acquiringContext: {
            schemaDoc: 'Link to Acquiring Integration Context',
            type: 'Relationship',
            ref: 'AcquiringIntegrationContext',
            isRequired: false,
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
        },

        number: {
            schemaDoc: 'The number of payments registry file',
            type: 'AutoIncrementInteger',
            isRequired: false,
            autoIncrementScopeFields: ['account'],
        },

        paymentOrder: {
            schemaDoc: 'Numeric id to define the money transaction',
            type: 'Text',
            isRequired: false,
        },

        file: {
            schemaDoc: 'Payments registry file itself',
            type: 'File',
            isRequired: true,
            adapter: Adapter,
        },

        account: {
            schemaDoc: 'Bank account for payments',
            type: 'Text',
            isRequired: true,
        },

        dateBegin: {
            schemaDoc: 'Starting period of time for included payments',
            type: 'CalendarDay',
            isRequired: true,
        },

        dateEnd: {
            schemaDoc: 'End of the time period  for included payments',
            type: 'CalendarDay',
            isRequired: true,
        },

        dateLoad: {
            schemaDoc: 'Date when payments registry file was created',
            type: 'DateTimeUtc',
            isRequired: true,
        },

        uploadedRecords: {
            schemaDoc: 'The number of payments',
            type: 'Integer',
            isRequired: true,
        },

        amount: {
            ...NON_NEGATIVE_MONEY_FIELD,
            schemaDoc: 'Total amount of all payments from registry file',
            isRequired: true,
        },

        amountBring: {
            ...NON_NEGATIVE_MONEY_FIELD,
            schemaDoc: 'Total amount of all payments excluding fees',
            isRequired: true,
        },

        registryName: {
            schemaDoc: 'Name of the registry file on accounting system',
            type: 'Text',
            isRequired: true,
        },

        status: {
            schemaDoc: `Status of the payments registry. Can be one of: ${PAYMENTS_FILE_STATUSES.join(', ')}`,
            type: 'Text',
            isRequired: true,
        },

        externalId: {
            schemaDoc: 'Id from a remote system',
            type: 'Text',
            isRequired: false,
        },

        bankComment: {
            schemaDoc: 'Text description of the registry file about the file content',
            type: 'Text',
            isRequired: false,
        },

        fileId: {
            schemaDoc: 'File id of an external file',
            type: 'Text',
            isRequired: false,
        },

        fileName: {
            schemaDoc: 'External file name',
            type: 'Text',
            isRequired: false,
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadPaymentsFiles,
        create: access.canManagePaymentsFiles,
        update: access.canManagePaymentsFiles,
        delete: false,
        auth: true,
    },
    kmigratorOptions: {
        indexes: [
            {
                type: 'BTreeIndex',
                fields: ['registryName'],
                name: 'payments_file_registryName_idx',
            },
            {
                type: 'BTreeIndex',
                fields: ['paymentOrder'],
                name: 'payments_file_paymentOrder_idx',
            },
            {
                type: 'BTreeIndex',
                fields: ['fileName'],
                name: 'payments_file_file_name_idx',
            },
            {
                type: 'HashIndex',
                fields: ['billingContext'],
                name: 'payments_file_context_idx',
            },
        ],
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['billingContext', 'registryName', 'dateLoad'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'paymentsFile_uniq_for_context',
            },
        ],
    },
})

module.exports = {
    PaymentsFile,
}
