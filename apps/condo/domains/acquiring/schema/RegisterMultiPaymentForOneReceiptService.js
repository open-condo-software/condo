/**
 * Generated by `createservice acquiring.RegisterMultiPaymentForOneReceiptService`
 */
const { get, isNil } = require('lodash')
const Big = require('big.js')

const { getById, GQLCustomSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/RegisterMultiPaymentForOneReceiptService')
const { DEFAULT_MULTIPAYMENT_SERVICE_CATEGORY } = require('@condo/domains/acquiring/constants/payment')
const {
    FEE_CALCULATION_PATH,
    WEB_VIEW_PATH,
    DIRECT_PAYMENT_PATH,
    ANONYMOUS_PAYMENT_PATH,
} = require('@condo/domains/acquiring/constants/links')
const { Payment, MultiPayment, AcquiringIntegration } = require('@condo/domains/acquiring/utils/serverSchema')
const {
    getAcquiringIntegrationContextFormula,
    FeeDistribution,
} = require('@condo/domains/acquiring/utils/serverSchema/feeDistribution')
const { freezeBillingReceipt } = require('@condo/domains/acquiring/utils/freezeBillingReceipt')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { DV_VERSION_MISMATCH, WRONG_FORMAT } = require('@condo/domains/common/constants/errors')
const { checkDvAndSender } = require('@open-condo/keystone/plugins/dvAndSender')

const {
    RECEIPTS_ARE_DELETED,
    RECEIPTS_HAVE_NEGATIVE_TO_PAY_VALUE,
    ACQUIRING_INTEGRATION_DOES_NOT_SUPPORTS_BILLING_INTEGRATION,
    RECEIPT_HAS_DELETED_BILLING_INTEGRATION,
    BILLING_INTEGRATION_ORGANIZATION_CONTEXT_IS_DELETED,
    ACQUIRING_INTEGRATION_IS_DELETED,
    CANNOT_FIND_ALL_BILLING_RECEIPTS,
    ACQUIRING_INTEGRATION_CONTEXT_IS_DELETED,
} = require('../constants/errors')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    DV_VERSION_MISMATCH: {
        mutation: 'registerMultiPaymentForOneReceipt',
        variable: ['data', 'dv'],
        code: BAD_USER_INPUT,
        type: DV_VERSION_MISMATCH,
        message: 'Wrong value for data version number',
    },
    WRONG_SENDER_FORMAT: {
        mutation: 'registerMultiPaymentForOneReceipt',
        variable: ['data', 'sender'],
        code: BAD_USER_INPUT,
        type: WRONG_FORMAT,
        message: 'Invalid format of "sender" field value. {details}',
        correctExample: '{ dv: 1, fingerprint: \'example-fingerprint-alphanumeric-value\'}',
    },
    ACQUIRING_INTEGRATION_CONTEXT_IS_DELETED: {
        mutation: 'registerMultiPaymentForOneReceipt',
        variable: ['data', 'acquiringIntegrationContext', 'id'],
        code: BAD_USER_INPUT,
        type: ACQUIRING_INTEGRATION_CONTEXT_IS_DELETED,
        message: 'Cannot pay via deleted acquiring integration context',
    },
    ACQUIRING_INTEGRATION_IS_DELETED: {
        mutation: 'registerMultiPaymentForOneReceipt',
        variable: ['data', 'acquiringIntegrationContext', 'id'],
        code: BAD_USER_INPUT,
        type: ACQUIRING_INTEGRATION_IS_DELETED,
        message: 'Cannot pay via deleted acquiring integration with id "{id}"',
    },
    CANNOT_FIND_BILLING_RECEIPT: {
        mutation: 'registerMultiPaymentForOneReceipt',
        variable: ['data', 'receipt', 'id'],
        code: BAD_USER_INPUT,
        type: CANNOT_FIND_ALL_BILLING_RECEIPTS,
        message: 'Cannot find specified BillingReceipt with id {missingReceiptId}',
    },
    RECEIPT_IS_DELETED: {
        mutation: 'registerMultiPaymentForOneReceipt',
        variable: ['data', 'receipt', 'id'],
        code: BAD_USER_INPUT,
        type: RECEIPTS_ARE_DELETED,
        message: 'Cannot pay for deleted receipt {id}',
    },
    RECEIPT_HAVE_NEGATIVE_TO_PAY_VALUE: {
        mutation: 'registerMultiPaymentForOneReceipt',
        variable: ['data', 'receipt', 'id'],
        code: BAD_USER_INPUT,
        type: RECEIPTS_HAVE_NEGATIVE_TO_PAY_VALUE,
        message: 'Cannot pay for BillingReceipt {id} with negative "toPay" value',
    },
    BILLING_INTEGRATION_ORGANIZATION_CONTEXT_IS_DELETED: {
        mutation: 'registerMultiPaymentForOneReceipt',
        variable: ['data', 'receipt', 'id'],
        code: BAD_USER_INPUT,
        type: BILLING_INTEGRATION_ORGANIZATION_CONTEXT_IS_DELETED,
        message: 'BillingIntegrationOrganizationContext is deleted for provided BillingReceipt',
    },
    ACQUIRING_INTEGRATION_DOES_NOT_SUPPORTS_BILLING_INTEGRATION: {
        mutation: 'registerMultiPaymentForOneReceipt',
        variable: ['data', 'receipt', 'id'],
        code: BAD_USER_INPUT,
        type: ACQUIRING_INTEGRATION_DOES_NOT_SUPPORTS_BILLING_INTEGRATION,
        message: 'AcquiringIntegration does not supports following BillingReceipt\'s BillingIntegration: {unsupportedBillingIntegration}',
    },
    RECEIPT_HAS_DELETED_BILLING_INTEGRATION: {
        mutation: 'registerMultiPaymentForOneReceipt',
        variable: ['data', 'receipt', 'id'],
        code: BAD_USER_INPUT,
        type: RECEIPT_HAS_DELETED_BILLING_INTEGRATION,
        message: 'BillingReceipt has deleted BillingIntegration',
    },
}

const RegisterMultiPaymentForOneReceiptService = new GQLCustomSchema('RegisterMultiPaymentForOneReceiptService', {
    types: [
        {
            access: true,
            type: 'input RegisterMultiPaymentForOneReceiptInput { dv: Int!, sender: SenderFieldInput!, receipt: BillingReceiptWhereUniqueInput!, acquiringIntegrationContext: AcquiringIntegrationContextWhereUniqueInput! }',
        },
        {
            access: true,
            type: 'type RegisterMultiPaymentForOneReceiptOutput { dv: Int!, multiPaymentId: String!, webViewUrl: String!, feeCalculationUrl: String!, directPaymentUrl: String!, anonymousPaymentUrl: String! }',
        },
    ],

    mutations: [
        {
            access: access.canRegisterMultiPaymentForOneReceipt,
            schema: 'registerMultiPaymentForOneReceipt(data: RegisterMultiPaymentForOneReceiptInput!): RegisterMultiPaymentForOneReceiptOutput',
            resolver: async (parent, args, context) => {
                // wrap validator function to the current call context
                const { data } = args
                const {
                    sender,
                    receipt,
                    acquiringIntegrationContext,
                } = data

                // Stage 0. Check if input is valid
                checkDvAndSender(data, ERRORS.DV_VERSION_MISMATCH, ERRORS.WRONG_SENDER_FORMAT, context)

                // Stage 1: get acquiring context & integration
                const acquiringContext = await getById('AcquiringIntegrationContext', acquiringIntegrationContext.id)

                if (acquiringContext.deletedAt) {
                    throw new GQLError(ERRORS.ACQUIRING_INTEGRATION_CONTEXT_IS_DELETED, context)
                }

                const acquiringIntegration = await AcquiringIntegration.getOne(context, {
                    id: acquiringContext.integration,
                })

                if (acquiringIntegration.deletedAt) {
                    throw new GQLError({
                        ...ERRORS.ACQUIRING_INTEGRATION_IS_DELETED,
                        messageInterpolation: { id: acquiringContext.integration },
                    }, context)
                }

                // Stage 2. Check BillingReceipts
                const billingReceipt = await getById('BillingReceipt', receipt.id)

                if (isNil(billingReceipt)) {
                    throw new GQLError({
                        ...ERRORS.CANNOT_FIND_BILLING_RECEIPT,
                        messageInterpolation: { missingReceiptId: receipt.id },
                    }, context)
                }

                if (billingReceipt.deletedAt) {
                    throw new GQLError({
                        ...ERRORS.RECEIPT_IS_DELETED,
                        messageInterpolation: { id: billingReceipt.id },
                    }, context)
                }

                // negative to pay value
                if (Big(billingReceipt.toPay).lte(0)) {
                    throw new GQLError({
                        ...ERRORS.RECEIPT_HAVE_NEGATIVE_TO_PAY_VALUE,
                        messageInterpolation: { id: billingReceipt.id },
                    }, context)
                }

                const billingContext = await getById('BillingIntegrationOrganizationContext', billingReceipt.context)

                if (billingContext.deletedAt) {
                    const failedReceipts = [{ receiptId: billingReceipt.id, contextId: billingReceipt.context }]
                    throw new GQLError({
                        ...ERRORS.BILLING_INTEGRATION_ORGANIZATION_CONTEXT_IS_DELETED,
                        data: { failedReceipts },
                    }, context)
                }

                const supportedBillingIntegrations = get(acquiringIntegration, 'supportedBillingIntegrations', [])
                    .map(integration => integration.id)

                if (!supportedBillingIntegrations.includes(billingContext.integration)) {
                    throw new GQLError({
                        ...ERRORS.ACQUIRING_INTEGRATION_DOES_NOT_SUPPORTS_BILLING_INTEGRATION,
                        messageInterpolation: { unsupportedBillingIntegration: billingContext.integration },
                    }, context)
                }

                const billingIntegration = await getById('BillingIntegration', billingContext.integration)

                if (billingIntegration.deletedAt) {
                    const failedReceipts = [{
                        receiptId: billingReceipt.id,
                        integrationId: billingContext.integration,
                    }]
                    throw new GQLError({
                        ...ERRORS.RECEIPT_HAS_DELETED_BILLING_INTEGRATION,
                        data: { failedReceipts },
                    }, context)
                }

                const currencyCode = get(billingIntegration, ['currencyCode'])

                // Stage 3 Generating payments
                const formula = await getAcquiringIntegrationContextFormula(context, acquiringIntegrationContext.id)
                const feeCalculator = new FeeDistribution(formula)
                const frozenReceipt = await freezeBillingReceipt(billingReceipt)
                const billingAccountNumber = get(frozenReceipt, ['data', 'account', 'number'])
                const {
                    type,
                    explicitFee = '0',
                    implicitFee = '0',
                    fromReceiptAmountFee = '0',
                } = feeCalculator.calculate(billingReceipt.toPay)
                const explicitFees = type === 'service' ? {
                    explicitServiceCharge: String(explicitFee),
                    explicitFee: '0',
                } : {
                    explicitServiceCharge: '0',
                    explicitFee: String(explicitFee),
                }
                const paymentCommissionFields = {
                    ...explicitFees,
                    implicitFee: String(implicitFee),
                    serviceFee: String(fromReceiptAmountFee),
                }
                const paymentModel = await Payment.create(context, {
                    dv: 1,
                    sender,
                    amount: billingReceipt.toPay,
                    currencyCode,
                    accountNumber: billingAccountNumber,
                    period: billingReceipt.period,
                    receipt: { connect: { id: billingReceipt.id } },
                    frozenReceipt,
                    context: { connect: { id: acquiringContext.id } },
                    organization: { connect: { id: acquiringContext.organization } },
                    recipientBic: billingReceipt.recipient.bic,
                    recipientBankAccount: billingReceipt.recipient.bankAccount,
                    ...paymentCommissionFields,
                })
                const payment = { ...paymentModel, serviceFee: paymentCommissionFields.serviceFee }

                const totalAmount = {
                    amountWithoutExplicitFee: Big(payment.amount),
                    explicitFee: Big(payment.explicitFee),
                    explicitServiceCharge: Big(payment.explicitServiceCharge),
                    serviceFee: Big(payment.serviceFee),
                    implicitFee: Big(payment.implicitFee),
                }

                const authedItemId = get(context, 'authedItem.id')
                const multiPayment = await MultiPayment.create(context, {
                    dv: 1,
                    sender,
                    ...Object.fromEntries(Object.entries(totalAmount).map(([key, value]) => ([key, value.toFixed(2)]))),
                    currencyCode,
                    ...isNil(authedItemId) ? {} : { user: { connect: { id: authedItemId } } },
                    integration: { connect: { id: acquiringIntegration.id } },
                    payments: { connect: [{ id: payment.id }] },
                    // TODO(DOMA-1574): add correct category
                    serviceCategory: DEFAULT_MULTIPAYMENT_SERVICE_CATEGORY,
                })
                return {
                    dv: 1,
                    multiPaymentId: multiPayment.id,
                    webViewUrl: `${acquiringIntegration.hostUrl}${WEB_VIEW_PATH.replace('[id]', multiPayment.id)}`,
                    feeCalculationUrl: `${acquiringIntegration.hostUrl}${FEE_CALCULATION_PATH.replace('[id]', multiPayment.id)}`,
                    directPaymentUrl: `${acquiringIntegration.hostUrl}${DIRECT_PAYMENT_PATH.replace('[id]', multiPayment.id)}`,
                    anonymousPaymentUrl: `${acquiringIntegration.hostUrl}${ANONYMOUS_PAYMENT_PATH.replace('[id]', multiPayment.id)}`,
                }
            },
        },
    ],

})

module.exports = {
    RegisterMultiPaymentForOneReceiptService,
}
