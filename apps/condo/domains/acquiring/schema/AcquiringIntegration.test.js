/**
 * Generated by `createschema acquiring.AcquiringIntegration 'name:Text;'`
 */

import { expectToThrowGQLError } from '@open-condo/keystone/test.utils'

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAuthenticationErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { AcquiringIntegration, createTestAcquiringIntegration, updateTestAcquiringIntegration } = require('@condo/domains/acquiring/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

describe('AcquiringIntegration', () => {
    describe('CRUD tests', () => {
        describe('create',  () => {
            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestAcquiringIntegration(client)
                })
            })
            test('anonymous can\'t', async () => {
                const anonymousClient = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestAcquiringIntegration(anonymousClient)
                })
            })
            test('support can', async () => {
                const support = await makeClientWithSupportUser()
                const [integration, attrs] = await createTestAcquiringIntegration(support)
                expect(integration).toEqual(expect.objectContaining({
                    name: attrs.name,
                }))
            })
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [integration, attrs] = await createTestAcquiringIntegration(admin, { canGroupReceipts: true })
                expect(integration).toEqual(expect.objectContaining({
                    name: attrs.name,
                    canGroupReceipts: true,
                }))
            })
        })
        describe('read', () => {
            test('user can', async () => {
                const admin = await makeLoggedInAdminClient()
                await createTestAcquiringIntegration(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                const integrations = await AcquiringIntegration.getAll(client)
                expect(integrations).toBeDefined()
                expect(integrations).not.toHaveLength(0)
            })
            test('anonymous can\'t', async () => {
                const anonymousClient = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await AcquiringIntegration.getAll(anonymousClient)
                })
            })
            test('support can', async () => {
                const support = await makeClientWithSupportUser()
                await createTestAcquiringIntegration(support)

                const integrations = await AcquiringIntegration.getAll(support)
                expect(integrations).toBeDefined()
                expect(integrations).not.toHaveLength(0)
            })
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                await createTestAcquiringIntegration(admin)

                const integrations = await AcquiringIntegration.getAll(admin)
                expect(integrations).toBeDefined()
                expect(integrations).not.toHaveLength(0)
            })
        })
        describe('update',  () => {
            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [integration] =  await createTestAcquiringIntegration(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                const payload = {}
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestAcquiringIntegration(client, integration.id, payload)
                })
            })
            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [integration] =  await createTestAcquiringIntegration(admin)

                const anonymousClient = await makeClient()
                const payload = {}
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestAcquiringIntegration(anonymousClient, integration.id, payload)
                })
            })
            test('support can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [integration] =  await createTestAcquiringIntegration(admin)

                const support = await makeClientWithSupportUser()
                const newName = 'UPDATE ACQUIRING TEST'
                const payload = { name: newName }
                const [newIntegration] = await updateTestAcquiringIntegration(support, integration.id, payload)
                expect(newIntegration).toEqual(expect.objectContaining(payload))
            })
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [integration] =  await createTestAcquiringIntegration(admin)

                const newName = 'UPDATE ACQUIRING TEST'
                const payload = { name: newName }
                const [newIntegration] = await updateTestAcquiringIntegration(admin, integration.id, payload)
                expect(newIntegration).toEqual(expect.objectContaining(payload))
            })
        })
        describe('hard delete',  () => {
            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [integration] =  await createTestAcquiringIntegration(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await AcquiringIntegration.delete(client, integration.id)
                })
            })
            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [integration] =  await createTestAcquiringIntegration(admin)

                const anonymousClient = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await AcquiringIntegration.delete(anonymousClient, integration.id)
                })
            })
            test('support can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [integration] =  await createTestAcquiringIntegration(admin)

                const support = await makeClientWithSupportUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await AcquiringIntegration.delete(support, integration.id)
                })
            })
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [integration] =  await createTestAcquiringIntegration(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await AcquiringIntegration.delete(admin, integration.id)
                })
            })
        })
    })
    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            const admin = await makeLoggedInAdminClient()
            await expectToThrowGQLError(async () => await createTestAcquiringIntegration(admin, {
                dv: 2,
            }), {
                'code': 'BAD_USER_INPUT',
                'type': 'DV_VERSION_MISMATCH',
                'message': 'Wrong value for data version number',
                'mutation': 'createAcquiringIntegration',
                'messageForUser': '',
                'variable': ['data', 'dv'],
            })
            const [integration] = await createTestAcquiringIntegration(admin)
            await expectToThrowGQLError(async () => await updateTestAcquiringIntegration(admin, integration.id, {
                dv: 2,
            }), {
                'code': 'BAD_USER_INPUT',
                'type': 'DV_VERSION_MISMATCH',
                'message': 'Wrong value for data version number',
                'mutation': 'updateAcquiringIntegration',
                'messageForUser': '',
                'variable': ['data', 'dv'],
            })
        })
    })
})
