/**
 * Generated by `createschema acquiring.AcquiringIntegration 'name:Text;'`
 */

const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')

const { AcquiringIntegration, createTestAcquiringIntegration, updateTestAcquiringIntegration } = require('@condo/domains/acquiring/utils/testSchema')
const {
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAuthenticationErrorToObj,
} = require('@condo/domains/common/utils/testSchema')

describe('AcquiringIntegration', () => {
    describe('create', async () => {
        test('user can\'t', async () => {
            const client = await makeClientWithNewRegisteredAndLoggedInUser()
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestAcquiringIntegration(client)
            })
        })
        test('anonymous can\'t', async () => {
            const anonymousClient = await makeClient()
            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestAcquiringIntegration(anonymousClient)
            })
        })
        test('support can', async () => {
            const support = await makeClientWithSupportUser()
            const [integration, attrs] = await createTestAcquiringIntegration(support)
            expect(integration).toEqual(expect.objectContaining({
                name: attrs.name,
            }))
        })
        test('admin can', async () => {
            const admin = await makeLoggedInAdminClient()
            const [integration, attrs] = await createTestAcquiringIntegration(admin, { canGroupReceipts: true })
            expect(integration).toEqual(expect.objectContaining({
                name: attrs.name,
            }))
        })
    })
    describe('read', async () => {
        test('user can', async () => {
            const admin = await makeLoggedInAdminClient()
            await createTestAcquiringIntegration(admin)

            const client = await makeClientWithNewRegisteredAndLoggedInUser()
            const integrations = await AcquiringIntegration.getAll(client)
            expect(integrations).toBeDefined()
            expect(integrations).not.toHaveLength(0)
        })
        test('anonymous can\'t', async () => {
            const anonymousClient = await makeClient()
            await expectToThrowAuthenticationErrorToObjects(async () => {
                await AcquiringIntegration.getAll(anonymousClient)
            })
        })
        test('support can', async () => {
            const support = await makeClientWithSupportUser()
            await createTestAcquiringIntegration(support)

            const integrations = await AcquiringIntegration.getAll(support)
            expect(integrations).toBeDefined()
            expect(integrations).not.toHaveLength(0)
        })
        test('admin can', async () => {
            const admin = await makeLoggedInAdminClient()
            await createTestAcquiringIntegration(admin)

            const integrations = await AcquiringIntegration.getAll(admin)
            expect(integrations).toBeDefined()
            expect(integrations).not.toHaveLength(0)
        })
    })
    describe('update', async () => {
        test('user can\'t', async () => {
            const admin = await makeLoggedInAdminClient()
            const [integration] = await createTestAcquiringIntegration(admin)

            const client = await makeClientWithNewRegisteredAndLoggedInUser()
            const payload = {}
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestAcquiringIntegration(client, integration.id, payload)
            })
        })
        test('anonymous can\'t', async () => {
            const admin = await makeLoggedInAdminClient()
            const [integration] = await createTestAcquiringIntegration(admin)

            const anonymousClient = await makeClient()
            const payload = {}
            await expectToThrowAuthenticationErrorToObj(async () => {
                await updateTestAcquiringIntegration(anonymousClient, integration.id, payload)
            })
        })
        test('support can', async () => {
            const admin = await makeLoggedInAdminClient()
            const [integration] = await createTestAcquiringIntegration(admin)

            const support = await makeClientWithSupportUser()
            const newName = 'UPDATE ACQUIRING TEST'
            const payload = { name: newName }
            const [newIntegration] = await updateTestAcquiringIntegration(support, integration.id, payload)
            expect(newIntegration).toEqual(expect.objectContaining(payload))
        })
        test('admin can', async () => {
            const admin = await makeLoggedInAdminClient()
            const [integration] = await createTestAcquiringIntegration(admin)

            const newName = 'UPDATE ACQUIRING TEST'
            const payload = { name: newName }
            const [newIntegration] = await updateTestAcquiringIntegration(admin, integration.id, payload)
            expect(newIntegration).toEqual(expect.objectContaining(payload))
        })
    })
    describe('hard delete', async () => {
        test('user can\'t', async () => {
            const admin = await makeLoggedInAdminClient()
            const [integration] = await createTestAcquiringIntegration(admin)

            const client = await makeClientWithNewRegisteredAndLoggedInUser()
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await AcquiringIntegration.delete(client, integration.id)
            })
        })
        test('anonymous can\'t', async () => {
            const admin = await makeLoggedInAdminClient()
            const [integration] = await createTestAcquiringIntegration(admin)

            const anonymousClient = await makeClient()
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await AcquiringIntegration.delete(anonymousClient, integration.id)
            })
        })
        test('support can\'t', async () => {
            const admin = await makeLoggedInAdminClient()
            const [integration] = await createTestAcquiringIntegration(admin)

            const support = await makeClientWithSupportUser()
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await AcquiringIntegration.delete(support, integration.id)
            })
        })
        test('admin can\'t', async () => {
            const admin = await makeLoggedInAdminClient()
            const [integration] = await createTestAcquiringIntegration(admin)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await AcquiringIntegration.delete(admin, integration.id)
            })
        })
    })
})
