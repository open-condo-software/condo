/**
 * Generated by `createschema acquiring.RecurrentPaymentContext 'limit:Text;paymentDay:Integer;settings:Json;billingCategories:Json'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, catchErrorFrom,
} = require('@open-condo/keystone/test.utils')

const {
    RecurrentPaymentContext,
    createTestRecurrentPaymentContext,
    updateTestRecurrentPaymentContext,
} = require('@condo/domains/acquiring/utils/testSchema')
const { createTestBillingCategory } = require('@condo/domains/billing/utils/testSchema')
const { makeClientWithServiceConsumer } = require('@condo/domains/resident/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
} = require('@condo/domains/user/utils/testSchema')

describe('RecurrentPaymentContext', () => {
    let admin, support, user, anonymous, getContextRequest, billingCategory, serviceConsumerClient

    beforeEach(async () => {
        serviceConsumerClient = await makeClientWithServiceConsumer()
    })

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()
        billingCategory = (await createTestBillingCategory(admin, { name: `Category ${new Date()}` }))[0]

        getContextRequest = async () => ({
            enabled: false,
            limit: '10000',
            autoPayReceipts: false,
            paymentDay: 10,
            settings: {},
            serviceConsumer: { connect: { id: serviceConsumerClient.serviceConsumer.id } },
            billingCategory: { connect: { id: billingCategory.id } },
        })
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()

                const [obj, attrs] = await createTestRecurrentPaymentContext(admin, await getContextRequest())

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
            })

            test('support can', async () => {
                const client = await makeClientWithSupportUser()

                const [obj, attrs] = await createTestRecurrentPaymentContext(client, await getContextRequest())

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('user can', async () => {
                const [obj, attrs] = await createTestRecurrentPaymentContext(serviceConsumerClient, await getContextRequest())

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: serviceConsumerClient.user.id }))
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestRecurrentPaymentContext(client)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const request = await getContextRequest()
                const [objCreated] = await createTestRecurrentPaymentContext(admin, request)

                const [obj, attrs] = await updateTestRecurrentPaymentContext(admin, objCreated.id, {
                    ...request,
                    enabled: false,
                })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.enabled).not.toBeTruthy()
            })

            test('support can', async () => {
                const admin = await makeLoggedInAdminClient()
                const request = await getContextRequest()
                const [objCreated] = await createTestRecurrentPaymentContext(admin, request)

                const client = await makeClientWithSupportUser()
                const [obj, attrs] = await updateTestRecurrentPaymentContext(client, objCreated.id, {
                    ...request,
                    enabled: false,
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
                expect(obj.enabled).not.toBeTruthy()
            })

            test('user can', async () => {
                const request = await getContextRequest()
                const [objCreated] = await createTestRecurrentPaymentContext(serviceConsumerClient, request)

                const [obj, attrs] = await updateTestRecurrentPaymentContext(serviceConsumerClient, objCreated.id, {
                    ...request,
                    enabled: false,
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: serviceConsumerClient.user.id }))
                expect(obj.enabled).not.toBeTruthy()
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const request = await getContextRequest()
                const [objCreated] = await createTestRecurrentPaymentContext(admin, request)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestRecurrentPaymentContext(client, objCreated.id, { ...request, enabled: false })
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestRecurrentPaymentContext(admin, await getContextRequest())

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await RecurrentPaymentContext.delete(admin, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestRecurrentPaymentContext(admin, await getContextRequest())

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await RecurrentPaymentContext.delete(client, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestRecurrentPaymentContext(admin, await getContextRequest())

                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await RecurrentPaymentContext.delete(client, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestRecurrentPaymentContext(admin, await getContextRequest())

                const objs = await RecurrentPaymentContext.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('user can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestRecurrentPaymentContext(serviceConsumerClient, await getContextRequest())

                const objs = await RecurrentPaymentContext.getAll(serviceConsumerClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                })
            })

            test('user1 can\'t read recurrentPaymentContext for user2', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestRecurrentPaymentContext(admin, await getContextRequest())

                const client2 = await makeClientWithServiceConsumer()
                const objs = await RecurrentPaymentContext.getAll(client2, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(0)
            })


            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestRecurrentPaymentContext(admin, await getContextRequest())

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await RecurrentPaymentContext.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('validate both trigger set up', async () => {
            const admin = await makeLoggedInAdminClient()
            const request = await getContextRequest()
            request.autoPayReceipts = true

            await catchErrorFrom(async () => {
                await createTestRecurrentPaymentContext(admin, request)
            }, ({ errors }) => {
                expect(errors).toMatchObject([{
                    name: 'ValidationFailureError',
                    data: { messages: ['RECURRENT_PAYMENT_CONTEXT_BOTH_TRIGGER_SET_UP_ERROR'] },
                }])
            })
        })
        test('validate billingCategory is unique for serviceConsumer', async () => {
            const admin = await makeLoggedInAdminClient()

            await createTestRecurrentPaymentContext(admin, await getContextRequest())

            await catchErrorFrom(async () => {
                await createTestRecurrentPaymentContext(admin, await getContextRequest())
            }, ({ errors }) => {
                expect(errors[0].message).toContain('duplicate key value violates unique constraint')
            })
        })
        test('validate serviceConsumer', async () => {
            const resident = await makeClientWithServiceConsumer()
            await catchErrorFrom(async () => {
                await createTestRecurrentPaymentContext(resident, await getContextRequest())
            }, ({ errors }) => {
                expect(errors).toMatchObject([{
                    name: 'GraphQLError',
                    message: 'Unable to connect a RecurrentPaymentContext.serviceConsumer<ServiceConsumer>',
                }])
            })
        })
    })
})
