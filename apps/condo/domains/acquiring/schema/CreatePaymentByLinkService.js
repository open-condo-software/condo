/**
 * Generated by `createservice acquiring.CreatePaymentByLinkService`
 */

const Big = require('big.js')
const { get } = require('lodash')

const { GQLCustomSchema, find } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/CreatePaymentByLinkService')
const { CONTEXT_FINISHED_STATUS: ACQUIRING_CONTEXT_FINISHED_STATUS } = require('@condo/domains/acquiring/constants/context')
const {
    registerMultiPaymentForVirtualReceipt,
    MultiPayment,
} = require('@condo/domains/acquiring/utils/serverSchema')
const { CONTEXT_FINISHED_STATUS: BILLING_CONTEXT_FINISHED_STATUS } = require('@condo/domains/billing/constants/constants')
const {
    formatPeriodFromQRCode,
    getQRCodeFields,
    calculatePaymentPeriod,
} = require('@condo/domains/billing/utils/receiptQRCodeUtils')
const {
    validateQRCode,
} = require('@condo/domains/billing/utils/serverSchema')

const PERIOD_REGEXP = /\d\d\d\d-\d\d-01/

const CreatePaymentByLinkService = new GQLCustomSchema('CreatePaymentByLinkService', {
    types: [
        {
            access: true,
            type: 'input CreatePaymentByLinkInput { dv: Int!, sender: SenderFieldInput!, qrCode: String! }',
        },
        {
            access: true,
            type: 'type CreatePaymentByLinkOutput { multiPaymentId: ID!, amount: String!, explicitFee: String!, totalAmount: String!, acquiringIntegrationHostUrl: String!, currencyCode: String!, address: String!, addressMeta: AddressMetaField!, unitType: String!, unitName: String!, accountNumber: String!, period: String! }',
        },
    ],

    mutations: [
        {
            access: access.canCreatePaymentByLink,
            schema: 'createPaymentByLink(data: CreatePaymentByLinkInput!): CreatePaymentByLinkOutput',
            resolver: async (parent, args, context) => {
                const { data: { dv, sender, qrCode } } = args

                const validationResult = await validateQRCode(context, { dv, sender, qrCode })

                // LastReceiptData will be present if validation was successful
                const { qrCodeFields, acquiringIntegrationHostUrl, currencyCode, lastReceiptData } = validationResult
                const {
                    personalAcc, // organization's bank account
                    paymPeriod, // mm.yyyy NOTE: could not be here
                    sum,
                    persAcc, // resident's account within organization
                    payeeINN,
                    bic,
                } = getQRCodeFields(qrCodeFields, ['personalAcc', 'paymPeriod', 'sum', 'persAcc', 'payeeINN', 'bic'])

                const amount = String(Big(sum).div(100))

                // Existence of this billing account and billing property was checked at ValidateQRCodeService
                const [billingAccount] = await find('BillingAccount', {
                    number: persAcc,
                    context: {
                        organization: { tin: payeeINN, deletedAt: null },
                        status: BILLING_CONTEXT_FINISHED_STATUS,
                        deletedAt: null,
                    },
                    deletedAt: null,
                })

                const [billingProperty] = await find('BillingProperty', {
                    id: billingAccount.property,
                    deletedAt: null,
                })

                const [billingContext] = await find('BillingIntegrationOrganizationContext', {
                    id: billingAccount.context,
                    status: BILLING_CONTEXT_FINISHED_STATUS,
                    deletedAt: null,
                })

                const organizationId = billingContext.organization

                const [acquiringContext] = await find('AcquiringIntegrationContext', {
                    organization: { id: organizationId, deletedAt: null },
                    status: ACQUIRING_CONTEXT_FINISHED_STATUS,
                    deletedAt: null,
                })

                // NOTE(YEgorLu): Get period and category for payment
                // Period can be explicitly present in QR, save it in that case
                // In case paymPeriod is null or undefined we receive strings 'null' | 'undefined'
                let period
                if (paymPeriod && PERIOD_REGEXP.test(paymPeriod)) {
                    period = formatPeriodFromQRCode(paymPeriod)
                } else {
                    period = await calculatePaymentPeriod(lastReceiptData, get(billingContext, ['settings', 'receiptUploadDate']))
                }

                const categoryId = lastReceiptData.category.id
                const { multiPaymentId } = await registerMultiPaymentForVirtualReceipt(context, {
                    dv, sender,
                    receipt: {
                        currencyCode,
                        amount,
                        period,
                        recipient: {
                            routingNumber: bic,
                            bankAccount: personalAcc,
                            accountNumber: persAcc, // resident's account number
                        },
                        ...categoryId ? { category: { id: categoryId } } : {},
                    },
                    acquiringIntegrationContext: {
                        id: acquiringContext.id,
                    },
                })

                const multiPayment = await MultiPayment.getOne(context, { id: multiPaymentId },
                    'id amountWithoutExplicitFee explicitServiceCharge amount currencyCode',
                )

                return {
                    multiPaymentId,
                    amount: multiPayment.amountWithoutExplicitFee,
                    explicitFee: multiPayment.explicitServiceCharge,
                    totalAmount: multiPayment.amount,
                    acquiringIntegrationHostUrl,
                    currencyCode: multiPayment.currencyCode,
                    address: billingProperty.address,
                    addressMeta: {
                        dv: 1,
                        value: get(billingProperty, ['addressMeta', 'value'], ''),
                        unrestricted_value: get(billingProperty, ['addressMeta', 'unrestricted_value'], ''),
                        data: get(billingProperty, ['addressMeta', 'data'], null),
                    },
                    unitType: billingAccount.unitType,
                    unitName: billingAccount.unitName,
                    accountNumber: persAcc,
                    period,
                }
            },
        },
    ],
})

module.exports = {
    CreatePaymentByLinkService,
}
