/**
 * Generated by `createservice acquiring.CreatePaymentByLinkService`
 */

const { get } = require('lodash')

const { createInstance } = require('@open-condo/clients/address-service-client')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/CreatePaymentByLinkService')
const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/acquiring/constants/context')
const {
    registerMultiPaymentForOneReceipt,
    registerMultiPaymentForVirtualReceipt,
} = require('@condo/domains/acquiring/utils/serverSchema')
const { AcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/serverSchema')
const { BankAccount } = require('@condo/domains/banking/utils/serverSchema')
const {
    validateQRCode,
    BillingReceipt,
    BillingIntegrationOrganizationContext,
    BillingRecipient,
} = require('@condo/domains/billing/utils/serverSchema')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const { WRONG_FORMAT } = require('@condo/domains/common/constants/errors')
const { Property } = require('@condo/domains/property/utils/serverSchema')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    ADDRESS_IS_INVALID: {
        mutation: 'createPaymentByLink',
        code: BAD_USER_INPUT,
        type: WRONG_FORMAT,
        message: 'The provided address is invalid',
    },
    BANK_ACCOUNT_IS_INVALID: {
        mutation: 'createPaymentByLink',
        code: BAD_USER_INPUT,
        type: WRONG_FORMAT,
        message: 'Provided bank account is not in the system',
    },
    NO_BILLING_RECEIPTS_FOUND: {
        mutation: 'createPaymentByLink',
        code: INTERNAL_ERROR,
        type: NOT_FOUND,
        message: 'No Billing Receipts were found for provided accounts',
    },
}

const CreatePaymentByLinkService = new GQLCustomSchema('CreatePaymentByLinkService', {
    types: [
        {
            access: true,
            type: 'input CreatePaymentByLinkInput { dv: Int!, sender: SenderFieldInput!, qrCode: String! }',
        },
        {
            access: true,
            type: 'type CreatePaymentByLinkOutput { multiPaymentId: ID!, address: String!, unitName: String!, accountNumber: String! }',
        },
    ],

    mutations: [
        {
            access: access.canCreatePaymentByLink,
            schema: 'createPaymentByLink(data: CreatePaymentByLinkInput!): CreatePaymentByLinkOutput',
            resolver: async (parent, args, context) => {
                const { data: { dv, sender, qrCode } } = args

                // Stage 0: validate QR code and normalize address
                const validationResult = await validateQRCode(context, { dv, sender, qrCode })

                const {
                    qrCodeFields: {
                        PersonalAcc,
                        BIC,
                        PayerAddress,
                        PaymPeriod,
                        Sum,
                        PayeeINN,
                        PersAcc,
                    },
                } = validationResult
                const addressServiceClient = createInstance({ address: PayerAddress })
                const normalizedAddress = await addressServiceClient.search(PayerAddress, { extractUnit: true })

                if (!normalizedAddress.addressKey) throw new GQLError(ERRORS.ADDRESS_IS_INVALID, context)

                // Stage 1: find properties by addressKey
                const properties = await Property.getAll(context, {
                    OR: [
                        { address: normalizedAddress.address },
                        { addressKey: normalizedAddress.addressKey },
                    ],
                    deletedAt: null,
                })

                const organizationsIds = properties.map((item) => item.organization.id)

                // Stage 2: find organizations with valid contexts and make contexts map
                const billingContexts = await BillingIntegrationOrganizationContext.getAll(context, {
                    organization: { id_in: organizationsIds, deletedAt: null },
                    status: CONTEXT_FINISHED_STATUS,
                    deletedAt: null,
                })

                const acquiringContexts = await AcquiringIntegrationContext.getAll(context, {
                    organization: { id_in: organizationsIds, deletedAt: null },
                    status: CONTEXT_FINISHED_STATUS,
                    deletedAt: null,
                })

                const validOrganizationIds = []
                /**
                 * Map billingContextId to acquiringContextId
                 * @type {Object<string, string>}
                 * */
                const contextsMap = {}

                for (const billingContext of billingContexts) {
                    const orgId = get(billingContext, ['organization', 'id'])
                    for (const acquiringContext of acquiringContexts) {
                        if (orgId === get(acquiringContext, ['organization', 'id'])) {
                            contextsMap[billingContext.id] = acquiringContext.id
                            validOrganizationIds.push(orgId)
                        }
                    }
                }

                // Stage 3: make sure PersonalAccount is in our system (either in BankAccount or in BillingRecipient)
                /** @type {BankAccount[]} */
                const bankAccount = await BankAccount.getOne(context, {
                    number: PersonalAcc,
                    organization: { id_in: validOrganizationIds, deletedAt: null },
                    routingNumber: BIC,
                    deletedAt: null,
                })

                if (!bankAccount) {
                    /** @type {BillingRecipient[]} */
                    const billingRecipients = await BillingRecipient.getAll(context, {
                        context: { id_in: billingContexts.map((context) => context.id), deletedAt: null },
                        bankAccount: PersonalAcc,
                        deletedAt: null,
                    })

                    if (billingRecipients.length === 0) throw new GQLError(ERRORS.BANK_ACCOUNT_IS_INVALID, context)
                }

                // Stage 4: find BillingReceipt with provided Personal Accounts and period
                const period = `${PaymPeriod.split('.')[1]}-${PaymPeriod.split('.')[0]}-01`

                /** @type {BillingReceipt[]} */
                const billingReceipts = await BillingReceipt.getAll(context, {
                    account: { number: PersAcc, deletedAt: null },
                    receiver: { bankAccount: PersonalAcc, deletedAt: null, tin: PayeeINN, isApproved: true },
                    period,
                    deletedAt: null,
                })

                // if period matches we use found receipt to create MultiPayment
                let multiPaymentId
                if (billingReceipts.length === 1) {
                    const { multiPaymentId: id } = await registerMultiPaymentForOneReceipt(context, {
                        dv, sender,
                        receipt: { id: billingReceipts[0].id },
                        acquiringIntegrationContext: { id: contextsMap[get(billingReceipts[0], ['context', 'id'])] },
                    })
                    multiPaymentId = id
                } else {
                    // find the last receipt we have in out database
                    /** @type {BillingReceipt} */
                    const [lastBillingReceipt] = await BillingReceipt.getAll(context, {
                        account: { number: PersAcc, deletedAt: null },
                        receiver: { bankAccount: PersonalAcc, deletedAt: null },
                        deletedAt: null,
                    }, {
                        sortBy: ['period_DESC'],
                        first: 1,
                    })

                    // if no receipt -> no payment
                    if (!lastBillingReceipt) throw new GQLError(ERRORS.NO_BILLING_RECEIPTS_FOUND, context)

                    if (lastBillingReceipt.period > period) {
                        // we have a newer receipt
                        const { multiPaymentId: id } = await registerMultiPaymentForOneReceipt(context, {
                            dv, sender,
                            receipt: { id: lastBillingReceipt.id },
                            acquiringIntegrationContext: { id: contextsMap[get(lastBillingReceipt, ['context', 'id'])] },
                        })
                        multiPaymentId = id
                    } else {
                        // the last receipt is older than the scanned one

                        // find acquiring context and routing number from older receipt
                        const billingIntegrationContext = await getById('BillingIntegrationOrganizationContext', lastBillingReceipt.context.id)
                        /** @type {AcquiringIntegrationContext[]} */
                        const acquiringContexts = await AcquiringIntegrationContext.getAll(context, {
                            organization: { id: billingIntegrationContext.organization, deletedAt: null },
                            status: CONTEXT_FINISHED_STATUS,
                            deletedAt: null,
                        })
                        const bankAccounts = await BankAccount.getAll(context, {
                            organization: { id: billingIntegrationContext.organization, deletedAt: null },
                            deletedAt: null,
                        })

                        const { multiPaymentId: id } = await registerMultiPaymentForVirtualReceipt(context, {
                            dv, sender,
                            receipt: {
                                currencyCode: bankAccounts[0].currencyCode,
                                amount: Sum,
                                period,
                                recipient: {
                                    routingNumber: bankAccounts[0].routingNumber,
                                    bankAccount: PersonalAcc,
                                    accountNumber: PersAcc,
                                },
                            },
                            acquiringIntegrationContext: {
                                id: acquiringContexts[0].id,
                            },
                        })

                        multiPaymentId = id
                    }
                }

                return {
                    multiPaymentId,
                    address: normalizedAddress.address,
                    unitName: normalizedAddress.addressMeta.unitName,
                    accountNumber: PersonalAcc,
                }
            },
        },
    ],
})

module.exports = {
    CreatePaymentByLinkService,
}
