/**
 * Generated by `createservice acquiring.RegisterMultiPaymentService`
 */

const { makeClient } = require('@core/keystone/test.utils')
const { makePayerWithMultipleConsumers, makePayer } = require('@condo/domains/acquiring/utils/testSchema')
const { expectToThrowAuthenticationError, expectToThrowAccessDeniedErrorToResult } = require('@condo/domains/common/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { FEE_CALCULATION_PATH, WEB_VIEW_PATH } = require('@condo/domains/acquiring/constants/links')

const { registerMultiPaymentByTestClient } = require('@condo/domains/acquiring/utils/testSchema')
 
describe('RegisterMultiPaymentService', () => {
    describe('Execute', () => {
        describe('Resident',  () => {
            const cases = [[1, 1], [1, 2], [2, 1], [2, 2]]
            test.each(cases)('Consumers: %p | Receipts in each consumer: %p', async (consumers, receipts) => {
                const { commonData, batches } = await makePayerWithMultipleConsumers(consumers, receipts)
                const hostUrl = commonData.acquiringIntegration.hostUrl
                const payload = batches.map(batch => ({
                    consumerId: batch.serviceConsumer.id,
                    receiptsIds: batch.billingReceipts.map(receipt => receipt.id),
                }))
                const [result] = await registerMultiPaymentByTestClient(commonData.client, payload)
                expect(result).toBeDefined()
                expect(result).toHaveProperty('multiPaymentId')
                expect(result).toHaveProperty('webViewUrl', `${hostUrl}${WEB_VIEW_PATH.replace('[id]', result.multiPaymentId )}`)
                expect(result).toHaveProperty('feeCalculationUrl', `${hostUrl}${FEE_CALCULATION_PATH.replace('[id]', result.multiPaymentId )}`)
            })
        })
        test('Anonymous user', async () => {
            const { serviceConsumer, billingReceipts } = await makePayer()
            const payload = {
                consumerId: serviceConsumer.id,
                receiptsIds: billingReceipts.map(receipt => receipt.id),
            }
            const client = await makeClient()
            await expectToThrowAuthenticationError(async () => {
                await registerMultiPaymentByTestClient(client, payload)
            }, 'result')
        })
        test('Staff user', async () => {
            const { serviceConsumer, billingReceipts } = await makePayer()
            const payload = {
                consumerId: serviceConsumer.id,
                receiptsIds: billingReceipts.map(receipt => receipt.id),
            }
            const client = await makeClientWithNewRegisteredAndLoggedInUser()
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerMultiPaymentByTestClient(client, payload)
            })
        })
    })
})