/**
 * Generated by `createservice acquiring.PaymentByLinkService`
 */

const { faker } = require('@faker-js/faker')

const { getById } = require('@open-condo/keystone/schema')
const { makeLoggedInAdminClient, makeClient, expectToThrowAuthenticationErrorToResult, catchErrorFrom,
    expectToThrowAccessDeniedErrorToResult,
} = require('@open-condo/keystone/test.utils')

const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/acquiring/constants/context')
const { paymentByLinkByTestClient } = require('@condo/domains/acquiring/utils/testSchema')
const { createTestAcquiringIntegration, createTestAcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/testSchema')
const { Payment } = require('@condo/domains/acquiring/utils/testSchema')
const { createTestBankAccount, updateTestBankAccount } = require('@condo/domains/banking/utils/testSchema')
const { createTestBillingReceipt, createTestBillingAccount } = require('@condo/domains/billing/utils/testSchema')
const { createTestBillingIntegrationOrganizationContext,
    createTestBillingIntegration, createTestBillingProperty,
    createTestBillingRecipient, updateTestBillingRecipient,
} = require('@condo/domains/billing/utils/testSchema')
const { validateQRCodeByTestClient } = require('@condo/domains/billing/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const {
    makeClientWithSupportUser,
    makeClientWithResidentUser,
    makeClientWithStaffUser,
    makeClientWithServiceUser,
} = require('@condo/domains/user/utils/testSchema')
 
describe('PaymentByLinkService', () => {
    let qrCode, qrCodeObj, organization, property
    let admin, support, user, anonymous, staff, service
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithResidentUser()
        anonymous = await makeClient()
        staff = await makeClientWithStaffUser()
        service = await makeClientWithServiceUser()
        qrCodeObj = {
            PersonalAcc: '40702810801500116391',
            PayeeINN: faker.random.numeric(8),
            Sum: faker.random.numeric(6),
            lastName: faker.random.alpha(10),
            paymPeriod: '07.2023',
            BIC: '044525999',
            PersAcc: faker.random.numeric(8),
        }

        const [testOrganization] = await createTestOrganization(admin, { tin: qrCodeObj.PayeeINN })
        organization = testOrganization

        const [testProperty] = await createTestProperty(admin, { id: organization.id }, {},
            true, {
                city: 'Москва',
                city_with_type: 'г Москва',
                street: 'Тверская',
                street_with_type: 'ул Тверская',
                house: '14',
                block: '',
                block_type: '',
                region_with_type: '',
                flat: '2',
                flat_type: 'кв',
            })
        property = testProperty
        qrCode = JSON.stringify(qrCodeObj).replace(/["{}]+/g, '')
            .replace(/[:]+/g, '=')
            .replace(/[,]+/g, '|')
            .concat('|PayerAddress=г Москва, ул Тверская, д 14, кв 2')
    })
    test('user: create multiPayment from older receipt', async () => {
        const [integration] = await createTestAcquiringIntegration(admin)
        const [organization] = await createTestOrganization(admin, { tin: qrCodeObj.PayeeINN })
        const [acquiringContext] = await createTestAcquiringIntegrationContext(admin, organization, integration, { status: CONTEXT_FINISHED_STATUS })
        const [billingIntegration] = await createTestBillingIntegration(admin)
        const [billingIntegrationContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, billingIntegration, { status: CONTEXT_FINISHED_STATUS })
        const [bankAccount] = await createTestBankAccount(admin, organization, {
            number: qrCodeObj.PersonalAcc,
            routingNumber: qrCodeObj.BIC,
        })
        const [billingProperty] = await createTestBillingProperty(admin, billingIntegrationContext)
        const [billingAccount] = await createTestBillingAccount(admin, billingIntegrationContext, billingProperty, { number: qrCodeObj.PersAcc })
        const [billingRecipient] = await createTestBillingRecipient(admin, billingIntegrationContext, { bankAccount: qrCodeObj.PersonalAcc })
        const [billingReceipt] = await createTestBillingReceipt(admin, billingIntegrationContext, billingProperty, billingAccount, {
            period: '2023-06-01',
            receiver: { connect: { id: billingRecipient.id } },
        })
        const payload = { qrCode }

        const [data] = await paymentByLinkByTestClient(user, payload)
        await updateTestBankAccount(admin, bankAccount.id, { deletedAt: faker.date.past() })
        await updateTestBillingRecipient(admin, billingRecipient.id, { deletedAt: faker.date.past() } )

        expect(data.multiPaymentId).toBeDefined()
        expect(data.address).toBeDefined()
        expect(data.unitName).toBeDefined()
        expect(data.accountNumber).toEqual(qrCodeObj.PersonalAcc)

        const multiPayment = await getById('MultiPayment', data.multiPaymentId)
        expect(multiPayment).toBeDefined()

        const payments = await Payment.getAll(admin, {
            multiPayment: { id: multiPayment.id },
        })
        expect(payments[0].accountNumber).toBe(qrCodeObj.PersonalAcc)
        expect(payments[0].recipientBic).toBe(qrCodeObj.BIC)
        expect(payments[0].receipt).toBeNull()

    })

    test('user: create multiPayment from existing receipt', async () => {
        const [integration] = await createTestAcquiringIntegration(admin)
        const [organization] = await createTestOrganization(admin, { tin: qrCodeObj.PayeeINN })
        const [acquiringContext] = await createTestAcquiringIntegrationContext(admin, organization, integration, { status: CONTEXT_FINISHED_STATUS })
        const [billingIntegration] = await createTestBillingIntegration(admin)
        const [billingIntegrationContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, billingIntegration, { status: CONTEXT_FINISHED_STATUS })
        const [bankAccount] = await createTestBankAccount(admin, organization, {
            number: qrCodeObj.PersonalAcc,
            routingNumber: qrCodeObj.BIC,
        })
        const [billingProperty] = await createTestBillingProperty(admin, billingIntegrationContext)
        const [billingAccount] = await createTestBillingAccount(admin, billingIntegrationContext, billingProperty, { number: qrCodeObj.PersAcc })
        const [billingRecipient] = await createTestBillingRecipient(admin, billingIntegrationContext, { bankAccount: qrCodeObj.PersonalAcc })
        const [billingReceipt] = await createTestBillingReceipt(admin, billingIntegrationContext, billingProperty, billingAccount, {
            period: '2023-07-01',
            receiver: { connect: { id: billingRecipient.id } },
        })
        const payload = { qrCode }

        const [data] = await paymentByLinkByTestClient(admin, payload)
        await updateTestBankAccount(admin, bankAccount.id, { deletedAt: faker.date.past() })
        await updateTestBillingRecipient(admin, billingRecipient.id, { deletedAt: faker.date.past() } )

        expect(data.multiPaymentId).toBeDefined()
        expect(data.address).toBeDefined()
        expect(data.unitName).toBeDefined()
        expect(data.accountNumber).toEqual(qrCodeObj.PersonalAcc)

        const multiPayment = await getById('MultiPayment', data.multiPaymentId)
        expect(multiPayment).toBeDefined()

        const payments = await Payment.getAll(admin, {
            multiPayment: { id: multiPayment.id },
        })
        expect(payments[0].receipt).toBeDefined()
        expect(payments[0].accountNumber).toBe(billingReceipt.account.number)
        expect(payments[0].recipientBic).toBe(billingReceipt.recipient.bic)

    })

    test('should throw if no Bank Account or Billing Recipient found', async () => {
        const [integration] = await createTestAcquiringIntegration(admin)
        const [organization] = await createTestOrganization(admin, { tin: qrCodeObj.PayeeINN })
        const [acquiringContext] = await createTestAcquiringIntegrationContext(admin, organization, integration, { status: CONTEXT_FINISHED_STATUS })
        const [billingIntegration] = await createTestBillingIntegration(admin)
        const [billingIntegrationContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, billingIntegration, { status: CONTEXT_FINISHED_STATUS })
        const payload = { qrCode }

        await catchErrorFrom(async () => {
            await paymentByLinkByTestClient(user, payload)
        }, ({ errors }) => {

            expect(errors).toMatchObject([{
                message: 'Provided bank account is not in the system',
                path: ['result'],
                extensions: {
                    mutation: 'paymentByLink',
                    code: 'BAD_USER_INPUT',
                    type: 'WRONG_FORMAT',
                    message: 'Provided bank account is not in the system',
                },
            }])
        })

    })

    test('should throw if no Billing Receipts found', async () => {
        const [integration] = await createTestAcquiringIntegration(admin)
        const [organization] = await createTestOrganization(admin, { tin: qrCodeObj.PayeeINN })
        const [acquiringContext] = await createTestAcquiringIntegrationContext(admin, organization, integration, { status: CONTEXT_FINISHED_STATUS })
        const [billingIntegration] = await createTestBillingIntegration(admin)
        const [billingIntegrationContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, billingIntegration, { status: CONTEXT_FINISHED_STATUS })
        const payload = { qrCode }

        const [billingProperty] = await createTestBillingProperty(admin, billingIntegrationContext)
        const [billingAccount] = await createTestBillingAccount(admin, billingIntegrationContext, billingProperty, { number: qrCodeObj.PersAcc })
        const [billingRecipient] = await createTestBillingRecipient(admin, billingIntegrationContext, { bankAccount: qrCodeObj.PersonalAcc })
        const [billingRecipient2] = await createTestBillingRecipient(admin, billingIntegrationContext)
        const [billingReceipt] = await createTestBillingReceipt(admin, billingIntegrationContext, billingProperty, billingAccount, {
            period: '2023-07-01',
            receiver: { connect: { id: billingRecipient2.id } },
        })

        await catchErrorFrom(async () => {
            await paymentByLinkByTestClient(user, payload)
        }, ({ errors }) => {

            expect(errors).toMatchObject([{
                message: 'No Billing Receipts were found for provided accounts',
                path: ['result'],
                extensions: {
                    mutation: 'paymentByLink',
                    code: 'INTERNAL_ERROR',
                    type: 'NOT_FOUND',
                    message: 'No Billing Receipts were found for provided accounts',
                },
            }])
        })

        await updateTestBillingRecipient(admin, billingRecipient.id, { deletedAt: faker.date.past() } )
        await updateTestBillingRecipient(admin, billingRecipient2.id, { deletedAt: faker.date.past() } )

    })
 
    test('anonymous: can\'t execute', async () => {
        await expectToThrowAuthenticationErrorToResult(async () => {
            await paymentByLinkByTestClient(anonymous, { qrCode })
        })
    })

    test('support: can\'t execute', async () => {
        await expectToThrowAccessDeniedErrorToResult(async () => {
            await validateQRCodeByTestClient(support, { qrCode })
        })
    })

    test('staff: can\'t execute', async () => {
        await expectToThrowAccessDeniedErrorToResult(async () => {
            await validateQRCodeByTestClient(staff, { qrCode })
        })
    })

    test('service: can\'t execute', async () => {
        await expectToThrowAccessDeniedErrorToResult(async () => {
            await validateQRCodeByTestClient(service, { qrCode })
        })
    })
})