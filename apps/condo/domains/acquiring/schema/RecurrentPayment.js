/**
 * Generated by `createschema acquiring.RecurrentPayment 'status:Text;tryCount:Integer;state:Json;billingReceipts:Json'`
 */

const { DateTimeUtc, Integer, Relationship, Select } = require('@keystonejs/fields')

const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/acquiring/access/RecurrentPayment')
const {
    RECURRENT_PAYMENT_STATUSES,
    RECURRENT_PAYMENT_INIT_STATUS,
} = require('@condo/domains/acquiring/constants/recurrentPayment')
const { BILLING_RECEIPTS_SCHEMA_FIELD } = require('@condo/domains/acquiring/schema/fields/BillingReceipts')


const RecurrentPayment = new GQLListSchema('RecurrentPayment', {
    schemaDoc: 'Hold a snapshot of monthly payment data. Used by background recurrent payment process.',
    fields: {
        status: {
            schemaDoc: 'Payment proceeding status',
            type: Select,
            dataType: 'enum',
            options: RECURRENT_PAYMENT_STATUSES,
            defaultValue: RECURRENT_PAYMENT_INIT_STATUS,
        },

        payAfter: {
            schemaDoc: 'Payment proceeding should start after date.',
            type: DateTimeUtc,
            isRequired: false,
        },

        tryCount: {
            schemaDoc: 'Count of proceeding tries.',
            type: Integer,
            isRequired: true,
        },

        state: {
            schemaDoc: 'Hold current state of payment proceeding.',
            type: Json,
            isRequired: true,
        },

        billingReceipts: BILLING_RECEIPTS_SCHEMA_FIELD,

        recurrentPaymentContext: {
            schemaDoc: 'Link to RecurrentPaymentContext',
            type: Relationship,
            ref: 'RecurrentPaymentContext',
            isRequired: true,
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadRecurrentPayments,
        create: access.canManageRecurrentPayments,
        update: access.canManageRecurrentPayments,
        delete: false,
        auth: true,
    },
})

module.exports = {
    RecurrentPayment,
}
