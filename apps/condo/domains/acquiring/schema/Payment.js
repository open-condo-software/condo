/**
 * Generated by `createschema acquiring.Payment 'amount:Decimal; currencyCode:Text; time:DateTimeUtc; accountNumber:Text; purpose?:Text; receipt:Relationship:BillingReceipt:PROTECT; multiPayment:Relationship:MultiPayment:PROTECT; context:Relationship:AcquiringIntegrationContext:PROTECT;' --force`
 */

const { Text, Relationship, DateTimeUtc, Select } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD, CURRENCY_CODE_FIELD, MONEY_AMOUNT_FIELD } = require('@condo/domains/common/schema/fields')
const { PERIOD_FIELD } = require('@condo/domains/billing/schema/fields/common')
const access = require('@condo/domains/acquiring/access/Payment')
const { PAYMENT_STATUSES, PAYMENT_INIT_STATUS } = require('@condo/domains/acquiring/constants')


const Payment = new GQLListSchema('Payment', {
    schemaDoc: 'Information about completed transaction from user to a specific organization',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        amount: {
            ...MONEY_AMOUNT_FIELD,
            schemaDoc: 'Amount of money from MultiPayment.amountWithOutExplicitFee to pay for billing receipt',
            isRequired: true,
        },

        explicitFee: {
            ...MONEY_AMOUNT_FIELD,
            schemaDoc: 'Amount of money which payer pays on top of initial "amount"',
            isRequired: false,
        },

        implicitFee: {
            ...MONEY_AMOUNT_FIELD,
            schemaDoc: 'Amount of money which recipient pays from initial amount for transaction',
            isRequired: false,
            access: { read: access.canReadPaymentsSensitiveData },
        },

        currencyCode: CURRENCY_CODE_FIELD,

        advancedAt: {
            schemaDoc: 'Time at which money was advanced to recipient\'s account',
            type: DateTimeUtc,
            isRequired: true,
        },

        accountNumber: {
            schemaDoc: 'Payer\'s account number',
            type: Text,
            isRequired: true,
        },

        period: PERIOD_FIELD,

        purpose: {
            schemaDoc: 'Purpose of payment. Mostly used as title such as "Payment by agreement â„–123"',
            type: Text,
            isRequired: false,
        },

        receipt: {
            schemaDoc: 'Link to a billing receipt that the user paid for. Can be undefined in cases of getting payments out of our system',
            type: Relationship,
            ref: 'BillingReceipt',
            isRequired: false,
            kmigratorOptions: { null: true, on_delete: 'models.PROTECT' },
        },

        frozenReceipt: {
            schemaDoc: 'Frozen billing receipt, used to resolving conflicts',
            type: Json,
            isRequired: false,
            access: { read: access.canReadPaymentsSensitiveData },
            // TODO (savelevMatthew): create validation / type later
        },

        multiPayment: {
            schemaDoc: 'Link to a payment related MultiPayment. Required field to update, but initially created unlinked',
            type: Relationship,
            ref: 'MultiPayment.payments',
            kmigratorOptions: { null: true, on_delete: 'models.PROTECT' },
            hooks: {
                // TODO (savelevMatthew): create validations later
            },
        },

        // TODO (savelevMatthew): create FIELD later
        context: {
            schemaDoc: 'Link to Acquiring Integration context to link payment with organization',
            type: Relationship,
            ref: 'AcquiringIntegrationContext',
            isRequired: false,
            kmigratorOptions: { null: true, on_delete: 'models.PROTECT' },
        },

        organization: {
            schemaDoc: 'Direct link to organization, since acquiring context cannot be defined for some payments',
            type: Relationship,
            ref: 'Organization',
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
            access: { read: access.canReadPaymentsSensitiveData },
        },

        status: {
            schemaDoc: `Status of payment. Can be: ${PAYMENT_STATUSES.map(status => `"${status}"`).join(', ')}`,
            type: Select,
            dataType: 'string',
            isRequired: true,
            options: PAYMENT_STATUSES,
            defaultValue: PAYMENT_INIT_STATUS,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadPayments,
        create: access.canManagePayments,
        update: access.canManagePayments,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Payment,
}
