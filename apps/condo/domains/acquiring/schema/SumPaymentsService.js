/**
 * Generated by `createservice acquiring.SumPaymentsService`
 */

const Big = require('big.js')
const { GQLCustomSchema } = require('@condo/keystone/schema')
const { GqlWithKnexLoadList } = require('@condo/domains/common/utils/serverSchema')
const access = require('@condo/domains/acquiring/access/SumPaymentsService')


const SumPaymentsService = new GQLCustomSchema('SumPaymentsService', {
    types: [
        {
            access: true,
            type: 'type SumPaymentsOutput { sum: String! }',
        },
    ],

    queries: [
        {
            access: access.canSumPayments,
            schema: 'sumPayments(where: PaymentWhereInput!): SumPaymentsOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { where } = args
                const paymentLoader = new GqlWithKnexLoadList({
                    listKey: 'Payment',
                    fields: 'id',
                    where: where,
                })
                const idObjects = await paymentLoader.load()
                const aggregate = await paymentLoader.loadAggregate('SUM(amount) as "amountSum"', idObjects.map(({ id }) => id))
                const sum = Big(aggregate.amountSum || 0).toFixed(8)
                return {
                    sum: sum,
                }
            },
        },
    ],

})

module.exports = {
    SumPaymentsService,
}
