/**
 * Generated by `createschema acquiring.RecurrentPayment 'status:Text;tryCount:Integer;state:Json;billingReceipts:Json'`
 */

const { v4: uuid } = require('uuid')
const dayjs = require('dayjs')

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const {
    RECURRENT_PAYMENT_INIT_STATUS,
} = require('@condo/domains/acquiring/constants/recurrentPayment')
const { RecurrentPayment, createTestRecurrentPayment, updateTestRecurrentPayment, createTestRecurrentPaymentContext } = require('@condo/domains/acquiring/utils/testSchema')
const { createTestBillingCategory } = require('@condo/domains/billing/utils/testSchema')
const { makeClientWithServiceConsumer } = require('@condo/domains/resident/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

describe('RecurrentPayment', () => {
    let admin, 
        support,
        user,
        anonymous,
        getContextRequest,
        getPaymentRequest,
        billingCategory,
        serviceConsumerClient,
        recurrentPaymentContext

    beforeEach( async () => {
        serviceConsumerClient = await makeClientWithServiceConsumer()
        recurrentPaymentContext = (await createTestRecurrentPaymentContext(admin, getContextRequest()))[0]
    })

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()
        billingCategory = (await createTestBillingCategory(admin, { name: `Category ${new Date()}` }))[0]

        getContextRequest = () => ({
            enabled: false,
            limit: '10000',
            autoPayReceipts: false,
            paymentDay: 10,
            settings: {},
            serviceConsumer: { connect: { id: serviceConsumerClient.serviceConsumer.id } },
            billingCategory: { connect: { id: billingCategory.id } },
        })

        getPaymentRequest = () => ({
            status: RECURRENT_PAYMENT_INIT_STATUS,
            payAfter: dayjs().toISOString(),
            tryCount: 0,
            state: {},
            billingReceipts: [],
            recurrentPaymentContext: { connect: { id: recurrentPaymentContext.id } },
        })
    })
    
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestRecurrentPayment(admin, getPaymentRequest())
                })
            })

            test('support can\'t', async () => {
                const client = await makeClientWithSupportUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestRecurrentPayment(client, getPaymentRequest())
                })
            })

            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestRecurrentPayment(client, getPaymentRequest())
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestRecurrentPayment(client, getPaymentRequest())
                })
            })
        })

        describe('update', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestRecurrentPayment(admin, uuid(), getPaymentRequest())
                })
            })

            test('support can\'t', async () => {
                const client = await makeClientWithSupportUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestRecurrentPayment(client, uuid(), getPaymentRequest())
                })
            })

            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestRecurrentPayment(client, uuid(), getPaymentRequest())
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestRecurrentPayment(client, uuid(), getPaymentRequest())
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await RecurrentPayment.delete(admin, uuid())
                })
            })

            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await RecurrentPayment.delete(client, uuid())
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await RecurrentPayment.delete(client, uuid())
                })
            })
        })
    })
})
