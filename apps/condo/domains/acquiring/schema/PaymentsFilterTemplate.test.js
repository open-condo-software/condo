/**
 * Generated by `createschema acquiring.PaymentsFilterTemplate 'name:Text; employee:Relationship:OrganizationEmployee:CASCADE'`
 */

const faker = require('faker')
const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@condo/keystone/test.utils')

const { PaymentsFilterTemplate, createTestPaymentsFilterTemplate, updateTestPaymentsFilterTemplate } = require('@condo/domains/acquiring/utils/testSchema')
const {
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
} = require('@condo/keystone/test.utils')
const { createTestOrganization, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const {
    createTestOrganizationEmployeeRole,
    updateTestOrganizationEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { expectToThrowGraphQLRequestError } = require('@condo/keystone/test.utils')

describe('PaymentsFilterTemplate', () => {
    describe('Create', () => {
        test('admin: can create PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(admin, employee, {})

            expect(filtersTemplate.id).toMatch(UUID_RE)
        })

        test('employee: can create PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role, { isAccepted: true })

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(user, employee, {})

            expect(filtersTemplate.id).toMatch(UUID_RE)
        })

        test('employee: cannot create PaymentsFilterTemplate with wrong filter field', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)
            const wrongFieldValue = faker.random.alphaNumeric(5)
            const wrongFilters = {
                wrongField: wrongFieldValue,
            }

            await expectToThrowGraphQLRequestError(
                async () => await createTestPaymentsFilterTemplate(user, employee, {
                    fields: wrongFilters,
                }),
                'got invalid value'
            )
        })

        test('employee: cannot create PaymentsFilterTemplate with wrong filter field value', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)
            const wrongFieldValue = faker.datatype.number()
            const wrongFilters = {
                type: wrongFieldValue,
            }

            await expectToThrowGraphQLRequestError(
                async () => await createTestPaymentsFilterTemplate(user, employee, {
                    fields: wrongFilters,
                }),
                'got invalid value',
            )
        })

        test('deleted employee: cannot create PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)
            await updateTestOrganizationEmployee(admin, employee.id, {
                deletedAt: 'true',
            })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestPaymentsFilterTemplate(user, employee, {})
            })
        })

        test('blocked employee: cannot create PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)
            await updateTestOrganizationEmployee(admin, employee.id, {
                isBlocked: true,
            })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestPaymentsFilterTemplate(user, employee, {})
            })
        })

        test('user: cannot create PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, employeeUser.user, role)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestPaymentsFilterTemplate(user, employee, {})
            })
        })

        test('anonymous: cannot create PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const anonymous = await makeClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, employeeUser.user, role)

            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestPaymentsFilterTemplate(anonymous, employee, {})
            })
        })
    })

    describe('Read', () => {
        test('admin: can read PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(admin, employee, {})
            const templates = await PaymentsFilterTemplate.getAll(admin, { id: filtersTemplate.id })

            expect(templates).toHaveLength(1)
            expect(templates[0].id).toEqual(filtersTemplate.id)
        })

        test('employee: can read his PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role, { isAccepted: true })

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(user, employee, {})
            const templates = await PaymentsFilterTemplate.getAll(user, { id: filtersTemplate.id })

            expect(templates).toHaveLength(1)
            expect(templates[0].id).toEqual(filtersTemplate.id)
        })

        test('employee: cannot read not his own PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role, { isAccepted: true })
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, user2.user, role)

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(user1, employee1, {})
            const templates = await PaymentsFilterTemplate.getAll(user2, { id: filtersTemplate.id })

            expect(templates).toHaveLength(0)
        })

        test('user: cannot read PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user1.user, role, { isAccepted: true })
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(user1, employee, {})
            const templates = await PaymentsFilterTemplate.getAll(user2, { id: filtersTemplate.id })

            expect(templates).toHaveLength(0)
        })

        test('anonymous: cannot read PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user1.user, role, { isAccepted: true })
            const anonymous = await makeClient()

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(user1, employee, {})

            await expectToThrowAuthenticationErrorToObjects(async () => {
                await PaymentsFilterTemplate.getAll(anonymous, { id: filtersTemplate.id })
            })
        })
    })

    describe('Update', () => {
        test('admin: can update PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(admin, employee, {})
            const newTemplateName = faker.random.alphaNumeric(8)
            const [updatedTemplate] = await updateTestPaymentsFilterTemplate(admin, filtersTemplate.id, {
                name: newTemplateName,
            })

            expect(updatedTemplate.id).toEqual(filtersTemplate.id)
            expect(updatedTemplate.name).toEqual(newTemplateName)
        })

        test('employee: can update his PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role, { isAccepted: true })

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(user, employee, {})
            const newTemplateName = faker.random.alphaNumeric(8)
            const [updatedTemplate] = await updateTestPaymentsFilterTemplate(user, filtersTemplate.id, {
                name: newTemplateName,
            })

            expect(updatedTemplate.id).toEqual(filtersTemplate.id)
            expect(updatedTemplate.name).toEqual(newTemplateName)
        })

        test('employee: cannot update not his own PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role, { isAccepted: true })
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, user2.user, role)

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(user1, employee1, {})
            const newTemplateName = faker.random.alphaNumeric(8)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestPaymentsFilterTemplate(user2, filtersTemplate.id, {
                    name: newTemplateName,
                })
            })
        })

        test('user: cannot update PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role, { isAccepted: true })
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(user1, employee1, {})
            const newTemplateName = faker.random.alphaNumeric(8)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestPaymentsFilterTemplate(user2, filtersTemplate.id, {
                    name: newTemplateName,
                })
            })
        })

        test('anonymous: cannot update PaymentsFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role, { isAccepted: true })
            const user2 = await makeClient()

            const [filtersTemplate] = await createTestPaymentsFilterTemplate(user1, employee1, {})
            const newTemplateName = faker.random.alphaNumeric(8)

            await expectToThrowAuthenticationErrorToObj(async () => {
                await updateTestPaymentsFilterTemplate(user2, filtersTemplate.id, {
                    name: newTemplateName,
                })
            })
        })
    })
})
