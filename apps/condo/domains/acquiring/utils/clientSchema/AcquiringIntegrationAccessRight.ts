/**
 * Generated by `createschema acquiring.AcquiringIntegrationAccessRight 'user:Relationship:User:PROTECT;'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'
import { generateNewReactHooks } from '@condo/domains/common/utils/codegeneration/new.generate.hooks'

import { AcquiringIntegrationAccessRight as AcquiringIntegrationAccessRightGQL } from '@condo/domains/acquiring/gql'
import { AcquiringIntegrationAccessRight, AcquiringIntegrationAccessRightCreateInput, AcquiringIntegrationAccessRightUpdateInput, QueryAllAcquiringIntegrationAccessRightsArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'user']
const RELATIONS = ['user', 'integration']

export interface IAcquiringIntegrationAccessRightUIState extends AcquiringIntegrationAccessRight {
    id: string
}

function convertToUIState (item: AcquiringIntegrationAccessRight): IAcquiringIntegrationAccessRightUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IAcquiringIntegrationAccessRightUIState
}

export interface IAcquiringIntegrationAccessRightFormState {
    id?: undefined
}

function convertToUIFormState (state: IAcquiringIntegrationAccessRightUIState): IAcquiringIntegrationAccessRightFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IAcquiringIntegrationAccessRightFormState
}

function convertToGQLInput (state: IAcquiringIntegrationAccessRightFormState): AcquiringIntegrationAccessRightUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<AcquiringIntegrationAccessRight, AcquiringIntegrationAccessRightUpdateInput, IAcquiringIntegrationAccessRightFormState, IAcquiringIntegrationAccessRightUIState, QueryAllAcquiringIntegrationAccessRightsArgs>(AcquiringIntegrationAccessRightGQL, { convertToGQLInput, convertToUIState })
const {
    useNewObject,
    useNewObjects,
    useNewCreate,
    useNewUpdate,
    useNewSoftDelete,
} = generateNewReactHooks<AcquiringIntegrationAccessRight, AcquiringIntegrationAccessRightCreateInput, AcquiringIntegrationAccessRightUpdateInput, QueryAllAcquiringIntegrationAccessRightsArgs>(AcquiringIntegrationAccessRightGQL)

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
    useNewObject,
    useNewObjects,
    useNewCreate,
    useNewUpdate,
    useNewSoftDelete,
}
