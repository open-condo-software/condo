/**
 * Generated by `createschema acquiring.PaymentsFile 'number:Text;file:File;billingIntegrationOrganizationContextId:Text;externalId:Text;account:Text;dateBegin:CalendarDay;dateEnd:CalendarDay;dateLoad:DateTimeUtc;uploadedRecords:Integer;amount:Decimal;amountBring:Decimal;registryName:Text;bankStatus:Text;bankComment:Text;fileName:Text;'`
 */

const get = require('lodash/get')
const uniq = require('lodash/uniq')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find, getById } = require('@open-condo/keystone/schema')

const { checkAcquiringIntegrationAccessRights } = require('@condo/domains/acquiring/utils/accessSchema')
const { SERVICE, STAFF } = require('@condo/domains/user/constants/common')

async function canReadPaymentsFiles ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    // Acquiring integration account can see its payments files
    if (user.type === SERVICE) {
        return { context: { integration: { accessRights_some: { user: { id: user.id }, deletedAt: null } } } }
    }

    // Employee with `canReadPayments` can see theirs organization payments files
    if (user.type === STAFF) {
        return { context: { organization: { employees_some: { user: { id: user.id }, role: { canReadPayments: true }, deletedAt: null, isBlocked: false } } } }

    }

    return false
}

// Only service users can manage
async function canManagePaymentsFiles ({ authentication: { item: user }, originalInput, operation, itemIds, itemId, listKey }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true
    if (user.type !== SERVICE) return false

    const isBulkRequest = Array.isArray(originalInput)

    // STEP 1: Obtain contextIds and match theirs amounts
    let contextIds
    if (operation === 'create') {
        if (isBulkRequest) {
            contextIds = originalInput.map(element => get(element, ['data', 'context', 'connect', 'id']))
            if (contextIds.filter(Boolean).length !== originalInput.length) return false
            contextIds = uniq(contextIds)
        } else {
            const contextId = get(originalInput, ['context', 'connect', 'id'])
            if (!contextId) return false
            contextIds = [contextId]
        }
    } else if (operation === 'update') {
        if (isBulkRequest) {
            if (!itemIds || !Array.isArray(itemIds)) return false
            if (itemIds.length !== uniq(itemIds).length) return false
            const items = await find(listKey, {
                id_in: itemIds,
                deletedAt: null,
            })
            if (items.length !== itemIds.length) return false
            contextIds = uniq(items.map(item => item.context))
        } else {
            if (!itemId) return false
            const item = await getById(listKey, itemId)
            contextIds = [item.context]
        }
    }

    // STEP 2: Obtain all contexts and check their deletion status
    const contexts = await find('AcquiringIntegrationContext', {
        id_in: contextIds,
        deletedAt: null,
    })

    if (contexts.length !== contextIds.length) return false
    const integrationIds = uniq(contexts.map(context => context.integration))

    // STEP 3: Check billing integration access rights
    return await checkAcquiringIntegrationAccessRights(user.id, integrationIds)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadPaymentsFiles,
    canManagePaymentsFiles,
}
