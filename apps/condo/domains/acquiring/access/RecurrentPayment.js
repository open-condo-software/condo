// @ts-nocheck
/**
 * Generated by `createschema acquiring.RecurrentPayment 'status:Text;tryCount:Integer;state:Json;billingReceipts:Json'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { RESIDENT } = require('@condo/domains/user/constants/common')

const userFilter = (id) => ({ recurrentPaymentContext: { serviceConsumer: { resident: { user: { id } } } } })

async function canReadRecurrentPayments ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    if (user.type === RESIDENT) {
        return userFilter(user.id)
    }

    return false
}

async function canManageRecurrentPayments ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isSupport || user.isAdmin) return true

    return false
}
/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadRecurrentPayments,
    canManageRecurrentPayments,
}
