/**
 * Generated by `createschema acquiring.AcquiringIntegrationContext 'integration:Relationship:AcquiringIntegration:PROTECT; organization:Relationship:Organization:PROTECT; settings:Json; state:Json;' --force`
 */

const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const { checkAcquiringIntegrationAccessRight } = require('../utils/accessSchema')

const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')
const { getById } = require('@core/keystone/schema')
const get = require('lodash/get')

async function canReadAcquiringIntegrationContexts ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false

    if (listKey === USER_SCHEMA_NAME) {
        if (item.isSupport || item.isAdmin) return {}
        const userId = get(item, 'id')

        return {
            OR: [
                { organization: { employees_some: { user: { id: userId }, role: { canReadPayments: true }, isBlocked: false, deletedAt: null } } },
                { integration: { accessRights_some: { user: { id: userId }, deletedAt: null } } },
            ],
        }
    }

    return false
}

async function canManageAcquiringIntegrationContexts ({ authentication: { item, listKey }, originalInput, operation, itemId }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false

    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true

        let organizationId
        let integrationId

        if (operation === 'create') {
            // get ids from input on create
            organizationId = get(originalInput, ['organization', 'connect', 'id'])
            integrationId = get(originalInput, ['integration', 'connect', 'id'])
            if (!organizationId || !integrationId) return false
        } else if (operation === 'update') {
            // getting ids from existing object
            if (!itemId) return false
            const context = await getById('AcquiringIntegrationContext', itemId)
            if (!context) return false
            const { organization, integration } = context
            organizationId = organization
            integrationId = integration
        }

        const userId = get(item, 'id')
        const canManageIntegrations = await checkOrganizationPermission(userId, organizationId, 'canManageIntegrations')
        if (canManageIntegrations && operation === 'create') return true

        return await checkAcquiringIntegrationAccessRight(userId, integrationId)
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadAcquiringIntegrationContexts,
    canManageAcquiringIntegrationContexts,
}
