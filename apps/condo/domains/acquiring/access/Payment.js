/**
 * Generated by `createschema acquiring.Payment 'amount:Decimal; currencyCode:Text; time:DateTimeUtc; accountNumber:Text; purpose?:Text; receipts:Relationship:BillingReceipt:PROTECT; multiPayment:Relationship:MultiPayment:PROTECT; context:Relationship:AcquiringIntegrationContext:PROTECT;' --force`
 */
const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find, getById } = require('@open-condo/keystone/schema')

const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

const { checkAcquiringIntegrationAccessRight } = require('../utils/accessSchema')


async function canReadPayments ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    if (user.type === RESIDENT) {
        return { multiPayment: { user: { id: user.id } } }
    }

    return {
        OR: [
            // Acquiring integration account can see it's payments
            { context: { integration: { accessRights_some: { user: { id: user.id }, deletedAt: null } } } },
            { invoice: { context: { integration: { accessRights_some: { user: { id: user.id }, deletedAt: null } } } } },
            // Employee with `canReadPayments` can see theirs organization payments
            { organization: { employees_some: { user: { id: user.id }, role: { canReadPayments: true }, deletedAt: null, isBlocked: false } } },
        ],
    }
}

async function canManagePayments ({ authentication: { item: user }, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return true
    // Nobody can create Payments manually
    if (operation === 'create') return false
    // Acquiring integration can update it's own Payments
    if (operation === 'update' && itemId) {
        return { context: { integration: { accessRights_some: { user: { id: user.id }, deletedAt: null } } } }
    }
    return false
}

async function canReadPaymentsSensitiveData ({ authentication: { item: user }, existingItem }) {
    if (!user || user.deletedAt) return false
    if (user.isSupport || user.isAdmin) return true

    let integrationId

    if (existingItem.receipt) {
        const [acquiringContext] = await find('AcquiringIntegrationContext', {
            id: existingItem.context,
        })
        // If context exist => check is it's integration account
        if (acquiringContext) {
            integrationId = get(acquiringContext, 'integration')
        }
    } else if (existingItem.invoice) {
        const invoice = await getById('Invoice', existingItem.invoice)
        if (invoice) {
            const invoiceContext = await getById('InvoiceContext', invoice.context)
            // If context exist => check is it's integration account
            if (invoiceContext) {
                integrationId = get(invoiceContext, 'integration')
            }
        }
    }

    if (integrationId) {
        if (await checkAcquiringIntegrationAccessRight(user.id, integrationId)) return true
    }

    // Otherwise check if it's employee or not
    return !!(await checkOrganizationPermission(user.id, existingItem.organization, 'canReadPayments'))
}


/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadPayments,
    canManagePayments,
    canReadPaymentsSensitiveData,
}
