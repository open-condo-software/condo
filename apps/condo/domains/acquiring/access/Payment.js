/**
 * Generated by `createschema acquiring.Payment 'amount:Decimal; currencyCode:Text; time:DateTimeUtc; accountNumber:Text; purpose?:Text; receipts:Relationship:BillingReceipt:PROTECT; multiPayment:Relationship:MultiPayment:PROTECT; context:Relationship:AcquiringIntegrationContext:PROTECT;' --force`
 */

const { RESIDENT } = require('@condo/domains/user/constants/common')
const { Payment } = require('@condo/domains/acquiring/utils/serverSchema')
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')

async function canReadPayments ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}
    // User can get only it's own payments
    if (user.type === RESIDENT) {
        return {
            multiPayment: { user: { id: user.id } },
        }
    }
    return {
        OR: [
            // Acquiring integration account can see it's payments
            { context: { integration: { accessRights_some: { user: { id: user.id } } } } },
            // Employee with `canReadPayments` can see theirs organization payments
            { context: { organization: { employees_some: { user: { id: user.id }, role: { canReadPayments: true }, deletedAt: null, isBlocked: false } } } },
        ],
    }
}

async function canManagePayments ({ authentication: { item: user }, operation, context, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true
    if (operation === 'create') {
        // Nobody can create Payments manually
        return false

    } else if (operation === 'update') {
        if (!itemId) return false
        // Acquiring integration can update it's own Payments
        const payments = await Payment.getAll(context, {
            id: itemId,
            multiPayment: { integration: { accessRights_some: { user: { id: user.id } } } },
        })
        if (payments.length) {
            return true
        }
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadPayments,
    canManagePayments,
}
