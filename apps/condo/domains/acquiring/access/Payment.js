/**
 * Generated by `createschema acquiring.Payment 'amount:Decimal; currencyCode:Text; time:DateTimeUtc; accountNumber:Text; purpose?:Text; receipts:Relationship:BillingReceipt:PROTECT; multiPayment:Relationship:MultiPayment:PROTECT; context:Relationship:AcquiringIntegrationContext:PROTECT;' --force`
 */
const { find } = require('@core/keystone/schema')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const { checkAcquiringIntegrationAccessRight } = require('../utils/accessSchema')

const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')
const get = require('lodash/get')

async function canReadPayments ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false

    if (listKey === USER_SCHEMA_NAME) {
        if (item.isSupport || item.isAdmin) return {}
        if (item.type === RESIDENT) {
            return { multiPayment: { user: { id: item.id } } }
        }

        return {
            OR: [
                // Acquiring integration account can see it's payments
                { context: { integration: { accessRights_some: { user: { id: item.id }, deletedAt: null } } } },
                // Employee with `canReadPayments` can see theirs organization payments
                { organization: { employees_some: { user: { id: item.id }, role: { canReadPayments: true }, deletedAt: null, isBlocked: false } } },
            ],
        }
    }

    return false
}

async function canManagePayments ({ authentication: { item, listKey }, operation, itemId }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        // Nobody can create Payments manually
        if (operation === 'create') return false
        // Acquiring integration can update it's own Payments
        if (operation === 'update' && itemId) {
            return { context: { integration: { accessRights_some: { user: { id: item.id }, deletedAt: null } } } }
        }
        return false
    }
    return false
}

async function canReadPaymentsSensitiveData ({ authentication: { item, listKey }, existingItem }) {
    if (!listKey || !item || item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isSupport || item.isAdmin) return true
        const [acquiringContext] = await find('AcquiringIntegrationContext', {
            id: existingItem.context,
        })
        // If context exist => check is it's integration account
        if (acquiringContext) {
            const integrationId = get(acquiringContext, ['integration'])
            if (await checkAcquiringIntegrationAccessRight(item.id, integrationId)) return true
        }
        // Otherwise check if it's employee or not
        return !!(await checkOrganizationPermission(item.id, existingItem.organization, 'canReadPayments'))
    }
    return false
}


/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadPayments,
    canManagePayments,
    canReadPaymentsSensitiveData,
}
