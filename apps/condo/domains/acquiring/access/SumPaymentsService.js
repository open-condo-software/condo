/**
 * Generated by `createservice acquiring.SumPaymentsService`
 */
const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { checkPermissionsInEmployedOrganizations } = require('@condo/domains/organization/utils/accessSchema')

async function canSumPayments ({ args: { where }, authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    const organizationFromInvoice = get(where, ['invoice', 'context', 'organization', 'id'], null)
    if (organizationFromInvoice) return await checkPermissionsInEmployedOrganizations(context, user, organizationFromInvoice, 'canReadPayments')

    const organizationId = get(where, ['organization', 'id'], null)
    if (!organizationId) return false

    return await checkPermissionsInEmployedOrganizations(context, user, organizationId, 'canReadPayments')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canSumPayments,
}