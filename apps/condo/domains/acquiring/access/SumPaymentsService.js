/**
 * Generated by `createservice acquiring.SumPaymentsService`
 */
const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { checkPermissionsInEmployedOrganizations } = require('@condo/domains/organization/utils/accessSchema')
const { canDirectlyExecuteService } = require('@condo/domains/user/utils/directAccess')

async function canSumPayments ({ args: { data: { paymentsWhere, paymentsFilesWhere } }, authentication: { item: user }, context, gqlName }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    const hasDirectAccess = await canDirectlyExecuteService(user, gqlName)
    if (hasDirectAccess) return hasDirectAccess

    if (paymentsWhere) {
        const organizationFromInvoice = get(paymentsWhere, ['invoice', 'context', 'organization', 'id'], null)
        if (organizationFromInvoice) return await checkPermissionsInEmployedOrganizations(context, user, organizationFromInvoice, 'canReadPayments')

        const organizationId = get(paymentsWhere, ['organization', 'id'], null)
        if (!organizationId) return false

        return await checkPermissionsInEmployedOrganizations(context, user, organizationId, 'canReadPayments')
    }

    if (paymentsFilesWhere) {
        const contextId = get(paymentsFilesWhere, ['context', 'id'], null)
        if (!contextId) return false

        const [context] = await find('AcquiringIntegrationContext', {
            id: contextId,
            deletedAt: null,
        })

        if (!context) return false

        return await checkPermissionsInEmployedOrganizations(context, user, context.organization, 'canReadPayments')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canSumPayments,
}