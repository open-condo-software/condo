/**
 * Generated by `createservice acquiring.RegisterMultiPaymentService`
 */
const get = require('lodash/get')
const isEmpty = require('lodash/isEmpty')
const uniq = require('lodash/uniq')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { checkPermissionsInUserOrganizationsOrRelatedOrganizations } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')


async function canRegisterMultiPayment ({ authentication: { item: user }, args: { data } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type === RESIDENT) {
        return true
    }

    const invoicesFromArgs = get(data, 'invoices')
    if (isEmpty(invoicesFromArgs)) {
        return false
    }

    const invoices = await find('Invoice', {
        id_in: invoicesFromArgs.map(obj => obj.id),
        deletedAt: null,
    })
    const invoiceContextIds = uniq(invoices.map(invoice => invoice.context))
    const invoiceContexts = await find('InvoiceContext', {
        id_in: invoiceContextIds,
        deletedAt: null,
    })
    const organizationIds = uniq(invoiceContexts.map(invoiceContext => invoiceContext.organization))

    return await checkPermissionsInUserOrganizationsOrRelatedOrganizations(user.id, organizationIds, 'canManageInvoices')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canRegisterMultiPayment,
}