/**
 * Generated by `createschema acquiring.MultiPayment 'amount:Decimal; commission?:Decimal; time:DateTimeUtc; cardNumber:Text; serviceCategory:Text;'`
 */

const { checkAcquiringIntegrationAccessRight } = require(
    '@condo/domains/acquiring/utils/accessSchema')
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')
const { RESIDENT } = require('@condo/domains/user/constants/common')



async function canReadMultiPayments ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isSupport || item.isAdmin) return {}
        const userId = item.id
        if (item.type === RESIDENT) {
            return {
                user: { id: userId },
            }
        }
        // Acquiring integration account can get only MultiPayments linked to this integration
        return { integration: { accessRights_some: { user: { id: userId } }, deletedAt: null } }
    }
    return false
}

async function canManageMultiPayments ({ authentication: { item, listKey }, operation, itemId }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        // Can be created only through custom mutation or by admin, can be modified by acquiring integration account
        if (operation === 'create') return false
        // Acquiring integration account can update only it's own multipayment
        if (operation === 'update' && itemId) return { integration: { accessRights_some: { user: { id: item.id } } } }
        return false
    }
    return false
}

async function canReadMultiPaymentsSensitiveData ({ authentication: { item, listKey }, existingItem }) {
    if (!listKey || !item || item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin || item.isSupport) return true
        return !!(await checkAcquiringIntegrationAccessRight(item.id, existingItem.integration))
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMultiPayments,
    canManageMultiPayments,
    canReadMultiPaymentsSensitiveData,
}
