/**
 * Generated by `createschema banking.BankCategory 'name:Text;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const faker = require('faker')

const { generateGQLTestUtils } = require('@open-condo/codegen/generate.test.utils')

const { createValidRuBankAccount } = require('@condo/domains/banking/utils/testSchema/bankAccount')

const { BankCategory: BankCategoryGQL } = require('@condo/domains/banking/gql')
const BankCategory = generateGQLTestUtils(BankCategoryGQL)

const { BankCostItem: BankCostItemGQL } = require('@condo/domains/banking/gql')
const BankCostItem = generateGQLTestUtils(BankCostItemGQL)

const { BankAccount: BankAccountGQL } = require('@condo/domains/banking/gql')
const BankAccount = generateGQLTestUtils(BankAccountGQL)

const { BankContractorAccount: BankContractorAccountGQL } = require('@condo/domains/banking/gql')
const { RUSSIA_COUNTRY } = require('../../../common/constants/countries')
const BankContractorAccount = generateGQLTestUtils(BankContractorAccountGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createTestBankCategory (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        name: faker.lorem.word(),
        ...extraAttrs,
    }
    const obj = await BankCategory.create(client, attrs)
    return [obj, attrs]
}

async function updateTestBankCategory (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        name: faker.lorem.word(),
        ...extraAttrs,
    }
    const obj = await BankCategory.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestBankCostItem (client, category, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!category || !category.id) throw new Error('no category.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        category: { connect: { id: category.id } },
        name: faker.lorem.word(),
        ...extraAttrs,
    }
    const obj = await BankCostItem.create(client, attrs)
    return [obj, attrs]
}

async function updateTestBankCostItem (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        name: faker.lorem.word(),
        ...extraAttrs,
    }
    const obj = await BankCostItem.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestBankAccount (client, organization, property, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization')
    if (!property || !property.id) throw new Error('no property')

    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const bankAccount = createValidRuBankAccount()
    const attrs = {
        dv: 1,
        sender,
        organization: { connect: { id: organization.id } },
        property: { connect: { id: property.id } },
        importId: faker.datatype.uuid(),
        ...bankAccount,
        ...extraAttrs,
    }
    const obj = await BankAccount.create(client, attrs)
    return [obj, attrs]
}

async function updateTestBankAccount (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await BankAccount.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestBankContractorAccount (client, organization, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        organization: { connect: { id: organization.id } },
        name: faker.lorem.word(),
        tin: String(faker.datatype.number()),
        country: RUSSIA_COUNTRY,
        routingNumber: '044525256',
        number: 'n1',
        currencyCode: 'RUB',
        importId: faker.random.alphaNumeric(24),
        territoryCode: faker.datatype.number().toString(),
        bankName: faker.lorem.word(),
        ...extraAttrs,
    }
    const obj = await BankContractorAccount.create(client, attrs)
    return [obj, attrs]
}

async function updateTestBankContractorAccount (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        name: faker.lorem.word(),
        tin: String(faker.datatype.number()),
        country: RUSSIA_COUNTRY,
        importId: faker.random.alphaNumeric(24),
        territoryCode: faker.datatype.number().toString(),
        bankName: faker.lorem.word(),
        ...extraAttrs,
    }
    const obj = await BankContractorAccount.update(client, id, attrs)
    return [obj, attrs]
}

/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    BankCategory, createTestBankCategory, updateTestBankCategory,
    BankCostItem, createTestBankCostItem, updateTestBankCostItem,
    BankAccount, createTestBankAccount, updateTestBankAccount,
    BankContractorAccount, createTestBankContractorAccount, updateTestBankContractorAccount,
/* AUTOGENERATE MARKER <EXPORTS> */
}
