/**
 * Generated by `createschema banking.BankCategory 'name:Text;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */

const { generateServerUtils, execGqlWithoutAccess } = require('@open-condo/codegen/generate.server.utils')

const { BankAccount: BankAccountGQL } = require('@condo/domains/banking/gql')
const { BankCategory: BankCategoryGQL } = require('@condo/domains/banking/gql')
const { BankCostItem: BankCostItemGQL } = require('@condo/domains/banking/gql')
const { BankContractorAccount: BankContractorAccountGQL } = require('@condo/domains/banking/gql')
const { BankIntegration: BankIntegrationGQL } = require('@condo/domains/banking/gql')
const { CREATE_BANK_ACCOUNT_REQUEST_MUTATION } = require('@condo/domains/banking/gql')
const { BankIntegrationAccountContext: BankIntegrationAccountContextGQL } = require('@condo/domains/banking/gql')
const { BankIntegrationOrganizationContext: BankIntegrationOrganizationContextGQL } = require('@condo/domains/banking/gql')
const { BankTransaction: BankTransactionGQL } = require('@condo/domains/banking/gql')
const { BankSyncTask: BankSyncTaskGQL } = require('@condo/domains/banking/gql')
const { BankIntegrationAccessRight: BankIntegrationAccessRightGQL } = require('@condo/domains/banking/gql')
const { PREDICT_TRANSACTION_CLASSIFICATION_QUERY } = require('@condo/domains/banking/gql')
const { BankAccountReport: BankAccountReportGQL } = require('@condo/domains/banking/gql')
const { BankAccountReportTask: BankAccountReportTaskGQL } = require('@condo/domains/banking/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const BankAccount = generateServerUtils(BankAccountGQL)
const BankCategory = generateServerUtils(BankCategoryGQL)
const BankCostItem = generateServerUtils(BankCostItemGQL)
const BankContractorAccount = generateServerUtils(BankContractorAccountGQL)
const BankIntegration = generateServerUtils(BankIntegrationGQL)
const BankIntegrationAccountContext = generateServerUtils(BankIntegrationAccountContextGQL)
const BankIntegrationOrganizationContext = generateServerUtils(BankIntegrationOrganizationContextGQL)
const BankTransaction = generateServerUtils(BankTransactionGQL)
const BankSyncTask = generateServerUtils(BankSyncTaskGQL)
const BankAccountReport = generateServerUtils(BankAccountReportGQL)
const BankAccountReportTask = generateServerUtils(BankAccountReportTaskGQL)

async function createBankAccountRequest (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: CREATE_BANK_ACCOUNT_REQUEST_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to createBankAccountRequest',
        dataPath: 'obj',
    })
}

const BankIntegrationAccessRight = generateServerUtils(BankIntegrationAccessRightGQL)
async function predictTransactionClassification (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')

    return await execGqlWithoutAccess(context, {
        query: PREDICT_TRANSACTION_CLASSIFICATION_QUERY,
        variables: { data },
        errorMessage: '[error] Unable to predictTransactionClassification',
        dataPath: 'result',
    })
}

/* AUTOGENERATE MARKER <CONST> */

module.exports = {
    BankAccount,
    BankCategory,
    BankCostItem,
    BankContractorAccount,
    BankIntegration,
    BankIntegrationAccessRight,
    BankIntegrationAccountContext,
    BankIntegrationOrganizationContext,
    BankTransaction,
    BankSyncTask,
    BankAccountReport,
    createBankAccountRequest,
    predictTransactionClassification,
    BankAccountReportTask,
/* AUTOGENERATE MARKER <EXPORTS> */
}
