/**
 * Generated by `createschema banking.BankTransaction 'account:Relationship:BankAccount:CASCADE; contractorAccount:Relationship:BankContractorAccount:CASCADE; costItem?:Relationship:BankCostItem:SET_NULL; organization:Relationship:Organization:CASCADE; number:Text; date:CalendarDay; amount:Decimal; purpose:Text; dateWithdrawed:CalendarDay; dateReceived:CalendarDay; meta:Json; importId:Text; importRemoteSystem:Text;'`
 */
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { checkBankIntegrationsAccessRights } = require('@condo/domains/banking/utils/accessSchema')
const { canManageBankEntityWithOrganization } = require('@condo/domains/banking/utils/accessSchema')
const {
    getEmployedOrRelatedOrganizationsByPermissions,
} = require('@condo/domains/organization/utils/accessSchema')
const { SERVICE } = require('@condo/domains/user/constants/common')

const { BANK_INTEGRATION_IDS } = require('../constants')

async function canReadBankTransactions ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    if (user.type === SERVICE) {
        return {
            integrationContext: { integration: { accessRights_some: { user: { id: user.id }, deletedAt: null } }, deletedAt: null  },
        }
    }

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, [])

    return {
        organization: {
            id_in: permittedOrganizations,
        },
    }
}

async function canManageBankTransactions (args) {
    const { authentication: { item: user }, originalInput, operation, itemId, context } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type === SERVICE) {
        if (await checkBankIntegrationsAccessRights(context, user.id, [BANK_INTEGRATION_IDS.SBBOL])) return true

        return false
    }

    return canManageBankEntityWithOrganization(args, 'canManageBankTransactions')
}

module.exports = {
    canReadBankTransactions,
    canManageBankTransactions,
}
