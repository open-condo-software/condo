/**
 * Generated by `createschema banking.BankIntegrationOrganizationContext 'integration:Relationship:BankIntegration:CASCADE; organization:Relationship:Organization:CASCADE;'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { BANK_INTEGRATION_IDS } = require('@condo/domains/banking/constants')
const { checkBankIntegrationsAccessRights } = require('@condo/domains/banking/utils/accessSchema')
const {
    checkPermissionsInEmployedOrRelatedOrganizations,
    getEmployedOrRelatedOrganizationsByPermissions,
} = require('@condo/domains/organization/utils/accessSchema')
const { SERVICE } = require('@condo/domains/user/constants/common')

async function canReadBankIntegrationOrganizationContexts (args) {
    const { authentication: { item: user }, context } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type === SERVICE) {
        return {
            integration: { accessRights_some: { user: user.id }, deletedAt: null },
        }
    }

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, [])


    return {
        organization: {
            id_in: permittedOrganizations,
        },
    }
}

async function canManageBankIntegrationOrganizationContexts (args) {
    const { authentication: { item: user }, originalInput, operation, itemId, context } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type === SERVICE) {
        if (await checkBankIntegrationsAccessRights(context, user.id, [BANK_INTEGRATION_IDS.SBBOL])) return true

        return false
    }

    let organizationId
    if (operation === 'create') {
        organizationId = get(originalInput, ['organization', 'connect', 'id'])
    }
    if (operation === 'update') {
        const item = await getById('BankIntegrationOrganizationContext', itemId)
        organizationId = get(item, 'organization')
    }

    if (!organizationId) return false

    return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organizationId, 'canManageBankIntegrationOrganizationContexts')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBankIntegrationOrganizationContexts,
    canManageBankIntegrationOrganizationContexts,
}
