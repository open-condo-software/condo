/**
 * Generated by `createschema banking.BankAccount 'organization:Relationship:Organization:CASCADE; tin:Text; country:Text; routingNumber:Text; number:Text; currency:Text; approvedAt?:DateTimeUtc; approvedBy?:Text; importId?:Text; territoryCode?:Text; bankName?:Text; meta?:Json; tinMeta?:Json; routingNumberMeta?:Json'`
 */

const { get } = require('lodash')
const { throwAuthenticationError } = require('@condo/keystone/apolloErrorFormatter')

/**
 * BankAccount entity can be read either by:
 * 1. By admin or support
 * 2. Organization employee (without settings / state)
 */
async function canReadBankAccounts ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    return { organization: { employees_some: { user: { id: user.id },  isBlocked: false } } }
}

async function canManageBankAccounts ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    return false
}

async function canManageIsApprovedField ({ authentication: { item: user }, originalInput }) {
    if (user.isAdmin || user.isSupport) return true

    // If user is not support and admin, then he only can drop isApproved fields
    if (!get(originalInput, 'approvedAt') && !get(originalInput, 'approvedBy')) {
        return true
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBankAccounts,
    canManageBankAccounts,
    canManageIsApprovedField,
}
