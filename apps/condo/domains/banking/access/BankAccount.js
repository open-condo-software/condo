/**
 * Generated by `createschema banking.BankAccount 'organization:Relationship:Organization:CASCADE; tin:Text; country:Text; routingNumber:Text; number:Text; currency:Text; approvedAt?:DateTimeUtc; approvedBy?:Text; importId?:Text; territoryCode?:Text; bankName?:Text; meta?:Json; tinMeta?:Json; routingNumberMeta?:Json'`
 */

const { get } = require('lodash')
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const {
    queryOrganizationEmployeeFor,
    queryOrganizationEmployeeFromRelatedOrganizationFor,
} = require('@condo/domains/organization/utils/accessSchema')

/**
 * BankAccount entity can be read either by:
 * 1. By admin or support
 * 2. Organization employee
 */
async function canReadBankAccounts ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    return {
        OR: [
            { organization: queryOrganizationEmployeeFor(user.id) },
            { organization: queryOrganizationEmployeeFromRelatedOrganizationFor(user.id) },
        ],
    }
}

/**
 * BankAccount can be managed only by:
 * 1. Admin or support
 */
async function canManageBankAccounts ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    return false
}

/**
 * IsApproved can be set to true only by support or admin
 */
async function canManageIsApprovedField ({ authentication: { item: user }, originalInput }) {
    if (user.isAdmin || user.isSupport) return true

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBankAccounts,
    canManageBankAccounts,
    canManageIsApprovedField,
}
