/**
 * Generated by `createschema banking.BankAccount 'organization:Relationship:Organization:CASCADE; tin:Text; country:Text; routingNumber:Text; number:Text; currency:Text; approvedAt?:DateTimeUtc; approvedBy?:Text; importId?:Text; territoryCode?:Text; bankName?:Text; meta?:Json; tinMeta?:Json; routingNumberMeta?:Json'`
 */
const { get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { canManageBankEntityWithOrganization } = require('@condo/domains/banking/utils/accessSchema')
const { checkBankIntegrationsAccessRights } = require('@condo/domains/banking/utils/accessSchema')
const {
    queryOrganizationEmployeeFor,
    queryOrganizationEmployeeFromRelatedOrganizationFor,
} = require('@condo/domains/organization/utils/accessSchema')
const { SERVICE } = require('@condo/domains/user/constants/common')

const { BANK_INTEGRATION_IDS } = require('../constants')


async function canReadBankAccounts ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    if (user.type === SERVICE) {
        return {
            OR: [{
                integrationContext: {
                    deletedAt: null,
                    integration: {
                        deletedAt: null,
                        accessRights_some: {
                            user: { id: user.id },
                            deletedAt: null,
                        },
                    },
                },
            },
            {
                integrationContext_is_null: true,
            }],

        }
    }

    return {
        OR: [
            { organization: queryOrganizationEmployeeFor(user.id) },
            { organization: queryOrganizationEmployeeFromRelatedOrganizationFor(user.id) },
        ],
    }
}

/**
 * BankAccount can be managed only by:
 * 1. Admin or support
 */
async function canManageBankAccounts (args) {
    const { authentication: { item: user }, context, operation, originalInput, itemId } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type === SERVICE) {
        if (await checkBankIntegrationsAccessRights(context, user.id, [BANK_INTEGRATION_IDS.SBBOL])) {

            if (operation === 'create') return true

            if (operation === 'update') {
                const bankAccount = await getById('BankAccount', itemId)
                const integrationContext = get(bankAccount, 'integrationContext')

                if (integrationContext) {
                    const accountContext = await getById('BankIntegrationAccountContext', integrationContext)

                    if (accountContext.integration === BANK_INTEGRATION_IDS.SBBOL) return true

                    return false
                } else {
                    return true
                }
            }
        }
    }

    return canManageBankEntityWithOrganization(args, 'canManageBankAccounts')
}

/**
 * IsApproved can be set to true only by support or admin
 */
async function canManageIsApprovedField ({ authentication: { item: user }, originalInput }) {
    if (user.isAdmin || user.isSupport) return true

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBankAccounts,
    canManageBankAccounts,
    canManageIsApprovedField,
}
