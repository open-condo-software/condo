// @ts-nocheck
/**
 * Generated by `createschema banking.BankAccountReportTask 'account:Relationship:BankAccount:CASCADE; organization:Relationship:Organization:CASCADE; status:Select:processing,completed,cancelled,errored; progress:Integer; meta:Json;'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')

async function canReadBankAccountReportTasks ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    return { user: { id: user.id } }
}

async function canManageBankAccountReportTasks ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    let organizationId

    if (operation === 'create') {
        organizationId = get(originalInput, ['organization', 'connect', 'id'])
        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageBankAccountReportTasks')
    }
    if (operation === 'update') {
        const syncTask = await getById('BankAccountReportTask', itemId)
        if (syncTask.user === user.id) {
            return true
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBankAccountReportTasks,
    canManageBankAccountReportTasks,
}
