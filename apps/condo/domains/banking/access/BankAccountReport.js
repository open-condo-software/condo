/**
 * Generated by `createschema banking.BankAccountReport 'account:Relationship:BankAccount:CASCADE; organization:Relationship:Organization:CASCADE; version:Integer; template:Select:expenses_grouped_by_category_and_cost_item; period:Text; amount:Decimal; amountAt:DateTimeUtc; publishedAt:DateTimeUtc; totalIncome:Decimal; totalOutcome:Decimal; data:Json;'`
 */

const Ajv = require('ajv')
const { map, uniq } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { canManageBankEntityWithOrganization } = require('@condo/domains/banking/utils/accessSchema')
const { RESIDENT, STAFF } = require('@condo/domains/user/constants/common')

const ajv = new Ajv()
const isInputToManagePublishedAt = ajv.compile({
    type: 'object',
    properties: {
        dv: {
            type: 'integer',
        },
        sender: {
            type: 'object',
        },
        publishedAt: {
            type: 'string',
        },
    },
    additionalProperties: false,
    required: ['dv', 'sender', 'publishedAt'],
})

async function canReadBankAccountReports ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return {}

    const conditions = {
        OR: [],
    }

    if (user.type === STAFF) {
        const employees = await find('OrganizationEmployee', {
            user: { id: user.id },
            isAccepted: true,
            isRejected: false,
            isBlocked: false,
        })
        if (employees.length > 0) {
            const organizationIds = uniq(map(employees, 'organization'))
            conditions.OR.push({
                organization: {
                    id_in: organizationIds,
                },
            })
        }
    }

    if (user.type === RESIDENT) {
        const residents = await find('Resident', { user: { id: user.id } })
        if (residents.length > 0) {
            const propertyIds = uniq(map(residents, 'property'))
            conditions.OR.push({
                account: {
                    property: {
                        id_in: propertyIds,
                    },
                },
            })
        }
    }

    return conditions
}

async function canManageBankAccountReports (args) {
    const { authentication: { item: user }, originalInput, operation } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create') {
        return false
    } else if (operation === 'update') {
        if (isInputToManagePublishedAt(originalInput)) {
            return canManageBankEntityWithOrganization(args, 'canManageBankAccountReports')
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBankAccountReports,
    canManageBankAccountReports,
}
