/**
 * Generated by `createschema banking.BankSyncTask 'account:Relationship:BankAccount:CASCADE; integrationContext:Relationship:BankIntegrationContext:CASCADE; organization:Relationship:Organization:CASCADE; status:Select:processing,completed,cancelled,error; file?:File; totalCount?:Integer; processedCount?:Integer; meta:Json;'`
 */

const Ajv = require('ajv')
const { get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { BANK_SYNC_TASK_STATUS } = require('@condo/domains/banking/constants')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')

// Only cancelling the task is allowed for user
const ORIGINAL_INPUT_TO_CANCEL_TASK = {
    type: 'object',
    properties: {
        dv: {
            type: 'integer',
        },
        sender: {
            type: 'object',
        },
        status: {
            type: 'string',
            pattern: BANK_SYNC_TASK_STATUS.CANCELLED,
        },
    },
    additionalProperties: false,
    required: ['dv', 'sender', 'status'],
}

const ajv = new Ajv()
const originalInputToCancelTask = ajv.compile(ORIGINAL_INPUT_TO_CANCEL_TASK)

async function canReadBankSyncTasks ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    return { user: { id: user.id } }
}

async function canManageBankSyncTasks ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    let organizationId

    if (operation === 'create') {
        organizationId = get(originalInput, ['organization', 'connect', 'id'])
        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageBankAccounts')
    }
    if (operation === 'update') {
        const syncTask = await getById('BankSyncTask', itemId)
        if (originalInputToCancelTask(originalInput) && syncTask.user === user.id) {
            return true
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBankSyncTasks,
    canManageBankSyncTasks,
}
