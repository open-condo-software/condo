/**
 * Generated by `createschema banking.BankIntegrationContext 'integration:Relationship:BankIntegration:CASCADE; organization:Relationship:Organization:CASCADE; enabled:Checkbox'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')
const { Json } = require('@open-condo/keystone/fields')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/banking/access/BankIntegrationContext')


const BankIntegrationContext = new GQLListSchema('BankIntegrationContext', {
    // TODO(codegen): write doc for the BankIntegrationContext domain model!
    schemaDoc: 'TODO DOC!',
    fields: {

        integration: {
            // TODO(codegen): write doc for BankIntegrationContext.integration field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BankIntegration',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        organization: {
            // TODO(codegen): write doc for BankIntegrationContext.organization field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        enabled: {
            // TODO(codegen): write doc for BankIntegrationContext.enabled field!
            schemaDoc: 'TODO DOC!',
            type: Checkbox,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankIntegrationContexts,
        create: access.canManageBankIntegrationContexts,
        update: access.canManageBankIntegrationContexts,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankIntegrationContext,
}
