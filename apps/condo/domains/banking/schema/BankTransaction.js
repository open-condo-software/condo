/**
 * Generated by `createschema banking.BankTransaction 'account:Relationship:BankAccount:CASCADE; contractorAccount:Relationship:BankContractorAccount:CASCADE; costItem?:Relationship:BankCostItem:SET_NULL; organization:Relationship:Organization:CASCADE; number:Text; date:CalendarDay; amount:Decimal; purpose:Text; dateWithdrawed:CalendarDay; dateReceived:CalendarDay; meta:Json; importId:Text; importRemoteSystem:Text;'`
 */

const { Text, Relationship, CalendarDay } = require('@keystonejs/fields')
const { Json } = require('@open-condo/keystone/fields')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/banking/access/BankTransaction')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const { MONEY_AMOUNT_FIELD } = require('@condo/domains/common/schema/fields')
const { CURRENCY_CODE_FIELD } = require('@condo/domains/common/schema/fields')


const BankTransaction = new GQLListSchema('BankTransaction', {
    schemaDoc: 'Transaction related to costs of Organization with BankAccount. Full fields set from data import will be stored in "meta"',
    fields: {

        account: {
            schemaDoc: 'Related BankAccount of Organization which payed',
            type: Relationship,
            ref: 'BankAccount',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        integrationContext: {
            schemaDoc: 'Data source from which this transaction was created',
            type: Relationship,
            ref: 'BankIntegrationContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        contractorAccount: {
            schemaDoc: 'Related account of contractor, which has received the payment via this transaction',
            type: Relationship,
            ref: 'BankContractorAccount',
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
        },

        costItem: {
            schemaDoc: 'Related costs class',
            type: Relationship,
            ref: 'BankCostItem',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        organization: ORGANIZATION_OWNED_FIELD,

        number: {
            schemaDoc: 'Number of transaction, obtained from external system',
            type: Text,
            isRequired: true,
        },

        date: {
            schemaDoc: 'When payment order was created',
            type: CalendarDay,
            isRequired: true,
        },

        amount: {
            ...MONEY_AMOUNT_FIELD,
            schemaDoc: 'Amount of transaction in specified currency',
            isRequired: true,
        },

        currencyCode: CURRENCY_CODE_FIELD,

        purpose: {
            schemaDoc: 'Textual description of payment purpose in free form',
            type: Text,
            isRequired: true,
        },

        dateWithdrawed: {
            schemaDoc: 'Date when this payment was withdrawed from BankAccount of Organization. If filled, then this payment is an outcome',
            type: CalendarDay,
        },

        dateReceived: {
            schemaDoc: 'Date when this payment was received by BankAccount of Organization. If filled, then this payment is an income',
            type: CalendarDay,
        },

        meta: {
            schemaDoc: 'Stores data, obtained from external source',
            type: Json,
            isRequired: true,
        },

        importId: {
            schemaDoc: 'Identifier of corresponding record in external system, from that this record was copied',
            type: Text,
            isRequired: true,
        },

        importRemoteSystem: {
            schemaDoc: 'Name of external system, from that this record was copied',
            type: Text,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankTransactions,
        create: access.canManageBankTransactions,
        update: access.canManageBankTransactions,
        delete: false,
        auth: true,
    },
    hooks: {
        validateInput: ({ resolvedData, existingItem, addValidationError }) => {
            const data = { ...existingItem, ...resolvedData }
            if (data.dateWithdrawed && data.dateReceived) {
                addValidationError('Cannot have both "dateWithdrawed" and "dateReceived" filled fields')
            }
            if (!data.dateWithdrawed && !data.dateReceived) {
                addValidationError('Cannot have no values for both "dateWithdrawed" and "dateReceived" fields')
            }
        },
    },
})

module.exports = {
    BankTransaction,
}
