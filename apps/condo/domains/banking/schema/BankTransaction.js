/**
 * Generated by `createschema banking.BankTransaction 'account:Relationship:BankAccount:CASCADE; contractorAccount:Relationship:BankContractorAccount:CASCADE; costItem?:Relationship:BankCostItem:SET_NULL; organization:Relationship:Organization:CASCADE; number:Text; date:CalendarDay; amount:Decimal; purpose:Text; dateWithdrawed:CalendarDay; dateReceived:CalendarDay; meta:Json; importId:Text; importRemoteSystem:Text;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')
const { Json } = require('@open-condo/keystone/fields')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/banking/access/BankTransaction')


const BankTransaction = new GQLListSchema('BankTransaction', {
    // TODO(codegen): write doc for the BankTransaction domain model!
    schemaDoc: 'TODO DOC!',
    fields: {

        account: {
            // TODO(codegen): write doc for BankTransaction.account field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BankAccount',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        contractorAccount: {
            // TODO(codegen): write doc for BankTransaction.contractorAccount field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BankContractorAccount',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        costItem: {
            // TODO(codegen): write doc for BankTransaction.costItem field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BankCostItem',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        organization: {
            // TODO(codegen): write doc for BankTransaction.organization field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        number: {
            // TODO(codegen): write doc for BankTransaction.number field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        date: {
            // TODO(codegen): write doc for BankTransaction.date field!
            schemaDoc: 'TODO DOC!',
            type: CalendarDay,
            isRequired: true,
        },

        amount: {
            // TODO(codegen): write doc for BankTransaction.amount field!
            schemaDoc: 'TODO DOC!',
            type: Decimal,
            isRequired: true,
        },

        purpose: {
            // TODO(codegen): write doc for BankTransaction.purpose field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        dateWithdrawed: {
            // TODO(codegen): write doc for BankTransaction.dateWithdrawed field!
            schemaDoc: 'TODO DOC!',
            type: CalendarDay,
            isRequired: true,
        },

        dateReceived: {
            // TODO(codegen): write doc for BankTransaction.dateReceived field!
            schemaDoc: 'TODO DOC!',
            type: CalendarDay,
            isRequired: true,
        },

        meta: {
            // TODO(codegen): write doc for BankTransaction.meta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: true,
        },

        importId: {
            // TODO(codegen): write doc for BankTransaction.importId field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        importRemoteSystem: {
            // TODO(codegen): write doc for BankTransaction.importRemoteSystem field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankTransactions,
        create: access.canManageBankTransactions,
        update: access.canManageBankTransactions,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankTransaction,
}
