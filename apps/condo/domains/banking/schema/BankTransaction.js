/**
 * Generated by `createschema banking.BankTransaction 'account:Relationship:BankAccount:CASCADE; contractorAccount:Relationship:BankContractorAccount:CASCADE; costItem?:Relationship:BankCostItem:SET_NULL; organization:Relationship:Organization:CASCADE; number:Text; date:CalendarDay; amount:Decimal; purpose:Text; dateWithdrawed:CalendarDay; dateReceived:CalendarDay; meta:Json; importId:Text; importRemoteSystem:Text;'`
 */

const { get, has } = require('lodash')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/banking/access/BankTransaction')
const { IMPORT_REMOTE_SYSTEM_VALUES } = require('@condo/domains/banking/constants')
const { BankCostItem } = require('@condo/domains/banking/utils/serverSchema')
const { POSITIVE_MONEY_AMOUNT_FIELD } = require('@condo/domains/common/schema/fields')
const { CURRENCY_CODE_FIELD } = require('@condo/domains/common/schema/fields')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')


const BankTransaction = new GQLListSchema('BankTransaction', {
    schemaDoc: 'Represents a bank transaction recorded for an organization account. Full import payload is stored in `meta`.',
    fields: {

        account: {
            schemaDoc: 'Organization bank account that initiated the transaction.',
            type: 'Relationship',
            ref: 'BankAccount',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        integrationContext: {
            schemaDoc: 'Integration context that provided the transaction data.',
            type: 'Relationship',
            ref: 'BankIntegrationAccountContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        contractorAccount: {
            schemaDoc: 'Counterparty bank account that received the payment.',
            type: 'Relationship',
            ref: 'BankContractorAccount',
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
        },

        costItem: {
            schemaDoc: 'Cost item associated with the transaction.',
            type: 'Relationship',
            ref: 'BankCostItem',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        organization: ORGANIZATION_OWNED_FIELD,

        number: {
            schemaDoc: 'Transaction number from the external system.',
            type: 'Text',
            isRequired: true,
        },

        date: {
            schemaDoc: 'Date when the payment order was created.',
            type: 'CalendarDay',
            isRequired: true,
        },

        amount: {
            ...POSITIVE_MONEY_AMOUNT_FIELD,
            schemaDoc: 'Transaction amount in the specified currency. Always positive; use `isOutcome` to determine the balance impact.',
            isRequired: true,
        },

        isOutcome: {
            schemaDoc: 'Indicates whether the transaction decreases the account balance.',
            type: 'Checkbox',
            isRequired: true,
        },

        currencyCode: CURRENCY_CODE_FIELD,

        purpose: {
            schemaDoc: 'Free-form description of the payment purpose.',
            type: 'Text',
            isRequired: true,
        },

        meta: {
            schemaDoc: 'Raw transaction data received from the external source.',
            type: 'Json',
            isRequired: true,
        },

        importId: {
            schemaDoc: 'Identifier of the corresponding record in the external system.',
            type: 'Text',
            isRequired: true,
        },

        importRemoteSystem: {
            schemaDoc: 'External system that supplied the transaction data.',
            type: 'Select',
            options: IMPORT_REMOTE_SYSTEM_VALUES,
            // Cannot use `enum` datatype because a number is presented in first character of a value "1CClientBankExchange".
            dataType: 'string',
            graphQLReturnType: 'String',
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankTransactions,
        create: access.canManageBankTransactions,
        update: access.canManageBankTransactions,
        delete: false,
        auth: true,
    },
    hooks: {
        validateInput: async ({ resolvedData, addValidationError, context, operation, existingItem }) => {
            const isOutcome = has(resolvedData, 'isOutcome') ? resolvedData.isOutcome : existingItem.isOutcome
            const costItemId = has(resolvedData, 'costItem') ? resolvedData.costItem : get(existingItem, 'costItem', null)
            if (costItemId) {
                const costItem = await BankCostItem.getOne(context, { id: costItemId }, 'id isOutcome')
                if (costItem && costItem.isOutcome !== isOutcome) {
                    addValidationError(`Mismatched value of "isOutcome" field of BankTransaction${operation === 'update' ? `(id="${existingItem.id}")` : ''} with BankCostItem(id="${costItemId}") during ${operation} operation`)
                }
            }
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization', 'account', 'importRemoteSystem', 'importId'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'Bank_transaction_unique_organization_account_importRemoteSystem_importId',
            },
        ],
    },
})

module.exports = {
    BankTransaction,
}
