/**
 * Generated by `createschema banking.BankIntegrationOrganizationContext 'integration:Relationship:BankIntegration:CASCADE; organization:Relationship:Organization:CASCADE;'`
 */

const { makeLoggedInAdminClient, UUID_RE, DATETIME_RE, expectToThrowInternalError } = require('@open-condo/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToObj } = require('@open-condo/keystone/test.utils')

const { BANK_INTEGRATION_IDS } = require('@condo/domains/banking/constants')
const { BankIntegrationOrganizationContext, createTestBankIntegrationOrganizationContext, BankIntegration, updateTestBankIntegrationOrganizationContext } = require('@condo/domains/banking/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')


describe('BankIntegrationOrganizationContext', () => {
    let admin, bankIntegration
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        bankIntegration = await BankIntegration.getOne(admin, { id: BANK_INTEGRATION_IDS.SBBOL })
    })
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)
                const [obj, attrs] = await createTestBankIntegrationOrganizationContext(admin, bankIntegration, organization)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.organization.id).toEqual(organization.id)
                expect(obj.integration.id).toEqual(bankIntegration.id)
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageBankIntegrationOrganizationContexts: true,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [obj, attrs] = await createTestBankIntegrationOrganizationContext(client, bankIntegration, organization)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)

                const [objCreated] = await createTestBankIntegrationOrganizationContext(admin, bankIntegration, organization)
                const [obj, attrs] = await updateTestBankIntegrationOrganizationContext(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageBankIntegrationOrganizationContexts: true,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [objCreated] = await createTestBankIntegrationOrganizationContext(client, bankIntegration, organization)

                const [obj, attrs] = await updateTestBankIntegrationOrganizationContext(client, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [organization] = await createTestOrganization(admin)
                const [objCreated] = await createTestBankIntegrationOrganizationContext(admin, bankIntegration, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankIntegrationOrganizationContext.delete(admin, objCreated.id)  // TODO(codegen): write 'admin: delete BankIntegrationOrganizationContext' test
                })
            })

            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageBankIntegrationOrganizationContexts: true,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [objCreated] = await createTestBankIntegrationOrganizationContext(client, bankIntegration, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankIntegrationOrganizationContext.delete(client, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)
                const [obj, attrs] = await createTestBankIntegrationOrganizationContext(admin, bankIntegration, organization)

                const objs = await BankIntegrationOrganizationContext.getAll(admin, {
                    organization: {
                        id: organization.id,
                        deletedAt: null,
                    },
                    integration: { id: bankIntegration.id },
                }, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                        organization: {
                            id: organization.id,
                            deletedAt: null,
                        },
                        integration: { id: bankIntegration.id },
                    }),
                ]))
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageBankIntegrationOrganizationContexts: true,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [obj, attrs] = await createTestBankIntegrationOrganizationContext(client, bankIntegration, organization)

                const objs = await BankIntegrationOrganizationContext.getAll(client, {
                    organization: {
                        id: organization.id,
                        deletedAt: null,
                    },
                    integration: { id: bankIntegration.id },
                }, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                    organization: {
                        id: organization.id,
                        deletedAt: null,
                    },
                    integration: { id: bankIntegration.id },
                })
            })

            test('user can\'t get other user\'s data', async () => {
                const client1 = await makeClientWithNewRegisteredAndLoggedInUser()
                const client2 = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization1] = await createTestOrganization(admin)
                const [organization2] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization1, {
                    canManageBankIntegrationOrganizationContexts: true,
                })
                await createTestOrganizationEmployee(admin, organization1, client1.user, role)
                await createTestOrganizationEmployee(admin, organization2, client2.user, role)

                await createTestBankIntegrationOrganizationContext(client1, bankIntegration, organization1)

                const objs = await BankIntegrationOrganizationContext.getAll(client2, {
                    organization: {
                        id: organization1.id,
                        deletedAt: null,
                    },
                    integration: { id: bankIntegration.id },
                }, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(0)
            })
        })
    })

    describe('Validation tests', () => {
        test('You can\'t include the same integration twice in a context', async () => {
            const [organization] = await createTestOrganization(admin)
            const [obj, attrs] = await createTestBankIntegrationOrganizationContext(admin, bankIntegration, organization)

            await expectToThrowInternalError(async () => {
                await createTestBankIntegrationOrganizationContext(admin, bankIntegration, organization)
            }, 'duplicate key value violates unique constraint "BankIntegrationOrganizationContext_unique_integration_and_organ"')

        })
    })
})
