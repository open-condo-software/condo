/**
 * Generated by `createschema banking.BankIntegrationOrganizationContext 'integration:Relationship:BankIntegration:CASCADE; organization:Relationship:Organization:CASCADE;'`
 */

const { Relationship } = require('@keystonejs/fields')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/banking/access/BankIntegrationOrganizationContext')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')


const BankIntegrationOrganizationContext = new GQLListSchema('BankIntegrationOrganizationContext', {
    schemaDoc: 'Stores the integrations connected to the organization',
    fields: {

        integration: {
            schemaDoc: 'Data source, used for this integration.',
            type: Relationship,
            ref: 'BankIntegration',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        organization: ORGANIZATION_OWNED_FIELD,

    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['integration', 'organization'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'BankIntegrationOrganizationContext_unique_integration_and_organization',
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankIntegrationOrganizationContexts,
        create: access.canManageBankIntegrationOrganizationContexts,
        update: access.canManageBankIntegrationOrganizationContexts,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankIntegrationOrganizationContext,
}
