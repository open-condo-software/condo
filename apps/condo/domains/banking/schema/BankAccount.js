/**
 * Generated by `createschema banking.BankAccount 'organization:Relationship:Organization:CASCADE; tin:Text; country:Text; routingNumber:Text; number:Text; currency:Text; approvedAt?:DateTimeUtc; approvedBy?:Text; importId?:Text; territoryCode?:Text; bankName?:Text; meta?:Json; tinMeta?:Json; routingNumberMeta?:Json'`
 */

const { get } = require('lodash')

const { Text, DateTimeUtc, Select } = require('@keystonejs/fields')
const { Json } = require('@condo/keystone/fields')
const { GQLListSchema } = require('@condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@condo/keystone/plugins')
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')

const access = require('@condo/domains/banking/access/BankAccount')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const { IMPORT_ID_FIELD, CURRENCY_CODE_FIELD } = require('@condo/domains/common/schema/fields')
const { COUNTRIES } = require('@condo/domains/common/constants/countries')

const { validateTin } = require('@condo/domains/banking/utils/validate/tin.utils')
const { validateRoutingNumber } = require('@condo/domains/banking/utils/validate/routingNumber.utils')
const { validateNumber } = require('@condo/domains/banking/utils/validate/number.utils')

const BankAccount = new GQLListSchema('BankAccount', {
    schemaDoc: 'Bank account. We receive all transactions from this account and let the user mark them with a certain set of categories!',
    fields: {
        organization: ORGANIZATION_OWNED_FIELD,

        tin: {
            schemaDoc: 'Tax Identification Number',
            type: Text,
            isRequired: true,
            hooks: {
                validateInput: ({ existingItem, resolvedData, addFieldValidationError }) => {
                    const newItem = { ...existingItem, ...resolvedData }

                    const country = get(newItem, 'country')
                    const tin = get(newItem, 'tin')

                    const { result, errors } = validateTin(tin, country)

                    if ( !result ) {
                        addFieldValidationError(errors[0])
                    }
                },
            },
        },

        country: {
            schemaDoc: 'Bank account country',
            isRequired: true,
            type: Select,
            options: Object.keys(COUNTRIES).join(','),
        },

        routingNumber: {
            schemaDoc: 'The routing transit number for the bank account.',
            type: Text,
            isRequired: true,
            hooks: {
                validateInput: ({ existingItem, resolvedData, addFieldValidationError }) => {
                    const newItem = { ...existingItem, ...resolvedData }

                    const country = get(newItem, 'country')
                    const routingNumber = get(newItem, 'routingNumber')

                    const { result, errors } = validateRoutingNumber(routingNumber, country)

                    if ( !result ) {
                        addFieldValidationError(errors[0])
                    }
                },
            },
        },

        number: {
            schemaDoc: 'Bank account number',
            type: Text,
            isRequired: true,
            hooks: {
                validateInput: ({ existingItem, resolvedData, addFieldValidationError }) => {
                    const newItem = { ...existingItem, ...resolvedData }

                    const country = get(newItem, 'country')
                    const number = get(newItem, 'number')
                    const routingNumber = get(newItem, 'routingNumber')

                    const { result, errors } = validateNumber(number, routingNumber, country)

                    if ( !result ) {
                        addFieldValidationError(errors[0])
                    }
                },
            },
        },

        currencyCode: CURRENCY_CODE_FIELD,

        approvedAt: {
            schemaDoc: 'When the bank account received the status of approved',
            type: DateTimeUtc,
            isRequired: false,
        },

        approvedBy: {
            schemaDoc: 'Who set the approved status for the bank account',
            type: Text,
            isRequired: false,
        },

        importId: IMPORT_ID_FIELD,

        territoryCode: {
            schemaDoc: 'Location code (Classifier of Territories of Municipal Units - OKTMO)',
            type: Text,
            isRequired: false,
        },

        bankName: {
            schemaDoc: 'Bank name',
            type: Text,
            isRequired: false,
        },

        meta: {
            schemaDoc: 'Structured metadata',
            type: Json,
            isRequired: false,
        },

        tinMeta: {
            schemaDoc: 'Structured metadata found by tin',
            type: Json,
            isRequired: false,
        },

        routingNumberMeta: {
            schemaDoc: 'Structured metadata found by routing number',
            type: Json,
            isRequired: false,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankAccounts,
        create: access.canManageBankAccounts,
        update: access.canManageBankAccounts,
        delete: false,
        auth: true,
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['tin', 'routingNumber', 'number'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'Bank_account_unique_tin_routingNumber_number',
            },
        ],
    },
})

module.exports = {
    BankAccount,
}
