/**
 * Generated by `createschema banking.BankAccountReportTask 'account:Relationship:BankAccount:CASCADE; organization:Relationship:Organization:CASCADE; status:Select:processing,completed,cancelled,errored; progress:Integer; meta:Json;'`
 */

const { values } = require('lodash')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/banking/access/BankAccountReportTask')
const { generateReportsTask } = require('@condo/domains/banking/tasks/generateReports')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')

const { BANK_SYNC_TASK_STATUS } = require('../constants')


const BankAccountReportTask = new GQLListSchema('BankAccountReportTask', {
    schemaDoc: 'Tracks the progress of generating a bank account report.',
    fields: {

        account: {
            schemaDoc: 'Bank account for which the report is being generated.',
            type: 'Relationship',
            ref: 'BankAccount',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            access: {
                read: true,
                create: true,
                update: false,
            },
        },

        organization: ORGANIZATION_OWNED_FIELD,

        status: {
            schemaDoc: 'Status of the report generation task.',
            type: 'Select',
            options: values(BANK_SYNC_TASK_STATUS),
            defaultValue: BANK_SYNC_TASK_STATUS.PROCESSING,
            isRequired: true,
        },

        progress: {
            schemaDoc: 'Progress percentage of the report generation task.',
            type: 'Integer',
        },

        user: {
            schemaDoc: 'User who requested the report. Used for access checks and progress display.',
            type: 'Relationship',
            ref: 'User',
            isRequired: true,
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            knexOptions: { isNotNullable: true },
            access: {
                read: true,
                create: true,
                update: false,
            },
        },

        meta: {
            schemaDoc: 'Additional data specific to the integration that generated the report.',
            type: 'Json',
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    hooks: {
        afterChange: async (args) => {
            const { updatedItem, operation } = args
            if (operation === 'create') {
                await generateReportsTask.delay(updatedItem.id)
            }
        },
    },
    access: {
        read: access.canReadBankAccountReportTasks,
        create: access.canManageBankAccountReportTasks,
        update: access.canManageBankAccountReportTasks,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankAccountReportTask,
}
