/**
 * Generated by `createschema banking.BankAccount 'organization:Relationship:Organization:CASCADE; tin:Text; country:Text; routingNumber:Text; number:Text; currency:Text; approvedAt?:DateTimeUtc; approvedBy?:Text; importId?:Text; territoryCode?:Text; bankName?:Text; meta?:Json; tinMeta?:Json; routingNumberMeta?:Json'`
 */

const { makeLoggedInAdminClient, makeClient } = require('@condo/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, catchErrorFrom,
} = require('@condo/domains/common/utils/testSchema')

const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

const { BankAccount, createTestBankAccount, updateTestBankAccount } = require('@condo/domains/banking/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationEmployeeRole, createTestOrganizationEmployee, OrganizationEmployeeRole } = require('../../organization/utils/testSchema')

describe('BankAccount', () => {
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [bankAccount] = await createTestBankAccount(admin, organization)

                expect(bankAccount.organization.id).toEqual(organization.id)
                expect(bankAccount.tin).toBeDefined()
                expect(bankAccount.country).toEqual('ru')
                expect(bankAccount.routingNumber).toBeDefined()
                expect(bankAccount.number).toBeDefined()
                expect(bankAccount.currencyCode).toEqual('RUB')
            })

            test('support can', async () => {
                const support = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(support)

                const [bankAccount] = await createTestBankAccount(support, organization)

                expect(bankAccount.organization.id).toEqual(organization.id)
                expect(bankAccount.tin).toBeDefined()
                expect(bankAccount.country).toEqual('ru')
                expect(bankAccount.routingNumber).toBeDefined()
                expect(bankAccount.number).toBeDefined()
                expect(bankAccount.currencyCode).toEqual('RUB')
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()

                const [ organization ] = await createTestOrganization(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestBankAccount(user, organization)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const anonymous = await makeClient()

                const [ organization ] = await createTestOrganization(admin)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestBankAccount(anonymous, organization)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [createdObj] = await createTestBankAccount(admin, organization)
                const [readObj] = await BankAccount.getAll(admin, { id: createdObj.id })

                expect(createdObj.organization.id).toEqual(readObj.organization.id)
                expect(createdObj.tin).toEqual(readObj.tin)
                expect(createdObj.country).toEqual(readObj.country)
                expect(createdObj.routingNumber).toEqual(readObj.routingNumber)
                expect(createdObj.number).toEqual(readObj.number)
                expect(createdObj.currencyCode).toEqual(readObj.currencyCode)
            })

            test('support can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const support = await makeClientWithSupportUser()

                const [createdObj] = await createTestBankAccount(admin, organization)
                const [readObj] = await BankAccount.getAll(support, { id: createdObj.id })

                expect(createdObj.organization.id).toEqual(readObj.organization.id)
                expect(createdObj.tin).toEqual(readObj.tin)
                expect(createdObj.country).toEqual(readObj.country)
                expect(createdObj.routingNumber).toEqual(readObj.routingNumber)
                expect(createdObj.number).toEqual(readObj.number)
                expect(createdObj.currencyCode).toEqual(readObj.currencyCode)
            })

            test('user can only for organization it employed in', async () => {
                const admin = await makeLoggedInAdminClient()
                const employeeUserClient = await makeClientWithNewRegisteredAndLoggedInUser()

                const [ organization ] = await createTestOrganization(admin)
                const [ role ] = await createTestOrganizationEmployeeRole(admin, organization)
                await createTestOrganizationEmployee(admin, organization, employeeUserClient.user, role)

                const [ createdObj ] = await createTestBankAccount(admin, organization)

                const [ readObj ] = await BankAccount.getAll(employeeUserClient, {})

                expect(createdObj.organization.id).toEqual(readObj.organization.id)
                expect(createdObj.tin).toEqual(readObj.tin)
                expect(createdObj.country).toEqual(readObj.country)
                expect(createdObj.routingNumber).toEqual(readObj.routingNumber)
                expect(createdObj.number).toEqual(readObj.number)
                expect(createdObj.currencyCode).toEqual(readObj.currencyCode)
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()

                const [ organization ] = await createTestOrganization(admin)

                await createTestBankAccount(admin, organization)

                const readObjects = await BankAccount.getAll(user, {})

                expect(readObjects).toHaveLength(0)
            })

            it('can only for organization it employed in', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)
                const [role, attrs] = await createTestOrganizationEmployeeRole(admin, organization)
                const employeeUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
                await createTestOrganizationEmployee(admin, organization, employeeUserClient.user, role)

                const [anotherOrganization] = await createTestOrganization(admin)
                await createTestOrganizationEmployeeRole(admin, anotherOrganization)

                const objs = await OrganizationEmployeeRole.getAll(employeeUserClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0].id).toMatch(role.id)
                expect(objs[0].dv).toEqual(1)
                expect(objs[0].sender).toEqual(attrs.sender)
                expect(objs[0].v).toEqual(1)
                expect(objs[0].createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(objs[0].updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(objs[0].createdAt).toMatch(role.createdAt)
                expect(objs[0].updatedAt).toMatch(role.updatedAt)
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const anonymous = await makeClient()

                const [ organization ] = await createTestOrganization(admin)

                await createTestBankAccount(admin, organization)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await BankAccount.getAll(anonymous, {})
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestBankAccount(admin, organization)
                const [ updatedObj ] = await updateTestBankAccount(admin, createdObj.id, { bankName: 'NewBankName' })

                expect(createdObj.id).toEqual(updatedObj.id)
                expect(updatedObj.bankName).toEqual('NewBankName')
            })

            test('admin can update approved fields', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestBankAccount(admin, organization)
                const [ updatedObj ] = await updateTestBankAccount(admin, createdObj.id, { approvedAt: new Date(), approvedBy: 'Admin' })

                expect(createdObj.id).toEqual(updatedObj.id)
                expect(createdObj.approvedAt).toBeNull()
                expect(createdObj.approvedBy).toBeNull()
                expect(updatedObj.approvedBy).toEqual('Admin')
            })

            test('when admin updates, approved fields drop', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestBankAccount(admin, organization, { approvedAt: new Date(), approvedBy: 'Admin' })
                const [ updatedObj ] = await updateTestBankAccount(admin, createdObj.id, { bankName: 'NewBankName' })

                expect(createdObj.id).toEqual(updatedObj.id)
                expect(createdObj.approvedBy).toEqual('Admin')
                expect(updatedObj.approvedBy).toBeNull()
                expect(updatedObj.bankName).toEqual('NewBankName')
            })

            test('support can', async () => {
                const support = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(support)

                const [ createdObj ] = await createTestBankAccount(support, organization)
                const [ updatedObj ] = await updateTestBankAccount(support, createdObj.id, { bankName: 'NewBankName' })

                expect(createdObj.id).toEqual(updatedObj.id)
                expect(updatedObj.bankName).toEqual('NewBankName')
            })

            test('support can update approved fields', async () => {
                const support = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(support)

                const [ createdObj ] = await createTestBankAccount(support, organization)
                const [ updatedObj ] = await updateTestBankAccount(support, createdObj.id, { approvedAt: new Date(), approvedBy: 'Support' })

                expect(createdObj.id).toEqual(updatedObj.id)
                expect(createdObj.approvedAt).toBeNull()
                expect(createdObj.approvedBy).toBeNull()
                expect(updatedObj.approvedBy).toEqual('Support')
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestBankAccount(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {await updateTestBankAccount(user,
                    createdObj.id, { bankName: 'NewBankName' })
                })
            })

            test('user can\'t update isApproved field', async () => {
                const admin = await makeLoggedInAdminClient()
                const user = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestBankAccount(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {await updateTestBankAccount(user,
                    createdObj.id, { approvedAt: new Date(), approvedBy: 'User' })
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const anonymous = await makeClient()
                const [organization] = await createTestOrganization(admin)

                const [ createdObj ] = await createTestBankAccount(admin, organization)

                await expectToThrowAuthenticationErrorToObj(async () => {await updateTestBankAccount(anonymous,
                    createdObj.id, { bankName: 'NewBankName' })
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)

                const [createdObj] = await createTestBankAccount(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankAccount.delete(admin, createdObj.id)
                })
            })
        })
    })

    describe('constraints', () => {
        test('can\'t create same BankAccount', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)

            const [bankAccount] = await createTestBankAccount(admin, organization)

            await catchErrorFrom(
                async () => {
                    await createTestBankAccount(admin, organization, {
                        tin: bankAccount.tin,
                        routingNumber: bankAccount.routingNumber,
                        number: bankAccount.number,
                    })
                }, (e) => {
                    const msg = e.errors[0].message
                    expect(msg).toContain('duplicate key value violates unique constraint')
                }
            )
        })

        test('can delete and then create another BankAccount with same requisites', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)

            const [firstBankAccount] = await createTestBankAccount(admin, organization)

            await updateTestBankAccount(admin, firstBankAccount.id, { deletedAt: 'true' })

            const [secondBankAccount] = await createTestBankAccount(admin, organization, {
                tin: firstBankAccount.tin,
                routingNumber: firstBankAccount.routingNumber,
                number: firstBankAccount.number,
            })

            expect(firstBankAccount.id).toBeDefined()
            expect(secondBankAccount.id).toBeDefined()
            expect(firstBankAccount.id).not.toEqual(secondBankAccount.id)
        })
    })
})
