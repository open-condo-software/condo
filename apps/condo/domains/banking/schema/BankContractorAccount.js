/**
 * Generated by `createschema banking.BankContractorAccount 'name:Text; organization:Relationship:Organization:CASCADE; costItem?:Relationship:BankCostItem:SET_NULL; tin:Text; country:Text; routingNumber:Text; number:Text; currencyCode:Text; importId?:Text; territoryCode?:Text; bankName?:Text; meta?:Json; tinMeta?:Json; routingNumberMeta?:Json'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')
const { Json } = require('@open-condo/keystone/fields')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/banking/access/BankContractorAccount')
const { CURRENCY_CODE_FIELD } = require('../../common/schema/fields')


const BankContractorAccount = new GQLListSchema('BankContractorAccount', {
    // TODO(codegen): write doc for the BankContractorAccount domain model!
    schemaDoc: 'TODO DOC!',
    fields: {

        name: {
            // TODO(codegen): write doc for BankContractorAccount.name field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        organization: {
            // TODO(codegen): write doc for BankContractorAccount.organization field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        costItem: {
            // TODO(codegen): write doc for BankContractorAccount.costItem field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BankCostItem',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        tin: {
            // TODO(codegen): write doc for BankContractorAccount.tin field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        country: {
            // TODO(codegen): write doc for BankContractorAccount.country field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        routingNumber: {
            // TODO(codegen): write doc for BankContractorAccount.routingNumber field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        number: {
            // TODO(codegen): write doc for BankContractorAccount.number field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        currencyCode: CURRENCY_CODE_FIELD,

        importId: {
            // TODO(codegen): write doc for BankContractorAccount.importId field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        territoryCode: {
            // TODO(codegen): write doc for BankContractorAccount.territoryCode field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        bankName: {
            // TODO(codegen): write doc for BankContractorAccount.bankName field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        meta: {
            // TODO(codegen): write doc for BankContractorAccount.meta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
        },

        tinMeta: {
            // TODO(codegen): write doc for BankContractorAccount.tinMeta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
        },

        routingNumberMeta: {
            // TODO(codegen): write doc for BankContractorAccount.routingNumberMeta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankContractorAccounts,
        create: access.canManageBankContractorAccounts,
        update: access.canManageBankContractorAccounts,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankContractorAccount,
}
