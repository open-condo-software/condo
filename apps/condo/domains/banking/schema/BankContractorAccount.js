/**
 * Generated by `createschema banking.BankContractorAccount 'name:Text; organization:Relationship:Organization:CASCADE; costItem?:Relationship:BankCostItem:SET_NULL; tin:Text; country:Text; routingNumber:Text; number:Text; currencyCode:Text; importId?:Text; territoryCode?:Text; bankName?:Text; meta?:Json; tinMeta?:Json; routingNumberMeta?:Json'`
 */

const { Text } = require('@open-condo/keystone/fields')
const { Relationship, Json } = require('@keystonejs/fields')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/banking/access/BankContractorAccount')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const { CURRENCY_CODE_FIELD } = require('../../common/schema/fields')


const BankContractorAccount = new GQLListSchema('BankContractorAccount', {
    schemaDoc: 'Account for external contractor, which organization is not stored in condo. Contractor is related to expenses transactions of an Organization. Will be obtained from export files with bank transactions or from banking API',
    fields: {

        name: {
            schemaDoc: 'Name of contractor organization',
            type: Text,
            isRequired: true,
        },

        organization: {
            ...ORGANIZATION_OWNED_FIELD,
            schemaDoc: 'Technical link to property management organization, that has expenses transactions with this contractor. Used for access rights and cascade behaviour of data. Contractor organization is not stored in condo. The object will be deleted if the related organization ceases to exist',
        },

        costItem: {
            // TODO(codegen): write doc for BankContractorAccount.costItem field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BankCostItem',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        tin: {
            // TODO(codegen): write doc for BankContractorAccount.tin field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        country: {
            // TODO(codegen): write doc for BankContractorAccount.country field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        routingNumber: {
            // TODO(codegen): write doc for BankContractorAccount.routingNumber field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        number: {
            // TODO(codegen): write doc for BankContractorAccount.number field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        currencyCode: CURRENCY_CODE_FIELD,

        importId: {
            // TODO(codegen): write doc for BankContractorAccount.importId field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        territoryCode: {
            // TODO(codegen): write doc for BankContractorAccount.territoryCode field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        bankName: {
            // TODO(codegen): write doc for BankContractorAccount.bankName field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        meta: {
            // TODO(codegen): write doc for BankContractorAccount.meta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
        },

        tinMeta: {
            // TODO(codegen): write doc for BankContractorAccount.tinMeta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
        },

        routingNumberMeta: {
            // TODO(codegen): write doc for BankContractorAccount.routingNumberMeta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankContractorAccounts,
        create: access.canManageBankContractorAccounts,
        update: access.canManageBankContractorAccounts,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankContractorAccount,
}
