/**
 * Generated by `createschema banking.BankContractorAccount 'name:Text; organization:Relationship:Organization:CASCADE; costItem?:Relationship:BankCostItem:SET_NULL; tin:Text; country:Text; routingNumber:Text; number:Text; currencyCode:Text; importId?:Text; territoryCode?:Text; bankName?:Text; meta?:Json; tinMeta?:Json; routingNumberMeta?:Json'`
 */

const { Json } = require('@open-condo/keystone/fields')
const { Relationship, Text } = require('@keystonejs/fields')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/banking/access/BankContractorAccount')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const { CURRENCY_CODE_FIELD, IMPORT_ID_FIELD } = require('../../common/schema/fields')


const BankContractorAccount = new GQLListSchema('BankContractorAccount', {
    schemaDoc: 'Account for external contractor, which organization is not stored in condo. Contractor is related to expenses transactions of an Organization. Will be obtained from export files with bank transactions or from banking API',
    fields: {

        name: {
            schemaDoc: 'Name of contractor organization',
            type: Text,
            isRequired: true,
        },

        organization: {
            ...ORGANIZATION_OWNED_FIELD,
            schemaDoc: 'Technical link to property management organization, that has expenses transactions with this contractor. Used for access rights and cascade behaviour of data. Contractor organization is not stored in condo. The object will be deleted if the related organization ceases to exist',
        },

        costItem: {
            schemaDoc: 'Related cost item, that will determine cost items for transactions belonging to this contractor',
            type: Relationship,
            ref: 'BankCostItem',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        tin: {
            schemaDoc: 'Tax Identification Number',
            type: Text,
            isRequired: true,
        },

        country: {
            schemaDoc: 'Country where the bank is located',
            type: Text,
            isRequired: true,
        },

        routingNumber: {
            schemaDoc: 'The routing transit number for the bank account.',
            type: Text,
            isRequired: true,
        },

        number: {
            schemaDoc: 'Bank account number',
            type: Text,
            isRequired: true,
        },

        currencyCode: CURRENCY_CODE_FIELD,

        importId: IMPORT_ID_FIELD,

        territoryCode: {
            schemaDoc: 'Location of the holder of this bank account. It depends on a country. In Russia it is OKTMO',
            type: Text,
        },

        bankName: {
            schemaDoc: 'Name of bank',
            type: Text,
        },

        meta: {
            schemaDoc: 'Structured non-typed metadata, can be used by mini-apps or external services to store information',
            type: Json,
        },

        tinMeta: {
            schemaDoc: 'Structured metadata found by tin',
            type: Json,
        },

        routingNumberMeta: {
            schemaDoc: 'Structured metadata found by routing number',
            type: Json,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankContractorAccounts,
        create: access.canManageBankContractorAccounts,
        update: access.canManageBankContractorAccounts,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankContractorAccount,
}
