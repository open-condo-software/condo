/**
 * Generated by `createschema banking.BankSyncTask 'account:Relationship:BankAccount:CASCADE; integrationContext:Relationship:BankIntegrationContext:CASCADE; organization:Relationship:Organization:CASCADE; status:Select:processing,completed,cancelled,error; file?:File; totalCount?:Integer; processedCount?:Integer; meta:Json;'`
 */

const { Relationship, Integer, Select, File } = require('@keystonejs/fields')
const { values } = require('lodash')

const { canOnlyServerSideWithoutUserRequest } = require('@open-condo/keystone/access')
const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/banking/access/BankSyncTask')
const { BANK_SYNC_TASK_STATUS } = require('@condo/domains/banking/constants')
const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')

const BANK_SYNC_TASK_FOLDER_NAME = 'BankSyncTask'
const BankSyncTaskFileAdapter = new FileAdapter(BANK_SYNC_TASK_FOLDER_NAME)

const BankSyncTask = new GQLListSchema('BankSyncTask', {
    schemaDoc: 'information about synchronization process of transactions with external source of from uploaded file',
    fields: {

        account: {
            schemaDoc: 'Bank account for which current synchronization operation is performed',
            type: Relationship,
            ref: 'BankAccount',
            // Can be unknown when account does not exist during import
            isRequired: false,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        integrationContext: {
            schemaDoc: 'Integration context of account for which current synchronization operation is performed',
            type: Relationship,
            ref: 'BankIntegrationContext',
            // Can be unknown when account does not exist during import
            isRequired: false,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        organization: ORGANIZATION_OWNED_FIELD,

        status: {
            schemaDoc: 'Status of current synchronization operation',
            type: Select,
            options: values(BANK_SYNC_TASK_STATUS),
            defaultValue: BANK_SYNC_TASK_STATUS.PROCESSING,
            isRequired: true,
            access: {
                read: true,
                create: canOnlyServerSideWithoutUserRequest,
                update: true,
            },
        },

        file: {
            schemaDoc: 'Uploaded file form which transactions should be ',
            type: File,
            adapter: BankSyncTaskFileAdapter,
            access: {
                read: true,
                create: canOnlyServerSideWithoutUserRequest,
                update: canOnlyServerSideWithoutUserRequest,
            },
        },

        totalCount: {
            schemaDoc: 'Count of transactions to import. Can be unknown in advance',
            type: Integer,
        },

        processedCount: {
            schemaDoc: 'Count of transactions, that has been actually created in our database based in data from external source, determined by integration context',
            type: Integer,
        },

        meta: {
            schemaDoc: 'Additional data, specific to used integration',
            type: Json,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankSyncTasks,
        create: access.canManageBankSyncTasks,
        update: access.canManageBankSyncTasks,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankSyncTask,
}
