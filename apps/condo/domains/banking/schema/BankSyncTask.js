/**
 * Generated by `createschema banking.BankSyncTask 'account:Relationship:BankAccount:CASCADE; integrationContext:Relationship:BankIntegrationContext:CASCADE; organization:Relationship:Organization:CASCADE; status:Select:processing,completed,cancelled,error; file?:File; totalCount?:Integer; processedCount?:Integer; meta:Json;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')

const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/banking/access/BankSyncTask')


const BankSyncTask = new GQLListSchema('BankSyncTask', {
    // TODO(codegen): write doc for the BankSyncTask domain model!
    schemaDoc: 'TODO DOC!',
    fields: {

        account: {
            // TODO(codegen): write doc for BankSyncTask.account field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BankAccount',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        integrationContext: {
            // TODO(codegen): write doc for BankSyncTask.integrationContext field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BankIntegrationContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        organization: {
            // TODO(codegen): write doc for BankSyncTask.organization field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        status: {
            // TODO(codegen): write doc for BankSyncTask.status field!
            schemaDoc: 'TODO DOC!',
            type: Select,
            options: 'processing,completed,cancelled,error',
            isRequired: true,
        },

        file: {
            // TODO(codegen): write doc for BankSyncTask.file field!
            schemaDoc: 'TODO DOC!',
            type: File,
        },

        totalCount: {
            // TODO(codegen): write doc for BankSyncTask.totalCount field!
            schemaDoc: 'TODO DOC!',
            type: Integer,
        },

        processedCount: {
            // TODO(codegen): write doc for BankSyncTask.processedCount field!
            schemaDoc: 'TODO DOC!',
            type: Integer,
        },

        meta: {
            // TODO(codegen): write doc for BankSyncTask.meta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankSyncTasks,
        create: access.canManageBankSyncTasks,
        update: access.canManageBankSyncTasks,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankSyncTask,
}
