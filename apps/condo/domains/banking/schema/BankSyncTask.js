/**
 * Generated by `createschema banking.BankSyncTask 'account:Relationship:BankAccount:CASCADE; integrationContext:Relationship:BankIntegrationContext:CASCADE; organization:Relationship:Organization:CASCADE; status:Select:processing,completed,cancelled,error; file?:File; totalCount?:Integer; processedCount?:Integer; meta:Json;'`
 */

const { Relationship, Integer, Select, File } = require('@keystonejs/fields')
const Ajv = require('ajv')
const { values } = require('lodash')

const { canOnlyServerSideWithoutUserRequest } = require('@open-condo/keystone/access')
const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/banking/access/BankSyncTask')
const { BANK_SYNC_TASK_STATUS } = require('@condo/domains/banking/constants')
const { getValidator } = require('@condo/domains/common/schema/json.utils')
const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')

const { importBankTransactionsTask } = require('../tasks/importBankTransactions')

const BANK_SYNC_TASK_FOLDER_NAME = 'BankSyncTask'
const BankSyncTaskFileAdapter = new FileAdapter(BANK_SYNC_TASK_FOLDER_NAME, true)

const BankSyncTask = new GQLListSchema('BankSyncTask', {
    schemaDoc: 'information about synchronization process of transactions with external source of from uploaded file',
    fields: {

        account: {
            schemaDoc: 'Bank account for which current synchronization operation is performed. Can be unknown when account does not exist before import',
            type: Relationship,
            ref: 'BankAccount',
            isRequired: false,
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
        },

        integrationContext: {
            schemaDoc: 'Integration context of account for which current synchronization operation is performed. Can be unknown when account and integration does not exist before import',
            type: Relationship,
            ref: 'BankIntegrationAccountContext',
            isRequired: false,
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
        },

        organization: ORGANIZATION_OWNED_FIELD,

        property: {
            schemaDoc: 'Property to which sync operation in this task should be related. When property is specified, new BankAccount will be connected to it if it does not exists',
            type: Relationship,
            ref: 'Property',
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
            hooks: {
                validateInput: async ({ existingItem, resolvedData, addFieldValidationError }) => {
                    const newItem = { ...existingItem, ...resolvedData }

                    if (newItem.property) {
                        const property = await getById('Property', newItem.property)
                        const propertyOrganization = await getById('Organization', property.organization)
                        if (propertyOrganization.id !== newItem.organization) {
                            addFieldValidationError(`Specified property with id="${property.id}" should belong to the same organization with id="${newItem.organization}" as specified in "organization"`)
                        }
                    }
                },
            },
        },

        status: {
            schemaDoc: 'Status of current synchronization operation',
            type: Select,
            options: values(BANK_SYNC_TASK_STATUS),
            defaultValue: BANK_SYNC_TASK_STATUS.PROCESSING,
            isRequired: true,
            access: {
                read: true,
                create: canOnlyServerSideWithoutUserRequest,
                update: true,
            },
        },

        file: {
            schemaDoc: 'File from which transactions should be imported. Currently only 1CClientBankExchange format is supported',
            type: File,
            adapter: BankSyncTaskFileAdapter,
            access: {
                read: true,
                create: true,
                update: false,
            },
        },

        totalCount: {
            schemaDoc: 'Count of transactions to import. Can be unknown in advance',
            type: Integer,
        },

        processedCount: {
            schemaDoc: 'Count of transactions, that has been actually created in our database based in data from external source, determined by integration context',
            type: Integer,
            defaultValue: 0,
        },

        user: {
            schemaDoc: 'User that requested this operation. Will be used for read access checks to display all tasks somewhere and to display progress indicator of ongoing exporting task for current user',
            type: 'Relationship',
            ref: 'User',
            isRequired: true,
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            knexOptions: { isNotNullable: true },
            access: {
                read: true,
                create: true,
                update: false,
            },
        },

        meta: {
            schemaDoc: 'Additional data, specific to used integration',
            type: Json,
            hooks: {
                validateInput: getValidator(new Ajv().compile({
                    type: 'object',
                    properties: {
                        duplicatedTransactions: {
                            type: 'array',
                            items: { type: 'string' },
                            minItems: 1,
                        },
                    },
                    additionalProperties: false,
                })),
            },
        },
    },
    hooks: {
        afterChange: async (args) => {
            const { updatedItem, operation } = args
            if (operation === 'create') {
                await importBankTransactionsTask.delay(updatedItem.id)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankSyncTasks,
        create: access.canManageBankSyncTasks,
        update: access.canManageBankSyncTasks,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankSyncTask,
}
