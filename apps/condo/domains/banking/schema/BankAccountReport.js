/**
 * Generated by `createschema banking.BankAccountReport 'account:Relationship:BankAccount:CASCADE; organization:Relationship:Organization:CASCADE; version:Integer; template:Select:expenses_grouped_by_category_and_cost_item; period:Text; amount:Decimal; amountAt:DateTimeUtc; publishedAt:DateTimeUtc; totalIncome:Decimal; totalOutcome:Decimal; data:Json;'`
 */

const { Text, Relationship, Integer, Select, DateTimeUtc, Decimal } = require('@keystonejs/fields')

const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/banking/access/BankAccountReport')
const { BANK_ACCOUNT_REPORT_TEMPLATE_VALUES } = require('@condo/domains/banking/constants')
const { bankAccountReportDataValidators } = require('@condo/domains/banking/utils/validate/bankAccountReportDataValidators')
const { getValidator } = require('@condo/domains/common/schema/json.utils')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')


const BankAccountReport = new GQLListSchema('BankAccountReport', {
    schemaDoc: 'Calculated data for financial report of specified form, period and version.',
    fields: {

        account: {
            schemaDoc: 'Transactions of specified bank account will be used to calculate this report',
            type: Relationship,
            ref: 'BankAccount',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        organization: ORGANIZATION_OWNED_FIELD,

        version: {
            schemaDoc: 'When manual changes in transactions covers specified period, ',
            type: Integer,
            isRequired: true,
        },

        template: {
            schemaDoc: 'Form of this report',
            type: Select,
            options: BANK_ACCOUNT_REPORT_TEMPLATE_VALUES,
            isRequired: true,
        },

        period: {
            schemaDoc: 'Specified time frame to calculate this report. Can be month, quarter, year. Has specified format',
            type: Text,
            isRequired: true,
            hooks: {
                validateInput: ({ resolvedData, addFieldValidationError }) => {
                    const { period } = resolvedData
                    if (!period.match(/(^\d{4}-[0-1][0-9]$)|(^\d{4}-Q[1-4]$)|(^\d{4}$)/)) {
                        addFieldValidationError('Incorrect format. Expected "YYYY-MM" for monthly, "YYYY" for yearly, "YYYY-QN" for quarterly reports')
                    }
                },
            },
        },

        amount: {
            schemaDoc: 'Total amount for BankAccount on end of specified period of this report',
            type: Decimal,
            isRequired: true,
        },

        amountAt: {
            schemaDoc: 'Date on that the specified amount is actual',
            type: DateTimeUtc,
            isRequired: true,
        },

        publishedAt: {
            schemaDoc: 'Report will be available for public view if this field will have a value, otherwise in case of null value this report will not be available for public view',
            type: DateTimeUtc,
            isRequired: false,
        },

        totalIncome: {
            schemaDoc: 'Total income amount over period of this report',
            type: Decimal,
            isRequired: true,
        },

        totalOutcome: {
            schemaDoc: 'Total outcome amount over period of this report',
            type: Decimal,
            isRequired: true,
        },

        data: {
            schemaDoc: 'Calculated data of this report, that will be used to display',
            type: Json,
            isRequired: true,
            hooks: {
                validateInput: (args) => {
                    const { resolvedData } = args
                    if (BANK_ACCOUNT_REPORT_TEMPLATE_VALUES.includes(resolvedData.template)) {
                        return getValidator(bankAccountReportDataValidators[resolvedData.template])(args)
                    }
                },
            },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankAccountReports,
        create: access.canManageBankAccountReports,
        update: access.canManageBankAccountReports,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankAccountReport,
}