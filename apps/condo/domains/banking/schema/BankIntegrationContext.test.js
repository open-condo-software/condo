/**
 * Generated by `createschema banking.BankIntegrationContext 'integration:Relationship:BankIntegration:CASCADE; organization:Relationship:Organization:CASCADE; enabled:Checkbox'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@open-condo/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

const { BankIntegrationContext, createTestBankIntegrationContext, updateTestBankIntegrationContext } = require('@condo/domains/banking/utils/testSchema')
const { BankIntegration } = require('../utils/testSchema')
const { BANK_INTEGRATION_IDS } = require('../constants')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')

let adminClient
let supportClient
let anonymousClient
let bankIntegration

describe('BankIntegrationContext', () => {
    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        anonymousClient = await makeClient()
        bankIntegration = await BankIntegration.getOne(adminClient, { id: BANK_INTEGRATION_IDS['1CClientBankExchange'] })
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)
                const [obj, attrs] = await createTestBankIntegrationContext(admin, bankIntegration, organization)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.enabled).toBeTruthy()
            })

            test('support can', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [obj, attrs] = await createTestBankIntegrationContext(supportClient, bankIntegration, organization)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: supportClient.user.id }))
            })

            test('user can if it is an employee of organization with "canManageBankIntegrationContexts" ability', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankIntegrationContexts: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [obj, attrs] = await createTestBankIntegrationContext(userClient, bankIntegration, organization)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
            })

            test('user cannot if it is an employee of organization without "canManageBankIntegrationContexts" ability', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankIntegrationContexts: false,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestBankIntegrationContext(userClient, bankIntegration, organization)
                })
            })

            test('user cannot if it is an employee of another organization', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [anotherOrganization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, anotherOrganization, {
                    canManageBankIntegrationContexts: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                    await createTestBankIntegrationContext(userClient, bankIntegration, organization)
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(adminClient)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestBankIntegrationContext(anonymousClient, bankIntegration, organization)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [objCreated] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [obj, attrs] = await updateTestBankIntegrationContext(adminClient, objCreated.id, {
                    enabled: !objCreated.enabled,
                })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.enabled).toEqual(attrs.enabled)
            })

            test('support can', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [objCreated] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [obj, attrs] = await updateTestBankIntegrationContext(supportClient, objCreated.id, {
                    enabled: !objCreated.enabled,
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: supportClient.user.id }))
                expect(obj.enabled).toEqual(attrs.enabled)
            })

            test('user can if it is an employee of organization with "canManageBankIntegrationContexts" ability', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [objCreated] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankIntegrationContexts: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [obj, attrs] = await updateTestBankIntegrationContext(userClient, objCreated.id, {
                    enabled: !objCreated.enabled,
                })
                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(obj.enabled).toEqual(attrs.enabled)
            })

            test('user cannot if it is an employee of organization without "canManageBankIntegrationContexts" ability', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [objCreated] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankIntegrationContexts: false,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestBankIntegrationContext(userClient, objCreated.id, {
                        enabled: !objCreated.enabled,
                    })
                })
            })

            test('user cannot if it is an employee of another organization', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [anotherOrganization] = await createTestOrganization(adminClient)
                const [objCreated] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, anotherOrganization, {
                    canManageBankIntegrationContexts: false,
                })
                await createTestOrganizationEmployee(adminClient, anotherOrganization, userClient.user, role)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestBankIntegrationContext(userClient, objCreated.id, {
                        enabled: !objCreated.enabled,
                    })
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [objCreated] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestBankIntegrationContext(anonymousClient, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [objCreated] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankIntegrationContext.delete(adminClient, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [objCreated] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankIntegrationContext.delete(userClient, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [objCreated] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankIntegrationContext.delete(anonymousClient, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [obj] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)

                const objs = await BankIntegrationContext.getAll(adminClient, { id: obj.id }, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                        enabled: obj.enabled,
                    }),
                ]))
            })

            test('user can if it is an employee of organization', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [obj] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                // Ability to read does not requires specific role ability flag
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization)
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const objs = await BankIntegrationContext.getAll(userClient, { id: obj.id }, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                    enabled: obj.enabled,
                })
            })

            test('user cannot if it is an employee of another organization', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [anotherOrganization] = await createTestOrganization(adminClient)
                const [obj] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                // Ability to read does not requires specific role ability flag
                const [role] = await createTestOrganizationEmployeeRole(adminClient, anotherOrganization)
                await createTestOrganizationEmployee(adminClient, anotherOrganization, userClient.user, role)

                const objs = await BankIntegrationContext.getAll(userClient, { id: obj.id }, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(0)
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [obj] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await BankIntegrationContext.getAll(anonymousClient, { id: obj.id }, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })
})
