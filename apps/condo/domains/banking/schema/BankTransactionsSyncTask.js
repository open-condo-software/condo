/**
 * Generated by `createschema banking.BankTransactionsSyncTask 'account:Relationship:BankAccount:CASCADE; organization:Relationship:Organization:CASCADE; status:Select:processing,completed,cancelled,error; meta:Json;'`
 */

const { Relationship, Select, CalendarDay } = require('@keystonejs/fields')
const dayjs = require('dayjs')
const { values, has, get } = require('lodash')

const { GQLError } = require('@open-condo/keystone/errors')
const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/banking/access/BankTransactionsSyncTask')
const { BANK_SYNC_TASK_STATUS, BANK_INTEGRATION_IDS } = require('@condo/domains/banking/constants')
const { INCORRECT_DATE_INTERVAL, WRONG_INTEGRATION } = require('@condo/domains/banking/constants')
const { BankAccount } = require('@condo/domains/banking/utils/serverSchema')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const { syncSbbolTransactions } = require('@condo/domains/organization/tasks')


const BankTransactionsSyncTask = new GQLListSchema('BankTransactionsSyncTask', {
    schemaDoc: 'information about synchronization process of transactions with external source of from SBBOL',
    fields: {

        account: {
            schemaDoc: 'Bank account for which current synchronization operation is performed.',
            type: Relationship,
            ref: 'BankAccount',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            access: {
                read: true,
                create: true,
                update: false,
            },
        },

        organization: ORGANIZATION_OWNED_FIELD,

        status: {
            schemaDoc: 'Status of current synchronization operation',
            type: Select,
            options: values(BANK_SYNC_TASK_STATUS),
            defaultValue: BANK_SYNC_TASK_STATUS.PROCESSING,
            isRequired: true,
        },

        dateFrom: {
            schemaDoc: 'From what date to request statements',
            type: CalendarDay,
            isRequired: true,
            access: {
                read: true,
                create: true,
                update: false,
            },
        },

        dateTo: {
            schemaDoc: 'Until what date to request statements',
            type: CalendarDay,
            access: {
                read: true,
                create: true,
                update: false,
            },
        },

        user: {
            schemaDoc: 'User that requested this operation. Will be used for read access checks to display all tasks somewhere and to display progress indicator of ongoing exporting task for current user',
            type: 'Relationship',
            ref: 'User',
            isRequired: true,
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            knexOptions: { isNotNullable: true },
            access: {
                read: true,
                create: true,
                update: false,
            },
        },

        meta: {
            schemaDoc: 'Additional data, specific to used integration',
            type: Json,
        },

    },
    hooks: {
        resolveInput: async ({ resolvedData, context }) => {
            const dateFrom = get(resolvedData, 'dateFrom')
            const dateTo = get(resolvedData, 'dateTo')

            if (!dateTo) {
                resolvedData.dateTo = dateFrom
            }

            const account = await BankAccount.getOne(context, { id: resolvedData.account })
            const integration = get(account, 'integrationContext.integration')
            if (!integration) {
                await BankAccount.update(context, account.id, {
                    integrationContext: { connect: { id: BANK_INTEGRATION_IDS.SBBOL } },
                    dv: 1,
                    sender: { dv: 1, fingerprint: 'BankTransactionsSyncTask' },
                })
            }

            return resolvedData
        },
        validateInput: async ({ resolvedData, context, operation, existingItem }) => {
            if (operation === 'create') {
                const dateFrom = get(resolvedData, 'dateFrom')
                const dateTo = get(resolvedData, 'dateTo')
                if (dateTo && dateFrom > dateTo) {
                    throw new GQLError(INCORRECT_DATE_INTERVAL, context)
                }

                const integration = get(resolvedData.account, 'integrationContext.integration')
                if (integration === BANK_INTEGRATION_IDS['1CClientBankExchange']) {
                    throw new GQLError(WRONG_INTEGRATION, context)
                }
            }
        },
        afterChange: async ({ updatedItem, operation }) => {
            if (operation === 'create') {
                const dateInterval = [updatedItem.dateFrom]
                while (dateInterval[dateInterval.length - 1] < updatedItem.dateTo) {
                    dateInterval.push(dayjs(dateInterval[dateInterval.length - 1]).add(1, 'day').format('YYYY-MM-DD'))
                }
                await syncSbbolTransactions.delay(dateInterval, updatedItem.user.id, updatedItem.organization)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBankTransactionsSyncTasks,
        create: access.canManageBankTransactionsSyncTasks,
        update: access.canManageBankTransactionsSyncTasks,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BankTransactionsSyncTask,
}
