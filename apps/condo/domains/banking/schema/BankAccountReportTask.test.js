/**
 * Generated by `createschema banking.BankAccountReportTask 'account:Relationship:BankAccount:CASCADE; organization:Relationship:Organization:CASCADE; status:Select:processing,completed,cancelled,errored; progress:Integer; meta:Json;'`
 */

const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')

const { makeLoggedInAdminClient, makeClient, UUID_RE, waitFor, catchErrorFrom, expectValuesOfCommonFields } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { BANK_SYNC_TASK_STATUS } = require('@condo/domains/banking/constants')
const { BANK_INTEGRATION_IDS } = require('@condo/domains/banking/constants')
const { BankAccountReportTask, createTestBankAccountReportTask, updateTestBankAccountReportTask, createTestBankAccount, BankAccountReport, createTestBankTransaction, updateTestBankAccount } = require('@condo/domains/banking/utils/testSchema')
const { createTestBankIntegrationAccountContext, createTestBankContractorAccount, BankIntegration, createTestBankCategory, createTestBankCostItem } = require('@condo/domains/banking/utils/testSchema')
const { sleep } = require('@condo/domains/common/utils/sleep')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationLink } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

describe('BankAccountReportTask', () => {
    let admin, bankIntegration, category
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        bankIntegration = await BankIntegration.getOne(admin, { id: BANK_INTEGRATION_IDS['1CClientBankExchange'] });
        ([category] = await createTestBankCategory(admin))

    })
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                // 1) prepare data
                const [org] = await createTestOrganization(admin)
                const [account] = await createTestBankAccount(admin, org)
                // 2) action
                const [obj, attrs] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })

                // 3) check
                expectValuesOfCommonFields(obj, attrs, admin)
                expect(obj.account.id).toEqual(account.id)
                expect(obj.status).toEqual(BANK_SYNC_TASK_STATUS.PROCESSING)
                expect(obj.organization.id).toEqual(org.id)
            })

            test('support cannot create for another user', async () => {
                const client = await makeClientWithSupportUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestBankAccountReportTask(client, { id: faker.datatype.uuid() }, { id: faker.datatype.uuid() }, faker.datatype.uuid())
                })
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(admin)
                const [account] = await createTestBankAccount(admin, organization)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageBankAccountReportTasks: true,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [obj, attrs] = await createTestBankAccountReportTask(client, account, organization, client.user.id, { progress: 0 })

                expectValuesOfCommonFields(obj, attrs, client)
                expect(obj.account.id).toEqual(account.id)
                expect(obj.organization.id).toEqual(organization.id)
            })

            test('user cannot if it is an employee of organization without "canManageBankAccountReportTasks" permission', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageBankAccountReportTasks: false,
                })
                await createTestOrganizationEmployee(admin, organization, userClient.user, role)
                const [account] = await createTestBankAccount(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestBankAccountReportTask(userClient, account, organization, userClient.user.id)
                })
            })

            test('user cannot if it is an employee of another organization with "canManageBankAccountReportTasks" permission', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [anotherOrganization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, anotherOrganization, {
                    canManageBankAccountReportTasks: true,
                })
                await createTestOrganizationEmployee(admin, anotherOrganization, userClient.user, role)
                const [organization] = await createTestOrganization(admin)
                const [account] = await createTestBankAccount(admin, organization, {
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestBankAccountReportTask(userClient, account, organization, userClient.user.id)
                })
            })

            test('user can if it is an employee of linked organization with "canManageBankAccountReportTasks" permission', async () => {
                const [parentOrganization] = await createTestOrganization(admin)
                const [childOrganization] = await createTestOrganization(admin)
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                await createTestOrganizationLink(admin, parentOrganization, childOrganization)
                const [role] = await createTestOrganizationEmployeeRole(admin, parentOrganization, {
                    canManageBankAccountReportTasks: true,
                })
                await createTestOrganizationEmployee(admin, parentOrganization, userClient.user, role, {})

                const [account] = await createTestBankAccount(admin, childOrganization)

                const [obj, attrs] = await createTestBankAccountReportTask(userClient, account, childOrganization, userClient.user.id)

                expectValuesOfCommonFields(obj, attrs, userClient)
            })

            test('user cannot if it is an employee of linked organization without "canManageBankAccountReportTasks" permission', async () => {
                const [parentOrganization] = await createTestOrganization(admin)
                const [childOrganization] = await createTestOrganization(admin)
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                await createTestOrganizationLink(admin, parentOrganization, childOrganization)
                const [role] = await createTestOrganizationEmployeeRole(admin, parentOrganization, {
                    canManageBankAccountReportTasks: false,
                })
                await createTestOrganizationEmployee(admin, parentOrganization, userClient.user, role, {})

                const [account] = await createTestBankAccount(admin, childOrganization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestBankAccountReportTask(userClient, account, childOrganization, userClient.user.id)
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestBankAccountReportTask(client, { id: faker.datatype.uuid() }, { id: faker.datatype.uuid() }, faker.datatype.uuid())
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [org] = await createTestOrganization(admin)
                const [account] = await createTestBankAccount(admin, org)
                const [objCreated] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })
                await sleep(300) // In parallel with the update in the test, there is an update in the task launched in afterChange of the BankAccountReportTask entity
                const [obj, attrs] = await updateTestBankAccountReportTask(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toMatchObject(attrs.sender)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            test('No one can update account field', async () => {
                const [org] = await createTestOrganization(admin)
                const [account] = await createTestBankAccount(admin, org)
                const [objCreated] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })

                await catchErrorFrom(async () => {
                    await updateTestBankAccountReportTask(admin, objCreated.id, {
                        account: { connect: { id: faker.datatype.uuid() } },
                    })
                }, ({ errors }) =>{
                    expect(errors[0].message).toContain('Field "account" is not defined by type "BankAccountReportTaskUpdateInput"')
                })
            })

            test('support cannot', async () => {
                const [org] = await createTestOrganization(admin)
                const [account] = await createTestBankAccount(admin, org)
                const [objCreated] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })

                const client = await makeClientWithSupportUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestBankAccountReportTask(client, objCreated.id)
                })
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [org] = await createTestOrganization(admin)
                const [account] = await createTestBankAccount(admin, org)
                const [role] = await createTestOrganizationEmployeeRole(admin, org, {
                    canManageBankAccountReportTasks: true,
                })
                await createTestOrganizationEmployee(admin, org, client.user, role)
                const [objCreated] = await createTestBankAccountReportTask(client, account, org, client.user.id, { progress: 0 })

                const [obj, attrs] = await updateTestBankAccountReportTask(client, objCreated.id, {
                    status: BANK_SYNC_TASK_STATUS.CANCELLED,
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('user can only cancel his task', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageBankAccountReportTasks: true,
                })
                await createTestOrganizationEmployee(admin, organization, userClient.user, role)
                const [account] = await createTestBankAccount(admin, organization)

                const [objCreated] = await createTestBankAccountReportTask(userClient, account, organization, userClient.user.id)

                await catchErrorFrom(async () => {
                    await updateTestBankAccountReportTask(userClient, objCreated.id, {
                        organization: { disconnectAll: true },
                    })
                }, ({ errors }) =>{
                    expect(errors[0].message).toContain('Field "organization" is not defined by type "BankAccountReportTaskUpdateInput"')
                })
                await catchErrorFrom(async () => {
                    await updateTestBankAccountReportTask(userClient, objCreated.id, {
                        account: { disconnectAll: true },
                    })
                }, ({ errors }) =>{
                    expect(errors[0].message).toContain('Field "account" is not defined by type "BankAccountReportTaskUpdateInput"')
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestBankAccountReportTask(userClient, objCreated.id, {
                        progress: 100,
                    })
                })

                const [objUpdated2, finalAttrs] = await updateTestBankAccountReportTask(userClient, objCreated.id, {
                    status: BANK_SYNC_TASK_STATUS.CANCELLED,
                })

                expect(objUpdated2.id).toMatch(UUID_RE)
                expect(objUpdated2.dv).toEqual(1)
                expect(objUpdated2.sender).toEqual(finalAttrs.sender)
                expect(objUpdated2.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(objUpdated2.status).toEqual(BANK_SYNC_TASK_STATUS.CANCELLED)
                expect(objUpdated2.organization).toEqual(expect.objectContaining({ id: organization.id }))
                expect(objUpdated2.account).toEqual(expect.objectContaining({ id: account.id }))
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestBankAccountReportTask(client, faker.datatype.uuid())
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankAccountReportTask.delete(admin, faker.datatype.uuid())
                })
            })

            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankAccountReportTask.delete(client, faker.datatype.uuid())
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankAccountReportTask.delete(client, faker.datatype.uuid())
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [org] = await createTestOrganization(admin)
                const [account] = await createTestBankAccount(admin, org)
                const [objCreated] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })

                const objs = await BankAccountReportTask.getAll(admin, {
                    organization: { id: org.id },
                    account: { id: account.id },
                }, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: objCreated.id,
                        account: { id: account.id },
                        organization: { id: org.id },
                        user: { id: admin.user.id },
                    }),
                ]))
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [org] = await createTestOrganization(admin)
                const [account] = await createTestBankAccount(admin, org)
                const [role] = await createTestOrganizationEmployeeRole(admin, org, {
                    canManageBankAccountReportTasks: true,
                })
                await createTestOrganizationEmployee(admin, org, client.user, role)
                const [objCreated] = await createTestBankAccountReportTask(client, account, org, client.user.id, { progress: 0 })

                const objs = await BankAccountReportTask.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: objCreated.id,
                    account: { id: account.id },
                    organization: { id: org.id },
                    user: { id: client.user.id },
                })
            })

            test('user cannot read instances if he is not owner', async () => {
                const client1 = await makeClientWithNewRegisteredAndLoggedInUser()
                const client2 = await makeClientWithNewRegisteredAndLoggedInUser()
                const [org] = await createTestOrganization(admin)
                const [account] = await createTestBankAccount(admin, org)
                const [role] = await createTestOrganizationEmployeeRole(admin, org, {
                    canManageBankAccountReportTasks: true,
                })
                await createTestOrganizationEmployee(admin, org, client1.user, role)
                await createTestOrganizationEmployee(admin, org, client2.user, role)
                await createTestBankAccountReportTask(client1, account, org, client1.user.id, { progress: 0 })

                const objs = await BankAccountReportTask.getAll(client2, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(0)
            })


            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await BankAccountReportTask.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })
    
    describe('BankAccountReportTask afterChange', () => {

        it('create BankAccountReport', async () => {
            const [org] = await createTestOrganization(admin)
            const [integrationContext] = await createTestBankIntegrationAccountContext(admin, bankIntegration, org)
            const [account] = await createTestBankAccount(admin, org, {
                integrationContext: { connect: { id: integrationContext.id } },
                meta: {
                    amount: '200',
                    amountAt: dayjs().format('YYYY-MM-DD'),
                },
            })

            const [costItem1] = await createTestBankCostItem(admin, category, {
                isOutcome: false,
            })

            const [costItem2] = await createTestBankCostItem(admin, category, {
                isOutcome: true,
            })

            const [contractorAccount1] = await createTestBankContractorAccount(admin, org, {
                costItem: { connect: { id: costItem1.id } },
            })

            const [contractorAccount2] = await createTestBankContractorAccount(admin, org, {
                costItem: { connect: { id: costItem2.id } },
            })

            const date = dayjs().format('YYYY-MM-DD')
            for (let i = 0; i < 5; i++) {
                await createTestBankTransaction(admin, account, contractorAccount1, integrationContext, org, {
                    date,
                    amount: '50',
                    isOutcome: false,
                })

            }
            for (let i = 0; i < 5; i++) {
                await createTestBankTransaction(admin, account, contractorAccount2, integrationContext, org, {
                    date,
                    amount: '10',
                    isOutcome: true,
                })
            }

            const [createdReportTask] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })


            await waitFor(async () => {
                const updatedTask = await BankAccountReportTask.getOne(admin, {
                    id: createdReportTask.id,
                    status: BANK_SYNC_TASK_STATUS.COMPLETED,
                })
                expect(updatedTask).toBeDefined()

                const bankAccountReport = await BankAccountReport.getOne(admin, {
                    organization: { id: org.id },
                })
                expect(bankAccountReport).toBeDefined()
            })
            const report = await BankAccountReport.getOne(admin, {
                organization: { id: org.id },
            })
            expect(report.version).toEqual(1)
            expect(Number(report.amount)).toEqual(200)
            expect(report.amountAt).toEqual(`${dayjs().format('YYYY-MM-DD')}T00:00:00.000Z`)
            expect(Number(report.totalIncome)).toEqual(250)
            expect(Number(report.totalOutcome)).toEqual(50)
            expect(report.data.categoryGroups[0].costItemGroups[0].sum).toEqual(250)
            expect(report.data.categoryGroups[0].costItemGroups[1].sum).toEqual(50)
        })

        it('create BankAccountReport with unsigned CostItem and Category', async () => {
            const [org] = await createTestOrganization(admin)
            const [integrationContext] = await createTestBankIntegrationAccountContext(admin, bankIntegration, org)
            const [account] = await createTestBankAccount(admin, org, {
                integrationContext: { connect: { id: integrationContext.id } },
                meta: {
                    amount: '200',
                    amountAt: dayjs().format('YYYY-MM-DD'),
                },
            })

            const [costItem1] = await createTestBankCostItem(admin, category, {
                isOutcome: false,
            })

            const [contractorAccount1] = await createTestBankContractorAccount(admin, org, {
                costItem: { connect: { id: costItem1.id } },
            })

            const date = dayjs().format('YYYY-MM-DD')
            for (let i = 0; i < 5; i++) {
                await createTestBankTransaction(admin, account, contractorAccount1, integrationContext, org, {
                    date,
                    amount: '50',
                    isOutcome: false,
                })

            }
            for (let i = 0; i < 5; i++) {
                await createTestBankTransaction(admin, account, { id: faker.datatype.uuid() }, integrationContext, org, {
                    date,
                    amount: '10',
                    isOutcome: true,
                    contractorAccount: undefined,
                })
            }

            const [createdReportTask] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })


            await waitFor(async () => {
                const updatedTask = await BankAccountReportTask.getOne(admin, {
                    id: createdReportTask.id,
                    status: BANK_SYNC_TASK_STATUS.COMPLETED,
                })
                expect(updatedTask).toBeDefined()

                const bankAccountReport = await BankAccountReport.getOne(admin, {
                    organization: { id: org.id },
                })
                expect(bankAccountReport).toBeDefined()
            })
            const report = await BankAccountReport.getOne(admin, {
                organization: { id: org.id },
            })
            expect(report.version).toEqual(1)
            expect(Number(report.amount)).toEqual(200)
            expect(report.amountAt).toEqual(`${dayjs().format('YYYY-MM-DD')}T00:00:00.000Z`)
            expect(Number(report.totalIncome)).toEqual(250)
            expect(Number(report.totalOutcome)).toEqual(50)
            expect(report.data.categoryGroups[0].costItemGroups[0].sum).toEqual(250)
        })

        it('create BankAccountReport with contractorAccount without costItem', async () => {
            const [org] = await createTestOrganization(admin)
            const [integrationContext] = await createTestBankIntegrationAccountContext(admin, bankIntegration, org)
            const [account] = await createTestBankAccount(admin, org, {
                integrationContext: { connect: { id: integrationContext.id } },
                meta: {
                    amount: '250',
                    amountAt: dayjs().format('YYYY-MM-DD'),
                },
            })

            const [costItem1] = await createTestBankCostItem(admin, category, {
                isOutcome: false,
            })

            const [contractorAccount1] = await createTestBankContractorAccount(admin, org)

            const date = dayjs().format('YYYY-MM-DD')
            for (let i = 0; i < 4; i++) {
                await createTestBankTransaction(admin, account, contractorAccount1, integrationContext, org, {
                    date,
                    amount: '50',
                    isOutcome: false,
                })
            }
            await createTestBankTransaction(admin, account, contractorAccount1, integrationContext, org, {
                date,
                amount: '50',
                isOutcome: false,
                costItem: { connect: { id: costItem1.id } },
            })

            const [createdReportTask] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })


            await waitFor(async () => {
                const updatedTask = await BankAccountReportTask.getOne(admin, {
                    id: createdReportTask.id,
                    status: BANK_SYNC_TASK_STATUS.COMPLETED,
                })
                expect(updatedTask).toBeDefined()

                const bankAccountReport = await BankAccountReport.getOne(admin, {
                    organization: { id: org.id },
                })
                expect(bankAccountReport).toBeDefined()
            })
            const report = await BankAccountReport.getOne(admin, {
                organization: { id: org.id },
            })
            expect(report.version).toEqual(1)
            expect(Number(report.amount)).toEqual(250)
            expect(report.amountAt).toEqual(`${dayjs().format('YYYY-MM-DD')}T00:00:00.000Z`)
            expect(Number(report.totalIncome)).toEqual(250)
            expect(report.data.categoryGroups[0].costItemGroups[0].sum).toEqual(50)
        })

        it('do not create a new BankAccountReport instance if the transaction pool has not changed', async () => {
            const [org] = await createTestOrganization(admin)
            const [integrationContext] = await createTestBankIntegrationAccountContext(admin, bankIntegration, org)
            const [account] = await createTestBankAccount(admin, org, {
                integrationContext: { connect: { id: integrationContext.id } },
                meta: {
                    amount: '250',
                    amountAt: dayjs().format('YYYY-MM-DD'),
                },
            })

            const [costItem1] = await createTestBankCostItem(admin, category, {
                isOutcome: false,
            })

            const [contractorAccount1] = await createTestBankContractorAccount(admin, org, {
                costItem: { connect: { id: costItem1.id } },
            })

            const date = dayjs().format('YYYY-MM-DD')
            for (let i = 0; i < 5; i++) {
                await createTestBankTransaction(admin, account, contractorAccount1, integrationContext, org, {
                    date,
                    amount: '50',
                    isOutcome: false,
                })
            }

            const [createdReportTask] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })


            await waitFor(async () => {
                const updatedTask = await BankAccountReportTask.getOne(admin, {
                    id: createdReportTask.id,
                    status: BANK_SYNC_TASK_STATUS.COMPLETED,
                })
                expect(updatedTask).toBeDefined()

                const bankAccountReport = await BankAccountReport.getOne(admin, {
                    organization: { id: org.id },
                })
                expect(bankAccountReport).toBeDefined()
            })
            const report = await BankAccountReport.getOne(admin, {
                organization: { id: org.id },
            })
            expect(report.version).toEqual(1)
            expect(Number(report.amount)).toEqual(250)
            expect(report.amountAt).toEqual(`${dayjs().format('YYYY-MM-DD')}T00:00:00.000Z`)
            expect(Number(report.totalIncome)).toEqual(250)
            expect(report.data.categoryGroups[0].costItemGroups[0].sum).toEqual(250)

            await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })
            await waitFor(async () => {
                const updatedTask = await BankAccountReportTask.getOne(admin, {
                    id: createdReportTask.id,
                    status: BANK_SYNC_TASK_STATUS.COMPLETED,
                })
                expect(updatedTask).toBeDefined()

                const bankAccountReport = await BankAccountReport.getOne(admin, {
                    organization: { id: org.id },
                })
                expect(bankAccountReport).toBeDefined()
            })

            const reports = await BankAccountReport.getAll(admin, {
                organization: { id: org.id },
            })
            expect(reports).toHaveLength(1)
        })

        it('regenerate BankAccountReport with version===2 and isLatest===true if transactions pull will be expanded', async () => {
            const date = dayjs().format('YYYY-MM-DD')
            const [org] = await createTestOrganization(admin)
            const [integrationContext] = await createTestBankIntegrationAccountContext(admin, bankIntegration, org)
            const [account] = await createTestBankAccount(admin, org, {
                integrationContext: { connect: { id: integrationContext.id } },
                meta: {
                    amount: '250',
                    amountAt: date,
                },
            })

            const [costItem1] = await createTestBankCostItem(admin, category, {
                isOutcome: false,
            })

            const [costItem2] = await createTestBankCostItem(admin, category, {
                isOutcome: true,
            })

            const [contractorAccount1] = await createTestBankContractorAccount(admin, org, {
                costItem: { connect: { id: costItem1.id } },
            })

            for (let i = 0; i < 5; i++) {
                await createTestBankTransaction(admin, account, contractorAccount1, integrationContext, org, {
                    date,
                    amount: '50',
                    isOutcome: false,
                })
            }

            const [createdReportTask] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })

            await waitFor(async () => {
                const updatedTask = await BankAccountReportTask.getOne(admin, {
                    id: createdReportTask.id,
                    status: BANK_SYNC_TASK_STATUS.COMPLETED,
                })
                expect(updatedTask).toBeDefined()

                const bankAccountReport = await BankAccountReport.getOne(admin, {
                    organization: { id: org.id },
                })
                expect(bankAccountReport).toBeDefined()
            })
            const report = await BankAccountReport.getOne(admin, {
                organization: { id: org.id },
            })
            expect(report.version).toEqual(1)
            expect(Number(report.amount)).toEqual(250)
            expect(report.amountAt).toEqual(`${dayjs().format('YYYY-MM-DD')}T00:00:00.000Z`)
            expect(Number(report.totalIncome)).toEqual(250)
            expect(report.data.categoryGroups[0].costItemGroups[0].sum).toEqual(250)

            await updateTestBankAccount(admin, account.id, {
                meta: {
                    amount: '0',
                    amountAt: date,
                },
            })

            for (let i = 0; i < 5; i++) {
                await createTestBankTransaction(admin, account, contractorAccount1, integrationContext, org, {
                    date,
                    amount: '50',
                    isOutcome: true,
                    contractorAccount: undefined,
                    costItem: { connect: { id: costItem2.id } },
                })
            }

            const [createdReportTask2] = await createTestBankAccountReportTask(admin, account, org, admin.user.id, { progress: 0 })
            await waitFor(async () => {
                const updatedTask = await BankAccountReportTask.getOne(admin, {
                    id: createdReportTask2.id,
                    status: BANK_SYNC_TASK_STATUS.COMPLETED,
                })
                expect(updatedTask).toBeDefined()

                const bankAccountReport = await BankAccountReport.getOne(admin, {
                    organization: { id: org.id },
                    isLatest: true,
                })
                expect(bankAccountReport).toBeDefined()
            })
            const reportLatest = await BankAccountReport.getOne(admin, {
                organization: { id: org.id },
                isLatest: true,
            })

            expect(reportLatest.version).toEqual(2)
            expect(Number(reportLatest.amount)).toEqual(0)
            expect(reportLatest.amountAt).toEqual(`${dayjs().format('YYYY-MM-DD')}T00:00:00.000Z`)
            expect(Number(reportLatest.totalIncome)).toEqual(250)
            expect(Number(reportLatest.totalOutcome)).toEqual(250)
            expect(reportLatest.data.categoryGroups[0].costItemGroups[0].sum).toEqual(250)
            expect(reportLatest.data.categoryGroups[0].costItemGroups[1].sum).toEqual(250)
        })
    })
})
