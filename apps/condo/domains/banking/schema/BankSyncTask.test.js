/**
 * Generated by `createschema banking.BankSyncTask 'account:Relationship:BankAccount:CASCADE; integrationContext:Relationship:BankIntegrationContext:CASCADE; organization:Relationship:Organization:CASCADE; status:Select:processing,completed,cancelled,error; file?:File; totalCount?:Integer; processedCount?:Integer; meta:Json;'`
 */

const path = require('path')

const conf = require('@open-condo/config')
const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, expectToThrowGQLError, catchErrorFrom,
    expectToThrowValidationFailureError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    UploadingFile,
} = require('@open-condo/keystone/test.utils')

const { BankSyncTask, createTestBankSyncTask, updateTestBankSyncTask } = require('@condo/domains/banking/utils/testSchema')
const { createTestBankIntegrationContext, createTestBankAccount, BankIntegration } = require('@condo/domains/banking/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

const {
    createTestOrganization,
    createTestOrganizationEmployeeRole,
    createTestOrganizationEmployee, createTestOrganizationLink,
} = require('../../organization/utils/testSchema')
const { BANK_INTEGRATION_IDS, BANK_SYNC_TASK_STATUS } = require('../constants')


const pathToCorrectFile = path.resolve(conf.PROJECT_ROOT, 'apps/condo/domains/banking/utils/testSchema/assets/1CClientBankExchange.txt')

let adminClient
let bankIntegration
let anonymousClient

describe('BankSyncTask', () => {
    beforeAll(async () => {
        anonymousClient = await makeClient()
        adminClient = await makeLoggedInAdminClient()
        bankIntegration = await BankIntegration.getOne(adminClient, { id: BANK_INTEGRATION_IDS['1CClientBankExchange'] })
    })

    describe('CRUD tests', () => {
        describe('create', () => {

            test('admin can', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [obj, attrs] = await createTestBankSyncTask(adminClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                    file: new UploadingFile(pathToCorrectFile),
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
            })

            test('user can if it is an employee of organization with "canManageBankAccounts" permission', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankAccounts: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [obj, attrs] = await createTestBankSyncTask(userClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
            })

            test('user cannot if it is an employee of organization without "canManageBankAccounts" permission', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankAccounts: false,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestBankSyncTask(userClient, organization, {
                        account: { connect: { id: account.id } },
                        integrationContext: { connect: { id: integrationContext.id } },
                    })
                })
            })

            test('user cannot if it is an employee of another organization with "canManageBankAccounts" permission', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [anotherOrganization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, anotherOrganization, {
                    canManageBankAccounts: true,
                })
                await createTestOrganizationEmployee(adminClient, anotherOrganization, userClient.user, role)
                const [organization] = await createTestOrganization(adminClient)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestBankSyncTask(userClient, organization, {
                        account: { connect: { id: account.id } },
                        integrationContext: { connect: { id: integrationContext.id } },
                    })
                })
            })

            test('user can if it is an employee of linked organization with "canManageBankAccounts" permission', async () => {
                const [parentOrganization] = await createTestOrganization(adminClient)
                const [childOrganization] = await createTestOrganization(adminClient)
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                await createTestOrganizationLink(adminClient, parentOrganization, childOrganization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, parentOrganization, {
                    canManageBankAccounts: true,
                })
                await createTestOrganizationEmployee(adminClient, parentOrganization, userClient.user, role, {})

                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, childOrganization)
                const [account] = await createTestBankAccount(adminClient, childOrganization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [obj, attrs] = await createTestBankSyncTask(userClient, childOrganization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
            })

            test('user cannot if it is an employee of linked organization without "canManageBankAccounts" permission', async () => {
                const [parentOrganization] = await createTestOrganization(adminClient)
                const [childOrganization] = await createTestOrganization(adminClient)
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                await createTestOrganizationLink(adminClient, parentOrganization, childOrganization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, parentOrganization, {
                    canManageBankAccounts: false,
                })
                await createTestOrganizationEmployee(adminClient, parentOrganization, userClient.user, role, {})

                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, childOrganization)
                const [account] = await createTestBankAccount(adminClient, childOrganization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestBankSyncTask(userClient, childOrganization, {
                        account: { connect: { id: account.id } },
                        integrationContext: { connect: { id: integrationContext.id } },
                    })
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestBankSyncTask(anonymousClient, organization, {
                        account: { connect: { id: account.id } },
                        integrationContext: { connect: { id: integrationContext.id } },
                    })
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [objCreated] = await createTestBankSyncTask(adminClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [obj, attrs] = await updateTestBankSyncTask(adminClient, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
            })

            test('user can only cancel his task', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankAccounts: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [objCreated] = await createTestBankSyncTask(userClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })


                const [objUpdated, attrs] = await updateTestBankSyncTask(userClient, objCreated.id, {
                    status: BANK_SYNC_TASK_STATUS.CANCELLED,
                })

                expect(objUpdated.id).toMatch(UUID_RE)
                expect(objUpdated.dv).toEqual(1)
                expect(objUpdated.sender).toEqual(attrs.sender)
                expect(objUpdated.v).toEqual(2)
                expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
            })

            test('no update input for "file" field', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [objCreated] = await createTestBankSyncTask(adminClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                    file: new UploadingFile(pathToCorrectFile),
                })

                await catchErrorFrom(async () => {
                    await updateTestBankSyncTask(adminClient, objCreated.id, {
                        file: new UploadingFile(pathToCorrectFile),
                    })
                }, ({ errors }) =>{
                    expect(errors[0].message).toContain('Field "file" is not defined by type "BankSyncTaskUpdateInput"')
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [objCreated] = await createTestBankSyncTask(adminClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestBankSyncTask(anonymousClient, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankAccounts: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [objCreated] = await createTestBankSyncTask(userClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankSyncTask.delete(adminClient, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankAccounts: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [objCreated] = await createTestBankSyncTask(userClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankSyncTask.delete(userClient, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [obj] = await createTestBankSyncTask(adminClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await BankSyncTask.delete(anonymousClient, obj.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankAccounts: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [obj] = await createTestBankSyncTask(userClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const objs = await BankSyncTask.getAll(adminClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                        account: { id: account.id },
                        integrationContext: { id: integrationContext.id },
                        organization: { id: organization.id },
                        user: { id: userClient.user.id },
                    }),
                ]))
            })

            test('user can only read theirs records', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankAccounts: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const [obj] = await createTestBankSyncTask(userClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                const objs = await BankSyncTask.getAll(userClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                    account: { id: account.id },
                    integrationContext: { id: integrationContext.id },
                    organization: { id: organization.id },
                    user: { id: userClient.user.id },
                })

                const userClient2 = await makeClientWithNewRegisteredAndLoggedInUser()
                const [role2] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageBankAccounts: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient2.user, role2)

                const [obj2] = await createTestBankSyncTask(userClient2, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })
                const objs2 = await BankSyncTask.getAll(userClient2, {}, { sortBy: ['updatedAt_DESC'] })
                expect(objs2).toHaveLength(1)
                expect(objs2[0]).toMatchObject({
                    id: obj2.id,
                    account: { id: account.id },
                    integrationContext: { id: integrationContext.id },
                    organization: { id: organization.id },
                    user: { id: userClient2.user.id },
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
                const [account] = await createTestBankAccount(adminClient, organization, {
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                await createTestBankSyncTask(adminClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await BankSyncTask.getAll(anonymousClient, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            const [organization] = await createTestOrganization(adminClient)
            const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
            const [account] = await createTestBankAccount(adminClient, organization, {
                integrationContext: { connect: { id: integrationContext.id } },
            })

            await expectToThrowGQLError(async () => {
                await createTestBankSyncTask(adminClient, organization, {
                    dv: 2,
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                })
            }, {
                code: 'BAD_USER_INPUT',
                type: 'DV_VERSION_MISMATCH',
                message: 'Wrong value for data version number',
                mutation: 'createBankSyncTask',
                variable: ['data', 'dv'],
            }, 'obj')
        })

        it('should be connected to property from the same organization', async () => {
            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
            const [organization] = await createTestOrganization(adminClient)
            const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                canManageBankAccounts: true,
            })
            await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
            const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
            const [account] = await createTestBankAccount(adminClient, organization, {
                integrationContext: { connect: { id: integrationContext.id } },
            })

            const [anotherOrganization] = await createTestOrganization(adminClient)
            const [propertyFromAnotherOrganization] = await createTestProperty(adminClient, anotherOrganization)

            await catchErrorFrom(async () => {
                await createTestBankSyncTask(adminClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                    property: { connect: { id: propertyFromAnotherOrganization.id } },
                })
            }, ({ errors, data }) => {
                expect(errors[0].message).toMatch('You attempted to perform an invalid mutation')
                expect(errors[0].data.messages[0]).toEqual(`Specified property with id="${propertyFromAnotherOrganization.id}" should belong to the same organization with id="${organization.id}" as specified in "organization"`)
                expect(data).toEqual({ 'obj': null })
            })
        })

        test('JSON schema of "meta" field', async () => {
            const [organization] = await createTestOrganization(adminClient)
            const [integrationContext] = await createTestBankIntegrationContext(adminClient, bankIntegration, organization)
            const [account] = await createTestBankAccount(adminClient, organization, {
                integrationContext: { connect: { id: integrationContext.id } },
            })

            await expectToThrowValidationFailureError(async () => {
                await createTestBankSyncTask(adminClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                    meta: {
                        forbiddenField: 'forbiddenValue',
                    },
                })
            },  'meta field validation error. JSON not in the correct format - path: msg:must NOT have additional properties')

            await expectToThrowValidationFailureError(async () => {
                await createTestBankSyncTask(adminClient, organization, {
                    account: { connect: { id: account.id } },
                    integrationContext: { connect: { id: integrationContext.id } },
                    meta: {
                        duplicatedTransactions: 'not an array',
                    },
                })
            }, 'meta field validation error. JSON not in the correct format - path:/duplicatedTransactions msg:must be array')

            const [obj] = await createTestBankSyncTask(adminClient, organization, {
                account: { connect: { id: account.id } },
                integrationContext: { connect: { id: integrationContext.id } },
                meta: {
                    duplicatedTransactions: ['123', '456'],
                },
            })
            expect(obj.meta).toMatchObject({
                duplicatedTransactions: ['123', '456'],
            })
        })
    })
})
