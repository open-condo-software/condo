/**
 * Generated by `createschema meter.MeterReportingPeriod 'organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; meter:Relationship:Meter:CASCADE; startingDate:DateTimeUtc; deadline:DateTimeUtc;'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById, getByCondition } = require('@open-condo/keystone/schema')

const { getAvailableResidentMeterReportPeriods } = require('@condo/domains/meter/utils/serverSchema')
const { queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor, checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')


async function canReadMeterReportingPeriods ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    if (user.type === RESIDENT) {
        const availableMeterPeriods = await getAvailableResidentMeterReportPeriods(user.id)
        const availableMeterPeriodIds = availableMeterPeriods.map(period => period.id)

        return {
            id_in: availableMeterPeriodIds,
            deletedAt: null,
        }
    }

    return {
        OR: [{
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(user.id),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(user.id),
                ],
            },
        }, {
            organization_is_null: true,
        }],
    }
}

async function canManageMeterReportingPeriods ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isSupport || user.isAdmin) return true

    if (operation === 'create') {
        const orgId = get(originalInput, ['organization', 'connect', 'id'], null)
        const propertyId = get(originalInput, ['property', 'connect', 'id'], null)
        let propertyOrganization

        if (propertyId) {
            const property = await getByCondition('Property', {
                id: propertyId,
                deletedAt: null,
            })

            if (!property) return false

            propertyOrganization = get(property, 'organization', null)
        }

        const organizationId = orgId ?? propertyOrganization

        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageMeters')
    }

    if (operation === 'update') {
        const item = await getByCondition('MeterReportingPeriod', {
            id: itemId,
            deletedAt: null,
        })
        if (!item) return false
        const itemOrganization = get(item, 'organization', null)

        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, itemOrganization, 'canManageMeters')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMeterReportingPeriods,
    canManageMeterReportingPeriods,
}
