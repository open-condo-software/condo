/**
 * Generated by `createschema meter.MeterReportingPeriod 'organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; meter:Relationship:Meter:CASCADE; startingDate:DateTimeUtc; deadline:DateTimeUtc;'`
 */

const get = require('lodash/get')
const isEmpty = require('lodash/isEmpty')
const isNull = require('lodash/isNil')
const uniq = require('lodash/uniq')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getByCondition, find } = require('@open-condo/keystone/schema')

const { getAvailableResidentMeterReportCondition } = require('@condo/domains/meter/utils/serverSchema')
const {
    getEmployedOrRelatedOrganizationsByPermissions,
    checkPermissionsInEmployedOrRelatedOrganizations,
} = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')


async function canReadMeterReportingPeriods ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    if (user.type === RESIDENT) {
        return await getAvailableResidentMeterReportCondition(user.id)
    }

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, [])

    return {
        OR: [
            {
                organization: {
                    id_in: permittedOrganizations,
                },
            },
            { organization_is_null: true },
        ],
    }
}

async function canManageMeterReportingPeriods ({ authentication: { item: user }, originalInput, operation, itemId, itemIds, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isSupport || user.isAdmin) return true

    const isBulkRequest = Array.isArray(originalInput)

    let organizationIds = []

    if (operation === 'create') {
        if (isBulkRequest) {
            return false
        } else {
            let organizationId = get(originalInput, ['organization', 'connect', 'id'], null)
            const propertyId = get(originalInput, ['property', 'connect', 'id'], null)

            if (!organizationId && propertyId) {
                const property = await getByCondition('Property', {
                    id: propertyId,
                    deletedAt: null,
                })
                if (!property) return false

                organizationId = get(property, 'organization', null)
            }

            if (!organizationId) return false

            organizationIds = [organizationId]
        }
    }

    if (operation === 'update') {
        const ids = itemIds || [itemId]
        if (ids.length !== uniq(ids).length) return false

        const items = await find('MeterReportingPeriod', {
            id_in: ids,
            deletedAt: null,
        })
        if (items.length !== ids.length) return false
        if (items.some(item => !item.organization)) return false

        organizationIds = uniq(items.map(item => item.organization))
    }

    if (isEmpty(organizationIds) || organizationIds.some(isNull)) return false
    
    return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organizationIds, 'canManageMeters')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMeterReportingPeriods,
    canManageMeterReportingPeriods,
}
