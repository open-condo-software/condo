// @ts-nocheck
/**
 * Generated by `createschema meter.MeterReportingPeriod 'organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; meter:Relationship:Meter:CASCADE; startingDate:DateTimeUtc; deadline:DateTimeUtc;'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

async function canReadMeterReportingPeriods ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    // TODO(codegen): write canReadMeterReportingPeriods logic for user!
    return false
}

async function canManageMeterReportingPeriods ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create') {
        // TODO(codegen): write canManageMeterReportingPeriods create logic!
        return false
    } else if (operation === 'update') {
        // TODO(codegen): write canManageMeterReportingPeriods update logic!
        return false
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMeterReportingPeriods,
    canManageMeterReportingPeriods,
}
