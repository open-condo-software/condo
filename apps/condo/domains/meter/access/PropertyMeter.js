/**
 * Generated by `createschema meter.PropertyMeter 'number:Text; numberOfTariffs:Integer; installationDate:DateTimeUtc; commissioningDate:DateTimeUtc; verificationDate:DateTimeUtc; nextVerificationDate:DateTimeUtc; controlReadingsDate:DateTimeUtc; sealingDate:DateTimeUtc; isAutomatic:Checkbox; organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; resource:Relationship:MeterResource:CASCADE; meta:Json;'`
 */
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const {
    getEmployedOrRelatedOrganizationsByPermissions,
    canManageEntityWithOrganization,
} = require('@condo/domains/organization/utils/accessSchema')

async function canReadPropertyMeters ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canReadMeters')

    return {
        organization: {
            id_in: permittedOrganizations,
        },
    }
}

async function canManagePropertyMeters (args) {
    const { authentication: { item: user } } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    return await canManageEntityWithOrganization(args, 'canManageMeters', true)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadPropertyMeters,
    canManagePropertyMeters,
}
