/**
 * Generated by `createschema meter.PropertyMeter 'number:Text; numberOfTariffs:Integer; installationDate:DateTimeUtc; commissioningDate:DateTimeUtc; verificationDate:DateTimeUtc; nextVerificationDate:DateTimeUtc; controlReadingsDate:DateTimeUtc; sealingDate:DateTimeUtc; isAutomatic:Checkbox; organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; resource:Relationship:MeterResource:CASCADE; meta:Json;'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getByCondition } = require('@open-condo/keystone/schema')

const { checkPermissionInUserOrganizationOrRelatedOrganization, queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')

async function canReadPropertyMeters ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    return {
        organization: {
            OR: [
                queryOrganizationEmployeeFor(user.id),
                queryOrganizationEmployeeFromRelatedOrganizationFor(user.id),
            ],
        },
    }
}

async function canManagePropertyMeters ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create') {
        const organizationId = get(originalInput, ['organization', 'connect', 'id'])
        if (!organizationId) return false
        const propertyId = get(originalInput, ['property', 'connect', 'id'])
        const property = await getByCondition('Property', {
            id: propertyId,
            deletedAt: null,
        })
        if (!property) return false
        if (organizationId !== get(property, 'organization')) return false

        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageMeters')
    }

    if (operation === 'update' && itemId) {
        const meter = await getByCondition('PropertyMeter', {
            id: itemId,
            deletedAt: null,
        })
        if (!meter) return false
        // if we pass property then we need check that this Property is in the organization in which the Meter is located
        const meterOrganization = get(meter, 'organization')
        const propertyId = get(originalInput, ['property', 'connect', 'id'])
        if (propertyId) {
            const property = await getByCondition('Property', {
                id: propertyId,
                deletedAt: null,
            })
            if (!property) return false
            if (meterOrganization !== get(property, 'organization')) return false
        }

        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, meterOrganization, 'canManageMeters')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadPropertyMeters,
    canManagePropertyMeters,
}
