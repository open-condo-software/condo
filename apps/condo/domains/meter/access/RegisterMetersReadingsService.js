/**
 * Generated by `createservice meter.RegisterMetersReadingsService --type mutations`
 */
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { canExecuteServiceAsB2BAppServiceUser } = require('@condo/domains/miniapp/utils/b2bAppServiceUserAccess')
const { checkPermissionsInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { STAFF, SERVICE } = require('@condo/domains/user/constants/common')

async function canRegisterMetersReadings (args) {
    const { authentication: { item: user }, args: { data: { organization: { id: organizationId } } } } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type === STAFF) {
        return await checkPermissionsInUserOrganizationOrRelatedOrganization(user.id, organizationId, ['canManageMeters', 'canManageMeterReadings'])
    }

    if (user.type === SERVICE) {
        return await canExecuteServiceAsB2BAppServiceUser(args)
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canRegisterMetersReadings,
}
