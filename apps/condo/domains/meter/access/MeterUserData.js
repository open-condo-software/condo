/**
 * Generated by `createschema meter.MeterUserData 'user:Relationship:User:CASCADE; meter:Relationship:Meter:CASCADE; name:Text'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getByCondition } = require('@open-condo/keystone/schema')

const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadMeterUserData ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    if (user.type === RESIDENT) {
        return {
            user: { id: user.id },
        }
    }

    return false
}


async function canManageMeterUserData ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type === RESIDENT) {
        let userId
        if (operation === 'update') {
            if (!itemId) return false
            const customName = await getByCondition('MeterUserData', {
                id: itemId,
                deletedAt: null,
            })

            userId = get(customName, 'user', null)
        }

        if (operation === 'create') {
            userId = get(originalInput, ['user', 'connect', 'id'])
        }

        return userId === user.id
    }

    return false
}



/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canManageMeterUserData,
    canReadMeterUserData,
}
