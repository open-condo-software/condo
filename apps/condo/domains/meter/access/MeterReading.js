/**
 * Generated by `createschema meter.MeterReading 'organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; account?:Relationship:BillingAccount:SET_NULL; billingAccountMeter?:Relationship:BillingAccountMeter:SET_NULL; date:DateTimeUtc; meter:Relationship:Meter:CASCADE; value:Integer; source:Relationship:MeterReadingSource:PROTECT'`
 */
const { getAvailableResidentMetersIds } = require('../utils/serverSchema')
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('../../organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { queryOrganizationEmployeeFromRelatedOrganizationFor, queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const { get } = require('lodash')
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')

async function canReadMeterReadings ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isSupport || item.isAdmin) return {}
        const userId = item.id
        if (item.type === RESIDENT) {
            const availableMeterIds = await getAvailableResidentMetersIds(userId)
            return {
                meter: { id_in: availableMeterIds, deletedAt: null },
                deletedAt: null,
            }
        }
        return {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(userId),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(userId),
                ],
            },
        }
    }
    return false
}

async function canManageMeterReadings ({ authentication: { item, listKey }, originalInput, operation }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        const userId = item.id
        if (operation === 'create') {
            // const inputOrganization = get(originalInput, ['organization', 'connect', 'id'])
            // if (!inputOrganization) return false
            if (item.type === RESIDENT) {
                const meterId = get(originalInput, ['meter', 'connect', 'id'], null)
                const availableMeterIds = await getAvailableResidentMetersIds(userId)
                return availableMeterIds.includes(meterId)
            }
            const inputOrganization = get(originalInput, ['organization', 'connect', 'id'])
            if (!inputOrganization) return false
            return await checkPermissionInUserOrganizationOrRelatedOrganization(userId, inputOrganization, 'canManageMeterReadings')
        }
        return false
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMeterReadings,
    canManageMeterReadings,
}
