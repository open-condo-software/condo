// @ts-nocheck
/**
 * Generated by `createschema meter.MeterReading 'account:Relationship:BillingAccount:SET_NULL; billingAccountMeter:Relationship:BillingAccountMeter:SET_NULL; date:DateTimeUtc; meter:Relationship:Meter:CASCADE; value:Integer;'`
 */

const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')

async function canReadMeterReadings ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.isAdmin) return {}
    return {
        // TODO(codegen): write canReadMeterReadings logic!
    }
}

async function canManageMeterReadings ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.isAdmin) return true
    if (operation === 'create') {
        // TODO(codegen): write canManageMeterReadings create logic!
        return true
    } else if (operation === 'update') {
        // TODO(codegen): write canManageMeterReadings update logic!
        return true
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMeterReadings,
    canManageMeterReadings,
}
