/**
 * Generated by `createschema meter.MeterReading 'organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; account?:Relationship:BillingAccount:SET_NULL; billingAccountMeter?:Relationship:BillingAccountMeter:SET_NULL; date:DateTimeUtc; meter:Relationship:Meter:CASCADE; value:Integer; source:Relationship:MeterReadingSource:PROTECT'`
 */
const { getAvailableResidentMeters } = require('../utils/serverSchema')
const { STAFF } = require('@condo/domains/user/constants/common')
const { ServiceConsumer } = require('@condo/domains/resident/utils/serverSchema')
const { Meter } = require('../utils/serverSchema')
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('../../organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { queryOrganizationEmployeeFromRelatedOrganizationFor, queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const { Resident: ResidentServerUtils } = require('@condo/domains/resident/utils/serverSchema')
const { get } = require('lodash')

async function canReadMeterReadings ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.isAdmin || user.isSupport) return {}

    const userId = user.id
    if (user.type === RESIDENT) {
        const availableMeterIds = await getAvailableResidentMeters(context, userId)
        const idsArray = availableMeterIds.map(obj => obj.id)

        return {
            meter: { id_in: idsArray },
        }
    }

    return {
        organization: {
            OR: [
                queryOrganizationEmployeeFor(userId),
                queryOrganizationEmployeeFromRelatedOrganizationFor(userId),
            ],
        },
    }
}

async function canManageMeterReadings ({ authentication: { item: user }, originalInput, operation, context }) {
    if (!user) return throwAuthenticationError()
    if (user.isAdmin) return true

    const userId = user.id

    if (operation === 'create') {
        const organizationIdFromMeterReading = get(originalInput, ['organization', 'connect', 'id'])
        if (!organizationIdFromMeterReading)
            return false

        if (user.type === STAFF) {
            const organizationPermission =
                await checkPermissionInUserOrganizationOrRelatedOrganization(context, user.id, organizationIdFromMeterReading, 'canManageMeterReadings')
            if (organizationPermission)
                return true
        }

        if (user.type === RESIDENT) {
            const meterId = get(originalInput, ['meter', 'connect', 'id'], null)
            const availableMeterIds = await getAvailableResidentMeters(context, userId)
            const idsArray = availableMeterIds.map(obj => obj.id)

            if (idsArray.includes(meterId)) return true
        }
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMeterReadings,
    canManageMeterReadings,
}
