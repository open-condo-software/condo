/**
 * Generated by `createschema meter.MeterReading 'organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; account?:Relationship:BillingAccount:SET_NULL; billingAccountMeter?:Relationship:BillingAccountMeter:SET_NULL; date:DateTimeUtc; meter:Relationship:Meter:CASCADE; value:Integer; source:Relationship:MeterReadingSource:PROTECT'`
 */
const { get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { getAvailableResidentMeters } = require('@condo/domains/meter/utils/serverSchema')
const {
    b2bAppServiceUserCanReadObjects,
    b2bAppServiceUserCanManageObjects,
    mergeAccessFilters,
} = require('@condo/domains/miniapp/utils/b2bAppServiceUserAccess')
const {
    queryOrganizationEmployeeFromRelatedOrganizationFor,
    queryOrganizationEmployeeFor,
    checkPermissionInUserOrganizationOrRelatedOrganization,
} = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT, SERVICE } = require('@condo/domains/user/constants/common')


async function canReadMeterReadings (args) {
    const { authentication: { item: user } } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    
    if (user.isSupport || user.isAdmin) return {}

    if (user.type === RESIDENT) {
        const availableMeters = await getAvailableResidentMeters(user.id)
        const availableMeterIds = availableMeters.map((meter) => meter.id)

        return {
            meter: { id_in: availableMeterIds, deletedAt: null },
            deletedAt: null,
        }
    }

    const accessFilterForB2BAppServiceUser = await b2bAppServiceUserCanReadObjects(args)
    return mergeAccessFilters(accessFilterForB2BAppServiceUser, {
        organization: {
            OR: [
                queryOrganizationEmployeeFor(user.id, 'canReadMeters'),
                queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadMeters'),
            ],
        },
    })
}

async function canManageMeterReadings (args) {
    const { authentication: { item: user }, originalInput, operation } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type === SERVICE) {
        const hasAccess = await b2bAppServiceUserCanManageObjects(args)
        if (hasAccess) return hasAccess
    }

    if (operation === 'create') {
        const meterId = get(originalInput, ['meter', 'connect', 'id'], null)
        if (!meterId) return false

        if (user.type === RESIDENT) {
            const availableMeters = await getAvailableResidentMeters(user.id)
            return availableMeters.some((meter) => meter.id === meterId && !meter.isAutomatic)
        }

        const meter = await getById('Meter', meterId)
        const meterOrganization = get(meter, 'organization', null)

        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, meterOrganization, 'canManageMeterReadings')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMeterReadings,
    canManageMeterReadings,
}
