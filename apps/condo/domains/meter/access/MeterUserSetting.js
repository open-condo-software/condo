/**
 * Generated by `createschema meter.MeterUserSetting 'user:Relationship:User:CASCADE; meter:Relationship:Meter:CASCADE; name:Text'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { getAvailableResidentMeters } = require('@condo/domains/meter/utils/serverSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadMeterUserSetting ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    if (user.type === RESIDENT) {
        return {
            user: { id: user.id },
        }
    }

    return false
}


async function canManageMeterUserSetting ({ authentication: { item: user }, originalInput, operation, itemId, itemIds }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type === RESIDENT) {
        if (operation === 'update') {
            const ids = itemIds || [itemId]
            if (ids.length !== new Set(ids).size) return false

            const items = await find('MeterUserSetting', {
                id_in: ids,
                deletedAt: null,
            })
            if (items.length !== ids.length || items.some(item => !item.user)) return false

            return items.every(item => item.user === user.id)
        }

        if (operation === 'create') {
            const inputs = Array.isArray(originalInput) ? originalInput : [originalInput]
            const otherUserIds = inputs.map(inp => get(inp, ['user', 'connect', 'id'])).filter(id => id !== user.id)
            if (otherUserIds.length) return false

            const inputMeterIds = inputs.map(inp => get(inp, ['meter', 'connect', 'id']))
            // restrict meter: { create: {} } case
            if (!inputMeterIds.every(Boolean)) return false

            const availableMeters = await getAvailableResidentMeters(user.id)
            const availableMetersIds = new Set(availableMeters.map((meter) => meter.id))

            return inputMeterIds.every(id => availableMetersIds.has(id))
        }
    }

    return false
}



/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canManageMeterUserSetting,
    canReadMeterUserSetting,
}
