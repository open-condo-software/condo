/**
 * Generated by `createschema meter.PropertyMeterReading 'date:DateTimeUtc; meter:Relationship:Meter:CASCADE; organization:Relationship:Organization:CASCADE; value1:Integer; value2:Integer; value3:Integer; value4:Integer; source:Relationship:MeterSource:PROTECT'`
 */

const get = require('lodash/get')
const uniq = require('lodash/uniq')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById, getByCondition, find } = require('@open-condo/keystone/schema')

const {
    getEmployedOrRelatedOrganizationsByPermissions,
    checkPermissionsInEmployedOrRelatedOrganizations,
} = require('@condo/domains/organization/utils/accessSchema')

async function canReadPropertyMeterReadings ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canReadMeters')

    return {
        organization: {
            id_in: permittedOrganizations,
        },
    }
}

async function canManagePropertyMeterReadings ({ authentication: { item: user }, context, itemId, itemIds, originalInput, operation }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isSupport || user.isAdmin) return true

    const isBulkRequest = Array.isArray(originalInput)

    if (operation === 'create') {
        const meterId = get(originalInput, ['meter', 'connect', 'id'], null)
        if (!meterId) return false

        const meter = await getById('PropertyMeter', meterId)
        const meterOrganization = get(meter, 'organization', null)

        if (!meterOrganization) return false

        return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, meterOrganization, 'canManageMeterReadings')
    }


    if (operation === 'update') {
        if (isBulkRequest) {
            if (!itemIds || !Array.isArray(itemIds)) return false
            if (itemIds.length !== uniq(itemIds).length) return false

            const meterReadings = await find('PropertyMeterReading', {
                id_in: itemIds,
                deletedAt: null,
            })
            if (meterReadings.length !== itemIds.length) return false

            const organizationIds = uniq(meterReadings.map(reading => get(reading, 'organization')))
            if (organizationIds.length !== 1) return false

            return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organizationIds, 'canManageMeterReadings')
        } else {
            const meterReading = await getByCondition('PropertyMeterReading', {
                id: itemId,
                deletedAt: null,
            })
            if (!meterReading) return false
    
            const meterReadingOrganization = get(meterReading, 'organization')
            if (!meterReadingOrganization) return false

            return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, meterReadingOrganization, 'canManageMeterReadings')
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadPropertyMeterReadings,
    canManagePropertyMeterReadings,
}
