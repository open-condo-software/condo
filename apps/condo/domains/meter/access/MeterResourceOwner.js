/**
 * Generated by `createschema meter.MeterResourceOwner 'organization:Relationship:Organization:CASCADE; resource:Relationship:MeterResource:CASCADE;'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadMeterResourceOwners ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    if (user.type !== RESIDENT) {
        return true
    }

    const residents = await find('Resident', { user: { id: user.id } })
    if (residents.length > 0) {
        //
    }

    // TODO(codegen): write canReadMeterResourceOwners logic for user! It should allow user with any type to read it's data by related organization
    return false
}

// TODO: allow only admin to create and admin and support to update
async function canManageMeterResourceOwners ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'update') {
        return user.isSupport
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMeterResourceOwners,
    canManageMeterResourceOwners,
}
