/**
 * Generated by `createschema meter.MeterResourceOwner 'organization:Relationship:Organization:CASCADE; resource:Relationship:MeterResource:CASCADE;'`
 */
const { get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const {
    getEmployedOrRelatedOrganizationsByPermissions,
    checkPermissionsInEmployedOrRelatedOrganizations,
} = require('@condo/domains/organization/utils/accessSchema')
const { STAFF } = require('@condo/domains/user/constants/common')

async function canReadMeterResourceOwners ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    if (user.type === STAFF) {
        const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canReadMeters')

        return {
            organization: {
                id_in: permittedOrganizations,
            },
        }
    }

    return false
}

async function canManageMeterResourceOwners ({ authentication: { item: user }, originalInput, operation, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (operation === 'create' && user.type === STAFF) {
        const organizationId = get(originalInput, ['organization', 'connect', 'id'])
        if (!organizationId) return false

        return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organizationId, 'canManageMeters')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMeterResourceOwners,
    canManageMeterResourceOwners,
}
