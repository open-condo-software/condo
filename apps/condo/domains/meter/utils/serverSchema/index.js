/**
 * Generated by `createschema meter.MeterResource 'name:Text;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const get = require('lodash/get')
const uniq = require('lodash/uniq')

const { generateServerUtils } = require('@open-condo/codegen/generate.server.utils')
const { find } = require('@open-condo/keystone/schema')

const { GqlWithKnexLoadList } = require('@condo/domains/common/utils/serverSchema')
const { MeterResource: MeterResourceGQL } = require('@condo/domains/meter/gql')
const { MeterReadingSource: MeterReadingSourceGQL } = require('@condo/domains/meter/gql')
const { Meter: MeterGQL } = require('@condo/domains/meter/gql')
const { MeterReading: MeterReadingGQL } = require('@condo/domains/meter/gql')
const { MeterReadingFilterTemplate: MeterReadingFilterTemplateGQL } = require('@condo/domains/meter/gql')
const { PropertyMeter: PropertyMeterGQL } = require('@condo/domains/meter/gql')
const { PropertyMeterReading: PropertyMeterReadingGQL } = require('@condo/domains/meter/gql')
const { MeterReportingPeriod: MeterReportingPeriodGQL } = require('@condo/domains/meter/gql')
const { MeterResourceOwner: MeterResourceOwnerGQL } = require('@condo/domains/meter/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const MeterResource = generateServerUtils(MeterResourceGQL)
const MeterReadingSource = generateServerUtils(MeterReadingSourceGQL)
const Meter = generateServerUtils(MeterGQL)
const MeterReading = generateServerUtils(MeterReadingGQL)
const MeterReadingFilterTemplate = generateServerUtils(MeterReadingFilterTemplateGQL)
const PropertyMeter = generateServerUtils(PropertyMeterGQL)
const PropertyMeterReading = generateServerUtils(PropertyMeterReadingGQL)
const MeterReportingPeriod = generateServerUtils(MeterReportingPeriodGQL)
const MeterResourceOwner = generateServerUtils(MeterResourceOwnerGQL)
/* AUTOGENERATE MARKER <CONST> */

/**
 * Get all meters, which resident has access to,
 * Mostly used in access, that's why used native keystone utils
 * @param userId - id of user
 * @returns {Promise<Array<unknown>>} list of meters ids which are available for resident
 */
const getAvailableResidentMeters = async (userId) => {
    const userResidents = await find('Resident', {
        user: { id: userId, deletedAt: null },
        property: { deletedAt: null },
        organization: { deletedAt: null },
        deletedAt: null,
    })
    const residentIds = userResidents.map(resident => resident.id)
    const residentsByIds = Object.assign({}, ...userResidents.map(obj => ({ [obj.id]: obj })))

    const resourceOwners = await find('MeterResourceOwner', {
        deletedAt: null,
        addressKey_in: userResidents.map(resident => resident.addressKey),
    })

    const allUserServiceConsumers = await find('ServiceConsumer', {
        resident: { id_in: residentIds, deletedAt: null },
        organization: { deletedAt: null },
        deletedAt: null,
    })

    const orStatements = []

    for (const resourceOwner of resourceOwners) {
        const addressResidents = userResidents.filter(resident => resident.addressKey === resourceOwner.addressKey)
        const userConsumers = allUserServiceConsumers
            .filter(consumer => consumer.organization === resourceOwner.organization
                && addressResidents.find(resident => resident.id === consumer.resident) !== undefined)

        if (userConsumers.length > 0) {
            userConsumers.forEach(consumer => {
                orStatements.push({
                    AND: [
                        { organization: { id: resourceOwner.organization, deletedAt: null } },
                        { resource: { id: resourceOwner.resource } },
                        { accountNumber: consumer.accountNumber },
                        { property: { addressKey: resourceOwner.addressKey, deletedAt: null } },
                        { unitName: get(residentsByIds, [consumer.resident, 'unitName']) },
                        { unitType: get(residentsByIds, [consumer.resident, 'unitType']) },
                    ],
                })
            })
        }
    }

    return await find('Meter', {
        OR: orStatements,
        deletedAt: null,
    })
}

/**
 * Get all meter report periods, which resident has access to,
 * Mostly used in access, that's why used native keystone utils
 * @param userId - id of user
 * @returns {Promise<Array<unknown>>} list of meters ids which are available for resident
 */
const getAvailableResidentMeterReportPeriods = async (userId) => {
    const userResidents = await find('Resident', {
        user: { id: userId, deletedAt: null },
        property: { deletedAt: null },
        organization: { deletedAt: null },
        deletedAt: null,
    })
    const residentIds = userResidents.map(resident => resident.id)
    const residentsByIds = Object.assign({}, ...userResidents.map(obj => ({ [obj.id]: obj })))

    const userConsumers = await find('ServiceConsumer', {
        resident: { id_in: residentIds, deletedAt: null },
        organization: { deletedAt: null },
        deletedAt: null,
    })

    const selectionsByOrganization = uniq(userConsumers.map(serviceConsumer => ({
        organization: { id: get(residentsByIds, [serviceConsumer.resident, 'organization']) },
        property_is_null: true,
    })))

    const selectionsByProperty = uniq(userConsumers.map(serviceConsumer => ({
        organization: { id: get(residentsByIds, [serviceConsumer.resident, 'organization']) },
        property: { id: get(residentsByIds, [serviceConsumer.resident, 'property']) },
    })))

    const orStatement = selectionsByOrganization.map(selection => ({
        AND: [
            selection,
        ],
    }))

    selectionsByProperty.map(selection => orStatement.push({
        AND: [
            selection,
        ],
    }))

    return await find('MeterReportingPeriod', {
        OR: [
            ...orStatement,
            {
                organization_is_null: true,
            },
        ],
        deletedAt: null,
    })
}

const loadMetersForExcelExport = async ({ where = {}, sortBy = ['createdAt_DESC'] }) => {
    const metersLoader = new GqlWithKnexLoadList({
        listKey: 'Meter',
        fields: 'id unitName unitType accountNumber number place',
        singleRelations: [
            ['Property', 'property', 'address'],
            ['MeterResource', 'resource', 'id'],
        ],
        sortBy,
        where,
    })

    return await metersLoader.load()
}


const loadMeterReadingsForExcelExport = async ({ where = {}, sortBy = ['createdAt_DESC'] }) => {
    const meterReadingsLoader = new GqlWithKnexLoadList({
        listKey: 'MeterReading',
        fields: 'id date value1 value2 value3 value4 clientName',
        singleRelations: [
            ['Meter', 'meter', 'id'],
            ['MeterReadingSource', 'source', 'id'],
        ],
        sortBy,
        where,
    })

    return await meterReadingsLoader.load()
}

const loadPropertyMetersForExcelExport = async ({ where = {}, sortBy = ['createdAt_DESC'] }) => {
    const metersLoader = new GqlWithKnexLoadList({
        listKey: 'PropertyMeter',
        fields: 'id accountNumber number',
        singleRelations: [
            ['Property', 'property', 'address'],
            ['MeterResource', 'resource', 'id'],
        ],
        sortBy,
        where,
    })

    return await metersLoader.load()
}

const loadPropertyMeterReadingsForExcelExport = async ({ where = {}, sortBy = ['createdAt_DESC'] }) => {
    const meterReadingsLoader = new GqlWithKnexLoadList({
        listKey: 'PropertyMeterReading',
        fields: 'id date value1 value2 value3 value4',
        singleRelations: [
            ['PropertyMeter', 'meter', 'id'],
            ['MeterReadingSource', 'source', 'id'],
        ],
        sortBy,
        where,
    })

    return await meterReadingsLoader.load()
}

module.exports = {
    MeterResource,
    MeterReadingSource,
    Meter,
    MeterReading,
    getAvailableResidentMeters,
    getAvailableResidentMeterReportPeriods,
    loadMetersForExcelExport,
    loadMeterReadingsForExcelExport,
    loadPropertyMeterReadingsForExcelExport,
    loadPropertyMetersForExcelExport,
    MeterReadingFilterTemplate,
    PropertyMeter,
    PropertyMeterReading,
    MeterReportingPeriod,
    MeterResourceOwner,
/* AUTOGENERATE MARKER <EXPORTS> */
}
