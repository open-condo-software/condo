/**
 * Generated by `createschema meter.MeterReading 'number:Integer; date:DateTimeUtc; account?:Relationship:BillingAccount:SET_NULL; billingAccountMeter?:Relationship:BillingAccountMeter:SET_NULL; meter:Relationship:Meter:CASCADE; property:Relationship:Property:CASCADE; organization:Relationship:Organization:CASCADE; value:Integer; sectionName?:Text; floorName?:Text; unitName?:Text; client?:Relationship:User:SET_NULL; clientName?:Text; clientEmail?:Text; clientPhone?:Text; contact?:Relationship:Contact:SET_NULL; source:Relationship:MeterSource:PROTECT'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { MeterReading as MeterReadingGQL } from '@condo/domains/meter/gql'
import { MeterReading, MeterReadingUpdateInput, QueryAllMeterReadingsArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'organization', 'date', 'meter', 'value1', 'value2', 'value3', 'value4', 'client', 'clientName', 'clientEmail', 'clientPhone', 'contact', 'source']
const RELATIONS = ['meter', 'organization', 'client', 'contact', 'source']

export interface IMeterReadingUIState extends MeterReading {
    id: string
}

function convertToUIState (item: MeterReading): IMeterReadingUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IMeterReadingUIState
}

export interface IMeterReadingFormState {
    id?: string
    organization?: string
    date?: Date
    meter?: string
    value1?: number
    value2?: number
    value3?: number
    value4?: number
    unitName?: string
    contact?: string
    clientName?: string
    clientEmail?: string
    clientPhone?: string
    client?: string
    source?: string
}

function convertToUIFormState (state: IMeterReadingUIState): IMeterReadingFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IMeterReadingFormState
}

function convertToGQLInput (state: IMeterReadingFormState): MeterReadingUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<MeterReading, MeterReadingUpdateInput, IMeterReadingFormState, IMeterReadingUIState, QueryAllMeterReadingsArgs>(MeterReadingGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
