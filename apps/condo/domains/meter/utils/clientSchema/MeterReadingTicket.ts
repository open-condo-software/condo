/**
 * Generated by `createschema meter.MeterReadingTicket 'number:Integer; property:Relationship:Property:CASCADE; organization:Relationship:Organization:CASCADE; sectionName?:Text; floorName?:Text; unitName?:Text; client?:Relationship:User:SET_NULL; clientName?:Text; clientEmail?:Text; clientPhone?:Text; contact?:Relationship:Contact:SET_NULL; source:Relationship:MeterSource:SET_NULL; sourceMeta?:Json;'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { MeterReadingTicket as MeterReadingTicketGQL } from '@condo/domains/meter/gql'
import { MeterReadingTicket, MeterReadingTicketUpdateInput, QueryAllMeterReadingTicketsArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'number', 'property', 'organization', 'sectionName', 'floorName', 'unitName', 'client', 'clientName', 'clientEmail', 'clientPhone', 'contact', 'source', 'sourceMeta']
const RELATIONS = ['property', 'organization', 'client', 'contact', 'source']

export interface IMeterReadingTicketUIState extends MeterReadingTicket {
    id: string
    // TODO(codegen): write IMeterReadingTicketUIState or extends it from
}

function convertToUIState (item: MeterReadingTicket): IMeterReadingTicketUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IMeterReadingTicketUIState
}

export interface IMeterReadingTicketFormState {
    id?: undefined
    // TODO(codegen): write IMeterReadingTicketUIFormState or extends it from
}

function convertToUIFormState (state: IMeterReadingTicketUIState): IMeterReadingTicketFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IMeterReadingTicketFormState
}

function convertToGQLInput (state: IMeterReadingTicketFormState): MeterReadingTicketUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<MeterReadingTicket, MeterReadingTicketUpdateInput, IMeterReadingTicketFormState, IMeterReadingTicketUIState, QueryAllMeterReadingTicketsArgs>(MeterReadingTicketGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
