/**
 * Generated by `createschema meter.MeterReadingFilterTemplate 'name:Text; employee:Relationship:OrganizationEmployee:CASCADE; filters:Json'`
 */

import { pick, get } from 'lodash'
import { MeterReadingFilterTemplate, MeterReadingFilterTemplateUpdateInput, QueryAllMeterReadingFilterTemplatesArgs } from '../../../../schema'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { MeterReadingFilterTemplate as MeterReadingFilterTemplateGQL } from '@condo/domains/meter/gql'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'name', 'employee', 'filters']
const RELATIONS = ['employee']

export interface IMeterReadingFilterTemplateUIState extends MeterReadingFilterTemplate {
    id: string
    // TODO(codegen): write IMeterReadingFilterTemplateUIState or extends it from
}

function convertToUIState (item: MeterReadingFilterTemplate): IMeterReadingFilterTemplateUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IMeterReadingFilterTemplateUIState
}

export interface IMeterReadingFilterTemplateFormState {
    id?: undefined
    // TODO(codegen): write IMeterReadingFilterTemplateUIFormState or extends it from
}

function convertToUIFormState (state: IMeterReadingFilterTemplateUIState): IMeterReadingFilterTemplateFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IMeterReadingFilterTemplateFormState
}

function convertToGQLInput (state: IMeterReadingFilterTemplateFormState): MeterReadingFilterTemplateUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<MeterReadingFilterTemplate, MeterReadingFilterTemplateUpdateInput, IMeterReadingFilterTemplateFormState, IMeterReadingFilterTemplateUIState, QueryAllMeterReadingFilterTemplatesArgs>(MeterReadingFilterTemplateGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
