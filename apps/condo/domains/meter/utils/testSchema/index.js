/**
 * Generated by `createschema meter.MeterResource 'name:Text;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */

const { faker } = require('@faker-js/faker')
const { generateGQLTestUtils, throwIfError } = require('@open-condo/codegen/generate.test.utils')

const { MeterResource: MeterResourceGQL } = require('@condo/domains/meter/gql')
const { MeterReadingSource: MeterReadingSourceGQL } = require('@condo/domains/meter/gql')
const { Meter: MeterGQL } = require('@condo/domains/meter/gql')
const { MeterReading: MeterReadingGQL } = require('@condo/domains/meter/gql')
const { EXPORT_METER_READINGS_QUERY } = require('@condo/domains/meter/gql')
const { MeterReadingFilterTemplate: MeterReadingFilterTemplateGQL } = require('@condo/domains/meter/gql')
const { DEFAULT_ORGANIZATION_TIMEZONE } = require('@condo/domains/organization/constants/common')
const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { DELETE_METER_AND_METER_READINGS_MUTATION } = require('@condo/domains/meter/gql')
const { PropertyMeter: PropertyMeterGQL } = require('@condo/domains/meter/gql')
const { PropertyMeterReading: PropertyMeterReadingGQL } = require('@condo/domains/meter/gql')
const { MeterReportingPeriod: MeterReportingPeriodGQL } = require('@condo/domains/meter/gql')
const { MeterResourceOwner: MeterResourceOwnerGQL } = require('@condo/domains/meter/gql')
const { EXPORT_PROPERTY_METER_READINGS_QUERY } = require('@condo/domains/meter/gql')
const { INTERNAL_DELETE_METER_READINGS_MUTATION } = require('@condo/domains/meter/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const MeterResource = generateGQLTestUtils(MeterResourceGQL)
const MeterReadingSource = generateGQLTestUtils(MeterReadingSourceGQL)
const Meter = generateGQLTestUtils(MeterGQL)
const MeterReading = generateGQLTestUtils(MeterReadingGQL)
const MeterReadingFilterTemplate = generateGQLTestUtils(MeterReadingFilterTemplateGQL)
const PropertyMeter = generateGQLTestUtils(PropertyMeterGQL)
const PropertyMeterReading = generateGQLTestUtils(PropertyMeterReadingGQL)
const MeterReportingPeriod = generateGQLTestUtils(MeterReportingPeriodGQL)
const MeterResourceOwner = generateGQLTestUtils(MeterResourceOwnerGQL)
/* AUTOGENERATE MARKER <CONST> */

const { makeClientWithServiceConsumer } = require('@condo/domains/resident/utils/testSchema')
const { makeLoggedInAdminClient } = require('@open-condo/keystone/test.utils')


async function createTestMeterResource (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MeterResource.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMeterResource (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MeterResource.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestMeterReadingSource (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MeterReadingSource.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMeterReadingSource (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MeterReadingSource.update(client, id, attrs)
    return [obj, attrs]
}

async function makeClientWithResidentAndMeter (extraMeterAttrs = {}) {
    const client = await makeClientWithServiceConsumer()
    const adminClient = await makeLoggedInAdminClient()
    const { property, organization, serviceConsumer, resident } = client
    const [resource] = await MeterResource.getAll(client)
    client.resource = resource
    const [meter, attrs] = await createTestMeter(adminClient, organization, property, resource, {
        accountNumber: serviceConsumer.accountNumber,
        unitName: resident.unitName,
        ...extraMeterAttrs,
    })
    client.meterAttrs = attrs
    client.meter = meter
    return client
}


async function createTestMeter (client, organization, property, resource, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    if (!property || !property.id) throw new Error('no property.id')
    if (!resource || !resource.id) throw new Error('no resource.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const accountNumber = faker.random.alphaNumeric(8)

    const attrs = {
        dv: 1,
        sender,
        number: faker.random.alphaNumeric(5),
        unitName: faker.random.alphaNumeric(5),
        unitType: FLAT_UNIT_TYPE,
        organization: { connect: { id: organization.id } },
        property: { connect: { id: property.id } },
        resource: { connect: { id: resource.id } },
        accountNumber,
        numberOfTariffs: 1,
        ...extraAttrs,
    }
    const obj = await Meter.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMeter (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await Meter.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestMeterReading (client, meter, source, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!meter || !meter.id) throw new Error('no meter.id')
    if (!source || !source.id) throw new Error('no source.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        meter: { connect: { id: meter.id } },
        source: { connect: { id: source.id } },
        date: faker.date.recent(),
        value1: String(faker.datatype.number()),
        ...extraAttrs,
    }
    const obj = await MeterReading.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMeterReading (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MeterReading.update(client, id, attrs)
    return [obj, attrs]
}

async function exportMeterReadingsByTestClient(client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        timeZone: DEFAULT_ORGANIZATION_TIMEZONE,
        ...extraAttrs,
    }
    const { data, errors } = await client.query(EXPORT_METER_READINGS_QUERY, { data: attrs })
    throwIfError(data, errors)
    return [data.result, attrs]
}

async function createTestMeterReadingFilterTemplate (client, employee, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!employee || !employee.id) throw new Error('no employee.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const name = faker.random.alphaNumeric(5)
    const ticketUnitFilter = [faker.random.alphaNumeric(5)]
    const fields = { unitName: ticketUnitFilter }

    const attrs = {
        dv: 1,
        sender,
        employee: { connect: { id: employee.id } },
        name,
        fields,
        ...extraAttrs,
    }

    const obj = await MeterReadingFilterTemplate.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMeterReadingFilterTemplate (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MeterReadingFilterTemplate.update(client, id, attrs)
    return [obj, attrs]
}


async function _internalDeleteMeterAndMeterReadingsByTestClient(client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const { data, errors } = await client.mutate(DELETE_METER_AND_METER_READINGS_MUTATION, { data: attrs })
    throwIfError(data, errors)
    return [data.result, attrs]
}
async function createTestPropertyMeter (client, organization, property, resource, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    if (!property || !property.id) throw new Error('no property.id')
    if (!resource || !resource.id) throw new Error('no resource.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        numberOfTariffs: 1,
        number: faker.random.alphaNumeric(5),
        organization: { connect: { id: organization.id } },
        property: { connect: { id: property.id } },
        resource: { connect: { id: resource.id } },
        ...extraAttrs,
    }
    const obj = await PropertyMeter.create(client, attrs)
    return [obj, attrs]
}

async function updateTestPropertyMeter (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await PropertyMeter.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestPropertyMeterReading (client, meter, source, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!meter || !meter.id) throw new Error('no meter.id')
    if (!source || !source.id) throw new Error('no source.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        date: faker.date.recent(),
        value1: String(faker.datatype.number()),
        meter: { connect: { id: meter.id } },
        source: { connect: { id: source.id } },
        ...extraAttrs,
    }
    const obj = await PropertyMeterReading.create(client, attrs)
    return [obj, attrs]
}

async function updateTestPropertyMeterReading (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await PropertyMeterReading.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestMeterReportingPeriod (client, organization, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization.id) throw new Error('organization.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        organization: { connect: { id: organization.id } },
        ...extraAttrs,
    }
    const obj = await MeterReportingPeriod.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMeterReportingPeriod (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MeterReportingPeriod.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestMeterResourceOwner (client, organization, resource, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    if (!resource || !resource.id) throw new Error('no resource.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        organization: { connect: { id: organization.id } },
        resource: { connect: { id: resource.id } },
        ...extraAttrs,
    }
    const obj = await MeterResourceOwner.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMeterResourceOwner (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MeterResourceOwner.update(client, id, attrs)
    return [obj, attrs]
}


async function _internalDeleteMeterReadingsByTestClient(client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const { data, errors } = await client.mutate(INTERNAL_DELETE_METER_READINGS_MUTATION, { data: attrs })
    throwIfError(data, errors)
    return [data.result, attrs]
}

async function exportPropertyMeterReadingsByTestClient(client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        timeZone: DEFAULT_ORGANIZATION_TIMEZONE,
        ...extraAttrs,
    }
    const { data, errors } = await client.query(EXPORT_PROPERTY_METER_READINGS_QUERY, { data: attrs })
    throwIfError(data, errors)
    return [data.result, attrs]
}
/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    MeterResource, createTestMeterResource, updateTestMeterResource,
    MeterReadingSource, createTestMeterReadingSource, updateTestMeterReadingSource,
    Meter, createTestMeter, updateTestMeter,
    MeterReading, createTestMeterReading, updateTestMeterReading,
    exportMeterReadingsByTestClient,
    MeterReadingFilterTemplate, createTestMeterReadingFilterTemplate, updateTestMeterReadingFilterTemplate,
    makeClientWithResidentAndMeter,
    _internalDeleteMeterAndMeterReadingsByTestClient,
        PropertyMeter, createTestPropertyMeter, updateTestPropertyMeter,
    PropertyMeterReading, createTestPropertyMeterReading, updateTestPropertyMeterReading,
    MeterReportingPeriod, createTestMeterReportingPeriod, updateTestMeterReportingPeriod,
    MeterResourceOwner, createTestMeterResourceOwner, updateTestMeterResourceOwner,
    _internalDeleteMeterReadingsByTestClient,
    exportPropertyMeterReadingsByTestClient,
/* AUTOGENERATE MARKER <EXPORTS> */
}
