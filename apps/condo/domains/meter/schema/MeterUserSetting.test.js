/**
 * Generated by `createschema meter.MeterUserSetting 'user:Relationship:User:CASCADE; meter:Relationship:Meter:CASCADE; name:Text'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, expectValuesOfCommonFields,
    expectToThrowUniqueConstraintViolationError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects,
    expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const { COLD_WATER_METER_RESOURCE_ID } = require('@condo/domains/meter/constants/constants')
const { MeterResource, createTestMeter } = require('@condo/domains/meter/utils/testSchema')
const { MeterUserSetting, createTestMeterUserSetting, updateTestMeterUserSetting } = require('@condo/domains/meter/utils/testSchema')
const { makeResidentWithOwnMeter } = require('@condo/domains/meter/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')


describe('MeterUserSetting', () => {
    let admin, support, user, anonymous, resident
    let organization, property, resource, meter

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        resident = await makeClientWithResidentUser()
        anonymous = await makeClient();

        [organization] = await createTestOrganization(admin);
        [resource] = await MeterResource.getAll(admin, { id: COLD_WATER_METER_RESOURCE_ID })
    })
    beforeEach(async () => {
        [property] = await createTestProperty(admin, organization);
        [meter] = await createTestMeter(admin, organization, property, resource, {})
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestMeterUserSetting(admin, admin.user, meter)
                expectValuesOfCommonFields(obj, attrs, admin)
            })

            test('support can', async () => {
                const [obj, attrs] = await createTestMeterUserSetting(support, support.user, meter)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: support.user.id }))
            })

            test('resident can for own meter', async () => {
                const { residentClient, meter } = await makeResidentWithOwnMeter(admin)
                const [obj, attrs] = await createTestMeterUserSetting(residentClient, residentClient.user, meter)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: residentClient.user.id }))
                expect(obj.user).toEqual(expect.objectContaining({ id: residentClient.user.id }))
                expect(obj.meter).toEqual(expect.objectContaining({ id: meter.id }))
            })

            test('resident cannot for someone else\'s meter', async () => {
                const { residentClient } = await makeResidentWithOwnMeter(admin)
                const [meter] = await createTestMeter(admin, organization, property, resource)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterUserSetting(residentClient, residentClient.user, meter)
                })
            })

            test('user can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterUserSetting(user, user.user, meter)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestMeterUserSetting(anonymous, user.user, meter)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [objCreated] = await createTestMeterUserSetting(admin, admin.user, meter)

                const [obj, attrs] = await updateTestMeterUserSetting(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })


            test('support can', async () => {
                const [objCreated] = await createTestMeterUserSetting(admin, admin.user, meter)

                const [obj, attrs] = await updateTestMeterUserSetting(support, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: support.user.id }))
            })

            test('resident can update own', async () => {
                const { residentClient, meter } = await makeResidentWithOwnMeter(admin)
                const [objCreated] = await createTestMeterUserSetting(residentClient, residentClient.user, meter)

                const [obj, attrs] = await updateTestMeterUserSetting(residentClient, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: residentClient.user.id }))
            })

            test('resident can\'t update someone else\'s', async () => {
                const [objCreated] = await createTestMeterUserSetting(admin, admin.user, meter)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterUserSetting(resident, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestMeterUserSetting(admin, admin.user, meter)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterUserSetting(user, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterUserSetting(admin, admin.user, meter)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestMeterUserSetting(anonymous, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [objCreated] = await createTestMeterUserSetting(admin, admin.user, meter)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterUserSetting.delete(admin, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestMeterUserSetting(admin, admin.user, meter)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterUserSetting.delete(user, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestMeterUserSetting(admin, admin.user, meter)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterUserSetting.delete(anonymous, objCreated.id)
                })
            })

            test('resident can\'t', async () => {
                const [objCreated] = await createTestMeterUserSetting(admin, admin.user, meter)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterUserSetting.delete(resident, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [obj] = await createTestMeterUserSetting(admin, admin.user, meter)

                const objs = await MeterUserSetting.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('user can\'t', async () => {
                await createTestMeterUserSetting(admin, admin.user, meter)

                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await MeterUserSetting.getAll(user, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })

            test('resident can read own', async () => {
                const { residentClient, meter } = await makeResidentWithOwnMeter(admin)
                const [obj] = await createTestMeterUserSetting(residentClient, residentClient.user, meter)
                const objs = await MeterUserSetting.getAll(residentClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('resident can\'t read other resident\'s custom setting', async () => {
                const { residentClient, meter } = await makeResidentWithOwnMeter(admin)
                await createTestMeterUserSetting(residentClient, residentClient.user, meter)
                const resident2 = await makeClientWithResidentUser()

                const objs = await MeterUserSetting.getAll(resident2, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(0)
            })

            test('anonymous can\'t', async () => {
                await createTestMeterUserSetting(admin, admin.user, meter)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await MeterUserSetting.getAll(anonymous, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            await expectToThrowGQLError(
                async () => await createTestMeterUserSetting(admin, admin.user, meter, { dv: 100 }),
                {
                    'code': 'BAD_USER_INPUT',
                    'type': 'DV_VERSION_MISMATCH',
                    'message': 'Wrong value for data version number',
                    'mutation': 'createMeterUserSetting',
                    'variable': ['data', 'dv'],
                },
            )
        })

        test('There can only be one custom setting for one meter and one user', async () => {
            await createTestMeterUserSetting(admin, admin.user, meter)

            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestMeterUserSetting(admin, admin.user, meter)
            }, 'Meter_user_setting_unique_user_meter')
        })
    })
})
