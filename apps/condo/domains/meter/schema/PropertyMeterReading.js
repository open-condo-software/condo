/**
 * Generated by `createschema meter.PropertyMeterReading 'date:DateTimeUtc; meter:Relationship:Meter:CASCADE; organization:Relationship:Organization:CASCADE; value1:Integer; value2:Integer; value3:Integer; value4:Integer; source:Relationship:MeterSource:PROTECT'`
 */

const { Relationship, DateTimeUtc, CalendarDay, Decimal } = require('@keystonejs/fields')
const isEmpty = require('lodash/isEmpty')

const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/meter/access/PropertyMeterReading')
const { addOrganizationFieldPlugin } = require('@condo/domains/organization/schema/plugins/addOrganizationFieldPlugin')


const PropertyMeterReading = new GQLListSchema('PropertyMeterReading', {
    schemaDoc: 'Meter reading taken from a client or billing',
    fields: {

        date: {
            schemaDoc: 'Date when the readings were taken',
            type: DateTimeUtc,
        },

        meter: {
            schemaDoc: 'Meter from which readings were taken',
            type: Relationship,
            ref: 'PropertyMeter',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        value1: {
            schemaDoc: 'If the meter is single-tariff, then only this value will be filled in;' +
                'If multi-tariff, then the value of the first tariff will be in this field',
            type: Decimal,
        },

        value2: {
            schemaDoc: 'If the meter is multi-tariff, then the value of the second tariff is stored here',
            type: Decimal,
        },

        value3: {
            schemaDoc: 'If the meter is multi-tariff, then the value of the second tariff is stored here',
            type: Decimal,
        },

        value4: {
            schemaDoc: 'If the meter is multi-tariff, then the value of the second tariff is stored here',
            type: Decimal,
        },

        source: {
            schemaDoc: 'Meter reading source channel/system. Examples: call, mobile_app, billing, ...',
            type: Relationship,
            ref: 'MeterReadingSource',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

    },
    hooks: {
        resolveInput: async ({ operation, context, resolvedData, existingItem }) => {
            if (operation === 'create' && isEmpty(resolvedData['date'])) {
                resolvedData['date'] = new Date().toISOString()
            }

            return resolvedData
        },
    },
    plugins: [
        uuided(),
        versioned(),
        tracked(),
        softDeleted(),
        dvAndSender(),
        addOrganizationFieldPlugin({ fromField: 'meter', isRequired: true }),
        historical(),
    ],
    access: {
        read: access.canReadPropertyMeterReadings,
        create: access.canManagePropertyMeterReadings,
        update: access.canManagePropertyMeterReadings,
        delete: false,
        auth: true,
    },
})

module.exports = {
    PropertyMeterReading,
}
