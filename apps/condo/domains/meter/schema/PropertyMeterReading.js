/**
 * Generated by `createschema meter.PropertyMeterReading 'date:DateTimeUtc; meter:Relationship:Meter:CASCADE; organization:Relationship:Organization:CASCADE; value1:Integer; value2:Integer; value3:Integer; value4:Integer; source:Relationship:MeterSource:PROTECT'`
 */

const { get, isNil } = require('lodash')
const isEmpty = require('lodash/isEmpty')

const conf = require('@open-condo/config')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById } = require('@open-condo/keystone/schema')
const { extractReqLocale } = require('@open-condo/locales/extractReqLocale')
const { i18n } = require('@open-condo/locales/loader')

const access = require('@condo/domains/meter/access/PropertyMeterReading')
const { PROPERTY_METER_READING_MAX_VALUES_COUNT } = require('@condo/domains/meter/constants/constants')
const { METER_READING_FEW_VALUES, METER_READING_EXTRA_VALUES } = require('@condo/domains/meter/constants/errors')
const { addOrganizationFieldPlugin } = require('@condo/domains/organization/schema/plugins/addOrganizationFieldPlugin')

const ERRORS = {
    METER_READING_FEW_VALUES: (meterNumber, numberOfTariffs, fieldsNames) => ({
        code: BAD_USER_INPUT,
        type: METER_READING_FEW_VALUES,
        message: 'Wrong values count: few values',
        messageForUser: 'api.meterReading.METER_READING_FEW_VALUES',
        messageInterpolation: { meterNumber, numberOfTariffs, fieldsNames },
    }),
    METER_READING_EXTRA_VALUES: (meterNumber, numberOfTariffs, fieldsNames) => ({
        code: BAD_USER_INPUT,
        type: METER_READING_EXTRA_VALUES,
        message: 'Wrong values count: extra values',
        messageForUser: 'api.meterReading.METER_READING_EXTRA_VALUES',
        messageInterpolation: { meterNumber, numberOfTariffs, fieldsNames },
    }),
}

const PropertyMeterReading = new GQLListSchema('PropertyMeterReading', {
    schemaDoc: 'Meter reading taken from a client or billing',
    fields: {

        date: {
            schemaDoc: 'Date when the readings were taken',
            type: 'DateTimeUtc',
        },

        meter: {
            schemaDoc: 'Meter from which readings were taken',
            type: 'Relationship',
            ref: 'PropertyMeter',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        value1: {
            schemaDoc: 'If the meter is single-tariff, then only this value will be filled in;' +
                'If multi-tariff, then the value of the first tariff will be in this field',
            type: 'Decimal',
        },

        value2: {
            schemaDoc: 'If the meter is multi-tariff, then the value of the second tariff is stored here',
            type: 'Decimal',
        },

        value3: {
            schemaDoc: 'If the meter is multi-tariff, then the value of the second tariff is stored here',
            type: 'Decimal',
        },

        value4: {
            schemaDoc: 'If the meter is multi-tariff, then the value of the second tariff is stored here',
            type: 'Decimal',
        },

        source: {
            schemaDoc: 'Meter reading source channel/system. Examples: call, mobile_app, billing, ...',
            type: 'Relationship',
            ref: 'MeterReadingSource',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

    },
    hooks: {
        resolveInput: async ({ operation, context, resolvedData, existingItem }) => {
            if (operation === 'create' && isEmpty(resolvedData['date'])) {
                resolvedData['date'] = new Date().toISOString()
            }

            return resolvedData
        },
        validateInput: async ({ context, resolvedData, existingItem }) => {
            const newItem = { ...existingItem, ...resolvedData }
            const locale = extractReqLocale(context.req) || conf.DEFAULT_LOCALE

            const meterId = get(newItem, 'meter')

            const propertyMeter = await getById('PropertyMeter', meterId)

            const emptyFieldsNames = []
            for (let i = 1; i <= propertyMeter.numberOfTariffs; i++) {
                if (isNil(get(newItem, `value${i}`))) {
                    emptyFieldsNames.push(`value${i}`)
                }
            }
            if (emptyFieldsNames.length > 0) {
                const localizedFieldsNames = emptyFieldsNames.map((fieldName) => i18n(`meter.import.column.${fieldName}`, { locale }))
                throw new GQLError(ERRORS.METER_READING_FEW_VALUES(propertyMeter.number, propertyMeter.numberOfTariffs, localizedFieldsNames.join(', ')), context)
            }

            const extraFieldsNames = []
            for (let i = propertyMeter.numberOfTariffs + 1; i <= PROPERTY_METER_READING_MAX_VALUES_COUNT; i++) {
                const value = get(newItem, `value${i}`)
                if (!isNil(value) && !isEmpty(value)) {
                    extraFieldsNames.push(`value${i}`)
                }
            }
            if (extraFieldsNames.length > 0) {
                const localizedFieldsNames = extraFieldsNames.map((fieldName) => i18n(`meter.import.column.${fieldName}`, { locale }))
                throw new GQLError(ERRORS.METER_READING_EXTRA_VALUES(propertyMeter.number, propertyMeter.numberOfTariffs, localizedFieldsNames.join(', ')), context)
            }
        },
    },
    plugins: [
        uuided(),
        versioned(),
        tracked(),
        softDeleted(),
        dvAndSender(),
        addOrganizationFieldPlugin({ fromField: 'meter', isRequired: true }),
        historical(),
    ],
    access: {
        read: access.canReadPropertyMeterReadings,
        create: access.canManagePropertyMeterReadings,
        update: access.canManagePropertyMeterReadings,
        delete: false,
        auth: true,
    },
})

module.exports = {
    PropertyMeterReading,
}
