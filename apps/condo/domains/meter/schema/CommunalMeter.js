/**
 * Generated by `createschema meter.CommunalMeter 'number:Text; numberOfTariffs:Integer; installationDate:DateTimeUtc; commissioningDate:DateTimeUtc; verificationDate:DateTimeUtc; nextVerificationDate:DateTimeUtc; controlReadingsDate:DateTimeUtc; sealingDate:DateTimeUtc; isAutomatic:Checkbox; organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; resource:Relationship:MeterResource:CASCADE; meta:Json;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')
const { Json } = require('@open-condo/keystone/fields')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/meter/access/CommunalMeter')


const CommunalMeter = new GQLListSchema('CommunalMeter', {
    // TODO(codegen): write doc for the CommunalMeter domain model!
    schemaDoc: 'TODO DOC!',
    fields: {

        number: {
            // TODO(codegen): write doc for CommunalMeter.number field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        numberOfTariffs: {
            // TODO(codegen): write doc for CommunalMeter.numberOfTariffs field!
            schemaDoc: 'TODO DOC!',
            type: Integer,
            isRequired: true,
        },

        installationDate: {
            // TODO(codegen): write doc for CommunalMeter.installationDate field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

        commissioningDate: {
            // TODO(codegen): write doc for CommunalMeter.commissioningDate field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

        verificationDate: {
            // TODO(codegen): write doc for CommunalMeter.verificationDate field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

        nextVerificationDate: {
            // TODO(codegen): write doc for CommunalMeter.nextVerificationDate field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

        controlReadingsDate: {
            // TODO(codegen): write doc for CommunalMeter.controlReadingsDate field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

        sealingDate: {
            // TODO(codegen): write doc for CommunalMeter.sealingDate field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

        isAutomatic: {
            // TODO(codegen): write doc for CommunalMeter.isAutomatic field!
            schemaDoc: 'TODO DOC!',
            type: Checkbox,
            isRequired: true,
        },

        organization: {
            // TODO(codegen): write doc for CommunalMeter.organization field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        property: {
            // TODO(codegen): write doc for CommunalMeter.property field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        resource: {
            // TODO(codegen): write doc for CommunalMeter.resource field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'MeterResource',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        meta: {
            // TODO(codegen): write doc for CommunalMeter.meta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadCommunalMeters,
        create: access.canManageCommunalMeters,
        update: access.canManageCommunalMeters,
        delete: false,
        auth: true,
    },
})

module.exports = {
    CommunalMeter,
}
