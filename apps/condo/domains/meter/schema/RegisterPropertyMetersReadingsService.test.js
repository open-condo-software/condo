/**
 * Generated by `createservice meter.RegisterPropertyMetersReadingsService --type mutations`
 */
const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')
const { map, flatten, set, zip } = require('lodash')

const { GQLErrorCode, GQLInternalErrorTypes } = require('@open-condo/keystone/errors')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObjects } = require('@open-condo/keystone/test.utils')
const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowAuthenticationError,
    expectToThrowAccessDeniedErrorToResult, expectToThrowGQLError, catchErrorFrom,
} = require('@open-condo/keystone/test.utils')

const { UUID_REGEXP } = require('@condo/domains/common/constants/regexps')
const {
    ELECTRICITY_METER_RESOURCE_ID,
    HEAT_SUPPLY_METER_RESOURCE_ID,
    GAS_SUPPLY_METER_RESOURCE_ID,
    OTHER_METER_READING_SOURCE_ID,
    REMOTE_SYSTEM_METER_READING_SOURCE_ID,
} = require('@condo/domains/meter/constants/constants')
const { DATE_FIELD_PATHS } = require('@condo/domains/meter/constants/registerMetersReadingsService')
const { registerPropertyMetersReadingsByTestClient } = require('@condo/domains/meter/utils/testSchema')
const {
    registerMetersReadingsByTestClient,
    Meter,
    MeterReading,
    createTestReadingData,
} = require('@condo/domains/meter/utils/testSchema')
const {
    createTestB2BApp,
    createTestB2BAppContext,
    createTestB2BAppAccessRight, createTestB2BAppAccessRightSet,
} = require('@condo/domains/miniapp/utils/testSchema')
const {
    createTestOrganization,
    makeEmployeeUserClientWithAbilities,
} = require('@condo/domains/organization/utils/testSchema')
const { PARKING_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { createTestPropertyWithMap } = require('@condo/domains/property/utils/testSchema')
const {
    makeClientWithSupportUser,
    makeClientWithResidentUser,
    makeClientWithServiceUser,
} = require('@condo/domains/user/utils/testSchema')


describe('RegisterPropertyMetersReadingsService', () => {
    let adminClient, supportClient, residentClient, anonymousClient

    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        residentClient = await makeClientWithResidentUser()
        anonymousClient = await makeClient()
    })

    describe('access to execution', () => {

        let organization

        beforeAll(async () => {
            [organization] = await createTestOrganization(adminClient)
        })

        test('admin can', async () => {
            const [organization] = await createTestOrganization(adminClient)
            const [property] = await createTestPropertyWithMap(adminClient, organization)
            const readings = [createTestReadingData(property)]
            const [data] = await registerPropertyMetersReadingsByTestClient(adminClient, organization, readings)

            expect(data).toEqual([expect.objectContaining({
                id: expect.stringMatching(UUID_REGEXP),
                meter: expect.objectContaining({
                    id: expect.stringMatching(UUID_REGEXP),
                    property: expect.objectContaining({
                        id: property.id,
                        address: property.address,
                        addressKey: property.addressKey,
                    }),
                    unitType: readings[0].addressInfo.unitType,
                    unitName: readings[0].addressInfo.unitName,
                    accountNumber: readings[0].accountNumber,
                    number: readings[0].meterNumber,
                }),
            })])

            const meters = await Meter.getAll(adminClient, {
                organization: { id: organization.id },
                property: { id: property.id },
            })
            expect(meters).toHaveLength(1)
            expect(meters[0].number).toBe(readings[0].meterNumber)

            const metersReadings = await MeterReading.getAll(adminClient, { meter: { id_in: map(meters, 'id') } })
            expect(metersReadings).toHaveLength(1)
        })

        test('support can', async () => {
            const [organization] = await createTestOrganization(adminClient)
            const [property] = await createTestPropertyWithMap(adminClient, organization)
            const readings = [createTestReadingData(property)]
            const [data] = await registerMetersReadingsByTestClient(supportClient, organization, readings)

            expect(data).toEqual([expect.objectContaining({
                id: expect.stringMatching(UUID_REGEXP),
                meter: expect.objectContaining({
                    id: expect.stringMatching(UUID_REGEXP),
                    property: expect.objectContaining({
                        id: property.id,
                        address: property.address,
                        addressKey: property.addressKey,
                    }),
                    unitType: readings[0].addressInfo.unitType,
                    unitName: readings[0].addressInfo.unitName,
                    accountNumber: readings[0].accountNumber,
                    number: readings[0].meterNumber,
                }),
            })])

            const meters = await Meter.getAll(adminClient, {
                organization: { id: organization.id },
                property: { id: property.id },
            })
            expect(meters).toHaveLength(1)
            expect(meters[0].number).toBe(readings[0].meterNumber)

            const metersReadings = await MeterReading.getAll(adminClient, { meter: { id_in: map(meters, 'id') } })
            expect(metersReadings).toHaveLength(1)
        })

        describe('staff', () => {
            test('with permissions can', async () => {
                const staffClient = await makeEmployeeUserClientWithAbilities({
                    canManageMeters: true,
                    canManageMeterReadings: true,
                })

                const readings = [createTestReadingData(staffClient.property)]
                const [data] = await registerMetersReadingsByTestClient(staffClient, staffClient.organization, readings)

                expect(data).toEqual([expect.objectContaining({
                    id: expect.stringMatching(UUID_REGEXP),
                    meter: expect.objectContaining({
                        id: expect.stringMatching(UUID_REGEXP),
                        property: expect.objectContaining({
                            id: staffClient.property.id,
                            address: staffClient.property.address,
                            addressKey: staffClient.property.addressKey,
                        }),
                        unitType: readings[0].addressInfo.unitType,
                        unitName: readings[0].addressInfo.unitName,
                        accountNumber: readings[0].accountNumber,
                        number: readings[0].meterNumber,
                    }),
                })])

                const meters = await Meter.getAll(adminClient, {
                    organization: { id: staffClient.organization.id },
                    property: { id: staffClient.property.id },
                })
                expect(meters).toHaveLength(1)
                expect(meters[0].number).toBe(readings[0].meterNumber)

                const metersReadings = await MeterReading.getAll(adminClient, { meter: { id_in: map(meters, 'id') } })
                expect(metersReadings).toHaveLength(1)
            })

            test('without permissions can\'t', async () => {
                const staffClient1 = await makeEmployeeUserClientWithAbilities({
                    canManageMeters: false,
                    canManageMeterReadings: false,
                })

                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await registerMetersReadingsByTestClient(staffClient1, staffClient1.organization, [])
                })

                const staffClient2 = await makeEmployeeUserClientWithAbilities({
                    canManageMeters: true,
                    canManageMeterReadings: false,
                })

                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await registerMetersReadingsByTestClient(staffClient2, staffClient2.organization, [])
                })

                const staffClient3 = await makeEmployeeUserClientWithAbilities({
                    canManageMeters: false,
                    canManageMeterReadings: true,
                })

                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await registerMetersReadingsByTestClient(staffClient3, staffClient3.organization, [])
                })
            })
        })

        describe('service user', () => {
            test('with access rights can', async () => {
                const serviceClient = await makeClientWithServiceUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestPropertyWithMap(adminClient, organization)

                const [app] = await createTestB2BApp(adminClient)
                await createTestB2BAppContext(adminClient, app, organization, { status: 'Finished' })
                const [accessRightSet] = await createTestB2BAppAccessRightSet(adminClient, app, {
                    canExecuteRegisterMetersReadings: true,
                    canReadMeters: true,
                    canReadMeterReadings: true,
                    canReadOrganizations: true,
                    canReadProperties: true,
                })
                await createTestB2BAppAccessRight(adminClient, serviceClient.user, app, accessRightSet)

                const readings = [createTestReadingData(property)]
                const [data] = await registerMetersReadingsByTestClient(serviceClient, organization, readings)

                expect(data).toEqual([expect.objectContaining({
                    id: expect.stringMatching(UUID_REGEXP),
                    meter: expect.objectContaining({
                        id: expect.stringMatching(UUID_REGEXP),
                        property: expect.objectContaining({
                            id: property.id,
                            address: property.address,
                            addressKey: property.addressKey,
                        }),
                        unitType: readings[0].addressInfo.unitType,
                        unitName: readings[0].addressInfo.unitName,
                        accountNumber: readings[0].accountNumber,
                        number: readings[0].meterNumber,
                    }),
                })])

                const meters = await Meter.getAll(adminClient, {
                    organization: { id: organization.id },
                    property: { id: property.id },
                })
                expect(meters).toHaveLength(1)
                expect(meters[0].number).toBe(readings[0].meterNumber)

                const metersReadings = await MeterReading.getAll(adminClient, { meter: { id_in: map(meters, 'id') } })
                expect(metersReadings).toHaveLength(1)
            })

            test('without permissions can\'t', async () => {
                const serviceClient = await makeClientWithServiceUser()
                const [organization] = await createTestOrganization(adminClient)

                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await registerMetersReadingsByTestClient(serviceClient, organization, [])
                })
            })
        })

        test('resident can\'t execute', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerMetersReadingsByTestClient(residentClient, organization, [])
            })
        })

        test('anonymous can\'t execute', async () => {
            await expectToThrowAuthenticationError(async () => {
                await registerMetersReadingsByTestClient(anonymousClient, organization, [])
            }, 'result')
        })
    })
})