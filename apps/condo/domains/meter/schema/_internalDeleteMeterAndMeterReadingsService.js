/**
 * Generated by `createservice meter._internalDeleteMeterAndMeterReadingsService --type mutations`
 */

const { isEmpty } = require('lodash')

const { GQLCustomSchema, find, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/meter/access/_internalDeleteMeterAndMeterReadingsService')

const { Meter } = require('../utils/serverSchema')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */

const _internalDeleteMeterAndMeterReadingsService = new GQLCustomSchema('_internalDeleteMeterAndMeterReadingsService', {
    schemaDoc: 'Mutation to delete meters and meter readings for property',
    types: [
        {
            access: true,
            // TODO(codegen): write DeleteMeterAndMeterReadingsService input !
            type: 'input _internalDeleteMeterAndMeterReadingsInput { dv: Int!, sender: JSON!, propertyIds: [String]! }',
        },
    ],
    
    mutations: [
        {
            access: access.can_internalDeleteMeterAndMeterReadings,
            schema: '_internalDeleteMeterAndMeterReadings(data: _internalDeleteMeterAndMeterReadingsInput!): [MeterReading]',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { dv, sender, propertyIds } = data

                const findMeters = async () => {
                    return await find('Meter', {
                        deletedAt: null,
                        property: {
                            id_in: propertyIds,
                        },
                    })
                }

                const meters = await findMeters()
                if (isEmpty(meters)) {
                    console.info('[INFO] Could not found meters by specified property ids')
                    return
                }

                console.info(`[INFO] Following meters will be deleted: [${meters.map(reading => `'${reading.id}'`).join(', ')}]`)

                const deletedMeters = []
                for (const meter of meters) {
                    console.info(`Deleting Meter (id = "${meter.id}")`)
                    const deletedMeter = await Meter.softDelete(context, meter.id, { dv, sender })
                    const foundedMeter = await getById('Meter', deletedMeter.id) // hack for getting meter with all fields
                    deletedMeters.push(foundedMeter)
                }
                console.info('[INFO] Deleted all Meter records with associated MeterReading')

                return deletedMeters

            },
        },
    ],
    
})

module.exports = {
    _internalDeleteMeterAndMeterReadingsService,
}
