/**
 * Generated by `createschema meter.MeterReportingPeriod 'organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; meter:Relationship:Meter:CASCADE; startingDate:DateTimeUtc; deadline:DateTimeUtc;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')
const { Json } = require('@open-condo/keystone/fields')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/meter/access/MeterReportingPeriod')


const MeterReportingPeriod = new GQLListSchema('MeterReportingPeriod', {
    // TODO(codegen): write doc for the MeterReportingPeriod domain model!
    schemaDoc: 'TODO DOC!',
    fields: {

        organization: {
            // TODO(codegen): write doc for MeterReportingPeriod.organization field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        property: {
            // TODO(codegen): write doc for MeterReportingPeriod.property field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        meter: {
            // TODO(codegen): write doc for MeterReportingPeriod.meter field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Meter',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        startingDate: {
            // TODO(codegen): write doc for MeterReportingPeriod.startingDate field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

        deadline: {
            // TODO(codegen): write doc for MeterReportingPeriod.deadline field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMeterReportingPeriods,
        create: access.canManageMeterReportingPeriods,
        update: access.canManageMeterReportingPeriods,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MeterReportingPeriod,
}
