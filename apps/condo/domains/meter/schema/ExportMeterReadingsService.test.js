/**
 * Generated by `createservice meter.ExportMeterReadingsService --type queries`
 */
const isObsConfigured = require('@condo/domains/ticket/utils/testSchema/isObsConfigured')
const { makeLoggedInAdminClient } = require('@core/keystone/test.utils')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { makeClient } = require('@core/keystone/test.utils')
const { createTestMeter, createTestMeterReading, MeterReadingSource, MeterResource } = require('../utils/testSchema')
const { CALL_METER_READING_SOURCE_ID, COLD_WATER_METER_RESOURCE_ID } = require('../constants/constants')
const { makeEmployeeUserClientWithAbilities } = require('@condo/domains/organization/utils/testSchema')
const { DEFAULT_ORGANIZATION_TIMEZONE } = require('@condo/domains/organization/constants/common')
const { EXPORT_METER_READINGS } = require('@condo/domains/meter/gql')


describe('ExportMeterReadingsService', () => {
    test('Employee with "canManageMeters": can get meter readings export from selected organization', async () => {
        if (isObsConfigured()) {
            const client = await makeEmployeeUserClientWithAbilities({
                canManageMeters: true,
            })
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })
            const [source] = await MeterReadingSource.getAll(client, { id: CALL_METER_READING_SOURCE_ID })
            const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})
            await createTestMeterReading(client, meter, client.organization, source)

            const { data: { result: { status, linkToFile } } } = await client.query(EXPORT_METER_READINGS, {
                data: {
                    where: { organization: { id: client.organization.id } },
                    sortBy: 'id_ASC',
                    timeZone: DEFAULT_ORGANIZATION_TIMEZONE,
                },
            })

            expect(status).toBe('ok')
            expect(linkToFile).not.toHaveLength(0)
        }
    })
 
    test('anonymous: cannot get meter readings export', async () => {
        const anonymous = await makeClient()

        const client = await makeEmployeeUserClientWithAbilities({
            canManageMeters: true,
        })
        const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })
        const [source] = await MeterReadingSource.getAll(client, { id: CALL_METER_READING_SOURCE_ID })
        const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})
        await createTestMeterReading(client, meter, client.organization, source)

        const { data: { result }, errors } = await anonymous.query(EXPORT_METER_READINGS, {
            data: { where: { organization: { id: client.organization.id } }, sortBy: 'id_ASC', timeZone: DEFAULT_ORGANIZATION_TIMEZONE },
        })
        expect(result).toBeNull()
        expect(errors).toHaveLength(1)
    })

    test('user: cannot get meter readings export', async () => {
        const user = await makeClientWithNewRegisteredAndLoggedInUser()

        const client = await makeEmployeeUserClientWithAbilities({
            canManageMeters: true,
        })
        const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })
        const [source] = await MeterReadingSource.getAll(client, { id: CALL_METER_READING_SOURCE_ID })
        const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})
        await createTestMeterReading(client, meter, client.organization, source)

        const { data: { result }, errors } = await user.query(EXPORT_METER_READINGS, {
            data: { where: { organization: { id: client.organization.id } }, sortBy: 'id_ASC', timeZone: DEFAULT_ORGANIZATION_TIMEZONE },
        })
        expect(result).toBeNull()
        expect(errors).toHaveLength(1)
    })

    test('admin: can get meter readings export from selected organization', async () => {
        if (isObsConfigured()) {
            const client = await makeEmployeeUserClientWithAbilities({
                canManageMeters: true,
            })
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })
            const [source] = await MeterReadingSource.getAll(client, { id: CALL_METER_READING_SOURCE_ID })
            const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})
            await createTestMeterReading(client, meter, client.organization, source)

            const admin = await makeLoggedInAdminClient()

            const { data: { result: { status, linkToFile } } } = await admin.query(EXPORT_METER_READINGS, {
                data: {
                    where: { organization: { id: client.organization.id } },
                    sortBy: 'id_ASC',
                    timeZone: DEFAULT_ORGANIZATION_TIMEZONE,
                },
            })

            expect(status).toBe('ok')
            expect(linkToFile).not.toHaveLength(0)
        }
    })
})