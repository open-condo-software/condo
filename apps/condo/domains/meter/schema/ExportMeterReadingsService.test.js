/**
 * Generated by `createservice meter.ExportMeterReadingsService --type queries`
 */

const { DEFAULT_ORGANIZATION_TIMEZONE } = require('@condo/domains/organization/constants/common')
const { createTestTicket } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { expectToThrowAuthenticationErrorToObjects } = require('@condo/domains/common/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { exportMeterReadingsByTestClient } = require('@condo/domains/meter/utils/testSchema')
const { EXPORT_METER_READINGS } = require('@condo/domains/meter/gql')


describe('ExportMeterReadingsService', () => {
    test('can get meter readings export from selected organization', async () => {
        const client = await makeClientWithProperty()
        await createTestTicket(client, client.organization, client.property)
        const { data: { result: { status, linkToFile } } }  = await client.query(EXPORT_METER_READINGS, {
            data: { where: { organization: { id: client.organization.id } }, sortBy: 'id_ASC', timeZone: DEFAULT_ORGANIZATION_TIMEZONE },
        })

        expect(status).toBe('ok')
        expect(linkToFile).not.toHaveLength(0)
    })
 
    test('anonymous: execute', async () => {
        const client = await makeClient()
        await expectToThrowAuthenticationErrorToObjects(async () => {
            await exportMeterReadingsByTestClient(client)
        })
    })
 
    test('admin: execute', async () => {
        const admin = await makeLoggedInAdminClient()
        const payload = {}  // TODO(codegen): change the 'user: update ExportMeterReadingsService' payload
        const [data, attrs] = await exportMeterReadingsByTestClient(admin, payload)
        // TODO(codegen): write admin expect logic
        throw new Error('Not implemented yet')
    })
})