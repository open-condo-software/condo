/**
 * Generated by `createschema meter.MeterReadingSource 'organization:Relationship:Organization:CASCADE; type:Select:call,mobile_app,billing; name:Text;'`
 */

const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { makeClient } = require('@core/keystone/test.utils')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestResident } = require('@condo/domains/resident/utils/testSchema')
const { makeClientWithResidentUserAndProperty } = require('@condo/domains/property/utils/testSchema')
const { makeLoggedInAdminClient } = require('@core/keystone/test.utils')
const { updateTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationEmployeeRole } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationWithAccessToAnotherOrganization } = require('@condo/domains/organization/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj } = require('@condo/domains/common/utils/testSchema')
const { expectToThrowAuthenticationErrorToObj } = require('@condo/domains/common/utils/testSchema')
const { makeEmployeeUserClientWithAbilities } = require('@condo/domains/organization/utils/testSchema')
const { MeterResource, Meter, createTestMeter, updateTestMeter } = require('../utils/testSchema')
const { expectToThrowAuthenticationErrorToObjects } = require('@condo/domains/common/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { UUID_RE } = require('@core/keystone/test.utils')
const faker = require('faker')
const { COLD_WATER_METER_RESOURCE_ID } = require('../constants/constants')

describe('Meter', () => {
    describe('Create', () => {
        test('employee with canManageMeters role: can create Meter', async () => {
            const client = await makeEmployeeUserClientWithAbilities({
                canManageMeters: true,
            })
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })
            const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})

            expect(meter.id).toMatch(UUID_RE)
        })

        test('employee without "canManageMeters" role: cannot create Meter', async () => {
            const client = await makeEmployeeUserClientWithAbilities()
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestMeter(client, client.organization, client.property, resource, {})
            })
        })

        test('employee from "from" related organization with "canManageMeters" role: can create Meter', async () => {
            const admin = await makeLoggedInAdminClient()
            const { clientFrom, employeeFrom, organizationFrom, organizationTo, propertyTo } = await createTestOrganizationWithAccessToAnotherOrganization()
            const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                canManageMeters: true,
            })
            await updateTestOrganizationEmployee(admin, employeeFrom.id, {
                role: { connect: { id: role.id } },
            })
            const [resource] = await MeterResource.getAll(clientFrom, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(clientFrom, organizationTo, propertyTo, resource, {})

            expect(meter.id).toMatch(UUID_RE)
        })

        test('employee from "from" related organization without "canManageMeters" role: cannot create Meter', async () => {
            const { clientFrom, organizationTo, propertyTo } = await createTestOrganizationWithAccessToAnotherOrganization()
            const [resource] = await MeterResource.getAll(clientFrom, { id: COLD_WATER_METER_RESOURCE_ID })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestMeter(clientFrom, organizationTo, propertyTo, resource, {})
            })
        })

        test('resident: can create Meter', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const client = await makeClientWithResidentUserAndProperty()
            await createTestResident(adminClient, client.user, client.organization, client.property)
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})

            expect(meter.id).toMatch(UUID_RE)
        })

        test('user: cannot create Meter', async () => {
            const client = await makeClientWithProperty()
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestMeter(client, client.organization, client.property, resource, {})
            })
        })

        test('anonymous: cannot create Meter', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const client = await makeClient()
            const [organization] = await createTestOrganization(adminClient)
            const [property] = await createTestProperty(adminClient, organization)

            const [resource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })

            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestMeter(client, organization, property, resource, {})
            })
        })

        test('admin: can create Meter', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(adminClient)
            const [property] = await createTestProperty(adminClient, organization)
            const [resource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(adminClient, organization, property, resource, {})

            expect(meter.id).toMatch(UUID_RE)
        })
    })
    describe('Update', () => {
        test('employee with canManageMeters role: can update Meter', async () => {
            const client = await makeEmployeeUserClientWithAbilities({
                canManageMeters: true,
            })
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })
            const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})

            const newNumber = faker.random.alphaNumeric(8)
            const [updatedMeter] = await updateTestMeter(client, meter.id, {
                number: newNumber,
            })

            expect(updatedMeter.number).toEqual(newNumber)
        })

        test('employee without "canManageMeters" role: cannot update Meter', async () => {
            const admin = await makeLoggedInAdminClient()
            const client = await makeEmployeeUserClientWithAbilities()
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(admin, client.organization, client.property, resource, {})


            const newNumber = faker.random.alphaNumeric(8)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestMeter(client, meter.id, {
                    number: newNumber,
                })
            })
        })

        test('employee from "from" related organization with "canManageMeters" role: can update Meter', async () => {
            const admin = await makeLoggedInAdminClient()
            const { clientFrom, employeeFrom, organizationFrom, organizationTo, propertyTo } = await createTestOrganizationWithAccessToAnotherOrganization()
            const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                canManageMeters: true,
            })
            await updateTestOrganizationEmployee(admin, employeeFrom.id, {
                role: { connect: { id: role.id } },
            })
            const [resource] = await MeterResource.getAll(clientFrom, { id: COLD_WATER_METER_RESOURCE_ID })
            const [meter] = await createTestMeter(clientFrom, organizationTo, propertyTo, resource, {})

            const newNumber = faker.random.alphaNumeric(8)
            const [updatedMeter] = await updateTestMeter(clientFrom, meter.id, {
                number: newNumber,
            })

            expect(updatedMeter.number).toEqual(newNumber)
        })

        test('employee from "from" related organization without "canManageMeters" role: cannot update Meter', async () => {
            const admin = await makeLoggedInAdminClient()
            const { clientFrom, employeeFrom, organizationFrom, organizationTo, propertyTo } = await createTestOrganizationWithAccessToAnotherOrganization()
            const [resource] = await MeterResource.getAll(clientFrom, { id: COLD_WATER_METER_RESOURCE_ID })
            const [meter] = await createTestMeter(admin, organizationTo, propertyTo, resource, {})

            const newNumber = faker.random.alphaNumeric(8)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestMeter(clientFrom, meter.id, {
                    number: newNumber,
                })
            })
        })

        test('resident: can update own Meter', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const client = await makeClientWithResidentUserAndProperty()
            await createTestResident(adminClient, client.user, client.organization, client.property)
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})

            const newNumber = faker.random.alphaNumeric(8)
            const [updatedMeter] = await updateTestMeter(adminClient, meter.id, {
                number: newNumber,
            })

            expect(updatedMeter.number).toEqual(newNumber)
        })

        test('resident: cannot update not his own Meter', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const client = await makeClientWithResidentUserAndProperty()
            await createTestResident(adminClient, client.user, client.organization, client.property)
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(adminClient, client.organization, client.property, resource, {})

            const newNumber = faker.random.alphaNumeric(8)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestMeter(client, meter.id, {
                    number: newNumber,
                })
            })
        })

        test('user: cannot update Meter', async () => {
            const client = await makeClientWithProperty()
            const adminClient = await makeLoggedInAdminClient()
            const [resource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })
            const [meter] = await createTestMeter(adminClient, client.organization, client.property, resource, {})

            const newNumber = faker.random.alphaNumeric(8)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestMeter(client, meter.id, {
                    number: newNumber,
                })
            })
        })

        test('anonymous: cannot update Meter', async () => {
            const client = await makeClient()
            const adminClient = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(adminClient)
            const [property] = await createTestProperty(adminClient, organization)
            const [resource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })
            const [meter] = await createTestMeter(adminClient, organization, property, resource, {})

            const newNumber = faker.random.alphaNumeric(8)
            await expectToThrowAuthenticationErrorToObj(async () => {
                await updateTestMeter(client, meter.id, {
                    number: newNumber,
                })
            })
        })

        test('admin: can update Meter', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(adminClient)
            const [property] = await createTestProperty(adminClient, organization)
            const [resource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })
            const [meter] = await createTestMeter(adminClient, organization, property, resource, {})

            const newNumber = faker.random.alphaNumeric(8)
            const [updatedMeter] = await updateTestMeter(adminClient, meter.id, {
                number: newNumber,
            })

            expect(updatedMeter.number).toEqual(newNumber)
        })
    })
    describe('Read', () => {
        test('employee: can read Meters', async () => {
            const admin = await makeLoggedInAdminClient()
            const client = await makeEmployeeUserClientWithAbilities()
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(admin, client.organization, client.property, resource, {})

            const meters = await Meter.getAll(client, { id: meter.id })
            expect(meters).toHaveLength(1)
        })

        test('employee from "from" related organization: can read Meters', async () => {
            const admin = await makeLoggedInAdminClient()
            const { clientFrom, organizationTo, propertyTo } = await createTestOrganizationWithAccessToAnotherOrganization()
            const [resource] = await MeterResource.getAll(clientFrom, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(admin, organizationTo, propertyTo, resource, {})

            const meters = await Meter.getAll(clientFrom, { id: meter.id })
            expect(meters).toHaveLength(1)
        })

        test('resident: can read his Meters', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const client = await makeClientWithResidentUserAndProperty()
            await createTestResident(adminClient, client.user, client.organization, client.property)
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})

            const meters = await Meter.getAll(client, { id: meter.id })
            expect(meters).toHaveLength(1)
        })

        test('resident: cannot read not his Meters', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const client = await makeClientWithResidentUserAndProperty()
            await createTestResident(adminClient, client.user, client.organization, client.property)
            const client2 = await makeClientWithResidentUserAndProperty()
            await createTestResident(adminClient, client2.user, client2.organization, client2.property)
            const [resource] = await MeterResource.getAll(client, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})

            const meters = await Meter.getAll(client2, { id: meter.id })
            expect(meters).toHaveLength(0)
        })

        test('user: cannot read Meters', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const client = await makeClientWithNewRegisteredAndLoggedInUser()
            const [organization] = await createTestOrganization(adminClient)
            const [property] = await createTestProperty(adminClient, organization)
            const [resource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(adminClient, organization, property, resource, {})

            const meters = await Meter.getAll(client, { id: meter.id })
            expect(meters).toHaveLength(0)
        })

        test('anonymous: cannot read Meters', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const client = await makeClient()
            const [organization] = await createTestOrganization(adminClient)
            const [property] = await createTestProperty(adminClient, organization)
            const [resource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })

            const [meter] = await createTestMeter(adminClient, organization, property, resource, {})

            await expectToThrowAuthenticationErrorToObjects(async () => {
                await Meter.getAll(client, { id: meter.id })
            })
        })
    })
})
