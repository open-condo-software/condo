/**
 * Generated by `createschema meter.MeterReadingSource 'organization:Relationship:Organization:CASCADE; type:Select:call,mobile_app,billing; name:Text;'`
 */

const { makeEmployeeUserClientWithAbilities } = require('@condo/domains/organization/utils/testSchema')
const { MeterResource } = require('@condo/domains/meter/utils/testSchema')
const { UUID_RE } = require('@core/keystone/test.utils')
const { createTestMeter } = require('@condo/domains/meter/utils/testSchema')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithRegisteredOrganization } = require('@condo/domains/organization/utils/testSchema/Organization')
const { expectToThrowAuthenticationErrorToObjects } = require('@condo/domains/common/utils/testSchema')

const METER_RESOURCE_ID = 'e2bd70ac-0630-11ec-9a03-0242ac130003'

describe('Meter', () => {
    test('employee: can create Meter', async () => {
        const client = await makeEmployeeUserClientWithAbilities({
            canManageMeters: true,
        })

        const [resource] = await MeterResource.getAll(client, { id: METER_RESOURCE_ID })

        const [meter] = await createTestMeter(client, client.organization, client.property, resource, {})

        expect(meter.id).toMatch(UUID_RE)
    })
})
