/**
 * Generated by `createschema meter.PropertyMeter 'number:Text; numberOfTariffs:Integer; installationDate:DateTimeUtc; commissioningDate:DateTimeUtc; verificationDate:DateTimeUtc; nextVerificationDate:DateTimeUtc; controlReadingsDate:DateTimeUtc; sealingDate:DateTimeUtc; isAutomatic:Checkbox; organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; resource:Relationship:MeterResource:CASCADE; meta:Json;'`
 */

const { Text, Relationship, Integer, Checkbox, DateTimeUtc } = require('@keystonejs/fields')
const get = require('lodash/get')

const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, find, getByCondition, getById } = require('@open-condo/keystone/schema')

const { UNIQUE_ALREADY_EXISTS_ERROR } = require('@condo/domains/common/constants/errors')
const access = require('@condo/domains/meter/access/PropertyMeter')
const { AUTOMATIC_METER_NO_MASTER_APP, B2B_APP_NOT_CONNECTED, B2C_APP_NOT_AVAILABLE } = require('@condo/domains/meter/constants/errors')
const { deleteReadingsOfDeletedMeter } = require('@condo/domains/meter/tasks')
const { PropertyMeter: PropertyMeterAPI } = require('@condo/domains/meter/utils/serverSchema/index')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const { RESIDENT } = require('@condo/domains/user/constants/common')


const PropertyMeter = new GQLListSchema('PropertyMeter', {
    schemaDoc: 'Resource meter installed on the entire apartment building',
    fields: {
        organization: ORGANIZATION_OWNED_FIELD,

        number: {
            schemaDoc: 'Number of resource meter, such as "А03 9908"',
            type: Text,
            isRequired: true,
            hooks: {
                validateInput: async ({ context, operation, existingItem, resolvedData, fieldPath, addFieldValidationError }) => {
                    // should be unique inside organization
                    const value = resolvedData[fieldPath]
                    let metersWithSameResourceAndNumberInOrganization
                    if (operation === 'create') {
                        metersWithSameResourceAndNumberInOrganization = await find('PropertyMeter', {
                            number: value,
                            organization: { id: resolvedData.organization },
                            resource: { id: resolvedData.resource },
                            deletedAt: null,
                        })
                    }
                    else if (operation === 'update' && resolvedData.number !== existingItem.number) {
                        const organization = resolvedData.organization ? resolvedData.organization : existingItem.organization
                        const resource = resolvedData.resource ? resolvedData.resource : existingItem.resource

                        metersWithSameResourceAndNumberInOrganization = await PropertyMeterAPI.getAll(context, {
                            number: value,
                            organization: { id: organization },
                            resource: { id: resource },
                            deletedAt: null,
                        })
                    }

                    if (metersWithSameResourceAndNumberInOrganization && metersWithSameResourceAndNumberInOrganization.length > 0) {
                        addFieldValidationError(`${UNIQUE_ALREADY_EXISTS_ERROR}${fieldPath}] Meter with same number and resource exist in current organization`)
                    }
                },
            },
        },

        numberOfTariffs: {
            type: Integer,
            isRequired: true,
        },

        installationDate: {
            schemaDoc: 'Date when the meter was installed in the property',
            type: DateTimeUtc,
        },

        commissioningDate: {
            schemaDoc: 'Date when the meter was commissioned.' +
                'Commissioning - documentation of the meter as a billing meter',
            type: DateTimeUtc,
        },

        verificationDate: {
            schemaDoc: 'The date when the employee came and checked how accurately the meter counts the resource',
            type: DateTimeUtc,
        },

        nextVerificationDate: {
            schemaDoc: 'The date of the next meter verification.' +
                'For example, for a cold water meter - usually 6 years after the verification date',
            type: DateTimeUtc,
        },

        controlReadingsDate: {
            schemaDoc: 'The date when the employee came and took readings from the meter',
            type: DateTimeUtc,
        },

        sealingDate: {
            schemaDoc: 'The date when meter was sealed.' +
                'Sealing is the installation of a unique single-use device (directly a seal and a sealing rope)' +
                'on the metering device, which is designed to control unauthorized access to the equipment.',
            type: DateTimeUtc,
        },

        isAutomatic: {
            schemaDoc: 'Determines, if Meter is automatic or not. False by default. ' + 
            `If set to True - prevents user with type "${RESIDENT}" from creating MeterReading.` + 
                'So MeterReadings only be acquired through external integration or adjusted by organization employee',
            type: Checkbox,
            isRequired: true,
            defaultValue: false,
        },

        property: {
            schemaDoc: 'Link to property which contains unit with this meter',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        resource: {
            schemaDoc: 'Meter resource, such as hot water or electricity',
            type: Relationship,
            ref: 'MeterResource',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        b2bApp: {
            schemaDoc: 'Ref to B2BApp, which is used as a master system for this meter. Specified organization must connect this app.',
            type: Relationship,
            ref: 'B2BApp',
            isRequired: false,
            knexOptions: { isNotNullable: false }, // Relationship only!
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },
        
        meta: {
            schemaDoc: 'Meter metadata. Can be used to store additional settings from external sources, such as billing integrations or mini apps',
            type: Json,
            isRequired: false,
        },

    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization', 'number', 'resource'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'Propertymeter_unique_organization_and_number',
            },
        ],
    },
    hooks: {
        validateInput: async ({ resolvedData, addValidationError, existingItem }) => {
            const newItem = { ...existingItem, ...resolvedData }
            if (newItem.isAutomatic && !newItem.b2bApp) {
                return addValidationError(AUTOMATIC_METER_NO_MASTER_APP)
            }
            if (resolvedData['b2bApp']) {
                const activeContext = await getByCondition('B2BAppContext', {
                    organization: { id: newItem.organization, deletedAt: null },
                    app: { id: newItem.b2bApp, deletedAt: null },
                    deletedAt: null,
                })
                if (!activeContext) {
                    return addValidationError(B2B_APP_NOT_CONNECTED)
                }
            }
            if (resolvedData['b2cApp']) {
                const property = await getById('Property', newItem.property)
                const address = get(property, 'address', null)
                const appProperty = await getByCondition('B2CAppProperty', {
                    deletedAt: null,
                    app: { id: newItem.b2cApp, deletedAt: null },
                    address_i: address,
                })
                if (!appProperty) {
                    return addValidationError(B2C_APP_NOT_AVAILABLE)
                }
            }
        },
        afterChange: async ({ operation, originalInput, updatedItem }) => {
            if (operation === 'update') {
                const deletedMeterAt = get(originalInput, 'deletedAt')

                if (deletedMeterAt) {
                    await deleteReadingsOfDeletedMeter.delay(updatedItem, deletedMeterAt, true)
                }
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadPropertyMeters,
        create: access.canManagePropertyMeters,
        update: access.canManagePropertyMeters,
        delete: false,
        auth: true,
    },
})

module.exports = {
    PropertyMeter,
}
