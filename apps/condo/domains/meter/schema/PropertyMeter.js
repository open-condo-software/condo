/**
 * Generated by `createschema meter.PropertyMeter 'number:Text; numberOfTariffs:Integer; installationDate:DateTimeUtc; commissioningDate:DateTimeUtc; verificationDate:DateTimeUtc; nextVerificationDate:DateTimeUtc; controlReadingsDate:DateTimeUtc; sealingDate:DateTimeUtc; isAutomatic:Checkbox; organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; resource:Relationship:MeterResource:CASCADE; meta:Json;'`
 */

const { Text, Relationship } = require('@keystonejs/fields')
const get = require('lodash/get')

const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, find, getByCondition, getById } = require('@open-condo/keystone/schema')

const { UNIQUE_ALREADY_EXISTS_ERROR } = require('@condo/domains/common/constants/errors')
const access = require('@condo/domains/meter/access/PropertyMeter')
const { AUTOMATIC_METER_NO_MASTER_APP, B2B_APP_NOT_CONNECTED, B2C_APP_NOT_AVAILABLE } = require('@condo/domains/meter/constants/errors')
const { deleteReadingsOfDeletedMeter } = require('@condo/domains/meter/tasks')
const { PropertyMeter: PropertyMeterAPI } = require('@condo/domains/meter/utils/serverSchema/index')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')

const { resource, numberOfTariffs, installationDate, commissioningDate, verificationDate, nextVerificationDate, controlReadingsDate, sealingDate, isAutomatic, b2bApp } = require('./fields')


const PropertyMeter = new GQLListSchema('PropertyMeter', {
    schemaDoc: 'Resource meter installed on the entire apartment building',
    fields: {
        organization: ORGANIZATION_OWNED_FIELD,
        numberOfTariffs,
        installationDate,
        commissioningDate,
        verificationDate,
        nextVerificationDate,
        controlReadingsDate,
        sealingDate,
        isAutomatic,
        resource,
        b2bApp,

        number: {
            schemaDoc: 'Number of resource meter, such as "А03 9908"',
            type: Text,
            isRequired: true,
        },

        property: {
            schemaDoc: 'Link to property which contains this meter',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
        
        meta: {
            schemaDoc: 'Meter metadata. Can be used to store additional settings from external sources, such as billing integrations or mini apps',
            type: Json,
            isRequired: false,
        },

    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization', 'number', 'resource'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'propertymeter_unique_organization_number_resource',
            },
        ],
    },
    hooks: {
        validateInput: async ({ resolvedData, addValidationError, existingItem }) => {
            const newItem = { ...existingItem, ...resolvedData }
            if (newItem.isAutomatic && !newItem.b2bApp) {
                return addValidationError(AUTOMATIC_METER_NO_MASTER_APP)
            }
            if (resolvedData['b2bApp']) {
                const activeContext = await getByCondition('B2BAppContext', {
                    organization: { id: newItem.organization, deletedAt: null },
                    app: { id: newItem.b2bApp, deletedAt: null },
                    deletedAt: null,
                })
                if (!activeContext) {
                    return addValidationError(B2B_APP_NOT_CONNECTED)
                }
            }
            if (resolvedData['b2cApp']) {
                const property = await getById('Property', newItem.property)
                const address = get(property, 'address', null)
                const appProperty = await getByCondition('B2CAppProperty', {
                    deletedAt: null,
                    app: { id: newItem.b2cApp, deletedAt: null },
                    address_i: address,
                })
                if (!appProperty) {
                    return addValidationError(B2C_APP_NOT_AVAILABLE)
                }
            }
        },
        afterChange: async ({ operation, originalInput, updatedItem }) => {
            if (operation === 'update') {
                const deletedMeterAt = get(originalInput, 'deletedAt')

                if (deletedMeterAt) {
                    await deleteReadingsOfDeletedMeter.delay(updatedItem, deletedMeterAt)
                }
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadPropertyMeters,
        create: access.canManagePropertyMeters,
        update: access.canManagePropertyMeters,
        delete: false,
        auth: true,
    },
})

module.exports = {
    PropertyMeter,
}
