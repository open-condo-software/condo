/**
 * Generated by `createservice meter.ExportMeterReadingsService --type queries`
 */
const { Organization } = require('@condo/domains/organization/utils/serverSchema')
const { DEFAULT_ORGANIZATION_TIMEZONE } = require('@condo/domains/organization/constants/common')
const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/meter/access/ExportMeterReadingsService')
const { createExportFile } = require('@condo/domains/common/utils/createExportFile')
const { normalizeTimeZone } = require('@condo/domains/common/utils/timezone')
const { MeterReading } = require('../utils/serverSchema/index')
const dayjs = require('dayjs')
const meterReadingDataMapper = require('../utils/serverSchema/meterReadingDataMapper')
const { EMPTY_DATA_EXPORT_ERROR } = require('@condo/domains/common/constants/errors')

const DATE_FORMAT = 'DD.MM.YYYY HH:mm'

const ExportMeterReadingsService = new GQLCustomSchema('ExportMeterReadingsService', {
    types: [
        {
            access: true,
            type: 'input ExportMeterReadingsInput { where: MeterReadingWhereInput!, sortBy: [SortMeterReadingsBy!], timeZone: String! }',
        },
        {
            access: true,
            type: 'type ExportMeterReadingsOutput { status: String!, linkToFile: String! }',
        },
    ],
    
    queries: [
        {
            access: access.canExportMeterReadings,
            schema: 'exportMeterReadings (data: ExportMeterReadingsInput!): ExportMeterReadingsOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { where, sortBy, timeZone: timeZoneFromUser } = args.data
                const timeZone = normalizeTimeZone(timeZoneFromUser) || DEFAULT_ORGANIZATION_TIMEZONE
                const formatDate = (date) => dayjs(date).tz(timeZone).format(DATE_FORMAT)
                const [organization] = await Organization.getAll(context, {
                    id: where.organization.id,
                })

                const meterReadings = await MeterReading.getAll(context, where, { sortBy })
                if (meterReadings.length === 0) {
                    throw new Error(`${EMPTY_DATA_EXPORT_ERROR}] empty export file`)
                }

                const excelRows = meterReadings.map(meterReading => {
                    const { rows } = meterReadingDataMapper({ row: meterReading })
                    return {
                        date: formatDate(rows.date()),
                        address: rows.address(),
                        unitName: rows.unitName(),
                        resource: rows.resource(),
                        number: rows.number(),
                        place: rows.place(),
                        value1: rows.value1(),
                        value2: rows.value2(),
                        value3: rows.value3(),
                        value4: rows.value4(),
                        clientName: rows.clientName(),
                        source: rows.source(),
                    }
                })

                const linkToFile = await createExportFile({
                    fileName: `tickets_${dayjs().format('DD_MM')}.xlsx`,
                    templatePath: `./domains/meter/templates/${organization.country}/MeterReadingsExportTemplate.xlsx`,
                    replaces: { meter: excelRows },
                    meta: {
                        listkey: 'MeterReading',
                        id: meterReadings[0].id,
                    },
                })
                return { status: 'ok', linkToFile }
            },
        },
    ],
    
})

module.exports = {
    ExportMeterReadingsService,
}
