/**
 * Generated by `createschema meter.MeterImportTask 'status:Select:processing,completed,canceled,error; format:Select:excel,csv; importedRecordsCount:Integer; totalRecordsCount:Integer; file?:File; errorFile?:File; user:Relationship:User:CASCADE;meta?:Json'`
 */

const { Integer, Select, File } = require('@keystonejs/fields')

const { canOnlyServerSideWithoutUserRequest } = require('@open-condo/keystone/access')
const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { IMPORT_FORMAT_VALUES, IMPORT_STATUS_VALUES, EXCEL, PROCESSING, COMPLETED, ERROR } = require('@condo/domains/common/constants/import')
const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { getFileMetaAfterChange } = require('@condo/domains/common/utils/fileAdapter')
const access = require('@condo/domains/meter/access/MeterImportTask')
const { importMeters } = require('@condo/domains/meter/tasks/index')



const METER_IMPORT_TASK_FOLDER_NAME = 'MeterImportTask'
const MeterImportTaskFileAdapter = new FileAdapter(METER_IMPORT_TASK_FOLDER_NAME)

const setFileMetaAfterChange = getFileMetaAfterChange(MeterImportTaskFileAdapter, 'file')

const MeterImportTask = new GQLListSchema('MeterImportTask', {
    schemaDoc: 'Stores requested import job parameters, link to error file (if exists) and information about progress of import job',
    fields: {

        status: {
            schemaDoc: 'Status of import job',
            type: Select,
            options: IMPORT_STATUS_VALUES,
            isRequired: true,
            defaultValue: PROCESSING,
            access: {
                read: true,
                create: canOnlyServerSideWithoutUserRequest,
                update: true,
            },
        },

        format: {
            schemaDoc: 'Requested import file format',
            type: Select,
            options: IMPORT_FORMAT_VALUES,
            isRequired: true,
            defaultValue: EXCEL,
            access: {
                read: true,
                create: true,
                update: canOnlyServerSideWithoutUserRequest,
            },
        },

        importedRecordsCount: {
            schemaDoc: 'How many records at the moment are imported',
            type: Integer,
            isRequired: true,
            defaultValue: 0,
            access: {
                read: true,
                create: canOnlyServerSideWithoutUserRequest,
                update: canOnlyServerSideWithoutUserRequest,
            },
        },

        totalRecordsCount: {
            schemaDoc: 'Total records to import that will be determined at server side in import operation',
            type: Integer,
            isRequired: false,
            defaultValue: 0,
            access: {
                read: true,
                create: canOnlyServerSideWithoutUserRequest,
                update: canOnlyServerSideWithoutUserRequest,
            },
        },

        file: {
            schemaDoc: 'Meta information about file, saved outside of database somewhere. Shape of meta information JSON object is specific to file adapter, used by saving a file.',
            type: File,
            adapter: MeterImportTaskFileAdapter,
            access: {
                read: true,
                create: true,
                update: canOnlyServerSideWithoutUserRequest,
            },
        },

        errorFile: {
            schemaDoc: 'Meta information about error file. Shape of meta information JSON object is specific to file adapter, used by saving a file.',
            type: File,
            adapter: MeterImportTaskFileAdapter,
            access: {
                read: true,
                create: canOnlyServerSideWithoutUserRequest,
                update: canOnlyServerSideWithoutUserRequest,
            },
        },

        user: {
            schemaDoc: 'User that requested this exporting operation. Will be used for read access checks to display all exported tasks somewhere and to display progress indicator of ongoing exporting task for current user',
            type: 'Relationship',
            ref: 'User',
            isRequired: true,
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            knexOptions: { isNotNullable: true },
            access: {
                read: true,
                create: true,
                update: false,
            },
        },

        meta: {
            schemaDoc: 'Stores information about query and ids of exported and failed records',
            type: Json,
            access: {
                read: true,
                create: canOnlyServerSideWithoutUserRequest,
                update: canOnlyServerSideWithoutUserRequest,
            },
        },
    },
    hooks: {
        afterChange: async (args) => {
            const { updatedItem, operation } = args
            await setFileMetaAfterChange(args)
            if (operation === 'create') {
                await importMeters.delay(updatedItem.id)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMeterImportTasks,
        create: access.canManageMeterImportTasks,
        update: access.canManageMeterImportTasks,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MeterImportTask,
}
