/**
 * Generated by `createservice meter.ExportPropertyMeterReadingsService --type queries`
 */

const dayjs = require('dayjs')
const { uniq, get } = require('lodash')

const conf = require('@open-condo/config')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { checkDvAndSender } = require('@open-condo/keystone/plugins/dvAndSender')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')
const { extractReqLocale } = require('@open-condo/locales/extractReqLocale')
const { i18n } = require('@open-condo/locales/loader')

const { DV_VERSION_MISMATCH, WRONG_FORMAT, NOTHING_TO_EXPORT } = require('@condo/domains/common/constants/errors')
const { createExportFile } = require('@condo/domains/common/utils/createExportFile')
const { getHeadersTranslations, EXPORT_TYPE_PROPERTY_METERS } = require('@condo/domains/common/utils/exportToExcel')
const { normalizeTimeZone } = require('@condo/domains/common/utils/timezone')
const access = require('@condo/domains/meter/access/ExportPropertyMeterReadingsService')
const { loadPropertyMeterReadingsForExcelExport, loadPropertyMetersForExcelExport, MeterResource, MeterReadingSource } = require('@condo/domains/meter/utils/serverSchema')
const { DEFAULT_ORGANIZATION_TIMEZONE } = require('@condo/domains/organization/constants/common')


const DATE_FORMAT = 'DD.MM.YYYY HH:mm'

const ERRORS = {
    DV_VERSION_MISMATCH: {
        mutation: 'exportPropertyMeterReadings',
        variable: ['data', 'dv'],
        code: BAD_USER_INPUT,
        type: DV_VERSION_MISMATCH,
        message: 'Wrong value for data version number',
    },
    WRONG_SENDER_FORMAT: {
        mutation: 'exportPropertyMeterReadings',
        variable: ['data', 'sender'],
        code: BAD_USER_INPUT,
        type: WRONG_FORMAT,
        message: 'Invalid format of "sender" field value',
        correctExample: '{ dv: 1, fingerprint: \'example-fingerprint-alphanumeric-value\'}',
    },
    NOTHING_TO_EXPORT: {
        query: 'exportPropertyMeterReadings',
        code: BAD_USER_INPUT,
        type: NOTHING_TO_EXPORT,
        message: 'Could not found property meter readings to export for specified organization',
        messageForUser: 'api.meter.exportMeterReadings.NOTHING_TO_EXPORT',
    },
}

const ExportPropertyMeterReadingsService = new GQLCustomSchema('ExportPropertyMeterReadingsService', {
    types: [
        {
            access: true,
            type: 'input ExportPropertyMeterReadingsInput { dv: Int!, sender: SenderFieldInput!, where: PropertyMeterReadingWhereInput!, sortBy: [SortPropertyMeterReadingsBy!], timeZone: String! }',
        },
        {
            access: true,
            type: 'type ExportPropertyMeterReadingsOutput { status: String!, linkToFile: String! }',
        },
    ],
    
    queries: [
        {
            access: access.canExportPropertyMeterReadings,
            schema: 'exportPropertyMeterReadings (data: ExportPropertyMeterReadingsInput!): ExportPropertyMeterReadingsOutput',
            doc: {
                summary: 'Export of property meters readings. A link to the file is returned',
                errors: ERRORS,
            },
            resolver: async (parent, args, context) => {
                const { data } = args
                const { where, sortBy, timeZone: timeZoneFromUser } = data

                checkDvAndSender(data, ERRORS.DV_VERSION_MISMATCH, ERRORS.WRONG_SENDER_FORMAT, context)

                const timeZone = normalizeTimeZone(timeZoneFromUser) || DEFAULT_ORGANIZATION_TIMEZONE
                const formatDate = (date) => dayjs(date).tz(timeZone).format(DATE_FORMAT)
                const locale = extractReqLocale(context.req) || conf.DEFAULT_LOCALE

                const meterReadings = await loadPropertyMeterReadingsForExcelExport({ where, sortBy })

                if (meterReadings.length === 0) {
                    throw new GQLError(ERRORS.NOTHING_TO_EXPORT, context)
                }

                const meterIds = uniq(meterReadings.map(meterReading => meterReading.meter))
                const meters = await loadPropertyMetersForExcelExport({ where: { id_in: meterIds } })
                const meterResources = await MeterResource.getAll(context, {})
                const meterReadingSources = await MeterReadingSource.getAll(context, {})

                const mappedMeterReadings = meterReadings.map(meterReading => {
                    const source = meterReadingSources.find(meterReadingSource => meterReadingSource.id === meterReading.source)
                    const sourceName = get(source, 'name')
                    const meter = meters.find(meter => meter.id === meterReading.meter)
                    if (!meter) return

                    const resource = meterResources.find(meterResource => meterResource.id === meter.resource)
                    const resourceName = get(resource, 'name')

                    meterReading.source = sourceName
                    meterReading.resource = resourceName
                    meterReading.accountNumber = meter.accountNumber
                    meterReading.number = meter.number
                    meterReading.address = meter.property

                    return meterReading
                }).filter(Boolean)

                const excelRows = mappedMeterReadings.map(meterReading => ({
                    date: formatDate(meterReading.date),
                    address: meterReading.address,
                    resource: meterReading.resource,
                    number: meterReading.number,
                    value1: meterReading.value1,
                    value2: meterReading.value2,
                    value3: meterReading.value3,
                    value4: meterReading.value4,
                    source: meterReading.source,
                }))

                const { url: linkToFile } = await createExportFile({
                    fileName: `propertyMeterReadings_${dayjs().format('DD_MM')}.xlsx`,
                    templatePath: './domains/meter/templates/PropertyMeterReadingsExportTemplate.xlsx',
                    replaces: {
                        meter: excelRows,
                        i18n: {
                            ...getHeadersTranslations(EXPORT_TYPE_PROPERTY_METERS, locale),
                            sheetName: i18n('global.section.meters', { locale }),
                        },
                    },
                    meta: {
                        listkey: 'MeterReading',
                        id: meterReadings[0].id,
                    },
                })

                return { status: 'ok', linkToFile }
            },
        },
    ],
    
})

module.exports = {
    ExportPropertyMeterReadingsService,
    ERRORS,
}
