/**
 * Generated by `createschema meter.MeterStatus 'organization:Relationship:Organization:CASCADE; type:Select:new_or_reopened,processing,canceled,completed,deferred,closed; name:Text;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/meter/access/MeterStatus')
const { Virtual } = require('@keystonejs/fields')
const { LocalizedText } = require('@core/keystone/fields')
const { COMMON_AND_ORGANIZATION_OWNED_FIELD } = require('../../../schema/_common')
const { STATUS_SELECT_COLORS } = require('@condo/domains/meter/constants/style')
const { JSON_SCHEMA_VALIDATION_ERROR } = require('@condo/domains/common/constants/errors')
const get = require('lodash/get')
const Ajv = require('ajv')

const validationSchema = {
    type: 'object',
    properties: {
        primary: { type: 'string' },
        secondary: { type: 'string' },
        additional: { type: 'string' },
    },
    required: ['primary', 'secondary', 'additional'],
    additionalProperties: false,
}

const meterStatusColorsJsonValidator = new Ajv().compile(validationSchema)


const MeterStatus = new GQLListSchema('MeterStatus', {
    schemaDoc: 'Organization specific meter status',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        organization: COMMON_AND_ORGANIZATION_OWNED_FIELD,

        type: {
            schemaDoc: 'Meter status type',
            type: Select,
            options: 'new_or_reopened,processing,canceled,completed,deferred,closed',
            isRequired: true,
        },

        name: {
            schemaDoc: 'Id for readable name of meter status from translations',
            type: LocalizedText,
            isRequired: true,
            template: 'ticket.meter.*.name',
        },

        colors: {
            schemaDoc: 'Status colors, includes primary (font color), secondary (background color), additional (border color), all colors presented in HEX',
            type: Virtual,
            extendGraphQLTypes: ['type MeterStatusColor { primary: String, secondary: String, additional: String }'],
            graphQLReturnType: 'JSON',
            resolver: async (item) => {
                if (!get(item, 'type')) {
                    throw new Error('Error while trying to find meter status color')
                }

                const statusColors = STATUS_SELECT_COLORS[item.type]

                if (!statusColors) {
                    throw new Error('Error while trying to find ticket status color: no ticketStatus colors found')
                }

                if (!meterStatusColorsJsonValidator(statusColors)){
                    throw new Error(`${JSON_SCHEMA_VALIDATION_ERROR}] invalid json structure`)
                }

                return statusColors
            },
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadMeterStatuses,
        create: access.canManageMeterStatuses,
        update: access.canManageMeterStatuses,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MeterStatus,
}
