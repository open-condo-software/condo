/**
 * Generated by `createschema meter.PropertyMeterReading 'date:DateTimeUtc; meter:Relationship:Meter:CASCADE; organization:Relationship:Organization:CASCADE; value1:Integer; value2:Integer; value3:Integer; value4:Integer; source:Relationship:MeterSource:PROTECT'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, expectValuesOfCommonFields } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')


const { COLD_WATER_METER_RESOURCE_ID, CALL_METER_READING_SOURCE_ID } = require('@condo/domains/meter/constants/constants')
const { PropertyMeterReading, createTestPropertyMeterReading, updateTestPropertyMeterReading, createTestPropertyMeter } = require('@condo/domains/meter/utils/testSchema')
const { MeterResource, MeterReadingSource, createTestMeter, createTestMeterReading } = require('@condo/domains/meter/utils/testSchema')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { buildingMapJson } = require('@condo/domains/property/constants/property')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

describe('PropertyMeterReading', () => {
    let admin, resource, source
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient();
        [resource] = await MeterResource.getAll(admin, { id: COLD_WATER_METER_RESOURCE_ID });
        [source] = await MeterReadingSource.getAll(admin, { id: CALL_METER_READING_SOURCE_ID })
    })
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [meter] = await createTestPropertyMeter(admin, organization, property, resource, {})
                const [meterReading, attrs] = await createTestPropertyMeterReading(admin, meter, source)

                expectValuesOfCommonFields(meterReading, attrs, admin)
            })

            test('employee with "canManageMeterReadings" role: can create MeterReadings', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeterReadings: true,
                })

                await createTestOrganizationEmployee(admin, organization, client.user, role)
                const [meter] = await createTestPropertyMeter(client, organization, property, resource, {})

                const [meterReading] = await createTestPropertyMeterReading(client, meter, source)

                expect(meterReading.id).toMatch(UUID_RE)
            })

            test('employee without "canManageMeters" role: cannot create MeterReadings', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeterReadings: false,
                })

                await createTestOrganizationEmployee(admin, organization, client.user, role)
                const [meter] = await createTestPropertyMeter(client, organization, property, resource, {})

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestPropertyMeterReading(client, meter, source)
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestPropertyMeterReading(client, { id: 'id' }, { id: 'id' })
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [meter] = await createTestPropertyMeter(admin, organization, property, resource, {})
                const [meterReading] = await createTestPropertyMeterReading(admin, meter, source)

                const [obj, attrs] = await updateTestPropertyMeterReading(admin, meterReading.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            test('employee with canManageMeterReadings cannot', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeterReadings: true,
                })

                await createTestOrganizationEmployee(admin, organization, client.user, role)
                const [meter] = await createTestPropertyMeter(client, organization, property, resource, {})

                const [meterReading] = await createTestPropertyMeterReading(client, meter, source)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestPropertyMeterReading(client, meterReading.id)
                })
            })

            test('employee without "canManageMeterReadings" role: cannot update MeterReadings', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeterReadings: false,
                })

                await createTestOrganizationEmployee(admin, organization, client.user, role)
                const [meter] = await createTestPropertyMeter(admin, organization, property, resource, {})

                const [meterReading] = await createTestPropertyMeterReading(admin, meter, source)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestPropertyMeterReading(client, meterReading.id)
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestPropertyMeterReading(client, 'id')
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await PropertyMeterReading.delete(admin, 'id')
                })
            })

            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await PropertyMeterReading.delete(client, 'id')
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await PropertyMeterReading.delete(client, 'id')
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [meter] = await createTestPropertyMeter(admin, organization, property, resource, {})
                const [meterReading] = await createTestPropertyMeterReading(admin, meter, source)

                const objs = await PropertyMeterReading.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: meterReading.id,
                    }),
                ]))
            })

            test('employee can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeterReadings: false,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [meter] = await createTestPropertyMeter(admin, organization, property, resource, {})
                const [meterReading] = await createTestPropertyMeterReading(admin, meter, source)

                const objs = await PropertyMeterReading.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: meterReading.id,
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await PropertyMeterReading.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        describe('Fields', () => {
            describe('date', () => {
                test('server side set date if it\'s not passed in resolvedData', async () => {
                    const client = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)
                    const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                        canManageMeterReadings: true,
                    })
                    await createTestOrganizationEmployee(admin, organization, client.user, role)

                    const [meter] = await createTestMeter(client, organization, property, resource, {})

                    const [meterReading] = await createTestMeterReading(client, meter, source, {
                        date: undefined,
                    })

                    expect(meterReading.id).toMatch(UUID_RE)
                    expect(meterReading.date).toMatch(DATETIME_RE)
                })
            })
        })
    })
})
