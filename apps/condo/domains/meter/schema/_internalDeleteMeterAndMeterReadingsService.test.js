/**
 * Generated by `createservice meter._internalDeleteMeterAndMeterReadingsService --type mutations`
 */

const { faker } = require('@faker-js/faker')

const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
} = require('@open-condo/keystone/test.utils')

const {
    COLD_WATER_METER_RESOURCE_ID,
    HOT_WATER_METER_RESOURCE_ID,
    METER_READING_SOURCE_INTERNAL_IMPORT_TYPE,
}
    = require('@condo/domains/meter/constants/constants')
const {
    _internalDeleteMeterAndMeterReadingsByTestClient,
    createTestMeterReading,
    MeterResource,
    createTestMeter,
    createTestMeterReadingSource,
    Meter,
} = require('@condo/domains/meter/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const {
    makeClientWithSupportUser,
    makeClientWithResidentUser,
    makeClientWithStaffUser,
    makeClientWithServiceUser,
} = require('@condo/domains/user/utils/testSchema')


describe('DeleteMeterAndMeterReadingsService', () => {
    let adminClient, supportClient, residentClient, staffClient, serviceClient, anonymous,
        payload, organization, property, resource, source,
        meter

    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        residentClient = await makeClientWithResidentUser()
        anonymous = await makeClient()
        staffClient = await makeClientWithStaffUser()
        serviceClient = await makeClientWithServiceUser()
        const [testOrganization] = await createTestOrganization(adminClient)
        organization = testOrganization
        const [createdProperty] = await createTestProperty(adminClient, organization)
        property = createdProperty
        const [testResource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })
        resource = testResource
        const [testSource] = await createTestMeterReadingSource(adminClient,
            {
                type: METER_READING_SOURCE_INTERNAL_IMPORT_TYPE,
                name: faker.name.suffix(),
            })
        source = testSource
        payload = {
            dv: 1,
            sender: { dv: 1, fingerprint: faker.random.alphaNumeric(8) },
            organizationId: organization.id,
        }
    })

    beforeEach(async () => {
        const [createdMeter] = await createTestMeter(adminClient, organization, property, resource, {})
        meter = createdMeter
        await createTestMeterReading(adminClient, meter, source)
    })

    afterEach(async () => {
        const metersToDelete = await Meter.getAll(adminClient, {
            organization: { id: organization.id },
            deletedAt: null,
        })

        for (const meter of metersToDelete) {
            await Meter.softDelete(adminClient, meter.id)
        }
    })

    describe('Accesses', () => {
        describe('Admin', () => {
            test('Can call mutation', async () => {
                const [result] = await _internalDeleteMeterAndMeterReadingsByTestClient(adminClient, payload)
                expect(result).toEqual(expect.objectContaining({
                    status: 'success',
                    metersToDelete: 1,
                    deletedMeters: 1,
                }))
            })
        })


        describe('Support', () => {
            test('Can call mutation', async () => {
                const [result] = await _internalDeleteMeterAndMeterReadingsByTestClient(supportClient, payload)
                expect(result).toEqual(expect.objectContaining({
                    status: 'success',
                    metersToDelete: 1,
                    deletedMeters: 1,
                }))
            })
        })

        describe('Resident', () => {
            test('Can not call mutation', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await _internalDeleteMeterAndMeterReadingsByTestClient(residentClient, payload)
                })
            })
        })

        describe('Staff', () => {
            test('Can not call mutation', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await _internalDeleteMeterAndMeterReadingsByTestClient(staffClient, payload)
                })
            })
        })

        describe('Service user', () => {
            test('Can not call mutation', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await _internalDeleteMeterAndMeterReadingsByTestClient(serviceClient, payload)
                })
            })
        })

        describe('Anonymous', () => {
            test('Can not call mutation', async () => {
                await expectToThrowAuthenticationErrorToResult(async () => {
                    await _internalDeleteMeterAndMeterReadingsByTestClient(anonymous, payload)
                })
            })
        })
    })

    describe('Basic logic', () => {
        test('Meters for all properties in organization should be deleted if no "propertyIds" and "resourcesIds" specified', async () => {
            const [property2] = await createTestProperty(adminClient, organization)
            const [meter2] = await createTestMeter(adminClient, organization, property2, resource, {})
            await createTestMeterReading(adminClient, meter2, source)

            const [result] = await _internalDeleteMeterAndMeterReadingsByTestClient(adminClient, payload)
            expect(result).toEqual(expect.objectContaining({
                status: 'success',
                metersToDelete: 2,
                deletedMeters: 2,
            }))
            const deletedMeters = await Meter.getAll(adminClient, { id_in: [meter.id, meter2.id] })
            expect(deletedMeters).toHaveLength(0)
        })

        test('Meters should be deleted only in those properties that were specified in "propertyIds"', async () => {
            const [property2] = await createTestProperty(adminClient, organization)
            const [meter2] = await createTestMeter(adminClient, organization, property2, resource, {})
            await createTestMeterReading(adminClient, meter2, source)

            const [result] = await _internalDeleteMeterAndMeterReadingsByTestClient(adminClient, {
                ...payload,
                propertyIds: [property.id],
            })
            expect(result).toEqual(expect.objectContaining({
                status: 'success',
                metersToDelete: 1,
                deletedMeters: 1,
            }))
            const deletedMeters = await Meter.getAll(adminClient, { id_in: [meter.id, meter2.id] })
            expect(deletedMeters).toHaveLength(1)
            expect(deletedMeters[0].id).toBe(meter2.id)
        })

        test('Meters should be deleted only if meter resource is specified in "resourcesIds"', async () => {
            const [resource2] = await MeterResource.getAll(adminClient, { id: HOT_WATER_METER_RESOURCE_ID })
            const [meter2] = await createTestMeter(adminClient, organization, property, resource2, {})
            await createTestMeterReading(adminClient, meter2, source)

            const [result] = await _internalDeleteMeterAndMeterReadingsByTestClient(adminClient, {
                ...payload,
                resourcesIds: [resource.id],
            })
            expect(result).toEqual(expect.objectContaining({
                status: 'success',
                metersToDelete: 1,
                deletedMeters: 1,
            }))
            const meters = await Meter.getAll(adminClient, { id_in: [meter.id, meter2.id] })
            expect(meters).toHaveLength(1)
            expect(meters[0].id).toBe(meter2.id)
        })

        test('Meters should be deleted only if meter resource is specified in "resourcesIds" and property is specified in "propertyIds"', async () => {
            const [resource2] = await MeterResource.getAll(adminClient, { id: HOT_WATER_METER_RESOURCE_ID })
            const [meter2] = await createTestMeter(adminClient, organization, property, resource2, {})
            await createTestMeterReading(adminClient, meter2, source)

            const [property2] = await createTestProperty(adminClient, organization)
            const [meter3] = await createTestMeter(adminClient, organization, property2, resource2, {})
            await createTestMeterReading(adminClient, meter3, source)

            // Be sure that no meters will be deleted if no meters contains passed property and resource
            const [result1] = await _internalDeleteMeterAndMeterReadingsByTestClient(adminClient, {
                ...payload,
                propertyIds: [property2.id],
                resourcesIds: [resource.id],
            })
            expect(result1).toEqual(expect.objectContaining({
                status: 'success',
                metersToDelete: 0,
                deletedMeters: 0,
            }))

            // Be sure that we delete only one meter with both: property and resource
            const [result2] = await _internalDeleteMeterAndMeterReadingsByTestClient(adminClient, {
                ...payload,
                propertyIds: [property.id],
                resourcesIds: [resource2.id],
            })
            expect(result2).toEqual(expect.objectContaining({
                status: 'success',
                metersToDelete: 1,
                deletedMeters: 1,
            }))

            const meters = await Meter.getAll(adminClient, { id_in: [meter.id, meter2.id, meter3.id] })
            expect(meters).toEqual([
                expect.objectContaining({ id: meter.id }),
                expect.objectContaining({ id: meter3.id }),
            ])
        })

        test('Should delete a lot of meters', async () => {
            const createdMetersIds = [meter.id]

            for (let i = 0; i < 200; i++) {
                const [newMeter] = await createTestMeter(adminClient, organization, property, resource, {})
                await createTestMeterReading(adminClient, newMeter, source)
                createdMetersIds.push(newMeter.id)
            }

            const [result] = await _internalDeleteMeterAndMeterReadingsByTestClient(adminClient, payload)
            expect(result.status).toBe('success')
            expect(result).toEqual(expect.objectContaining({
                status: 'success',
                metersToDelete: createdMetersIds.length,
                deletedMeters: createdMetersIds.length,
            }))
            const deletedMeters = await Meter.getAll(adminClient, { id_in: createdMetersIds })
            expect(deletedMeters).toHaveLength(0)
        })
    })
})
