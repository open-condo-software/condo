/**
 * Generated by `createservice meter._internalDeleteMeterAndMeterReadingsService --type mutations`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
} = require('@open-condo/keystone/test.utils')

const { COLD_WATER_METER_RESOURCE_ID } = require('@condo/domains/meter/constants/constants')
const { _internalDeleteMeterAndMeterReadingsByTestClient } = require('@condo/domains/meter/utils/testSchema')
const { MeterResource, createTestMeter } = require('@condo/domains/meter/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithSupportUser, makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')

 
describe('DeleteMeterAndMeterReadingsService', () => {
    let adminClient, supportClient, userClient, anonymous, payload
    let organization, firstProperty, secondProperty, resource
    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        userClient = await makeClientWithResidentUser()
        anonymous = await makeClient()
        const [testOrganization] = await createTestOrganization(adminClient)
        organization = testOrganization
        const [property] = await createTestProperty(adminClient, organization)
        const [anotherProperty] = await createTestProperty(adminClient, organization)
        firstProperty = property
        secondProperty = anotherProperty
        const [testResource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })
        resource = testResource
        payload = { dv: 1, sender: { dv: 1, fingerprint: faker.random.alphaNumeric(8) } }
    })

    describe('admin can:', function () {
        test('delete one', async () => {
            const [meter] = await createTestMeter(adminClient, organization, firstProperty, resource, {})
            expect(meter.id).toMatch(UUID_RE)
            expect(meter.deletedAt).toBeNull()
            const [deletedMeters] = await _internalDeleteMeterAndMeterReadingsByTestClient(adminClient,
                { ...payload, propertyIds: [meter.property.id] }
            )
            expect(deletedMeters[0].deletedAt).not.toBeNull()
        })

        test('delete multiple', async () => {
            const [firstMeter] = await createTestMeter(adminClient, organization, firstProperty, resource, {})
            const [secondMeter] = await createTestMeter(adminClient, organization, secondProperty, resource, {})
            expect(firstMeter.id).toMatch(UUID_RE)
            expect(secondMeter.id).toMatch(UUID_RE)
            expect(firstMeter.deletedAt).toBeNull()
            expect(secondMeter.deletedAt).toBeNull()
            const [deletedMeters] = await _internalDeleteMeterAndMeterReadingsByTestClient(adminClient,
                { ...payload, propertyIds: [firstMeter.property.id, secondMeter.property.id] }
            )
            expect(deletedMeters).toHaveLength(2)
            expect(deletedMeters[0].deletedAt).not.toBeNull()
            expect(deletedMeters[1].deletedAt).not.toBeNull()
        })
    })


    describe('support can:', function () {
        test('delete one', async () => {
            const [meter] = await createTestMeter(adminClient, organization, firstProperty, resource, {})
            expect(meter.id).toMatch(UUID_RE)
            expect(meter.deletedAt).toBeNull()
            const [deletedMeters] = await _internalDeleteMeterAndMeterReadingsByTestClient(supportClient,
                { ...payload, propertyIds: [meter.property.id] }
            )
            expect(deletedMeters[0].deletedAt).not.toBeNull()
        })

        test('delete multiple', async () => {
            const [firstMeter] = await createTestMeter(adminClient, organization, firstProperty, resource, {})
            const [secondMeter] = await createTestMeter(adminClient, organization, secondProperty, resource, {})
            expect(firstMeter.id).toMatch(UUID_RE)
            expect(secondMeter.id).toMatch(UUID_RE)
            expect(firstMeter.deletedAt).toBeNull()
            expect(secondMeter.deletedAt).toBeNull()
            const [deletedMeters] = await _internalDeleteMeterAndMeterReadingsByTestClient(supportClient,
                { ...payload, propertyIds: [firstMeter.property.id, secondMeter.property.id] }
            )
            expect(deletedMeters).toHaveLength(2)
            expect(deletedMeters[0].deletedAt).not.toBeNull()
            expect(deletedMeters[1].deletedAt).not.toBeNull()
        })
    })
 
    test('user cannot delete', async () => {
        const [meter] = await createTestMeter(adminClient, organization, firstProperty, resource, {})
        await expectToThrowAccessDeniedErrorToResult(async () => {
            await _internalDeleteMeterAndMeterReadingsByTestClient(userClient,
                { ...payload, propertyIds: [meter.property.id] }
            )
        })
    })

    test('anonymous cannot delete', async () => {
        const [meter] = await createTestMeter(adminClient, organization, firstProperty, resource, {})
        await expectToThrowAuthenticationErrorToResult(async () => {
            await _internalDeleteMeterAndMeterReadingsByTestClient(anonymous,
                { ...payload, propertyIds: [meter.property.id] }
            )
        })
    })
})