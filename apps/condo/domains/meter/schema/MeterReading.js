/**
 * Generated by `createschema meter.MeterReading 'account?:Relationship:BillingAccount:SET_NULL; billingAccountMeter?:Relationship:BillingAccountMeter:SET_NULL; date:DateTimeUtc; meter:Relationship:Meter:CASCADE; value:Integer;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/meter/access/MeterReading')


const MeterReading = new GQLListSchema('MeterReading', {
    // TODO(codegen): write doc for the MeterReading domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        account: {
            // TODO(codegen): write doc for MeterReading.account field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BillingAccount',
        },

        billingAccountMeter: {
            // TODO(codegen): write doc for MeterReading.billingAccountMeter field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BillingAccountMeter',
        },

        date: {
            // TODO(codegen): write doc for MeterReading.date field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

        meter: {
            // TODO(codegen): write doc for MeterReading.meter field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Meter',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        value: {
            // TODO(codegen): write doc for MeterReading.value field!
            schemaDoc: 'TODO DOC!',
            type: Integer,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadMeterReadings,
        create: access.canManageMeterReadings,
        update: access.canManageMeterReadings,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MeterReading,
}
