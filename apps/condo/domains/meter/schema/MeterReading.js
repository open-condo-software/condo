/**
 * Generated by `createschema meter.MeterReading 'number:Integer; date:DateTimeUtc; account?:Relationship:BillingAccount:SET_NULL; billingAccountMeter?:Relationship:BillingAccountMeter:SET_NULL; meter:Relationship:Meter:CASCADE; property:Relationship:Property:CASCADE; organization:Relationship:Organization:CASCADE; value:Integer; sectionName?:Text; floorName?:Text; unitName?:Text; client?:Relationship:User:SET_NULL; clientName?:Text; clientEmail?:Text; clientPhone?:Text; contact?:Relationship:Contact:SET_NULL; source:Relationship:MeterSource:PROTECT'`
 */

const { Relationship, Integer, DateTimeUtc } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD, CONTACT_FIELD, CLIENT_EMAIL_FIELD, CLIENT_NAME_FIELD, CLIENT_PHONE_FIELD, CLIENT_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/meter/access/MeterReading')
const { Decimal } = require('@keystonejs/fields')
const { DV_UNKNOWN_VERSION_ERROR } = require('@condo/domains/common/constants/errors')
const { hasDvAndSenderFields } = require('@condo/domains/common/utils/validation.utils')
const { getLastBillingAccountMeterReading } = require('../utils/serverSchema')
const { VALUE_LESS_THAN_PREVIOUS_ERROR } = require('@condo/domains/meter/constants/errors')
const { ORGANIZATION_OWNED_FIELD } = require('../../../schema/_common')


const MeterReading = new GQLListSchema('MeterReading', {
    schemaDoc: 'Meter reading taken from a client or billing',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        organization: ORGANIZATION_OWNED_FIELD,

        date: {
            schemaDoc: 'Date when the readings were taken',
            type: DateTimeUtc,
            isRequired: true,
        },

        meter: {
            schemaDoc: 'Meter from which readings were taken',
            type: Relationship,
            ref: 'Meter',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        value1: {
            schemaDoc: 'If the meter is single-tariff, then only this value will be filled in;' +
                'If multi-tariff, then the value of the first tariff will be in this field',
            type: Decimal,
            isRequired: true,
            hooks: {
                validateInput: async ({ context, operation, resolvedData, fieldPath, addFieldValidationError }) => {
                    if (operation === 'create') {
                        const value = resolvedData[fieldPath]
                        const lastMeterReading = await getLastBillingAccountMeterReading(context, resolvedData)

                        if (lastMeterReading && lastMeterReading.value1 > value)
                            addFieldValidationError(`${VALUE_LESS_THAN_PREVIOUS_ERROR}value] Meter reading value less than previous`)
                    }
                },
            },
        },

        value2: {
            schemaDoc: 'If the meter is multi-tariff, then the value of the second tariff is stored here',
            type: Decimal,
            hooks: {
                validateInput: async ({ context, operation, resolvedData, fieldPath, addFieldValidationError }) => {
                    if (operation === 'create') {
                        const value = resolvedData[fieldPath]
                        const lastMeterReading = await getLastBillingAccountMeterReading(context, resolvedData)

                        if (lastMeterReading && lastMeterReading.value2 > value)
                            addFieldValidationError(`${VALUE_LESS_THAN_PREVIOUS_ERROR}value] Meter reading value less than previous`)
                    }
                },
            },
        },

        value3: {
            schemaDoc: 'If the meter is multi-tariff, then the value of the third tariff is stored here',
            type: Decimal,
            hooks: {
                validateInput: async ({ context, operation, resolvedData, fieldPath, addFieldValidationError }) => {
                    if (operation === 'create') {
                        const value = resolvedData[fieldPath]
                        const lastMeterReading = await getLastBillingAccountMeterReading(context, resolvedData)

                        if (lastMeterReading && lastMeterReading.value3 > value)
                            addFieldValidationError(`${VALUE_LESS_THAN_PREVIOUS_ERROR}value] Meter reading value less than previous`)
                    }
                },
            },
        },

        value4: {
            schemaDoc: 'If the meter is multi-tariff, then the value of the fourth tariff is stored here',
            type: Decimal,
            hooks: {
                validateInput: async ({ context, operation, resolvedData, fieldPath, addFieldValidationError }) => {
                    if (operation === 'create') {
                        const value = resolvedData[fieldPath]
                        const lastMeterReading = await getLastBillingAccountMeterReading(context, resolvedData)

                        if (lastMeterReading && lastMeterReading.value4 > value)
                            addFieldValidationError(`${VALUE_LESS_THAN_PREVIOUS_ERROR}value] Meter reading value less than previous`)
                    }
                },
            },
        },

        client: CLIENT_FIELD,
        contact: CONTACT_FIELD,
        clientName: CLIENT_NAME_FIELD,
        clientEmail:  CLIENT_EMAIL_FIELD,
        clientPhone: CLIENT_PHONE_FIELD,

        source: {
            schemaDoc: 'Meter reading source channel/system. Examples: call, mobile_app, billing, ...',
            type: Relationship,
            ref: 'MeterReadingSource',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

    },
    hooks: {
        validateInput: ({ resolvedData, context, addValidationError }) => {
            if (!hasDvAndSenderFields(resolvedData, context, addValidationError)) return
            const { dv } = resolvedData
            if (dv === 1) {
                // NOTE: version 1 specific translations. Don't optimize this logic
            } else {
                return addValidationError(`${DV_UNKNOWN_VERSION_ERROR}dv] Unknown \`dv\``)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadMeterReadings,
        create: access.canManageMeterReadings,
        update: access.canManageMeterReadings,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MeterReading,
}
