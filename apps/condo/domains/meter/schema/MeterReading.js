/**
 * Generated by `createschema meter.MeterReading 'number:Integer; account?:Relationship:BillingAccount:SET_NULL; date:DateTimeUtc; meter:Relationship:Meter:CASCADE; property:Relationship:Property:CASCADE; organization:Relationship:Organization:CASCADE; sectionName?:Text; floorName?:Text; unitName?:Text; value:Integer; client?:Relationship:User:SET_NULL; clientName?:Text; clientEmail?:Text; clientPhone?:Text; contact?:Relationship:Contact:SET_NULL; source:Relationship:MeterSource:PROTECT; sourceMeta?:Json; '`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/meter/access/MeterReading')
const { meterReadingChangeDisplayNameResolversForSingleRelations } = require('../utils/serverSchema/MeterReadingChange')
const { createMeterReadingChange } = require('../utils/serverSchema/MeterReadingChange')
const { storeChangesIfUpdated } = require('@condo/domains/common/utils/serverSchema/changeTrackable')
const { buildSetOfFieldsToTrackFrom } = require('@condo/domains/common/utils/serverSchema/changeTrackable')
const { OMIT_METER_READING_CHANGE_TRACKABLE_FIELDS } = require('../utils/serverSchema/MeterReadingChange')
const { PHONE_WRONG_FORMAT_ERROR } = require('@condo/domains/common/constants/errors')
const { normalizePhone } = require('@condo/domains/common/utils/phone')
const { ORGANIZATION_OWNED_FIELD } = require('../../../schema/_common')
const { AutoIncrementInteger } = require('@core/keystone/fields')


const MeterReading = new GQLListSchema('MeterReading', {
    schemaDoc: 'Meter reading taken from a client',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        number: {
            schemaDoc: 'Autogenerated meter reading human readable ID',
            type: AutoIncrementInteger,
            isRequired: true,
        },

        account: {
            schemaDoc: 'Client\'s billing account',
            type: Relationship,
            ref: 'BillingAccount',
            isRequired: true,
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        date: {
            schemaDoc: 'Date when the readings were taken',
            type: DateTimeUtc,
            isRequired: true,
        },

        meter: {
            schemaDoc: 'Meter from which readings were taken',
            type: Relationship,
            ref: 'Meter',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        organization: ORGANIZATION_OWNED_FIELD,

        property: {
            schemaDoc: 'Property in which the meter is installed',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        sectionName: {
            schemaDoc: 'Section name/number of an apartment building (property). You need to take from Property.map',
            type: Text,
        },

        floorName: {
            schemaDoc: 'Floor of an apartment building (property). You need to take from Property.map',
            type: Text,
        },

        unitName: {
            schemaDoc: 'Flat number / door number of an apartment building (property). You need to take from Property.map',
            type: Text,
        },

        value: {
            schemaDoc: 'Numerical value on the meter at the time of taking readings',
            type: Integer,
            isRequired: true,
        },

        client: {
            schemaDoc: 'Inhabitant/customer/person who has a problem or want to improve/order something. Not null if we have a registered client',
            type: Relationship,
            ref: 'User',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        contact: {
            schemaDoc: 'Contact, that reported issue, described in this meter reading',
            type: Relationship,
            ref: 'Contact',
            isRequired: false,
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        clientName: {
            schemaDoc: 'Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it',
            type: Text,
        },

        clientEmail: {
            schemaDoc: 'Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it',
            type: Text,
        },

        clientPhone: {
            schemaDoc: 'Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it',
            type: Text,
            hooks: {
                resolveInput: async ({ resolvedData }) => {
                    if (!resolvedData['clientPhone']) return resolvedData['clientPhone']
                    const newValue = normalizePhone(resolvedData['clientPhone'])
                    return newValue || resolvedData['clientPhone']
                },
                validateInput: async ({ resolvedData, addFieldValidationError }) => {
                    const newValue = normalizePhone(resolvedData['clientPhone'])
                    if (resolvedData['clientPhone'] && newValue !== resolvedData['clientPhone']) {
                        addFieldValidationError(`${PHONE_WRONG_FORMAT_ERROR}phone] invalid format`)
                    }
                },
            },
        },

        source: {
            schemaDoc: 'Meter reading source channel/system. Examples: call, mobile_app, billing, ...',
            type: Relationship,
            ref: 'MeterSource',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

        sourceMeta: {
            schemaDoc: 'In the case of remote system sync, you can store some extra analytics.',
            type: Json,
        },
    },
    hooks: {
        afterChange: async (...args) => {
            await storeChangesIfUpdated(
                buildSetOfFieldsToTrackFrom(MeterReading.schema, { except: OMIT_METER_READING_CHANGE_TRACKABLE_FIELDS }),
                createMeterReadingChange,
                meterReadingChangeDisplayNameResolversForSingleRelations,
            )(...args)
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadMeterReadings,
        create: access.canManageMeterReadings,
        update: access.canManageMeterReadings,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MeterReading,
}
