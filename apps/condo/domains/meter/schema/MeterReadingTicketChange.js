/**
 * Generated by `createschema meter.MeterReadingTicketChange 'meterReadingTicket:Relationship:MeterReadingTicket:CASCADE;'`
 */

import { MeterReadingTicket } from '@condo/domains/meter/schema'
const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/meter/access/MeterReadingTicketChange')
const { meterReadingTicketChangeDisplayNameResolversForSingleRelations } = require('@condo/domains/meter/utils/serverSchema/MeterReadingChange')
const { OMIT_METER_READING_TICKET_CHANGE_TRACKABLE_FIELDS } = require('../utils/serverSchema/MeterReadingTicketChange')
const { buildSetOfFieldsToTrackFrom } = require('../../common/utils/serverSchema/changeTrackable')
const { generateChangeTrackableFieldsFrom } = require('../../common/utils/serverSchema/changeTrackable')


const MeterReadingTicketChange = new GQLListSchema('MeterReadingTicketChange', {
    // TODO(codegen): write doc for the MeterReadingTicketChange domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        meterReadingTicket: {
            // TODO(codegen): write doc for MeterReadingTicketChange.meterReadingTicket field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'MeterReadingTicket',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
        ...generateChangeTrackableFieldsFrom(
            buildSetOfFieldsToTrackFrom(MeterReadingTicket.schema, { except: OMIT_METER_READING_TICKET_CHANGE_TRACKABLE_FIELDS }),
            meterReadingTicketChangeDisplayNameResolversForSingleRelations,
        ),
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadMeterReadingTicketChanges,
        create: access.canManageMeterReadingTicketChanges,
        update: access.canManageMeterReadingTicketChanges,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MeterReadingTicketChange,
}
