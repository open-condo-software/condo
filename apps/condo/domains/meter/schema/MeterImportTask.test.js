/**
 * Generated by `createschema meter.MeterImportTask 'status:Select:processing,completed,canceled,error; format:Select:excel,csv; importedRecordsCount:Integer; totalRecordsCount:Integer; file?:File; errorFile?:File; user:Relationship:User:CASCADE;meta?:Json'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor, expectValuesOfCommonFields } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects, catchErrorFrom,
} = require('@open-condo/keystone/test.utils')

const { IMPORT_FORMAT_VALUES, IMPORT_STATUS_VALUES, EXCEL, CSV, PROCESSING, COMPLETED, ERROR, CANCELLED } = require('@condo/domains/common/constants/import')
const { MeterImportTask, createTestMeterImportTask, updateTestMeterImportTask } = require('@condo/domains/meter/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

describe('MeterImportTask', () => {
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                // 1) prepare data
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()

                // 2) action
                const [obj, attrs] = await createTestMeterImportTask(admin, userClient.user)

                // 3) check
                expectValuesOfCommonFields(obj, attrs, admin)
            })

            test('support can\'t', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const client = await makeClientWithSupportUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterImportTask(client, userClient.user)
                })
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [obj, attrs] = await createTestMeterImportTask(client, client.user)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('user can\'t create status: COMPLETED', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterImportTask(client, client.user, {
                        status: COMPLETED,
                    })
                })
            })

            test('user can\'t create status: ERROR', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterImportTask(client, client.user, {
                        status: COMPLETED,
                    })
                })
            })

            test('user can\'t create status: CANCELLED', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterImportTask(client, client.user, {
                        status: COMPLETED,
                    })
                })
            })

            test('user can\'t create importedRecordsCount not empty', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterImportTask(client, client.user, {
                        importedRecordsCount: 5,
                    })
                })
            })

            test('user can\'t create totalRecordsCount not empty', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterImportTask(client, client.user, {
                        totalRecordsCount: 5,
                    })
                })
            })

            test('user can\'t create meta not empty', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterImportTask(client, client.user, {
                        meta: {},
                    })
                })
            })

            test('anonymous can\'t', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestMeterImportTask(client, userClient.user)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, userClient.user)

                const [obj, attrs] = await updateTestMeterImportTask(admin, objCreated.id, {
                    status: CANCELLED,
                })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            test('support can\'t', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, userClient.user)

                const client = await makeClientWithSupportUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterImportTask(client, objCreated.id, {
                        status: CANCELLED,
                    })
                })
            })

            test('user can', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, userClient.user)

                const [obj, attrs] = await updateTestMeterImportTask(userClient, objCreated.id, {
                    status: CANCELLED,
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
            })

            test('user can\' change status: COMPLETED', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, userClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterImportTask(userClient, objCreated.id, {
                        status: COMPLETED,
                    })
                })
            })

            test('user can\' change status: ERROR', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, userClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterImportTask(userClient, objCreated.id, {
                        status: COMPLETED,
                    })
                })
            })

            test('user can\' change format', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, userClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterImportTask(userClient, objCreated.id, {
                        format: CSV,
                    })
                })
            })

            test('user can\' change importedRecordsCount', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, userClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterImportTask(userClient, objCreated.id, {
                        importedRecordsCount: 5,
                    })
                })
            })

            test('user can\' change totalRecordsCount', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, userClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterImportTask(userClient, objCreated.id, {
                        totalRecordsCount: 5,
                    })
                })
            })

            test('user can\' change meta', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, userClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterImportTask(userClient, objCreated.id, {
                        meta: {},
                    })
                })
            })

            test('anonymous can\'t', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, userClient.user)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestMeterImportTask(client, objCreated.id, {
                        status: CANCELLED,
                    })
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, admin.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterImportTask.delete(admin, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, admin.user)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterImportTask.delete(client, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterImportTask(admin, admin.user)

                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterImportTask.delete(client, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj] = await createTestMeterImportTask(admin, admin.user)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [obj1] = await createTestMeterImportTask(client, client.user)

                const objs = await MeterImportTask.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(2)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                    expect.objectContaining({
                        id: obj1.id,
                    }),
                ]))
            })

            test('user can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj] = await createTestMeterImportTask(admin, admin.user)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [obj1] = await createTestMeterImportTask(client, client.user)

                const objs = await MeterImportTask.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj1.id,
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestMeterImportTask(admin, admin.user)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await MeterImportTask.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })
})
