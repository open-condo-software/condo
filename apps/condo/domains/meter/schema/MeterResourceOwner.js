/**
 * Generated by `createschema meter.MeterResourceOwner 'organization:Relationship:Organization:CASCADE; resource:Relationship:MeterResource:CASCADE;'`
 */
const userAccess = require('@open-condo/keystone/access')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { UNIT_TYPE_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/meter/access/MeterResourceOwner')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')

const CREATE_AND_READ_ACCESS = {
    create: true,
    read: true,
    update: false,
}

const MeterResourceOwner = new GQLListSchema('MeterResourceOwner', {
    schemaDoc: 'Determines whether the meter belongs to the organization for a specific apartment',
    fields: {
        organization: {
            ...ORGANIZATION_OWNED_FIELD,
            access: {
                create: true,
                read: true,
                update: userAccess.userIsAdminOrIsSupport,
            },
        },
        resource: {
            schemaDoc: 'Meter resource that organization is owned by',
            type: 'Relationship',
            ref: 'MeterResource',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            access: CREATE_AND_READ_ACCESS,
        },
        address: {
            schemaDoc: 'Property address which contains apartment with this meter',
            type: 'Text',
            isRequired: true,
            access: CREATE_AND_READ_ACCESS,
        },
        unitName: {
            schemaDoc: 'Unit with this meter resource type',
            type: 'Text',
            isRequired: true,
            access: CREATE_AND_READ_ACCESS,
        },
        unitType: { ...UNIT_TYPE_FIELD, access: CREATE_AND_READ_ACCESS },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization', 'resource', 'address', 'unitName', 'unitType'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'meterResourceOwner_unique_organization_resource_address_unitName_and_unitType',
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMeterResourceOwners,
        create: access.canManageMeterResourceOwners,
        update: access.canManageMeterResourceOwners,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MeterResourceOwner,
}
