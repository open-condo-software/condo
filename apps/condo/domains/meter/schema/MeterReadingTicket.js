/**
 * Generated by `createschema meter.MeterReadingTicket 'number:Integer; property:Relationship:Property:CASCADE; organization:Relationship:Organization:CASCADE; sectionName?:Text; floorName?:Text; unitName?:Text; client?:Relationship:User:SET_NULL; clientName?:Text; clientEmail?:Text; clientPhone?:Text; contact?:Relationship:Contact:SET_NULL; source:Relationship:MeterSource:SET_NULL; sourceMeta?:Json;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/meter/access/MeterReadingTicket')


const MeterReadingTicket = new GQLListSchema('MeterReadingTicket', {
    // TODO(codegen): write doc for the MeterReadingTicket domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        number: {
            // TODO(codegen): write doc for MeterReadingTicket.number field!
            schemaDoc: 'TODO DOC!',
            type: Integer,
            isRequired: true,
        },

        property: {
            // TODO(codegen): write doc for MeterReadingTicket.property field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        organization: {
            // TODO(codegen): write doc for MeterReadingTicket.organization field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        sectionName: {
            // TODO(codegen): write doc for MeterReadingTicket.sectionName field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        floorName: {
            // TODO(codegen): write doc for MeterReadingTicket.floorName field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        unitName: {
            // TODO(codegen): write doc for MeterReadingTicket.unitName field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        client: {
            // TODO(codegen): write doc for MeterReadingTicket.client field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'User',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        clientName: {
            // TODO(codegen): write doc for MeterReadingTicket.clientName field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        clientEmail: {
            // TODO(codegen): write doc for MeterReadingTicket.clientEmail field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        clientPhone: {
            // TODO(codegen): write doc for MeterReadingTicket.clientPhone field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        contact: {
            // TODO(codegen): write doc for MeterReadingTicket.contact field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Contact',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        source: {
            // TODO(codegen): write doc for MeterReadingTicket.source field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'MeterSource',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.SET_NULL' },
        },

        sourceMeta: {
            // TODO(codegen): write doc for MeterReadingTicket.sourceMeta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadMeterReadingTickets,
        create: access.canManageMeterReadingTickets,
        update: access.canManageMeterReadingTickets,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MeterReadingTicket,
}
