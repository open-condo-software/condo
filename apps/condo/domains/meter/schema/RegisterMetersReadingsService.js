/**
 * Generated by `createservice meter.RegisterMetersReadingsService --type mutations`
 */
const dayjs = require('dayjs')
const customParseFormat = require('dayjs/plugin/customParseFormat')
const utc = require('dayjs/plugin/utc')
const get = require('lodash/get')
const isEmpty = require('lodash/isEmpty')
const isNil = require('lodash/isNil')
const uniq = require('lodash/uniq')

const conf = require('@open-condo/config')
const { GQLError } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, find, getById } = require('@open-condo/keystone/schema')
const { extractReqLocale } = require('@open-condo/locales/extractReqLocale')

const { PropertyResolver } = require('@condo/domains/billing/schema/resolvers')
const access = require('@condo/domains/meter/access/RegisterMetersReadingsService')
const { OTHER_METER_READING_SOURCE_ID } = require('@condo/domains/meter/constants/constants')
const { READINGS_LIMIT } = require('@condo/domains/meter/constants/registerMetersReadingsService')
const { shouldUpdateMeter, meterReadingAsResult } = require('@condo/domains/meter/utils/meter.utils')
const { Meter, MeterReading } = require('@condo/domains/meter/utils/serverSchema')
const {
    ERRORS,
    getValues, getMeterDates, getMeterFields, getReadingFields,
    getFieldsToUpdate,
    getValuesList,
    getMeterReadingsForSearchingDuplicates,
    createMeterReadingKey,
    tryToISO,
    getDateStrValidationError,
    transformToPlainObject,
    getAddressesKeys, getResolvedAddresses,
    getSortedValues,
} = require('@condo/domains/meter/utils/serverSchema/registerHelpers')
dayjs.extend(customParseFormat)
dayjs.extend(utc)


const RegisterMetersReadingsService = new GQLCustomSchema('RegisterMetersReadingsService', {
    types: [
        {
            access: true,
            type: 'input RegisterMetersReadingsMeterMetaInput {' +
                'numberOfTariffs: Int,' +
                'place: String,' +
                'verificationDate: String,' +
                'nextVerificationDate: String,' +
                'installationDate: String,' +
                'commissioningDate: String,' +
                'sealingDate: String,' +
                'controlReadingsDate: String,' +
                'isAutomatic: Boolean,' +
                'archiveDate: String' +
                '}',
        },
        {
            access: true,
            type: 'input RegisterMetersReadingsReadingAddressInfoInput { unitType: String, unitName: String, globalId: String }',
        },
        {
            access: true,
            type: 'input RegisterMetersReadingsReadingInput {' +
                'address: String!,' +
                'addressInfo: RegisterMetersReadingsReadingAddressInfoInput!,' +
                'accountNumber: String!,' +
                'meterNumber: String!,' +
                'meterResource: MeterResourceWhereUniqueInput!,' +
                'date: String!,' +
                // TODO(YEgorLu): DOMA-10497 allow values only in decimal with dot
                'value1: String!,' +
                'value2: String,' +
                'value3: String,' +
                'value4: String,' +
                'meterMeta: RegisterMetersReadingsMeterMetaInput,' +
                'readingSource: MeterReadingSourceWhereUniqueInput,' +
                'billingStatus: MeterReadingBillingStatusType,' +
                'billingStatusText: String' +
                '}',
        },
        {
            access: true,
            type: 'input RegisterMetersReadingsInput { dv: Int!, sender: SenderFieldInput!, organization: OrganizationWhereUniqueInput!, readings: [RegisterMetersReadingsReadingInput!]! }',
        },
        {
            access: true,
            type: 'type RegisterMetersReadingsMeterPropertyOutput { id: ID!, address: String!, addressKey: String! }',
        },
        {
            access: true,
            type: 'type RegisterMetersReadingsMeterOutput { id: ID!, property: RegisterMetersReadingsMeterPropertyOutput!, unitType: String!, unitName: String!, accountNumber: String!, number: String! }',
        },
        {
            access: true,
            type: 'type RegisterMetersReadingsOutput { id: ID!, meter: RegisterMetersReadingsMeterOutput! }',
        },
    ],

    mutations: [
        {
            access: access.canRegisterMetersReadings,
            doc: {
                summary: 'Create meter readings and, if not exists, meters.',
                description: 'Use dates in UTC format (YYYY-MM-DDTHH:mm:ss.SSSZ) or in YYYY-MM-DD. You should prefer UTC.',
                errors: ERRORS,
            },
            schema: 'registerMetersReadings(data: RegisterMetersReadingsInput!): [RegisterMetersReadingsOutput]',
            resolver: async (parent, /**{ data: RegisterMetersReadingsInput }*/args, context) => {
                const { data: { dv, sender, organization, readings } } = args

                if (readings.length > READINGS_LIMIT) {
                    throw new GQLError({
                        ...ERRORS.TOO_MUCH_READINGS,
                        messageInterpolation: { limit: READINGS_LIMIT, sentCount: readings.length },
                    }, context)
                }

                /** @type Organization */
                const organizationData = await getById('Organization', organization.id)

                if (!organizationData || !!organizationData.deletedAt) {
                    throw new GQLError(ERRORS.ORGANIZATION_NOT_FOUND, context)
                }

                const locale = extractReqLocale(context.req) || conf.DEFAULT_LOCALE

                const propertyResolver = new PropertyResolver({ context })
                propertyResolver.tin = organizationData.tin
                propertyResolver.organizationId = organization.id

                const resolvedAddresses = await getResolvedAddresses(propertyResolver, readings)
                const addressesKeys = getAddressesKeys(readings, resolvedAddresses)

                /** @type Property[] */
                const properties = await find('Property', {
                    organization,
                    deletedAt: null,
                    addressKey_in: addressesKeys,
                })

                const resultRows = []

                const meterNumbers = uniq(readings.map(reading => reading.meterNumber.trim()))
                const meters = await find('Meter', {
                    organization,
                    number_in: meterNumbers,
                    deletedAt: null,
                })

                const meterReadingForSearchingDuplicates = await getMeterReadingsForSearchingDuplicates(readings, meters, properties, 'MeterReading')

                for (const reading of readings) {
                    const meterNumber = reading.meterNumber.trim()
                    const accountNumber = reading.accountNumber.trim()
                    const unitType = get(reading, ['addressInfo', 'unitType'], get(resolvedAddresses, [reading.address, 'addressResolve', 'unitType'], '')).trim() || null
                    const unitName = get(reading, ['addressInfo', 'unitName'], get(resolvedAddresses, [reading.address, 'addressResolve', 'unitName'], '')).trim() || null
                    const addressKey = get(resolvedAddresses, [reading.address, 'addressResolve', 'propertyAddress', 'addressKey'])
                    let readingSource = get(reading, 'readingSource')

                    if (isNil(readingSource)) {
                        readingSource = { id: OTHER_METER_READING_SOURCE_ID }
                    }

                    if (isEmpty(accountNumber)) {
                        resultRows.push(new GQLError(ERRORS.INVALID_ACCOUNT_NUMBER, context))
                        continue
                    }

                    if (isEmpty(meterNumber)) {
                        resultRows.push(new GQLError(ERRORS.INVALID_METER_NUMBER, context))
                        continue
                    }

                    const dateValidationError = getDateStrValidationError(context, locale, reading)
                    if (dateValidationError) {
                        resultRows.push(dateValidationError)
                        continue
                    }

                    const dateISO = tryToISO(reading.date)
                    const startOfDayISO = dateISO ? dayjs(dateISO).startOf('day').toISOString() : undefined
                    const property = properties.find((p) => p.addressKey === addressKey)

                    if (!property) {
                        resultRows.push(new GQLError(ERRORS.PROPERTY_NOT_FOUND, context))
                        continue
                    }

                    let meterId
                    const foundMeters = meters.filter((meter) =>
                        meter.property === property.id
                        && meter.unitType === unitType
                        && meter.unitName === unitName
                        && meter.number === meterNumber
                        && meter.resource === reading.meterResource.id
                    )

                    if (foundMeters.length > 1) {
                        resultRows.push(new GQLError({
                            ...ERRORS.MULTIPLE_METERS_FOUND,
                            messageInterpolation: { count: foundMeters.length },
                        }, context))
                        continue
                    }

                    const foundMeter = foundMeters[0]

                    const errorValues = {}
                    const values = getValues(reading, errorValues)

                    if (Object.keys(errorValues).length > 0) {
                        const errorValuesKeys = Object.keys(errorValues)
                        const valuesList = getValuesList(errorValuesKeys, errorValues, locale)
                        resultRows.push(new GQLError(
                            { ...ERRORS.INVALID_METER_VALUES, messageInterpolation: { valuesList } },
                            context,
                        ))
                        continue
                    }

                    try {
                        if (foundMeter) {
                            meterId = foundMeter.id
                            const fieldsToUpdate = getFieldsToUpdate(reading, false)
                            if (shouldUpdateMeter(foundMeter, fieldsToUpdate)) {
                                const updatedMeter = await Meter.update(
                                    context,
                                    foundMeter.id,
                                    { dv, sender, ...fieldsToUpdate },
                                    'id property { id } unitName unitType accountNumber number resource { id }'
                                )
                                const meterIndex = meters.indexOf(meter => meter.id === updatedMeter.id)
                                meters[meterIndex] = transformToPlainObject(updatedMeter)
                            }
                        } else {
                            const meterFieldsGetter = getMeterFields()
                            const createdMeter = await Meter.create(context, {
                                dv,
                                sender,
                                ...getMeterDates(reading),
                                ...meterFieldsGetter(organization, property, reading, values, resolvedAddresses),
                            }, 'id property { id } unitName unitType accountNumber number resource { id }')
                            meterId = createdMeter.id
                            meters.push(transformToPlainObject(createdMeter))
                        }
                    } catch (e) {
                        resultRows.push(e)
                        continue
                    }

                    try {
                        const key = createMeterReadingKey(meterId, getSortedValues(reading))
                        const duplicateReading = meterReadingForSearchingDuplicates[key]

                        if (!duplicateReading) {
                            const meterReadingFieldsGetter = getReadingFields()
                            const createdMeterReading = await MeterReading.create(context, {
                                dv,
                                sender,
                                ...meterReadingFieldsGetter(meterId, readingSource, reading, values),
                            }, 'id meter { id unitType unitName accountNumber number property { id address addressKey } }')

                            meterReadingForSearchingDuplicates[key] = createdMeterReading
                            resultRows.push(meterReadingAsResult(createdMeterReading))
                        } else {
                            resultRows.push(meterReadingAsResult(duplicateReading))
                        }
                    } catch (e) {
                        resultRows.push(e)
                    }
                }

                return resultRows
            },
        },
    ],

})

module.exports = {
    RegisterMetersReadingsService,
}
