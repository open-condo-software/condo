/**
 * Generated by `createservice meter.RegisterMetersReadingsService --type mutations`
 */
const dayjs = require('dayjs')
const { get, isUndefined, isEmpty, isNumber, isString, pick, set } = require('lodash')

const conf = require('@open-condo/config')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, find, getById } = require('@open-condo/keystone/schema')
const { extractReqLocale } = require('@open-condo/locales/extractReqLocale')
const { i18n } = require('@open-condo/locales/loader')

const { PropertyResolver } = require('@condo/domains/billing/schema/resolvers')
const access = require('@condo/domains/meter/access/RegisterMetersReadingsService')
const { IMPORT_CONDO_METER_READING_SOURCE_ID } = require('@condo/domains/meter/constants/constants')
const {
    TOO_MUCH_READINGS,
    ORGANIZATION_NOT_FOUND,
    PROPERTY_NOT_FOUND,
    INVALID_METER_VALUES,
    MULTIPLE_METERS_FOUND,
} = require('@condo/domains/meter/constants/errors')
const { Meter, MeterReading } = require('@condo/domains/meter/utils/serverSchema')

const READINGS_LIMIT = 500

const ERRORS = {
    TOO_MUCH_READINGS: (sentCount) => ({
        code: BAD_USER_INPUT,
        type: TOO_MUCH_READINGS,
        message: `Too much readings. Maximum is ${READINGS_LIMIT}.`,
        messageForUser: 'api.meter.registerMetersReadings.TOO_MUCH_READINGS',
        messageInterpolation: { limit: READINGS_LIMIT, sentCount },
    }),
    ORGANIZATION_NOT_FOUND: {
        code: BAD_USER_INPUT,
        type: ORGANIZATION_NOT_FOUND,
        message: 'Organization not found',
        messageForUser: 'api.meter.registerMetersReadings.ORGANIZATION_NOT_FOUND',
    },
    PROPERTY_NOT_FOUND: {
        code: BAD_USER_INPUT,
        type: PROPERTY_NOT_FOUND,
        message: 'Property not found',
        messageForUser: 'api.meter.registerMetersReadings.PROPERTY_NOT_FOUND',
    },
    INVALID_METER_VALUES: (valuesList) => ({
        code: BAD_USER_INPUT,
        type: INVALID_METER_VALUES,
        message: 'Invalid meter values',
        messageForUser: 'api.meter.registerMetersReadings.INVALID_METER_VALUES',
        messageInterpolation: { valuesList },
    }),
    MULTIPLE_METERS_FOUND: (count) => ({
        code: BAD_USER_INPUT,
        type: MULTIPLE_METERS_FOUND,
        message: 'Multiple meters found',
        messageForUser: 'api.meter.registerMetersReadings.MULTIPLE_METERS_FOUND',
        messageInterpolation: { count },
    }),
}

function toISO (str) {
    if (isEmpty(str)) {
        return undefined
    }

    return dayjs(str).toISOString()
}

/**
 * @param value
 * @return {undefined|string|null}
 */
function normalizeMeterValue (value) {
    if (!(isString(value) || isNumber(value) || isUndefined(value))) return null
    if (isUndefined(value)) return value

    const transformedValue = String(value).trim().replaceAll(',', '.')
    if (isEmpty(transformedValue)) return undefined
    return String(Number(transformedValue))
}

/**
 * @param {string | null | undefined} value
 * @return {boolean}
 */
function validateMeterValue (value) {
    if (!isString(value) && !isUndefined(value)) return false
    if (isUndefined(value)) return true

    return !isEmpty(value) && !isNaN(Number(value)) && isFinite(Number(value)) && Number(value) >= 0
}

const RegisterMetersReadingsService = new GQLCustomSchema('RegisterMetersReadingsService', {
    types: [
        {
            access: true,
            type: 'input RegisterMetersReadingsMeterMetaInput {' +
                'numberOfTariffs: Int,' +
                'place: String,' +
                'verificationDate: String,' +
                'nextVerificationDate: String,' +
                'installationDate: String,' +
                'commissioningDate: String,' +
                'sealingDate: String,' +
                'controlReadingsDate: String' +
                '}',
        },
        {
            access: true,
            type: 'input RegisterMetersReadingsReadingAddressInfoInput { unitType: String!, unitName: String!, globalId: String }',
        },
        {
            access: true,
            type: 'input RegisterMetersReadingsReadingInput {' +
                'address: String!,' +
                'addressInfo: RegisterMetersReadingsReadingAddressInfoInput!,' +
                'accountNumber: String!,' +
                'meterNumber: String!,' +
                'meterResource: MeterResourceWhereUniqueInput!,' +
                'date: String!,' +
                'value1: String!,' +
                'value2: String,' +
                'value3: String,' +
                'value4: String,' +
                'meterMeta: RegisterMetersReadingsMeterMetaInput' +
                '}',
        },
        {
            access: true,
            type: 'input RegisterMetersReadingsInput { dv: Int!, sender: SenderFieldInput!, organization: OrganizationWhereUniqueInput!, readings: [RegisterMetersReadingsReadingInput!]! }',
        },
        {
            access: true,
            type: 'type RegisterMetersReadingsMeterPropertyOutput { id: ID!, address: String!, addressKey: String! }',
        },
        {
            access: true,
            type: 'type RegisterMetersReadingsMeterOutput { id: ID!, property: RegisterMetersReadingsMeterPropertyOutput!, unitType: String!, unitName: String!, accountNumber: String!, number: String! }',
        },
        {
            access: true,
            type: 'type RegisterMetersReadingsOutput { id: ID!, meter: RegisterMetersReadingsMeterOutput! }',
        },
    ],

    mutations: [
        {
            access: access.canRegisterMetersReadings,
            schema: 'registerMetersReadings(data: RegisterMetersReadingsInput!): [RegisterMetersReadingsOutput]',
            resolver: async (parent, /**{ data: RegisterMetersReadingsInput }*/args, context) => {
                const { data: { dv, sender, organization, readings } } = args

                if (readings.length > READINGS_LIMIT) {
                    throw new GQLError(ERRORS.TOO_MUCH_READINGS(readings.length), context)
                }

                /** @type Organization */
                const organizationData = await getById('Organization', organization.id)

                if (!organizationData || !!organizationData.deletedAt) {
                    throw new GQLError(ERRORS.ORGANIZATION_NOT_FOUND, context)
                }

                const locale = extractReqLocale(context.req) || conf.DEFAULT_LOCALE

                const propertyResolver = new PropertyResolver({ context })
                propertyResolver.tin = organizationData.tin

                const resolvedAddresses = await propertyResolver.normalizeAddresses(readings.reduce((res, reading, index) => ({
                    ...res,
                    [reading.address]: {
                        address: reading.address,
                        addressMeta: reading.addressInfo,
                    },
                }), {}))

                const addressesKeys = readings.map((reading) => get(resolvedAddresses, [reading.address, 'addressResolve', 'propertyAddress', 'addressKey'])).filter(Boolean)

                /** @type Property[] */
                const properties = await find('Property', {
                    organization,
                    deletedAt: null,
                    addressKey_in: addressesKeys,
                })

                const resultRows = []

                for (const reading of readings) {
                    const addressKey = get(resolvedAddresses, [reading.address, 'addressResolve', 'propertyAddress', 'addressKey'])

                    const property = properties.find((p) => p.addressKey === addressKey)

                    if (!property) {
                        resultRows.push(new GQLError(ERRORS.PROPERTY_NOT_FOUND, context))
                        continue
                    }

                    let meterId
                    const foundMeters = await find('Meter', {
                        organization,
                        property: { id: property.id },
                        unitType: reading.addressInfo.unitType,
                        unitName: reading.addressInfo.unitName,
                        accountNumber: reading.accountNumber,
                        number: reading.meterNumber,
                        deletedAt: null,
                    })

                    if (foundMeters.length > 1) {
                        resultRows.push(new GQLError(ERRORS.MULTIPLE_METERS_FOUND(foundMeters.length), context))
                        continue
                    }

                    const foundMeter = foundMeters[0]
                    let values

                    if (foundMeter) {
                        meterId = foundMeter.id
                    } else {
                        try {
                            const errorValues = {}
                            values = ['value1', 'value2', 'value3', 'value4'].reduce((result, currentValue) => {
                                const value = reading[currentValue]
                                const normalizedValue = normalizeMeterValue(value)

                                if (!validateMeterValue(normalizedValue)) {
                                    set(errorValues, currentValue, value)
                                    return result
                                }

                                return {
                                    ...result,
                                    [currentValue]: normalizedValue,
                                }
                            }, {})

                            if (Object.keys(errorValues).length > 0) {
                                const errorValuesKeys = Object.keys(errorValues)
                                resultRows.push(new GQLError(
                                    ERRORS.INVALID_METER_VALUES(errorValuesKeys.map((errKey) => `"${i18n(`meter.import.column.${errKey}`, { locale })}"="${errorValues[errKey]}"`)),
                                    context
                                ))
                                continue
                            }

                            const rawControlReadingsDate = get(reading, ['meterMeta', 'controlReadingsDate'])

                            const createdMeter = await Meter.create(context, {
                                dv,
                                sender,
                                organization: { connect: organization },
                                property: { connect: { id: property.id } },
                                unitType: reading.addressInfo.unitType,
                                unitName: reading.addressInfo.unitName,
                                accountNumber: reading.accountNumber,
                                number: reading.meterNumber,
                                resource: { connect: reading.meterResource },
                                numberOfTariffs: get(reading, ['meterMeta', 'numberOfTariffs'], Object.values(values).filter(Boolean).length),
                                place: get(reading, ['meterMeta', 'place']),
                                verificationDate: toISO(get(reading, ['meterMeta', 'verificationDate'])),
                                nextVerificationDate: toISO(get(reading, ['meterMeta', 'nextVerificationDate'])),
                                installationDate: toISO(get(reading, ['meterMeta', 'installationDate'])),
                                commissioningDate: toISO(get(reading, ['meterMeta', 'commissioningDate'])),
                                sealingDate: toISO(get(reading, ['meterMeta', 'sealingDate'])),
                                controlReadingsDate: rawControlReadingsDate ? toISO(rawControlReadingsDate) : dayjs().toISOString(),
                            })
                            meterId = createdMeter.id
                        } catch (e) {
                            resultRows.push(e)
                            continue
                        }
                    }

                    try {
                        const createdMeterReading = await MeterReading.create(context, {
                            dv,
                            sender,
                            meter: { connect: { id: meterId } },
                            source: { connect: { id: IMPORT_CONDO_METER_READING_SOURCE_ID } },
                            date: toISO(reading.date),
                            ...values,
                        })

                        resultRows.push({
                            id: createdMeterReading.id,
                            meter: {
                                ...pick(createdMeterReading.meter, ['id', 'unitType', 'unitName', 'accountNumber', 'number']),
                                property: pick(createdMeterReading.meter.property, ['id', 'address', 'addressKey']),
                            },
                        })
                    } catch (e) {
                        resultRows.push(e)
                    }
                }

                return resultRows
            },
        },
    ],

})

module.exports = {
    RegisterMetersReadingsService,
}
