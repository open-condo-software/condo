/**
 * Generated by `createservice meter.RegisterMetersReadingsService --type mutations`
 */
const dayjs = require('dayjs')
const customParseFormat = require('dayjs/plugin/customParseFormat')
const { get, isUndefined, isEmpty, isNumber, isString, isNil, pick, set } = require('lodash')
const uniq = require('lodash/uniq')

const conf = require('@open-condo/config')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, find, getById } = require('@open-condo/keystone/schema')
const { extractReqLocale } = require('@open-condo/locales/extractReqLocale')
const { i18n } = require('@open-condo/locales/loader')

const { PropertyResolver } = require('@condo/domains/billing/schema/resolvers')
const access = require('@condo/domains/meter/access/RegisterMetersReadingsService')
const { OTHER_METER_READING_SOURCE_ID } = require('@condo/domains/meter/constants/constants')
const {
    TOO_MUCH_READINGS,
    ORGANIZATION_NOT_FOUND,
    PROPERTY_NOT_FOUND,
    INVALID_METER_VALUES,
    MULTIPLE_METERS_FOUND,
    INVALID_ACCOUNT_NUMBER,
    INVALID_METER_NUMBER,
    INVALID_DATE,
} = require('@condo/domains/meter/constants/errors')
const { ERRORS, READINGS_LIMIT } = require('@condo/domains/meter/constants/registerMetersReadingsService')
const { isDateValid, toISO } = require('@condo/domains/meter/utils/date.utils')
const { validateMeterValue, shouldUpdateMeter, meterReadingAsResult, normalizeMeterValue } = require('@condo/domains/meter/utils/meter.utils')
const { Meter, MeterReading } = require('@condo/domains/meter/utils/serverSchema')

dayjs.extend(customParseFormat)

const RegisterMetersReadingsService = new GQLCustomSchema('RegisterMetersReadingsService', {
    types: [
        {
            access: true,
            type: 'input RegisterMetersReadingsMeterMetaInput {' +
                'numberOfTariffs: Int,' +
                'place: String,' +
                'verificationDate: String,' +
                'nextVerificationDate: String,' +
                'installationDate: String,' +
                'commissioningDate: String,' +
                'sealingDate: String,' +
                'controlReadingsDate: String,' +
                'isAutomatic: Boolean' +
                '}',
        },
        {
            access: true,
            type: 'input RegisterMetersReadingsReadingAddressInfoInput { unitType: String, unitName: String, globalId: String }',
        },
        {
            access: true,
            type: 'input RegisterMetersReadingsReadingInput {' +
                'address: String!,' +
                'addressInfo: RegisterMetersReadingsReadingAddressInfoInput!,' +
                'accountNumber: String!,' +
                'meterNumber: String!,' +
                'meterResource: MeterResourceWhereUniqueInput!,' +
                'date: String!,' +
                'value1: String!,' +
                'value2: String,' +
                'value3: String,' +
                'value4: String,' +
                'meterMeta: RegisterMetersReadingsMeterMetaInput,' +
                'readingSource: MeterReadingSourceWhereUniqueInput' +
                '}',
        },
        {
            access: true,
            type: 'input RegisterMetersReadingsInput { dv: Int!, sender: SenderFieldInput!, organization: OrganizationWhereUniqueInput!, readings: [RegisterMetersReadingsReadingInput!]! }',
        },
        {
            access: true,
            type: 'type RegisterMetersReadingsMeterPropertyOutput { id: ID!, address: String!, addressKey: String! }',
        },
        {
            access: true,
            type: 'type RegisterMetersReadingsMeterOutput { id: ID!, property: RegisterMetersReadingsMeterPropertyOutput!, unitType: String!, unitName: String!, accountNumber: String!, number: String! }',
        },
        {
            access: true,
            type: 'type RegisterMetersReadingsOutput { id: ID!, meter: RegisterMetersReadingsMeterOutput! }',
        },
    ],

    mutations: [
        {
            access: access.canRegisterMetersReadings,
            schema: 'registerMetersReadings(data: RegisterMetersReadingsInput!): [RegisterMetersReadingsOutput]',
            resolver: async (parent, /**{ data: RegisterMetersReadingsInput }*/args, context) => {
                const { data: { dv, sender, organization, readings } } = args

                if (readings.length > READINGS_LIMIT) {
                    throw new GQLError({
                        ...ERRORS.TOO_MUCH_READINGS,
                        messageInterpolation: { limit: READINGS_LIMIT, sentCount: readings.length },
                    }, context)
                }

                /** @type Organization */
                const organizationData = await getById('Organization', organization.id)

                if (!organizationData || !!organizationData.deletedAt) {
                    throw new GQLError(ERRORS.ORGANIZATION_NOT_FOUND, context)
                }

                const locale = extractReqLocale(context.req) || conf.DEFAULT_LOCALE

                const propertyResolver = new PropertyResolver({ context })
                propertyResolver.tin = organizationData.tin
                propertyResolver.organizationId = organization.id

                const resolvedAddresses = await propertyResolver.normalizeAddresses(readings.reduce((res, reading) => ({
                    ...res,
                    [reading.address]: {
                        address: reading.address,
                        addressMeta: reading.addressInfo,
                    },
                }), {}))

                const addressesKeys = uniq(
                    readings
                        .map((reading) => get(resolvedAddresses, [reading.address, 'addressResolve', 'propertyAddress', 'addressKey']))
                        .filter(Boolean)
                )

                /** @type Property[] */
                const properties = await find('Property', {
                    organization,
                    deletedAt: null,
                    addressKey_in: addressesKeys,
                })

                const resultRows = []

                const meterNumbers = uniq(readings.map(reading => reading.meterNumber.trim()))
                const meters = await find('Meter', {
                    organization,
                    number_in: meterNumbers,
                    deletedAt: null,
                })

                const readingsWithValidDates = readings.filter(reading => isDateValid(reading.date))
                const plainMeterReadings = await find('MeterReading', {
                    meter: { id_in: meters.map(meter => meter.id) },
                    date_in: uniq(readingsWithValidDates.map(reading => toISO(reading.date))),
                })
                const propertyByIdMap = properties.reduce((acc, property) => {
                    acc[property.id] = property
                    return acc
                }, {})
                const metersWithPropertyByIdMap = meters.reduce((acc, meter) => {
                    acc[meter.id] = {
                        ...meter,
                        property: propertyByIdMap[meter.property],
                    }
                    return acc
                }, {})
                const meterReadings = plainMeterReadings.map(reading => ({
                    ...reading,
                    meter: metersWithPropertyByIdMap[reading.meter],
                }))
                const meterReadingByDate = meterReadings.reduce((acc, reading) => {
                    const key = `${reading.meter.id}-${reading.date.toISOString()}`
                    acc[key] = reading
                    return acc
                }, {})

                for (const reading of readings) {
                    const meterNumber = reading.meterNumber.trim()
                    const accountNumber = reading.accountNumber.trim()
                    const unitType = get(reading, ['addressInfo', 'unitType'], get(resolvedAddresses, [reading.address, 'addressResolve', 'unitType'], '')).trim() || null
                    const unitName = get(reading, ['addressInfo', 'unitName'], get(resolvedAddresses, [reading.address, 'addressResolve', 'unitName'], '')).trim() || null
                    const addressKey = get(resolvedAddresses, [reading.address, 'addressResolve', 'propertyAddress', 'addressKey'])
                    let readingSource = get(reading, 'readingSource')

                    if (isNil(readingSource)) {
                        readingSource = { id: OTHER_METER_READING_SOURCE_ID }
                    }

                    if (isEmpty(accountNumber)) {
                        resultRows.push(new GQLError(ERRORS.INVALID_ACCOUNT_NUMBER, context))
                        continue
                    }

                    if (isEmpty(meterNumber)) {
                        resultRows.push(new GQLError(ERRORS.INVALID_METER_NUMBER, context))
                        continue
                    }

                    if (!isDateValid(reading.date)) {
                        resultRows.push(new GQLError({
                            ...ERRORS.INVALID_DATE,
                            messageInterpolation: {
                                columnName: i18n('meter.import.column.meterReadingSubmissionDate', { locale }),
                                format: [
                                    i18n('iso.date.format', { locale }),
                                    i18n('european.date.format', { locale }),
                                ].join('", "'),
                            },
                        }, context))
                        continue
                    }

                    const dateISO = toISO(reading.date)
                    const property = properties.find((p) => p.addressKey === addressKey)

                    if (!property) {
                        resultRows.push(new GQLError(ERRORS.PROPERTY_NOT_FOUND, context))
                        continue
                    }

                    let meterId
                    const foundMeters = meters.filter(meter => {
                        return meter.property === property.id &&
                            meter.unitType === unitType &&
                            meter.unitName === unitName &&
                            meter.accountNumber === accountNumber &&
                            meter.number === meterNumber &&
                            meter.resource === reading.meterResource.id
                    })

                    if (foundMeters.length > 1) {
                        resultRows.push(new GQLError({
                            ...ERRORS.MULTIPLE_METERS_FOUND,
                            messageInterpolation: { count: foundMeters.length },
                        }, context))
                        continue
                    }

                    const foundMeter = foundMeters[0]

                    const errorValues = {}
                    const values = ['value1', 'value2', 'value3', 'value4'].reduce((result, currentValue) => {
                        const value = reading[currentValue]
                        const normalizedValue = normalizeMeterValue(value)

                        if (!validateMeterValue(normalizedValue)) {
                            set(errorValues, currentValue, value)
                            return result
                        }

                        return {
                            ...result,
                            [currentValue]: normalizedValue,
                        }
                    }, {})

                    if (Object.keys(errorValues).length > 0) {
                        const errorValuesKeys = Object.keys(errorValues)
                        const valuesList = errorValuesKeys.map((errKey) => {
                            const column = i18n(`meter.import.column.${errKey}`, { locale })
                            return `"${column}"="${errorValues[errKey]}"`
                        }).join(', ')
                        resultRows.push(new GQLError(
                            { ...ERRORS.INVALID_METER_VALUES, messageInterpolation: { valuesList } },
                            context,
                        ))
                        continue
                    }

                    try {
                        if (foundMeter) {
                            meterId = foundMeter.id
                            const fieldsToUpdate = {
                                accountNumber,
                                numberOfTariffs: get(reading, ['meterMeta', 'numberOfTariffs']),
                                place: get(reading, ['meterMeta', 'place']),
                                verificationDate: toISO(get(reading, ['meterMeta', 'verificationDate'])),
                                nextVerificationDate: toISO(get(reading, ['meterMeta', 'nextVerificationDate'])),
                                installationDate: toISO(get(reading, ['meterMeta', 'installationDate'])),
                                commissioningDate: toISO(get(reading, ['meterMeta', 'commissioningDate'])),
                                sealingDate: toISO(get(reading, ['meterMeta', 'sealingDate'])),
                                controlReadingsDate: toISO(get(reading, ['meterMeta', 'controlReadingsDate'])),
                                isAutomatic: get(reading, ['meterMeta', 'isAutomatic']),
                            }
                            if (shouldUpdateMeter(foundMeter, fieldsToUpdate)) {
                                const updatedMeter = await Meter.update(
                                    context,
                                    foundMeter.id,
                                    { dv, sender, ...fieldsToUpdate },
                                    'id property { id } unitName unitType accountNumber number resource { id }'
                                )
                                const meterIndex = meters.indexOf(meter => meter.id === updatedMeter.id)
                                meters[meterIndex] = transformToPlainObject(updatedMeter)
                            }
                        } else {
                            const rawControlReadingsDate = get(reading, ['meterMeta', 'controlReadingsDate'])
                            const createdMeter = await Meter.create(context, {
                                dv,
                                sender,
                                organization: { connect: organization },
                                property: { connect: { id: property.id } },
                                unitType,
                                unitName,
                                accountNumber,
                                number: meterNumber,
                                resource: { connect: reading.meterResource },
                                numberOfTariffs: get(reading, ['meterMeta', 'numberOfTariffs'], Object.values(values).filter(Boolean).length),
                                place: get(reading, ['meterMeta', 'place']),
                                verificationDate: toISO(get(reading, ['meterMeta', 'verificationDate'])),
                                nextVerificationDate: toISO(get(reading, ['meterMeta', 'nextVerificationDate'])),
                                installationDate: toISO(get(reading, ['meterMeta', 'installationDate'])),
                                commissioningDate: toISO(get(reading, ['meterMeta', 'commissioningDate'])),
                                sealingDate: toISO(get(reading, ['meterMeta', 'sealingDate'])),
                                controlReadingsDate: rawControlReadingsDate ? toISO(rawControlReadingsDate) : dayjs().toISOString(),
                                isAutomatic: get(reading, ['meterMeta', 'isAutomatic']),
                            }, 'id property { id } unitName unitType accountNumber number resource { id }')
                            meterId = createdMeter.id
                            meters.push(transformToPlainObject(createdMeter))
                        }
                    } catch (e) {
                        resultRows.push(e)
                        continue
                    }

                    try {
                        const key = `${meterId}-${dateISO}`
                        const duplicateReading = meterReadingByDate[key]

                        if (!duplicateReading) {
                            const createdMeterReading = await MeterReading.create(context, {
                                dv,
                                sender,
                                meter: { connect: { id: meterId } },
                                source: { connect: readingSource },
                                date: toISO(reading.date),
                                ...values,
                            }, 'id meter { id unitType unitName accountNumber number property { id address addressKey } }')

                            meterReadingByDate[key] = createdMeterReading
                            resultRows.push(meterReadingAsResult(createdMeterReading))
                        } else {
                            resultRows.push(meterReadingAsResult(duplicateReading))
                        }
                    } catch (e) {
                        resultRows.push(e)
                    }
                }

                return resultRows
            },
        },
    ],

})

module.exports = {
    RegisterMetersReadingsService,
}
