/**
 * Generated by `createschema meter.MeterReadingsImportTask 'status:Select:processing,completed,canceled,error; format:Select:excel,csv; importedRecordsCount:Integer; totalRecordsCount:Integer; file?:File; errorFile?:File; user:Relationship:User:CASCADE;meta?:Json'`
 */

const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    expectValuesOfCommonFields,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { CSV, COMPLETED, CANCELLED } = require('@condo/domains/common/constants/import')
const {
    MeterReadingsImportTask,
    createTestMeterReadingsImportTask,
    updateTestMeterReadingsImportTask,
} = require('@condo/domains/meter/utils/testSchema')
const {
    createTestOrganization,
    createTestOrganizationEmployee,
    createTestOrganizationEmployeeRole,
} = require('@condo/domains/organization/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
} = require('@condo/domains/user/utils/testSchema')

describe('MeterReadingsImportTask', () => {
    let admin, support, client, user, organization

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
    })

    beforeEach(async () => {
        client = await makeClientWithNewRegisteredAndLoggedInUser()
        user = client.user

        const [organizationObj] = await createTestOrganization(admin)
        organization = organizationObj

        const [role] = await createTestOrganizationEmployeeRole(admin, organization)
        await createTestOrganizationEmployee(admin, organization, user, role)
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                // 2) action
                const [obj, attrs] = await createTestMeterReadingsImportTask(admin, user, organization)

                // 3) check
                expectValuesOfCommonFields(obj, attrs, admin)
            })

            test('support can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(support, user, organization)
                })
            })

            test('user can', async () => {
                const [obj, attrs] = await createTestMeterReadingsImportTask(client, user, organization)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('user can\'t create status: COMPLETED', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(client, user, organization, {
                        status: COMPLETED,
                    })
                })
            })

            test('user can\'t create status: ERROR', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(client, user, organization, {
                        status: COMPLETED,
                    })
                })
            })

            test('user can\'t create status: CANCELLED', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(client, user, organization, {
                        status: COMPLETED,
                    })
                })
            })

            test('user can\'t create format not empty', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(client, user, organization, {
                        format: CSV,
                    })
                })
            })

            test('user can\'t create importedRecordsCount not empty', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(client, user, organization, {
                        importedRecordsCount: 5,
                    })
                })
            })

            test('user can\'t create processedRecordsCount not empty', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(client, user, organization, {
                        processedRecordsCount: 5,
                    })
                })
            })

            test('user can\'t create totalRecordsCount not empty', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(client, user, organization, {
                        totalRecordsCount: 5,
                    })
                })
            })

            test('user can\'t create errorMessage not empty', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(client, user, organization, {
                        errorMessage: 'error',
                    })
                })
            })

            test('user can\'t create meta not empty', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(client, user, organization, {
                        meta: {},
                    })
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestMeterReadingsImportTask(client, user, organization)
                })
            })
        })

        describe('update', () => {
            let meterReadingsImportTask
            beforeEach(async () => {
                const [objCreated] = await createTestMeterReadingsImportTask(admin, user, organization)
                meterReadingsImportTask = objCreated
            })

            test('admin can', async () => {
                const [obj, attrs] = await updateTestMeterReadingsImportTask(admin, meterReadingsImportTask.id, {
                    status: CANCELLED,
                })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            test('support can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterReadingsImportTask(support, meterReadingsImportTask.id, {
                        status: CANCELLED,
                    })
                })
            })

            test('user can', async () => {
                const [obj, attrs] = await updateTestMeterReadingsImportTask(client, meterReadingsImportTask.id, {
                    status: CANCELLED,
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('user can\' change status: COMPLETED', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterReadingsImportTask(client, meterReadingsImportTask.id, {
                        status: COMPLETED,
                    })
                })
            })

            test('user can\' change status: ERROR', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterReadingsImportTask(client, meterReadingsImportTask.id, {
                        status: COMPLETED,
                    })
                })
            })

            test('user can\' change format', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterReadingsImportTask(client, meterReadingsImportTask.id, {
                        format: CSV,
                    })
                })
            })

            test('user can\' change importedRecordsCount', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterReadingsImportTask(client, meterReadingsImportTask.id, {
                        importedRecordsCount: 5,
                    })
                })
            })

            test('user can\' change processedRecordsCount', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterReadingsImportTask(client, meterReadingsImportTask.id, {
                        processedRecordsCount: 5,
                    })
                })
            })

            test('user can\' change totalRecordsCount', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterReadingsImportTask(client, meterReadingsImportTask.id, {
                        totalRecordsCount: 5,
                    })
                })
            })

            test('user can\' change errorMessage', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterReadingsImportTask(client, meterReadingsImportTask.id, {
                        errorMessage: 'error',
                    })
                })
            })

            test('user can\' change meta', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterReadingsImportTask(client, meterReadingsImportTask.id, {
                        meta: {},
                    })
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestMeterReadingsImportTask(client, meterReadingsImportTask.id, {
                        status: CANCELLED,
                    })
                })
            })
        })

        describe('hard delete', () => {
            let meterReadingsImportTask
            beforeEach(async () => {
                const [objCreated] = await createTestMeterReadingsImportTask(admin, user, organization)
                meterReadingsImportTask = objCreated
            })

            test('admin can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterReadingsImportTask.delete(admin, meterReadingsImportTask.id)
                })
            })

            test('user can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterReadingsImportTask.delete(client, meterReadingsImportTask.id)
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterReadingsImportTask.delete(client, meterReadingsImportTask.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [obj] = await createTestMeterReadingsImportTask(admin, admin.user, organization)
                const [obj1] = await createTestMeterReadingsImportTask(client, client.user, organization)

                const objs = await MeterReadingsImportTask.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(2)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                    expect.objectContaining({
                        id: obj1.id,
                    }),
                ]))
            })

            test('user can', async () => {
                const [obj] = await createTestMeterReadingsImportTask(admin, admin.user, organization)
                const [obj1] = await createTestMeterReadingsImportTask(client, client.user, organization)

                const objs = await MeterReadingsImportTask.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj1.id,
                })
            })

            test('anonymous can\'t', async () => {
                const [obj, attrs] = await createTestMeterReadingsImportTask(admin, admin.user, organization)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await MeterReadingsImportTask.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })
})
