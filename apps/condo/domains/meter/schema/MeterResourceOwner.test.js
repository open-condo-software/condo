/**
 * Generated by `createschema meter.MeterResourceOwner 'organization:Relationship:Organization:CASCADE; resource:Relationship:MeterResource:CASCADE;'`
 */
const { GQLErrorCode: { FORBIDDEN } } = require('@open-condo/keystone/errors')
const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    expectValuesOfCommonFields,
    expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowGraphQLRequestError,
} = require('@open-condo/keystone/test.utils')

const { OPERATION_FORBIDDEN } = require('@condo/domains/common/constants/errors')
const {
    COLD_WATER_METER_RESOURCE_ID,
    HOT_WATER_METER_RESOURCE_ID,
} = require('@condo/domains/meter/constants/constants')
const {
    MeterResourceOwner,
    createTestMeterResourceOwner,
    updateTestMeterResourceOwner,
} = require('@condo/domains/meter/utils/testSchema')
const { MeterResource } = require('@condo/domains/meter/utils/testSchema')
const {
    createTestOrganization,
    makeEmployeeUserClientWithAbilities,
} = require('@condo/domains/organization/utils/testSchema')
const { buildingMapJson } = require('@condo/domains/property/constants/property')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const {
    makeClientWithSupportUser,
    makeClientWithNewRegisteredAndLoggedInUser,
} = require('@condo/domains/user/utils/testSchema')


describe('MeterResourceOwner', () => {
    let admin
    let support
    let user
    let resident
    let anonymous
    let resource

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeEmployeeUserClientWithAbilities({ canManageMeters: true, canReadMeters: true })
        resident = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()
        resource = await MeterResource.getOne(admin, { id: COLD_WATER_METER_RESOURCE_ID })
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [obj, attrs] = await createTestMeterResourceOwner(admin, organization, resource, {
                    address: property.address,
                })

                expectValuesOfCommonFields(obj, attrs, admin)
                expect(obj).toHaveProperty(['organization', 'id'], organization.id)
                expect(obj).toHaveProperty(['resource', 'id'], COLD_WATER_METER_RESOURCE_ID)
                expect(obj).toHaveProperty('address', property.address)
                expect(obj).toHaveProperty('addressKey', property.addressKey)
            })

            test('support can', async () => {
                const [organization] = await createTestOrganization(admin)
                const resource = await MeterResource.getOne(admin, { id: HOT_WATER_METER_RESOURCE_ID })
                const [property] = await createTestProperty(admin, organization)
                const [obj] = await createTestMeterResourceOwner(support, organization, resource, { address: property.address })

                expect(obj).toBeDefined()
            })

            test('user can with canManageMeters', async () => {
                const [obj] = await createTestMeterResourceOwner(user, user.organization, resource, { address: user.property.address })

                expect(obj).toBeDefined()
            })

            test('user can\'t without canManageMeters', async () => {
                const user = await makeEmployeeUserClientWithAbilities({ canReadMeters: true, canManageMeters: false })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterResourceOwner(user, user.organization, resource, { address: user.property.address })
                })
            })

            test('resident can\'t', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterResourceOwner(resident, organization, resource, { address: property.address })
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestMeterResourceOwner(anonymous, organization, resource, { address: property.address })
                })
            })
        })

        describe('update', () => {
            test('admin can update only organization field', async () => {
                const [originalOrganization] = await createTestOrganization(admin)
                const [swappedOrganization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, originalOrganization, { map: buildingMapJson })

                const [objCreated] = await createTestMeterResourceOwner(admin, originalOrganization, resource, {
                    address: property.address,
                })

                const [obj, attrs] = await updateTestMeterResourceOwner(admin, objCreated.id, {
                    organization: { connect: { id: swappedOrganization.id } },
                })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj).toHaveProperty(['organization', 'id'], swappedOrganization.id)
            })

            test('admin can\'t update meter related fields', async () => {
                const [originalOrganization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, originalOrganization)

                const [objCreated] = await createTestMeterResourceOwner(admin, originalOrganization, resource, {
                    address: property.address,
                })

                const resourceToUpdate = await MeterResource.getOne(admin, { id: HOT_WATER_METER_RESOURCE_ID })

                await expectToThrowGraphQLRequestError(async () => {
                    await updateTestMeterResourceOwner(admin, objCreated.id, {
                        resource: { connect: { id: resourceToUpdate.id } },
                    })
                }, 'Field "resource" is not defined by type "MeterResourceOwnerUpdateInput"')
            })

            test('support can update only organization field', async () => {
                const [originalOrganization] = await createTestOrganization(support)
                const [swappedOrganization] = await createTestOrganization(support)
                const [property] = await createTestProperty(support, originalOrganization, { map: buildingMapJson })
                const [objCreated] = await createTestMeterResourceOwner(admin, originalOrganization, resource, {
                    address: property.address,
                })

                const [obj, attrs] = await updateTestMeterResourceOwner(support, objCreated.id, {
                    organization: { connect: { id: swappedOrganization.id } },
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: support.user.id }))
                expect(obj).toHaveProperty(['organization', 'id'], swappedOrganization.id)
            })

            test('support can\'t update meter related fields', async () => {
                const [organization] = await createTestOrganization(support)
                const [property] = await createTestProperty(support, organization)
                const [objCreated] = await createTestMeterResourceOwner(admin, organization, resource, {
                    address: property.address,
                })

                const [newProperty] = await createTestProperty(support, organization)

                await expectToThrowGQLError(async () => {
                    await updateTestMeterResourceOwner(support, objCreated.id, {
                        address: newProperty.address,
                    })
                }, {
                    code: FORBIDDEN,
                    type: OPERATION_FORBIDDEN,
                    variable: ['data', 'address'],
                    message: 'Fields related to the address are not allowed to be updated',
                })
            })

            test('user can\'t', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMeterResourceOwner(admin, organization, resource, { address: property.address })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterResourceOwner(user, objCreated.id, { organization: { connect: { id: organization.id } } })
                })
            })

            test('resident can\'t', async () => {
                const [organization] = await createTestOrganization(admin)
                const [newOrganization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMeterResourceOwner(admin, organization, resource, { address: property.address })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterResourceOwner(resident, objCreated.id, { organization: { connect: { id: newOrganization.id } } })
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMeterResourceOwner(admin, organization, resource, { address: property.address })

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestMeterResourceOwner(anonymous, objCreated.id, { organization: { connect: { id: organization.id } } })
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMeterResourceOwner(admin, organization, resource, { address: property.address })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterResourceOwner.delete(admin, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMeterResourceOwner(admin, organization, resource, { address: property.address })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterResourceOwner.delete(user, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMeterResourceOwner(admin, organization, resource, { address: property.address })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterResourceOwner.delete(anonymous, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [obj, attrs] = await createTestMeterResourceOwner(admin, organization, resource, { address: property.address })

                const objs = await MeterResourceOwner.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                        resource: { id: resource.id },
                        organization: { id: organization.id },
                        address: attrs.address,
                    }),
                ]))
            })

            test('user can', async () => {
                const user = await makeEmployeeUserClientWithAbilities({ canManageMeters: true })
                const [obj, attrs] = await createTestMeterResourceOwner(admin, user.organization, resource, {
                    address: user.property.address,
                })

                const objs = await MeterResourceOwner.getAll(user, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                    resource: { id: resource.id },
                    organization: { id: user.organization.id },
                    address: attrs.address,
                    addressKey: user.property.addressKey,
                })
            })

            test('anonymous can\'t', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                await createTestMeterResourceOwner(admin, organization, resource, { address: property.address })

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await MeterResourceOwner.getAll(anonymous, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })
})
