/**
 * Generated by `createschema meter.MeterResourceOwner 'organization:Relationship:Organization:CASCADE; resource:Relationship:MeterResource:CASCADE;'`
 */

const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    expectValuesOfCommonFields,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAccessDeniedErrorToObjects,
} = require('@open-condo/keystone/test.utils')

const {
    COLD_WATER_METER_RESOURCE_ID,
    HOT_WATER_METER_RESOURCE_ID,
} = require('@condo/domains/meter/constants/constants')
const {
    MeterResourceOwner,
    createTestMeterResourceOwner,
    updateTestMeterResourceOwner,
} = require('@condo/domains/meter/utils/testSchema')
const { createTestMeter, MeterResource } = require('@condo/domains/meter/utils/testSchema')
const {
    createTestOrganization,
    makeEmployeeUserClientWithAbilities,
} = require('@condo/domains/organization/utils/testSchema')
const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { buildingMapJson } = require('@condo/domains/property/constants/property')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
} = require('@condo/domains/user/utils/testSchema')


describe('MeterResourceOwner', () => {
    let admin
    let support
    let user
    let anonymous

    let organization
    let property
    let resource
    let defaultPayload

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeEmployeeUserClientWithAbilities({ canManageMeters: true })
        anonymous = await makeClient()

        organization = (await createTestOrganization(admin))[0]
        property = (await createTestProperty(admin, organization, { map: buildingMapJson }))[0]
        resource = await MeterResource.getOne(admin, { id: COLD_WATER_METER_RESOURCE_ID })
        defaultPayload = {
            address: property.address,
            unitName: buildingMapJson.sections[0].floors[0].units[0].label,
            unitType: FLAT_UNIT_TYPE,
        }
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestMeterResourceOwner(admin, organization, resource, defaultPayload)

                expectValuesOfCommonFields(obj, attrs, admin)
                expect(obj).toHaveProperty(['organization', 'id'], organization.id)
                expect(obj).toHaveProperty(['resource', 'id'], COLD_WATER_METER_RESOURCE_ID)
                expect(obj).toHaveProperty('address', property.address)
                expect(obj).toHaveProperty('unitName', buildingMapJson.sections[0].floors[0].units[0].label)
                expect(obj).toHaveProperty('unitType', FLAT_UNIT_TYPE)
            })

            test('support can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterResourceOwner(support, organization, resource, defaultPayload)
                })
            })

            test('user can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMeterResourceOwner(user, organization, resource, defaultPayload)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestMeterResourceOwner(anonymous, organization, resource, defaultPayload)
                })
            })
        })

        describe('update', () => {
            test('admin can update only organization field', async () => {
                const [originalOrganization] = await createTestOrganization(admin)
                const [swappedOrganization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, originalOrganization, { map: buildingMapJson })

                const [objCreated] = await createTestMeterResourceOwner(admin, originalOrganization, resource, {
                    ...defaultPayload,
                    address: property.address,
                })

                const [obj, attrs] = await updateTestMeterResourceOwner(admin, objCreated.id, {
                    organization: { connect: { id: swappedOrganization.id } },
                })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj).toHaveProperty(['organization', 'id'], swappedOrganization.id)
            })

            test('admin can\'t update meter related fields', async () => {
                const [originalOrganization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, originalOrganization, { map: buildingMapJson })

                const [objCreated] = await createTestMeterResourceOwner(admin, originalOrganization, resource, {
                    ...defaultPayload,
                    address: property.address,
                })

                const resourceToUpdate = await MeterResource.getOne(admin, { id: HOT_WATER_METER_RESOURCE_ID })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMeterResourceOwner(admin, objCreated.id, {
                        resource: { connect: { id: resourceToUpdate.id } },
                    })
                })
            })

            // TODO(codegen): if you do not have any SUPPORT specific tests just remove this block!
            test('support can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterResourceOwner(admin)

                const client = await makeClientWithSupportUser()  // TODO(codegen): update SUPPORT client!
                const [obj, attrs] = await updateTestMeterResourceOwner(client, objCreated.id)  // TODO(codegen): write 'support: update MeterResourceOwner' test

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('user can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterResourceOwner(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()  // TODO(codegen): create USER client!
                const [obj, attrs] = await updateTestMeterResourceOwner(client, objCreated.id)  // TODO(codegen): write 'user: update MeterResourceOwner' test

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterResourceOwner(admin)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestMeterResourceOwner(client, objCreated.id)  // TODO(codegen): write 'anonymous: update MeterResourceOwner' test
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterResourceOwner(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterResourceOwner.delete(admin, objCreated.id)  // TODO(codegen): write 'admin: delete MeterResourceOwner' test
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterResourceOwner(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()  // TODO(codegen): create USER client!
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterResourceOwner.delete(client, objCreated.id)  // TODO(codegen): write 'user: delete MeterResourceOwner' test
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestMeterResourceOwner(admin)

                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MeterResourceOwner.delete(client, objCreated.id)  // TODO(codegen): write 'anonymous: delete MeterResourceOwner' test
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestMeterResourceOwner(admin)

                const objs = await MeterResourceOwner.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                        // TODO(codegen): write fields which important to ADMIN access check
                    }),
                ]))
            })

            test('user can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestMeterResourceOwner(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()  // TODO(codegen): create USER client!
                const objs = await MeterResourceOwner.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                    // TODO(codegen): write fields which important to USER access check
                })
            })

            // TODO(codegen): write test for user1 doesn't have access to user2 data if it's applicable

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestMeterResourceOwner(admin)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await MeterResourceOwner.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })  // TODO(codegen): write 'anonymous: read MeterResourceOwner' test
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            // TODO(codegen): check it!
        })
    })

    describe('notifications', () => {
        // TODO(codegen): write notifications tests if you have any sendMessage calls or drop this block!
    })
})
