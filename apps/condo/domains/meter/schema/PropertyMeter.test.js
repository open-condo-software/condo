/**
 * Generated by `createschema meter.PropertyMeter 'number:Text; numberOfTariffs:Integer; installationDate:DateTimeUtc; commissioningDate:DateTimeUtc; verificationDate:DateTimeUtc; nextVerificationDate:DateTimeUtc; controlReadingsDate:DateTimeUtc; sealingDate:DateTimeUtc; isAutomatic:Checkbox; organization:Relationship:Organization:CASCADE; property:Relationship:Property:CASCADE; resource:Relationship:MeterResource:CASCADE; meta:Json;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor, expectValuesOfCommonFields, catchErrorFrom, expectToThrowValidationFailureError } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects,
} = require('@open-condo/keystone/test.utils')

const { COLD_WATER_METER_RESOURCE_ID } = require('@condo/domains/meter/constants/constants')
const { AUTOMATIC_METER_NO_MASTER_APP } = require('@condo/domains/meter/constants/errors')
const { PropertyMeter, createTestPropertyMeter, updateTestPropertyMeter } = require('@condo/domains/meter/utils/testSchema')
const { MeterResource } = require('@condo/domains/meter/utils/testSchema')
const { createTestB2BApp, createTestB2BAppContext } = require('@condo/domains/miniapp/utils/testSchema')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { buildingMapJson } = require('@condo/domains/property/constants/property')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')



describe('PropertyMeter', () => {
    let admin, resource
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient();
        [resource] = await MeterResource.getAll(admin, { id: COLD_WATER_METER_RESOURCE_ID })
    })
    describe('CRUD tests', () => {
        describe('create', () => {
            test('employee with "canManageMeters" role: can create Meter', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeters: true,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [meter] = await createTestPropertyMeter(client, organization, property, resource, {})

                expect(meter.id).toMatch(UUID_RE)
            })

            test('employee without "canManageMeters" role: cannot create Meter', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeters: false,
                })
                const [employee] = await createTestOrganizationEmployee(admin, organization, client.user, role)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestPropertyMeter(client, organization, property, resource, {})
                })
            })

            test('employee from another organization with "canManageMeters" role cannot', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [organization2] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization2, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeters: false,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    const [objCreated] = await createTestPropertyMeter(client, organization2, property, resource)
                })
            })

            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [meter, attrs] = await createTestPropertyMeter(admin, organization, property, resource, {})

                expectValuesOfCommonFields(meter, attrs, admin)
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestPropertyMeter(client, { id: 'id' }, { id: 'id' }, resource)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [meter] = await createTestPropertyMeter(admin, organization, property, resource, {})

                const [obj, attrs] = await updateTestPropertyMeter(admin, meter.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeters: true,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [objCreated] = await createTestPropertyMeter(client, organization, property, resource)

                const [obj, attrs] = await updateTestPropertyMeter(client, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('employee without "canManageMeters" role cannot', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeters: false,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [objCreated] = await createTestPropertyMeter(admin, organization, property, resource)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    const [obj, attrs] = await updateTestPropertyMeter(client, objCreated.id)
                })
            })

            test('employee from another organization with "canManageMeters" role cannot', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [organization2] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization2, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageMeters: false,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [objCreated] = await createTestPropertyMeter(admin, organization2, property, resource)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    const [obj, attrs] = await updateTestPropertyMeter(client, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestPropertyMeter(client, 'id')
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await PropertyMeter.delete(admin, 'id')
                })
            })

            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await PropertyMeter.delete(client, 'id')
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await PropertyMeter.delete(client, 'id')
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const [meter] = await createTestPropertyMeter(admin, organization, property, resource, {})
                const objs = await PropertyMeter.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: meter.id,
                    }),
                ]))
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
                await createTestOrganizationEmployee(admin, organization, client.user, role)

                const [objCreated] = await createTestPropertyMeter(client, organization, property, resource)

                const objs = await PropertyMeter.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: objCreated.id,
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await PropertyMeter.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {

        test('uniqueness within organization', async () => {
            const client = await makeClientWithNewRegisteredAndLoggedInUser()
            const number = faker.lorem.word()

            const [organization] = await createTestOrganization(admin)
            const [organization2] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization, { map: buildingMapJson })
            const [property2] = await createTestProperty(admin, organization, { map: buildingMapJson })
            const [property3] = await createTestProperty(admin, organization2, { map: buildingMapJson })
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                canManageMeters: true,
            })
            const [role2] = await createTestOrganizationEmployeeRole(admin, organization2, {
                canManageMeters: true,
            })
            const [employee] = await createTestOrganizationEmployee(admin, organization, client.user, role)

            await createTestOrganizationEmployee(admin, organization2, client.user, role2)

            await createTestPropertyMeter(client, organization, property, resource, {
                number,
            })

            const [meter] = await createTestPropertyMeter(client, organization2, property3, resource, {
                number,
            })
            expect(meter.id).toMatch(UUID_RE)

            await catchErrorFrom(async () => {
                await createTestPropertyMeter(client, organization, property2, resource, {
                    number,
                })
            }, ({ errors, data }) => {
                expect(errors[0].message).toMatch('duplicate key value violates unique constraint')
                expect(data).toEqual({ 'obj': null })
            })
        })

        test('If automatic must have master-system b2b app', async () => {
            const [organization] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization)
            await expectToThrowValidationFailureError(async () => {
                await createTestPropertyMeter(admin, organization, property, resource, {
                    isAutomatic: true,
                })
            }, AUTOMATIC_METER_NO_MASTER_APP)
            const [b2bApp] = await createTestB2BApp(admin)
            await createTestB2BAppContext(admin, b2bApp, organization)
            const [meter] = await createTestPropertyMeter(admin, organization, property, resource, {
                isAutomatic: true,
                b2bApp: { connect: { id: b2bApp.id } },
            })
            expect(meter).toHaveProperty('id')
            await expectToThrowValidationFailureError(async () => {
                await updateTestPropertyMeter(admin, meter.id, {
                    b2bApp: { disconnectAll: true },
                })
            }, AUTOMATIC_METER_NO_MASTER_APP)
        })
    })
})
