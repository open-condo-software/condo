/**
 * Generated by `createservice user.GetAccessTokenByUserIdService --type queries`
 */
const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { SERVICE } = require('@condo/domains/user/constants/common')
const { ExternalTokenAccessRight } = require('@condo/domains/user/utils/serverSchema')

async function canGetAccessTokenByUserId ({ authentication: { item: user }, data, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type === SERVICE) {
        const tokenAccessRights = await ExternalTokenAccessRight.getAll(context, {
            deletedAt: null,
            type: get(data, 'type'),
            user: { id: user.id },
        }, { first: 1 })

        return tokenAccessRights.length > 0
    }
    
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canGetAccessTokenByUserId,
}