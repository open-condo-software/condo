/**
 * Generated by `createschema user.UserExternalIdentity`
 */
const access = require('@open-condo/keystone/access')
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

async function canReadUserExternalIdentities (args) {
    const { authentication: { item: user } } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (access.userIsAdminOrIsSupport(args)){
        return true
    } else {
        // own identities read
        return { user: { id: user.id } }
    }
}

async function canManageUserExternalIdentities (args) {
    const { authentication: { item: user }, originalInput } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    const isSoftDelete = access.isSoftDelete(originalInput)
    if (access.userIsAdminOrIsSupport(args)){
        return true
    } else if (isSoftDelete) {
        // own identities delete
        return { user: { id: user.id } }
    } else {
        return false
    }
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadUserExternalIdentities,
    canManageUserExternalIdentities,
}
