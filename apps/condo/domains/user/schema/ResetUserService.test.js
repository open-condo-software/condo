/**
 * Generated by `createservice user.ResetUserService --type mutations`
 */

const faker = require('faker')
const { makeLoggedInAdminClient } = require('@core/keystone/test.utils')

const { makeClient } = require('@core/keystone/test.utils')

const { expectToThrowMutationError, catchErrorFrom } = require('@condo/domains/common/utils/testSchema')

const { DELETED_USER_NAME } = require('@condo/domains/user/constants')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    registerNewUser,
    resetUserByTestClient,
    makeClientWithSupportUser,
    UserAdmin,
} = require('@condo/domains/user/utils/testSchema')

 
describe('ResetUserService', () => {
    test('support can reset user', async () => {
        const support = await makeClientWithSupportUser()
        const [user] = await registerNewUser(await makeClient())

        const payload = {
            id: user.id,
        }

        await resetUserByTestClient(support, payload)

        // We use admin context here, since support does not have access to email and phone fields
        const adminClient = await makeLoggedInAdminClient()
        const [resetUser] = await UserAdmin.getAll(adminClient, { id: user.id })
        expect(resetUser.id).toEqual(user.id)
        expect(resetUser.name).toEqual(DELETED_USER_NAME)
        expect(resetUser.phone).toBeNull()
        expect(resetUser.email).toBeNull()
        expect(resetUser.isPhoneVerified).toEqual(false)
        expect(resetUser.isEmailVerified).toEqual(false)
    })
 
    test('support cant reset non existing user', async () => {
        const supportClient = await makeClientWithSupportUser()
        const userId = faker.random.uuid()
        const payload = {
            id: userId,
        }

        await expectToThrowMutationError(async () => {
            await resetUserByTestClient(supportClient, payload)
        }, 'No user found for this id')
    })
 
    test('user cant reset user', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const payload = {
            id: client.user.id,
        }

        await catchErrorFrom(async () => {
            await resetUserByTestClient(client, payload)
        }, (e) => {
            expect(e.errors[0].name).toContain('AccessDeniedError')
        })
    })

    test('anonymous cant reset user', async () => {
        const client = await makeClient()
        const userToResetId = faker.random.uuid()
        await catchErrorFrom(async () => {
            await resetUserByTestClient(client, { id: userToResetId })
        }, (e) => {
            expect(e.errors[0].name).toContain('AuthenticationError')
        })
    })
})