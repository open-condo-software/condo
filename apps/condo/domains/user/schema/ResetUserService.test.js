/**
 * Generated by `createservice user.ResetUserService --type mutations`
 */
import { expectToThrowMutationError } from '@condo/domains/common/utils/testSchema'
import { DELETED_USER_NAME } from '@condo/domains/user/constants'

const faker = require('faker')
const { makeClientWithSupportUser } = require(
    '@condo/domains/user/utils/testSchema')

const { makeLoggedInClient } = require('@condo/domains/user/utils/testSchema')
const { makeClient } = require('@core/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToResult, expectToThrowAuthenticationErrorToResult } = require('@condo/domains/common/utils/testSchema')

const { resetUserByTestClient } = require('@condo/domains/user/utils/testSchema')
 
describe('ResetUserService', () => {
    test('support can reset user', async () => {
        const supportClient = await makeClientWithSupportUser()
        const userClient = await makeLoggedInClient()
        const payload = {
            id: userClient.user.id,
        }

        const result = await resetUserByTestClient(supportClient, payload)

        expect(result.name).toEqual(DELETED_USER_NAME)
        expect(result.phone).toBeNull()
        expect(result.email).toBeNull()
        expect(result.isPhoneVerified).toEqual(false)
        expect(result.isEmailVerified).toEqual(false)
    })
 
    test('support cant reset non existing user', async () => {
        const supportClient = await makeClientWithSupportUser()
        const userId = faker.random.uuid()
        const payload = {
            id: userId,
        }

        await expectToThrowMutationError(async () => {
            await resetUserByTestClient(supportClient, payload)
        }, 'No user found for this id')
    })
 
    test('user cant reset user', async () => {
        const client = await makeLoggedInClient()
        const payload = {
            id: client.user.id,
        }
        await expectToThrowAccessDeniedErrorToResult(async () => {
            await resetUserByTestClient(client, payload)
        })
    })

    test('anonymous cant reset user', async () => {
        const client = await makeClient()
        const userToResetId = faker.random.uuid()
        await expectToThrowAuthenticationErrorToResult(async () => {
            await resetUserByTestClient(client, { id: userToResetId })
        })
    })
})