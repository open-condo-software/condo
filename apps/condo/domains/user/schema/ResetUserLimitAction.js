/**
 * Generated by `createschema user.ResetUserLimitAction 'type:Select:auth;identifier:Text;reason:Text'`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { NOT_FOUND, WRONG_FORMAT } = require('@condo/domains/common/constants/errors')
const { IPv4_REGEX } = require('@condo/domains/common/constants/regexps')
const { normalizePhone } = require('@condo/domains/common/utils/phone')
const access = require('@condo/domains/user/access/ResetUserLimitAction')
const { RESET_USER_LIMIT_ACTION_TYPES, AUTH_COUNTER_TYPE } = require('@condo/domains/user/constants/common')
const { RedisGuard } = require('@condo/domains/user/utils/serverSchema/guards')


const redisGuard = new RedisGuard()

const ERRORS = {
    KEY_NOT_FOUND: {
        mutation: 'createResetUserLimitAction',
        variable: ['data', 'identifier'],
        code: BAD_USER_INPUT,
        type: NOT_FOUND,
        message: 'Specified identifier does not exist for limit type.',
    },
    INVALID_IDENTIFIER: {
        mutation: 'createResetUserLimitAction',
        variable: ['data', 'identifier'],
        code: BAD_USER_INPUT,
        type: WRONG_FORMAT,
        message: 'Specified identifier is not valid for limit type.',
    },
}

const ResetUserLimitAction = new GQLListSchema('ResetUserLimitAction', {
    schemaDoc: 'A model for resetting user counters limit. ' +
        'To reset a counter limit, you need to create a new object and specify the counter type, identifier, and reason for the reset.',
    fields: {
        type: {
            schemaDoc: `Type of counter to be reset.
                Possible values: 
                1. Auth â€“ counter for sending verification SMS based on IP or phone number.
             `,
            type: 'Select',
            dataType: 'string',
            options: RESET_USER_LIMIT_ACTION_TYPES,
            isRequired: true,
        },
        identifier: {
            schemaDoc: `The identifier of the counter for a specific type.
                Possible values: 
                1. For the 'Auth' type, it can be: an IP address or a phone number.
            `,
            type: 'Text',
            isRequired: true,
            hooks: {
                validateInput: async ({ resolvedData, context }) => {
                    const { type, identifier } = resolvedData

                    if (type === AUTH_COUNTER_TYPE) {
                        const isValidPhone = Boolean(normalizePhone(identifier))
                        const isValidIP = IPv4_REGEX.test(identifier)

                        if (!isValidIP && !isValidPhone) {
                            throw new GQLError(ERRORS.INVALID_IDENTIFIER, context)
                        }
                    }

                    const isKeyExists = await redisGuard.checkCounterExistence(`${type}:${identifier}`)
                    if (!isKeyExists) {
                        throw new GQLError(ERRORS.KEY_NOT_FOUND, context)
                    }
                },
            },
        },
        reason: {
            schemaDoc: 'Reason for resetting the limit',
            type: 'Text',
            isRequired: true,
        },
    },
    hooks: {
        afterChange: async ({ originalInput }) => {
            const { type, identifier } = originalInput

            await redisGuard.deleteCounter(`${type}:${identifier}`)
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadResetUserLimitActions,
        create: access.canManageResetUserLimitActions,
        update: false,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ResetUserLimitAction,
    ERRORS,
}