/**
 * Generated by `createservice user.RegisterNewServiceUserService`
 */
const faker = require('faker')

const { makeLoggedInAdminClient } = require('@core/keystone/test.utils')

const {
    registerNewServiceUserByTestClient,
    createTestUser,
    createTestEmail,
    makeLoggedInClient,
    makeClientWithSupportUser,
} = require('@condo/domains/user/utils/testSchema')
const { EMAIL_ALREADY_REGISTERED_ERROR } = require('@condo/domains/user/constants/errors')
const { REGISTER_NEW_SERVICE_USER_MUTATION } = require('@condo/domains/user/gql')

describe('RegisterNewServiceUserService', () => {
    test('register new service user', async () => {
        const client = await makeLoggedInAdminClient()
        const name = faker.fake('{{name.suffix}} {{name.firstName}} {{name.lastName}}')
        const [user] = await registerNewServiceUserByTestClient(client, { name })
        expect(user.id).toMatch(/^[0-9a-zA-Z-_]+$/)
        expect(user.name).toMatch(name)
    })
    test('register user with existed email', async () => {
        const admin = await makeLoggedInAdminClient()
        const [, userAttrs] = await createTestUser(admin)
        const name = faker.fake('{{name.suffix}} {{name.firstName}} {{name.lastName}}')
        const password = faker.internet.password()
        const email = userAttrs.email
        const dv = 1
        const sender = { dv: 1, fingerprint: 'tests' }
        const { errors } = await admin.mutate(REGISTER_NEW_SERVICE_USER_MUTATION, {
            data: {
                dv,
                sender,
                name,
                password,
                email,
            },
        })
        expect(JSON.stringify(errors)).toMatch(EMAIL_ALREADY_REGISTERED_ERROR)
    })
    test('support create service user', async () => {
        const client = await makeClientWithSupportUser()
        const name = faker.fake('{{name.suffix}} {{name.firstName}} {{name.lastName}}')
        const [user] = await registerNewServiceUserByTestClient(client, { name })
        expect(user.id).toMatch(/^[0-9a-zA-Z-_]+$/)
        expect(user.name).toMatch(name)
    })
    test('user can not create service user', async () => {
        const client = await makeLoggedInClient()
        const name = faker.fake('{{name.suffix}} {{name.firstName}} {{name.lastName}}')
        const password = faker.internet.password()
        const email = createTestEmail()
        const dv = 1
        const sender = { dv: 1, fingerprint: 'tests' }
        const { errors: [error] } = await client.mutate(REGISTER_NEW_SERVICE_USER_MUTATION, {
            data: {
                dv,
                sender,
                name,
                password,
                email,
            },
        })
        expect(error).toMatchObject({
            name: 'AccessDeniedError',
            message: 'You do not have access to this resource',
            path: ['result'],
        })
    })
})