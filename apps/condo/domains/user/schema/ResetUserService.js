/**
 * Generated by `createservice user.ResetUserService --type mutations`
 */

const { GQLCustomSchema, getById } = require('@core/keystone/schema')

const access = require('@condo/domains/user/access/ResetUserService')
const { DELETED_USER_NAME } = require('@condo/domains/user/constants')
const { User } = require('@condo/domains/user/utils/serverSchema')

const { DV_UNKNOWN_VERSION_ERROR, NOT_FOUND_ERROR } = require('@condo/domains/common/constants/errors')


const ResetUserService = new GQLCustomSchema('ResetUserService', {
    types: [
        {
            access: true,
            type: 'input ResetUserInput { dv: Int!, sender: JSON! id: String!}',
        },
        {
            access: true,
            type: 'type ResetUserOutput { status: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canResetUser,
            schema: 'resetUser(data: ResetUserInput!): ResetUserOutput!',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const { dv, id } = data

                if (dv !== 1) {
                    throw new Error(`${DV_UNKNOWN_VERSION_ERROR}dv] Unknown \`dv\``)
                }

                const user = await getById('User', id)
                if (!user) {
                    throw new Error(`${NOT_FOUND_ERROR}user] No user found for this id`)
                }

                const adminContext = await context.createContext({ skipAccessControl: true })
                await User.update(adminContext, id, {
                    phone: null,
                    email: null,
                    password: null,
                    name: DELETED_USER_NAME,
                    isPhoneVerified: false,
                    isEmailVerified: false,
                })

                return { status: 'ok' }
            },
        },
    ],
    
})

module.exports = {
    ResetUserService,
}
