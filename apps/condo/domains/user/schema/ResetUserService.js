/**
 * Generated by `createservice user.ResetUserService --type mutations`
 */

/**
 * Reset user mutation removes phone, email and password from user, making it impossible to use this user.
 *
 * Mutation also sets name to "Deleted User" and do not set deletedAt.
 * Reason for this is the fact that if we soft-delete user, then we are about to face a lot of "user is null" kind of errors in unpredictable places.
 * Name is changed so we can distinguish reset users.
 *
 * Telegram uses the same approach: if user is deleted, then all his messages and other content are available, but his name is now "Deleted user"
 *
 * Primary use cases:
 * 1. QA Wants to test SMS services, but dont want to get multiple phone numbers
 * 2. User wants to remove all his data from our system.
 */

const { GQLCustomSchema, getById } = require('@core/keystone/schema')

const access = require('@condo/domains/user/access/ResetUserService')
const { DELETED_USER_NAME } = require('@condo/domains/user/constants')
const { User } = require('@condo/domains/user/utils/serverSchema')

const { DV_UNKNOWN_VERSION_ERROR, NOT_FOUND_ERROR } = require('@condo/domains/common/constants/errors')


const ResetUserService = new GQLCustomSchema('ResetUserService', {
    types: [
        {
            access: true,
            type: 'input ResetUserInput { dv: Int!, sender: SenderField! id: UserWhereUniqueInput!}',
        },
        {
            access: true,
            type: 'type ResetUserOutput { status: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canResetUser,
            schema: 'resetUser(data: ResetUserInput!): ResetUserOutput!',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const { dv, id } = data

                if (dv !== 1) {
                    throw new Error(`${DV_UNKNOWN_VERSION_ERROR}dv] Unknown \`dv\``)
                }

                const user = await getById('User', id)
                if (!user) {
                    throw new Error(`${NOT_FOUND_ERROR}user] No user found for this id`)
                }

                //const adminContext = await context.createContext({ skipAccessControl: true })
                await User.update(context, id, {
                    phone: null,
                    email: null,
                    password: null,
                    name: DELETED_USER_NAME,
                    isPhoneVerified: false,
                    isEmailVerified: false,
                    importId: null,
                    importRemoteSystem: null,
                })

                return { status: 'ok' }
            },
        },
    ],
    
})

module.exports = {
    ResetUserService,
}
