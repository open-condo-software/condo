/**
 * Generated by `createservice user.VerifyUserEmailService --type mutations`
 */

const { faker } = require('@faker-js/faker')

const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowAuthenticationErrorToResult,
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowGQLErrorToResult,
} = require('@open-condo/keystone/test.utils')

const {
    verifyUserEmailByTestClient,
    ConfirmEmailAction,
    createTestConfirmEmailAction,
    UserAdmin,
    updateTestUser,
    makeClientWithStaffUser,
} = require('@condo/domains/user/utils/testSchema')
const { TOKEN_TYPES, generateToken } = require('@condo/domains/user/utils/tokens')

 
describe('VerifyUserEmailService', () => {
    let adminClient

    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
    })

    describe('Accesses', () => {
        describe('User', () => {
            test('Can execute', async () => {
                const staffClient = await makeClientWithStaffUser()
                expect(staffClient.user.isEmailVerified).toBeFalsy()
                const [confirmEmailAction] = await createTestConfirmEmailAction(adminClient, {
                    isEmailVerified: true,
                    email: staffClient.userAttrs.email,
                })
                const [result] = await verifyUserEmailByTestClient(staffClient, {
                    confirmEmailToken: confirmEmailAction.token,
                })
                expect(result.status).toBe('ok')
            })

            test('Soft-deleted user cannot execute', async () => {
                const staffClient = await makeClientWithStaffUser()
                expect(staffClient.user.isEmailVerified).toBeFalsy()
                const [confirmEmailAction] = await createTestConfirmEmailAction(adminClient, {
                    isEmailVerified: true,
                    email: staffClient.userAttrs.email,
                })
                const [deletedUser] = await updateTestUser(adminClient, staffClient.user.id, {
                    deletedAt: new Date().toISOString(),
                })
                expect(deletedUser.deletedAt).not.toBeNull()
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await verifyUserEmailByTestClient(staffClient, {
                        confirmEmailToken: confirmEmailAction.token,
                    })
                })
            })
        })

        describe('Anonymous', () => {
            test('Cannot execute', async () => {
                const staffClient = await makeClientWithStaffUser()
                expect(staffClient.user.isEmailVerified).toBeFalsy()
                const [confirmEmailAction] = await createTestConfirmEmailAction(adminClient, {
                    isEmailVerified: true,
                    email: staffClient.userAttrs.email,
                })
                const anonymousClient = await makeClient()
                await expectToThrowAuthenticationErrorToResult(async () => {
                    await verifyUserEmailByTestClient(anonymousClient, {
                        confirmEmailToken: confirmEmailAction.token,
                    })
                })
            })
        })
    })

    describe('Basic logic', () => {
        test('Should be set isEmailVerified to true for current user', async () => {
            const staffClient = await makeClientWithStaffUser()
            expect(staffClient.user.isEmailVerified).toBeFalsy()
            const [confirmEmailAction] = await createTestConfirmEmailAction(adminClient, {
                isEmailVerified: true,
                email: staffClient.userAttrs.email,
            })
            const [result] = await verifyUserEmailByTestClient(staffClient, {
                confirmEmailToken: confirmEmailAction.token,
            })
            expect(result.status).toBe('ok')
            const user = await UserAdmin.getOne(adminClient, { id: staffClient.user.id })
            expect(user.email).toBe(staffClient.userAttrs.email)
            expect(user.isEmailVerified).toBeTruthy()
        })

        test('Should be marked ConfirmEmailAction as used after operation', async () => {
            const staffClient = await makeClientWithStaffUser()
            expect(staffClient.user.isEmailVerified).toBeFalsy()
            const [confirmEmailAction] = await createTestConfirmEmailAction(adminClient, {
                isEmailVerified: true,
                email: staffClient.userAttrs.email,
            })
            const [result] = await verifyUserEmailByTestClient(staffClient, {
                confirmEmailToken: confirmEmailAction.token,
            })
            expect(result.status).toBe('ok')
            const user = await UserAdmin.getOne(adminClient, { id: staffClient.user.id })
            expect(user.isEmailVerified).toBeTruthy()
            const confirmEmailAction2 = await ConfirmEmailAction.getOne(adminClient, { token: confirmEmailAction.token })
            expect(confirmEmailAction2.completedAt).not.toBeNull()
        })

        test('throw error if confirmed email not equal current email', async () => {
            const staffClient = await makeClientWithStaffUser()
            const staffClient2 = await makeClientWithStaffUser()
            const [confirmEmailAction2] = await createTestConfirmEmailAction(adminClient, {
                isEmailVerified: true,
                email: staffClient2.userAttrs.email,
            })
            await expectToThrowGQLErrorToResult(async () => {
                await verifyUserEmailByTestClient(staffClient, {
                    confirmEmailToken: confirmEmailAction2.token,
                })
            }, {
                code: 'BAD_USER_INPUT',
                type: 'DIFFERENT_EMAILS',
                message: 'The verified email and actual email cannot be different',
            })
        })

        test('throw error if unsupported token', async () => {
            const staffClient = await makeClientWithStaffUser()
            expect(staffClient.user.isEmailVerified).toBeFalsy()
            await expectToThrowGQLErrorToResult(async () => {
                await verifyUserEmailByTestClient(staffClient, {
                    confirmEmailToken: generateToken(TOKEN_TYPES.SUDO),
                })
            }, {
                code: 'BAD_USER_INPUT',
                type: 'UNSUPPORTED_TOKEN',
                message: 'Unsupported token',
            })
        })

        test('throw error if invalid token', async () => {
            const staffClient = await makeClientWithStaffUser()
            expect(staffClient.user.isEmailVerified).toBeFalsy()
            await expectToThrowGQLErrorToResult(async () => {
                await verifyUserEmailByTestClient(staffClient, {
                    confirmEmailToken: faker.random.alphaNumeric(8),
                })
            }, {
                code: 'BAD_USER_INPUT',
                type: 'INVALID_TOKEN',
                message: 'Invalid token',
            })
        })

        test('throw error if token is not exists', async () => {
            const staffClient = await makeClientWithStaffUser()
            expect(staffClient.user.isEmailVerified).toBeFalsy()
            await expectToThrowGQLErrorToResult(async () => {
                await verifyUserEmailByTestClient(staffClient, {
                    confirmEmailToken: generateToken(TOKEN_TYPES.CONFIRM_EMAIL),
                })
            }, {
                code: 'BAD_USER_INPUT',
                type: 'TOKEN_NOT_FOUND',
                message: 'Unable to find non-expired ConfirmEmailAction by specified token',
            })
        })

        test('throw error if email is not confirmed', async () => {
            const staffClient = await makeClientWithStaffUser()
            expect(staffClient.user.isEmailVerified).toBeFalsy()
            const [confirmEmailAction] = await createTestConfirmEmailAction(adminClient, {
                isEmailVerified: false,
                email: staffClient.userAttrs.email,
            })
            await expectToThrowGQLErrorToResult(async () => {
                await verifyUserEmailByTestClient(staffClient, {
                    confirmEmailToken: confirmEmailAction.token,
                })
            }, {
                code: 'BAD_USER_INPUT',
                type: 'TOKEN_NOT_FOUND',
                message: 'Unable to find non-expired ConfirmEmailAction by specified token',
            })
        })
    })
})
