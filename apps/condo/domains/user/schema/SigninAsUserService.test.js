/**
 * Generated by `createservice user.SigninAsUserService`
 */

const { makeLoggedInAdminClient, makeClient, makeLoggedInClient, expectToThrowGQLErrorToResult } = require('@open-condo/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToResult, expectToThrowAuthenticationErrorToResult } = require('@open-condo/keystone/test.utils')

const { GET_MY_USERINFO } = require('@condo/domains/user/gql')
const { makeClientWithSupportUser, signinAsUserByTestClient } = require('@condo/domains/user/utils/testSchema')

describe('SigninAsUserService', () => {
    describe('Support', () => {
        it('can signin as a simple user', async () => {
            const supportClient = await makeClientWithSupportUser()
            const userClient = await makeLoggedInClient()
            await signinAsUserByTestClient(supportClient, userClient.user.id)
            const { data: { user } } = await supportClient.query(GET_MY_USERINFO)
            expect(user.id).toEqual(userClient.user.id)
        })
        it('can not signin as a support user', async () => {
            const supportClient = await makeClientWithSupportUser()
            const userClient = await makeClientWithSupportUser()
            await expectToThrowGQLErrorToResult(
                async () => await signinAsUserByTestClient(supportClient, userClient.user.id),
                {
                    mutation: 'signinAsUser',
                    code: 'FORBIDDEN',
                    type: 'DENIED_FOR_SUPPORT',
                    message: 'You cannot authenticate for an another support user',
                    messageForUser: 'api.user.signinAsUser.DENIED_FOR_SUPPORT',
                },
            )
        })
        it('can not signin as an admin user', async () => {
            const supportClient = await makeClientWithSupportUser()
            const userClient = await makeLoggedInAdminClient()
            await expectToThrowGQLErrorToResult(
                async () => await signinAsUserByTestClient(supportClient, userClient.user.id),
                {
                    mutation: 'signinAsUser',
                    code: 'FORBIDDEN',
                    type: 'DENIED_FOR_ADMIN',
                    message: 'You cannot authenticate for an another admin user',
                    messageForUser: 'api.user.signinAsUser.DENIED_FOR_ADMIN',
                },
            )
        })
    })
    describe('User', () => {
        it('can not signin as another user', async () => {
            const userClient = await makeLoggedInClient()
            const anotherUserClient = await makeLoggedInClient()
            await expectToThrowAccessDeniedErrorToResult(
                async () => await signinAsUserByTestClient(userClient, anotherUserClient.user.id),
            )
        })
    })
    describe('Anonymous', () => {
        it('has no access to action', async () => {
            const userClient = await makeLoggedInClient()
            const client = await makeClient()
            await expectToThrowAuthenticationErrorToResult(
                async () => await signinAsUserByTestClient(client, userClient.user.id),
            )
        })
    })
})
