/**
 * Generated by `createschema user.ConfirmPhoneAction 'phone:Text;token:Text;smsCode:Integer;smsCodeRequestedAt:DateTimeUtc;smsCodeExpiresAt:DateTimeUtc;retries:Integer;isPhoneVerified:Checkbox;requestedAt:DateTimeUtc;expiresAt:DateTimeUtc;completedAt:DateTimeUtc;'`
 */

const { makeClient, makeLoggedInAdminClient, makeLoggedInClient } = require('@core/keystone/test.utils')
const { 
    createTestPhone,
    createTestUser,
    ConfirmPhoneAction, 
    createTestConfirmPhoneAction, 
    updateTestConfirmPhoneAction,
} = require('@condo/domains/user/utils/testSchema')
const { 
    CONFIRM_PHONE_ACTION_EXPIRED,
    CONFIRM_PHONE_SMS_CODE_EXPIRED,
    CONFIRM_PHONE_SMS_CODE_VERIFICATION_FAILED,
    CONFIRM_PHONE_SMS_CODE_MAX_RETRIES_REACHED,
} = require('@condo/domains/user/constants/errors')

const {
    CONFIRM_PHONE_SMS_MAX_RETRIES,
} = require('@condo/domains/user/constants/common')

const { 
    START_CONFIRM_PHONE_MUTATION, 
    RESEND_CONFIRM_PHONE_SMS_MUTATION, 
    COMPLETE_CONFIRM_PHONE_MUTATION, 
    GET_PHONE_BY_CONFIRM_PHONE_TOKEN_QUERY,
} = require('@condo/domains/user/gql')

describe('ConfirmPhoneAction', () => {
    describe('User', () => {
        it('cant create confirm phone action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            try {
                await createTestConfirmPhoneAction(client)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })
        it('cant read confirm phone actions', async () => {
            const admin = await makeLoggedInAdminClient()
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            try {
                await ConfirmPhoneAction.getAll(client)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['objs'],
                })
                expect(e.data).toEqual({ 'objs': null })
            }            
        })
        it('cant update confirm phone action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestConfirmPhoneAction(admin)
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            const payload = { phone: createTestPhone() }
            console.log('UPDATE', objCreated.id, payload)

            try {
                await updateTestConfirmPhoneAction(client, objCreated.id, payload)
            } catch (e) {
                console.log('e is e', e)
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }            
        })
        it('cant delete confirm phone action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestConfirmPhoneAction(admin)    
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            try {
                await ConfirmPhoneAction.delete(client, objCreated.id)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }            
        })
    })
    describe('Anonymous', () => {
        it('cant create confirm phone action', async () => {
            const client = await makeClient()
            try {
                await createTestConfirmPhoneAction(client)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })
        it('cant read confirm phone actions', async () => {
            const client = await makeClient()
            try {
                await ConfirmPhoneAction.getAll(client)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['objs'],
                })
                expect(e.data).toEqual({ 'objs': null })
            }            
        })
        it('cant update confirm phone action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestConfirmPhoneAction(admin)
            const client = await makeClient()
            const payload = { phone: createTestPhone() }
            try {
                await updateTestConfirmPhoneAction(client, objCreated.id, payload)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }            
        })
        it('cant delete confirm phone action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestConfirmPhoneAction(admin)    
            const client = await makeClient()
            try {
                await ConfirmPhoneAction.delete(client, objCreated.id)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }            
        })
    })
})

describe('ConfirmPhoneAction Service', () => {
    it('can be created by Anonymous', async () => {
        const client = await makeClient()       
        const phone = createTestPhone()
        const { data: { token } } = await client.mutate(START_CONFIRM_PHONE_MUTATION, { phone, dv: 1, sender: { dv: 1, fingerprint: 'tests' } })
        expect(token).not.toHaveLength(0)
    })

    it('throw error when is confirming with wrong sms code', async () => {
        const client = await makeClient()       
        const phone = createTestPhone()
        const { data: { token } }  = await client.mutate(START_CONFIRM_PHONE_MUTATION, { phone, dv: 1, sender: { dv: 1, fingerprint: 'tests' } })
        const wrongLengthSmsCode = 11111
        const res = await client.mutate(COMPLETE_CONFIRM_PHONE_MUTATION, { token, smsCode: wrongLengthSmsCode })
        expect(JSON.stringify(res.errors)).toContain(CONFIRM_PHONE_SMS_CODE_VERIFICATION_FAILED)
    })

    it('should increment retries on failed attempt', async () => {
        const client = await makeClient()       
        const phone = createTestPhone()
        const { data: { token } }  = await client.mutate(START_CONFIRM_PHONE_MUTATION, { phone, dv: 1, sender: { dv: 1, fingerprint: 'tests' } })
        const wrongLengthSmsCode = 11111
        await client.mutate(COMPLETE_CONFIRM_PHONE_MUTATION, { token, smsCode: wrongLengthSmsCode })
        const admin = await makeLoggedInAdminClient()
        const [actionAfter] = await ConfirmPhoneAction.getAll(admin, { token })
        expect(actionAfter.retries).toBe(1)        
    })

    it('marks itself as verified when sms code matches', async () => {
        const client = await makeClient()       
        const admin = await makeLoggedInAdminClient()        
        const phone = createTestPhone()
        const { data: { token } }  = await client.mutate(START_CONFIRM_PHONE_MUTATION, { phone, dv: 1, sender: { dv: 1, fingerprint: 'tests' } })
        const [actionBefore] = await ConfirmPhoneAction.getAll(admin, { token })
        const { data: { status } } = await client.mutate(COMPLETE_CONFIRM_PHONE_MUTATION, { token, smsCode: actionBefore.smsCode })
        expect(status).toBe('ok')
        const [actionAfter] = await ConfirmPhoneAction.getAll(admin, { token })
        expect(actionAfter.isPhoneVerified).toBe(true)
    })

    it('marks itself failed when maximum retries number excided', async () => {
        const client = await makeClient()       
        const phone = createTestPhone()
        const { data: { token } }  = await client.mutate(START_CONFIRM_PHONE_MUTATION, { phone, dv: 1, sender: { dv: 1, fingerprint: 'tests' } })
        const admin = await makeLoggedInAdminClient()
        const [actionBefore] = await ConfirmPhoneAction.getAll(admin, { token })
        await ConfirmPhoneAction.update(admin, actionBefore.id, { retries: CONFIRM_PHONE_SMS_MAX_RETRIES + 1 })
        const res = await client.mutate(COMPLETE_CONFIRM_PHONE_MUTATION, { token, smsCode: actionBefore.smsCode })
        expect(JSON.stringify(res.errors)).toContain(CONFIRM_PHONE_SMS_CODE_MAX_RETRIES_REACHED)
    })
    
    it('throws error when sms code ttl expires', async () => {
        const client = await makeClient()       
        const phone = createTestPhone()
        const { data: { token } }  = await client.mutate(START_CONFIRM_PHONE_MUTATION, { phone, dv: 1, sender: { dv: 1, fingerprint: 'tests' } })
        const admin = await makeLoggedInAdminClient()
        const [actionBefore] = await ConfirmPhoneAction.getAll(admin, { token })
        await ConfirmPhoneAction.update(admin, actionBefore.id, {  smsCodeExpiresAt: actionBefore.smsCodeRequestedAt })
        const res = await client.mutate(COMPLETE_CONFIRM_PHONE_MUTATION, { token, smsCode: actionBefore.smsCode })
        expect(JSON.stringify(res.errors)).toContain(CONFIRM_PHONE_SMS_CODE_EXPIRED)
    })
        
    it('throws error when confirm phone action expires', async () => {
        const client = await makeClient()       
        const phone = createTestPhone()
        const { data: { token } }  = await client.mutate(START_CONFIRM_PHONE_MUTATION, { phone, dv: 1, sender: { dv: 1, fingerprint: 'tests' } })
        const admin = await makeLoggedInAdminClient()
        const [actionBefore] = await ConfirmPhoneAction.getAll(admin, { token })
        await ConfirmPhoneAction.update(admin, actionBefore.id, { expiresAt: actionBefore.requestedAt })
        const res = await client.mutate(COMPLETE_CONFIRM_PHONE_MUTATION, { token, smsCode: actionBefore.smsCode })
        expect(JSON.stringify(res.errors)).toContain(CONFIRM_PHONE_ACTION_EXPIRED)
    })

    it('gives to Anonymous phone number when he asks with token', async () => {
        const client = await makeClient()       
        const phone = createTestPhone()
        const { data: { token } }  = await client.mutate(START_CONFIRM_PHONE_MUTATION, { phone, dv: 1, sender: { dv: 1, fingerprint: 'tests' } })
        const { data: { phone: phoneFromAction } } = await client.query(GET_PHONE_BY_CONFIRM_PHONE_TOKEN_QUERY, { token })
        expect(phone).toBe(phoneFromAction)
    })

    it('should change sms code when resend is invoked', async () => {
        const client = await makeClient()       
        const phone = createTestPhone()
        const { data: { token } }  = await client.mutate(START_CONFIRM_PHONE_MUTATION, { phone, dv: 1, sender: { dv: 1, fingerprint: 'tests' } })
        const admin = await makeLoggedInAdminClient()
        const [actionBefore] = await ConfirmPhoneAction.getAll(admin, { token })
        expect(actionBefore.smsCode).toBeGreaterThan(0)
        await client.mutate(RESEND_CONFIRM_PHONE_SMS_MUTATION, { token, sender: { dv: 1, fingerprint: 'tests' } })
        const [actionAfter] = await ConfirmPhoneAction.getAll(admin, { token })
        expect(actionAfter.smsCode).toBeGreaterThan(0)
        expect(actionAfter.smsCode).not.toEqual(actionBefore.smsCode)        
    })

})
