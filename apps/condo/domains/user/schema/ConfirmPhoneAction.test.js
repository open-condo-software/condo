/**
 * Generated by `createschema user.ConfirmPhoneAction 'phone:Text;token:Text;smsCode:Integer;smsCodeRequestedAt:DateTimeUtc;smsCodeExpiresAt:DateTimeUtc;retries:Integer;isPhoneVerified:Checkbox;requestedAt:DateTimeUtc;expiresAt:DateTimeUtc;completedAt:DateTimeUtc;'`
 */

const {
    makeClient,
    makeLoggedInAdminClient,
    makeLoggedInClient,
    expectToThrowAccessDeniedErrorToObjects,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj,
} = require('@open-condo/keystone/test.utils')

const {
    createTestPhone,
    createTestUser,
    ConfirmPhoneAction,
    createTestConfirmPhoneAction,
    updateTestConfirmPhoneAction,
} = require('@condo/domains/user/utils/testSchema')


describe('ConfirmPhoneAction CRUD', () => {
    describe('User', () => {
        it('cant create confirm phone action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestConfirmPhoneAction(client)
            })
        })
        it('cant read confirm phone actions', async () => {
            const admin = await makeLoggedInAdminClient()
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            await expectToThrowAccessDeniedErrorToObjects(async () => {
                await ConfirmPhoneAction.getAll(client)
            })
        })
        it('cant update confirm phone action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestConfirmPhoneAction(admin)
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            const payload = { phone: createTestPhone() }
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestConfirmPhoneAction(client, objCreated.id, payload)
            })
        })
        it('cant delete confirm phone action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestConfirmPhoneAction(admin)
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await ConfirmPhoneAction.delete(client, objCreated.id)
            })
        })
    })
    describe('Anonymous', () => {
        it('cant create confirm phone action', async () => {
            const client = await makeClient()
            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestConfirmPhoneAction(client)
            })
        })
        it('cant read confirm phone actions', async () => {
            const client = await makeClient()
            await expectToThrowAuthenticationErrorToObjects(async () => {
                await ConfirmPhoneAction.getAll(client)
            })
        })
        it('cant update confirm phone action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestConfirmPhoneAction(admin)
            const client = await makeClient()
            const payload = { phone: createTestPhone() }
            await expectToThrowAuthenticationErrorToObj(async () =>{
                await updateTestConfirmPhoneAction(client, objCreated.id, payload)
            })
        })
        it('cant delete confirm phone action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestConfirmPhoneAction(admin)
            const client = await makeClient()
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await ConfirmPhoneAction.delete(client, objCreated.id)
            })
        })
    })
})

