/**
 * Generated by `createservice user.SigninResidentUserService`
 */
const { GQLCustomSchema } = require('@core/keystone/schema')
const { getSchemaCtx } = require('@core/keystone/schema')
const access = require('@condo/domains/user/access/SigninResidentUserService')
const {
    CONFIRM_PHONE_ACTION_EXPIRED,
} = require('@condo/domains/user/constants/errors')
const { ConfirmPhoneAction: ConfirmPhoneActionServerUtils, User: UserServerUtils } = require('@condo/domains/user/utils/serverSchema')
const { getRandomString } = require('@core/keystone/test.utils')

const SigninResidentUserService = new GQLCustomSchema('SigninResidentUserService', {
    types: [
        {
            access: true,
            type: 'input SigninResidentUserInput { dv: Int!, sender: JSON!, token: String! }',
        },
        {
            access: true,
            type: 'type SigninResidentUserOutput { user: User, token: String! }',
        },
    ],

    mutations: [
        {
            access: access.canSigninResidentUser,
            schema: 'signinResidentUser(data: SigninResidentUserInput!): SigninResidentUserOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { dv, sender, token } } = args
                const userData = {
                    dv,
                    sender,
                    type: 'resident',
                    isPhoneVerified: false,
                }
                const [action] = await ConfirmPhoneActionServerUtils.getAll(context,
                    {
                        token,
                        expiresAt_gte: new Date().toISOString(),
                        completedAt: null,
                        isPhoneVerified: true,
                    }
                )
                if (!action) {
                    throw new Error(`${CONFIRM_PHONE_ACTION_EXPIRED}] Unable to find confirm phone action`)
                }
                userData.phone = action.phone
                userData.type = 'resident'
                userData.isPhoneVerified = true
                userData.password = getRandomString()
                let [user] = await UserServerUtils.getAll(context, { type: 'resident', phone: userData.phone })
                if (!user) {
                    // TODO(zuch): fix bug when user can not be created with server utils becaues of createAt and updatedAt fields
                    // user = await User.create(context, userData)
                    const { data: { result: createdUser }, errors: createErrors } = await context.executeGraphQL({
                        context: context.createContext({ skipAccessControl: true }),
                        query: `
                            mutation create($data: UserCreateInput!) {
                              result: createUser(data: $data) {
                                id
                                name
                              }
                            }
                        `,
                        variables: { data: userData },
                    })
                    if (createErrors) {
                        const msg = '[error] Unable to create user'
                        throw new Error(msg)
                    }
                    user = createdUser
                }
                await ConfirmPhoneActionServerUtils.update(context, action.id, { completedAt: new Date().toISOString() })
                const { keystone } = await getSchemaCtx('User')
                const sessionToken = await context.startAuthedSession({ item: user, list: keystone.lists['User'] })
                const result = {
                    user,
                    token: sessionToken,
                }
                return result
            },
        },
    ],

})

module.exports = {
    SigninResidentUserService,
}
