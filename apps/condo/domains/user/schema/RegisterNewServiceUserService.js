/**
 * Generated by `createservice user.RegisterNewServiceUserService`
 */

const { GQLCustomSchema, getById} = require('@core/keystone/schema')
const access = require('@condo/domains/user/access/RegisterNewServiceUserService')
const {STAFF, MIN_PASSWORD_LENGTH} = require("@condo/domains/user/constants/common");
const {
    MIN_PASSWORD_LENGTH_ERROR
} = require("@condo/domains/user/constants/errors");
const { ensureNotExists } = require('@condo/domains/user/utils/ensureNotExists')


const RegisterNewServiceUserService = new GQLCustomSchema('RegisterNewServiceUserService', {
    types: [
        {
            access: true,
            type: 'input RegisterNewServiceUserInput {  dv: Int!, sender: SenderFieldInput!, name: String!, email: String!, password: String! meta: JSON }',
        },
    ],
    
    mutations: [
        {
            access: access.canRegisterNewServiceUser,
            schema: 'registerNewServiceUser(data: RegisterNewServiceUserInput!): User',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { ...restUserData } = data
                const userData = {
                    ...restUserData,
                    type: STAFF,
                }
                await ensureNotExists(context, 'email', userData.email)
                if (userData.password.length < MIN_PASSWORD_LENGTH) {
                    throw new Error(`${MIN_PASSWORD_LENGTH_ERROR}] Password length less then ${MIN_PASSWORD_LENGTH} character`)
                }
                // TODO(zuch): fix bug when user can not be created because of createAt and updatedAt fields
                const { data: { result: user }, errors: createErrors } = await context.executeGraphQL({
                    context: context.createContext({ skipAccessControl: true }),
                    query: `
                        mutation create($data: UserCreateInput!) {
                          result: createUser(data: $data) {
                            id
                            name
                            email
                            isAdmin
                            isActive
                          }
                        }
                    `,
                    variables: { data: userData },
                })
                if (createErrors) {
                    const msg = '[error] Unable to create user'
                    throw new Error(msg)
                }
                // end of TODO
                return await getById('User', user.id)
            },
        },
    ],
    
})

module.exports = {
    RegisterNewServiceUserService,
}
