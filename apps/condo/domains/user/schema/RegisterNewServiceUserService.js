/**
 * Generated by `createservice user.RegisterNewServiceUserService`
 */
const faker = require('faker')

const { GQLCustomSchema } = require('@core/keystone/schema')

const access = require('@condo/domains/user/access/RegisterNewServiceUserService')
const { SERVICE } = require('@condo/domains/user/constants/common')
const { User } = require('@condo/domains/user/utils/serverSchema')


const RegisterNewServiceUserService = new GQLCustomSchema('RegisterNewServiceUserService', {
    types: [
        {
            access: true,
            type: 'input RegisterNewServiceUserInput { dv: Int!, sender: SenderFieldInput!, name: String!, email: String!, meta: JSON }',
        },
        {
            access: true,
            type: 'type RegisterNewServiceUserOutput { email: String!, password: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canRegisterNewServiceUser,
            schema: 'registerNewServiceUser(data: RegisterNewServiceUserInput!): RegisterNewServiceUserOutput',
            resolver: async (parent, args, context) => {
                const userData = {
                    ...args.data,
                    type: SERVICE,
                    password: faker.internet.password()
                }
                await User.create(context, userData)
                return { email: userData.email, password: userData.password}
            },
        },
    ],
    
})

module.exports = {
    RegisterNewServiceUserService,
}
