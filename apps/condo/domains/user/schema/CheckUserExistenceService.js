/**
 * Generated by `createservice user.CheckUserExistenceService --type queries`
 */

const get = require('lodash/get')

const { GQLError } = require('@open-condo/keystone/errors')
const { checkDvAndSender } = require('@open-condo/keystone/plugins/dvAndSender')
const { GQLCustomSchema, getByCondition } = require('@open-condo/keystone/schema')

const { NOT_FOUND, COMMON_ERRORS } = require('@condo/domains/common/constants/errors')
const access = require('@condo/domains/user/access/CheckUserExistenceService')
const { ConfirmPhoneAction } = require('@condo/domains/user/utils/serverSchema')
const {
    checkDailyRequestLimitCountersByIp,
    checkDailyRequestLimitCountersByPhone,
} = require('@condo/domains/user/utils/serverSchema/requestLimitHelpers')


/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    TOKEN_NOT_FOUND: {
        query: 'checkUserExistence',
        variable: ['data', 'token'],
        code: NOT_FOUND,
        type: 'TOKEN_NOT_FOUND',
        message: 'Token not found',
    },
    DV_VERSION_MISMATCH: {
        ...COMMON_ERRORS.DV_VERSION_MISMATCH,
        query: 'checkUserExistence',
    },
    WRONG_SENDER_FORMAT: {
        ...COMMON_ERRORS.WRONG_SENDER_FORMAT,
        query: 'checkUserExistence',
    },
}

const CheckUserExistenceService = new GQLCustomSchema('CheckUserExistenceService', {
    types: [
        {
            access: true,
            type: 'input CheckUserExistenceInput { dv: Int!, sender: SenderFieldInput!, confirmActionToken: ID!, userType: UserTypeType! }',
        },
        {
            access: true,
            type: 'type CheckUserExistenceOutput { userExists: Boolean!, nameSet: Boolean!, emailSet: Boolean!, phoneSet: Boolean!, passwordSet: Boolean! }',
        },
    ],

    queries: [
        {
            access: access.canCheckUserExistence,
            schema: 'checkUserExistence(data: CheckUserExistenceInput!): CheckUserExistenceOutput',
            doc: {
                summary: 'Using an action token with a verified phone number,' +
                    ' checks whether a user with the specified type (resident, staff, service) is registered.\n' +
                    'As a result, information about the completion of some important fields (name, email, phone, password) is also returned.',
                errors: ERRORS,
            },
            resolver: async (parent, args, context) => {
                const { data } = args
                const { confirmActionToken, userType } = data

                await checkDailyRequestLimitCountersByIp(context, 'checkUserExistence', context.req.ip)

                checkDvAndSender(data, ERRORS.DV_VERSION_MISMATCH, ERRORS.WRONG_SENDER_FORMAT, context)

                if (!confirmActionToken) throw new GQLError(ERRORS.TOKEN_NOT_FOUND, context)

                const action = await ConfirmPhoneAction.getOne(context,
                    {
                        token: confirmActionToken,
                        expiresAt_gte: new Date().toISOString(),
                        completedAt: null,
                        isPhoneVerified: true,
                        deletedAt: null,
                    },
                )
                if (!action) throw new GQLError(ERRORS.TOKEN_NOT_FOUND, context)

                await checkDailyRequestLimitCountersByPhone(context, 'checkUserExistence', action.phone)

                const user = await getByCondition('User', {
                    type: userType,
                    phone: action.phone,
                    deletedAt: null,
                })

                const result = {
                    userExists: false,
                    nameSet: false,
                    emailSet: false,
                    phoneSet: false,
                    passwordSet: false,
                }

                if (!user) return result

                result.userExists = true
                result.nameSet = Boolean(get(user, 'name', null))
                result.emailSet = Boolean(get(user, 'email', null))
                result.phoneSet = Boolean(get(user, 'phone', null))
                result.passwordSet = Boolean(get(user, 'password', null))

                return result
            },
        },
    ],
})

module.exports = {
    CheckUserExistenceService,
    ERRORS,
}
