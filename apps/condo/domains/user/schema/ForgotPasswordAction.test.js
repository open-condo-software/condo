/**
 * Generated by `createschema user.ForgotPasswordAction 'user:Relationship:User:CASCADE; token:Text; requestedAt:DateTimeUtc; expiresAt:DateTimeUtc; usedAt:DateTimeUtc;'`
 */

const { makeLoggedInClient } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects } = require('@condo/domains/common/utils/testSchema')
const { ForgotPasswordAction, createTestForgotPasswordAction, updateTestForgotPasswordAction, createTestUser } = require('@condo/domains/user/utils/testSchema')

describe('ForgotPasswordAction', () => {
    describe('User', () => {
        it('cannot create', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestForgotPasswordAction(client, user)
            })
        })

        it('cannot read', async () => {
            const admin = await makeLoggedInAdminClient()
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            await expectToThrowAccessDeniedErrorToObjects(async () => {
                await ForgotPasswordAction.getAll(client)
            })
        })

        it('cannot update', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)

            const [objCreated] = await createTestForgotPasswordAction(admin, user)
            const usedAt = new Date(Date.now()).toISOString()
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestForgotPasswordAction(client, objCreated.id, { usedAt })
            })
        })

        it('cannot delete', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)

            const [objCreated] = await createTestForgotPasswordAction(admin, user)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await ForgotPasswordAction.delete(client, objCreated.id)
            })
        })
    })
    describe('Anonymous', () => {
        it('cannot create', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user] = await createTestUser(admin)
            const client = await makeClient()
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestForgotPasswordAction(client, user)
            })
        })

        it('cannot read', async () => {
            const client = await makeClient()
            await expectToThrowAccessDeniedErrorToObjects(async () => {
                await ForgotPasswordAction.getAll(client)
            })
        })

        it('cannot update', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user] = await createTestUser(admin)
            const client = await makeClient()

            const [objCreated] = await createTestForgotPasswordAction(admin, user)
            const usedAt = new Date(Date.now()).toISOString()
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestForgotPasswordAction(client, objCreated.id, { usedAt })
            })
        })

        it('cannot delete', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user] = await createTestUser(admin)
            const client = await makeClient()

            const [objCreated] = await createTestForgotPasswordAction(admin, user)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await ForgotPasswordAction.delete(client, objCreated.id)
            })
        })
    })
})

