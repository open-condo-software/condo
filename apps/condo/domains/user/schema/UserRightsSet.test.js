/**
 * Generated by `createschema user.UserRightsSet 'name:Text'`
 */

const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAccessDeniedErrorToObjects,
} = require('@open-condo/keystone/test.utils')

const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const {
    UserRightsSet,
    createTestUserRightsSet,
    updateTestUserRightsSet,
    updateTestUser,
} = require('@condo/domains/user/utils/testSchema')

describe('UserRightsSet', () => {
    let admin
    let support
    let user
    let anonymous
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()
    })
    describe('CRUD tests', () => {
        describe('Create', () => {
            test('Admin can', async () => {
                const [rightsSet] = await createTestUserRightsSet(admin)
                expect(rightsSet).toHaveProperty('id')
            })
            test('Support can', async () => {
                const [rightsSet] = await createTestUserRightsSet(support)
                expect(rightsSet).toHaveProperty('id')
            })
            test('Other users cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestUserRightsSet(user)
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestUserRightsSet(anonymous)
                })
            })
        })
        describe('Read', () => {
            let rightsSet
            beforeAll(async () => {
                [rightsSet] = await createTestUserRightsSet(admin)
            })
            test('Admin can read any right set', async () => {
                const rightsSets = await UserRightsSet.getAll(admin, { id: rightsSet.id })
                expect(rightsSets).toHaveLength(1)
                expect(rightsSets).toEqual([
                    expect.objectContaining({ id: rightsSet.id }),
                ])
            })
            test('Support can read any right set', async () => {
                const rightsSets = await UserRightsSet.getAll(support, { id: rightsSet.id })
                expect(rightsSets).toHaveLength(1)
                expect(rightsSets).toEqual([
                    expect.objectContaining({ id: rightsSet.id }),
                ])
            })
            test('Other users can read only theirs current rights set', async () => {
                const [userSet] = await createTestUserRightsSet(admin)
                const anotherUser = await makeClientWithNewRegisteredAndLoggedInUser({
                    rightsSet: { connect: { id: userSet.id } },
                })
                const allSets = await UserRightsSet.getAll(anotherUser, {})
                expect(allSets).toHaveLength(1)
                expect(allSets).toEqual([
                    expect.objectContaining({ id: userSet.id }),
                ])

                const [updatedUser] = await updateTestUser(admin, anotherUser.user.id, {
                    rightsSet: { disconnectAll: true },
                })
                expect(updatedUser).toHaveProperty('rightsSet', null)
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await UserRightsSet.getAll(anotherUser, {})
                })

                const [addedUser] = await updateTestUser(admin, anotherUser.user.id, {
                    rightsSet: { connect: { id: userSet.id } },
                })
                expect(addedUser).toHaveProperty(['rightsSet', 'id'], userSet.id)

                const [deletedSet] = await updateTestUserRightsSet(admin, userSet.id, {
                    deletedAt: dayjs().toISOString(),
                })
                expect(deletedSet.deletedAt).not.toBeNull()
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await UserRightsSet.getAll(anotherUser, {})
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await UserRightsSet.getAll(anonymous, {})
                })
            })
        })
        describe('Update', () => {
            let rightsSet
            beforeAll(async () => {
                [rightsSet] = await createTestUserRightsSet(support)
            })
            test('Admin can', async () => {
                const name = faker.lorem.words(3)
                const [updated] = await updateTestUserRightsSet(admin, rightsSet.id, { name })
                expect(updated).toHaveProperty('name', name)
            })
            test('Support can', async () => {
                const name = faker.lorem.words(3)
                const [updated] = await updateTestUserRightsSet(support, rightsSet.id, { name })
                expect(updated).toHaveProperty('name', name)
            })
            test('Other users cannot', async () => {
                const name = faker.lorem.words(3)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserRightsSet(user, rightsSet.id, { name })
                })
            })
            test('Anonymous cannot', async () => {
                const name = faker.lorem.words(3)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestUserRightsSet(anonymous, rightsSet.id, { name })
                })
            })
        })
        describe('Soft-delete', () => {
            let rightsSet
            beforeEach(async () => {
                [rightsSet] = await createTestUserRightsSet(support)
            })
            test('Admin can', async () => {
                const [updated] = await updateTestUserRightsSet(admin, rightsSet.id, { deletedAt: dayjs().toISOString() })
                expect(updated).toHaveProperty('deletedAt')
                expect(updated.deletedAt).not.toBeNull()
            })
            test('Support can', async () => {
                const [updated] = await updateTestUserRightsSet(support, rightsSet.id, { deletedAt: dayjs().toISOString() })
                expect(updated).toHaveProperty('deletedAt')
                expect(updated.deletedAt).not.toBeNull()
            })
            test('Other users cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserRightsSet(user, rightsSet.id, { deletedAt: dayjs().toISOString() })
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestUserRightsSet(anonymous, rightsSet.id, { deletedAt: dayjs().toISOString() })
                })
            })
        })
        test('Hard-delete is not allowed', async () => {
            const [rightsSet] = await createTestUserRightsSet(admin)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await UserRightsSet.delete(admin, rightsSet.id)
            })
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await UserRightsSet.delete(support, rightsSet.id)
            })
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await UserRightsSet.delete(user, rightsSet.id)
            })
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await UserRightsSet.delete(anonymous, rightsSet.id)
            })
        })
    })
})
