/**
 * Generated by `createschema user.ExternalTokenAccessRight 'type:Text; user:Relationship:User:CASCADE;'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, expectToThrowAccessDeniedErrorToObjects } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { SBBOL_IDENTITY_TYPE } = require('@condo/domains/user/constants')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { ExternalTokenAccessRight, createTestExternalTokenAccessRight, updateTestExternalTokenAccessRight } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithServiceUser } = require('@condo/domains/user/utils/testSchema')

describe('ExternalTokenAccessRight', () => {
    let admin, service, user
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        service = await makeClientWithServiceUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                // 1) prepare data

                // 2) action
                const [obj, attrs] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                // 3) check
                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.user.id).toEqual(service.user.id)
                expect(obj.type).toEqual(SBBOL_IDENTITY_TYPE)
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestExternalTokenAccessRight(client, service.user, SBBOL_IDENTITY_TYPE)
                })
            })

            test('user can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestExternalTokenAccessRight(user, service.user, SBBOL_IDENTITY_TYPE)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [objCreated] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                const [obj, attrs] = await updateTestExternalTokenAccessRight(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestExternalTokenAccessRight(client, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestExternalTokenAccessRight(user, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [objCreated] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ExternalTokenAccessRight.delete(admin, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ExternalTokenAccessRight.delete(client, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ExternalTokenAccessRight.delete(client, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                const objs = await ExternalTokenAccessRight.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('service can', async () => {
                const [obj] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                const objs = await ExternalTokenAccessRight.getAll(service, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('anonymous can\'t', async () => {
                const [obj, attrs] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await ExternalTokenAccessRight.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })

            test('user can\'t', async () => {
                const [obj, attrs] = await createTestExternalTokenAccessRight(admin, service.user, SBBOL_IDENTITY_TYPE)

                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await ExternalTokenAccessRight.getAll(user, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })
})
