/**
 * Generated by `createservice user.SigninAsUserService`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/user/access/SigninAsUserService')
const { getItem } = require('@keystonejs/server-side-graphql-client')
const { getSchemaCtx } = require('@core/keystone/schema')
const { SIGNIN_AS_USER_NOT_FOUND, SIGNIN_AS_USER_DENIED } = require('@condo/domains/user/constants/errors')


const SigninAsUserService = new GQLCustomSchema('SigninAsUserService', {
    types: [
        {
            access: true,
            type: 'input SigninAsUserInput { dv: Int!, sender: SenderFieldInput!, id: ID! }',
        },
        {
            access: true,
            type: 'type SigninAsUserOutput { user: User, token: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canSigninAsUser,
            schema: 'signinAsUser(data: SigninAsUserInput!): SigninAsUserOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { id } } = args
                const { keystone } = await getSchemaCtx('User')
                const user = await getItem({ keystone, listKey: 'User', itemId: id, returnFields: 'id isSupport isAdmin' })
                if (!user) {
                    throw new Error(`${SIGNIN_AS_USER_NOT_FOUND} no user found`)
                }
                if (user.isAdmin) {
                    throw new Error(`${SIGNIN_AS_USER_DENIED}] can not sign in as admin user`)
                }
                if (user.isSupport) {
                    throw new Error(`${SIGNIN_AS_USER_DENIED}] can not sign in as support user`)
                }
                const sessionToken = await context.startAuthedSession({ item: user, list: keystone.lists['User'] })
                const result = {
                    user,
                    token: sessionToken,
                }
                return result
            },
        },
    ],
    
})

module.exports = {
    SigninAsUserService,
}
