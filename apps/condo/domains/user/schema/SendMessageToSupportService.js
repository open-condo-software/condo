/**
 * Generated by `createservice user.SendMessageToSupportService`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/user/access/SendMessageToSupportService')
const { sendMessage } = require('@condo/domains/notification/utils/serverSchema')
const { MESSAGE_FORWARDED_TO_SUPPORT } = require('@condo/domains/notification/constants/constants')
const { SUPPORT_EMAIL } = require('@condo/domains/common/constants/requisites')
const { get } = require('lodash')
const { LOCALES } = require('@condo/domains/common/constants/locale')
const { Resident } = require('@condo/domains/resident/utils/serverSchema')
const { Organization } = require('@condo/domains/organization/utils/serverSchema')
const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { v4: uuid } = require('uuid')
const dayjs = require('dayjs')
const { normalizeEmail } = require('@condo/domains/common/utils/mail')
const { EMAIL_WRONG_FORMAT_ERROR } = require('@condo/domains/user/constants/errors')

const SEND_MESSAGE_TO_SUPPORT_ATTACHMENTS_FILE_FOLDER_NAME = 'forwarded-emails-attachments'
const fileAdapter = new FileAdapter(SEND_MESSAGE_TO_SUPPORT_ATTACHMENTS_FILE_FOLDER_NAME)

const SendMessageToSupportService = new GQLCustomSchema('SendMessageToSupportService', {
    types: [
        {
            access: true,
            type: `enum SendMessageToSupportLang { ${Object.keys(LOCALES).join(' ')} }`,
        },
        {
            access: true,
            type: 'input SendMessageToSupportInput { dv: Int!, sender: JSON!, text: String!, emailFrom: String, attachments: [Upload], os: String!, appVersion: String!, lang: SendMessageToSupportLang!, meta: JSON! }',
        },
        {
            access: true,
            type: 'type SendMessageToSupportOutput { id: String!, status: String! }',
        },
    ],

    mutations: [
        {
            access: access.canSendMessageToSupport,
            schema: 'sendMessageToSupport(data: SendMessageToSupportInput!): SendMessageToSupportOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const { dv, sender, text, emailFrom, attachments = [], os, appVersion, lang, meta } = data

                const user = get(context, ['req', 'user'])

                const normalizedEmailFrom = normalizeEmail(emailFrom)
                if (emailFrom && !normalizedEmailFrom) throw new Error(`${EMAIL_WRONG_FORMAT_ERROR}] invalid format`)

                const attachmentsData = await Promise.all(attachments)

                const filesPromises = attachmentsData.map((result) => {
                    const { filename: originalFilename, mimetype, encoding, createReadStream } = result
                    const stream = createReadStream()
                    return fileAdapter.save({
                        stream,
                        id: `${dayjs().format('YYYY-MM-DD_HH-mm-ss')}_${uuid()}`,
                        filename: originalFilename,
                    }).then(({ filename, id, ...restSaveData }) => {
                        const ret = {
                            encoding,
                            filename,
                            id,
                            mimetype,
                            originalFilename,
                            publicUrl: fileAdapter.publicUrl({ filename }),
                        }

                        if (fileAdapter.acl && fileAdapter.acl.generateUrl) {
                            ret.publicUrl = fileAdapter.acl.generateUrl(`${fileAdapter.folder}/${filename}`)
                        }

                        return ret
                    })
                })

                const files = await Promise.all(filesPromises)

                const residents = await Resident.getAll(context, { user: { id: user.id } })

                const organizationsIds = residents.map((resident) => {
                    return resident.organization.id
                })
                const organizations = await Organization.getAll(context, { id_in: organizationsIds })

                const organizationsData = organizations.map(({ name, meta: { inn } }) => ({ name, inn }))

                const messageAttrs = {
                    sender,
                    lang,
                    type: MESSAGE_FORWARDED_TO_SUPPORT,
                    to: {
                        email: SUPPORT_EMAIL,
                    },
                    emailFrom: normalizedEmailFrom ? `${user.name} <${normalizedEmailFrom}>` : null,
                    meta: {
                        dv,
                        text,
                        os,
                        appVersion,
                        organizationsData,
                        attachments: files,
                    },
                }

                const sendingResult = await sendMessage(context, messageAttrs)

                return {
                    id: sendingResult.id,
                    status: sendingResult.status,
                }
            },
        },
    ],

})

module.exports = {
    SendMessageToSupportService,
}
