/**
 * Generated by `createschema user.ConfirmEmailAction 'email:Text; token:Text; emailCode:Integer; emailCodeRequestedAt:DateTimeUtc; emailCodeExpiresAt:DateTimeUtc; retries:Integer; isEmailVerified:Checkbox; requestedAt:DateTimeUtc; expiresAt:DateTimeUtc; completedAt?:DateTimeUtc;'`
 */

const { historical, uuided, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { EMAIL_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/user/access/ConfirmEmailAction')
const {
    EMAIL_CODE_LENGTH,
} = require('@condo/domains/user/constants/common')


const ConfirmEmailAction = new GQLListSchema('ConfirmEmailAction', {
    schemaDoc: 'User confirm email actions is used before registration starts or for reset password',
    fields: {
        email: {
            ...EMAIL_FIELD,
            kmigratorOptions: { null: false, unique: false },
            isRequired: true,
        },
        token: {
            schemaDoc: 'Unique token to complete confirmation',
            type: 'Text',
            isUnique: true,
            isRequired: true,
        },
        emailCode: {
            schemaDoc: 'Last email code sent to user',
            type: 'Integer',
            length: EMAIL_CODE_LENGTH,
        },
        emailCodeRequestedAt: {
            schemaDoc: 'Time when email code was requested',
            type: 'DateTimeUtc',
            isRequired: true,
        },
        emailCodeExpiresAt: {
            schemaDoc: 'Time when email code becomes not valid',
            type: 'DateTimeUtc',
            isRequired: true,
        },
        retries: {
            schemaDoc: 'Number of times email code input from user failed',
            type: 'Integer',
            defaultValue: 0,
        },
        isEmailVerified: {
            schemaDoc: 'Email verification flag. User verify email by access to secret email message',
            type: 'Checkbox',
            defaultValue: false,
        },
        requestedAt: {
            schemaDoc: 'DateTime when confirm email action was started',
            type: 'DateTimeUtc',
            isRequired: true,
        },
        expiresAt: {
            schemaDoc: 'When confirm email action becomes invalid',
            type: 'DateTimeUtc',
            isRequired: true,
        },
        completedAt: {
            schemaDoc: 'When confirm email action was completed',
            type: 'DateTimeUtc',
            isRequired: false,
        },
    },
    plugins: [uuided(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadConfirmEmailActions,
        create: access.canManageConfirmEmailActions,
        update: access.canManageConfirmEmailActions,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ConfirmEmailAction,
}
