/**
 * Generated by `createschema user.ConfirmEmailAction 'email:Text;token:Text;secretCode:Text;secretCodeRequestedAt:DateTimeUtc;secretCodeExpiresAt:DateTimeUtc;retries:Integer;isEmailVerified:Checkbox;requestedAt:DateTimeUtc;expiresAt:DateTimeUtc;completedAt:DateTimeUtc;'`
 */

const { GQLError } = require('@open-condo/keystone/errors')
const { historical, uuided, softDeleted, dvAndSender, versioned } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { COMMON_ERRORS, WRONG_VALUE } = require('@condo/domains/common/constants/errors')
const { normalizeEmail } = require('@condo/domains/common/utils/mail')
const access = require('@condo/domains/user/access/ConfirmEmailAction')
const { SECRET_CODE_LENGTH } = require('@condo/domains/user/constants/common')


const ERRORS = {
    WRONG_SECRET_CODE_VALUE: {
        variable: ['data', 'secretCode'],
        code: 'WRONG_SECRET_CODE_LENGTH',
        type: WRONG_VALUE,
        message: `Wrong value for secret code. Length should be ${SECRET_CODE_LENGTH}`,
    },
}

const ConfirmEmailAction = new GQLListSchema('ConfirmEmailAction', {
    schemaDoc: 'User confirm email actions',
    fields: {

        email: {
            schemaDoc: 'Normalized email for confirm action',
            type: 'Text',
            isRequired: true,
            hooks: {
                resolveInput: ({ resolvedData, fieldPath }) => {
                    const newValue = resolvedData[fieldPath]

                    if (newValue) {
                        return normalizeEmail(newValue) || newValue
                    }
                },
                validateInput: ({ resolvedData, fieldPath, context }) => {
                    const newValue = resolvedData[fieldPath]

                    if (newValue && newValue !== normalizeEmail(newValue)) {
                        throw new GQLError(COMMON_ERRORS.WRONG_EMAIL_FORMAT, context)
                    }
                },
            },
        },

        token: {
            schemaDoc: 'Unique token to complete confirmation',
            type: 'Text',
            isUnique: true,
            isRequired: true,
        },

        secretCode: {
            schemaDoc: 'Last secret code sent to user',
            type: 'Text',
            isRequired: true,
            hooks: {
                validateInput: ({ resolvedData, fieldPath, context }) => {
                    const newValue = resolvedData[fieldPath]

                    if (typeof newValue === 'string' && newValue.length !== SECRET_CODE_LENGTH) {
                        throw new GQLError(ERRORS.WRONG_SECRET_CODE_VALUE, context)
                    }
                },
            },
        },

        secretCodeRequestedAt: {
            schemaDoc: 'Time when secret code was requested',
            type: 'DateTimeUtc',
            isRequired: true,
        },

        secretCodeExpiresAt: {
            schemaDoc: 'Time when secret code becomes not valid',
            type: 'DateTimeUtc',
            isRequired: true,
        },

        retries: {
            schemaDoc: 'Number of times secret code input from user failed',
            type: 'Integer',
            defaultValue: 0,
        },

        isEmailVerified: {
            schemaDoc: 'Email verification flag. User verify email by access to email message',
            type: 'Checkbox',
            defaultValue: false,
        },

        requestedAt: {
            schemaDoc: 'DateTime when confirm email action was started',
            type: 'DateTimeUtc',
            isRequired: true,
        },

        expiresAt: {
            schemaDoc: 'When confirm email action becomes invalid',
            type: 'DateTimeUtc',
            isRequired: true,
        },

        completedAt: {
            schemaDoc: 'When confirm email action was completed',
            type: 'DateTimeUtc',
            isRequired: false,
        },

    },
    plugins: [uuided(), softDeleted(), dvAndSender(), historical(), versioned()],
    access: {
        read: access.canReadConfirmEmailActions,
        create: access.canManageConfirmEmailActions,
        update: access.canManageConfirmEmailActions,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ConfirmEmailAction,
}
