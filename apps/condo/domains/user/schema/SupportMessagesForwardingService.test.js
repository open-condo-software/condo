/**
 * Generated by `createservice user.SupportMessagesForwardingService`
 */

const { supportMessagesForwardingByTestClient } = require('@condo/domains/user/utils/testSchema')
const { MESSAGE_SENDING_STATUS } = require('@condo/domains/notification/constants/constants')
const { RU_LOCALE } = require('@condo/domains/common/constants/locale')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const conf = require('@core/config')

const EMAIL_API_CONFIG = (conf.EMAIL_API_CONFIG) ? JSON.parse(conf.EMAIL_API_CONFIG) : null

describe('SupportMessagesForwardingService', () => {
    test('Forward message to support: no attachments', async () => {
        const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
        const emailFrom = 'hello@mailforspam.com'
        const payload = {
            attachments: [],
            text: `Test message from resident to support. This message should be sent from ${emailFrom}`,
            email: emailFrom, // email passed from mobile application
            os: 'android',
            appVersion: '0.0.1a',
            lang: RU_LOCALE,
            meta: {},
        }

        const [data, attrs] = await supportMessagesForwardingByTestClient(userClient, payload)

        expect(data.status).toEqual(MESSAGE_SENDING_STATUS)
    })

    test('Forward message to support: no attachments, no email', async () => {
        const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
        const { from: defaultFrom } = EMAIL_API_CONFIG
        const payload = {
            attachments: [],
            text: `Test message from resident to support. In this message resident not pass the email address, so the sender's email is default: ${defaultFrom}`,
            os: 'android',
            appVersion: '0.0.1a',
            lang: RU_LOCALE,
            meta: {},
        }

        const [data, attrs] = await supportMessagesForwardingByTestClient(userClient, payload)

        expect(data.status).toEqual(MESSAGE_SENDING_STATUS)
    })
})