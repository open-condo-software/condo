/**
 * Generated by `createservice user.ChangePhoneNumberResidentService`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/user/access/ChangePhoneNumberResidentService')
const {
    CONFIRM_PHONE_ACTION_EXPIRED,
} = require('@condo/domains/user/constants/errors')
const { ConfirmPhoneAction, User } = require('@condo/domains/user/utils/serverSchema')


const ChangePhoneNumberResidentService = new GQLCustomSchema('ChangePhoneNumberResidentService', {
    types: [
        {
            access: true,
            type: 'input ChangePhoneNumberResidentInput { dv: Int!, sender: JSON!, token: String! }',
        },
        {
            access: true,
            type: 'type ChangePhoneNumberResidentOutput { status: String! }',
        },
    ],

    mutations: [
        {
            access: access.canChangePhoneNumberResident,
            schema: 'changePhoneNumberResident(data: ChangePhoneNumberResidentInput!): ChangePhoneNumberResidentOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { token } } = args
                const userId = context.authedItem.id
                const [action] = await ConfirmPhoneAction.getAll(context,
                    {
                        token,
                        completedAt: null,
                        isPhoneVerified: true,
                    }
                )
                if (!action) {
                    throw new Error(`${CONFIRM_PHONE_ACTION_EXPIRED}] Unable to find confirm phone action`)
                }
                const { phone: newPhone } = action
                await User.update(context, userId, { phone: newPhone })
                await ConfirmPhoneAction.update(context, action.id, { completedAt: new Date().toISOString() })
                const result = {
                    status: 'ok',
                }
                return result
            },
        },
    ],

})

module.exports = {
    ChangePhoneNumberResidentService,
}
