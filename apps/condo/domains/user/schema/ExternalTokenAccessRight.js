/**
 * Generated by `createschema user.ExternalTokenAccessRight 'type:Text; user:Relationship:User:CASCADE;'`
 */

const { Select } = require('@keystonejs/fields')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { SERVICE_USER_FIELD } = require('@condo/domains/miniapp/schema/fields/accessRight')
const access = require('@condo/domains/user/access/ExternalTokenAccessRight')
const { IDENTITY_TYPES, SBBOL_IDENTITY_TYPE } = require('@condo/domains/user/constants')


const ExternalTokenAccessRight = new GQLListSchema('ExternalTokenAccessRight', {
    schemaDoc: 'The scheme regulates the access of the service user to the access tokens stored in the redis',
    fields: {

        type: {
            schemaDoc: 'Which service token the user has access to',
            type: Select,
            dataType: 'enum',
            options: IDENTITY_TYPES,
            defaultValue: SBBOL_IDENTITY_TYPE,
            isRequired: true,
        },

        user: SERVICE_USER_FIELD,

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadExternalTokenAccessRights,
        create: access.canManageExternalTokenAccessRights,
        update: access.canManageExternalTokenAccessRights,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ExternalTokenAccessRight,
}
