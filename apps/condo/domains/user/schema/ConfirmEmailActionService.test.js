/**
 * Generated by `createservice user.ConfirmEmailActionService --type mutations`
 */
const { faker } = require('@faker-js/faker')

const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowGQLErrorToResult,
} = require('@open-condo/keystone/test.utils')

const {
    createTestEmail,
    createTestConfirmEmailAction,
    ConfirmEmailAction,
    completeConfirmEmailActionByTestClient,
    startConfirmEmailActionByTestClient,
    resendConfirmEmailActionByTestClient,
    getEmailByConfirmEmailActionTokenByTestClient,
    updateTestConfirmEmailAction,
} = require('@condo/domains/user/utils/testSchema')


const CONFIRM_EMAIL_MAX_RETRIES = 10

describe('ConfirmEmailActionService', () => {
    let admin

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
    })

    describe('Query getEmailByConfirmEmailActionToken', () => {
        describe('Basic logic', () => {
            test('Anonymous should get correct email by token', async () => {
                const client = await makeClient()
                const email = createTestEmail()
                const [{ token }] = await createTestConfirmEmailAction(admin, { email })
                const [{ email: emailFromAction }] = await getEmailByConfirmEmailActionTokenByTestClient(client, {
                    token,
                })
                expect(email).toBe(emailFromAction)
            })
        })
    })

    describe('Mutation startConfirmEmailAction', () => {
        describe('Basic logic', () => {
            test('Anonymous can start email confirmation', async () => {
                const client = await makeClient()
                const email = createTestEmail()
                const [{ token }] = await startConfirmEmailActionByTestClient(client, {
                    email,
                })
                expect(token).not.toHaveLength(0)
            })
        })
    })

    describe('Mutation resendConfirmEmailAction', () => {
        describe('Basic logic', () => {
            test('Anonymous can resend the confirmation code', async () => {
                const client = await makeClient()
                const [actionBefore] = await createTestConfirmEmailAction(admin)
                expect(actionBefore.secretCode).toHaveLength(4)

                await resendConfirmEmailActionByTestClient(client, {
                    token: actionBefore.token,
                })
                const actionAfter = await ConfirmEmailAction.getOne(admin, {
                    token: actionBefore.token,
                })
                expect(actionAfter.secretCode).toHaveLength(4)
                expect(actionAfter.secretCode).not.toEqual(actionBefore.secretCode)
            })

            test('Client cannot resend the confirmation code for same email twice', async () => {
                const client = await makeClient()
                const [{ token }] = await createTestConfirmEmailAction(admin)

                await resendConfirmEmailActionByTestClient(client, {
                    token,
                })

                await expectToThrowGQLErrorToResult(async () => {
                    await resendConfirmEmailActionByTestClient(client, {
                        token,
                    })
                }, {
                    code: 'BAD_USER_INPUT',
                    type: 'TOO_MANY_REQUESTS',
                })
            })
        })
    })

    describe('Mutation completeConfirmEmailAction', () => {
        describe('Basic logic', () => {
            test('Should throws error when wrong secret code was provided and should increment retries', async () => {
                const client = await makeClient()
                const [actionBefore] = await createTestConfirmEmailAction(admin)
                expect(actionBefore.retries).toBe(0)
                const wrongCode = faker.random.numeric(3)
                await expectToThrowGQLErrorToResult(async () => {
                    await completeConfirmEmailActionByTestClient(client, {
                        token: actionBefore.token,
                        secretCode: wrongCode,
                    })
                }, {
                    mutation: 'completeConfirmEmailAction',
                    variable: ['data', 'secretCode'],
                    code: 'BAD_USER_INPUT',
                    type: 'EMAIL_CODE_VERIFICATION_FAILED',
                    message: 'Code verification mismatch',
                })
                const actionAfter = await ConfirmEmailAction.getOne(admin, {
                    token: actionBefore.token,
                })
                expect(actionAfter.retries).toBe(1)
            })

            test('Should marks itself as verified when code matches', async () => {
                const client = await makeClient()
                const [actionBefore] = await createTestConfirmEmailAction(admin)
                expect(actionBefore.isEmailVerified).toBe(false)
                const [{ status }] = await completeConfirmEmailActionByTestClient(client, {
                    token: actionBefore.token,
                    secretCode: actionBefore.secretCode,
                })
                expect(status).toBe('ok')
                const actionAfter = await ConfirmEmailAction.getOne(admin, {
                    token: actionBefore.token,
                })
                expect(actionAfter.isEmailVerified).toBe(true)
            })

            test('Should marks itself failed when maximum retries number excided', async () => {
                const client = await makeClient()
                const [actionBefore] = await createTestConfirmEmailAction(admin)
                await updateTestConfirmEmailAction(admin, actionBefore.id, {
                    retries: CONFIRM_EMAIL_MAX_RETRIES + 1,
                })
                await expectToThrowGQLErrorToResult(async () => {
                    await completeConfirmEmailActionByTestClient(client, {
                        token: actionBefore.token,
                        secretCode: actionBefore.secretCode,
                    })
                }, {
                    mutation: 'completeConfirmEmailAction',
                    variable: ['data', 'secretCode'],
                    code: 'BAD_USER_INPUT',
                    type: 'EMAIL_CODE_MAX_RETRIES_REACHED',
                    message: 'Max retries reached for email confirmation. Try to initiate email confirmation again',
                })
            })

            test('Should throws error when secret code ttl expires', async () => {
                const client = await makeClient()
                const [actionBefore] = await createTestConfirmEmailAction(admin)
                await updateTestConfirmEmailAction(admin, actionBefore.id, {
                    secretCodeExpiresAt: actionBefore.secretCodeRequestedAt,
                })
                await expectToThrowGQLErrorToResult(async () => {
                    await completeConfirmEmailActionByTestClient(client, {
                        token: actionBefore.token,
                        secretCode: actionBefore.secretCode,
                    })
                }, {
                    mutation: 'completeConfirmEmailAction',
                    variable: ['data', 'secretCode'],
                    code: 'BAD_USER_INPUT',
                    type: 'EMAIL_CODE_EXPIRED',
                    message: 'Email code expired. Try to initiate email confirmation again',
                })
            })

            test('Should throws error when confirm email action expires', async () => {
                const client = await makeClient()
                const [actionBefore] = await createTestConfirmEmailAction(admin)
                await updateTestConfirmEmailAction(admin, actionBefore.id, {
                    expiresAt: actionBefore.requestedAt,
                })
                await expectToThrowGQLErrorToResult(async () => {
                    await completeConfirmEmailActionByTestClient(client, {
                        token: actionBefore.token,
                        secretCode: actionBefore.secretCode,
                    })
                }, {
                    mutation: 'completeConfirmEmailAction',
                    variable: ['data', 'token'],
                    code: 'BAD_USER_INPUT',
                    type: 'UNABLE_TO_FIND_CONFIRM_EMAIL_ACTION',
                    message: 'Confirm email action was expired or it could not be found. Try to initiate email confirmation again',
                })
            })
        })
    })
})
