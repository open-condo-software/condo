/**
 * Generated by `createservice user.SigninOrRegisterResidentUserService`
 */
const { getSchemaCtx } = require('@core/keystone/schema')
const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/user/access/SigninOrRegisterResidentUserService')
const {
    CONFIRM_PHONE_ACTION_EXPIRED,
} = require('@condo/domains/user/constants/errors')
const { ConfirmPhoneAction, User } = require('@condo/domains/user/utils/serverSchema')

const SigninOrRegisterResidentUserService = new GQLCustomSchema('SigninOrRegisterResidentUserService', {
    types: [
        {
            access: true,
            type: 'input SigninOrRegisterResidentUserInput { dv: Int!, sender: JSON!, token: String! }',
        },
        {
            access: true,
            type: 'type SigninOrRegisterResidentUserOutput { item: User, token: String! }',
        },
    ],

    mutations: [
        {
            access: access.canSigninOrRegisterResidentUser,
            schema: 'signinOrRegisterResidentUser(data: SigninOrRegisterResidentUserInput!): SigninOrRegisterResidentUserOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { token } } = args
                const userData = {
                    type: 'resident',
                    isPhoneVerified: false,
                }
                const [action] = await ConfirmPhoneAction.getAll(context,
                    {
                        token,
                        completedAt: null,
                        isPhoneVerified: true,
                    }
                )
                if (!action) {
                    throw new Error(`${CONFIRM_PHONE_ACTION_EXPIRED}] Unable to find confirm phone action`)
                }
                const { phone, isPhoneVerified } = action
                userData.phone = phone
                userData.isPhoneVerified = isPhoneVerified
                let [user] = await User.getAll(context, { type: 'resident', phone })
                if (!user) {
                    user = await User.create(context, userData)
                }
                await ConfirmPhoneAction.update(context, action.id, { completedAt: new Date().toISOString() })
                const { keystone } = await getSchemaCtx(SigninOrRegisterResidentUserService)
                const sessionToken = await context.startAuthedSession({ item: user, list: keystone.lists['User'] })
                const result = {
                    item: user,
                    token: sessionToken,
                }
                return result
            },
        },
    ],

})

module.exports = {
    SigninOrRegisterResidentUserService,
}
