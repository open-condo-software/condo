/**
 * Generated by `createschema user.ConfirmEmailAction 'email:Text;token:Text;secretCode:Text;secretCodeRequestedAt:DateTimeUtc;secretCodeExpiresAt:DateTimeUtc;retries:Integer;isEmailVerified:Checkbox;requestedAt:DateTimeUtc;expiresAt:DateTimeUtc;completedAt:DateTimeUtc;'`
 */
const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')

const {
    DATETIME_RE,
    makeClient,
    makeLoggedInAdminClient,
    expectToThrowGQLError,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAccessDeniedErrorToObjects,
    expectToThrowValidationFailureError, expectToThrowUniqueConstraintViolationError,
} = require('@open-condo/keystone/test.utils')

const {
    ConfirmEmailAction,
    createTestConfirmEmailAction,
    updateTestConfirmEmailAction,
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
} = require('@condo/domains/user/utils/testSchema')


describe('ConfirmEmailAction', () => {
    let admin, support, user, anonymous

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()
    })

    describe('Accesses', () => {
        describe('Admin', () => {
            test('Can create', async () => {
                const [action, actionAttrs] = await createTestConfirmEmailAction(admin)
                expect(action.token).toBe(actionAttrs.token)
                expect(action.email).toBe(actionAttrs.email)
                expect(action.secretCode).toBe(actionAttrs.secretCode)
                expect(action.secretCodeRequestedAt).toBe(actionAttrs.secretCodeRequestedAt)
                expect(action.secretCodeExpiresAt).toBe(actionAttrs.secretCodeExpiresAt)
                expect(action.retries).toBe(0)
                expect(action.isEmailVerified).toBeFalsy()
                expect(action.requestedAt).toBe(actionAttrs.requestedAt)
                expect(action.expiresAt).toBe(actionAttrs.expiresAt)
                expect(action.completedAt).toBeNull()
            })

            test('Can read', async () => {
                const [createdAction] = await createTestConfirmEmailAction(admin)
                const action = await ConfirmEmailAction.getOne(admin, { id: createdAction.id })
                expect(action).toBeDefined()
                expect(action.id).toBe(createdAction.id)
            })

            test('Can update', async () => {
                const [createdAction] = await createTestConfirmEmailAction(admin)
                const [updatedAction, actionAttrs] = await updateTestConfirmEmailAction(admin, createdAction.id,  {
                    completedAt: dayjs().toISOString(),
                })
                expect(updatedAction.completedAt).toBe(actionAttrs.completedAt)
            })

            test('Cannot delete', async () => {
                const [createdAction] = await createTestConfirmEmailAction(admin)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ConfirmEmailAction.delete(admin, createdAction.id)
                })
            })

            test('Can soft-delete', async () => {
                const [createdAction] = await createTestConfirmEmailAction(admin)
                const [deletedAction] = await ConfirmEmailAction.softDelete(admin, createdAction.id)
                expect(deletedAction.deletedAt).toMatch(DATETIME_RE)
            })
        })

        describe('Support', () => {
            test('Cannot create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestConfirmEmailAction(support)
                })
            })

            test('Cannot read', async () => {
                const [action] = await createTestConfirmEmailAction(admin)
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await ConfirmEmailAction.getOne(support, { id: action.id })
                })
            })

            test('Cannot update', async () => {
                const [action] = await createTestConfirmEmailAction(admin)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestConfirmEmailAction(support, action.id, {
                        completedAt: dayjs().toISOString(),
                    })
                })
            })

            test('Cannot delete', async () => {
                const [createdAction] = await createTestConfirmEmailAction(admin)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ConfirmEmailAction.delete(support, createdAction.id)
                })
            })

            test('Cannot soft-delete', async () => {
                const [createdAction] = await createTestConfirmEmailAction(admin)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ConfirmEmailAction.softDelete(support, createdAction.id)
                })
            })
        })

        describe('User', () => {
            test('Cannot create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestConfirmEmailAction(user)
                })
            })

            test('Cannot read', async () => {
                const [action] = await createTestConfirmEmailAction(admin)
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await ConfirmEmailAction.getOne(user, { id: action.id })
                })
            })

            test('Cannot update', async () => {
                const [action] = await createTestConfirmEmailAction(admin)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestConfirmEmailAction(user, action.id, {
                        completedAt: dayjs().toISOString(),
                    })
                })
            })

            test('Cannot delete', async () => {
                const [createdAction] = await createTestConfirmEmailAction(admin)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ConfirmEmailAction.delete(user, createdAction.id)
                })
            })

            test('Cannot soft-delete', async () => {
                const [createdAction] = await createTestConfirmEmailAction(admin)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ConfirmEmailAction.softDelete(user, createdAction.id)
                })
            })
        })

        describe('Anonymous', () => {
            test('Cannot create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestConfirmEmailAction(anonymous)
                })
            })

            test('Cannot read', async () => {
                const [action] = await createTestConfirmEmailAction(admin)
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await ConfirmEmailAction.getOne(anonymous, { id: action.id })
                })
            })

            test('Cannot update', async () => {
                const [action] = await createTestConfirmEmailAction(admin)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestConfirmEmailAction(anonymous, action.id, {
                        completedAt: dayjs().toISOString(),
                    })
                })
            })

            test('Cannot delete', async () => {
                const [createdAction] = await createTestConfirmEmailAction(admin)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ConfirmEmailAction.delete(anonymous, createdAction.id)
                })
            })

            test('Cannot soft-delete', async () => {
                const [createdAction] = await createTestConfirmEmailAction(admin)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await ConfirmEmailAction.softDelete(anonymous, createdAction.id)
                })
            })
        })
    })

    describe('Validations', () => {
        describe('Fields', () => {
            test('Email should not be in wrong format', async () => {
                await expectToThrowGQLError(async () => {
                    await createTestConfirmEmailAction(admin, {
                        email: faker.random.alphaNumeric(),
                    })
                }, {
                    code: 'BAD_USER_INPUT',
                    type: 'WRONG_EMAIL_VALUE',
                    message: 'Wrong email format',
                })
            })

            test('Email is required', async () => {
                await expectToThrowValidationFailureError(async () => {
                    await createTestConfirmEmailAction(admin, {
                        email: undefined,
                    })
                }, 'Required field "email" is null or undefined.')
            })

            test('Length of secret code must be 4', async () => {
                await expectToThrowGQLError(async () => {
                    await createTestConfirmEmailAction(admin, {
                        secretCode: faker.random.alphaNumeric(8),
                    })
                }, {
                    code: 'WRONG_SECRET_CODE_LENGTH',
                    type: 'WRONG_VALUE',
                    message: 'Wrong value for secret code. Length should be 4',
                })
            })

            test('Token is required', async () => {
                await expectToThrowValidationFailureError(async () => {
                    await createTestConfirmEmailAction(admin, {
                        token: undefined,
                    })
                }, 'Required field "token" is null or undefined.')
            })

            test('Token must be unique', async () => {
                const token = faker.random.alphaNumeric(16)

                await createTestConfirmEmailAction(admin, {
                    token,
                })

                await expectToThrowUniqueConstraintViolationError(async () => {
                    await createTestConfirmEmailAction(admin, {
                        token,
                    })
                }, 'ConfirmEmailAction_token_key')
            })

            test('secretCodeRequestedAt is required', async () => {
                await expectToThrowValidationFailureError(async () => {
                    await createTestConfirmEmailAction(admin, {
                        secretCodeRequestedAt: undefined,
                    })
                }, 'Required field "secretCodeRequestedAt" is null or undefined.')
            })

            test('secretCodeExpiresAt is required', async () => {
                await expectToThrowValidationFailureError(async () => {
                    await createTestConfirmEmailAction(admin, {
                        secretCodeExpiresAt: undefined,
                    })
                }, 'Required field "secretCodeExpiresAt" is null or undefined.')
            })

            test('requestedAt is required', async () => {
                await expectToThrowValidationFailureError(async () => {
                    await createTestConfirmEmailAction(admin, {
                        requestedAt: undefined,
                    })
                }, 'Required field "requestedAt" is null or undefined.')
            })

            test('expiresAt is required', async () => {
                await expectToThrowValidationFailureError(async () => {
                    await createTestConfirmEmailAction(admin, {
                        expiresAt: undefined,
                    })
                }, 'Required field "expiresAt" is null or undefined.')
            })
        })
    })
})
