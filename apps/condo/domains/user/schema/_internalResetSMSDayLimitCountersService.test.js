/**
 * Generated by `createservice user._internalResetSMSDayLimitCountersService`
 */

const { faker } = require('@faker-js/faker')

const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult, expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const { ERRORS } = require('@condo/domains/user/schema/_internalResetSMSDayLimitCountersService')
const { RedisGuard } = require('@condo/domains/user/utils/serverSchema/guards')
const {
    _internalResetSMSDayLimitCountersByTestClient,
    createTestPhone,
    makeClientWithSupportUser,
    makeClientWithNewRegisteredAndLoggedInUser,
} = require('@condo/domains/user/utils/testSchema')


const redisGuard = new RedisGuard()
const COUNTER_VALUE_TO_UPDATE = 2

describe('_internalResetSMSDayLimitCountersService', () => {
    let admin, support, user, anonymous, phone

    beforeAll(async () => {
        anonymous = await makeClient()
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
    })

    beforeEach(async () => {
        phone = createTestPhone()

        for (let i = 0; i < COUNTER_VALUE_TO_UPDATE; i++)  {
            await redisGuard.incrementDayCounter(phone)
        }
        const value = await redisGuard.getCounterValue(phone)

        expect(Number(value)).toEqual(COUNTER_VALUE_TO_UPDATE)
    })

    describe('Access', () => {
        test('admin: can execute', async () => {
            const [data] = await _internalResetSMSDayLimitCountersByTestClient(admin, {
                key: phone,
            })

            expect(data.ok).toEqual(true)
        })

        test('support: can execute', async () => {
            const [data] = await _internalResetSMSDayLimitCountersByTestClient(support, {
                key: phone,
            })

            expect(data.ok).toEqual(true)
        })

        test('user: can not execute', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await _internalResetSMSDayLimitCountersByTestClient(user, {
                    key: phone,
                })
            })
        })

        test('anonymous: can not execute', async () => {
            await expectToThrowAuthenticationErrorToResult(async () => {
                await _internalResetSMSDayLimitCountersByTestClient(anonymous, {
                    key: phone,
                })
            })
        })
    })

    describe('Logic', () => {
        test('reset counter by phone number', async () => {
            await _internalResetSMSDayLimitCountersByTestClient(support, {
                key: phone,
            })
            const value = await redisGuard.getCounterValue(phone)

            expect(value).toBeNull()
        })

        test('reset counter by ip', async () => {
            const ip = faker.internet.ipv4()

            for (let i = 0; i < COUNTER_VALUE_TO_UPDATE; i++)  {
                await redisGuard.incrementDayCounter(ip)
            }
            const beforeReset = await redisGuard.getCounterValue(ip)

            expect(Number(beforeReset)).toEqual(COUNTER_VALUE_TO_UPDATE)

            await _internalResetSMSDayLimitCountersByTestClient(support, {
                key: phone,
            })
            const afterReset = await redisGuard.getCounterValue(phone)

            expect(afterReset).toBeNull()
        })

        test('throws error if key is not valid ip or phone', async () => {
            const key = faker.random.alphaNumeric(8)
            for (let i = 0; i < COUNTER_VALUE_TO_UPDATE; i++)  {
                await redisGuard.incrementDayCounter(key)
            }
            const beforeReset = await redisGuard.getCounterValue(key)

            expect(Number(beforeReset)).toEqual(COUNTER_VALUE_TO_UPDATE)

            await expectToThrowGQLError(async () => {
                await _internalResetSMSDayLimitCountersByTestClient(support, {
                    key,
                })
            }, ERRORS.INVALID_KEY, 'result')
        })

        test('throws error if key is not exists', async () => {
            const key = createTestPhone()

            await expectToThrowGQLError(async () => {
                await _internalResetSMSDayLimitCountersByTestClient(support, {
                    key,
                })
            }, {
                ...ERRORS.KEY_NOT_FOUND,
                message: `Key '${key}' does not exist.`,
            }, 'result')
        })
    })
})