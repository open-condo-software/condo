/**
 * Generated by `createservice user._internalResetSMSDayLimitCountersService`
 */

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObjects } = require('@open-condo/keystone/test.utils')

const { _internalResetSMSDayLimitCountersByTestClient, createTestPhone } = require('@condo/domains/user/utils/testSchema')
 
describe('_internalResetSMSDayLimitCountersService', () => {
    test('admin: can execute', async () => {
        const admin = await makeLoggedInAdminClient()
        const phone = createTestPhone()

        const payload = {}
        const [data, attrs] = await _internalResetSMSDayLimitCountersByTestClient(admin, payload)

        throw new Error('Not implemented yet')
    })

    test('support: can execute', async () => {
        const admin = await makeLoggedInAdminClient()
        const payload = {}  // TODO(codegen): change the 'user: update _internalResetSMSDayLimitCountersService' payload
        const [data, attrs] = await _internalResetSMSDayLimitCountersByTestClient(admin, payload)

        throw new Error('Not implemented yet')
    })

    test('user: can not execute', async () => {
        const client = await makeClient()
        await expectToThrowAuthenticationErrorToObjects(async () => {
            await _internalResetSMSDayLimitCountersByTestClient(client)
        })
    })

    test('anonymous: can not execute', async () => {
        const client = await makeClient()
        await expectToThrowAuthenticationErrorToObjects(async () => {
            await _internalResetSMSDayLimitCountersByTestClient(client)
        })
    })
})