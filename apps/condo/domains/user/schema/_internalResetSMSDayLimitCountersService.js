/**
 * Generated by `createservice user._internalResetSMSDayLimitCountersService`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { NOT_FOUND, WRONG_FORMAT } = require('@condo/domains/common/constants/errors')
const { IPv4_REGEX } = require('@condo/domains/common/constants/regexps')
const { normalizePhone } = require('@condo/domains/common/utils/phone')
const access = require('@condo/domains/user/access/_internalResetSMSDayLimitCountersService')
const { RedisGuard } = require('@condo/domains/user/utils/serverSchema/guards')

const { USER_AUTH_LIMIT_TYPE } = require('../constants/common')


const redisGuard = new RedisGuard()

const ERRORS = {
    KEY_NOT_FOUND: {
        mutation: '_internalResetSMSDayLimitCounters',
        code: BAD_USER_INPUT,
        type: NOT_FOUND,
        message: 'Specified key does not exist.',
    },
    INVALID_KEY: {
        mutation: '_internalResetSMSDayLimitCounters',
        code: BAD_USER_INPUT,
        type: WRONG_FORMAT,
        message: 'The provided key is neither a valid phone number or a valid IP address.',
    },
}

const _internalResetSMSDayLimitCountersService = new GQLCustomSchema('_internalResetSMSDayLimitCountersService', {
    types: [
        {
            access: true,
            type: 'input _internalResetSMSDayLimitCountersInput { dv: Int!, sender: SenderFieldInput!, key: String! }',
        },
        {
            access: true,
            type: 'type _internalResetSMSDayLimitCountersOutput { ok: Boolean! }',
        },
    ],
    
    mutations: [
        {
            access: access.can_internalResetSMSDayLimitCounters,
            schema: '_internalResetSMSDayLimitCounters(data: _internalResetSMSDayLimitCountersInput!): _internalResetSMSDayLimitCountersOutput',
            resolver: async (parent, args, context) => {
                const { data: { key } } = args

                const isValidPhone = Boolean(normalizePhone(key))
                const isValidIP = IPv4_REGEX.test(key)

                if (!isValidPhone && !isValidIP) {
                    throw new GQLError(ERRORS.INVALID_KEY, context)
                }

                const keyWithPrefix = `:${USER_AUTH_LIMIT_TYPE}:${key}`
                const isKeyExists = await redisGuard.checkCounterExistence(keyWithPrefix)

                if (!isKeyExists) {
                    throw new GQLError({
                        ...ERRORS.KEY_NOT_FOUND,
                        message: `Key '${key}' does not exist.`,
                    }, context)
                }

                await redisGuard.deleteCounter(keyWithPrefix)

                return {
                    ok: true,
                }
            },
        },
    ],
    
})

module.exports = {
    _internalResetSMSDayLimitCountersService,
    ERRORS,
}
