/**
 * Generated by `createservice user.RegisterUserExternalIdentityService --type mutations`
 */

const faker = require('faker')
const { makeLoggedInAdminClient, expectToThrowAccessDeniedErrorToResult, catchErrorFrom } = require('@open-condo/keystone/test.utils')
const {
    registerUserExternalIdentityByTestClient,
    makeClientWithSupportUser,
    makeClientWithResidentUser,
    makeClientWithStaffUser,
    makeClientWithServiceUser,
    UserExternalIdentity,
} = require('@condo/domains/user/utils/testSchema')
const { SBER_ID_IDP_TYPE } = require('@condo/domains/user/constants/common')

const getRequest = (client) => ({
    user: { id: client.user.id },
    identityId: faker.random.alphaNumeric(8),
    identityType: SBER_ID_IDP_TYPE,
    meta: {
        dv: 1, city: faker.address.city(), county: faker.address.county(),
    },
})

describe('RegisterUserExternalIdentityService', () => {
    let admin, support, staff, service, resident

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        staff = await makeClientWithStaffUser()
        service = await makeClientWithServiceUser()
        resident = await makeClientWithResidentUser()
    })

    describe('Check access rules', () => {
        test('Resident case - can register', async () => {
            const resident = await makeClientWithResidentUser()
            const request = getRequest(resident)
            const [result] = await registerUserExternalIdentityByTestClient(resident, request)
            expect(result).toMatchObject({ status: 'ok' })

            // check data
            const [identity] = await UserExternalIdentity.getAll(resident, { user: { id: resident.user.id } })
            expect(identity.user.id).toBe(resident.user.id)
            expect(identity.identityId).toBe(request.identityId)
            expect(identity.identityType).toBe(request.identityType)
            expect(identity.meta).toMatchObject(request.meta)
        })
        test('Admin case - can not register', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerUserExternalIdentityByTestClient(admin, getRequest(admin))
            })
        })
        test('Support case - can not register', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerUserExternalIdentityByTestClient(support, getRequest(support))
            })
        })
        test('Staff case - can not register', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerUserExternalIdentityByTestClient(staff, getRequest(staff))
            })
        })
        test('Service case - can not register', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerUserExternalIdentityByTestClient(service, getRequest(service))
            })
        })
        test('Different user.id case - can not register', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerUserExternalIdentityByTestClient(resident, getRequest(service))
            })
        })
    })

    describe('Check validations', () => {
        test('Should check dv (=== 1)', async () => {
            await catchErrorFrom(async () => {
                await registerUserExternalIdentityByTestClient(resident, { ...getRequest(resident), dv: 2 })
            }, ({ errors }) => {
                expect(errors).toMatchObject([{
                    message: 'Unsupported value for dv',
                    path: ['result'],
                    extensions: {
                        mutation: 'registerUserExternalIdentity',
                        variable: ['data', 'dv'],
                        code: 'BAD_USER_INPUT',
                        type: 'DV_VERSION_MISMATCH',
                        message: 'Unsupported value for dv',
                    },
                }])
            })
        })
        test('Should check identityId is not empty', async () => {
            await catchErrorFrom(async () => {
                await registerUserExternalIdentityByTestClient(resident, { ...getRequest(resident), identityId: '' })
            }, ({ errors }) => {
                expect(errors).toMatchObject([{
                    message: 'Can not create UserExternalIdentity for empty identityId',
                    path: ['result'],
                    extensions: {
                        mutation: 'registerUserExternalIdentity',
                        variable: ['data', 'identityId'],
                        code: 'BAD_USER_INPUT',
                        type: 'EMPTY_EXTERNAL_IDENTITY_ID_VALUE',
                        message: 'Can not create UserExternalIdentity for empty identityId',
                    },
                }])
            })
        })
        test('Should check identityType is exists', async () => {
            await catchErrorFrom(async () => {
                await registerUserExternalIdentityByTestClient(resident, { ...getRequest(resident), identityType: 'WrongType' })
            }, ({ errors }) => {
                expect(errors).toMatchObject([{
                    message: 'Variable "$data" got invalid value "WrongType" at "data.identityType"; Value "WrongType" does not exist in "IdentityType" enum.',
                    name: 'UserInputError',
                }])
            })
        })
    })
})
