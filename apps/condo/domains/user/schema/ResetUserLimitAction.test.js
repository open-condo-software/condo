/**
 * Generated by `createschema user.ResetUserLimitAction 'type:Select:auth;identifier:Text;reason:Text'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor, expectValuesOfCommonFields, expectToThrowAccessDeniedErrorToResult, expectToThrowAuthenticationErrorToResult, expectToThrowGQLError } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects,
} = require('@open-condo/keystone/test.utils')

const { USER_AUTH_LIMIT_TYPE } = require('@condo/domains/user/constants/common')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { ResetUserLimitAction, createTestResetUserLimitAction, updateTestResetUserLimitAction } = require('@condo/domains/user/utils/testSchema')

const { ERRORS } = require('./_internalResetSMSDayLimitCountersService')

const { RedisGuard } = require('../utils/serverSchema/guards')
const { createTestPhone, _internalResetSMSDayLimitCountersByTestClient } = require('../utils/testSchema')


const redisGuard = new RedisGuard()
const COUNTER_VALUE_TO_UPDATE = 2

describe('ResetUserLimitAction', () => {
    let admin, support, user, anonymous, phone

    beforeAll(async () => {
        anonymous = await makeClient()
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
    })

    beforeEach(async () => {
        phone = createTestPhone()
        const key = `:${USER_AUTH_LIMIT_TYPE}:${phone}`

        for (let i = 0; i < COUNTER_VALUE_TO_UPDATE; i++)  {
            await redisGuard.incrementDayCounter(key)
        }
        const value = await redisGuard.getCounterValue(key)

        expect(Number(value)).toEqual(COUNTER_VALUE_TO_UPDATE)
    })

    describe('Access', () => {
        describe('Create', () => {
            test('admin: can create', async () => {
                await createTestResetUserLimitAction()
                const [data] = await _internalResetSMSDayLimitCountersByTestClient(admin, {
                    key: phone,
                })

                expect(data.ok).toEqual(true)
            })

            test('support: can create', async () => {
                const [data] = await _internalResetSMSDayLimitCountersByTestClient(support, {
                    key: phone,
                })

                expect(data.ok).toEqual(true)
            })

            test('user: can not create', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await _internalResetSMSDayLimitCountersByTestClient(user, {
                        key: phone,
                    })
                })
            })

            test('anonymous: can not execute', async () => {
                await expectToThrowAuthenticationErrorToResult(async () => {
                    await _internalResetSMSDayLimitCountersByTestClient(anonymous, {
                        key: phone,
                    })
                })
            })
        })

        describe('Update', () => {

        })

        describe('Delete', () => {

        })
    })

    describe('Logic', () => {
        test('reset counter by phone number', async () => {
            const key = `${CONFIRM_PHONE_COUNTER_PREFIX}${phone}`

            await _internalResetSMSDayLimitCountersByTestClient(support, {
                key: phone,
            })
            const value = await redisGuard.getCounterValue(key)

            expect(value).toBeNull()
        })

        test('reset counter by ip', async () => {
            const ip = faker.internet.ipv4()
            const key = `${CONFIRM_PHONE_COUNTER_PREFIX}${ip}`

            for (let i = 0; i < COUNTER_VALUE_TO_UPDATE; i++)  {
                await redisGuard.incrementDayCounter(key)
            }
            const beforeReset = await redisGuard.getCounterValue(key)

            expect(Number(beforeReset)).toEqual(COUNTER_VALUE_TO_UPDATE)

            await _internalResetSMSDayLimitCountersByTestClient(support, {
                key: ip,
            })
            const afterReset = await redisGuard.getCounterValue(key)

            expect(afterReset).toBeNull()
        })

        test('throws error if key is not valid ip or phone', async () => {
            const key = faker.random.alphaNumeric(8)
            for (let i = 0; i < COUNTER_VALUE_TO_UPDATE; i++)  {
                await redisGuard.incrementDayCounter(key)
            }
            const beforeReset = await redisGuard.getCounterValue(key)

            expect(Number(beforeReset)).toEqual(COUNTER_VALUE_TO_UPDATE)

            await expectToThrowGQLError(async () => {
                await _internalResetSMSDayLimitCountersByTestClient(support, {
                    key,
                })
            }, ERRORS.INVALID_KEY, 'result')
        })

        test('throws error if key is not exists', async () => {
            const phone = createTestPhone()

            await expectToThrowGQLError(async () => {
                await _internalResetSMSDayLimitCountersByTestClient(support, {
                    key: phone,
                })
            }, {
                ...ERRORS.KEY_NOT_FOUND,
                message: `Key '${phone}' does not exist.`,
            }, 'result')
        })
    })
})
