/**
 * Generated by `createschema division.DivisionProperty 'division:Relationship:Division:CASCADE; property:Relationship:Property:CASCADE;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/division/access/DivisionProperty')
const { OrganizationEmployee } = require('@condo/domains/organization/utils/serverSchema')
const { get } = require('lodash')
const { Property } = require('@condo/domains/property/utils/serverSchema')
const { Division } = require('../utils/serverSchema')


const DivisionProperty = new GQLListSchema('DivisionProperty', {
    schemaDoc: 'Join schema between division and property. Implements not only join feature, but also validation logic.',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        division: {
            schemaDoc: 'Division, that serves this property',
            type: Relationship,
            ref: 'Division',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        property: {
            schemaDoc: 'Property, that is being served by this division',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            hooks: {
                validateInput: async ({ resolvedData, operation, existingItem, addFieldValidationError, context, fieldPath, ...rest }) => {
                    const propertyId = resolvedData[fieldPath]
                    const [property] = await Property.getAll(context, { id: propertyId })
                    let divisionId
                    if (operation === 'create') {
                        divisionId = resolvedData.division
                    }
                    if (operation === 'update') {
                        divisionId = get(existingItem, 'division')
                    }
                    const [division] = await Division.getAll(context, { id: divisionId })
                    if (property.organization.id !== division.organization.id) {
                        addFieldValidationError('Cannot be connected to property, that does not belongs to organization, being served by division')
                    }
                },
            },
            access: {
                read: true,
                create: true,
                update: false,
            },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadDivisionProperties,
        create: access.canManageDivisionProperties,
        update: access.canManageDivisionProperties,
        delete: false,
        auth: true,
    },
})

module.exports = {
    DivisionProperty,
}
