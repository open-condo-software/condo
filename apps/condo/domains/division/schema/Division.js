/**
 * Generated by `createschema division.Division 'name:Text; organization:Relationship:Organization:CASCADE; responsible:Relationship:OrganizationEmployee:PROTECT;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/division/access/Division')
const { ORGANIZATION_OWNED_FIELD } = require('../../../schema/_common')
const { OrganizationEmployee } = require('@condo/domains/organization/utils/serverSchema')
const { get } = require('lodash')


const Division = new GQLListSchema('Division', {
    schemaDoc: 'Grouping of properties and employees with one single responsible person',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        name: {
            schemaDoc: 'Display name of this division',
            type: Text,
            isRequired: true,
        },

        organization: ORGANIZATION_OWNED_FIELD,

        responsible: {
            schemaDoc: 'Person, responsible for this division',
            type: Relationship,
            ref: 'OrganizationEmployee',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
            hooks: {
                validateInput: async ({ resolvedData, operation, existingItem, addFieldValidationError, context, fieldPath, ...rest }) => {
                    const responsibleId = resolvedData[fieldPath]
                    const [responsible] = await OrganizationEmployee.getAll(context, { id: responsibleId })
                    if (!responsible.role.canBeAssignedAsResponsible) {
                        addFieldValidationError('Cannot be connected to responsible which does not have `canBeAssignedAsResponsible` ability')
                    }
                    let organizationId
                    if (operation === 'create') {
                        organizationId = resolvedData.organization
                    }
                    if (operation === 'update') {
                        organizationId = get(existingItem, 'organization')
                    }
                    if (organizationId !== responsible.organization.id) {
                        addFieldValidationError('Cannot be connected to responsible from another organization')
                    }
                },
            },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadDivisions,
        create: access.canManageDivisions,
        update: access.canManageDivisions,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Division,
}
