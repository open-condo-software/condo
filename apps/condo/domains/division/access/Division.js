/**
 * Generated by `createschema division.Division 'name:Text; organization:Relationship:Organization:CASCADE; responsible:Relationship:OrganizationEmployee:PROTECT;'`
 */

const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { checkOrganizationPermission, queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const get = require('lodash/get')
const { Division } = require('../utils/serverSchema')

async function canReadDivisions ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.isAdmin || user.isSupport) return {}
    const userId = user.id
    return {
        organization: { ...queryOrganizationEmployeeFor(userId) },
    }
}

async function canManageDivisions ({ authentication: { item: user }, originalInput, operation, itemId, context }) {
    if (!user) return throwAuthenticationError()
    if (user.isAdmin) return true

    if (operation === 'create') {
        const organizationId = get(originalInput, ['organization', 'connect', 'id'])
        if (!organizationId) {
            return false
        }
        return await checkOrganizationPermission(context, user.id, organizationId, 'canManageDivisions')
    } else if (operation === 'update') {
        const [division] = await Division.getAll(context, { id: itemId })
        if (!division) {
            return false
        }
        const organizationId = division.organization.id
        if (!organizationId) {
            return false
        }
        return await checkOrganizationPermission(context, user.id, organizationId, 'canManageDivisions')
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadDivisions,
    canManageDivisions,
}
