/**
 * Generated by `createschema division.Division 'name:Text; organization:Relationship:Organization:CASCADE; responsible:Relationship:OrganizationEmployee:PROTECT;'`
 */

const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { checkOrganizationPermission, queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const get = require('lodash/get')
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')
const { getById } = require('@core/keystone/schema')

async function canReadDivisions ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isSupport || item.isAdmin) return {}
        const userId = item.id
        return {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(userId),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(userId),
                ],
            },
        }
    }
    return false
}

async function canManageDivisions ({ authentication: { item, listKey }, originalInput, operation, itemId }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        if (operation === 'create') {
            const organizationId = get(originalInput, ['organization', 'connect', 'id'])
            return await checkOrganizationPermission(item.id, organizationId, 'canManageDivisions')
        }
        if (operation === 'update') {
            const division = await getById('Division', itemId)
            if (!division) return false
            return await checkOrganizationPermission(item.id, division.organization, 'canManageDivisions')
        }
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadDivisions,
    canManageDivisions,
}
