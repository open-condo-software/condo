// @ts-nocheck
/**
 * Generated by `createschema division.DivisionProperty 'division:Relationship:Division:CASCADE; property:Relationship:Property:CASCADE;'`
 */

const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const get = require('lodash/get')
const { checkOrganizationPermission, queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const { DivisionProperty } = require('../utils/serverSchema')
const { Property } = require('@condo/domains/property/utils/serverSchema')

async function canReadDivisionProperties ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.isAdmin) return {}
    const userId = user.id
    return {
        division: { organization: { ...queryOrganizationEmployeeFor(userId) } },
    }
}

async function canManageDivisionProperties ({ authentication: { item: user }, originalInput, operation, itemId, context }) {
    if (!user) return throwAuthenticationError()
    if (user.isAdmin) return true
    if (operation === 'create') {
        const propertyId = get(originalInput, ['property', 'connect', 'id'])
        if (!propertyId) {
            return false
        }
        const [property] = await Property.getAll(context, { id: propertyId })
        if (!property) {
            return false
        }
        const organizationId = get(property, ['organization', 'id'])
        return await checkOrganizationPermission(context, user.id, organizationId, 'canManageDivisions')
    } else if (operation === 'update') {
        const [divisionProperty] = await DivisionProperty.getAll(context, { id: itemId })
        if (!divisionProperty) {
            return false
        }
        const propertyId = get(divisionProperty, ['property', 'id'])
        const [property] = await Property.getAll(context, { id: propertyId })
        if (!property) {
            return false
        }
        const organizationId = get(property, ['organization', 'id'])
        return await checkOrganizationPermission(context, user.id, organizationId, 'canManageDivisions')
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadDivisionProperties,
    canManageDivisionProperties,
}
