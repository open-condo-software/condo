/**
 * Generated by `createschema ticket.TicketFilterTemplate 'name:Text; employee:Relationship:OrganizationEmployee:CASCADE; filters:Json'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/ticket/access/TicketFilterTemplate')


const TicketFilterTemplate = new GQLListSchema('TicketFilterTemplate', {
    // TODO(codegen): write doc for the TicketFilterTemplate domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        name: {
            // TODO(codegen): write doc for TicketFilterTemplate.name field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        employee: {
            // TODO(codegen): write doc for TicketFilterTemplate.employee field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'OrganizationEmployee',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        filters: {
            // TODO(codegen): write doc for TicketFilterTemplate.filters field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            extendGraphQLTypes: ['type TicketFilters { number: Int, createdAt: [String], status: [String], details: String, property: [String], address: String, division: [String], clientName: String, executor: [String], assignee: [String], executorName: String, assigneeName: String, attributes: [String], source: [String], sectionName: [String], floorName: [String], unitName: [String], placeClassifier: [String], categoryClassifier: [String], clientPhone: [String], author: [String] }'],
            graphQLReturnType: 'TicketFilters',
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadTicketFilterTemplates,
        create: access.canManageTicketFilterTemplates,
        update: access.canManageTicketFilterTemplates,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TicketFilterTemplate,
}
