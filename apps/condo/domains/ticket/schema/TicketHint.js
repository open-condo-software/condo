/**
 * Generated by `createschema ticket.TicketHint 'organization:Relationship:Organization:CASCADE; name?:Text; properties:Relationship:Property:SET_NULL; content:Text;'`
 */

const { Text, Relationship } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')
const access = require('@condo/domains/ticket/access/TicketHint')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const xss = require('xss')

const TicketHint = new GQLListSchema('TicketHint', {
    schemaDoc: 'Help information related to a property or group of properties',
    fields: {

        organization: ORGANIZATION_OWNED_FIELD,

        name: {
            schemaDoc: 'Hint name',
            type: Text,
        },

        properties: {
            schemaDoc: 'Properties to which this help applies',
            type: Relationship,
            ref: 'Property',
            many: true,
        },

        content: {
            schemaDoc: 'Textual content of help in HTML format',
            type: Text,
            isRequired: true,
            hooks: {
                resolveInput: ({ resolvedData, fieldPath }) => {
                    return xss(resolvedData[fieldPath])
                },
            },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadTicketHints,
        create: access.canManageTicketHints,
        update: access.canManageTicketHints,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TicketHint,
}
