/**
 * Generated by `createschema ticket.UserFavoriteTicket 'user:Relationship:User:CASCADE; ticket:Relationship:Ticket:CASCADE;'`
 */

const dayjs = require('dayjs')

const { UUID_RE, expectToThrowInternalError } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { UNIQUE_CONSTRAINT_ERROR } = require('@condo/domains/common/constants/errors')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { UserFavoriteTicket, createTestUserFavoriteTicket, updateTestUserFavoriteTicket, createTestTicket } = require('@condo/domains/ticket/utils/testSchema')

describe('UserFavoriteTicket', () => {
    let clientWithProperty1
    let clientWithProperty2

    beforeAll(async () => {
        clientWithProperty1 = await makeClientWithProperty()
        clientWithProperty2 = await makeClientWithProperty()
    })

    describe('Create', () => {
        test('can create UserFavoriteTicket in user organization', async () => {
            const [ticket] = await createTestTicket(clientWithProperty1, clientWithProperty1.organization, clientWithProperty1.property)
            const [userFavoriteTicket] = await createTestUserFavoriteTicket(clientWithProperty1, clientWithProperty1.user, ticket)

            expect(userFavoriteTicket.id).toMatch(UUID_RE)
            expect(userFavoriteTicket.user.id).toMatch(clientWithProperty1.user.id)
            expect(userFavoriteTicket.ticket.id).toMatch(ticket.id)
        })

        test('cannot create UserFavoriteTicket with ticket in not user organization', async () => {
            const [ticket] = await createTestTicket(clientWithProperty1, clientWithProperty1.organization, clientWithProperty1.property)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestUserFavoriteTicket(clientWithProperty2, clientWithProperty2.user, ticket)
            })
        })

        test('cannot create UserFavoriteTicket with same user and ticket', async () => {
            const [ticket] = await createTestTicket(clientWithProperty1, clientWithProperty1.organization, clientWithProperty1.property)
            await createTestUserFavoriteTicket(clientWithProperty1, clientWithProperty1.user, ticket)

            await expectToThrowInternalError(async () => {
                await createTestUserFavoriteTicket(clientWithProperty1, clientWithProperty1.user, ticket)
            }, `${UNIQUE_CONSTRAINT_ERROR} "user_favorite_ticket_unique_user_and_ticket"`)
        })
    })

    describe('Read', () => {
        test('cannot read not his own UserFavoriteTicket', async () => {
            const [ticket] = await createTestTicket(clientWithProperty1, clientWithProperty1.organization, clientWithProperty1.property)
            const [userFavoriteTicket] = await createTestUserFavoriteTicket(clientWithProperty1, clientWithProperty1.user, ticket)

            const readUserFavoriteTicket = await UserFavoriteTicket.getOne(clientWithProperty2, { id: userFavoriteTicket.id })

            expect(readUserFavoriteTicket).toBeUndefined()
        })
    })

    describe('Update', () => {
        test('cannot update UserFavoriteTicket fields', async () => {
            const [ticket] = await createTestTicket(clientWithProperty1, clientWithProperty1.organization, clientWithProperty1.property)
            const [userFavoriteTicket] = await createTestUserFavoriteTicket(clientWithProperty1, clientWithProperty1.user, ticket)

            const [ticket1] = await createTestTicket(clientWithProperty1, clientWithProperty1.organization, clientWithProperty1.property)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestUserFavoriteTicket(clientWithProperty1, userFavoriteTicket.id, {
                    ticket: { connect: { id: ticket1.id } },
                })
            })
        })
    })

    describe('Soft delete', () => {
        test('can soft delete his UserFavoriteTicket', async () => {
            const [ticket] = await createTestTicket(clientWithProperty1, clientWithProperty1.organization, clientWithProperty1.property)
            const [userFavoriteTicket] = await createTestUserFavoriteTicket(clientWithProperty1, clientWithProperty1.user, ticket)

            await updateTestUserFavoriteTicket(clientWithProperty1, userFavoriteTicket.id, {
                deletedAt: dayjs().toISOString(),
            })

            const readUserFavoriteTicket = await UserFavoriteTicket.getOne(clientWithProperty1, { id: userFavoriteTicket.id, deletedAt_not: null })

            expect(readUserFavoriteTicket).toBeDefined()
        })

        test('cannot soft delete not his UserFavoriteTicket', async () => {
            const [ticket] = await createTestTicket(clientWithProperty1, clientWithProperty1.organization, clientWithProperty1.property)
            const [userFavoriteTicket] = await createTestUserFavoriteTicket(clientWithProperty1, clientWithProperty1.user, ticket)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestUserFavoriteTicket(clientWithProperty2, userFavoriteTicket.id, {
                    deletedAt: dayjs().toISOString(),
                })
            })
        })
    })
})
