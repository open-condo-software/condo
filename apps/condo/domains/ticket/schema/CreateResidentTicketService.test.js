/**
 * Generated by `createservice ticket.ResidentTicketService --type mutations`
 */
const { makeClientWithProperty } = require('../../property/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { createResidentTicketByTestClient } = require('@condo/domains/ticket/utils/testSchema')
const { UUID_RE } = require('@core/keystone/test.utils')
const faker = require('faker')
const { makeLoggedInClient } = require('@condo/domains/user/utils/testSchema')
const { createTestUser } = require('@condo/domains/user/utils/testSchema')
const { createTestConfirmPhoneAction } = require('@condo/domains/user/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj } = require('@condo/domains/common/utils/testSchema')

describe('CreateResidentTicketService', () => {
    test('user: create resident ticket', async () => {
        const client = await makeClientWithProperty()
        const [data] = await createResidentTicketByTestClient(client, client.property)
        expect(data.id).toMatch(UUID_RE)
    })

    test('resident: create resident ticket', async () => {
        const admin = await makeLoggedInAdminClient()
        const [token] = await createTestConfirmPhoneAction(admin, { isPhoneVerified: true })
        const [_, userAttrs] = await createTestUser(admin, { phone: token.phone, type: 'resident' })
        const client = await makeLoggedInClient(userAttrs)
        const [organization] = await createTestOrganization(admin)
        const [property] = await createTestProperty(admin, organization)
        const [data] = await createResidentTicketByTestClient(client, property)
        expect(data.id).toMatch(UUID_RE)
    })

    test('user: create resident ticket with wrong unitName', async () => {
        const client = await makeClientWithProperty()

        try {
            await createResidentTicketByTestClient(client, client.property, { unitName: faker.random.alphaNumeric(10) })
        } catch (error) {
            expect(error.errors[0].message).toEqual('unitName is wrong')
        }
    })

    test('user: create resident ticket without details', async () => {
        const client = await makeClientWithProperty()

        try {
            await createResidentTicketByTestClient(client, client.property, { details: null })
        } catch (error) {
            expect(error.errors).toHaveLength(1)
        }
    })

    test('user: cannot create resident ticket without property', async () => {
        const client = await makeClientWithProperty()
        try {
            await createResidentTicketByTestClient(client)
        } catch (error) {
            expect(error.errors[0].message).toEqual('reserved for government organizations')
        }
    })

    test('anonymous: create resident ticket', async () => {
        const anon = await makeClient()
        const admin = await makeLoggedInAdminClient()
        const [organization] = await createTestOrganization(admin)
        const [property] = await createTestProperty(admin, organization)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createResidentTicketByTestClient(anon, property)
        })
    })

    test('admin: create resident ticket', async () => {
        const admin = await makeLoggedInAdminClient()
        const [organization] = await createTestOrganization(admin)
        const [property] = await createTestProperty(admin, organization)
        const [data] = await createResidentTicketByTestClient(admin, property)
        expect(data.id).toMatch(UUID_RE)
    })
})
