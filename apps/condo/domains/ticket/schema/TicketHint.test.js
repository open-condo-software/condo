/**
 * Generated by `createschema ticket.TicketHint 'organization:Relationship:Organization:CASCADE; name?:Text; properties:Relationship:Property:SET_NULL; content:Text;'`
 */
const faker = require('faker')
const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@core/keystone/test.utils')

const { TicketHint, createTestTicketHint, updateTestTicketHint } = require('@condo/domains/ticket/utils/testSchema')
const { expectToThrowAuthenticationErrorToObj, expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObjects } = require('@condo/domains/common/utils/testSchema')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee, createTestOrganizationLink } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

describe('TicketHint', () => {
    describe('Permissions', () => {
        describe('Create', () => {
            describe('Anonymous', () => {
                it('Cannot create TicketHint', async () => {
                    const client = await makeClient()

                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)

                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await createTestTicketHint(client, organization, {})
                    })
                })
            })

            describe('Admin', () => {
                it('Can create TicketHint', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)

                    const [ticketHint] = await createTestTicketHint(admin, organization, {})

                    expect(ticketHint.id).toMatch(UUID_RE)
                })
            })

            describe('Organization Employee', () => {
                it('can create TicketHint in the organization in which he is an employee with "canManageTicketHints" is true', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                        canManageTicketHints: true,
                    })
                    await createTestOrganizationEmployee(admin, organization, user.user, role)

                    const [ticketHint] = await createTestTicketHint(user, organization, {})

                    expect(ticketHint.id).toMatch(UUID_RE)
                })

                it('can create TicketHint in the related "to" organization ' +
                    'if in the related "from" organization the employee with the "canManageTicketHints" is true', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const clientFrom = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationFrom] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                        canManageTicketHints: true,
                    })
                    await createTestOrganizationEmployee(admin, organizationFrom, clientFrom.user, role)

                    const [organizationTo] = await createTestOrganization(admin)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [ticketHint] = await createTestTicketHint(clientFrom, organizationTo, {})

                    expect(ticketHint.id).toMatch(UUID_RE)
                })

                it('cannot create TicketHint in the organization in which he is not an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestTicketHint(user, organization)
                    })
                })

                it('cannot create TicketHint in the organization in which he is an employee with "canManageTicketHints" is false', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                    await createTestOrganizationEmployee(admin, organization, user.user, role)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestTicketHint(user, organization, {})
                    })
                })

                it('cannot create TicketHint in the related "to" organization' +
                    'if in the related "from" organization the employee with "canManageTicketHints" is false', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const clientFrom = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationFrom] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom)
                    await createTestOrganizationEmployee(admin, organizationFrom, clientFrom.user, role)

                    const [organizationTo] = await createTestOrganization(admin)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestTicketHint(clientFrom, organizationTo, {})
                    })
                })

                it('cannot create TicketHint in the related "from" organization', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const [organizationFrom] = await createTestOrganization(admin)

                    const clientTo = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationTo] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationTo, {
                        canManageTicketHints: true,
                    })
                    await createTestOrganizationEmployee(admin, organizationTo, clientTo.user, role)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestTicketHint(clientTo, organizationFrom, {})
                    })
                })
            })
        })

        describe('Read', () => {
            describe('Anonymous', () => {
                it('Cannot read TicketHints', async () => {
                    const client = await makeClient()

                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)

                    await createTestTicketHint(admin, organization, {})

                    await expectToThrowAuthenticationErrorToObjects(async () => {
                        await TicketHint.getAll(client)
                    })
                })
            })

            describe('Admin', () => {
                it('Can read TicketHints', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)

                    const [createdTicketHint] = await createTestTicketHint(admin, organization, {})

                    const ticketHint = await TicketHint.getOne(admin, { id: createdTicketHint.id })

                    expect(ticketHint.id).toMatch(UUID_RE)
                })
            })

            describe('Organization Employee', () => {
                it('can read TicketHints from the organization in which he is an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                    await createTestOrganizationEmployee(admin, organization, user.user, role)

                    const [createdTicketHint] = await createTestTicketHint(admin, organization, {})

                    const ticketHint = await TicketHint.getOne(user, { id: createdTicketHint.id })

                    expect(ticketHint.id).toMatch(UUID_RE)
                })

                it('can read TicketHints from the related "to" organization', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const clientFrom = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationFrom] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom)
                    await createTestOrganizationEmployee(admin, organizationFrom, clientFrom.user, role)

                    const [organizationTo] = await createTestOrganization(admin)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [createdTicketHint] = await createTestTicketHint(admin, organizationTo, {})

                    const ticketHint = await TicketHint.getOne(clientFrom, { id: createdTicketHint.id })

                    expect(ticketHint.id).toMatch(UUID_RE)
                })

                it('cannot read TicketHints from the organization in which he is not an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)

                    const [createdTicketHint] = await createTestTicketHint(admin, organization, {})

                    const ticketHint = await TicketHint.getOne(user, { id: createdTicketHint.id })

                    expect(ticketHint).toBeUndefined()
                })

                it('cannot read TicketHints from the related "from" organization', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const [organizationFrom] = await createTestOrganization(admin)

                    const clientTo = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationTo] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationTo, {
                        canManageTicketHints: true,
                    })
                    await createTestOrganizationEmployee(admin, organizationTo, clientTo.user, role)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [createdTicketHint] = await createTestTicketHint(admin, organizationFrom, {})

                    const ticketHint = await TicketHint.getOne(clientTo, { id: createdTicketHint.id })

                    expect(ticketHint).toBeUndefined()
                })
            })
        })

        describe('Update', () => {
            describe('Anonymous', () => {
                it('Cannot update TicketHint', async () => {
                    const client = await makeClient()

                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)

                    const [TicketHint] = await createTestTicketHint(admin, organization, {})

                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await updateTestTicketHint(client, TicketHint.id, {})
                    })
                })
            })

            describe('Admin', () => {
                it('Can update TicketHint', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)
                    const newContent = faker.random.alphaNumeric(8)

                    const [ticketHint] = await createTestTicketHint(admin, organization, {})

                    const [updatedTicketHint] = await updateTestTicketHint(admin, ticketHint.id, {
                        content: newContent,
                    })

                    expect(updatedTicketHint.id).toEqual(ticketHint.id)
                    expect(updatedTicketHint.content).toEqual(newContent)
                })
            })

            describe('Organization Employee', () => {
                it('can update TicketHint in the organization in which he is an employee with "canManageTicketHints" is true', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                        canManageTicketHints: true,
                    })
                    await createTestOrganizationEmployee(admin, organization, user.user, role)
                    const newContent = faker.random.alphaNumeric(8)

                    const [ticketHint] = await createTestTicketHint(user, organization, {})

                    const [updatedTicketHint] = await updateTestTicketHint(user, ticketHint.id, {
                        content: newContent,
                    })

                    expect(updatedTicketHint.id).toEqual(ticketHint.id)
                    expect(updatedTicketHint.content).toEqual(newContent)
                })

                it('can update TicketHint in the related "to" organization' +
                    'if in the related "from" organization the employee with the "canManageTicketHints" is true', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const clientFrom = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationFrom] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                        canManageTicketHints: true,
                    })
                    await createTestOrganizationEmployee(admin, organizationFrom, clientFrom.user, role)

                    const [organizationTo] = await createTestOrganization(admin)
                    const newContent = faker.random.alphaNumeric(8)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [ticketHint] = await createTestTicketHint(clientFrom, organizationTo, {})

                    const [updatedTicketHint] = await updateTestTicketHint(clientFrom, ticketHint.id, {
                        content: newContent,
                    })

                    expect(updatedTicketHint.id).toEqual(ticketHint.id)
                    expect(updatedTicketHint.content).toEqual(newContent)
                })

                it('cannot update TicketHint in the organization in which he is not an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)
                    const newContent = faker.random.alphaNumeric(8)

                    const [ticketHint] = await createTestTicketHint(admin, organization, {})

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestTicketHint(user, ticketHint.id, {
                            content: newContent,
                        })
                    })
                })

                it('cannot update TicketHint in the organization in which he is an employee with "canManageTicketHints" is false', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                    await createTestOrganizationEmployee(admin, organization, user.user, role)
                    const newContent = faker.random.alphaNumeric(8)

                    const [ticketHint] = await createTestTicketHint(admin, organization, {})

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestTicketHint(user, ticketHint.id, {
                            content: newContent,
                        })
                    })
                })

                it('cannot update TicketHint in the related "to" organization' +
                    'if in the related "from" organization the employee with "canManageTicketHints" is false', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const clientFrom = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationFrom] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom)
                    await createTestOrganizationEmployee(admin, organizationFrom, clientFrom.user, role)

                    const [organizationTo] = await createTestOrganization(admin)
                    const newContent = faker.random.alphaNumeric(8)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [ticketHint] = await createTestTicketHint(admin, organizationTo, {})

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestTicketHint(clientFrom, ticketHint.id, {
                            content: newContent,
                        })
                    })
                })

                it('cannot update TicketHint in the related "from" organization', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const [organizationFrom] = await createTestOrganization(admin)
                    const newContent = faker.random.alphaNumeric(8)
                    const clientTo = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationTo] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationTo, {
                        canManageTicketHints: true,
                    })
                    await createTestOrganizationEmployee(admin, organizationTo, clientTo.user, role)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [ticketHint] = await createTestTicketHint(admin, organizationFrom, {})

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestTicketHint(clientTo, ticketHint.id, {
                            content: newContent,
                        })
                    })
                })
            })
        })
    })
    describe('Validations', function () {
        test('xss', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const content = '<script> console.log(\'hello, world\') </script>'

            const [createdTicketHint] = await createTestTicketHint(admin, organization, {
                content,
            })

            const ticketHint = await TicketHint.getOne(admin, { id: createdTicketHint.id })

            expect(ticketHint.id).toMatch(UUID_RE)
            expect(ticketHint.content).toEqual('&lt;script&gt; console.log(\'hello, world\') &lt;/script&gt;')
        })
    })
})

