/**
 * Generated by `createschema ticket.UserFavoriteTicket 'user:Relationship:User:CASCADE; ticket:Relationship:Ticket:CASCADE;'`
 */

const { Relationship } = require('@keystonejs/fields')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { addOrganizationFieldPlugin } = require('@condo/domains/organization/schema/plugins/addOrganizationFieldPlugin')
const access = require('@condo/domains/ticket/access/UserFavoriteTicket')


const UserFavoriteTicket = new GQLListSchema('UserFavoriteTicket', {
    schemaDoc: 'Ticket that user has added to favorites',
    fields: {
        user: {
            type: Relationship,
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        ticket: {
            type: Relationship,
            ref: 'Ticket',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['user', 'ticket'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'user_favorite_ticket_unique_user_and_ticket',
            },
        ],
    },
    plugins: [
        addOrganizationFieldPlugin({ fromField: 'ticket' }),
        uuided(),
        versioned(),
        tracked(),
        softDeleted(),
        dvAndSender(),
        historical(),
    ],
    access: {
        read: access.canReadUserFavoriteTickets,
        create: access.canManageUserFavoriteTickets,
        update: access.canManageUserFavoriteTickets,
        delete: false,
        auth: true,
    },
})

module.exports = {
    UserFavoriteTicket,
}
