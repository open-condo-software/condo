/**
 * Generated by `createschema ticket.TicketClassifier 'organization?:Relationship:Organization:CASCADE;name:Text;parent?:Relationship:TicketClassifier:PROTECT;'`
 */

const { makeLoggedInAdminClient, makeClient, makeLoggedInClient } = require('@core/keystone/test.utils')
const { createTestUser } = require('@condo/domains/user/utils/testSchema')
const { TicketClassifier, createTestTicketClassifier, updateTestTicketClassifier } = require('@condo/domains/ticket/utils/testSchema')
const faker = require('faker')

describe('TicketClassifier CRUD', () => {
    describe('User', () => {
        it('cant create', async () => {
            const admin = await makeLoggedInAdminClient()
            const [_, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            try {
                await createTestTicketClassifier(client)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })
        it('can read', async () => {
            const admin = await makeLoggedInAdminClient()
            const [_, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            const [objCreated, attrs] = await createTestTicketClassifier(admin)
            const objs = await TicketClassifier.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
            expect(objs[0].id).toMatch(objCreated.id)
            expect(objs[0].dv).toEqual(1)
            expect(objs[0].sender).toEqual(attrs.sender)
            expect(objs[0].v).toEqual(1)
            expect(objs[0].newId).toEqual(null)
            expect(objs[0].deletedAt).toEqual(null)
            expect(objs[0].createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            expect(objs[0].updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            expect(objs[0].createdAt).toMatch(objCreated.createdAt)
            expect(objs[0].updatedAt).toMatch(objCreated.updatedAt)

        })
        it('cant update', async () => {
            const admin = await makeLoggedInAdminClient()
            const [_, userAttrs] = await createTestUser(admin)
            const client = await makeLoggedInClient(userAttrs)
            const [objCreated] = await createTestTicketClassifier(admin)
            const payload = { name: faker.lorem.word() }
            try {
                await updateTestTicketClassifier(client, objCreated.id, payload)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })
        it('cant delete', async () => {
            const admin = await makeLoggedInAdminClient()
            const [_, userAttrs] = await createTestUser(admin)
            const [objCreated] = await createTestTicketClassifier(admin)
            const client = await makeLoggedInClient(userAttrs)
            try {
                await TicketClassifier.delete(client, objCreated.id)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })
    })
    describe('Anonymous', () => {
        it('cant create', async () => {
            const client = await makeClient()
            try {
                await createTestTicketClassifier(client)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })
        it('cant read', async () => {
            const client = await makeClient()
            try {
                await TicketClassifier.getAll(client)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['objs'],
                })
                expect(e.data).toEqual({ 'objs': null })
            }
        })
        it('cant update', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestTicketClassifier(admin)
            const client = await makeClient()
            const payload = { name: faker.lorem.word() }
            try {
                await updateTestTicketClassifier(client, objCreated.id, payload)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })
        it('cant delete', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestTicketClassifier(admin)
            const client = await makeClient()
            try {
                await TicketClassifier.delete(client, objCreated.id)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })
    })
})
