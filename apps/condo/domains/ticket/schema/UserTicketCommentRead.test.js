/**
 * Generated by `createschema ticket.UserTicketCommentRead 'user:Relationship:User:CASCADE; ticket:Relationship:Ticket:CASCADE; readResidentCommentAt:DateTimeUtc;'`
 */

const faker = require('faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { UserTicketCommentRead, createTestUserTicketCommentRead, updateTestUserTicketCommentRead, createTestTicket } = require('@condo/domains/ticket/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObjects, expectToThrowAccessDeniedErrorToObj } = require('@condo/domains/common/utils/testSchema')
const {
    createTestOrganizationWithAccessToAnotherOrganization,
    createTestOrganizationEmployeeRole,
    updateTestOrganizationEmployee, createTestOrganization, createTestOrganizationEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithProperty, makeClientWithResidentAccessAndProperty, createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')
const { createTestResident } = require('@condo/domains/resident/utils/testSchema')

describe('UserTicketCommentRead', () => {
    describe('employee', () => {
        describe('create', () => {
            test('can create UserTicketCommentRead to comment in employee organization', async () => {
                const userClient = await makeClientWithProperty()
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property)
                const [userTicketCommentRead] = await createTestUserTicketCommentRead(userClient, userClient.user, ticket)

                expect(userTicketCommentRead.id).toMatch(UUID_RE)
            })

            test('cannot create UserTicketCommentRead to comment in not employee organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const userClient = await makeClientWithProperty()
                const [organization1] = await createTestOrganization(admin)
                const [property1] = await createTestProperty(admin, organization1)

                const [role] = await createTestOrganizationEmployeeRole(admin, userClient.organization)
                await createTestOrganizationEmployee(admin, userClient.organization, userClient.user, role)

                const [ticket] = await createTestTicket(admin, organization1, property1)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestUserTicketCommentRead(userClient, userClient.user, ticket)
                })
            })
        })

        describe('read', () => {
            test('can read own UserTicketCommentRead', async () => {
                const userClient = await makeClientWithProperty()
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property)
                const [userTicketCommentRead] = await createTestUserTicketCommentRead(userClient, userClient.user, ticket)

                const userTicketCommentReadObjs = await UserTicketCommentRead.getAll(userClient)

                expect(userTicketCommentReadObjs).toHaveLength(1)
                expect(userTicketCommentReadObjs[0].id).toEqual(userTicketCommentRead.id)
            })

            test('cannot read UserTicketCommentRead with other user', async () => {
                const userClient = await makeClientWithProperty()
                const userClient1 = await makeClientWithProperty()
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property)
                await createTestUserTicketCommentRead(userClient, userClient.user, ticket)

                const userTicketCommentReadObjs = await UserTicketCommentRead.getAll(userClient1)

                expect(userTicketCommentReadObjs).toHaveLength(0)
            })
        })

        describe('update', () => {
            test('can update own UserTicketCommentRead', async () => {
                const userClient = await makeClientWithProperty()
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property)
                const [userTicketCommentRead] = await createTestUserTicketCommentRead(userClient, userClient.user, ticket)
                const newReadResidentCommentAt = new Date().toISOString()

                const [updatedUserTicketCommentRead] = await updateTestUserTicketCommentRead(userClient, userTicketCommentRead.id, {
                    readResidentCommentAt: newReadResidentCommentAt,
                })

                expect(updatedUserTicketCommentRead.id).toEqual(userTicketCommentRead.id)
                expect(updatedUserTicketCommentRead.readResidentCommentAt).toEqual(newReadResidentCommentAt)
            })

            test('cannot update UserTicketCommentRead with other user', async () => {
                const userClient = await makeClientWithProperty()
                const userClient1 = await makeClientWithProperty()
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property)
                const [userTicketCommentRead] = await createTestUserTicketCommentRead(userClient, userClient.user, ticket)
                const newReadResidentCommentAt = new Date().toISOString()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserTicketCommentRead(userClient1, userTicketCommentRead.id, {
                        readResidentCommentAt: newReadResidentCommentAt,
                    })
                })
            })
        })
    })

    describe('resident', () => {
        describe('create', () => {
            test('cannot create UserTicketCommentRead', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const unitName = faker.random.alphaNumeric(5)

                await createTestResident(admin, residentClient.user, organization, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestUserTicketCommentRead(residentClient, residentClient.user, ticket)
                })
            })
        })

        describe('read', () => {
            test('cannot read UserTicketCommentRead', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()
                const userClient = await makeClientWithProperty()
                const unitName = faker.random.alphaNumeric(5)

                await createTestResident(admin, residentClient.user, userClient.organization, userClient.property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property, {
                    unitName,
                })
                await createTestUserTicketCommentRead(userClient, userClient.user, ticket)

                const userTicketCommentReadObjs = await UserTicketCommentRead.getAll(residentClient)

                expect(userTicketCommentReadObjs).toHaveLength(0)
            })
        })

        describe('update', () => {
            test('cannot update UserTicketCommentRead', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()
                const userClient = await makeClientWithProperty()
                const unitName = faker.random.alphaNumeric(5)

                await createTestResident(admin, residentClient.user, userClient.organization, userClient.property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property, {
                    unitName,
                })
                const [userTicketCommentRead] = await createTestUserTicketCommentRead(userClient, userClient.user, ticket)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUserTicketCommentRead(residentClient, userTicketCommentRead.id, {})
                })
            })
        })
    })
})
