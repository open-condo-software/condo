/**
 * Generated by `createservice ticket.GetAllResidentTicketsService --type queries`
 */
const { UUID_RE } = require('@core/keystone/test.utils')
const { makeClientWithResidentUserAndProperty } = require('@condo/domains/property/utils/testSchema')
const { createResidentTicketByTestClient } = require('@condo/domains/ticket/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { getAllResidentTicketsByTestClient } = require('@condo/domains/ticket/utils/testSchema')

describe('GetAllResidentTicketsService', () => {
    test('resident: can read resident ticket', async () => {
        const userClient = await makeClientWithResidentUserAndProperty()
        const [residentTicket] = await createResidentTicketByTestClient(userClient, userClient.property)
        const [tickets] = await getAllResidentTicketsByTestClient(userClient, {}, 1, 0)

        expect(tickets).toHaveLength(1)
        const [ticket] = tickets
        expect(ticket.id).toMatch(UUID_RE)
        expect(ticket.id).toBeDefined()
        expect(ticket.organization).toBeDefined()
        expect(ticket.property).toBeDefined()
        expect(ticket.client).toBeDefined()
        expect(ticket.details).toBeDefined()
        expect(ticket.source).toBeDefined()
        expect(ticket.id).toEqual(residentTicket.id)
        expect(ticket.organization).toEqual(residentTicket.organization)
        expect(ticket.property).toEqual(residentTicket.property)
        expect(ticket.client).toEqual(residentTicket.client)
        expect(ticket.details).toEqual(residentTicket.details)
        expect(ticket.source).toEqual(residentTicket.source)
    })

    test('resident: cannot read ticket fields which not in ResidentTicketOutput', async () =>{
        const userClient = await makeClientWithResidentUserAndProperty()
        await createResidentTicketByTestClient(userClient, userClient.property)

        const [tickets] = await getAllResidentTicketsByTestClient(userClient, {}, 1, 0)
        const [ticket] = tickets
        expect(ticket.watchers).toBeUndefined()
        expect(ticket.meta).toBeUndefined()
        expect(ticket.sourceMeta).toBeUndefined()
        expect(ticket.updatedBy).toBeUndefined()
        expect(ticket.createdBy).toBeUndefined()
        expect(ticket.operator).toBeUndefined()
        expect(ticket.assignee).toBeUndefined()
        expect(ticket.executor).toBeUndefined()
        expect(ticket.contact).toBeUndefined()
    })

    test('user: can read only own resident ticket', async () => {
        const client = await makeClientWithResidentUserAndProperty()
        const client1 = await makeClientWithResidentUserAndProperty()
        await createResidentTicketByTestClient(client, client.property)
        await createResidentTicketByTestClient(client1, client1.property)

        const [data] = await getAllResidentTicketsByTestClient(client, {}, 1, 0)
        expect(data).toHaveLength(1)
    })

    test('anonymous: didn\'t get resident ticket', async () => {
        const client = await makeClient()
        try {
            await getAllResidentTicketsByTestClient(client, {}, 1, 0)
        } catch (error) {
            expect(error.errors).toHaveLength(1)
            expect(error.errors[0].name).toEqual('AuthenticationError')
        }
    })

    test('admin: get resident tickets', async () => {
        const admin = await makeLoggedInAdminClient()
        const client = await makeClientWithResidentUserAndProperty()
        await createResidentTicketByTestClient(client, client.property)

        const [data] = await getAllResidentTicketsByTestClient(admin, {}, 1, 0)
        expect(data).toHaveLength(1)
    })
})