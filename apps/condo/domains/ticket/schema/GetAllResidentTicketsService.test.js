/**
 * Generated by `createservice ticket.GetAllResidentTicketsService --type queries`
 */
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { expectToThrowAuthenticationErrorToObjects } = require('@condo/domains/common/utils/testSchema')
const { UUID_RE } = require('@core/keystone/test.utils')
const { makeClientWithResidentAccessAndProperty } = require('@condo/domains/property/utils/testSchema')
const { createResidentTicketByTestClient } = require('@condo/domains/ticket/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { ResidentTicket } = require('@condo/domains/ticket/utils/testSchema')

describe('GetAllResidentTicketsService', () => {
    test('resident: can read resident ticket', async () => {
        const userClient = await makeClientWithResidentAccessAndProperty()
        const [residentTicket] = await createResidentTicketByTestClient(userClient, userClient.property)
        const [ticket] = await ResidentTicket.getAll(userClient, {})

        expect(ticket.id).toMatch(UUID_RE)
        expect(ticket.id).toBeDefined()
        expect(ticket.organization).toBeDefined()
        expect(ticket.property).toBeDefined()
        expect(ticket.client).toBeDefined()
        expect(ticket.details).toBeDefined()
        expect(ticket.source).toBeDefined()
        expect(ticket.id).toEqual(residentTicket.id)
        expect(ticket.organization).toEqual(residentTicket.organization)
        expect(ticket.property).toEqual(residentTicket.property)
        expect(ticket.client).toEqual(residentTicket.client)
        expect(ticket.details).toEqual(residentTicket.details)
        expect(ticket.source).toEqual(residentTicket.source)
    })

    test('resident: cannot read ticket fields which not in ResidentTicketOutput', async () =>{
        const userClient = await makeClientWithResidentAccessAndProperty()
        await createResidentTicketByTestClient(userClient, userClient.property)

        const [ticket] = await ResidentTicket.getAll(userClient, {})
        expect(ticket.meta).toBeUndefined()
        expect(ticket.sourceMeta).toBeUndefined()
        expect(ticket.updatedBy).toBeUndefined()
        expect(ticket.createdBy).toBeUndefined()
        expect(ticket.operator).toBeUndefined()
        expect(ticket.assignee).toBeUndefined()
        expect(ticket.executor).toBeUndefined()
        expect(ticket.contact).toBeUndefined()
    })

    test('resident: can read only own resident ticket', async () => {
        const client = await makeClientWithResidentAccessAndProperty()
        const client1 = await makeClientWithResidentAccessAndProperty()
        const [clientTicket] = await createResidentTicketByTestClient(client, client.property)
        await createResidentTicketByTestClient(client1, client1.property)

        const tickets = await ResidentTicket.getAll(client, {})
        expect(tickets).toHaveLength(1)
        expect(tickets[0].id).toEqual(clientTicket.id)
    })

    test('anonymous: cannot read resident tickets', async () => {
        const client = await makeClient()
        await expectToThrowAuthenticationErrorToObjects(async () => {
            await ResidentTicket.getAll(client, {})
        })
    })

    test('user: cannot read resident tickets', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const userClient = await makeClientWithResidentAccessAndProperty()
        await createResidentTicketByTestClient(userClient, userClient.property)

        const tickets = await ResidentTicket.getAll(client, {})
        expect(tickets).toHaveLength(0)
    })

    test('admin: get resident tickets', async () => {
        const admin = await makeLoggedInAdminClient()
        const client = await makeClientWithResidentAccessAndProperty()
        const [ticket] = await createResidentTicketByTestClient(client, client.property)

        const tickets = await ResidentTicket.getAll(admin, { id: ticket.id })
        expect(tickets).toHaveLength(1)
        expect(tickets[0].id).toEqual(ticket.id)
    })
})