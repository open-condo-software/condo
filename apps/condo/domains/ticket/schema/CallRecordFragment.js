/**
 * Generated by `createschema ticket.CallRecordFragment 'ticket:Relationship:Ticket:CASCADE;callRecord:Relationship:CallRecord:CASCADE;'`
 */

const { Relationship, DateTimeUtc } = require('@keystonejs/fields')

const { GQLError } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById } = require('@open-condo/keystone/schema')

const { addOrganizationFieldPlugin } = require('@condo/domains/organization/schema/plugins/addOrganizationFieldPlugin')
const access = require('@condo/domains/ticket/access/CallRecordFragment')

const { CALL_RECORD_FRAGMENT_ERRORS } = require('../constants/errors')


const CallRecordFragment = new GQLListSchema('CallRecordFragment', {
    schemaDoc: 'M2M relationship between ticket and call record',
    fields: {
        ticket: {
            schemaDoc: 'Ticket to which this call fragment belongs',
            type: 'Relationship',
            ref: 'Ticket',
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },
        callRecord: {
            schemaDoc: 'Call record to which this call fragment belongs',
            type: 'Relationship',
            ref: 'CallRecord',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
        startedAt: {
            schemaDoc: 'Call fragment start date in UTC',
            type: DateTimeUtc,
            isRequired: true,
        },
    },
    hooks: {
        validateInput: async ({ resolvedData, existingItem, context }) => {
            const newItem = { ...existingItem, ...resolvedData }

            if (resolvedData['ticket']) {
                const ticket = await getById('Ticket', resolvedData['ticket'])

                if (ticket.organization !== newItem.organization) {
                    throw new GQLError(CALL_RECORD_FRAGMENT_ERRORS.INVALID_TICKET_ORGANIZATION, context)
                }
            }
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization', 'ticket', 'callRecord'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'ticket_call_record_ticket_unique_organization_ticket_and_callRecord',
            },
        ],
    },
    plugins: [
        addOrganizationFieldPlugin({ fromField: 'callRecord', isRequired: true }),
        uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical(),
    ],
    access: {
        read: access.canReadCallRecordFragments,
        create: access.canManageCallRecordFragments,
        update: access.canManageCallRecordFragments,
        delete: false,
        auth: true,
    },
})

module.exports = {
    CallRecordFragment,
}
