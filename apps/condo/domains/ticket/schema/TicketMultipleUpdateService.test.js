/**
 * Generated by `createservice ticket.TicketMultipleUpdateService --type mutations`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')

const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { CLOSED_STATUS_TYPE, PROCESSING_STATUS_TYPE, COMPLETED_STATUS_TYPE } = require('@condo/domains/ticket/constants')
const { STATUS_IDS } = require('@condo/domains/ticket/constants/statusTransitions')
const { createTestTicket, ticketMultipleUpdateByTestClient } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithSupportUser, makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { catchErrorFrom } = require('@miniapp/domains/common/utils/testSchema')

const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
const validTicketStatusUpdateData = [
    {
        status: { connect: { id: STATUS_IDS.IN_PROGRESS } },
        dv: 1,
        sender,
    },
    {
        status: { connect: { id: STATUS_IDS.COMPLETED } },
        dv: 1,
        sender,
    },
    {
        status: { connect: { id: STATUS_IDS.CLOSED } },
        dv: 1,
        sender,
    },
]

const expectToThrowAccessDeniedErrorWithNullData = async (testFunc, path = 'result') => {
    if (!path) throw new Error('path is not specified')

    await catchErrorFrom(testFunc, (caught) => {
        expect(caught).toMatchObject({
            name: 'TestClientResponseError',
            data: null,
            errors: [expect.objectContaining({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': [path],
                'locations': [expect.objectContaining({
                    line: expect.anything(),
                    column: expect.anything(),
                })],
                'extensions': {
                    'code': 'INTERNAL_SERVER_ERROR',
                },
            })],
        })
    })
}

const expectToThrowAuthenticationErrorWithNullData = async (testFunc, path = 'result') => {
    await catchErrorFrom(testFunc, ({ errors, data }) => {
        expect(errors[0]).toMatchObject({
            'message': 'No or incorrect authentication credentials',
            'name': 'AuthenticationError',
            'path': [path],
            'extensions': {
                'code': 'UNAUTHENTICATED',
            },
        })
        expect(data).toBeNull()
    })
}

describe('TicketMultipleUpdateService', () => {
    let admin, support, employeeUser, notEmployeeUser, anonymous, organization, property, ticket

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()

        const [testOrganization] = await createTestOrganization(admin)
        organization = testOrganization
        const [testProperty] = await createTestProperty(admin, organization)
        property = testProperty

        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageTickets: true,
        })
        await createTestOrganizationEmployee(admin, organization, employeeUser.user, role)

        notEmployeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        const [secondTestOrganization] = await createTestOrganization(admin)
        const [secondRole] = await createTestOrganizationEmployeeRole(admin, secondTestOrganization)

        await createTestOrganizationEmployee(admin, secondTestOrganization, notEmployeeUser.user, secondRole)
    })

    beforeEach(async () => {
        const [testTicket] = await createTestTicket(admin, organization, property)

        ticket = testTicket
    })

    describe('Acesses', () => {
        describe('Admin', () => {
            it('can execute', async () => {
                const [data] = await ticketMultipleUpdateByTestClient(admin, {
                    id: ticket.id,
                    data: validTicketStatusUpdateData,
                })

                expect(data.status.type).toEqual(CLOSED_STATUS_TYPE)
            })
        })

        describe('Support', () => {
            it('can execute', async () => {
                const [data] = await ticketMultipleUpdateByTestClient(support, {
                    id: ticket.id,
                    data: validTicketStatusUpdateData,
                })

                expect(data.status.type).toEqual(CLOSED_STATUS_TYPE)
            })
        })

        describe('Employee', () => {
            describe('from ticket organization', () => {
                it('can execute', async () => {
                    const [data] = await ticketMultipleUpdateByTestClient(employeeUser, {
                        id: ticket.id,
                        data: validTicketStatusUpdateData,
                    })

                    expect(data.status.type).toEqual(CLOSED_STATUS_TYPE)
                })
            })

            describe('not from ticket organization', () => {
                it('cannot execute', async () => {
                    await expectToThrowAccessDeniedErrorWithNullData(async () => {
                        await ticketMultipleUpdateByTestClient(notEmployeeUser, {
                            id: ticket.id,
                            data: validTicketStatusUpdateData,
                        })
                    })
                })
            })
        })

        describe('Anonymous', () => {
            it('cannot execute', async () => {
                await expectToThrowAuthenticationErrorWithNullData(async () => {
                    await ticketMultipleUpdateByTestClient(anonymous, {
                        id: ticket.id,
                        data: validTicketStatusUpdateData,
                    })
                })
            })
        })
    })

    describe('Validations',  () => {
        describe('Update status', () => {
            it('should update ticket if status transition is valid', async () => {
                const [data] = await ticketMultipleUpdateByTestClient(employeeUser, {
                    id: ticket.id,
                    data: validTicketStatusUpdateData,
                })

                expect(data.status.type).toEqual(CLOSED_STATUS_TYPE)
            })

            it('should discard update ticket if status transition is not valid', async () => {
                const [data] = await ticketMultipleUpdateByTestClient(employeeUser, {
                    id: ticket.id,
                    data: [
                        {
                            status: { connect: { id: STATUS_IDS.IN_PROGRESS } },
                            dv: 1,
                            sender,
                        },
                        {
                            status: { connect: { id: STATUS_IDS.CLOSED } },
                            dv: 1,
                            sender,
                        },
                    ],
                })

                expect(data.status.type).toEqual(PROCESSING_STATUS_TYPE)

                const [data2] = await ticketMultipleUpdateByTestClient(employeeUser, {
                    id: ticket.id,
                    data: [
                        {
                            status: { connect: { id: STATUS_IDS.CLOSED } },
                            dv: 1,
                            sender,
                        },
                        {
                            status: { connect: { id: STATUS_IDS.COMPLETED } },
                            dv: 1,
                            sender,
                        },
                    ],
                })

                expect(data2.status.type).toEqual(COMPLETED_STATUS_TYPE)
            })
        })
    })
})