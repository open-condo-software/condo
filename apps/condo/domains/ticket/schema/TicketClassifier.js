/**
 * Generated by `createschema ticket.TicketClassifier 'organization?:Relationship:Organization:CASCADE;name:Text;parent?:Relationship:TicketClassifier:PROTECT;'`
 */

const { Text, Relationship, Select } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/ticket/access/TicketClassifier')
const { COMMON_AND_ORGANIZATION_OWNED_FIELD } = require('../../../schema/_common')

const TicketClassifier = new GQLListSchema('TicketClassifier', {
    schemaDoc: 'Ticket typification/classification. We have a organization specific classification. We check the ticket attrs differently depending on the classifier',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,
        organization: COMMON_AND_ORGANIZATION_OWNED_FIELD,
        name: {
            schemaDoc: 'This level name',
            type: Text,
            isRequired: true,
        },
        type: {
            schemaDoc: 'Ticket classifier ',
            type: Select,
            dataType: 'enum',
            options: ['location', 'category', 'subject'],
            isRequired: true,
        },
        locationClassifiers: {
            schemaDoc: 'Each classifier can have multiple related locations',
            type: Relationship,
            ref: 'TicketClassifier',
            many: true,
        },
        categoryClassifiers: {
            schemaDoc: 'Each classifier can have multiple related categories',
            type: Relationship,
            ref: 'TicketClassifier',
            many: true,
        },
        subjectClassifiers: {
            schemaDoc: 'Each classifier can have multiple related subjects',
            type: Relationship,
            ref: 'TicketClassifier',
            many: true,
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadTicketClassifiers,
        create: access.canManageTicketClassifiers,
        update: access.canManageTicketClassifiers,
        delete: false,
        auth: false,
    },
})

module.exports = {
    TicketClassifier,
}
