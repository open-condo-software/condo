/**
 * Generated by `createschema ticket.IncidentClassifier 'organization?:Relationship:Organization:CASCADE;category?:Relationship:TicketCategoryClassifier:PROTECT;problem?:Relationship:TicketProblemClassifier:PROTECT;'`
 */

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const {
    IncidentClassifier,
    createTestIncidentClassifier,
    updateTestIncidentClassifier,
    createTestTicketProblemClassifier,
} = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


describe('IncidentClassifier', () => {
    let admin, support, user, anonymous, classifierByAdmin

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()

        const [classifier] = await createTestIncidentClassifier(admin)
        classifierByAdmin = classifier
    })

    describe('Accesses', () => {
        describe('Admin', () => {
            test('can create', async () => {
                expect(classifierByAdmin).toHaveProperty('id')
                expect(classifierByAdmin).toHaveProperty('organization', null)
                expect(classifierByAdmin).toHaveProperty('category')
                expect(classifierByAdmin).toHaveProperty('problem')
            })
            test('can read', async () => {
                const [classifier] = await IncidentClassifier.getAll(admin, { id: classifierByAdmin.id })
                expect(classifier.id).toEqual(classifierByAdmin.id)
            })
            test('can update', async () => {
                const [newProblem] = await createTestTicketProblemClassifier(admin)
                const payload = { problem: { connect: { id: newProblem.id } } }
                const [updatedClassifier] = await updateTestIncidentClassifier(admin, classifierByAdmin.id, payload)
                expect(updatedClassifier.id).toEqual(classifierByAdmin.id)
                expect(updatedClassifier).toHaveProperty('problem.id', newProblem.id)
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await IncidentClassifier.delete(admin, classifierByAdmin.id)
                })
            })
        })

        describe('Support', () => {
            test('can create', async () => {
                const [classifier] = await createTestIncidentClassifier(support)
                expect(classifier).toHaveProperty('id')
                expect(classifier).toHaveProperty('organization', null)
                expect(classifier).toHaveProperty('category')
                expect(classifier).toHaveProperty('problem')
            })
            test('can read', async () => {
                const [classifier] = await IncidentClassifier.getAll(support, { id: classifierByAdmin.id })
                expect(classifier.id).toEqual(classifierByAdmin.id)
            })
            test('can update', async () => {
                const [newProblem] = await createTestTicketProblemClassifier(admin)
                const payload = { problem: { connect: { id: newProblem.id } } }
                const [updatedClassifier] = await updateTestIncidentClassifier(support, classifierByAdmin.id, payload)
                expect(updatedClassifier.id).toEqual(classifierByAdmin.id)
                expect(updatedClassifier).toHaveProperty('problem.id', newProblem.id)
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await IncidentClassifier.delete(support, classifierByAdmin.id)
                })
            })
        })

        describe('User', () => {
            test('can\'t create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestIncidentClassifier(user)
                })
            })
            test('can read', async () => {
                const [classifier] = await IncidentClassifier.getAll(user, { id: classifierByAdmin.id })
                expect(classifier.id).toEqual(classifierByAdmin.id)
            })
            test('can\'t update', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestIncidentClassifier(user, classifierByAdmin.id, {})
                })
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await IncidentClassifier.delete(user, classifierByAdmin.id)
                })
            })
        })

        describe('Anonymous', () => {
            test('can\'t create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestIncidentClassifier(anonymous)
                })
            })
            test('can\'t read', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await IncidentClassifier.getAll(anonymous, { id: classifierByAdmin.id })
                })
            })
            test('can\'t update', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestIncidentClassifier(anonymous, classifierByAdmin.id, {})
                })
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await IncidentClassifier.delete(anonymous, classifierByAdmin.id)
                })
            })
        })
    })
})
