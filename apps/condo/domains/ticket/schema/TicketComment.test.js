/**
 * Generated by `createschema ticket.TicketComment 'ticket:Relationship:Ticket:CASCADE; user:Relationship:User:CASCADE; content:Text;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor, expectToThrowGQLError } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAuthenticationErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { createTestContact } = require('@condo/domains/contact/utils/testSchema')
const {
    MESSAGE_SENT_STATUS,
    TICKET_COMMENT_ADDED_TYPE, DEVICE_PLATFORM_ANDROID, APP_RESIDENT_ID_ANDROID, APP_MASTER_ID_ANDROID,
} = require('@condo/domains/notification/constants/constants')
const { Message, syncRemoteClientByTestClient } = require('@condo/domains/notification/utils/testSchema')
const { syncRemoteClientWithPushTokenByTestClient, updateTestMessage } = require('@condo/domains/notification/utils/testSchema')
const { getRandomTokenData, getRandomFakeSuccessToken } = require('@condo/domains/notification/utils/testSchema/helpers')
const { updateTestOrganizationEmployee, updateTestOrganizationEmployeeRole } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationWithAccessToAnotherOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationEmployeeRole } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { createTestProperty, makeClientWithResidentAccessAndProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestResident, updateTestResident } = require('@condo/domains/resident/utils/testSchema')
const { ORGANIZATION_COMMENT_TYPE, RESIDENT_COMMENT_TYPE } = require('@condo/domains/ticket/constants')
const { STATUS_IDS } = require('@condo/domains/ticket/constants/statusTransitions')
const { createTestTicket, Ticket } = require('@condo/domains/ticket/utils/testSchema')
const { TicketComment, createTestTicketComment, updateTestTicketComment } = require('@condo/domains/ticket/utils/testSchema')
const { updateTestTicket } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')

const { ERRORS: TicketCommmentErrors } = require('./TicketComment')


describe('TicketComment', () => {
    let admin
    let organization
    let property
    let clientWithCanReadTicket
    let clientWithoutCanReadTicket

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        clientWithCanReadTicket = await makeClientWithNewRegisteredAndLoggedInUser()
        clientWithoutCanReadTicket = await makeClientWithNewRegisteredAndLoggedInUser()
        const [testOrganization] = await createTestOrganization(admin)
        organization = testOrganization
        const [testProperty] = await createTestProperty(admin, organization)
        property = testProperty
        const [roleWithCanReadTickets] = await createTestOrganizationEmployeeRole(admin, organization, { canReadTickets: true })
        const [roleWithoutCanReadTickets] = await createTestOrganizationEmployeeRole(admin, organization, { canReadTickets: false })
        await createTestOrganizationEmployee(admin, organization, clientWithCanReadTicket.user, roleWithCanReadTickets)
        await createTestOrganizationEmployee(admin, organization, clientWithoutCanReadTicket.user, roleWithoutCanReadTickets)
    })

    describe('employee', () => {
        describe('field access', () => {
            it('does not allows user to set "user" field to another user', async () => {
                const userClient = await makeClientWithProperty()
                const anotherUserClient = await makeClientWithProperty()
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketComment(userClient, ticket, anotherUserClient.user)
                })
            })
        })

        describe('create', () => {
            it('can be created by user, who has "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)

                const [obj, attrs] = await createTestTicketComment(userClient, ticket, userClient.user)
                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.content).toMatch(attrs.content)
                expect(obj.user.id).toMatch(userClient.user.id)
            })

            it('cannot be created by user, who does not have "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: false,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketComment(userClient, ticket, userClient.user)
                })
            })

            it('can be created by admin', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [ticket] = await createTestTicket(adminClient, organization, property)

                const [obj, attrs] = await createTestTicketComment(adminClient, ticket, adminClient.user)
                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.content).toMatch(attrs.content)
                expect(obj.user.id).toMatch(adminClient.user.id)
            })

            it('cannot be created by anonymous', async () => {
                const anonymous = await makeClient()

                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestTicketComment(anonymous, ticket, client.user)
                })
            })

            it('can be created by employee from "from" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, organizationTo, propertyTo, organizationFrom, employeeFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                    canManageTickets: true,
                })
                await updateTestOrganizationEmployee(admin, employeeFrom.id, {
                    role: { connect: { id: role.id } },
                })
                const [ticket] = await createTestTicket(admin, organizationTo, propertyTo)

                const [ticketComment] = await createTestTicketComment(clientFrom, ticket, clientFrom.user)
                expect(ticketComment.id).toMatch(UUID_RE)
            })

            it('cannot be created by employee from "to" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientTo, organizationFrom, propertyFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [ticket] = await createTestTicket(admin, organizationFrom, propertyFrom)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketComment(clientTo, ticket, clientTo.user)
                })
            })

            it('can create comment with resident type', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const content = faker.lorem.sentence()
                const [ticket] = await createTestTicket(userClient, organization, property)
                const [ticketComment] = await createTestTicketComment(userClient, ticket, userClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content,
                })

                expect(ticketComment.id).toMatch(UUID_RE)
                expect(ticketComment.type).toMatch(RESIDENT_COMMENT_TYPE)
                expect(ticketComment.content).toMatch(content)
            })

            it('can create a comment if it doesn\'t pass the comment type', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)

                const [ticketComment] = await createTestTicketComment(userClient, ticket, userClient.user, {
                    type: null,
                })

                expect(ticketComment.id).toMatch(UUID_RE)
                expect(ticketComment.type).toMatch(ORGANIZATION_COMMENT_TYPE)
            })

            it('update only lastCommentAt of related ticket after create TicketComment with staff user', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)

                const [ticketComment] = await createTestTicketComment(userClient, ticket, userClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                })

                const readTicket = await Ticket.getOne(userClient, {
                    id: ticket.id,
                })

                expect(readTicket.lastCommentAt).toEqual(ticketComment.createdAt)
                expect(readTicket.lastResidentCommentAt).toBeNull()
            })

            it('update lastResidentCommentAt and lastCommentAt of related ticket after create TicketComment with resident user', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)

                const residentClient = await makeClientWithResidentUser()
                const unitName = faker.random.alphaNumeric(5)
                const unitType = FLAT_UNIT_TYPE
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                    unitType,
                })

                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)


                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                    unitType,
                })

                const [ticketComment] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                })

                const readTicket = await Ticket.getOne(residentClient, {
                    id: ticket.id,
                })

                expect(readTicket.lastResidentCommentAt).toEqual(ticketComment.createdAt)
                expect(readTicket.lastCommentAt).toEqual(ticketComment.createdAt)

                const [ticketComment1] = await createTestTicketComment(userClient, ticket, userClient.user)

                const readTicket1 = await Ticket.getOne(residentClient, {
                    id: ticket.id,
                })

                expect(readTicket1.lastResidentCommentAt).toEqual(ticketComment.createdAt)
                expect(readTicket1.lastCommentAt).toEqual(ticketComment1.createdAt)
            })
        })

        describe('read', () => {
            it('can be read by user, who has canReadTickets permission', async () => {
                const [ticket] = await createTestTicket(admin, organization, property)
                const [comment] = await createTestTicketComment(admin, ticket, admin.user)

                const readTicketComment = await TicketComment.getOne(clientWithCanReadTicket, { id: comment.id })
                expect(readTicketComment).toBeDefined()
                expect(readTicketComment.id).toEqual(comment.id)
            })

            it('can not be read by user, who has not canReadTickets permission', async () => {
                const [ticket] = await createTestTicket(admin, organization, property)
                const [comment] = await createTestTicketComment(admin, ticket, admin.user)

                const readTicketComment = await TicketComment.getOne(clientWithoutCanReadTicket, { id: comment.id })
                expect(readTicketComment).toBeUndefined()
            })

            it('can be read by admin', async () => {
                const adminClient = await makeLoggedInAdminClient()

                const userClient1 = await makeClientWithProperty()
                const [ticket1] = await createTestTicket(userClient1, userClient1.organization, userClient1.property)
                await createTestTicketComment(userClient1, ticket1, userClient1.user)

                const userClient2 = await makeClientWithProperty()
                const [ticket2] = await createTestTicket(userClient2, userClient2.organization, userClient2.property)
                await createTestTicketComment(userClient2, ticket2, userClient2.user)

                const objs = await TicketComment.getAll(adminClient, {}, { sortBy: ['updatedAt_ASC'] })
                expect(objs.length >= 2).toBeTruthy()
            })

            it('cannot be read by anonymous', async () => {
                const anonymous = await makeClient()

                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                await createTestTicketComment(client, ticket, client.user)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await TicketComment.getAll(anonymous)
                })
            })

            it('can be read by employee from "from" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, organizationTo, propertyTo } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [ticket] = await createTestTicket(admin, organizationTo, propertyTo)
                await createTestTicketComment(clientFrom, ticket, clientFrom.user)

                const comments = await TicketComment.getAll(clientFrom)
                expect(comments).toHaveLength(1)
            })

            it('cannot be read by employee from "to" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, clientTo, organizationFrom, propertyFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [ticket] = await createTestTicket(admin, organizationFrom, propertyFrom)
                await createTestTicketComment(clientFrom, ticket, clientFrom.user)

                const comments = await TicketComment.getAll(clientTo)
                expect(comments).toHaveLength(0)
            })
        })

        describe('update', () => {
            it('can be updated by user, who has created it and has "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)

                const [objCreated] = await createTestTicketComment(userClient, ticket, userClient.user)

                const payload = {
                    content: faker.random.alphaNumeric(10),
                }

                const [objUpdated, attrs] = await updateTestTicketComment(userClient, objCreated.id, payload)

                expect(objUpdated.id).toEqual(objCreated.id)
                expect(objUpdated.dv).toEqual(1)
                expect(objUpdated.sender).toEqual(attrs.sender)
                expect(objUpdated.v).toEqual(2)
                expect(objUpdated.newId).toEqual(null)
                expect(objUpdated.deletedAt).toEqual(null)
                expect(objUpdated.createdBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(objUpdated.createdAt).toMatch(DATETIME_RE)
                expect(objUpdated.updatedAt).toMatch(DATETIME_RE)
                expect(objUpdated.updatedAt).not.toEqual(objUpdated.createdAt)
                expect(objUpdated.content).not.toEqual(objCreated.content)
                expect(objUpdated.user.id).toMatch(userClient.user.id)
            })

            it('cannot be updated by user, who has created it, but does not have "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)

                const [objCreated] = await createTestTicketComment(userClient, ticket, userClient.user)

                await updateTestOrganizationEmployeeRole(adminClient, role.id, {
                    canManageTicketComments: false,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTicketComment(userClient, objCreated.id)
                })
            })

            it('cannot be updated by user, who has not created it', async () => {
                const userClient1 = await makeClientWithProperty()
                const userClient2 = await makeClientWithProperty()

                const [ticket1] = await createTestTicket(userClient1, userClient1.organization, userClient1.property)
                const [ticket2] = await createTestTicket(userClient2, userClient2.organization, userClient2.property)

                await createTestTicketComment(userClient1, ticket1, userClient1.user)
                const [commentByOther] = await createTestTicketComment(userClient2, ticket2, userClient2.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTicketComment(userClient1, commentByOther.id)
                })
            })

            it('can be updated by admin', async () => {
                const adminClient = await makeLoggedInAdminClient()

                const userClient = await makeClientWithProperty()
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property)
                const [objCreated] = await createTestTicketComment(userClient, ticket, userClient.user)

                const payload = {
                    content: faker.random.alphaNumeric(10),
                }

                const [objUpdated, attrs] = await updateTestTicketComment(adminClient, objCreated.id, payload)

                expect(objUpdated.id).toEqual(objCreated.id)
                expect(objUpdated.dv).toEqual(1)
                expect(objUpdated.sender).toEqual(attrs.sender)
                expect(objUpdated.v).toEqual(2)
                expect(objUpdated.newId).toEqual(null)
                expect(objUpdated.deletedAt).toEqual(null)
                expect(objUpdated.createdBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(objUpdated.createdAt).toMatch(DATETIME_RE)
                expect(objUpdated.updatedAt).toMatch(DATETIME_RE)
                expect(objUpdated.updatedAt).not.toEqual(objUpdated.createdAt)
                expect(objUpdated.content).not.toEqual(objCreated.content)
                expect(objUpdated.user.id).toMatch(userClient.user.id)
            })

            it('cannot be updated by anonymous', async () => {
                const anonymousClient = await makeClient()

                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                const [obj] = await createTestTicketComment(client, ticket, client.user)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestTicketComment(anonymousClient, obj.id)
                })
            })

            it('can be updated by employee from "from" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, propertyTo, organizationTo, organizationFrom, employeeFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                    canManageTickets: true,
                })
                await updateTestOrganizationEmployee(admin, employeeFrom.id, {
                    role: { connect: { id: role.id } },
                })
                const [ticket] = await createTestTicket(admin, organizationTo, propertyTo)
                const [comment] = await createTestTicketComment(clientFrom, ticket, clientFrom.user)
                const payload = {
                    content: faker.random.alphaNumeric(10),
                }
                const [commentUpdated] = await updateTestTicketComment(clientFrom, comment.id, payload)

                expect(commentUpdated.id).toEqual(comment.id)
                expect(commentUpdated.content).toEqual(payload.content)
            })

            it('cannot be updated by employee from "to" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, clientTo, organizationFrom, propertyFrom, employeeFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                    canManageTickets: true,
                })
                await updateTestOrganizationEmployee(admin, employeeFrom.id, {
                    role: { connect: { id: role.id } },
                })
                const [ticket] = await createTestTicket(admin, organizationFrom, propertyFrom)
                const [comment] = await createTestTicketComment(clientFrom, ticket, clientFrom.user)
                const payload = {
                    content: faker.random.alphaNumeric(10),
                }

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTicketComment(clientTo, comment.id, payload)
                })
            })
        })

        describe('delete', () => {
            it('cannot be deleted by user', async () => {
                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                const [obj] = await createTestTicketComment(client, ticket, client.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await TicketComment.delete(client, obj.id)
                })
            })

            it('cannot be deleted by admin', async () => {
                const admin = await makeLoggedInAdminClient()
                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                const [obj] = await createTestTicketComment(client, ticket, client.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await TicketComment.delete(admin, obj.id)
                })
            })

            it('cannot be deleted by anonymous', async () => {
                const anonymous = await makeClient()
                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                const [obj] = await createTestTicketComment(client, ticket, client.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await TicketComment.delete(anonymous, obj.id)
                })
            })
        })
    })

    describe('resident', () => {
        describe('create', () => {
            it('can create comment with resident type in ticket which created by this resident', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const unitName = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                await createTestResident(admin, residentClient.user, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })
                const [ticketComment] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content,
                })

                expect(ticketComment.id).toMatch(UUID_RE)
                expect(ticketComment.type).toMatch(RESIDENT_COMMENT_TYPE)
                expect(ticketComment.content).toMatch(content)
            })

            it('can create comment with resident type in ticket where contact phone and address matches to resident phone and address', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const unitName = faker.random.alphaNumeric(5)
                const { phone } = residentClient.userAttrs
                const content = faker.lorem.sentence()

                await createTestResident(admin, residentClient.user, property, {
                    unitName,
                })
                const [contact] = await createTestContact(admin, organization, property, {
                    phone,
                    unitName,
                })
                const [ticket] = await createTestTicket(admin, organization, property, {
                    unitName,
                    contact: { connect: { id: contact.id } },
                    canReadByResident: true,
                })
                const [ticketComment] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content,
                })

                expect(ticketComment.id).toMatch(UUID_RE)
                expect(ticketComment.type).toMatch(RESIDENT_COMMENT_TYPE)
                expect(ticketComment.content).toMatch(content)
            })

            it('cannot create comment in not his resident ticket', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(userClient, organization, property)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketComment(residentClient, ticket, residentClient.user, {
                        type: RESIDENT_COMMENT_TYPE,
                        content,
                    })
                })
            })

            it('cannot create comment with organization type', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const unitName = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                await createTestResident(admin, residentClient.user, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketComment(residentClient, ticket, residentClient.user, {
                        type: ORGANIZATION_COMMENT_TYPE,
                        content,
                    })
                })
            })

            it('cannot create comment in completed or canceled types', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const unitName = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                await createTestResident(admin, residentClient.user, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })
                const [completedTicket] = await updateTestTicket(admin, ticket.id, {
                    status: { connect: { id: STATUS_IDS.COMPLETED } },
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketComment(residentClient, completedTicket, residentClient.user, {
                        type: RESIDENT_COMMENT_TYPE,
                        content,
                    })
                })

                const [declinedTicket] = await updateTestTicket(admin, ticket.id, {
                    status: { connect: { id: STATUS_IDS.DECLINED } },
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketComment(residentClient, declinedTicket, residentClient.user, {
                        type: RESIDENT_COMMENT_TYPE,
                        content,
                    })
                })
            })
        })

        describe('read', () => {
            it('can read comments with type resident in own ticket', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content1 = faker.lorem.sentence()
                const content2 = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                const [commentFromResident] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content1,
                })
                const [commentFromEmployee] = await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content2,
                })

                const { data: { objs: comments } } = await TicketComment.getAll(residentClient, {}, { sortBy: 'createdAt_ASC', raw: true })

                expect(comments).toHaveLength(2)
                expect(comments[0].id).toEqual(commentFromResident.id)
                expect(comments[0].content).toEqual(content1)
                expect(comments[1].id).toEqual(commentFromEmployee.id)
                expect(comments[1].content).toEqual(content2)
            })

            it('can read comments with resident type in ticket where contact phone and address matches to resident phone and address', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content1 = faker.lorem.sentence()
                const content2 = faker.lorem.sentence()
                const { phone } = residentClient.userAttrs

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                const [contact] = await createTestContact(adminClient, organization, property, {
                    phone,
                    unitName,
                })
                const [ticket] = await createTestTicket(employeeClient, organization, property, {
                    unitName,
                    contact: { connect: { id: contact.id } },
                    canReadByResident: true,
                })

                const [commentFromResident] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content1,
                })
                const [commentFromEmployee] = await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content2,
                })

                const { data: { objs: comments } } = await TicketComment.getAll(residentClient, {}, { sortBy: 'createdAt_ASC', raw: true })

                expect(comments).toHaveLength(2)
                expect(comments[0].id).toEqual(commentFromResident.id)
                expect(comments[0].content).toEqual(content1)
                expect(comments[1].id).toEqual(commentFromEmployee.id)
                expect(comments[1].content).toEqual(content2)
            })

            it('cannot read comments in not his resident ticket', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()
                const anotherResidentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const anotherUnitName = faker.random.alphaNumeric(5)
                const content1 = faker.lorem.sentence()
                const content2 = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                await createTestResident(adminClient, anotherResidentClient.user, property, {
                    unitName: anotherUnitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content1,
                })
                await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content2,
                })

                const comments = await TicketComment.getAll(anotherResidentClient)

                expect(comments).toHaveLength(0)
            })

            it('cannot read comments with resident type in ticket where contact phone and address did not matches to resident phone and address', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()
                const anotherResidentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const anotherUnitName = faker.random.alphaNumeric(5)
                const content1 = faker.lorem.sentence()
                const content2 = faker.lorem.sentence()
                const { phone } = residentClient.userAttrs

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                await createTestResident(adminClient, anotherResidentClient.user, property, {
                    unitName: anotherUnitName,
                })
                const [contact] = await createTestContact(adminClient, organization, property, {
                    phone,
                    unitName,
                })
                const [ticket] = await createTestTicket(employeeClient, organization, property, {
                    unitName,
                    contact: { connect: { id: contact.id } },
                    canReadByResident: true,
                })

                await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content1,
                })
                await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content2,
                })

                const comments = await TicketComment.getAll(anotherResidentClient)

                expect(comments).toHaveLength(0)
            })

            it('cannot read comments with resident type in ticket where canReadByResident is false', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content2 = faker.lorem.sentence()
                const { phone } = residentClient.userAttrs

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                const [contact] = await createTestContact(adminClient, organization, property, {
                    phone,
                    unitName,
                })
                const [ticket] = await createTestTicket(employeeClient, organization, property, {
                    unitName,
                    contact: { connect: { id: contact.id } },
                    canReadByResident: false,
                })

                await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content2,
                })

                const comments = await TicketComment.getAll(residentClient)

                expect(comments).toHaveLength(0)
            })

            it('cannot read comments with type organization in own ticket', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content2 = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: ORGANIZATION_COMMENT_TYPE,
                    content: content2,
                })

                const comments = await TicketComment.getAll(residentClient)

                expect(comments).toHaveLength(0)
            })

            it('cannot read ticket comments after resident is deleted', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content1 = faker.lorem.sentence()
                const content2 = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                const [resident] = await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content1,
                })
                await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content2,
                })

                await updateTestResident(adminClient, resident.id, {
                    deletedAt: new Date().toISOString(),
                })

                const comments = await TicketComment.getAll(residentClient, {})

                expect(comments).toHaveLength(0)
            })
        })

        describe('update', () => {
            it('cannot update own comment', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content1 = faker.lorem.sentence()
                const content2 = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                const [commentFromResident] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content1,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTicketComment(residentClient, commentFromResident.id, {
                        content: content2,
                    })
                })
            })

            it('cannot update not his own comment', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content1 = faker.lorem.sentence()
                const content2 = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                const [commentFromEmployee] = await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content1,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTicketComment(residentClient, commentFromEmployee.id, {
                        content: content2,
                    })
                })
            })
        })

        describe('delete', () => {
            it('cannot delete comment', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content1 = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                await createTestResident(adminClient, residentClient.user, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                const [commentFromResident] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content1,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await TicketComment.delete(residentClient, commentFromResident.id)
                })
            })
        })
    })

    describe('notifications', () => {
        describe('Create resident visible comment by staff', () => {
            it('checks that resident user receives push notification when employee comments his ticket', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentAccessAndProperty()
                const unitName = faker.random.alphaNumeric(5)
                const unitName1 = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                const payload = getRandomTokenData({
                    devicePlatform: DEVICE_PLATFORM_ANDROID,
                    appId: APP_RESIDENT_ID_ANDROID,
                    pushToken: getRandomFakeSuccessToken(),
                })

                await syncRemoteClientByTestClient(residentClient, payload)

                const [resident] = await createTestResident(admin, residentClient.user, residentClient.property, { unitName })

                // NOTE: this needed for checking that proper resident will be picked when same user + organization + property can has multiple residents
                await createTestResident(admin, residentClient.user, residentClient.property, { unitName: unitName1 })

                const [ticket] = await createTestTicket(residentClient, residentClient.organization, residentClient.property, { unitName })
                const extraAttrs = { type: RESIDENT_COMMENT_TYPE, content }
                const [ticketComment] = await createTestTicketComment(admin, ticket, admin.user, extraAttrs)

                expect(ticketComment.id).toMatch(UUID_RE)
                expect(ticketComment.type).toMatch(RESIDENT_COMMENT_TYPE)
                expect(ticketComment.content).toMatch(content)

                await waitFor(async () => {
                    const messageWhere = { user: { id: residentClient.user.id }, type: TICKET_COMMENT_ADDED_TYPE }
                    const message = await Message.getOne(admin, messageWhere)

                    expect(message.status).toEqual(MESSAGE_SENT_STATUS)
                    expect(message.meta.data.ticketId).toEqual(ticket.id)
                    expect(message.meta.data.commentId).toEqual(ticketComment.id)
                    expect(message.meta.data.residentId).toEqual(resident.id)
                    expect(message.meta.data.userId).toEqual(residentClient.user.id)
                    /** old way check */
                    expect(message.processingMeta.transport).toEqual('push')
                    /** ADR-7 way check */
                    expect(message.processingMeta.transportsMeta[0].transport).toEqual('push')
                })
            })

            it('checks that notification is not being sent on employee comment create if there is no resident connected to ticket', async () => {
                const admin = await makeLoggedInAdminClient()
                const userClient = await makeClientWithProperty()
                const unitName = faker.random.alphaNumeric(5)
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property, { unitName })

                expect(ticket.client).toEqual(null)

                await createTestTicketComment(userClient, ticket, userClient.user)

                const messageWhere = { user: { id: userClient.user.id }, type: TICKET_COMMENT_ADDED_TYPE }
                const messageCount = await Message.count(admin, messageWhere)
                expect(messageCount).toEqual(0)
            })

            it('checks that notifications is not being sent when resident adds comment to ticket', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithResidentAccessAndProperty()
                const unitName = faker.random.alphaNumeric(5)
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const employeeRoleAttrs = { canManageTickets: true, canManageTicketComments: true }
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, employeeRoleAttrs)
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                await createTestResident(adminClient, userClient.user, property, { unitName })
                const [ticket] = await createTestTicket(userClient, organization, property, { unitName })
                await createTestTicketComment(userClient, ticket, userClient.user, { type: RESIDENT_COMMENT_TYPE })
                const messageWhere = { user: { id: userClient.user.id }, type: TICKET_COMMENT_ADDED_TYPE }
                const messageCount = await Message.count(userClient, messageWhere)

                expect(messageCount).toEqual(0)
            })

            it('checks that notifications is not being sent on comment edit', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentAccessAndProperty()
                const unitName = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                await createTestResident(admin, residentClient.user, residentClient.property, { unitName })

                const [ticket] = await createTestTicket(residentClient, residentClient.organization, residentClient.property, { unitName })
                const extraAttrs = { type: RESIDENT_COMMENT_TYPE, content }
                const [ticketComment] = await createTestTicketComment(admin, ticket, admin.user, extraAttrs)

                expect(ticketComment.id).toMatch(UUID_RE)
                expect(ticketComment.type).toMatch(RESIDENT_COMMENT_TYPE)
                expect(ticketComment.content).toMatch(content)

                const payload1 = { content: faker.random.alphaNumeric(10) }
                const [objUpdated] = await updateTestTicketComment(admin, ticketComment.id, payload1)

                expect(objUpdated.id).toEqual(ticketComment.id)
                expect(objUpdated.v).toEqual(2)

                const messageWhere = { user: { id: residentClient.user.id }, type: TICKET_COMMENT_ADDED_TYPE }

                await waitFor(async () => {
                    const messages = await Message.getAll(admin, messageWhere)

                    expect(messages).toHaveLength(1)
                    expect(messages[0].organization.id).toEqual(ticket.organization.id)
                })
            })
        })

        describe('Create resident comment by resident', () => {
            let admin, employeeClient1, employeeClient2, residentClient,
                organization, property, resident, residentUnitName

            beforeAll(async () => {
                admin = await makeLoggedInAdminClient()
                employeeClient1 = await makeClientWithNewRegisteredAndLoggedInUser()
                employeeClient2 = await makeClientWithNewRegisteredAndLoggedInUser()
                residentClient = await makeClientWithResidentAccessAndProperty()

                organization = residentClient.organization
                property = residentClient.property

                const [role] = await createTestOrganizationEmployeeRole(admin, organization, { canManageTickets: true })
                await createTestOrganizationEmployee(admin, organization, employeeClient1.user, role)
                await createTestOrganizationEmployee(admin, organization, employeeClient2.user, role)

                const unitName = faker.random.alphaNumeric(5)
                const [testResident] = await createTestResident(admin, residentClient.user, property, { unitName })
                residentUnitName = unitName
                resident = testResident

                const payload = {
                    devicePlatform: DEVICE_PLATFORM_ANDROID,
                    appId: APP_MASTER_ID_ANDROID,
                }
                await syncRemoteClientWithPushTokenByTestClient(employeeClient1, payload)
                await syncRemoteClientWithPushTokenByTestClient(employeeClient2, payload)
            })

            beforeEach(async () => {
                const messages = await Message.getAll(admin, { user: { id_in: [employeeClient1.user.id, employeeClient2.user.id] } })

                for (const message of messages) {
                    await updateTestMessage(admin, message.id, {
                        deletedAt: 'true',
                    })
                }
            })

            it('sent notifications to assignee and executor of ticket', async () => {
                const assigneeUserId = employeeClient1.user.id
                const executorUserId = employeeClient2.user.id
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName: residentUnitName,
                    assignee: { connect: { id: assigneeUserId } },
                    executor: { connect: { id: executorUserId } },
                })

                const content = faker.lorem.sentence()
                const extraAttrs = { type: RESIDENT_COMMENT_TYPE, content }
                const [ticketComment] = await createTestTicketComment(residentClient, ticket, residentClient.user, extraAttrs)

                expect(ticketComment.id).toMatch(UUID_RE)
                expect(ticketComment.type).toMatch(RESIDENT_COMMENT_TYPE)
                expect(ticketComment.content).toMatch(content)

                await waitFor(async () => {
                    const messageForExecutor = await Message.getOne(admin, { user: { id: executorUserId }, type: TICKET_COMMENT_ADDED_TYPE })
                    expect(messageForExecutor.status).toEqual(MESSAGE_SENT_STATUS)
                    expect(messageForExecutor.meta.data.ticketId).toEqual(ticket.id)
                    expect(messageForExecutor.meta.data.commentId).toEqual(ticketComment.id)
                    expect(messageForExecutor.meta.data.residentId).toEqual(resident.id)
                    expect(messageForExecutor.meta.data.userId).toEqual(executorUserId)
                    expect(messageForExecutor.processingMeta.transportsMeta[0].transport).toEqual('push')

                    const messageForAssignee = await Message.getOne(admin, { user: { id: assigneeUserId }, type: TICKET_COMMENT_ADDED_TYPE })
                    expect(messageForAssignee.status).toEqual(MESSAGE_SENT_STATUS)
                    expect(messageForAssignee.meta.data.ticketId).toEqual(ticket.id)
                    expect(messageForAssignee.meta.data.commentId).toEqual(ticketComment.id)
                    expect(messageForAssignee.meta.data.residentId).toEqual(resident.id)
                    expect(messageForAssignee.meta.data.userId).toEqual(assigneeUserId)
                    expect(messageForAssignee.processingMeta.transportsMeta[0].transport).toEqual('push')
                })
            })

            it('doesn\'t sent notifications to employee who not assignee or executor of ticket', async () => {
                const assigneeUserId = employeeClient1.user.id
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName: residentUnitName,
                    assignee: { connect: { id: assigneeUserId } },
                })

                const content = faker.lorem.sentence()
                const extraAttrs = { type: RESIDENT_COMMENT_TYPE, content }
                const [ticketComment] = await createTestTicketComment(residentClient, ticket, residentClient.user, extraAttrs)

                expect(ticketComment.id).toMatch(UUID_RE)
                expect(ticketComment.type).toMatch(RESIDENT_COMMENT_TYPE)
                expect(ticketComment.content).toMatch(content)

                await waitFor(async () => {
                    const messageForAssignee = await Message.getOne(admin, { user: { id: assigneeUserId }, type: TICKET_COMMENT_ADDED_TYPE })
                    expect(messageForAssignee.status).toEqual(MESSAGE_SENT_STATUS)
                    expect(messageForAssignee.meta.data.ticketId).toEqual(ticket.id)
                    expect(messageForAssignee.meta.data.commentId).toEqual(ticketComment.id)
                    expect(messageForAssignee.meta.data.residentId).toEqual(resident.id)
                    expect(messageForAssignee.meta.data.userId).toEqual(assigneeUserId)
                    expect(messageForAssignee.processingMeta.transportsMeta[0].transport).toEqual('push')

                    const messageForExecutor = await Message.getOne(admin, { user: { id: employeeClient2.user.id }, type: TICKET_COMMENT_ADDED_TYPE })
                    expect(messageForExecutor).toBeUndefined()
                })
            })
        })
    })

    describe('Validations', () => {
        it('can not create TicketComment with user ', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
            const [organization] = await createTestOrganization(adminClient)
            const [property] = await createTestProperty(adminClient, organization)
            const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                canManageTickets: true,
                canManageTicketComments: true,
            })
            await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

            const [ticket] = await createTestTicket(userClient, organization, property)

            await expectToThrowGQLError(async () => {
                await createTestTicketComment(adminClient, ticket, userClient.user)
            }, TicketCommmentErrors.USER_MUST_BE_SAME_AS_CREATED_BY)
        })
    })
})
