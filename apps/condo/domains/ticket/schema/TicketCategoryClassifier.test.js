/**
 * Generated by `createschema ticket.TicketCategoryClassifier 'organization?:Relationship:Organization:CASCADE;name:Text;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, makeLoggedInClient, expectValuesOfCommonFields } = require('@open-condo/keystone/test.utils')
const { expectToThrowAuthenticationErrorToObjects, expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObj } = require('@open-condo/keystone/test.utils')

const { TicketCategoryClassifier, createTestTicketCategoryClassifier, updateTestTicketCategoryClassifier } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { createTestUser } = require('@condo/domains/user/utils/testSchema')

describe('TicketCategoryClassifier CRUD', () => {
    let admin
    let support
    let client

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        const [, userAttrs] = await createTestUser(admin)
        client = await makeLoggedInClient(userAttrs)
    })

    describe('User', () => {
        it('can not create', async () => {
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestTicketCategoryClassifier(client)
            })
        })
        it('can read', async () => {
            const [objCreated, attrs] = await createTestTicketCategoryClassifier(admin)
            const obj = await TicketCategoryClassifier.getOne(client, { id: objCreated.id })

            expect(obj.id).toMatch(objCreated.id)
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(1)
            expect(obj.newId).toEqual(null)
            expect(obj.deletedAt).toEqual(null)
            expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            expect(obj.createdAt).toMatch(objCreated.createdAt)
            expect(obj.updatedAt).toMatch(objCreated.updatedAt)
        })
        it('can not update', async () => {
            const [objCreated] = await createTestTicketCategoryClassifier(admin)
            const payload = { name: faker.lorem.word() }
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestTicketCategoryClassifier(client, objCreated.id, payload)
            })
        })
        it('can not delete', async () => {
            const [objCreated] = await createTestTicketCategoryClassifier(admin)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await TicketCategoryClassifier.delete(client, objCreated.id)
            })
        })
    })
    describe('Support', () => {
        it('can create', async () => {
            const [obj, attrs] = await createTestTicketCategoryClassifier(support)
            expectValuesOfCommonFields(obj, attrs, support)
        })
        it('can read', async () => {
            const [objCreated, attrs] = await createTestTicketCategoryClassifier(admin)
            const obj = await TicketCategoryClassifier.getOne(support, { id: objCreated.id } )

            expect(obj.id).toMatch(objCreated.id)
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(1)
            expect(obj.newId).toEqual(null)
            expect(obj.deletedAt).toEqual(null)
            expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            expect(obj.createdAt).toMatch(objCreated.createdAt)
            expect(obj.updatedAt).toMatch(objCreated.updatedAt)
        })
        it('can update', async () => {
            const [objCreated] = await createTestTicketCategoryClassifier(admin)
            const payload = { name: faker.lorem.word() }
            const [obj] = await updateTestTicketCategoryClassifier(support, objCreated.id, payload)
            expect(obj.updatedBy).toEqual(expect.objectContaining({ id: support.user.id }))
            expect(obj.name).toEqual(payload.name)
        })
        it('can not delete', async () => {
            const [objCreated] = await createTestTicketCategoryClassifier(admin)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await TicketCategoryClassifier.delete(support, objCreated.id)
            })
        })
    })
    describe('Anonymous', () => {
        it('can not create', async () => {
            const client = await makeClient()
            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestTicketCategoryClassifier(client)
            })
        })
        it('can read', async () => {
            const client = await makeClient()
            await expectToThrowAuthenticationErrorToObjects(async () => {
                await TicketCategoryClassifier.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
            })
        })
        it('can not update', async () => {
            const [objCreated] = await createTestTicketCategoryClassifier(admin)
            const client = await makeClient()
            const payload = { name: faker.lorem.word() }
            await expectToThrowAuthenticationErrorToObj(async () => {
                await updateTestTicketCategoryClassifier(client, objCreated.id, payload)
            })
        })
        it('can not delete', async () => {
            const [objCreated] = await createTestTicketCategoryClassifier(admin)
            const client = await makeClient()
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await TicketCategoryClassifier.delete(client, objCreated.id)
            })
        })
    })
})
