/**
 * Generated by `createschema ticket.IncidentClassifier 'organization?:Relationship:Organization:CASCADE;category?:Relationship:TicketCategoryClassifier:PROTECT;problem?:Relationship:TicketProblemClassifier:PROTECT;'`
 */
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { COMMON_AND_ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const access = require('@condo/domains/ticket/access/IncidentClassifier')


const IncidentClassifier = new GQLListSchema('IncidentClassifier', {
    schemaDoc: 'Rules for all possible valid combinations of classifiers for incidents',
    fields: {

        organization: COMMON_AND_ORGANIZATION_OWNED_FIELD,

        category: {
            schemaDoc: 'Type of work to fix incident',
            type: 'Relationship',
            ref: 'TicketCategoryClassifier',
            isRequired: true,
            kmigratorOptions: {  on_delete: 'models.PROTECT' },
        },

        problem: {
            schemaDoc: 'What needs to be done',
            type: 'Relationship',
            ref: 'TicketProblemClassifier',
            kmigratorOptions: { null: true, on_delete: 'models.PROTECT' },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadIncidentClassifiers,
        create: access.canManageIncidentClassifiers,
        update: access.canManageIncidentClassifiers,
        delete: false,
        auth: true,
    },
})

module.exports = {
    IncidentClassifier,
}
