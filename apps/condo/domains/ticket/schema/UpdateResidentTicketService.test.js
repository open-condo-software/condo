/**
 * Generated by `createservice ticket.UpdateResidentTicketService --type mutations`
 */
const { createResidentTicketByTestClient } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithResidentUserAndProperty } = require('@condo/domains/property/utils/testSchema')
const { updateResidentTicketByTestClient } = require('@condo/domains/ticket/utils/testSchema')
const faker = require('faker')
 
describe('UpdateResidentTicketService', () => {
    test('resident: can update ticket', async () => {
        const userClient = await makeClientWithResidentUserAndProperty()
        const [ticket] = await createResidentTicketByTestClient(userClient, userClient.property)
        const newDetails = faker.random.alphaNumeric(21)
        const payload = {
            details:newDetails,
        }
        const [updatedTicket] = await updateResidentTicketByTestClient(userClient, payload)

        expect(updatedTicket.id).toEqual(ticket.id)
        expect(updatedTicket.details).toEqual(newDetails)
    })

    test('resident: cannot update not own ticket', async () => {

    })

    test('resident: cannot update ticket with short details', async () => {

    })

    test('resident: cannot update ticket fields which not in ResidentTicketUpdateInput', async () => {

    })

    test('admin: can update resident ticket', async () => {

    })

    test('user: cannot update resident ticket', async () => {

    })

    test('anonymous: cannot update resident ticket', async () => {

    })
})