/**
 * Generated by `createschema ticket.TicketChange 'ticket:Relationship:Ticket:CASCADE;'`
 */

const get = require('lodash/get')
const { Ticket } = require('./Ticket')
const { OMIT_TICKET_CHANGE_TRACKABLE_FIELDS } = require('../constants')
const { Relationship, Virtual } = require('@keystonejs/fields')
const { GQLListSchema, find, getById } = require('@condo/keystone/schema')
const { versioned, uuided, tracked } = require('@condo/keystone/plugins')
const access = require('@condo/domains/ticket/access/TicketChange')
const { generateChangeTrackableFieldsFrom, buildSetOfFieldsToTrackFrom } = require('@condo/domains/common/utils/serverSchema/changeTrackable')
const { ticketChangeDisplayNameResolversForSingleRelations, relatedManyToManyResolvers } = require('../utils/serverSchema/TicketChange')
const { extractReqLocale } = require('@condo/domains/common/utils/locale')
const conf = require('@condo/config')
const { getTranslations } = require('@condo/domains/common/utils/localesLoader')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { TicketStatus } = require('@condo/domains/ticket/schema/TicketStatus')
const { TicketSource } = require('@condo/domains/ticket/schema/TicketSource')
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')

const getTranslation = (translations, key) => {
    if (translations[key]) return translations[key]
    return key
}

// Corresponding TicketChange will have
const keysOfLocalizedTextFields = new Map([
    ['status', TicketStatus.schema.fields.name.template],
    ['source', TicketSource.schema.fields.name.template],
])

/**
 *
 * @type {GQLListSchema}
 */
const TicketChange = new GQLListSchema('TicketChange', {
    schemaDoc: 'Incremental changes of Ticket',
    fields: {
        ticket: {
            schemaDoc: 'Related ticket, whose change is logged in this entity',
            type: Relationship,
            ref: 'Ticket',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
        ...generateChangeTrackableFieldsFrom(
            buildSetOfFieldsToTrackFrom(Ticket.schema, { except: OMIT_TICKET_CHANGE_TRACKABLE_FIELDS }),
            ticketChangeDisplayNameResolversForSingleRelations,
            relatedManyToManyResolvers,
            keysOfLocalizedTextFields,
        ),
        changedByRole: {
            schemaDoc: 'Type of employee who changed the ticket, can be employee role from same organization or related, resident or deleted employee',
            type: Virtual,
            resolver: async (item, args, context) => {
                const locale = extractReqLocale(context.req) || conf.DEFAULT_LOCALE
                const translations = getTranslations(locale)

                const ticket = await getById('Ticket', item.ticket)
                const userId = get(item, 'createdBy')
                if (!ticket || !userId) return getTranslation(translations, 'pages.condo.ticket.TicketChanges.notice.DeletedCreatedAt.title')

                const user = await getById('User', userId)
                if (!user) return getTranslation(translations, 'pages.condo.ticket.TicketChanges.notice.DeletedCreatedAt.title')
                if (user.type === RESIDENT) return getTranslation(translations, 'Contact')

                const orgId = get(ticket, 'organization', null)
                if (!orgId) return getTranslation(translations, 'DeletedEmployee')

                const orgEmployees = await find('OrganizationEmployee', {
                    organization: { id: orgId },
                    user: { id: userId },
                })
                if (orgEmployees.length) {
                    const existingEmployee = orgEmployees.filter(employee => !employee.deletedAt && !employee.isBlocked)
                    if (existingEmployee.length) {
                        const roleID = existingEmployee[0].role
                        const role = await getById('OrganizationEmployeeRole', roleID)

                        return getTranslation(translations, role.name)
                    } else {
                        return getTranslation(translations, 'DeletedEmployee')
                    }
                } else {
                    const links = await find('OrganizationLink', {
                        to: { id: orgId },
                    })
                    const relatedOrgIds = links.map(link => link.from).filter(Boolean)
                    if (!relatedOrgIds.length) return getTranslation('DeletedEmployee')

                    const relatedOrgEmployees = await find('OrganizationEmployee', {
                        organization: { id_in: relatedOrgIds },
                        user: { id: userId },
                    })

                    const translationKey = relatedOrgEmployees.length ? 'ContactCenterEmployee' : 'DeletedEmployee'
                    return getTranslation(translations, translationKey)
                }
            },
        },
    },
    plugins: [uuided(), versioned(), tracked(), dvAndSender()],
    access: {
        read: access.canReadTicketChanges,
        create: access.canManageTicketChanges,
        update: false,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TicketChange,
}
