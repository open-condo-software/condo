/**
 * Generated by `createschema ticket.Incident 'organization; number; details:Text; status; textForResident:Text; workStart:DateTimeUtc; workFinish:DateTimeUtc; isScheduled:Checkbox; isEmergency:Checkbox; hasAllProperties:Checkbox;'`
 */

const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/ticket/access/Incident')
const { ORGANIZATION_OWNED_FIELD } = require('../../organization/schema/fields')
const { normalizeText } = require('../../common/utils/text')
const dayjs = require('dayjs')
const { GQLError } = require('@open-condo/keystone/errors')
const { INCIDENT_STATUSES, INCIDENT_STATUS_ACTUAL } = require('../constants/incident')
const { INCIDENT_ERRORS } = require('../constants/errors')
const { storeChangesIfUpdated, buildSetOfFieldsToTrackFrom } = require('../../common/utils/serverSchema/changeTrackable')
const { OMIT_INCIDENT_CHANGE_TRACKABLE_FIELDS } = require('../constants')
const { createIncidentChange, incidentRelatedManyToManyResolvers, incidentChangeDisplayNameResolversForSingleRelations } = require('../utils/serverSchema/IncidentChange')


const Incident = new GQLListSchema('Incident', {
    schemaDoc: 'Entries of scheduled and emergency incidents of water, electricity, etc.',
    fields: {

        organization: ORGANIZATION_OWNED_FIELD,

        number: {
            schemaDoc: 'Autogenerated incident human readable ID',
            type: 'AutoIncrementInteger',
            kmigratorOptions: { unique: true, null: false },
        },

        details: {
            schemaDoc: 'Text description of the incident',
            type: 'Text',
            isRequired: true,
            kmigratorOptions: { null: false },
            hooks: {
                resolveInput: async ({ resolvedData, fieldPath }) => {
                    return normalizeText(resolvedData[fieldPath])
                },
            },
        },

        status: {
            schemaDoc: 'Incident status.',
            type: 'Select',
            isRequired: true,
            options: INCIDENT_STATUSES.join(','),
            defaultValue: INCIDENT_STATUS_ACTUAL,
        },

        textForResident: {
            schemaDoc: 'Text that employees should say to residents',
            type: 'Text',
            hooks: {
                resolveInput: async ({ resolvedData, fieldPath }) => {
                    return normalizeText(resolvedData[fieldPath])
                },
            },
        },

        workStart: {
            schemaDoc: 'Date and time of works start',
            type: 'DateTimeUtc',
            isRequired: true,
            kmigratorOptions: { null: false },
        },

        workFinish: {
            schemaDoc: 'Date and time of works finish',
            type: 'DateTimeUtc',
            hooks: {
                validateInput: async (props) => {
                    const { resolvedData, existingItem, fieldPath, context } = props
                    const newItem = { ...existingItem, ...resolvedData }
                    if (!newItem[fieldPath]) return

                    const workFinish = dayjs(newItem[fieldPath])
                    const workStart = dayjs(newItem.workStart)
                    const isValidFinishDate = workFinish.diff(workStart) > 0

                    if (workFinish && workStart && !isValidFinishDate) {
                        throw new GQLError(INCIDENT_ERRORS.WORK_FINISH_EARLY_THAN_WORK_START, context)
                    }
                },
            },
        },

        isScheduled: {
            schemaDoc: 'Scheduled works',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: false,
        },

        isEmergency: {
            schemaDoc: 'Emergency work',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: false,
        },

        hasAllProperties: {
            schemaDoc: 'True if incident includes all properties in organization',
            type: 'Checkbox',
            defaultValue: false,
        },

    },
    hooks: {
        afterChange: async (...args) => {
            /**
             * Creates a new IncidentChange item
             */
            await storeChangesIfUpdated(
                buildSetOfFieldsToTrackFrom(Incident.schema, { except: OMIT_INCIDENT_CHANGE_TRACKABLE_FIELDS }),
                createIncidentChange,
                incidentChangeDisplayNameResolversForSingleRelations,
                incidentRelatedManyToManyResolvers,
                []
            )(...args)
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadIncidents,
        create: access.canManageIncidents,
        update: access.canManageIncidents,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Incident,
}
