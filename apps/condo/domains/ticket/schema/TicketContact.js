/**
 * Generated by `createschema ticket.TicketContact 'property:Relationship:Property:PROTECT; unitName:Text; email:Text; phone:Text; name:Text;' --force`
 */

const { Text, Relationship } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/ticket/access/TicketContact')
const { normalizePhone } = require('@condo/domains/common/utils/phone')

const TicketContact = new GQLListSchema('TicketContact', {
    schemaDoc: 'Contact information of a person, who is initiator of ticket(s)',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        property: {
            schemaDoc: 'Property, on which issue(s) has been reported in ticket(s) by this person',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

        unitName: {
            schemaDoc: 'Property unit, on which issue(s) had been reported in ticket(s) by this person. It may be considered as a living place of this person in the future. A person can not report it\'s accommodation, so, this field is not required',
            type: Text,
            isRequired: false,
        },

        email: {
            schemaDoc: 'Contact email of this person',
            type: Text,
            isRequired: false,
            hooks: {
                resolveInput: async ({ resolvedData }) => {
                    return resolvedData['email'] && resolvedData['email'].toLowerCase()
                },
            },
        },

        phone: {
            schemaDoc: 'Contact phone of this person in E.164 format without spaces',
            type: Text,
            isRequired: true,
            hooks: {
                resolveInput: async ({ resolvedData }) => (
                    normalizePhone(resolvedData['phone'])
                ),
            },
        },

        name: {
            schemaDoc: 'Full name of this person',
            type: Text,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadTicketContacts,
        create: access.canManageTicketContacts,
        update: access.canManageTicketContacts,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TicketContact,
}
