/**
 * Generated by `createschema ticket.CallRecordTicketTicket 'ticket:Relationship:Ticket:CASCADE;callRecord:Relationship:CallRecordTicket:CASCADE;'`
 */
const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { CallRecordTicket, createTestCallRecordTicket, updateTestCallRecordTicket, createTestTicket, createTestCallRecord } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


describe('CallRecordTicketTicket', () => {
    let admin, support, employeeUser, notEmployeeUser, anonymous, organization, property, callRecordTicketByAdmin

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()

        const [testOrganization] = await createTestOrganization(admin)
        organization = testOrganization
        const [testProperty] = await createTestProperty(admin, organization)
        property = testProperty

        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageCallRecords: true,
            canManageTickets: true,
        })
        await createTestOrganizationEmployee(admin, organization, employeeUser.user, role)

        notEmployeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        const [secondTestOrganization] = await createTestOrganization(admin)
        const [secondRole] = await createTestOrganizationEmployeeRole(admin, secondTestOrganization)
        await createTestOrganizationEmployee(admin, secondTestOrganization, notEmployeeUser.user, secondRole)
    })
    beforeEach(async () => {
        const [testCallRecord] = await createTestCallRecord(admin, organization)
        const [testTicket] = await createTestTicket(admin, organization, property)
        const [testCallRecordTicket] = await createTestCallRecordTicket(admin, testTicket, testCallRecord)
        callRecordTicketByAdmin = testCallRecordTicket
    })
    describe('Accesses', () => {
        describe('Admin', () => {
            test('can create', async () => {
                expect(callRecordTicketByAdmin).toBeDefined()
                expect(callRecordTicketByAdmin).toHaveProperty('organization.id', organization.id)
                expect(callRecordTicketByAdmin.ticket.id).toMatch(UUID_RE)
                expect(callRecordTicketByAdmin.callRecord.id).toMatch(UUID_RE)
            })
            test('can read', async () => {
                const callRecord = await CallRecordTicket.getOne(admin, { id: callRecordTicketByAdmin.id }, { sortBy: ['updatedAt_DESC'] })
                expect(callRecord).toBeDefined()
                expect(callRecord).toHaveProperty('id', callRecordTicketByAdmin.id)
            })
            test('can update', async () => {
                const [callRecord] = await updateTestCallRecordTicket(admin, callRecordTicketByAdmin.id, { deletedAt: 'true' })
                expect(callRecord).toBeDefined()
                expect(callRecord.deletedAt).toBeTruthy()
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecordTicket.delete(admin, callRecordTicketByAdmin.id)
                })
            })
        })

        describe('Support', () => {
            test('can create', async () => {
                const [testCallRecord] = await createTestCallRecord(admin, organization)
                const [testTicket] = await createTestTicket(admin, organization, property)
                const [callRecordTicket] = await createTestCallRecordTicket(support, testTicket, testCallRecord)

                expect(callRecordTicket).toBeDefined()
                expect(callRecordTicket).toHaveProperty('organization.id', organization.id)
                expect(callRecordTicket.ticket.id).toMatch(UUID_RE)
                expect(callRecordTicket.callRecord.id).toMatch(UUID_RE)
            })
            test('can read', async () => {
                const callRecord = await CallRecordTicket.getOne(support, { id: callRecordTicketByAdmin.id }, { sortBy: ['updatedAt_DESC'] })
                expect(callRecord).toBeDefined()
                expect(callRecord).toHaveProperty('id', callRecordTicketByAdmin.id)
            })
            test('can update', async () => {
                const [callRecord] = await updateTestCallRecordTicket(support, callRecordTicketByAdmin.id, { deletedAt: 'true' })
                expect(callRecord).toBeDefined()
                expect(callRecord.deletedAt).toBeTruthy()
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecordTicket.delete(support, callRecordTicketByAdmin.id)
                })
            })
        })

        describe('Employee', () => {
            test('can create', async () => {
                const [testCallRecord] = await createTestCallRecord(employeeUser, organization)
                const [testTicket] = await createTestTicket(employeeUser, organization, property)
                const [callRecordTicket] = await createTestCallRecordTicket(employeeUser, testTicket, testCallRecord)

                expect(callRecordTicket).toBeDefined()
                expect(callRecordTicket).toHaveProperty('organization.id', organization.id)
                expect(callRecordTicket.ticket.id).toMatch(UUID_RE)
                expect(callRecordTicket.callRecord.id).toMatch(UUID_RE)
            })
            test('can read', async () => {
                const callRecord = await CallRecordTicket.getOne(employeeUser, { id: callRecordTicketByAdmin.id }, { sortBy: ['updatedAt_DESC'] })
                expect(callRecord).toBeDefined()
                expect(callRecord).toHaveProperty('id', callRecordTicketByAdmin.id)
            })
            test('can update', async () => {
                const [callRecord] = await updateTestCallRecordTicket(employeeUser, callRecordTicketByAdmin.id, { deletedAt: 'true' })
                expect(callRecord).toBeDefined()
                expect(callRecord.deletedAt).toBeTruthy()
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecordTicket.delete(employeeUser, callRecordTicketByAdmin.id)
                })
            })
        })

        describe('Not employee', () => {
            test('can\'t create', async () => {
                const [testCallRecord] = await createTestCallRecord(employeeUser, organization)
                const [testTicket] = await createTestTicket(employeeUser, organization, property)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCallRecordTicket(notEmployeeUser, testTicket, testCallRecord)
                })
            })
            test('can\'t read', async () => {
                const callRecords = await CallRecordTicket.getAll(notEmployeeUser, { id: callRecordTicketByAdmin.id }, { sortBy: ['updatedAt_DESC'], first: 10 })
                expect(callRecords).toHaveLength(0)
            })
            test('can\'t update', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestCallRecordTicket(notEmployeeUser, callRecordTicketByAdmin.id)
                })
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecordTicket.delete(notEmployeeUser, callRecordTicketByAdmin.id)
                })
            })
        })

        describe('Anonymous', () => {
            test('can\'t create', async () => {
                const [testCallRecord] = await createTestCallRecord(employeeUser, organization)
                const [testTicket] = await createTestTicket(employeeUser, organization, property)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestCallRecordTicket(anonymous, testTicket, testCallRecord)
                })
            })
            test('can\'t read', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await CallRecordTicket.getOne(anonymous, { id: callRecordTicketByAdmin.id }, { sortBy: ['updatedAt_DESC'] })
                })
            })
            test('can\'t update', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestCallRecordTicket(anonymous, callRecordTicketByAdmin.id)
                })
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecordTicket.delete(anonymous, callRecordTicketByAdmin.id)
                })
            })
        })
    })
})
