/**
 * Generated by `createservice ticket.TicketAnalyticsReportService`
 */

const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToObj } = require('@condo/domains/common/utils/testSchema')
const { TICKET_ANALYTICS_REPORT_MUTATION } = require(('@condo/domains/ticket/gql'))
const moment = require('moment')

test('Groupped counts [day, status]', async () => {
    const client = await makeClient()
    const dateStart = moment().startOf('week')
    const dateEnd = moment().endOf('week')
    const { data: { result } } = await client.query(TICKET_ANALYTICS_REPORT_MUTATION, {
        dv: 1,
        sender: { dv: 1, fingerprint: 'tests' },
        data: {
            where: {
                AND: [
                    { organization: { id: 'a3a82e2f-8db8-4e50-bfdb-fe2deed42db2' } },
                    { createdAt_gte: dateStart.toISOString() },
                    { createdAt_lte: dateEnd.toISOString() },
                ],
            },
            groupBy: [ 'day', 'status' ],
        },
    })
    expect(result).toBeDefined()
})
test('Groupped counts [status, day]', async () => {
    const client = await makeClient()
    const dateStart = moment().startOf('week')
    const dateEnd = moment().endOf('week')
    const { data: { result } } = await client.query(TICKET_ANALYTICS_REPORT_MUTATION, {
        dv: 1,
        sender: { dv: 1, fingerprint: 'tests' },
        data: {
            where: {
                AND: [
                    { organization: { id: 'a3a82e2f-8db8-4e50-bfdb-fe2deed42db2' } },
                    { createdAt_gte: dateStart.toISOString() },
                    { createdAt_lte: dateEnd.toISOString() },
                    { isEmergency: true },
                ],
            },
            groupBy: [ 'status', 'day' ],
        },
    })
    expect(result).toBeDefined()
})
test('Groupped counts [property, status]', async () => {
    const client = await makeClient()
    const dateStart = moment().startOf('week')
    const dateEnd = moment().endOf('week')
    const { data: { result } } = await client.query(TICKET_ANALYTICS_REPORT_MUTATION, {
        dv: 1,
        sender: { dv: 1, fingerprint: 'tests' },
        data: {
            where: {
                AND: [
                    { organization: { id: 'a3a82e2f-8db8-4e50-bfdb-fe2deed42db2' } },
                    { createdAt_gte: dateStart.toISOString() },
                    { createdAt_lte: dateEnd.toISOString() },
                    { isEmergency: false },
                    { isPaid: false },
                ],
            },
            groupBy: [ 'status', 'property' ],
        },
    })
    expect(result).toBeDefined()
})
