/**
 * Generated by `createschema ticket.CallRecord 'organization:Relationship:Organization:CASCADE;file?:File;callerPhone:Text;destCallerPhone:Text;talkTime:Integer;startedAt:DateTimeUtc;isIncomingCall:Checkbox;importId:Text;'`
 */
const {
    makeLoggedInAdminClient, makeClient,
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const { COMMON_ERRORS } = require('@condo/domains/common/constants/errors')
const { HOLDING_TYPE } = require('@condo/domains/organization/constants/common')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee, createTestOrganizationLink } = require('@condo/domains/organization/utils/testSchema')
const { CALL_RECORD_ERRORS } = require('@condo/domains/ticket/constants/errors')
const { CallRecord, createTestCallRecord, updateTestCallRecord } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


describe('CallRecord', () => {
    let admin, support, employeeWithCanManageCallRecordsUser,
        relatedFromOrgEmployeeWithCanManageUser,
        relatedFromOrgEmployeeWithoutCanManageUser,
        employeeWithoutCanManageCallRecordsUser,
        notEmployeeUser, anonymous, organization, testCallRecord

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        employeeWithCanManageCallRecordsUser = await makeClientWithNewRegisteredAndLoggedInUser()
        employeeWithoutCanManageCallRecordsUser = await makeClientWithNewRegisteredAndLoggedInUser()
        relatedFromOrgEmployeeWithCanManageUser = await makeClientWithNewRegisteredAndLoggedInUser()
        relatedFromOrgEmployeeWithoutCanManageUser = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()

        const [toOrganization] = await createTestOrganization(admin)
        organization = toOrganization

        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageCallRecords: true,
        })
        const [role1] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageCallRecords: false,
        })
        await createTestOrganizationEmployee(admin, organization, employeeWithCanManageCallRecordsUser.user, role)
        await createTestOrganizationEmployee(admin, organization, employeeWithoutCanManageCallRecordsUser.user, role1)

        const [fromOrganization] = await createTestOrganization(admin, { type: HOLDING_TYPE })
        await createTestOrganizationLink(admin, fromOrganization, toOrganization)

        const [role3] = await createTestOrganizationEmployeeRole(admin, fromOrganization, {
            canManageCallRecords: true,
        })
        const [role4] = await createTestOrganizationEmployeeRole(admin, fromOrganization, {
            canManageCallRecords: false,
        })
        await createTestOrganizationEmployee(admin, fromOrganization, relatedFromOrgEmployeeWithCanManageUser.user, role3)
        await createTestOrganizationEmployee(admin, fromOrganization, relatedFromOrgEmployeeWithoutCanManageUser.user, role4)

        notEmployeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
    })
    beforeEach(async () => {
        [testCallRecord] = await createTestCallRecord(admin, organization)
    })
    describe('Accesses', () => {
        describe('Admin', () => {
            test('can create', async () => {
                expect(testCallRecord).toBeDefined()
                expect(testCallRecord).toHaveProperty('organization.id', organization.id)
                expect(testCallRecord.callerPhone).toBeDefined()
                expect(testCallRecord.destCallerPhone).toBeDefined()
                expect(testCallRecord.talkTime).toBeDefined()
                expect(testCallRecord.startedAt).toBeDefined()
                expect(testCallRecord.isIncomingCall).toBeDefined()
                expect(testCallRecord.importId).toBeDefined()
            })
            test('can read', async () => {
                const callRecord = await CallRecord.getOne(admin, { id: testCallRecord.id })
                expect(callRecord).toBeDefined()
                expect(callRecord).toHaveProperty('id', testCallRecord.id)
            })
            test('can update', async () => {
                const [callRecord] = await updateTestCallRecord(admin, testCallRecord.id, { isIncomingCall: false })
                expect(callRecord).toBeDefined()
                expect(callRecord).toHaveProperty('isIncomingCall', false)
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecord.delete(admin, testCallRecord.id)
                })
            })
        })

        describe('Support', () => {
            test('can\'t create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCallRecord(support, organization)
                })
            })
            test('can\'t read', async () => {
                const callRecord = await CallRecord.getOne(support, { id: testCallRecord.id })
                expect(callRecord).toBeUndefined()
            })
            test('can\'t update', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestCallRecord(support, testCallRecord.id, { isIncomingCall: false })
                })
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecord.delete(support, testCallRecord.id)
                })
            })
        })

        describe('Employee', () => {
            describe('Organization employee', () => {
                describe('with canManageCallRecords access', function () {
                    test('can create', async () => {
                        const [callRecord] = await createTestCallRecord(employeeWithCanManageCallRecordsUser, organization)
                        expect(callRecord).toBeDefined()
                        expect(callRecord).toHaveProperty('organization.id', organization.id)
                        expect(callRecord.callerPhone).toBeDefined()
                        expect(callRecord.destCallerPhone).toBeDefined()
                        expect(callRecord.talkTime).toBeDefined()
                        expect(callRecord.startedAt).toBeDefined()
                        expect(callRecord.isIncomingCall).toBeDefined()
                        expect(callRecord.importId).toBeDefined()
                    })
                    test('can read', async () => {
                        const callRecord = await CallRecord.getOne(employeeWithCanManageCallRecordsUser, { id: testCallRecord.id })
                        expect(callRecord).toBeDefined()
                        expect(callRecord).toHaveProperty('id', callRecord.id)
                    })
                    test('can update', async () => {
                        const [callRecord] = await updateTestCallRecord(employeeWithCanManageCallRecordsUser, testCallRecord.id, { isIncomingCall: false })
                        expect(callRecord).toBeDefined()
                        expect(callRecord).toHaveProperty('isIncomingCall', false)
                    })
                    test('can\'t delete', async () => {
                        await expectToThrowAccessDeniedErrorToObj(async () => {
                            await CallRecord.delete(employeeWithCanManageCallRecordsUser, testCallRecord.id)
                        })
                    })
                })
                describe('without canManageCallRecords access', function () {
                    test('can\'t create', async () => {
                        await expectToThrowAccessDeniedErrorToObj(
                            async () => await createTestCallRecord(employeeWithoutCanManageCallRecordsUser, organization)
                        )
                    })
                    test('can read', async () => {
                        const callRecord = await CallRecord.getOne(employeeWithoutCanManageCallRecordsUser, { id: testCallRecord.id })

                        expect(callRecord).toBeDefined()
                        expect(callRecord).toHaveProperty('id', callRecord.id)
                    })
                    test('can\'t update', async () => {
                        await expectToThrowAccessDeniedErrorToObj(
                            async () => await updateTestCallRecord(employeeWithoutCanManageCallRecordsUser, testCallRecord.id, { isIncomingCall: false })
                        )
                    })
                    test('can\'t delete', async () => {
                        await expectToThrowAccessDeniedErrorToObj(async () => {
                            await CallRecord.delete(employeeWithCanManageCallRecordsUser, testCallRecord.id)
                        })
                    })
                })
            })

            describe('Related from organization employee', () => {
                describe('with canManageCallRecords access', function () {
                    test('can create', async () => {
                        const [callRecord] = await createTestCallRecord(relatedFromOrgEmployeeWithCanManageUser, organization)
                        expect(callRecord).toBeDefined()
                        expect(callRecord).toHaveProperty('organization.id', organization.id)
                        expect(callRecord.callerPhone).toBeDefined()
                        expect(callRecord.destCallerPhone).toBeDefined()
                        expect(callRecord.talkTime).toBeDefined()
                        expect(callRecord.startedAt).toBeDefined()
                        expect(callRecord.isIncomingCall).toBeDefined()
                        expect(callRecord.importId).toBeDefined()
                    })
                    test('can read', async () => {
                        const callRecord = await CallRecord.getOne(relatedFromOrgEmployeeWithCanManageUser, { id: testCallRecord.id })
                        expect(callRecord).toBeDefined()
                        expect(callRecord).toHaveProperty('id', callRecord.id)
                    })
                    test('can update', async () => {
                        const [callRecord] = await updateTestCallRecord(relatedFromOrgEmployeeWithCanManageUser, testCallRecord.id, { isIncomingCall: false })
                        expect(callRecord).toBeDefined()
                        expect(callRecord).toHaveProperty('isIncomingCall', false)
                    })
                    test('can\'t delete', async () => {
                        await expectToThrowAccessDeniedErrorToObj(async () => {
                            await CallRecord.delete(relatedFromOrgEmployeeWithCanManageUser, testCallRecord.id)
                        })
                    })
                })
                describe('without canManageCallRecords access', function () {
                    test('can\'t create', async () => {
                        await expectToThrowAccessDeniedErrorToObj(
                            async () => await createTestCallRecord(relatedFromOrgEmployeeWithoutCanManageUser, organization)
                        )
                    })
                    test('can read', async () => {
                        const callRecord = await CallRecord.getOne(relatedFromOrgEmployeeWithoutCanManageUser, { id: testCallRecord.id })

                        expect(callRecord).toBeDefined()
                        expect(callRecord).toHaveProperty('id', callRecord.id)
                    })
                    test('can\'t update', async () => {
                        await expectToThrowAccessDeniedErrorToObj(
                            async () => await updateTestCallRecord(relatedFromOrgEmployeeWithoutCanManageUser, testCallRecord.id, { isIncomingCall: false })
                        )
                    })
                    test('can\'t delete', async () => {
                        await expectToThrowAccessDeniedErrorToObj(async () => {
                            await CallRecord.delete(relatedFromOrgEmployeeWithoutCanManageUser, testCallRecord.id)
                        })
                    })
                })
            })
        })

        describe('Not employee', () => {
            test('can\'t create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCallRecord(notEmployeeUser, organization)
                })
            })
            test('can\'t read', async () => {
                const callRecords = await CallRecord.getAll(notEmployeeUser, { id: testCallRecord.id }, { sortBy: ['updatedAt_DESC'], first: 10 })
                expect(callRecords).toHaveLength(0)
            })
            test('can\'t update', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestCallRecord(notEmployeeUser, testCallRecord.id)
                })
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecord.delete(notEmployeeUser, testCallRecord.id)
                })
            })
        })

        describe('Anonymous', () => {
            test('can\'t create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestCallRecord(anonymous, organization)
                })
            })
            test('can\'t read', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await CallRecord.getOne(anonymous, { id: testCallRecord.id })
                })
            })
            test('can\'t update', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestCallRecord(anonymous, testCallRecord.id)
                })
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecord.delete(anonymous, testCallRecord.id)
                })
            })
        })
    })

    describe('Validations', () => {
        describe('Phone validations', () => {
            it('throw error when callerPhone has invalid format', async () => {
                await expectToThrowGQLError(
                    async () => await createTestCallRecord(employeeWithCanManageCallRecordsUser, organization, { callerPhone: '42' }),
                    { ...COMMON_ERRORS.WRONG_PHONE_FORMAT, variable: ['data', 'callerPhone'] }
                )
            })

            it('throw error when destCallerPhone has invalid format', async () => {
                await expectToThrowGQLError(
                    async () => await createTestCallRecord(employeeWithCanManageCallRecordsUser, organization, { destCallerPhone: '42' }),
                    { ...COMMON_ERRORS.WRONG_PHONE_FORMAT, variable: ['data', 'destCallerPhone'] }
                )
            })
        })
        describe('talkTime', () => {
            it('must be greater or equal than 0', async () => {
                await expectToThrowGQLError(
                    async () => await createTestCallRecord(employeeWithCanManageCallRecordsUser, organization, { talkTime: -42 }),
                    CALL_RECORD_ERRORS.NEGATIVE_TALK_TIME_VALUE
                )
            })
        })
    })
})
