/**
 * Generated by `createschema ticket.CallRecord 'organization:Relationship:Organization:CASCADE;file?:File;callerPhone:Text;destCallerPhone:Text;talkTime:Integer;startedAt:DateTimeUtc;isIncomingCall:Checkbox;callId:Text;'`
 */
const {
    makeLoggedInAdminClient, makeClient,
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { CALL_RECORD_ERRORS } = require('@condo/domains/ticket/constants/errors')
const { CallRecord, createTestCallRecord, updateTestCallRecord } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

describe('CallRecord', () => {
    let admin, support, employeeUser, notEmployeeUser, anonymous, organization, testCallRecord

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()

        const [testOrganization] = await createTestOrganization(admin)
        organization = testOrganization

        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageCallRecords: true,
        })
        await createTestOrganizationEmployee(admin, organization, employeeUser.user, role)

        notEmployeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        const [secondTestOrganization] = await createTestOrganization(admin)
        const [secondRole] = await createTestOrganizationEmployeeRole(admin, secondTestOrganization, { canManageCallRecords: true })
        await createTestOrganizationEmployee(admin, secondTestOrganization, notEmployeeUser.user, secondRole)
    })
    beforeEach(async () => {
        [testCallRecord] = await createTestCallRecord(admin, organization)
    })
    describe('Accesses', () => {
        describe('Admin', () => {
            test('can create', async () => {
                expect(testCallRecord).toBeDefined()
                expect(testCallRecord).toHaveProperty('organization.id', organization.id)
                expect(testCallRecord.callerPhone).toBeDefined()
                expect(testCallRecord.destCallerPhone).toBeDefined()
                expect(testCallRecord.talkTime).toBeDefined()
                expect(testCallRecord.startedAt).toBeDefined()
                expect(testCallRecord.isIncomingCall).toBeDefined()
                expect(testCallRecord.callId).toBeDefined()
            })
            test('can read', async () => {
                const callRecord = await CallRecord.getOne(admin, { id: testCallRecord.id }, { sortBy: ['updatedAt_DESC'] })
                expect(callRecord).toBeDefined()
                expect(callRecord).toHaveProperty('id', testCallRecord.id)
            })
            test('can update', async () => {
                const [callRecord] = await updateTestCallRecord(admin, testCallRecord.id, { isIncomingCall: false })
                expect(callRecord).toBeDefined()
                expect(callRecord).toHaveProperty('isIncomingCall', false)
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecord.delete(admin, testCallRecord.id)
                })
            })
        })

        describe('Support', () => {
            test('can\'t create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCallRecord(support, organization)
                })
            })
            test('can\'t read', async () => {
                const callRecord = await CallRecord.getOne(support, { id: testCallRecord.id }, { sortBy: ['updatedAt_DESC'] })
                expect(callRecord).toBeUndefined()
            })
            test('can\'t update', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestCallRecord(support, testCallRecord.id, { isIncomingCall: false })
                })
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecord.delete(support, testCallRecord.id)
                })
            })
        })

        describe('Employee', () => {
            test('can create', async () => {
                const [callRecord] = await createTestCallRecord(employeeUser, organization)
                expect(callRecord).toBeDefined()
                expect(callRecord).toHaveProperty('organization.id', organization.id)
                expect(callRecord.callerPhone).toBeDefined()
                expect(callRecord.destCallerPhone).toBeDefined()
                expect(callRecord.talkTime).toBeDefined()
                expect(callRecord.startedAt).toBeDefined()
                expect(callRecord.isIncomingCall).toBeDefined()
                expect(callRecord.callId).toBeDefined()
            })
            test('can read', async () => {
                const callRecord = await CallRecord.getOne(employeeUser, { id: testCallRecord.id }, { sortBy: ['updatedAt_DESC'] })
                expect(callRecord).toBeDefined()
                expect(callRecord).toHaveProperty('id', callRecord.id)
            })
            test('can update', async () => {
                const [callRecord] = await updateTestCallRecord(employeeUser, testCallRecord.id, { isIncomingCall: false })
                expect(callRecord).toBeDefined()
                expect(callRecord).toHaveProperty('isIncomingCall', false)
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecord.delete(employeeUser, testCallRecord.id)
                })
            })
        })

        describe('Not employee', () => {
            test('can\'t create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCallRecord(notEmployeeUser, organization)
                })
            })
            test('can\'t read', async () => {
                const callRecords = await CallRecord.getAll(notEmployeeUser, { id: testCallRecord.id }, { sortBy: ['updatedAt_DESC'], first: 10 })
                expect(callRecords).toHaveLength(0)
            })
            test('can\'t update', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestCallRecord(notEmployeeUser, testCallRecord.id)
                })
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecord.delete(notEmployeeUser, testCallRecord.id)
                })
            })
        })

        describe('Anonymous', () => {
            test('can\'t create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestCallRecord(anonymous, organization)
                })
            })
            test('can\'t read', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await CallRecord.getOne(anonymous, { id: testCallRecord.id }, { sortBy: ['updatedAt_DESC'] })
                })
            })
            test('can\'t update', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestCallRecord(anonymous, testCallRecord.id)
                })
            })
            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CallRecord.delete(anonymous, testCallRecord.id)
                })
            })
        })
    })

    describe('Validations', () => {
        describe('Phone validations', () => {
            it('throw error when callerPhone has invalid format', async () => {
                await expectToThrowGQLError(
                    async () => await createTestCallRecord(employeeUser, organization, { callerPhone: '42' }),
                    CALL_RECORD_ERRORS.INVALID_CALLER_PHONE_NUMBER_FORMAT
                )
            })

            it('throw error when destCallerPhone has invalid format', async () => {
                await expectToThrowGQLError(
                    async () => await createTestCallRecord(employeeUser, organization, { destCallerPhone: '42' }),
                    CALL_RECORD_ERRORS.INVALID_DEST_CALLER_PHONE_NUMBER_FORMAT
                )
            })
        })
    })
})
