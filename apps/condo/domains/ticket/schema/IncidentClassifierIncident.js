/**
 * Generated by `createschema ticket.IncidentClassifierIncident 'incident:Relationship:Incident:CASCADE; classifier:Relationship:IncidentClassifier:PROTECT;'`
 */
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { addOrganizationFieldPlugin } = require('@condo/domains/organization/schema/plugins/addOrganizationFieldPlugin')
const access = require('@condo/domains/ticket/access/IncidentClassifierIncident')


const IncidentClassifierIncident = new GQLListSchema('IncidentClassifierIncident', {
    schemaDoc: 'Many-to-many relationship between Incident and IncidentClassifier',
    fields: {

        incident: {
            schemaDoc: 'Incident which has a classifier',
            type: 'Relationship',
            ref: 'Incident',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        classifier: {
            schemaDoc: 'A classifier which is in the incident entry',
            type: 'Relationship',
            ref: 'IncidentClassifier',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['incident', 'classifier'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'incident_classifier_unique_incident_and_classifier',
            },
        ],
    },
    plugins: [
        addOrganizationFieldPlugin({ fromField: 'incident', isRequired: true }),
        uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical(),
    ],
    access: {
        read: access.canReadIncidentClassifierIncidents,
        create: access.canManageIncidentClassifierIncidents,
        update: access.canManageIncidentClassifierIncidents,
        delete: false,
        auth: true,
    },
})

module.exports = {
    IncidentClassifierIncident,
}
