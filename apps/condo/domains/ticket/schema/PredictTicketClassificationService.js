/**
 * Generated by `createservice ticket.PredictTicketClassificationService --type queries`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/ticket/access/PredictTicketClassificationService')
const { GQLError, GQLErrorCode: { INTERNAL_ERROR } } = require('@core/keystone/errors')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const ML_SPACE = process.env.ML_SPACE_TICKET_CLASSIFIER ? JSON.parse(process.env.ML_SPACE_TICKET_CLASSIFIER) : {}
const fetch = require('node-fetch')
const { TicketClassifierRule } = require('@condo/domains/ticket/utils/serverSchema')
/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const errors = {
    TICKET_RULE_NOT_FOUND: {
        query: 'predictTicketClassification',
        code: INTERNAL_ERROR,
        type: NOT_FOUND,
        message: 'ticket classifier rule not found',
        messageForUser: 'api.user.predictTicketClassification.TICKET_RULE_NOT_FOUND',
    },
    ML_SPACE_NOT_CONFIGURED: {
        query: 'predictTicketClassification',
        code: INTERNAL_ERROR,
        type: NOT_FOUND,
        message: 'ML_SPACE_TICKET_CLASSIFIER env variable needs to have endpoint, authKey, workspace',
        messageForUser: 'api.user.predictTicketClassification.ML_SPACE_NOT_CONFIGURED',
    },
}

const PredictTicketClassificationService = new GQLCustomSchema('PredictTicketClassificationService', {
    types: [
        {
            access: true,
            type: 'input PredictTicketClassificationInput { details: String! }',
        },
    ],
    queries: [
        {
            access: access.canPredictTicketClassification,
            schema: 'executePredictTicketClassification (data: PredictTicketClassificationInput!): TicketClassifierRule',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { details } } = args
                const { endpoint, authKey, workspace } = ML_SPACE
                if (!endpoint || !authKey || !workspace) {
                    throw new GQLError(errors.ML_SPACE_NOT_CONFIGURED, context)
                }
                const response = await fetch(endpoint, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'cookie': `authservice_session=${authKey}`,
                        'x-workspace-id': workspace,
                    },
                    method: 'POST',
                    body: JSON.stringify({ instances: [ { ticket: details } ] }),
                })
                const { classifier: id } = await response.json()
                const ticketClassifierRule = await TicketClassifierRule.getOne(context, { id })
                if (!ticketClassifierRule) {
                    throw new GQLError(errors.TICKET_RULE_NOT_FOUND, context)
                }
                return ticketClassifierRule
            },
        },
    ],
    
})

module.exports = {
    PredictTicketClassificationService,
}
