/**
 * Generated by `createservice ticket.CreateResidentTicketService --type mutations`
 */
const { Property } = require('../../property/utils/serverSchema')
const { Ticket } = require('../utils/serverSchema')
const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/ticket/access/CreateResidentTicketService')
const { getSectionAndFloorByUnitName } = require('../utils/unit')


const CreateResidentTicketService = new GQLCustomSchema('CreateResidentTicketService', {
    types: [
        {
            access: true,
            type: 'input CreateResidentTicketInput { organizationId: String!, details: String!,' +
                ' classifierId: String!, propertyId: String!, unitName: String, sourceId: String! }',
        },
        {
            access: true,
            type: 'type CreateResidentTicketOutput { id: String! }',
        },
    ],

    mutations: [
        {
            access: access.canCreateResidentTicket,
            schema: 'createResidentTicket(data: CreateResidentTicketInput!): CreateResidentTicketOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const { organizationId, details, classifierId, propertyId, unitName, sourceId } = data
                const property = (await Property.getAll(context, { id: propertyId }))[0]
                const { sectionName, floorName } = getSectionAndFloorByUnitName(property, unitName)
                const client = context.req.user

                const ticket = await Ticket.create(context, {
                    dv: 1,
                    sender: client.sender,
                    organization: { connect: { id: organizationId } },
                    client: { connect: { id: client.id } },
                    classifier: { connect: { id: classifierId } },
                    property: { connect: { id: propertyId } },
                    unitName,
                    sectionName,
                    floorName,
                    source: { connect: { id: sourceId } },
                    details,
                })

                return {
                    id: ticket.id,
                }
            },
        },
    ],
})

module.exports = {
    CreateResidentTicketService,
}
