/**
 * Generated by `createservice ticket.CreateResidentTicketService --type mutations`
 */
const { Contact } = require('@condo/domains/contact/utils/serverSchema')
const { Property } = require('@condo/domains/property/utils/serverSchema')
const { Ticket } = require('../utils/serverSchema')
const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/ticket/access/CreateResidentTicketService')
const { NOT_FOUND_ERROR } = require('@condo/domains/common/constants/errors')
const { getSectionAndFloorByUnitName } = require('@condo/domains/ticket/utils/unit')

const CreateResidentTicketService = new GQLCustomSchema('CreateResidentTicketService', {
    types: [
        {
            access: true,
            type: 'input CreateResidentTicketInput { dv: Int!, sender: JSON!, details: String!, source: TicketSourceRelateToOneInput!, property: PropertyRelateToOneInput!, unitName: String }',
        },
        {
            access: true,
            type:
                'type ResidentTicketOutput { organization: Organization!, property: Property!, unitName: String,' +
                'sectionName: String, floorName: String, number: Int!, client: User!, clientName: String,' +
                'clientEmail: String, clientPhone: String, details: String!, related: Ticket, isEmergency: Boolean, status: TicketStatus!' +
                'isPaid: Boolean, source: TicketSource!, id: String!, createdBy: User!, createdAt: String!, updatedAt: String, classifier: TicketClassifier,' +
                'dv: Int, sender: JSON, v: Int, deletedAt: String, newId: String }',
        },
    ],

    mutations: [
        {
            access: access.canCreateResidentTicket,
            schema: 'createResidentTicket(data: CreateResidentTicketInput!): ResidentTicketOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const { dv: newTicketDv, sender: newTicketSender, details, source, property: PropertyRelateToOneInput, unitName } = data
                const { connect: { id: propertyId } } = PropertyRelateToOneInput
                const [property] = await Property.getAll(context, { id: propertyId })
                if (!property) throw Error(`${NOT_FOUND_ERROR}property] property not found`)
                const organizationId = property.organization?.id
                const { sectionName, floorName } = getSectionAndFloorByUnitName(property, unitName)
                if (unitName && (!sectionName || !floorName)) throw Error(`${NOT_FOUND_ERROR}unitName] unitName not found`)
                const user = context?.req?.user

                const [contact] = await Contact.getAll(context, {
                    email: user?.email, organization: { id: organizationId }, property: { id: propertyId },
                })
                if (!contact) {
                    await Contact.create(context, {
                        dv: newTicketDv,
                        sender: newTicketSender,
                        organization: { connect: { id: organizationId } },
                        property: PropertyRelateToOneInput,
                        unitName,
                        email: user?.email,
                        phone: user?.phone,
                        name: user?.name,
                    })
                }

                return await Ticket.create(context, {
                    dv: newTicketDv,
                    sender: newTicketSender,
                    organization: { connect: { id: organizationId } },
                    client: { connect: { id: user.id } },
                    property: PropertyRelateToOneInput,
                    unitName,
                    sectionName,
                    floorName,
                    source,
                    details,
                })
            },
        },
    ],
})

module.exports = {
    CreateResidentTicketService,
}