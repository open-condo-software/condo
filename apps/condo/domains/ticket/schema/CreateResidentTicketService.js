/**
 * Generated by `createservice ticket.CreateResidentTicketService --type mutations`
 */
const { Property } = require('../../property/utils/serverSchema')
const { Ticket } = require('../utils/serverSchema')
const { GQLCustomSchema } = require('@core/keystone/schema')
const { mapTicketToResidentTicket } = require('../utils/serverSchema')
const access = require('@condo/domains/ticket/access/CreateResidentTicketService')
const { getSectionAndFloorByUnitName } = require('@condo/domains/ticket/utils/unit')

const TICKET_MOBILE_SOURCE_ID = '3068d49a-a45c-4c3a-a02d-ea1a53e1febb'

const CreateResidentTicketService = new GQLCustomSchema('CreateResidentTicketService', {
    types: [
        {
            access: true,
            type: 'input CreateResidentTicketInput { dv: Int!, sender: JSON!, details: String!, propertyId: String, unitName: String }',
        },
        {
            access: true,
            type: 'type ResidentTicketOutput { organization: Organization!, property: Property!, unitName: String!,' +
            'sectionName: String, floorName: String, status: TicketStatus!,' +
            'statusUpdatedAt: String, statusReason: String, number: Int!, client: User!, clientName: String,' +
            'clientEmail: String, clientPhone: String, contact: Contact, operator: User, assignee: User, executor: User,' +
            'details: String!, related: Ticket, isEmergency: Boolean,' +
            'isPaid: Boolean, source: TicketSource!, id: String!, createdBy: User!, createdAt: String!,' +
            'updatedAt: String, updatedBy: User }',
        },
    ],

    mutations: [
        {
            access: access.canCreateResidentTicket,
            schema: 'createResidentTicket(data: CreateResidentTicketInput!): ResidentTicketOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const { dv: newTicketDv, sender: newTicketSender, details, propertyId, unitName } = data
                if (!propertyId) throw Error('reserved for government organizations')
                const property = (await Property.getAll(context, { id: propertyId }))[0]
                const organizationId = property.organization.id
                const { sectionName, floorName } = getSectionAndFloorByUnitName(property, unitName)
                const client = context.req.user

                const ticket = await Ticket.create(context, {
                    dv: newTicketDv,
                    sender: newTicketSender,
                    organization: { connect: { id: organizationId } },
                    client: { connect: { id: client.id } },
                    property: { connect: { id: propertyId } },
                    unitName,
                    sectionName,
                    floorName,
                    source: { connect: { id: TICKET_MOBILE_SOURCE_ID } },
                    details,
                })

                return mapTicketToResidentTicket(ticket)
            },
        },
    ],
})

module.exports = {
    CreateResidentTicketService,
}
