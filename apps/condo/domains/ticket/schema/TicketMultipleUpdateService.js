/**
 * Generated by `createservice ticket.TicketMultipleUpdateService --type mutations`
 */

const get = require('lodash/get')

const { GQLCustomSchema, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/ticket/access/TicketMultipleUpdateService')

const { Ticket } = require('../utils/serverSchema')


const TicketMultipleUpdateService = new GQLCustomSchema('TicketMultipleUpdateService', {
    types: [
        {
            access: true,
            type: 'input TicketMultipleUpdateInput { dv: Int!, sender: SenderFieldInput!, id: ID!, data: [TicketUpdateInput]! }',
        },
    ],
    mutations: [
        {
            access: access.canTicketMultipleUpdate,
            schema: 'ticketMultipleUpdate(data: TicketMultipleUpdateInput!): Ticket!',
            resolver: async (parent, args, context) => {
                const { data } = args

                const ticketId = get(data, 'id')
                const updateData = get(data, 'data')

                if (!ticketId) return

                for (const ticketUpdateData of updateData) {
                    await Ticket.update(context, ticketId, ticketUpdateData)
                }

                return getById('Ticket', ticketId)
            },
        },
    ],

})

module.exports = {
    TicketMultipleUpdateService,
}
