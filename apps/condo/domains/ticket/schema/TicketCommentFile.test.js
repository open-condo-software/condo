/**
 * Generated by `createschema ticket.TicketCommentFile 'organization:Relationship:Organization:CASCADE;file?:File;ticketComment?:Relationship:TicketComment:SET_NULL'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { TicketCommentFile, createTestTicketCommentFile, updateTestTicketCommentFile,
    createTestTicket,
    createTestTicketComment, TicketComment, updateTestTicketComment, createTestTicketFile, updateTestTicketFile,
} = require('@condo/domains/ticket/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects, expectToThrowValidationFailureError,
} = require('@condo/domains/common/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')
const {
    createTestOrganization,
    createTestOrganizationEmployeeRole,
    createTestOrganizationEmployee,
    createTestOrganizationWithAccessToAnotherOrganization,
    updateTestOrganizationEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty, makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { RESIDENT_COMMENT_TYPE } = require('../constants')
const faker = require('faker')
const { createTestResident } = require('@condo/domains/resident/utils/testSchema')
const { createTestContact } = require('@condo/domains/contact/utils/testSchema')
const { ORGANIZATION_COMMENT_TYPE } = require('@condo/domains/ticket/constants')

describe('TicketCommentFile', () => {
    describe('employee', () => {
        describe('create', () => {
            test('can be created by user, who has "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)
                const [ticketComment] = await createTestTicketComment(userClient, ticket, userClient.user)
                const [ticketCommentFile] = await createTestTicketCommentFile(userClient, organization, ticket, ticketComment)

                expect(ticketCommentFile.id).toMatch(UUID_RE)
            })

            test('cannot be created by user, who does not have "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: false,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)
                const [ticketComment] = await createTestTicketComment(adminClient, ticket, userClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketCommentFile(userClient, organization, ticket, ticketComment)
                })
            })

            test('can be created by admin', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [ticket] = await createTestTicket(adminClient, organization, property)

                const [ticketComment] = await createTestTicketComment(adminClient, ticket, adminClient.user)
                const [ticketCommentFile] = await createTestTicketCommentFile(adminClient, organization, ticket, ticketComment)

                expect(ticketCommentFile.id).toMatch(UUID_RE)
            })

            test('cannot be created by anonymous', async () => {
                const anonymous = await makeClient()

                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                const [ticketComment] = await createTestTicketComment(client, ticket, client.user)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestTicketCommentFile(anonymous, client.organization, ticket, ticketComment)
                })
            })

            test('can be created by employee from "from" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, organizationTo, propertyTo, organizationFrom, employeeFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                    canManageTickets: true,
                })
                await updateTestOrganizationEmployee(admin, employeeFrom.id, {
                    role: { connect: { id: role.id } },
                })
                const [ticket] = await createTestTicket(admin, organizationTo, propertyTo)
                const [ticketComment] = await createTestTicketComment(clientFrom, ticket, clientFrom.user)

                const [ticketCommentFile] = await createTestTicketCommentFile(clientFrom, organizationTo, ticket, ticketComment)
                expect(ticketCommentFile.id).toMatch(UUID_RE)
            })

            test('cannot be created by employee from "to" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientTo, organizationFrom, propertyFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [ticket] = await createTestTicket(admin, organizationFrom, propertyFrom)
                const [ticketComment] = await createTestTicketComment(admin, ticket, admin.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketCommentFile(clientTo, organizationFrom, ticket, ticketComment)
                })
            })
        })

        describe('read', () => {
            test('can be read by admin', async () => {
                const adminClient = await makeLoggedInAdminClient()

                const userClient1 = await makeClientWithProperty()
                const [ticket1] = await createTestTicket(userClient1, userClient1.organization, userClient1.property)
                const [ticketComment] = await createTestTicketComment(userClient1, ticket1, userClient1.user)
                await createTestTicketCommentFile(userClient1, userClient1.organization, ticket1, ticketComment)

                const objs = await TicketCommentFile.getAll(adminClient, {})
                expect(objs.length).toBeGreaterThan(0)
            })

            test('cannot be read by anonymous', async () => {
                const anonymous = await makeClient()

                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                const [ticketComment] = await createTestTicketComment(client, ticket, client.user)
                await createTestTicketCommentFile(client, client.organization, ticket, ticketComment)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await TicketCommentFile.getAll(anonymous)
                })
            })

            test('can be read by employee from "from" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, organizationTo, propertyTo } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [ticket] = await createTestTicket(admin, organizationTo, propertyTo)
                const [ticketComment] = await createTestTicketComment(admin, ticket, clientFrom.user)
                await createTestTicketCommentFile(clientFrom, organizationTo, ticket, ticketComment)

                const comments = await TicketComment.getAll(clientFrom)
                expect(comments).toHaveLength(1)
            })

            test('cannot be read by employee from "to" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, clientTo, organizationFrom, propertyFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [ticket] = await createTestTicket(admin, organizationFrom, propertyFrom)
                await createTestTicketComment(admin, ticket, clientFrom.user)

                const [ticketComment] = await createTestTicketComment(clientFrom, ticket, clientFrom.user)
                await createTestTicketCommentFile(clientFrom, organizationFrom, ticket, ticketComment)

                const comments = await TicketComment.getAll(clientTo)
                expect(comments).toHaveLength(0)
            })
        })

        describe('update', () => {
            test('can be updated by user, who has created it and has "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)

                const [ticketComment] = await createTestTicketComment(userClient, ticket, userClient.user)
                const [ticketCommentFile] = await createTestTicketCommentFile(userClient, organization, ticket)

                const payload = {
                    ticketComment: { connect: { id: ticketComment.id } },
                }

                const [updatedTicketCommentFile] = await updateTestTicketCommentFile(userClient, ticketCommentFile.id, payload)

                expect(updatedTicketCommentFile.id).toEqual(ticketCommentFile.id)
                expect(updatedTicketCommentFile.ticketComment.id).toEqual(ticketComment.id)
            })

            test('cannot be updated by user, who has created it, but does not have "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: false,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)
                const [ticketComment] = await createTestTicketComment(adminClient, ticket, userClient.user)
                const [ticketCommentFile] = await createTestTicketCommentFile(adminClient, organization, ticket, ticketComment)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTicketCommentFile(userClient, ticketCommentFile.id)
                })
            })

            test('cannot be updated by user, who has not created it', async () => {
                const userClient1 = await makeClientWithProperty()
                const userClient2 = await makeClientWithProperty()

                const [ticket] = await createTestTicket(userClient2, userClient2.organization, userClient2.property)

                const [ticketComment] = await createTestTicketComment(userClient2, ticket, userClient2.user)
                const [ticketCommentFile] = await createTestTicketCommentFile(userClient2, userClient2.organization, ticket)

                const payload = {
                    ticketComment: { connect: { id: ticketComment.id } },
                }

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTicketCommentFile(userClient1, ticketCommentFile.id, payload)
                })
            })

            test('can be updated by admin', async () => {
                const adminClient = await makeLoggedInAdminClient()

                const userClient = await makeClientWithProperty()
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property)

                const [ticketComment] = await createTestTicketComment(userClient, ticket, userClient.user)
                const [ticketCommentFile] = await createTestTicketCommentFile(userClient, userClient.organization, ticket)

                const payload = {
                    ticketComment: { connect: { id: ticketComment.id } },
                }

                const [updatedTicketCommentFile] = await updateTestTicketCommentFile(adminClient, ticketCommentFile.id, payload)

                expect(updatedTicketCommentFile.id).toEqual(ticketCommentFile.id)
                expect(updatedTicketCommentFile.ticketComment.id).toEqual(ticketComment.id)
            })

            test('cannot be updated by anonymous', async () => {
                const anonymousClient = await makeClient()

                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                const [ticketComment] = await createTestTicketComment(client, ticket, client.user)
                const [ticketCommentFile] = await createTestTicketCommentFile(client, client.organization, ticket, ticketComment)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestTicketCommentFile(anonymousClient, ticketCommentFile.id)
                })
            })
        })

    })

    describe('resident', () => {
        describe('create', () => {
            test('can create ticket files in ticket comment with resident type in ticket where contact phone and address matches to resident phone and address', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const unitName = faker.random.alphaNumeric(5)
                const { phone } = residentClient.userAttrs
                const content = faker.lorem.sentence()

                await createTestResident(admin, residentClient.user, organization, property, {
                    unitName,
                })
                const [contact] = await createTestContact(admin, organization, property, {
                    phone,
                    unitName,
                })
                const [ticket] = await createTestTicket(admin, organization, property, {
                    unitName,
                    contact: { connect: { id: contact.id } },
                    canReadByResident: true,
                })
                const [ticketComment] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content,
                })

                const [ticketCommentFile] = await createTestTicketCommentFile(residentClient, organization, ticket, ticketComment)

                expect(ticketCommentFile.id).toMatch(UUID_RE)
            })

            test('can create ticket files in his ticket comment', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const unitName = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                await createTestResident(admin, residentClient.user, organization, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })
                const [ticketComment] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content,
                })

                const [ticketCommentFile] = await createTestTicketCommentFile(residentClient, organization, ticket, ticketComment)

                expect(ticketCommentFile.id).toMatch(UUID_RE)
            })

            test('cannot create comment in not his resident ticket', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                await createTestResident(adminClient, residentClient.user, organization, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(userClient, organization, property)
                const [ticketComment] = await createTestTicketComment(userClient, ticket, userClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketCommentFile(residentClient, organization, ticket, ticketComment)
                })
            })
        })

        describe('read', () => {
            test('can read ticket files in ticket comments with type "resident" in his ticket', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const content1 = faker.lorem.sentence()
                const content2 = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, organization, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                const [commentFromResident] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content1,
                })
                const [commentFromEmployeeInResidentComments] = await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content2,
                })
                const [commentFromEmployeeInEmployeeComments] = await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: ORGANIZATION_COMMENT_TYPE,
                    content: content2,
                })

                const [residentTicketCommentFile] = await createTestTicketCommentFile(residentClient, organization, ticket, commentFromResident)
                const [employeeTicketCommentFile] = await createTestTicketCommentFile(employeeClient, organization, ticket, commentFromEmployeeInResidentComments)

                await createTestTicketCommentFile(employeeClient, organization, ticket, commentFromEmployeeInEmployeeComments)

                const files = await TicketCommentFile.getAll(residentClient, {}, { sortBy: 'createdAt_ASC' })

                expect(files).toHaveLength(2)
                expect(files[0].id).toEqual(residentTicketCommentFile.id)
                expect(files[1].id).toEqual(employeeTicketCommentFile.id)
            })

            test('cannot read ticket files in ticket comments with type "resident" in not his ticket', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()
                const anotherResidentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)
                const anotherUnitName = faker.random.alphaNumeric(5)
                const content1 = faker.lorem.sentence()
                const content2 = faker.lorem.sentence()

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, organization, property, {
                    unitName,
                })
                await createTestResident(adminClient, anotherResidentClient.user, organization, property, {
                    unitName: anotherUnitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                const [commentFromResident] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content1,
                })
                const [commentFromEmployee] = await createTestTicketComment(employeeClient, ticket, employeeClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content: content2,
                })

                await createTestTicketCommentFile(residentClient, organization, ticket, commentFromResident)
                await createTestTicketCommentFile(employeeClient, organization, ticket, commentFromEmployee)

                const files = await TicketCommentFile.getAll(anotherResidentClient)

                expect(files).toHaveLength(0)
            })

            test('can read own ticket file without ticketComment connection', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, organization, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                const [residentTicketCommentFile] = await createTestTicketCommentFile(residentClient, organization, ticket)

                const files = await TicketCommentFile.getAll(residentClient, {}, { sortBy: 'createdAt_ASC' })

                expect(files).toHaveLength(1)
                expect(files[0].id).toEqual(residentTicketCommentFile.id)
            })

            test('cannot read another ticket files without ticketComment connection', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const residentClient = await makeClientWithResidentUser()

                const unitName = faker.random.alphaNumeric(5)

                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, employeeClient.user, role)
                await createTestResident(adminClient, residentClient.user, organization, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })

                await createTestTicketCommentFile(employeeClient, organization, ticket)

                const files = await TicketCommentFile.getAll(residentClient, {}, { sortBy: 'createdAt_ASC' })

                expect(files).toHaveLength(0)
            })
        })

        describe('update', () => {
            test('can update his ticket comment file', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const unitName = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                await createTestResident(admin, residentClient.user, organization, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })
                const [ticketComment] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content,
                })

                const [ticketCommentFile] = await createTestTicketCommentFile(residentClient, organization, ticket)

                const [updatedTicketCommentFile] = await updateTestTicketCommentFile(residentClient, ticketCommentFile.id, {
                    ticketComment: { connect: { id: ticketComment.id } },
                })

                expect(updatedTicketCommentFile.id).toEqual(ticketCommentFile.id)
                expect(updatedTicketCommentFile.ticketComment.id).toEqual(ticketComment.id)
            })

            test('cannot update not his own ticket comment file', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const unitName = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                await createTestResident(admin, residentClient.user, organization, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })
                const [ticketComment] = await createTestTicketComment(residentClient, ticket, residentClient.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content,
                })

                const [ticketCommentFile] = await createTestTicketCommentFile(admin, organization, ticket)

                await expectToThrowAccessDeniedErrorToObj(async () =>
                    await updateTestTicketCommentFile(residentClient, ticketCommentFile.id, {
                        ticketComment: { connect: { id: ticketComment.id } },
                    })
                )
            })

            test('cannot connect ticket comment file to not his own ticket comment', async () => {
                const admin = await makeLoggedInAdminClient()
                const residentClient = await makeClientWithResidentUser()

                const [organization] = await createTestOrganization(admin)
                const [property] = await createTestProperty(admin, organization)
                const unitName = faker.random.alphaNumeric(5)
                const content = faker.lorem.sentence()

                await createTestResident(admin, residentClient.user, organization, property, {
                    unitName,
                })
                const [ticket] = await createTestTicket(residentClient, organization, property, {
                    unitName,
                })
                const [ticketComment] = await createTestTicketComment(admin, ticket, admin.user, {
                    type: RESIDENT_COMMENT_TYPE,
                    content,
                })

                const [ticketCommentFile] = await createTestTicketCommentFile(residentClient, organization, ticket)

                await expectToThrowAccessDeniedErrorToObj(async () =>
                    await updateTestTicketCommentFile(residentClient, ticketCommentFile.id, {
                        ticketComment: { connect: { id: ticketComment.id } },
                    })
                )
            })
        })
    })

    describe('validations', () => {
        it('cannot connect ticket from another organization', async () => {
            const admin = await makeLoggedInAdminClient()

            const [organization] = await createTestOrganization(admin)
            const [organization1] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization1)

            const [ticket] = await createTestTicket(admin, organization1, property)
            const [ticketCommentFile] = await createTestTicketCommentFile(admin, organization)

            await expectToThrowValidationFailureError(async () => {
                await updateTestTicketCommentFile(admin, ticketCommentFile.id, {
                    ticket: { connect: { id: ticket.id } },
                })
            }, 'ticket field validation error. Ticket organization doesn\'t match to TicketCommentFile organization')
        })
    })
})
