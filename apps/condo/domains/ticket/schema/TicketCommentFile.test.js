/**
 * Generated by `createschema ticket.TicketCommentFile 'organization:Relationship:Organization:CASCADE;file?:File;ticketComment?:Relationship:TicketComment:SET_NULL'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { TicketCommentFile, createTestTicketCommentFile, updateTestTicketCommentFile,
    createTestTicket,
    createTestTicketComment, TicketComment, updateTestTicketComment,
} = require('@condo/domains/ticket/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
} = require('@condo/domains/common/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const {
    createTestOrganization,
    createTestOrganizationEmployeeRole,
    createTestOrganizationEmployee,
    createTestOrganizationWithAccessToAnotherOrganization,
    updateTestOrganizationEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty, makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { RESIDENT_COMMENT_TYPE } = require('../constants')
const faker = require('faker')

describe('TicketCommentFile', () => {
    describe('employee', () => {
        describe('create', () => {
            test('can be created by user, who has "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)
                const [ticketComment] = await createTestTicketComment(userClient, ticket, userClient.user)
                const [ticketCommentFile] = await createTestTicketCommentFile(userClient, organization, ticket, ticketComment)

                expect(ticketCommentFile.id).toMatch(UUID_RE)
            })

            test('cannot be created by user, who does not have "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: false,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)
                const [ticketComment] = await createTestTicketComment(adminClient, ticket, userClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketCommentFile(userClient, organization, ticket, ticketComment)
                })
            })

            test('can be created by admin', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [ticket] = await createTestTicket(adminClient, organization, property)

                const [ticketComment] = await createTestTicketComment(adminClient, ticket, adminClient.user)
                const [ticketCommentFile] = await createTestTicketCommentFile(adminClient, organization, ticket, ticketComment)

                expect(ticketCommentFile.id).toMatch(UUID_RE)
            })

            test('cannot be created by anonymous', async () => {
                const anonymous = await makeClient()

                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                const [ticketComment] = await createTestTicketComment(client, ticket, client.user)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestTicketCommentFile(anonymous, client.organization, ticket, ticketComment)
                })
            })

            test('can be created by employee from "from" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, organizationTo, propertyTo, organizationFrom, employeeFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                    canManageTickets: true,
                })
                await updateTestOrganizationEmployee(admin, employeeFrom.id, {
                    role: { connect: { id: role.id } },
                })
                const [ticket] = await createTestTicket(admin, organizationTo, propertyTo)
                const [ticketComment] = await createTestTicketComment(clientFrom, ticket, clientFrom.user)

                const [ticketCommentFile] = await createTestTicketCommentFile(clientFrom, organizationTo, ticket, ticketComment)
                expect(ticketCommentFile.id).toMatch(UUID_RE)
            })

            test('cannot be created by employee from "to" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientTo, organizationFrom, propertyFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [ticket] = await createTestTicket(admin, organizationFrom, propertyFrom)
                const [ticketComment] = await createTestTicketComment(admin, ticket, admin.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestTicketCommentFile(clientTo, organizationFrom, ticket, ticketComment)
                })
            })
        })

        describe('read', () => {
            test('can be read by admin', async () => {
                const adminClient = await makeLoggedInAdminClient()

                const userClient1 = await makeClientWithProperty()
                const [ticket1] = await createTestTicket(userClient1, userClient1.organization, userClient1.property)
                const [ticketComment] = await createTestTicketComment(userClient1, ticket1, userClient1.user)
                await createTestTicketCommentFile(userClient1, userClient1.organization, ticket1, ticketComment)

                const objs = await TicketCommentFile.getAll(adminClient, {})
                expect(objs.length).toBeGreaterThan(0)
            })

            test('cannot be read by anonymous', async () => {
                const anonymous = await makeClient()

                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                const [ticketComment] = await createTestTicketComment(client, ticket, client.user)
                await createTestTicketCommentFile(client, client.organization, ticket, ticketComment)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await TicketCommentFile.getAll(anonymous)
                })
            })

            it('can be read by employee from "from" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, organizationTo, propertyTo } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [ticket] = await createTestTicket(admin, organizationTo, propertyTo)
                const [ticketComment] = await createTestTicketComment(admin, ticket, clientFrom.user)
                await createTestTicketCommentFile(clientFrom, organizationTo, ticket, ticketComment)

                const comments = await TicketComment.getAll(clientFrom)
                expect(comments).toHaveLength(1)
            })

            it('cannot be read by employee from "to" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, clientTo, organizationFrom, propertyFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [ticket] = await createTestTicket(admin, organizationFrom, propertyFrom)
                await createTestTicketComment(admin, ticket, clientFrom.user)

                const [ticketComment] = await createTestTicketComment(clientFrom, ticket, clientFrom.user)
                await createTestTicketCommentFile(clientFrom, organizationFrom, ticket, ticketComment)

                const comments = await TicketComment.getAll(clientTo)
                expect(comments).toHaveLength(0)
            })
        })

        describe('update', () => {
            it('can be updated by user, who has created it and has "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)

                const [ticketComment] = await createTestTicketComment(userClient, ticket, userClient.user)
                const [ticketCommentFile] = await createTestTicketCommentFile(userClient, organization, ticket, ticketComment)

                const payload = {
                    content: faker.random.alphaNumeric(10),
                }

                const [objUpdated, attrs] = await updateTestTicketCommentFile(userClient, objCreated.id, payload)

            })

            it('cannot be updated by user, who has created it, but does not have "canManageTicketComments" ability', async () => {
                const adminClient = await makeLoggedInAdminClient()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [organization] = await createTestOrganization(adminClient)
                const [property] = await createTestProperty(adminClient, organization)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageTickets: true,
                    canManageTicketComments: false,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [ticket] = await createTestTicket(userClient, organization, property)

                const [objCreated] = await createTestTicketComment(adminClient, ticket, userClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTicketComment(userClient, objCreated.id)
                })
            })

            it('cannot be updated by user, who has not created it', async () => {
                const userClient1 = await makeClientWithProperty()
                const userClient2 = await makeClientWithProperty()

                const [ticket1] = await createTestTicket(userClient1, userClient1.organization, userClient1.property)
                const [ticket2] = await createTestTicket(userClient2, userClient2.organization, userClient2.property)

                await createTestTicketComment(userClient1, ticket1, userClient1.user)
                const [commentByOther] = await createTestTicketComment(userClient2, ticket2, userClient2.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTicketComment(userClient1, commentByOther.id)
                })
            })

            it('can be updated by admin', async () => {
                const adminClient = await makeLoggedInAdminClient()

                const userClient = await makeClientWithProperty()
                const [ticket] = await createTestTicket(userClient, userClient.organization, userClient.property)
                const [objCreated] = await createTestTicketComment(userClient, ticket, userClient.user)

                const payload = {
                    content: faker.random.alphaNumeric(10),
                }

                const [objUpdated, attrs] = await updateTestTicketComment(adminClient, objCreated.id, payload)

                expect(objUpdated.id).toEqual(objCreated.id)
                expect(objUpdated.dv).toEqual(1)
                expect(objUpdated.sender).toEqual(attrs.sender)
                expect(objUpdated.v).toEqual(2)
                expect(objUpdated.newId).toEqual(null)
                expect(objUpdated.deletedAt).toEqual(null)
                expect(objUpdated.createdBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(objUpdated.createdAt).toMatch(DATETIME_RE)
                expect(objUpdated.updatedAt).toMatch(DATETIME_RE)
                expect(objUpdated.updatedAt).not.toEqual(objUpdated.createdAt)
                expect(objUpdated.content).not.toEqual(objCreated.content)
                expect(objUpdated.user.id).toMatch(userClient.user.id)
            })

            it('cannot be updated by anonymous', async () => {
                const anonymousClient = await makeClient()

                const client = await makeClientWithProperty()
                const [ticket] = await createTestTicket(client, client.organization, client.property)
                const [obj] = await createTestTicketComment(client, ticket, client.user)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestTicketComment(anonymousClient, obj.id)
                })
            })

            it('can be updated by employee from "from" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, propertyTo, organizationTo, organizationFrom, employeeFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                    canManageTickets: true,
                })
                await updateTestOrganizationEmployee(admin, employeeFrom.id, {
                    role: { connect: { id: role.id } },
                })
                const [ticket] = await createTestTicket(admin, organizationTo, propertyTo)
                const [comment] = await createTestTicketComment(admin, ticket, clientFrom.user)
                const payload = {
                    content: faker.random.alphaNumeric(10),
                }
                const [commentUpdated] = await updateTestTicketComment(clientFrom, comment.id, payload)

                expect(commentUpdated.id).toEqual(comment.id)
                expect(commentUpdated.content).toEqual(payload.content)
            })

            it('cannot be updated by employee from "to" relation organization', async () => {
                const admin = await makeLoggedInAdminClient()
                const { clientFrom, clientTo, organizationFrom, propertyFrom, employeeFrom } = await createTestOrganizationWithAccessToAnotherOrganization()
                const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                    canManageTickets: true,
                })
                await updateTestOrganizationEmployee(admin, employeeFrom.id, {
                    role: { connect: { id: role.id } },
                })
                const [ticket] = await createTestTicket(admin, organizationFrom, propertyFrom)
                const [comment] = await createTestTicketComment(admin, ticket, clientFrom.user)
                const payload = {
                    content: faker.random.alphaNumeric(10),
                }

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestTicketComment(clientTo, comment.id, payload)
                })
            })
        })

    })

    describe('resident', () => {

    })


})
