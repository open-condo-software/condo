/**
 * Generated by `createschema ticket.TicketHintProperty 'organization:Relationship:Organization:CASCADE;ticketHint:Relationship:TicketHint:CASCADE; property:Relationship:Property:SET_NULL;'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowInternalError,
} = require('@condo/domains/common/utils/testSchema')

const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

const { TicketHintProperty, createTestTicketHintProperty, updateTestTicketHintProperty, createTestTicketHint, updateTestUserTicketCommentReadTime } = require('@condo/domains/ticket/utils/testSchema')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { UNIQUE_CONSTRAINT_ERROR } = require('@condo/domains/common/constants/errors')

describe('TicketHintProperty', () => {
    describe('CRUD tests', () => {
        describe('create', () => {
            describe('admin', () => {
                it('admin can create TicketHintProperty', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const [organization] = await createTestOrganization(admin)
                    const [property] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(admin, organization)

                    const [obj] = await createTestTicketHintProperty(admin, organization, ticketHint, property)

                    expect(obj.id).toMatch(UUID_RE)
                })
            })

            describe('user', () => {
                it('can create TicketHintProperty in the organization in which he is an employee with "canManageTicketHints" is true', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                        canManageTicketHints: true,
                    })
                    await createTestOrganizationEmployee(admin, organization, user.user, role)

                    const [property] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(user, organization, {})

                    const [obj] = await createTestTicketHintProperty(user, organization, ticketHint, property)

                    expect(obj.id).toMatch(UUID_RE)
                })

                it('cannot create TicketHintProperty in the organization in which he is not an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)
                    const [property] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(admin, organization)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestTicketHintProperty(user, organization, ticketHint, property)
                    })
                })

                it('cannot create TicketHintProperty in the organization in which he is an employee with "canManageTicketHints" is false', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                    await createTestOrganizationEmployee(admin, organization, user.user, role)

                    const [property] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(admin, organization)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestTicketHintProperty(user, organization, ticketHint, property)
                    })
                })
            })

            describe('anonymous', function () {
                it('anonymous can\'t create TicketHintProperty', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const client = await makeClient()

                    const [organization] = await createTestOrganization(admin)
                    const [property] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(admin, organization)

                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await createTestTicketHintProperty(client, organization, ticketHint, property)
                    })
                })
            })
        })

        describe('update', () => {
            describe('admin', () => {
                it('admin can update TicketHintProperty', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const [organization] = await createTestOrganization(admin)
                    const [property1] = await createTestProperty(admin, organization)
                    const [property2] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(admin, organization)

                    const [objCreated] = await createTestTicketHintProperty(admin, organization, ticketHint, property1)

                    expect(objCreated.property.id).toEqual(property1.id)

                    const [obj] = await updateTestTicketHintProperty(admin, objCreated.id, {
                        property: { connect: { id: property2.id } },
                    })

                    expect(obj.property.id).toEqual(property2.id)
                })
            })

            describe('user', () => {
                it('can update TicketHintProperty in the organization in which he is an employee with "canManageTicketHints" is true', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                        canManageTicketHints: true,
                    })
                    await createTestOrganizationEmployee(admin, organization, user.user, role)

                    const [property1] = await createTestProperty(admin, organization)
                    const [property2] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(user, organization, {})

                    const [objCreated] = await createTestTicketHintProperty(user, organization, ticketHint, property1)

                    expect(objCreated.property.id).toEqual(property1.id)

                    const [obj] = await updateTestTicketHintProperty(user, objCreated.id, {
                        property: { connect: { id: property2.id } },
                    })

                    expect(obj.property.id).toEqual(property2.id)
                })

                it('cannot update TicketHintProperty in the organization in which he is an employee with "canManageTicketHints" is false', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                    await createTestOrganizationEmployee(admin, organization, user.user, role)

                    const [property1] = await createTestProperty(admin, organization)
                    const [property2] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(admin, organization, {})

                    const [objCreated] = await createTestTicketHintProperty(admin, organization, ticketHint, property1)

                    expect(objCreated.property.id).toEqual(property1.id)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestTicketHintProperty(user, objCreated.id, {
                            property: { connect: { id: property2.id } },
                        })
                    })
                })
            })

            describe('anonymous', () => {
                it('anonymous can\'t update TicketHintProperty', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const client = await makeClient()

                    const [organization] = await createTestOrganization(admin)
                    const [property1] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(admin, organization)

                    const [objCreated] = await createTestTicketHintProperty(admin, organization, ticketHint, property1)

                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await updateTestTicketHintProperty(client, objCreated.id)
                    })
                })
            })
        })

        describe('read', () => {
            describe('admin', () => {
                it('admin can read TicketHintProperty', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const [organization] = await createTestOrganization(admin)
                    const [property] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(admin, organization)

                    const [obj] = await createTestTicketHintProperty(admin, organization, ticketHint, property)

                    const objs = await TicketHintProperty.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                    expect(objs.length).toBeGreaterThanOrEqual(1)
                    expect(objs).toEqual(expect.arrayContaining([
                        expect.objectContaining({
                            id: obj.id,
                        }),
                    ]))
                })
            })

            describe('user', async () => {
                it('can read TicketHintProperty in the organization in which he is an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                        canManageTicketHints: true,
                    })
                    await createTestOrganizationEmployee(admin, organization, user.user, role)

                    const [property] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(user, organization, {})

                    const [obj] = await createTestTicketHintProperty(user, organization, ticketHint, property)

                    const objs = await TicketHintProperty.getAll(user, {}, { sortBy: ['updatedAt_DESC'] })

                    expect(objs).toHaveLength(1)
                    expect(objs[0]).toMatchObject({
                        id: obj.id,
                    })
                })

                it('cannot read TicketHintProperty in the organization in which he is not an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)

                    const [property] = await createTestProperty(admin, organization)
                    const [ticketHint] = await createTestTicketHint(admin, organization, {})

                    await createTestTicketHintProperty(admin, organization, ticketHint, property)

                    const objs = await TicketHintProperty.getAll(user, {}, { sortBy: ['updatedAt_DESC'] })

                    expect(objs).toHaveLength(0)
                })
            })

            describe('anonymous', () => {
                it('anonymous can\'t read TicketHintProperty', async () => {
                    const client = await makeClient()

                    await expectToThrowAuthenticationErrorToObjects(async () => {
                        await TicketHintProperty.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                    })
                })
            })
        })
    })

    describe('Validation tests', () => {
        it('uniq ticketHint and property constraint', async () => {
            const admin = await makeLoggedInAdminClient()

            const [organization] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization)
            const [ticketHint] = await createTestTicketHint(admin, organization)

            await createTestTicketHintProperty(admin, organization, ticketHint, property)

            await expectToThrowInternalError(async () => {
                await createTestTicketHintProperty(admin, organization, ticketHint, property)
            }, `${UNIQUE_CONSTRAINT_ERROR} "unique_ticketHint_and_property"`)
        })
    })
})
