/**
 * Generated by `createschema ticket.TicketAutoAssignment 'assignee:Relationship:OrganizationEmployee:SET_NULL;executor:Relationship:OrganizationEmployee:SET_NULL;classifier:Relationship:TicketClassifier:CASCADE;'`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getByCondition } = require('@open-condo/keystone/schema')

const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const access = require('@condo/domains/ticket/access/TicketAutoAssignment')

const ERRORS = {
    ASSIGNEE_NOT_FOUND: {
        code: BAD_USER_INPUT,
        type: 'ASSIGNEE_NOT_FOUND',
        messageForUser: 'api.ticket.TicketAutoAssignment.error.ASSIGNEE_NOT_FOUND',
        message: 'There is no such employee (assignee) in the organization',
    },
    EXECUTOR_NOT_FOUND: {
        code: BAD_USER_INPUT,
        type: 'EXECUTOR_NOT_FOUND',
        messageForUser: 'api.ticket.TicketAutoAssignment.error.EXECUTOR_NOT_FOUND',
        message: 'There is no such employee (executor) in the organization',
    },
}

const TicketAutoAssignment = new GQLListSchema('TicketAutoAssignment', {
    schemaDoc: 'This schema helps decides who should be assigned to ticket as executor and assignee',
    fields: {

        organization: ORGANIZATION_OWNED_FIELD,

        assignee: {
            schemaDoc: 'An employee who will be appointed as assignee of ticket. ' +
                'If "null", then the field will remain empty and dispatcher will have to fill it in independently in UI',
            type: 'Relationship',
            ref: 'OrganizationEmployee',
            isRequired: false,
            knexOptions: { isNotNullable: false }, // Required relationship only!
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        executor: {
            schemaDoc: 'An employee who will be appointed as executor of ticket' +
                'If "null", then the field will remain empty and dispatcher will have to fill it in independently in UI',
            type: 'Relationship',
            ref: 'OrganizationEmployee',
            isRequired: false,
            knexOptions: { isNotNullable: false }, // Required relationship only!
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        classifier: {
            schemaDoc: 'Ticket classifier',
            type: 'Relationship',
            ref: 'TicketClassifier',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

    },
    hooks: {
        validateInput: async ({ resolvedData, context, existingItem }) => {
            const newItem = { ...existingItem, ...resolvedData }

            if (newItem.assignee) {
                const assignee = await getByCondition('OrganizationEmployee', {
                    id: newItem.assignee,
                    deletedAt: null,
                    organization: { id: newItem.organization, deletedAt: null },
                })
                if (!assignee) throw new GQLError(ERRORS.ASSIGNEE_NOT_FOUND, context)
            }

            if (newItem.executor) {
                const executor = await getByCondition('OrganizationEmployee', {
                    id: newItem.executor,
                    deletedAt: null,
                    organization: { id: newItem.organization, deletedAt: null },
                })
                if (!executor) throw new GQLError(ERRORS.EXECUTOR_NOT_FOUND, context)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization', 'classifier'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'ticket_auto_assignment_unique_organization_classifier',
            },
        ],
    },
    access: {
        read: access.canReadTicketAutoAssignments,
        create: access.canManageTicketAutoAssignments,
        update: access.canManageTicketAutoAssignments,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TicketAutoAssignment,
    ERRORS,
}
