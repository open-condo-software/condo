/**
 * Generated by `createschema ticket.TicketFile 'organization:Text;file?:File;ticket?:Relationship:Ticket:SET_NULL;'`
 */

const { Relationship, File } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/ticket/access/TicketFile')
const { ORGANIZATION_OWNED_FIELD } = require('../../../schema/_common')

const FileAdapter = require('@condo/domains/common/utils/fileAdapter')

const TICKET_FILE_FOLDER_NAME = 'ticket'
const Adapter = new FileAdapter(TICKET_FILE_FOLDER_NAME)

// TODO(zuch): find a way to upload images in jest tests
// and make file field required
const TicketFile = new GQLListSchema('TicketFile', {
    schemaDoc: 'File attached to the ticket',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,
        organization: ORGANIZATION_OWNED_FIELD,
        file: {
            schemaDoc: 'File object with meta information and publicUrl',
            type: File,
            adapter: Adapter,
            isRequired: false,
        },
        ticket: {
            schemaDoc: 'Link to ticket',
            type: Relationship,
            ref: 'Ticket',
            many: false,
            isRequired: false,
            knexOptions: { isNotNullable: false }, // ticketFile can be without ticket on create (temporary)
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },
    },
    hooks: {
        afterChange: async ({ updatedItem, listKey }) => {
            if (updatedItem) {
                const { id, file } = updatedItem
                if (file) {
                    const { filename } = file
                    const key = `${TICKET_FILE_FOLDER_NAME}/${filename}`
                    // OBS will lowercase all keys from meta
                    const metaToSet = {
                        listkey: listKey,                    
                        id,
                    }
                    await Adapter.acl.setMeta(key, metaToSet)
                }
            }
        },
        afterDelete: async ({ existingItem }) => {
            if (existingItem.file) {
                await Adapter.delete(existingItem.file)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadTicketFiles,
        create: access.canManageTicketFiles,
        update: access.canManageTicketFiles,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TicketFile,
}
