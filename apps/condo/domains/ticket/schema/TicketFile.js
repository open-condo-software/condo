/**
 * Generated by `createschema ticket.TicketFile 'file:File;ticket:Relationship:Ticket:PROTECT;name:Text;'`
 */

const { Text, Relationship, File } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/ticket/access/TicketFile')
const { SberCloudFileAdapter } = require('@condo/domains/common/utils/sberCloudFileAdapter')

const fileAdapter = new SberCloudFileAdapter('ticket')


const TicketFile = new GQLListSchema('TicketFile', {
    schemaDoc: 'File attached to the ticket',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,
        file: {
            schemaDoc: 'File object with meta information and publicUrl',
            type: File,
            adapter: fileAdapter,
            isRequired: true,
        },
        ticket: {
            schemaDoc: 'Link to ticket',
            type: Relationship,
            ref: 'Ticket.files',
            many: false,
            isRequired: false,
            knexOptions: { isNotNullable: false }, // Maybe ticketFile without ticket connection on create
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },
    },
    hooks: {
        afterDelete: async ({ existingItem }) => {
            if (existingItem.file) {
                await fileAdapter.delete(existingItem.file)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadTicketFiles,
        create: access.canManageTicketFiles,
        update: access.canManageTicketFiles,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TicketFile,
}
