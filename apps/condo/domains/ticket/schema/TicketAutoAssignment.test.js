/**
 * Generated by `createschema ticket.TicketAutoAssignment 'assignee:Relationship:OrganizationEmployee:SET_NULL;executor:Relationship:OrganizationEmployee:SET_NULL;classifier:Relationship:TicketClassifier:CASCADE;'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor, expectValuesOfCommonFields } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects,
} = require('@open-condo/keystone/test.utils')

const { TicketAutoAssignment, createTestTicketAutoAssignment, updateTestTicketAutoAssignment } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


describe('TicketAutoAssignment', () => {

    let admin, support, employeeWithPermission, employeeWithoutPermission, user, anonymous,
        ticketAutoAssignment

    beforeAll(async () => {
        // const admin = await
    })


    describe('Accesses', () => {
        describe('Admin', () => {
            test('can create', async () => {

            })

            test('can read', async () => {

            })

            test('can update', async () => {

            })

            test('can soft-delete', async () => {

            })

            test('cannot hard-delete', async () => {

            })
        })

        describe('Support', () => {
            test('can create', async () => {

            })

            test('can read', async () => {

            })

            test('can update', async () => {

            })

            test('can soft-delete', async () => {

            })

            test('cannot hard-delete', async () => {

            })
        })

        describe('Employee', () => {
            test('can create', async () => {

            })

            test('can read', async () => {
                describe('with permission canManageTickets', () => {

                })

                describe('without permission canManageTickets', () => {

                })
            })

            test('can update', async () => {

            })

            test('can soft-delete', async () => {

            })

            test('cannot hard-delete', async () => {

            })
        })

        describe('User', () => {
            test('can create', async () => {

            })

            test('can read', async () => {

            })

            test('can update', async () => {

            })

            test('can soft-delete', async () => {

            })

            test('cannot hard-delete', async () => {

            })
        })

        describe('Anonymous', () => {
            test('can create', async () => {

            })

            test('can read', async () => {

            })

            test('can update', async () => {

            })

            test('can soft-delete', async () => {

            })

            test('cannot hard-delete', async () => {

            })
        })
    })

    describe('Validations', () => {
        test('should be throw error if assignee or executor are not from organization', async () => {

        })

        test('should be create record if assignee and executor are from organization', async () => {

        })
    })
})
