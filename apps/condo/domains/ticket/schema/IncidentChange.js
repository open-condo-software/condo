/**
 * Generated by `createschema ticket.IncidentChange 'incident:Relationship:Incident:CASCADE;'`
 */

const { GQLListSchema } = require('@open-condo/keystone/schema')
const { versioned, uuided, tracked, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/ticket/access/IncidentChange')
const {
    generateChangeTrackableFieldsFrom,
    buildSetOfFieldsToTrackFrom,
} = require('../../common/utils/serverSchema/changeTrackable')
const { Incident } = require('./Incident')
const { OMIT_INCIDENT_CHANGE_TRACKABLE_FIELDS } = require('../constants')
const {
    incidentChangeDisplayNameResolversForSingleRelations,
    incidentRelatedManyToManyResolvers,
} = require('../utils/serverSchema/IncidentChange')


const keysOfLocalizedTextFields = new Map()

// todo(doma-2567) add tests
const IncidentChange = new GQLListSchema('IncidentChange', {
    schemaDoc: 'Incremental changes of Incident',
    fields: {

        incident: {
            schemaDoc: 'Related incident, whose change is logged in this entity',
            type: 'Relationship',
            ref: 'Incident',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        ...generateChangeTrackableFieldsFrom(
            buildSetOfFieldsToTrackFrom(Incident.schema, { except: OMIT_INCIDENT_CHANGE_TRACKABLE_FIELDS }),
            incidentChangeDisplayNameResolversForSingleRelations,
            incidentRelatedManyToManyResolvers,
            keysOfLocalizedTextFields,
        ),

    },
    plugins: [uuided(), versioned(), tracked(), dvAndSender()],
    access: {
        read: access.canReadIncidentChanges,
        create: access.canManageIncidentChanges,
        update: access.canManageIncidentChanges,
        delete: false,
        auth: true,
    },
})

module.exports = {
    IncidentChange,
}
