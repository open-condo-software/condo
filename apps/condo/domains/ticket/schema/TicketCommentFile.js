/**
 * Generated by `createschema ticket.TicketCommentFile 'organization:Relationship:Organization:CASCADE;file?:File;ticketComment?:Relationship:TicketComment:SET_NULL'`
 */

const { Relationship, File } = require('@keystonejs/fields')
const { GQLListSchema, getById } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/ticket/access/TicketCommentFile')
const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const get = require('lodash/get')
const { TicketComment } = require('../utils/serverSchema')
const uniqBy = require('lodash/uniqBy')
const { omitBy } = require('lodash')

const TICKET_COMMENT_FILE_FOLDER_NAME = 'ticketComment'
const Adapter = new FileAdapter(TICKET_COMMENT_FILE_FOLDER_NAME)

const TicketCommentFile = new GQLListSchema('TicketCommentFile', {
    schemaDoc: 'File attached to the ticket comment',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,
        organization: ORGANIZATION_OWNED_FIELD,

        file: {
            schemaDoc: 'File object with meta information and publicUrl',
            type: File,
            adapter: Adapter,
        },

        ticketComment: {
            schemaDoc: 'Link to ticket comment',
            type: Relationship,
            ref: 'TicketComment',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

    },
    hooks: {
        afterChange: async ({ updatedItem, listKey, context }) => {
            if (updatedItem && Adapter.acl) {
                const { id, file } = updatedItem

                if (file) {
                    const { filename, mimetype, originalFilename } = file
                    const key = `${TICKET_COMMENT_FILE_FOLDER_NAME}/${filename}`

                    const metaToSet = {
                        listkey: listKey,
                        id,
                    }
                    await Adapter.acl.setMeta(key, metaToSet)

                    if (updatedItem.ticketComment) {
                        const publicUrl = await Adapter.publicUrl({ filename })
                        const ticketComment = await getById('TicketComment', updatedItem.ticketComment)
                        const fileMeta = { id: updatedItem.id, file: { id, filename, mimetype, originalFilename, publicUrl }  }
                        let ticketCommentMeta = get(ticketComment, 'meta')

                        if (!ticketCommentMeta) {
                            ticketCommentMeta = {
                                files: [fileMeta],
                            }
                        }

                        const files = ticketCommentMeta.files
                        if (updatedItem.deletedAt) {
                            ticketCommentMeta.files = omitBy(files, obj => obj.file.id === id)
                        } else {
                            ticketCommentMeta.files = uniqBy([...files, fileMeta], obj => obj.file.id)
                        }

                        await TicketComment.update(context, ticketComment.id, {
                            meta: ticketCommentMeta,
                        })
                    }
                }
            }
        },
        afterDelete: async ({ existingItem }) => {
            if (existingItem.file) {
                await Adapter.delete(existingItem.file)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadTicketCommentFiles,
        create: access.canManageTicketCommentFiles,
        update: access.canManageTicketCommentFiles,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TicketCommentFile,
}
