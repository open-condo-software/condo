/**
 * Generated by `createschema ticket.TicketCommentFile 'organization:Relationship:Organization:CASCADE;file?:File;ticketComment?:Relationship:TicketComment:SET_NULL'`
 */

const { Relationship } = require('@keystonejs/fields')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { getFileMetaAfterChange } = require('@condo/domains/common/utils/fileAdapter')
const { addOrganizationFieldPlugin } = require('@condo/domains/organization/schema/plugins/addOrganizationFieldPlugin')
const access = require('@condo/domains/ticket/access/TicketCommentFile')

const TICKET_COMMENT_FILE_FOLDER_NAME = 'ticketComment'
const Adapter = new FileAdapter(TICKET_COMMENT_FILE_FOLDER_NAME)
const fileMetaAfterChange = getFileMetaAfterChange(Adapter)

const TicketCommentFile = new GQLListSchema('TicketCommentFile', {
    schemaDoc: 'File attached to the ticket comment',
    fields: {
        file: {
            schemaDoc: 'File object with meta information and publicUrl',
            type: 'File',
            adapter: Adapter,
        },

        ticket: {
            schemaDoc: 'Link to ticket',
            type: Relationship,
            ref: 'Ticket',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        ticketComment: {
            schemaDoc: 'Link to ticket comment',
            type: Relationship,
            ref: 'TicketComment',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

    },
    hooks: {
        afterChange: fileMetaAfterChange,
        afterDelete: async ({ existingItem }) => {
            if (existingItem.file) {
                await Adapter.delete(existingItem.file)
            }
        },
    },
    plugins: [
        addOrganizationFieldPlugin({ fromField: 'ticket' }),
        uuided(),
        versioned(),
        tracked(),
        softDeleted(),
        dvAndSender(),
        historical(),
    ],
    access: {
        read: access.canReadTicketCommentFiles,
        create: access.canManageTicketCommentFiles,
        update: access.canManageTicketCommentFiles,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TicketCommentFile,
}
