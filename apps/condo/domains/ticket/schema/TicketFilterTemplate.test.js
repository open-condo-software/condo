/**
 * Generated by `createschema ticket.TicketFilterTemplate 'name:Text; employee:Relationship:OrganizationEmployee:CASCADE; filters:Json'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@open-condo/keystone/test.utils')
const {
    catchErrorFrom,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowValidationFailureError,
    expectToThrowAuthenticationErrorToObjects,
} = require('@open-condo/keystone/test.utils')

const { createTestOrganization, createTestOrganizationEmployee,
    makeAdminClientWithRegisteredOrganizationWithRoleWithEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const {
    createTestOrganizationEmployeeRole,
    updateTestOrganizationEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const { REVIEW_VALUES } = require('@condo/domains/ticket/constants')
const { FEEDBACK_VALUES_BY_KEY } = require('@condo/domains/ticket/constants/feedback')
const { TicketFilterTemplate, createTestTicketFilterTemplate, updateTestTicketFilterTemplate } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

describe('TicketFilterTemplate', () => {
    describe('Create', () => {
        test('admin: can create TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestTicketFilterTemplate(admin, employee, {})

            expect(filtersTemplate.id).toMatch(UUID_RE)
        })

        test('employee: can create TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestTicketFilterTemplate(user, employee, {})

            expect(filtersTemplate.id).toMatch(UUID_RE)
        })

        test('employee: cannot create TicketFilterTemplate with wrong filter field', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)
            const wrongFieldValue = faker.random.alphaNumeric(5)
            const wrongFilters = {
                wrongField: wrongFieldValue,
            }

            await expectToThrowValidationFailureError(
                async () => await createTestTicketFilterTemplate(user, employee, {
                    fields: wrongFilters,
                }),
                'fields field validation error. JSON not in the correct format - path: msg:must NOT have additional properties',
            )
        })

        test('employee: cannot create TicketFilterTemplate with wrong filter field value', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)
            const wrongFieldValue = faker.lorem.sentence()
            const wrongFilters = {
                number: wrongFieldValue,
            }

            await catchErrorFrom(async () => {
                await createTestTicketFilterTemplate(user, employee, {
                    fields: wrongFilters,
                })
            }, ({ errors }) => {
                expect(errors[0]).toMatchObject({
                    message: expect.stringContaining('Int cannot represent non-integer value'),
                    name: 'GraphQLError',
                    path: ['obj', 'fields', 'number'],
                })
            })
        })

        test('deleted employee: cannot create TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)
            await updateTestOrganizationEmployee(admin, employee.id, {
                deletedAt: 'true',
            })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestTicketFilterTemplate(user, employee, {})
            })
        })

        test('blocked employee: cannot create TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)
            await updateTestOrganizationEmployee(admin, employee.id, {
                isBlocked: true,
            })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestTicketFilterTemplate(user, employee, {})
            })
        })

        test('user: cannot create TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, employeeUser.user, role)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestTicketFilterTemplate(user, employee, {})
            })
        })

        test('anonymous: cannot create TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const anonymous = await makeClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, employeeUser.user, role)

            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestTicketFilterTemplate(anonymous, employee, {})
            })
        })
    })

    describe('Read', () => {
        test('admin: can read TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestTicketFilterTemplate(admin, employee, {})
            const templates = await TicketFilterTemplate.getAll(admin, { id: filtersTemplate.id })

            expect(templates).toHaveLength(1)
            expect(templates[0].id).toEqual(filtersTemplate.id)
        })

        test('employee: can read his TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, { canReadTickets: true })
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestTicketFilterTemplate(user, employee, {})
            const templates = await TicketFilterTemplate.getAll(user, { id: filtersTemplate.id })

            expect(templates).toHaveLength(1)
            expect(templates[0].id).toEqual(filtersTemplate.id)
        })

        test('employee: cannot read not his own TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, user2.user, role)

            const [filtersTemplate] = await createTestTicketFilterTemplate(user1, employee1, {})
            const templates = await TicketFilterTemplate.getAll(user2, { id: filtersTemplate.id })

            expect(templates).toHaveLength(0)
        })

        test('user: cannot read TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()

            const [filtersTemplate] = await createTestTicketFilterTemplate(user1, employee, {})
            const templates = await TicketFilterTemplate.getAll(user2, { id: filtersTemplate.id })

            expect(templates).toHaveLength(0)
        })

        test('anonymous: cannot read TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const anonymous = await makeClient()

            const [filtersTemplate] = await createTestTicketFilterTemplate(user1, employee, {})

            await expectToThrowAuthenticationErrorToObjects(async () => {
                await TicketFilterTemplate.getAll(anonymous, { id: filtersTemplate.id })
            })
        })
    })

    describe('Update', () => {
        test('admin: can update TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestTicketFilterTemplate(admin, employee, {})
            const newTemplateName = faker.random.alphaNumeric(8)
            const [updatedTemplate] = await updateTestTicketFilterTemplate(admin, filtersTemplate.id, {
                name: newTemplateName,
            })

            expect(updatedTemplate.id).toEqual(filtersTemplate.id)
            expect(updatedTemplate.name).toEqual(newTemplateName)
        })

        test('employee: can update his TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestTicketFilterTemplate(user, employee, {})
            const newTemplateName = faker.random.alphaNumeric(8)
            const [updatedTemplate] = await updateTestTicketFilterTemplate(user, filtersTemplate.id, {
                name: newTemplateName,
            })

            expect(updatedTemplate.id).toEqual(filtersTemplate.id)
            expect(updatedTemplate.name).toEqual(newTemplateName)
        })

        test('employee: cannot update not his own TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, user2.user, role)

            const [filtersTemplate] = await createTestTicketFilterTemplate(user1, employee1, {})
            const newTemplateName = faker.random.alphaNumeric(8)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestTicketFilterTemplate(user2, filtersTemplate.id, {
                    name: newTemplateName,
                })
            })
        })

        test('user: cannot update TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()

            const [filtersTemplate] = await createTestTicketFilterTemplate(user1, employee1, {})
            const newTemplateName = faker.random.alphaNumeric(8)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestTicketFilterTemplate(user2, filtersTemplate.id, {
                    name: newTemplateName,
                })
            })
        })

        test('anonymous: cannot update TicketFilterTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const user2 = await makeClient()

            const [filtersTemplate] = await createTestTicketFilterTemplate(user1, employee1, {})
            const newTemplateName = faker.random.alphaNumeric(8)

            await expectToThrowAuthenticationErrorToObj(async () => {
                await updateTestTicketFilterTemplate(user2, filtersTemplate.id, {
                    name: newTemplateName,
                })
            })
        })
    })

    // TODO(DOMA-5833): should remove this describe soon
    describe('auto-set one of the fields if the other is changed (for fields "reviewValue" and "feedbackValue" )', () => {
        test('create', async () => {
            const { userClient, employee } = await makeAdminClientWithRegisteredOrganizationWithRoleWithEmployee()

            const [template1, attrs1] = await createTestTicketFilterTemplate(userClient, employee, {
                fields: {
                    reviewValue: [REVIEW_VALUES.GOOD],
                },
            })
            expect(template1.fields.reviewValue).toEqual(attrs1.fields.reviewValue)
            expect(template1.fields.reviewValue).toEqual(template1.fields.feedbackValue)

            const [template2, attrs2] = await createTestTicketFilterTemplate(userClient, employee, {
                fields: {
                    feedbackValue: [FEEDBACK_VALUES_BY_KEY.GOOD],
                },
            })
            expect(template2.fields.feedbackValue).toEqual(attrs2.fields.feedbackValue)
            expect(template2.fields.feedbackValue).toEqual(template2.fields.reviewValue)
        })

        test('update', async () => {
            const { userClient, employee } = await makeAdminClientWithRegisteredOrganizationWithRoleWithEmployee()

            const [template1] = await createTestTicketFilterTemplate(userClient, employee, {
                fields: {
                    reviewValue: [REVIEW_VALUES.GOOD],
                },
            })
            const [template2] = await createTestTicketFilterTemplate(userClient, employee, {
                fields: {
                    reviewValue: [REVIEW_VALUES.GOOD],
                },
            })
            const [template3] = await createTestTicketFilterTemplate(userClient, employee, {
                fields: {
                    reviewValue: [REVIEW_VALUES.GOOD],
                },
            })

            const [updatedTemplate1, attrs1] = await updateTestTicketFilterTemplate(userClient, template1.id, {
                fields: {
                    reviewValue: [REVIEW_VALUES.BAD],
                },
            })
            expect(updatedTemplate1.fields.reviewValue).toEqual(attrs1.fields.reviewValue)
            expect(updatedTemplate1.fields.reviewValue).toEqual(updatedTemplate1.fields.feedbackValue)

            const [updatedTemplate2, attrs2] = await updateTestTicketFilterTemplate(userClient, template2.id, {
                fields: {
                    feedbackValue: [REVIEW_VALUES.BAD],
                },
            })
            expect(updatedTemplate2.fields.feedbackValue).toEqual(attrs2.fields.feedbackValue)
            expect(updatedTemplate2.fields.feedbackValue).toEqual(updatedTemplate2.fields.reviewValue)

            const [updatedTemplate3, attrs3] = await updateTestTicketFilterTemplate(userClient, template3.id, {
                fields: {
                    feedbackValue: [FEEDBACK_VALUES_BY_KEY.GOOD, FEEDBACK_VALUES_BY_KEY.BAD],
                    reviewValue: [REVIEW_VALUES.BAD],
                },
            })
            expect(updatedTemplate3.fields.feedbackValue).toEqual(attrs3.fields.feedbackValue)
            expect(updatedTemplate3.fields.feedbackValue).toEqual(updatedTemplate3.fields.reviewValue)
        })
    })
})
