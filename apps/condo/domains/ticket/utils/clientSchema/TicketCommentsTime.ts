/**
 * Generated by `createschema ticket.TicketCommentsTime 'organization:Relationship:Organization:CASCADE; ticket:Relationship:Ticket:CASCADE; lastCommentAt:DateTimeUtc; lastResidentCommentAt:DateTimeUtc;'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { TicketCommentsTime as TicketCommentsTimeGQL } from '@condo/domains/ticket/gql'
import { TicketCommentsTime, TicketCommentsTimeUpdateInput, QueryAllTicketCommentsTimesArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'organization', 'ticket', 'lastCommentAt', 'lastResidentCommentAt']
const RELATIONS = ['organization', 'ticket']

export interface ITicketCommentsTimeUIState extends TicketCommentsTime {
    id: string
    // TODO(codegen): write ITicketCommentsTimeUIState or extends it from
}

function convertToUIState (item: TicketCommentsTime): ITicketCommentsTimeUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as ITicketCommentsTimeUIState
}

export interface ITicketCommentsTimeFormState {
    id?: undefined
    // TODO(codegen): write ITicketCommentsTimeUIFormState or extends it from
}

function convertToUIFormState (state: ITicketCommentsTimeUIState): ITicketCommentsTimeFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as ITicketCommentsTimeFormState
}

function convertToGQLInput (state: ITicketCommentsTimeFormState): TicketCommentsTimeUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<TicketCommentsTime, TicketCommentsTimeUpdateInput, ITicketCommentsTimeFormState, ITicketCommentsTimeUIState, QueryAllTicketCommentsTimesArgs>(TicketCommentsTimeGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
