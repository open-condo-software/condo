/**
 * Generated by `createschema ticket.TicketCommentFile 'organization:Relationship:Organization:CASCADE;file?:File;ticketComment?:Relationship:TicketComment:SET_NULL'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'
import { generateNewReactHooks } from '@condo/domains/common/utils/codegeneration/new.generate.hooks'

import { TicketCommentFile as TicketCommentFileGQL } from '@condo/domains/ticket/gql'
import {
    TicketCommentFile,
    TicketCommentFileCreateInput,
    TicketCommentFileUpdateInput,
    QueryAllTicketCommentFilesArgs,
    File,
    Organization, TicketComment, Ticket,
} from '@app/condo/schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'organization', 'file', 'ticketComment', 'ticket']
const RELATIONS = ['organization', 'ticketComment', 'ticket']

export interface ITicketCommentFileUIState extends TicketCommentFile {
    id: string
    file: File
    organization?: Organization
    ticket?: Ticket
    ticketComment?: TicketComment
}

function convertToUIState (item: TicketCommentFile): ITicketCommentFileUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as ITicketCommentFileUIState
}

export interface ITicketCommentFileFormState {
    id?: undefined
    file?: File
    organization?: Organization
    ticketComment?: TicketComment
}

function convertToUIFormState (state: ITicketCommentFileUIState): ITicketCommentFileFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as ITicketCommentFileFormState
}

function convertToGQLInput (state: ITicketCommentFileFormState): TicketCommentFileUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    useSoftDelete,
} = generateReactHooks<TicketCommentFile, TicketCommentFileUpdateInput, ITicketCommentFileFormState, ITicketCommentFileUIState, QueryAllTicketCommentFilesArgs>(TicketCommentFileGQL, { convertToGQLInput, convertToUIState })
const {
    useNewObject,
    useNewObjects,
    useNewCreate,
    useNewUpdate,
    useNewSoftDelete,
} = generateNewReactHooks<TicketCommentFile, TicketCommentFileCreateInput, TicketCommentFileUpdateInput, QueryAllTicketCommentFilesArgs>(TicketCommentFileGQL)

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    useSoftDelete,
    convertToUIFormState,
    useNewObject,
    useNewObjects,
    useNewCreate,
    useNewUpdate,
    useNewSoftDelete,
}
