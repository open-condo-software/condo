/**
 * Generated by `createschema ticket.TicketHintProperty 'organization:Relationship:Organization:CASCADE;ticketHint:Relationship:TicketHint:CASCADE; property:Relationship:Property:SET_NULL;'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { TicketHintProperty as TicketHintPropertyGQL } from '@condo/domains/ticket/gql'
import { TicketHintProperty, TicketHintPropertyUpdateInput, QueryAllTicketHintPropertiesArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'organization', 'ticketHint', 'property']
const RELATIONS = ['organization', 'ticketHint', 'property']

export interface ITicketHintPropertyUIState extends TicketHintProperty {
    id: string
    address: string
}

function convertToUIState (item: TicketHintProperty): ITicketHintPropertyUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as ITicketHintPropertyUIState
}

export interface ITicketHintPropertyFormState {
    id?: string
    organization?: string
    ticketHint?: string
    property?: string
}

function convertToUIFormState (state: ITicketHintPropertyUIState): ITicketHintPropertyFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as ITicketHintPropertyFormState
}

function convertToGQLInput (state: ITicketHintPropertyFormState): TicketHintPropertyUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    useSoftDelete,
} = generateReactHooks<TicketHintProperty, TicketHintPropertyUpdateInput, ITicketHintPropertyFormState, ITicketHintPropertyUIState, QueryAllTicketHintPropertiesArgs>(TicketHintPropertyGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    useSoftDelete,
    convertToUIFormState,
}
