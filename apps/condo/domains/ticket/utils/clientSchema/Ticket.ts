/**
 * Generated by `createschema ticket.Ticket organization:Text; statusReopenedCounter:Integer; statusReason?:Text; status:Relationship:TicketStatus:PROTECT; number?:Integer; client?:Relationship:User:SET_NULL; clientName:Text; clientEmail:Text; clientPhone:Text; operator:Relationship:User:SET_NULL; assignee?:Relationship:User:SET_NULL; details:Text; meta?:Json;`
 */

import { get } from 'lodash'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { Ticket as TicketGQL } from '@condo/domains/ticket/gql'
import { Ticket, TicketCreateInput, TicketUpdateInput, QueryAllTicketsArgs } from '@app/condo/schema'
import dayjs, { Dayjs } from 'dayjs'
import { REVIEW_VALUES } from '@condo/domains/ticket/constants'

const RELATIONS = ['status', 'client', 'contact', 'operator', 'assignee', 'organization', 'source', 'property', 'executor', 'related', 'placeClassifier', 'categoryClassifier', 'problemClassifier', 'classifierRule']
const DISCONNECT_ON_NULL = ['problemClassifier', 'executor', 'contact']

export interface ITicketFormState {
    id?: undefined
    organization?: string
    status?: string
    source?: string
    placeClassifier?: string
    categoryClassifier?: string
    problemClassifier?: string
    classifierRule?: string
    canReadByResident?: boolean
    lastResidentCommentAt?: string
    lastAnsweredToResidentAt?: string
    assignee?: string
    operator?: string
    client?: string
    contact?: string
    clientPhone?: string
    clientName?: string
    deadline?: Dayjs
}

type TicketMutationType = TicketUpdateInput | TicketCreateInput

function convertToFormState (ticket: Ticket): ITicketFormState | undefined {
    if (!ticket) return
    const result: ITicketFormState = {}
    const deadline = ticket['deadline']

    for (const key of Object.keys(ticket)) {
        const relationId = get(ticket[key], 'id')
        result[key] = relationId || ticket[key]
    }

    result['deadline'] = deadline && dayjs(deadline)

    return result
}

function formValuesProcessor (formValues: ITicketFormState): TicketMutationType {
    const result: TicketMutationType = {}
    for (const key of Object.keys(formValues)) {
        const isRelation = RELATIONS.includes(key)
        if (isRelation) {
            if (DISCONNECT_ON_NULL.includes(key) && formValues[key] === null) {
                result[key] = { disconnectAll: true }
            } else if (formValues[key]) {
                result[key] = { connect: { id: formValues[key] } }
            }
        } else if (formValues[key]) {
            if (key === 'deadline') {
                result[key] = formValues[key].toISOString()
            } else {
                result[key] = formValues[key]
            }
        }
    }

    return result
}

function getReviewMessageByValue (reviewValue, intl) {
    switch (reviewValue) {
        case REVIEW_VALUES.BAD:
            return intl.formatMessage({ id: 'ticket.reviewValue.bad' })
        case REVIEW_VALUES.GOOD:
            return intl.formatMessage({ id: 'ticket.reviewValue.good' })
    }
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useSoftDelete,
} = generateReactHooks<Ticket, TicketCreateInput, TicketUpdateInput, QueryAllTicketsArgs>(TicketGQL)

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useSoftDelete,
    convertToFormState,
    formValuesProcessor,
    getReviewMessageByValue,
}