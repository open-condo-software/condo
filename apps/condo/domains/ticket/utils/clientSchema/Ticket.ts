/**
 * Generated by `createschema ticket.Ticket organization:Text; statusReopenedCounter:Integer; statusReason?:Text; status:Relationship:TicketStatus:PROTECT; number?:Integer; client?:Relationship:User:SET_NULL; clientName:Text; clientEmail:Text; clientPhone:Text; operator:Relationship:User:SET_NULL; assignee?:Relationship:User:SET_NULL; classifier:Relationship:TicketClassifier:PROTECT; details:Text; meta?:Json;`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { Ticket as TicketGQL } from '@condo/domains/ticket/gql'
import { Ticket, TicketUpdateInput, Organization, QueryAllTicketsArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'organization', 'statusReopenedCounter', 'statusReason', 'status', 'number', 'client', 'clientName', 'clientEmail', 'clientPhone', 'operator', 'assignee', 'classifier', 'details', 'meta', 'source', 'property', 'executor']
const RELATIONS = ['status', 'client', 'operator', 'assignee', 'classifier', 'organization', 'source', 'property', 'executor']

interface ITicketUIState extends Ticket {
    id: string
    organization: Organization
}

function convertToUIState (item: Ticket): ITicketUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as ITicketUIState
}

interface ITicketUIFormState extends Ticket {
    organization?: string
    status?: string
    source?: string
    classifier?: string
    assignee?: string
    operator?: string
    client?: string
}

function convertToUIFormState (state: ITicketUIState): ITicketUIFormState {
    const result = {}
    for (const attr in Object.keys(state)) {
        result[attr] = (RELATIONS.includes(attr)) ? state[attr].id : state[attr]
    }
    return result as ITicketUIFormState
}

function convertToGQLInput (state: ITicketUIFormState): TicketUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr in Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<Ticket, TicketUpdateInput, ITicketUIFormState, ITicketUIState, QueryAllTicketsArgs> (TicketGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
