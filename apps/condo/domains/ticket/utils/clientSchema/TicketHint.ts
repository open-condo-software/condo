/**
 * Generated by `createschema ticket.TicketHint 'organization:Relationship:Organization:CASCADE; name?:Text; properties:Relationship:Property:SET_NULL; content:Text;'`
 */

import { pick, get, map, difference } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { TicketHint as TicketHintGQL } from '@condo/domains/ticket/gql'
import { TicketHint, TicketHintUpdateInput, QueryAllTicketHintsArgs } from '../../../../schema'
import { IDivisionFormState, IDivisionUIState } from '../../../division/utils/clientSchema/Division'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'organization', 'name', 'properties', 'content']
const RELATIONS = ['organization', 'properties']

export interface ITicketHintUIState extends TicketHint {
    id: string
}

function convertToUIState (item: TicketHint): ITicketHintUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as ITicketHintUIState
}

export interface ITicketHintFormState {
    id?: string
    organization?: string
}

function convertToUIFormState (state: ITicketHintUIState): ITicketHintFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        if (RELATIONS.includes(attr)) {
            if (Array.isArray(state[attr])) {
                result[attr] = map(state[attr], 'id')
            } else {
                const attrId = get(state[attr], 'id')
                result[attr] = attrId || state[attr]
            }
        } else {
            result[attr] = state[attr]
        }
    }
    return result as IDivisionFormState
}

type RelateToManyInput = {
    connect?: { id: any }[],
    disconnect?: { id: any }[],
}

function convertToGQLInput (state: ITicketHintFormState, obj?: ITicketHintUIState): TicketHintUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        if (RELATIONS.includes(attr)) {
            if (Array.isArray(state[attr])) {
                const newIds = map(state[attr], item => get(item, 'id') || item)
                if (obj) { // update operation
                    const oldIds = map(obj[attr], item => get(item, 'id') || item)
                    const changes: RelateToManyInput = {}
                    const idsToConnect = difference(newIds, oldIds)
                    if (idsToConnect.length > 0) {
                        changes.connect = map(idsToConnect, id => ({ id }))
                    }
                    const idsToDisconnect = difference(oldIds, newIds)
                    if (idsToDisconnect.length > 0) {
                        changes.disconnect = map(idsToDisconnect, id => ({ id }))
                    }
                    if (Object.keys(changes).length > 0) {
                        result[attr] = changes
                    }
                } else { // create operation
                    if (newIds.length > 0) {
                        result[attr] = {
                            connect: map(newIds, id => ({ id })),
                        }
                    }
                }
            } else {
                const newAttrId = get(state[attr], 'id') || state[attr]
                if (obj) { // update operation
                    const oldAttrId = get(obj[attr], 'id') || obj[attr]
                    if (newAttrId && oldAttrId && newAttrId !== oldAttrId) {
                        result[attr] = { connect: { id: newAttrId } }
                    } else if (!newAttrId) {
                        result[attr] = { disconnectAll: true }
                    }
                } else { // create operation
                    if (newAttrId) {
                        result[attr] = { connect: { id: newAttrId } }
                    }
                }

            }
        } else {
            result[attr] = state[attr]
        }
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    useSoftDelete,
} = generateReactHooks<TicketHint, TicketHintUpdateInput, ITicketHintFormState, ITicketHintUIState, QueryAllTicketHintsArgs>(TicketHintGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    useSoftDelete,
    convertToUIFormState,
}
