/**
 * Generated by `createschema ticket.Ticket organization:Text; statusReopenedCounter:Integer; statusReason?:Text; status:Relationship:TicketStatus:PROTECT; number?:Integer; client?:Relationship:User:SET_NULL; clientName:Text; clientEmail:Text; clientPhone:Text; operator:Relationship:User:SET_NULL; assignee?:Relationship:User:SET_NULL; classifier:Relationship:TicketClassifier:PROTECT; details:Text; meta?:Json;`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */

const faker = require('faker')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { TICKET_STATUS_TYPES } = require('../../constants')
const { generateGQLTestUtils } = require('@condo/domains/common/utils/codegeneration/generate.test.utils')

const { Ticket: TicketGQL } = require('@condo/domains/ticket/gql')
const { TicketStatus: TicketStatusGQL } = require('@condo/domains/ticket/gql')
const { TicketChange: TicketChangeGQL } = require('@condo/domains/ticket/gql')
const { TicketSource: TicketSourceGQL } = require('@condo/domains/ticket/gql')
const { TicketFile: TicketFileGQL } = require('@condo/domains/ticket/gql')
const { TicketClassifier: TicketClassifierGQL } = require('@condo/domains/ticket/gql')
const { TicketComment: TicketCommentGQL } = require('@condo/domains/ticket/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const TICKET_OPEN_STATUS_ID ='6ef3abc4-022f-481b-90fb-8430345ebfc2'
const TICKET_UNKNOWN_CLASSIFIER_ID = '4f4b43d5-0951-425c-9428-945dc6193361'
const TICKET_OTHER_SOURCE_ID = '7da1e3be-06ba-4c9e-bba6-f97f278ac6e4'

const Ticket = generateGQLTestUtils(TicketGQL)
const TicketStatus = generateGQLTestUtils(TicketStatusGQL)
const TicketFile = generateGQLTestUtils(TicketFileGQL)
const TicketChange = generateGQLTestUtils(TicketChangeGQL)
const TicketSource = generateGQLTestUtils(TicketSourceGQL)
const TicketClassifier = generateGQLTestUtils(TicketClassifierGQL)
const TicketComment = generateGQLTestUtils(TicketCommentGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createTestTicket (client, organization, property, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    if (!property || !property.id) throw new Error('no property.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const details = faker.random.alphaNumeric(10)

    const attrs = {
        dv: 1,
        sender,
        details,
        organization: { connect: { id: organization.id } },
        property: { connect: { id: property.id } },
        status: { connect: { id: TICKET_OPEN_STATUS_ID } },
        classifier: { connect: { id: TICKET_UNKNOWN_CLASSIFIER_ID } },
        source: { connect: { id: TICKET_OTHER_SOURCE_ID } },
        ...extraAttrs,
    }
    const obj = await Ticket.create(client, attrs)
    return [obj, attrs]
}

async function updateTestTicket (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await Ticket.update(client, id, attrs)
    return [obj, attrs]
}

async function ticketStatusByType (client) {
    const statuses = await TicketStatus.getAll(client)
    return Object.fromEntries(statuses.map(status => [status.type, status.id]))
}

async function createTestTicketStatus (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const name = faker.random.alphaNumeric(8)
    const type = faker.random.arrayElement(TICKET_STATUS_TYPES)

    const attrs = {
        dv: 1,
        sender,
        name, type,
        ...extraAttrs,
    }
    const obj = await TicketStatus.create(client, attrs)
    return [obj, attrs]
}

async function updateTestTicketStatus (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await TicketStatus.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestTicketChange (client, ticket, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!ticket || !ticket.id) throw new Error('no ticket.id')

    const attrs = {
        dv: 1,
        ticket: { connect: { id: ticket.id } },
        ...extraAttrs,
    }
    const obj = await TicketChange.create(client, attrs)
    return [obj, attrs]
}

async function updateTestTicketChange (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await TicketChange.update(client, id, attrs)
    return [obj, attrs]
}


async function createTestTicketFile (client, organization, ticket, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    const ticketConnection = (ticket && ticket.id) ? { ticket: { connect: { id: ticket.id } } } : {}
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const attrs = {
        dv: 1,
        sender,
        organization: { connect: { id: organization.id } },
        ...ticketConnection,
        ...extraAttrs,
    }
    const obj = await TicketFile.create(client, attrs)
    return [obj, attrs]
}

async function updateTestTicketFile (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await TicketFile.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestTicketClassifier (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const attrs = {
        dv: 1,
        sender,
        name: faker.lorem.word(),
        ...extraAttrs,
    }
    const obj = await TicketClassifier.create(client, attrs)
    return [obj, attrs]
}

async function updateTestTicketClassifier (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await TicketClassifier.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestTicketComment (client, ticket, user, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!ticket || !ticket.id) throw new Error('no ticket.id')
    if (!user || !user.id) throw new Error('no user.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const content = faker.random.alphaNumeric(10)

    const attrs = {
        dv: 1,
        sender,
        ticket: { connect: { id: ticket.id } },
        user: { connect: { id: user.id } },
        content,
        ...extraAttrs,
    }
    const obj = await TicketComment.create(client, attrs)
    return [obj, attrs]
}

async function updateTestTicketComment (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        content: faker.random.alphaNumeric(10),
        ...extraAttrs,
    }
    const obj = await TicketComment.update(client, id, attrs)
    return [obj, attrs]
}

/* AUTOGENERATE MARKER <FACTORY> */

async function makeClientWithTicket () {
    const client = await makeClientWithProperty()
    const [ticket] = await createTestTicket(client, client.organization, client.property)
    client.ticket = ticket
    return client
}

module.exports = {
    Ticket,
    TicketFile,
    TicketChange,
    TicketStatus,
    TicketSource,
    createTestTicket,
    updateTestTicket,
    ticketStatusByType,
    createTestTicketStatus,
    updateTestTicketStatus,
    createTestTicketFile,
    updateTestTicketFile,
    createTestTicketChange,
    updateTestTicketChange,
    makeClientWithTicket,
    TicketClassifier, createTestTicketClassifier, updateTestTicketClassifier,
    TicketComment, createTestTicketComment, updateTestTicketComment,
/* AUTOGENERATE MARKER <EXPORTS> */
}
