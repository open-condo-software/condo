/**
 * Generated by `createschema ticket.UserFavoriteTicket 'user:Relationship:User:CASCADE; ticket:Relationship:Ticket:CASCADE;'`
 */

const get = require('lodash/get')
const isEmpty = require('lodash/isEmpty')
const omit = require('lodash/omit')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const {
    getEmployedOrRelatedOrganizationsByPermissions,
    checkPermissionsInEmployedOrRelatedOrganizations,
} = require('@condo/domains/organization/utils/accessSchema')

async function canReadUserFavoriteTickets ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canReadTickets')

    return {
        user: { id: user.id },
        organization: {
            id_in: permittedOrganizations,
        },
    }
}

async function canManageUserFavoriteTickets ({ authentication: { item: user }, context, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (operation === 'create') {
        const ticketId = get(originalInput, ['ticket', 'connect', 'id'])
        const userId = get(originalInput, ['user', 'connect', 'id'])
        if (user.id !== userId) {
            return false
        }

        const ticket = await getById('Ticket', ticketId)

        if (!ticket || !ticket.organization) return false

        const organizationId = ticket.organization

        return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organizationId, 'canReadTickets')
    } else if (operation === 'update') {
        if (!isEmpty(omit(originalInput, ['deletedAt', 'dv', 'sender']))) {
            return false
        }

        const userFavoriteTicket = await getById('UserFavoriteTicket', itemId)
        return userFavoriteTicket.user === user.id
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadUserFavoriteTickets,
    canManageUserFavoriteTickets,
}
