/**
 * Generated by `createschema ticket.UserFavoriteTicket 'user:Relationship:User:CASCADE; ticket:Relationship:Ticket:CASCADE;'`
 */

const get = require('lodash/get')
const isEmpty = require('lodash/isEmpty')
const omit = require('lodash/omit')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById, find } = require('@open-condo/keystone/schema')

const { queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')

async function canReadUserFavoriteTickets ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return {
        user: { id: user.id },
        organization: {
            OR: [
                queryOrganizationEmployeeFor(user.id, 'canReadTickets'),
                queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadTickets'),
            ],
        },
    }
}

async function canManageUserFavoriteTickets ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (operation === 'create') {
        const ticketId = get(originalInput, ['ticket', 'connect', 'id'])
        const userId = get(originalInput, ['user', 'connect', 'id'])
        if (user.id !== userId) {
            return false
        }

        const ticket = await getById('Ticket', ticketId)
        const organizationId = ticket.organization

        const organizationEmployees = await find('OrganizationEmployee', {
            organization: {
                id: organizationId,
            },
            role: { canReadTickets: true },
            user: { id: user.id },
            deletedAt: null,
        })

        if (!isEmpty(organizationEmployees)) {
            return true
        }

        const organizationLinks = await find('OrganizationLink', {
            from: queryOrganizationEmployeeFor(user.id, 'canReadTickets'),
            to: { id: organizationId },
            deletedAt: null,
        })

        return !isEmpty(organizationLinks)
    } else if (operation === 'update') {
        if (!isEmpty(omit(originalInput, ['deletedAt', 'dv', 'sender']))) {
            return false
        }

        const userFavoriteTicket = await getById('UserFavoriteTicket', itemId)
        return userFavoriteTicket.user === user.id
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadUserFavoriteTickets,
    canManageUserFavoriteTickets,
}
