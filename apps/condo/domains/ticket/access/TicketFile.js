/**
 * Generated by `createschema ticket.TicketFile 'organization:Text;file?:File;ticket?:Relationship:Ticket:SET_NULL;'`
 */
const get = require('lodash/get')
const { queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { getById } = require('@core/keystone/schema')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT, STAFF } = require('@condo/domains/user/constants/common')
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')


async function canReadTicketFiles ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isSupport || item.isAdmin) return {}
        const userId = item.id
        if (item.type === RESIDENT) return { createdBy: { id: userId } }
        return {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(userId),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(userId),
                ],
            },
        }
    }
    return false
}


async function canManageTicketFiles ({ authentication: { item, listKey }, originalInput, operation, itemId }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        const userId = item.id

        if (item.type === RESIDENT) {
            if (operation === 'create') return true
            const ticketFile = await getById('TicketFile', itemId)
            if (!ticketFile) return false
            return ticketFile.createdBy === userId
        }

        if (item.type === STAFF) {
            if (operation === 'create') {
                const organizationId = get(originalInput, ['organization', 'connect', 'id'])
                return await checkPermissionInUserOrganizationOrRelatedOrganization(userId, organizationId, 'canManageTickets')
            }
            const ticketFile = await getById('TicketFile', itemId)
            if (!ticketFile) return false

            const { ticket, createdBy, organization } = ticketFile
            if (!ticket) return createdBy === userId
            if (!organization) return false
            return await checkPermissionInUserOrganizationOrRelatedOrganization(userId, organization, 'canManageTickets')

        }
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketFiles,
    canManageTicketFiles,
}
