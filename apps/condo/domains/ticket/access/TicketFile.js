
/**
 * Generated by `createschema ticket.TicketFile 'file:File;ticket:Relationship:Ticket:SET_NULL;'`
 */
const get = require('lodash/get')
const isEmpty = require('lodash/isEmpty')
const { getById, find } = require('@core/keystone/schema')
const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
 

async function canReadTicketFiles ({ authentication: { item: user } }) {
    if (!user) return false
    if (user.isAdmin) {
        return {}
    }
    return {
        OR: [{  
            ticket: {
                organization: { 
                    employees_some: { 
                        user: { id: user.id },
                    },
                },
            },            
        }],
    }
}

async function canManageTicketFiles ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return false
    if (user.isAdmin) return true
    if (operation === 'create') {
        const organizationEmployees = await find('OrganizationEmployee', { user: { id: user.id } })
        if (isEmpty(organizationEmployees)) {
            return false
        }
        let isAllowed = false
        await Promise.all(organizationEmployees.map(async ({ organization }) => {
            const check = await checkOrganizationPermission(user.id, organization, 'canManageTickets')    
            isAllowed = isAllowed || check
        }))
        return isAllowed
    } else if (operation === 'update') {
        const ticketId = get(originalInput, ['ticket', 'connect', 'id'])
        if (!ticketId) {
            const createdBy = get(originalInput, ['createdBy', 'connect', 'id'])
            if (createdBy === user.id) {
                return true
            }
            return false            
        }
        const ticket = await getById('Ticket', ticketId)
        if (!ticket) {
            return false
        }
        const { organization: organizationIdFromTicket } = ticket
        const canManageTickets = await checkOrganizationPermission(user.id, organizationIdFromTicket, 'canManageTickets')
        if (canManageTickets) {
            return true
        }
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketFiles,
    canManageTicketFiles,
}
