/**
 * Generated by `createschema ticket.TicketFile 'organization:Text;file?:File;ticket?:Relationship:Ticket:SET_NULL;'`
 */
const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const {
    getEmployedOrRelatedOrganizationsByPermissions,
    checkPermissionsInEmployedOrRelatedOrganizations,
} = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT, STAFF } = require('@condo/domains/user/constants/common')


async function canReadTicketFiles ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    if (user.type === RESIDENT) return { createdBy: { id: user.id } }

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canReadTickets')

    return {
        OR: [
            {
                organization: {
                    id_in: permittedOrganizations,
                },
            },
            { createdBy: { id: user.id } },
        ],
    }
}


async function canManageTicketFiles ({ authentication: { item: user }, originalInput, operation, itemId, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type === RESIDENT) {
        if (operation === 'create') return true
        const ticketFile = await getById('TicketFile', itemId)
        if (!ticketFile) return false

        return ticketFile.createdBy === user.id
    }

    if (user.type === STAFF) {
        if (operation === 'create') {
            const ticketId = get(originalInput, ['ticket', 'connect', 'id'], null)

            if (ticketId) {
                const ticket = await getById('Ticket', ticketId)
                const organizationId = get(ticket, 'organization', null)

                if (!organizationId) return false

                return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organizationId, 'canManageTickets')
            }

            return true
        }

        const ticketFile = await getById('TicketFile', itemId)
        if (!ticketFile) return false

        const { createdBy, organization } = ticketFile
        if (!organization) return createdBy === user.id

        return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organization, 'canManageTickets')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketFiles,
    canManageTicketFiles,
}
