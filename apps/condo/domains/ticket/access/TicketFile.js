
/**
 * Generated by `createschema ticket.TicketFile 'organization:Text;file?:File;ticket?:Relationship:Ticket:SET_NULL;'`
 */
const get = require('lodash/get')
const { getById } = require('@core/keystone/schema')
const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')


async function canReadTicketFiles ({ authentication: { item: user }, originalInput }) {
    if (!user) return false
    if (user.isAdmin) {
        return {}
    }
    if (user.type === 'resident') {
        if (user.id === get(originalInput, ['createdBy', 'id'])) {
            return true
        }
    }
    return { organization: { employees_some: { user: { id: user.id }, isBlocked: false } } }
}

async function canManageTicketFiles ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return false
    if (user.isAdmin) return true
    if (operation === 'create') {
        const organizationIdFromTicketFile = get(originalInput, ['organization', 'connect', 'id'])
        // TODO(zuch): need to check connection from resident to organization
        if (user.type === 'resident') {
            return true
        }
        if (!organizationIdFromTicketFile) {
            return false
        }
        const canManageTicketFiles = await checkOrganizationPermission(user.id, organizationIdFromTicketFile, 'canManageTickets')
        return canManageTicketFiles
    } else if (operation === 'update') {
        const ticketFile = await getById('TicketFile', itemId)
        if (!ticketFile) {
            return false
        }
        const { ticket, createdBy, organization } = ticketFile
        if (!ticket) {
            // Temp file that wasn't connected to ticket
            return (createdBy === user.id)
        }
        if (user.type === 'resident') {
            return (createdBy === user.id)
        }
        if (!organization) {
            return false
        }
        const canManageTickets = await checkOrganizationPermission(user.id, organization, 'canManageTickets')
        return canManageTickets
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketFiles,
    canManageTicketFiles,
}
