/**
 * Generated by `createschema ticket.TicketCommentsTime 'organization:Relationship:Organization:CASCADE; ticket:Relationship:Ticket:CASCADE; lastCommentAt:DateTimeUtc; lastResidentCommentAt:DateTimeUtc;'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { getTicketAccessForUser } = require('@condo/domains/ticket/utils/accessSchema')

async function canReadTicketCommentsTimes ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    if (user.type === RESIDENT) {
        return { ticket: { client: { id: user.id }, canReadByResident: true } }
    }

    const ticketAccessObj = await getTicketAccessForUser(user)

    return {
        ticket: {
            ...ticketAccessObj,
        },
    }
}

async function canManageTicketCommentsTimes ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketCommentsTimes,
    canManageTicketCommentsTimes,
}
