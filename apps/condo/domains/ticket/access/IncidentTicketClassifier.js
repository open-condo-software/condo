/**
 * Generated by `createschema ticket.IncidentTicketClassifier 'incident:Relationship:Incident:CASCADE; classifier:Relationship:TicketClassifier:PROTECT;'`
 */

const { get } = require('lodash')

const { isSoftDelete } = require('@open-condo/keystone/access')
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const {
    queryOrganizationEmployeeFor,
    queryOrganizationEmployeeFromRelatedOrganizationFor,
    checkPermissionInUserOrganizationOrRelatedOrganization,
} = require('@condo/domains/organization/utils/accessSchema')


async function canReadIncidentTicketClassifiers ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    return {
        incident: {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(user.id),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(user.id),
                ],
            },
        },
    }
}

async function canManageIncidentTicketClassifiers ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (operation === 'update' && !isSoftDelete(originalInput)) return false
    if (user.isAdmin || user.isSupport) return true

    let incidentId
    if (operation === 'create') {
        incidentId = get(originalInput, 'incident.connect.id')
    } else if (operation === 'update') {
        if (!itemId) return false
        const item = await getById('IncidentTicketClassifier', itemId)
        incidentId = get(item, 'incident', null)
    }
    if (!incidentId) return false
    const incident = await getById('Incident', incidentId)

    const organizationId = get(incident, 'organization', null)
    if (!organizationId) return false

    return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageIncidents')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadIncidentTicketClassifiers,
    canManageIncidentTicketClassifiers,
}
