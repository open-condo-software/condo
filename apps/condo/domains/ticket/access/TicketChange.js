/**
 * Generated by `createschema ticket.TicketChange 'ticket:Relationship:Ticket:CASCADE;'`
 */

const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { checkUserIsRelatedFromOrganizationEmployee } = require('@condo/domains/organization/utils/accessSchema')
const { checkIfUserIsOrganizationEmployee } = require('@condo/domains/organization/utils/accessSchema')

async function canReadTicketChanges ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.isAdmin) return {}
    const userId = user.id
    return {
        ticket: {
            organization: {
                OR: [
                    checkIfUserIsOrganizationEmployee(userId),
                    checkUserIsRelatedFromOrganizationEmployee(userId),
                ],
            },
        },
    }
}

async function canManageTicketChanges ({ authentication: { item: user }, originalInput, operation, itemId }) {
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketChanges,
    canManageTicketChanges,
}
