/**
 * Generated by `createschema ticket.TicketAutoAssignment 'assignee:Relationship:OrganizationEmployee:SET_NULL;executor:Relationship:OrganizationEmployee:SET_NULL;classifier:Relationship:TicketClassifier:CASCADE;'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const {
    queryOrganizationEmployeeFor,
    queryOrganizationEmployeeFromRelatedOrganizationFor,
} = require('@condo/domains/organization/utils/accessSchema')
const { STAFF } = require('@condo/domains/user/constants/common')
const { canDirectlyReadSchemaObjects, canDirectlyManageSchemaObjects } = require('@condo/domains/user/utils/directAccess')


/**
 * TicketAutoAssignment can be read by
 * 1. Admin
 * 2. Support
 * 3. Users with direct access
 * 4. Employee who can manage tickets
 */
async function canReadTicketAutoAssignments ({ authentication: { item: user }, listKey }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    const hasDirectAccess = await canDirectlyReadSchemaObjects(user, listKey)
    if (hasDirectAccess) return {}

    if (user.type === STAFF) {
        return {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(user.id, 'canManageTickets'),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canManageTickets'),
                ],
                deletedAt: null,
            },
        }
    }
    
    return false
}

/**
 * TicketAutoAssignment can be manage by
 * 1. Admin
 * 2. Support
 * 3. Users with direct access
 */
async function canManageTicketAutoAssignments ({ authentication: { item: user }, originalInput, operation, itemId, listKey }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return true

    return await canDirectlyManageSchemaObjects(user, listKey, originalInput, operation)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketAutoAssignments,
    canManageTicketAutoAssignments,
}
