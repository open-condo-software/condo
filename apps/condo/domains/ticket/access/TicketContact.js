/**
 * Generated by `createschema ticket.TicketContact 'property:Relationship:Property:PROTECT; unitName:Text; email:Text; phone:Text; name:Text;' --force`
 */
const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const get = require('lodash/get')
const { TicketContact } = require('../utils/serverSchema')
const { Property } = require('@condo/domains/property/utils/serverSchema')

async function canReadTicketContacts ({ authentication: { item: user } }) {
    if (!user) return false
    if (user.isAdmin) return {}
    return {
        property: { organization: { employees_some: { user: { id: user.id }, isBlocked: false } } },
    }
}

async function canManageTicketContacts ({ authentication: { item: user }, originalInput, operation, itemId, context }) {
    if (!user) return false
    if (user.isAdmin) return true
    if (operation === 'create') {
        const propertyId = get(originalInput, ['property', 'connect', 'id'])
        const [property] = await Property.getAll(context, { id: propertyId })
        if (!property) {
            throw new Error('Cannot determine access right, because related property is not found')
        }
        const organization = get(property, 'organization')
        const canManageTicketContacts = await checkOrganizationPermission(user.id, organization.id, 'canManageTicketContacts')
        return canManageTicketContacts
    } else if (operation === 'update') {
        const [ticketContact] = await TicketContact.getAll(context, { id: itemId })
        if (!ticketContact) {
            return false
        }
        const [property] = await Property.getAll(context, { id: ticketContact.property.id })
        if (!property) {
            throw new Error('Cannot determine access right, because related property is not found')
        }
        const canManageTicketContacts = await checkOrganizationPermission(user.id, property.organization.id, 'canManageTicketContacts')
        return canManageTicketContacts
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketContacts,
    canManageTicketContacts,
}
