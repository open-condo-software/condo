/**
 * Generated by `createschema ticket.Ticket organization:Text; statusReopenedCounter:Integer; statusReason?:Text; status:Relationship:TicketStatus:PROTECT; number?:Integer; client?:Relationship:User:SET_NULL; clientName:Text; clientEmail:Text; clientPhone:Text; operator:Relationship:User:SET_NULL; assignee?:Relationship:User:SET_NULL; details:Text; meta?:Json;`
 */

const get = require('lodash/get')
const omit = require('lodash/omit')
const isEmpty = require('lodash/isEmpty')
const { queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { getById, find } = require('@open-condo/keystone/schema')
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { Resident } = require('@condo/domains/resident/utils/serverSchema')
const { ORGANIZATION_TICKET_VISIBILITY, PROPERTY_TICKET_VISIBILITY, SPECIALIZATION_TICKET_VISIBILITY, ASSIGNED_TICKET_VISIBILITY } = require('@condo/domains/organization/constants/common')
const { Division } = require('@condo/domains/division/utils/serverSchema')
const { OrganizationEmployee } = require('@condo/domains/organization/utils/serverSchema')

async function canReadTickets ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    if (user.type === RESIDENT) {
        const residents = await find('Resident', { user: { id: user.id }, deletedAt: null })

        if (isEmpty(residents)) return false

        return {
            client: { id: user.id },
            canReadByResident: true,
        }
    }

    const userEmployees = await OrganizationEmployee.getAll(context, { user: { id: user.id }, deletedAt: null })

    const employeesWithDivisionTicketVisibility = userEmployees.filter(employee => employee.role.ticketVisibilityType === PROPERTY_TICKET_VISIBILITY)
    const employeesWithSpecializationTicketVisibility = userEmployees.filter(employee => employee.role.ticketVisibilityType === SPECIALIZATION_TICKET_VISIBILITY)

    const employeesWithDivisionAndSpecializationVisibility = [...employeesWithDivisionTicketVisibility, ...employeesWithSpecializationTicketVisibility]
        .map(employee => employee.id)
    const employeeDivisions = await Division.getAll(context, {
        executors_some: { id_in: employeesWithDivisionAndSpecializationVisibility },
        deletedAt: null,
    })

    const employeeDivisionProperties = []
    for (const employeeId of employeesWithDivisionAndSpecializationVisibility) {
        const properties = employeeDivisions
            .filter(division => division.executors.find(executor => executor.id === employeeId))
            .flatMap(division => division.properties.map(property => property.id))

        employeeDivisionProperties.push({ employee: employeeId, properties })
    }

    const organizationTicketVisibilitySearchStatement = []
    const divisionTicketVisibilitySearchStatement = []
    const specializationDivisionTicketVisibilitySearchStatement = []
    const assignedTicketVisibilitySearchStatement = []

    for (const employee of userEmployees) {
        const ticketVisibilityType = employee.role.ticketVisibilityType

        switch (ticketVisibilityType) {
            case ORGANIZATION_TICKET_VISIBILITY: {
                organizationTicketVisibilitySearchStatement.push(employee.organization.id)
                break
            }
            case PROPERTY_TICKET_VISIBILITY: {
                const properties = get(employeeDivisionProperties.find(obj => obj.employee === employee.id), 'properties', [])
                divisionTicketVisibilitySearchStatement.push(...properties)

                break
            }
            case SPECIALIZATION_TICKET_VISIBILITY: {
                const employeeSpecializations = employee.specializations.map(specialization => specialization.id)
                const properties = get(employeeDivisionProperties.find(obj => obj.employee === employee.id), 'properties', [])
                specializationDivisionTicketVisibilitySearchStatement.push({
                    property: properties,
                    category: employeeSpecializations,
                })

                break
            }
            case ASSIGNED_TICKET_VISIBILITY: {
                assignedTicketVisibilitySearchStatement.push(user.id)

                break
            }
        }
    }

    return {
        OR: [
            {
                AND: [
                    { organization: queryOrganizationEmployeeFromRelatedOrganizationFor(user.id) },
                ],
            },
            {
                AND: [
                    { organization: { id_in: organizationTicketVisibilitySearchStatement } },
                ],
            },
            {
                AND: [
                    { property: { id_in: divisionTicketVisibilitySearchStatement } },
                ],
            },
            {
                AND: [
                    {
                        OR: [
                            { assignee: { id_in: assignedTicketVisibilitySearchStatement } },
                            { executor: { id_in: assignedTicketVisibilitySearchStatement } },
                        ],
                    },
                ],
            },
            ...specializationDivisionTicketVisibilitySearchStatement.map(({ property, category }) => ({
                AND: [
                    { property: { id_in: property } },
                    { classifier: { category: { id_in: category } } },
                ],
            })),
        ],
    }
}

async function canManageTickets ({ authentication: { item: user }, operation, itemId, originalInput, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type === RESIDENT) {
        if (operation === 'create') {
            const unitName = get(originalInput, 'unitName', null)
            const propertyId = get(originalInput, ['property', 'connect', 'id'])

            if (!unitName || !propertyId) return false

            const residentsCount = await Resident.count(context, {
                user: { id: user.id },
                property: { id: propertyId, deletedAt: null },
                unitName,
                deletedAt: null,
            })

            return residentsCount > 0
        } else if (operation === 'update') {
            if (!itemId) return false

            const inaccessibleUpdatedFields = omit(originalInput, ['dv', 'sender', 'reviewValue', 'reviewComment'])
            if (!isEmpty(inaccessibleUpdatedFields)) return false

            const ticket = await getById('Ticket', itemId)
            if (!ticket) return false

            return ticket.client === user.id
        }
    } else {
        let organizationId

        if (operation === 'create') {
            organizationId = get(originalInput, ['organization', 'connect', 'id'])
        } else if (operation === 'update') {
            if (!itemId) return false
            const ticket = await getById('Ticket', itemId)
            organizationId = get(ticket, 'organization', null)
        }

        const permission = await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageTickets')
        if (!permission) return false

        const propertyId = get(originalInput, ['property', 'connect', 'id'], null)
        if (propertyId) {
            const property = await getById('Property', propertyId)
            if (!property) return false

            return organizationId === get(property, 'organization')
        }

        return true
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTickets,
    canManageTickets,
}