/**
 * Generated by `createschema ticket.TicketExportTask 'status:Select:processing,completed,error; format:Select:excel; exportedRecordsCount:Integer; totalRecordsCount:Integer; file?:File; meta?:Json'`
 */
const Ajv = require('ajv')
const { get, compact } = require('lodash')
const { throwAuthenticationError } = require('@condo/keystone/apolloErrorFormatter')
const { CANCELLED } = require('@condo/domains/common/constants/export')
const { find } = require('@condo/keystone/schema')
const {
    queryOrganizationEmployeeFor,
    queryOrganizationEmployeeFromRelatedOrganizationFor,
} = require('@condo/domains/organization/utils/accessSchema')

// Only cancelling the task is allowed for user
const ORIGINAL_INPUT_TO_CANCEL_TASK = {
    type: 'object',
    properties: {
        dv: {
            type: 'integer',
        },
        sender: {
            type: 'object',
        },
        status: {
            type: 'string',
            pattern: CANCELLED,
        },
    },
    additionalProperties: false,
    required: ['dv', 'sender', 'status'],
}

const ajv = new Ajv()
const originalInputToCancelTask = ajv.compile(ORIGINAL_INPUT_TO_CANCEL_TASK)

async function canReadTicketExportTasks ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    return { user: { id: user.id } }
}

async function canManageTicketExportTasks ({ authentication: { item: user }, originalInput, operation }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create') {
        // Ideally this check should be in `validateInput`, but Keystone calls access check functions first
        // So, handle this case as not allowed, rather than invalid input (which would logically be more correct)
        if (get(originalInput, ['user', 'connect', 'id']) !== user.id) return false
        const organizationId = get(originalInput, ['where', 'organization', 'id'])
        const organizationIdIn = get(originalInput, ['where', 'organization', 'id_in'])
        const organizationIds = compact([organizationId, ...(organizationIdIn || [])])
        if (organizationIds.length === 0) return false
        const userEmployeeOrganizations = await find('Organization', {
            AND: [
                {
                    id_in: organizationIds,
                },
                {
                    OR: [
                        queryOrganizationEmployeeFor(user.id),
                        queryOrganizationEmployeeFromRelatedOrganizationFor(user.id),
                    ],
                },
            ],
        })
        if (userEmployeeOrganizations.length === organizationIds.length) {
            return true
        }
    } else if (operation === 'update') {
        // TODO(pahaz): security issue! we can update not only own export task!
        if (originalInputToCancelTask(originalInput)) {
            return true
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketExportTasks,
    canManageTicketExportTasks,
}
