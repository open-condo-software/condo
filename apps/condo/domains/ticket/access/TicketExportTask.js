/**
 * Generated by `createschema ticket.TicketExportTask 'status:Select:processing,completed,error; format:Select:excel; exportedRecordsCount:Integer; totalRecordsCount:Integer; file?:File; meta?:Json'`
 */
const Ajv = require('ajv')
const { throwAuthenticationError } = require('@condo/keystone/apolloErrorFormatter')
const { CANCELLED } = require('@condo/domains/common/constants/export')

// Only cancelling the task is allowed for user
const ORIGINAL_INPUT_TO_CANCEL_TASK = {
    type: 'object',
    properties: {
        dv: {
            type: 'integer',
        },
        sender: {
            type: 'object',
        },
        status: {
            type: 'string',
            pattern: CANCELLED,
        },
    },
    additionalProperties: false,
    required: ['dv', 'sender', 'status'],
}

const ajv = new Ajv()
const originalInputToCancelTask = ajv.compile(ORIGINAL_INPUT_TO_CANCEL_TASK)

async function canReadTicketExportTasks ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    return { user: { id: user.id } }
}

async function canManageTicketExportTasks ({ authentication: { item: user }, originalInput, operation }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create') {
        // Ideally this check should be in `validateInput`, but Keystone calls access check functions first
        // So, handle this case as not allowed, rather than invalid input (which would logically be more correct)
        if (!originalInput.user) return false
        if (originalInput.user.connect.id === user.id) {
            return true
        }
    } else if (operation === 'update') {
        if (originalInputToCancelTask(originalInput)) {
            return true
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketExportTasks,
    canManageTicketExportTasks,
}
