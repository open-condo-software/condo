/**
 * Generated by `createschema ticket.Incident 'organization; number; details:Text; status; textForResident:Text; workStart:DateTimeUtc; workFinish:DateTimeUtc; isScheduled:Checkbox; isEmergency:Checkbox; hasAllProperties:Checkbox;'`
 */

const { get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById, getByCondition } = require('@open-condo/keystone/schema')

const {
    queryOrganizationEmployeeFor,
    queryOrganizationEmployeeFromRelatedOrganizationFor,
} = require('../../organization/utils/accessSchema')


async function canReadIncidents ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    return {
        organization: {
            OR: [
                queryOrganizationEmployeeFor(user.id),
                queryOrganizationEmployeeFromRelatedOrganizationFor(user.id),
            ],
            deletedAt: null,
        },
    }
}

async function canManageIncidents ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    let organizationId
    if (operation === 'create') {
        organizationId = get(originalInput, 'organization.connect.id', null)
    } else if (operation === 'update') {
        if (!itemId) return false
        const item = await getById('Incident', itemId)
        organizationId = get(item, 'organization', null)
    }
    if (!organizationId) return false

    const employeeFromOrganization = await getByCondition('OrganizationEmployee', {
        organization: { id: organizationId },
        user: { id: user.id },
        deletedAt: null,
        isBlocked: false,
    })

    const employeeFromOrganizationLink = await getByCondition('OrganizationLink', {
        from: queryOrganizationEmployeeFor(user.id),
        to: { id: organizationId },
    })

    return Boolean(employeeFromOrganization) || Boolean(employeeFromOrganizationLink)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadIncidents,
    canManageIncidents,
}
