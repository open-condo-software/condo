/**
 * Generated by `createschema ticket.TicketCommentFile 'organization:Relationship:Organization:CASCADE;file?:File;ticketComment?:Relationship:TicketComment:SET_NULL'`
 */

const get = require('lodash/get')
const isArray = require('lodash/isArray')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getByCondition, getById } = require('@open-condo/keystone/schema')

const { canReadObjectsAsB2BAppServiceUser, canManageObjectsAsB2BAppServiceUser } = require('@condo/domains/miniapp/utils/b2bAppServiceUserAccess')
const {
    getEmployedOrRelatedOrganizationsByPermissions,
    checkPermissionsInEmployedOrRelatedOrganizations,
} = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { SERVICE } = require('@condo/domains/user/constants/common')

const { RESIDENT_COMMENT_TYPE, ORGANIZATION_COMMENT_TYPE } = require('../constants')


async function canReadTicketCommentFiles (args) {
    const { authentication: { item: user }, context } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    if (user.type === SERVICE) {
        const accessFilter = await canReadObjectsAsB2BAppServiceUser(args)

        if (!accessFilter) return false

        return {
            ...accessFilter,
            ticketComment: { type: ORGANIZATION_COMMENT_TYPE },
        }
    }

    if (user.type === RESIDENT) {
        return {
            OR: [
                {
                    AND: [
                        { ticketComment: { type: RESIDENT_COMMENT_TYPE } },
                        { ticket: { client: { id: user.id }, canReadByResident: true } },
                    ],
                },
                { createdBy: { id: user.id } },
            ],
        }
    }

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canReadTickets')

    return {
        OR: [
            {
                organization: {
                    id_in: permittedOrganizations,
                },
            },
            { createdBy: { id: user.id } },
        ],
    }
}

const checkManageCommentFileAccess = async (args) => {
    const { authentication: { item: user }, operation, originalInput, itemId, context } = args

    if (user.type === SERVICE) {
        const hasAccess = await canManageObjectsAsB2BAppServiceUser(args)
        if (!hasAccess) return false

        if (operation === 'create') {
            const ticketCommentFromOriginalInput = get(originalInput, ['ticketComment', 'connect', 'id'])
            if (!ticketCommentFromOriginalInput) return false

            const ticketComment = await getByCondition('TicketComment', {
                id: ticketCommentFromOriginalInput,
                deletedAt: null,
            })
            if (!ticketComment) return false

            return ticketComment.createdBy === user.id
        } else if (operation === 'update') {
            const ticketCommentFile = await getByCondition('TicketCommentFile', {
                id: itemId,
                deletedAt: null,
            })

            if (!ticketCommentFile) return false

            return ticketCommentFile.createdBy === user.id
        }

        return false
    }

    if (user.type === RESIDENT) {
        if (operation === 'create') {
            const ticketId = get(originalInput, ['ticket', 'connect', 'id'])
            const ticket = await getByCondition('Ticket', { id: ticketId, deletedAt: null })

            return ticket.client === user.id
        } else if (operation === 'update' && itemId) {
            const ticketCommentFile = await getById('TicketCommentFile', itemId)
            if (!ticketCommentFile) return false

            const ticketCommentFromOriginalInput = get(originalInput, ['ticketComment', 'connect', 'id'])
            if (ticketCommentFromOriginalInput) {
                const ticketComment = await getById('TicketComment', ticketCommentFromOriginalInput)

                return ticketCommentFile.createdBy === user.id && ticketComment.createdBy === user.id
            }

            return ticketCommentFile.createdBy === user.id
        }
    } else {
        if (operation === 'create') {
            const ticketId = get(originalInput, ['ticket', 'connect', 'id'], null)

            if (ticketId) {
                const ticket = await getById('Ticket', ticketId)
                const organizationId = get(ticket, 'organization', null)

                if (!organizationId) return false

                return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organizationId, 'canManageTicketComments')
            }

            return true
        }

        const ticketCommentFile = await getById('TicketCommentFile', itemId)
        if (!ticketCommentFile) return false

        const { createdBy, organization } = ticketCommentFile
        if (!organization) return createdBy === user.id

        return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organization, 'canManageTicketComments')
    }

    return false
}

//TODO(DOMA-9337): Get rid of loop with request in bulk requests
async function canManageTicketCommentFiles (args) {
    const { authentication: { item: user }, originalInput, operation } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    const isBulkRequest = isArray(originalInput)

    if (operation === 'update' && isArray(originalInput)) {
        return false
    }

    if (operation === 'create' && isBulkRequest) {
        for (const ticketCommentFileInputData of originalInput) {
            const ticketCommentFileInput = get(ticketCommentFileInputData, 'data')
            const accessToCreateCommentFile = await checkManageCommentFileAccess({ ...args, originalInput: ticketCommentFileInput })

            if (!accessToCreateCommentFile) {
                return false
            }
        }

        return true
    }

    return await checkManageCommentFileAccess(args)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketCommentFiles,
    canManageTicketCommentFiles,
}
