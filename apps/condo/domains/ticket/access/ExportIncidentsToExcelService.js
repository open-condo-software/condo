/**
 * Generated by `createservice ticket.ExportIncidentsToExcelService`
 */
const { uniq, isNil } = require('lodash')
const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const {
    queryOrganizationEmployeeFor,
    queryOrganizationEmployeeFromRelatedOrganizationFor,
} = require('@condo/domains/organization/utils/accessSchema')


async function canExportIncidentsToExcel ({ args: { data: { where } }, authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    const organizationId = get(where, ['organization', 'id'])
    const organizationIdIn = get(where, ['organization', 'id_in'], [])
    const organizationIds = uniq([organizationId, ...organizationIdIn]).filter((value) => !isNil(value))
    if (organizationIds.length < 1) return false

    const userEmployeeOrganizations = await find('Organization', {
        AND: [
            {
                id_in: organizationIds,
            },
            {
                OR: [
                    queryOrganizationEmployeeFor(user.id),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(user.id),
                ],
            },
        ],
    })
    return userEmployeeOrganizations.length === organizationIds.length
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canExportIncidentsToExcel,
}
