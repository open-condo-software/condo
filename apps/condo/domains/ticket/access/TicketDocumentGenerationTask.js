/**
 * Generated by `createschema ticket.TicketDocumentGenerationTask 'where:Json; status:Select:processing,completed,error,cancelled; format:Select:docx; progress:Integer; user:Relationship:User:CASCADE; timeZone:Text; file?:File; documentType:Select:completion; meta?:Json;'`
 */

const { get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { checkPermissionsInEmployedOrRelatedOrganizations } = require('@condo/domains/organization/utils/accessSchema')
const { TICKET_DOCUMENT_GENERATION_TASK_STATUS } = require('@condo/domains/ticket/constants/ticketDocument')
const { STAFF } = require('@condo/domains/user/constants/common')


async function canReadTicketDocumentGenerationTasks ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    if (user.type !== STAFF) return false

    return { user: { id: user.id } }
}

async function canManageTicketDocumentGenerationTasks ({ authentication: { item: user }, originalInput, operation, itemId, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return true

    if (user.type !== STAFF) return false

    if (operation === 'create') {
        if (get(originalInput, 'user.connect.id') !== user.id) return false
        const ticketId = get(originalInput, 'ticket.connect.id')
        if (!ticketId) return false
        const ticket = await getById('Ticket', ticketId)
        if (!ticket || ticket.deletedAt) return false
        const organizationId = get(ticket, 'organization')
        if (!organizationId) return false
        const organization = await getById('Organization', organizationId)
        if (!organization || organization.deletedAt) return false
        return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organization.id, 'canReadTickets')
    } else if (operation === 'update') {
        const item = await getById('TicketDocumentGenerationTask', itemId)
        if (!item || item.deletedAt) return false
        return get(item, 'user') === user.id && get(originalInput, 'status') === TICKET_DOCUMENT_GENERATION_TASK_STATUS.CANCELLED
    }
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketDocumentGenerationTasks,
    canManageTicketDocumentGenerationTasks,
}
