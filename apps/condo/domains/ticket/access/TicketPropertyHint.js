/**
 * Generated by `createschema ticket.TicketPropertyHint 'organization:Relationship:Organization:CASCADE; name?:Text; properties:Relationship:Property:SET_NULL; content:Text;'`
 */
const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const {
    getEmployedOrRelatedOrganizationsByPermissions,
    checkPermissionsInEmployedOrRelatedOrganizations,
} = require('@condo/domains/organization/utils/accessSchema')

async function canReadTicketPropertyHints ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, [])


    return {
        organization: {
            id_in: permittedOrganizations,
        },
    }
}

async function canManageTicketPropertyHints ({ authentication: { item: user }, context, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    let hintOrganizationId

    if (operation === 'create') {
        hintOrganizationId = get(originalInput, ['organization', 'connect', 'id'])
    } else if (operation === 'update') {
        if (!itemId) return false
        hintOrganizationId = get(originalInput, ['organization', 'connect', 'id'])

        if (!hintOrganizationId) {
            const ticketPropertyHint = await getById('TicketPropertyHint', itemId)
            hintOrganizationId = get(ticketPropertyHint, 'organization', null)
        }
    }

    if (!hintOrganizationId) return false

    return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, hintOrganizationId, 'canManageTicketPropertyHints')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketPropertyHints,
    canManageTicketPropertyHints,
}
