/**
 * Generated by `createschema ticket.TicketOrganizationSetting 'organization:Relationship:Organization:CASCADE; defaultDeadline?:Integer; paidDeadline?:Integer; emergencyDeadline?:Integer; warrantyDeadline?:Integer;'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const {
    getEmployedOrRelatedOrganizationsByPermissions,
} = require('@condo/domains/organization/utils/accessSchema')

async function canReadTicketOrganizationSettings ({ authentication: { item: user }, context }) {
    if (!user) throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, [])


    return {
        organization: {
            id_in: permittedOrganizations,
        },
    }
}

async function canManageTicketOrganizationSettings ({ authentication: { item: user }, operation, context }) {
    if (!user) throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (operation === 'create') return false

    if (operation === 'update') {
        const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, [])

        return {
            organization: {
                id_in: permittedOrganizations,
            },
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketOrganizationSettings,
    canManageTicketOrganizationSettings,
}
