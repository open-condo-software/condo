/**
 * Generated by `createschema ticket.UserTicketCommentRead 'user:Relationship:User:CASCADE; ticket:Relationship:Ticket:CASCADE; readResidentCommentAt:DateTimeUtc;'`
 */

const get = require('lodash/get')

const { getById, getByCondition } = require('@core/keystone/schema')

const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')

async function canReadUserTicketCommentReads ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return {
        user: { id: user.id },
    }
}

async function canManageUserTicketCommentReads ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type !== RESIDENT) {
        if (operation === 'create') {
            const ticket = await getById('Ticket', get(originalInput, ['ticket', 'connect', 'id']))
            if (!ticket) return false

            const organizationId = get(ticket, 'organization')
            const organizationEmployee = await getByCondition('OrganizationEmployee', {
                organization: {
                    id: organizationId,
                    OR: [
                        queryOrganizationEmployeeFor(user.id),
                        queryOrganizationEmployeeFromRelatedOrganizationFor(user.id),
                    ],
                },
                user: { id: user.id },
            })

            if (organizationEmployee) return true
        }
        if (operation === 'update' && itemId) {
            const userTicketCommentRead = await getById('UserTicketCommentRead', itemId)

            if (userTicketCommentRead.user === user.id) return true
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadUserTicketCommentReads,
    canManageUserTicketCommentReads,
}
