/**
 * Generated by `createschema ticket.UserTicketCommentReadTime 'user:Relationship:User:CASCADE; ticket:Relationship:Ticket:CASCADE; readResidentCommentAt:DateTimeUtc;'`
 */

const { isEmpty } = require('lodash')
const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById, find } = require('@open-condo/keystone/schema')

const { checkUserEmploymentOrRelationToOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadUserTicketCommentReadTimes ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return {
        user: { id: user.id },
    }
}

async function canManageUserTicketCommentReadTimes ({ authentication: { item: user }, context, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type !== RESIDENT) {
        if (operation === 'create') {
            const ticket = await getById('Ticket', get(originalInput, ['ticket', 'connect', 'id']))
            if (!ticket) return false

            const organizationId = get(ticket, 'organization')

            if (!organizationId) {
                return false
            }

            return await checkUserEmploymentOrRelationToOrganization(context, user, organizationId)
        }
        if (operation === 'update' && itemId) {
            const userTicketCommentReadTime = await getById('UserTicketCommentReadTime', itemId)

            if (userTicketCommentReadTime.user === user.id) return true
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadUserTicketCommentReadTimes,
    canManageUserTicketCommentReadTimes,
}
