/**
 * Generated by `createschema ticket.IncidentExportTask 'status:Select:processing,completed,error; format:Select:excel; exportedRecordsCount:Integer; totalRecordsCount:Integer; file?:File; meta?:Json; where:Json; sortBy:Json; locale:Text; timeZone:Text; user:Relationship:User:CASCADE;'`
 */

const { get, uniq, compact, isEmpty } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { CANCELLED } = require('@condo/domains/common/constants/export')
const { checkUserPermissionsInOrganizations } = require('@condo/domains/organization/utils/accessSchema')


async function canReadIncidentExportTasks ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    return { user: { id: user.id } }
}

async function canManageIncidentExportTasks ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create') {
        if (get(originalInput, ['user', 'connect', 'id']) !== user.id) return false

        const organizationId = get(originalInput, ['where', 'organization', 'id'])
        const organizationIdIn = get(originalInput, ['where', 'organization', 'id_in'], [])
        const organizationIds = uniq(compact([organizationId, ...organizationIdIn]))

        if (isEmpty(organizationIds)) return false

        return await checkUserPermissionsInOrganizations({
            userId: user.id,
            organizationIds,
            permission: 'canReadIncidents',
        })
    } else if (operation === 'update') {
        const task = await getById('IncidentExportTask', itemId)

        if (get(task, 'user') === user.id && get(originalInput, 'status') === CANCELLED) {
            return true
        }
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadIncidentExportTasks,
    canManageIncidentExportTasks,
}
