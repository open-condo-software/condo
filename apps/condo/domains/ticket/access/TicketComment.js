/**
 * Generated by `createschema ticket.TicketComment 'ticket:Relationship:Ticket:CASCADE; user:Relationship:User:CASCADE; content:Text;'`
 */

const get = require('lodash/get')
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')
const { queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { getByCondition } = require('@core/keystone/schema')

async function canReadTicketComments ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false

    if (listKey === USER_SCHEMA_NAME) {
        if (item.isSupport || item.isAdmin) return {}
        const userId = item.id

        return {
            ticket: {
                organization: {
                    OR: [
                        queryOrganizationEmployeeFor(userId),
                        queryOrganizationEmployeeFromRelatedOrganizationFor(userId),
                    ],
                },
            },
        }
    }

    return false
}

async function canManageTicketComments ({ authentication: { item, listKey }, originalInput, operation, itemId }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false

    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        const userId = item.id
        if (operation === 'create') {
            const ticketId = get(originalInput, ['ticket', 'connect', 'id'])
            const ticket = await getByCondition('Ticket', { id: ticketId, deletedAt: null })
            if (!ticket) return false
            const organizationId = get(ticket, 'organization')

            return await checkPermissionInUserOrganizationOrRelatedOrganization(userId, organizationId, 'canManageTicketComments')
        } else if (operation === 'update' && itemId) {
            const comment = await getByCondition('TicketComment', { id: itemId, deletedAt: null })
            if (!comment || comment.user !== userId) return false
            const ticket = await getByCondition('Ticket', { id: comment.ticket, deletedAt: null })
            if (!ticket) return false
            const organizationId = get(ticket, 'organization')

            return await checkPermissionInUserOrganizationOrRelatedOrganization(userId, organizationId, 'canManageTicketComments')
        }

        return false
    }

    return false
}

async function canSetUserField ({ authentication: { item, listKey }, originalInput }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        return get(originalInput, ['user', 'connect', 'id']) === item.id
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketComments,
    canManageTicketComments,
    canSetUserField,
}
