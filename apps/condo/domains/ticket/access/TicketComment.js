/**
 * Generated by `createschema ticket.TicketComment 'ticket:Relationship:Ticket:CASCADE; user:Relationship:User:CASCADE; content:Text;'`
 */

const get = require('lodash/get')
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { getByCondition } = require('@core/keystone/schema')

async function canReadTicketComments ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    
    if (user.isSupport || user.isAdmin) return {}

    return {
        ticket: {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(user.id),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(user.id),
                ],
            },
        },
    }
}

async function canManageTicketComments ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create') {
        const ticketId = get(originalInput, ['ticket', 'connect', 'id'])
        const ticket = await getByCondition('Ticket', { id: ticketId, deletedAt: null })
        if (!ticket) return false
        const organizationId = get(ticket, 'organization')

        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageTicketComments')
    } else if (operation === 'update' && itemId) {
        const comment = await getByCondition('TicketComment', { id: itemId, deletedAt: null })
        if (!comment || comment.user !== user.id) return false
        const ticket = await getByCondition('Ticket', { id: comment.ticket, deletedAt: null })
        if (!ticket) return false
        const organizationId = get(ticket, 'organization')

        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageTicketComments')
    }

    return false
}

async function canSetUserField ({ authentication: { item: user }, originalInput }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    return get(originalInput, ['user', 'connect', 'id']) === user.id
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketComments,
    canManageTicketComments,
    canSetUserField,
}
