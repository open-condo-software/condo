/**
 * Generated by `createschema ticket.TicketComment 'ticket:Relationship:Ticket:CASCADE; user:Relationship:User:CASCADE; content:Text;'`
 */

const compact = require('lodash/compact')
const get = require('lodash/get')
const isArray = require('lodash/isArray')
const uniq = require('lodash/uniq')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getByCondition, find, getById } = require('@open-condo/keystone/schema')

const { checkPermissionInUserOrganizationOrRelatedOrganization, queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT_COMMENT_TYPE, COMPLETED_STATUS_TYPE, CANCELED_STATUS_TYPE } = require('@condo/domains/ticket/constants')
const {
    getTicketFieldsMatchesResidentFieldsQuery,
} = require('@condo/domains/ticket/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadTicketComments ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    
    if (user.isSupport || user.isAdmin) return {}

    if (user.type === RESIDENT) {
        const residents = await find('Resident', { user: { id: user.id }, deletedAt: null })

        const organizationsIds = compact(residents.map(resident => get(resident, 'organization')))
        const residentAddressOrStatement = getTicketFieldsMatchesResidentFieldsQuery(user, residents)

        return {
            type: RESIDENT_COMMENT_TYPE,
            ticket: {
                organization: {
                    id_in: uniq(organizationsIds),
                    deletedAt: null,
                },
                OR: [
                    { createdBy: { id: user.id } },
                    ...residentAddressOrStatement,
                ],
            },
        }
    }

    return {
        ticket: {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(user.id, 'canReadTickets'),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadTickets'),
                ],
            },
        },
    }
}

const checkManageCommentAccess = async ({ user, operation, originalInput, itemId }) => {
    if (user.type === RESIDENT) {
        if (operation === 'create') {
            const ticketId = get(originalInput, ['ticket', 'connect', 'id'])
            const ticket = await getByCondition('Ticket', { id: ticketId, deletedAt: null })
            const commentType = get(originalInput, 'type')

            if (!ticket || !commentType || commentType !== RESIDENT_COMMENT_TYPE) return false

            const ticketStatusId = get(ticket, 'status')
            const ticketStatus = await getById('TicketStatus', ticketStatusId)
            if (ticketStatus.type === COMPLETED_STATUS_TYPE || ticketStatus.type === CANCELED_STATUS_TYPE) {
                return false
            }

            return ticket.client === user.id
        }
        return false
    } else {
        if (operation === 'create') {
            const ticketId = get(originalInput, ['ticket', 'connect', 'id'])
            const ticket = await getByCondition('Ticket', { id: ticketId, deletedAt: null })
            if (!ticket) return false
            const organizationId = get(ticket, 'organization')

            return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageTicketComments')
        } else if (operation === 'update' && itemId) {
            const comment = await getByCondition('TicketComment', { id: itemId, deletedAt: null })
            if (!comment || comment.user !== user.id) return false
            const ticket = await getByCondition('Ticket', { id: comment.ticket, deletedAt: null })
            if (!ticket) return false
            const organizationId = get(ticket, 'organization')

            return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageTicketComments')
        }
    }

    return false
}

async function canManageTicketComments ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create' && isArray(originalInput)) {
        for (const ticketCommentInputData of originalInput) {
            const ticketCommentInput = get(ticketCommentInputData, 'data')
            const accessToCreateComment = await checkManageCommentAccess({ user, operation, originalInput: ticketCommentInput, itemId })

            if (!accessToCreateComment) {
                return false
            }
        }

        return true
    }

    return await checkManageCommentAccess({ user, operation, originalInput, itemId })
}

async function canSetUserField ({ authentication: { item: user }, originalInput }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    return get(originalInput, ['user', 'connect', 'id']) === user.id
}

async function canReadUserField ({ authentication: { item: user }, existingItem }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.type !== RESIDENT) return true

    return get(existingItem, 'user') === user.id
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTicketComments,
    canManageTicketComments,
    canSetUserField,
    canReadUserField,
}
