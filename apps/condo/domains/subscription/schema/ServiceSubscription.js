/**
 * Generated by `createschema subscription.ServiceSubscription 'type:Text; isTrial:Checkbox; organization:Relationship:Organization:CASCADE; startAt:DateTimeUtc; finishAt:DateTimeUtc;'`
 */

const { Text, Select, Checkbox, DateTimeUtc, Integer, Decimal } = require('@keystonejs/fields')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const access = require('@condo/domains/subscription/access/ServiceSubscription')
const { ServiceSubscription: ServiceSubscriptionAPI } = require('../utils/serverSchema')
const get = require('lodash/get')
const { OVERLAPPING_ERROR } = require('../constants/errors')


const ServiceSubscription = new GQLListSchema('ServiceSubscription', {
    schemaDoc: 'Availability time period of service features for client organization. Can be trial or payed.',
    fields: {
        type: {
            schemaDoc: 'System, from where subscription was created (our or external)',
            type: Select,
            options: 'default,sbbol',
            isRequired: true,
        },

        isTrial: {
            schemaDoc: 'Trial mode of subscription',
            type: Checkbox,
            isRequired: true,
        },

        organization: ORGANIZATION_OWNED_FIELD,

        startAt: {
            schemaDoc: 'When subscription was started',
            type: DateTimeUtc,
            isRequired: true,
        },

        finishAt: {
            schemaDoc: 'When subscription should be ended',
            type: DateTimeUtc,
            isRequired: true,
        },

        unitsCount: {
            schemaDoc: 'How much units are payed for this subscription',
            type: Integer,
        },

        unitPrice: {
            schemaDoc: 'How much one unit cost in Rubles for this subscription',
            type: Decimal,
            knexOptions: {
                scale: 2,
            },
        },

        totalPrice: {
            schemaDoc: 'Total price of this subscription, calculated as unitCost * unitsPayed',
            type: Decimal,
            knexOptions: {
                scale: 2,
            },
        },

        currency: {
            schemaDoc: 'Currency of values for all price fields',
            type: Text,
            // There is possible a bug in Knex, that creates `NOT NULL` constraint if `defaultValue` field config is provided
            // Because it does not needs to be required, the line below is commented
            // defaultValue: 'RUB',
            isRequired: false,
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.CheckConstraint',
                check: 'Q(type__in=["default", "sbbol"])',
                name: 'type_check',
            },
            {
                type: 'models.CheckConstraint',
                check: 'Q(startAt__lt=models.F("finishAt"))',
                name: 'startAt_is_before_finishAt',
            },
            {
                type: 'models.CheckConstraint',
                check: 'Q(currency__in=["RUB"])',
                name: 'currency_check',
            },
            {
                type: 'models.CheckConstraint',
                check: 'Q(unitsCount__gt=0)',
                name: 'positive_unitsCount_check',
            },
            {
                type: 'models.CheckConstraint',
                check: 'Q(unitPrice__gt=0)',
                name: 'positive_unitPrice_check',
            },
            {
                type: 'models.CheckConstraint',
                check: 'Q(totalPrice__gt=0)',
                name: 'positive_totalPrice_check',
            },
        ],
    },
    hooks: {
        validateInput: async ({ resolvedData, operation, existingItem, addValidationError, context }) => {
            let organizationId
            let overlappedSubscriptionsCount
            // It makes no sense:
            // - To create subscription in past
            // - To have two subscription simultaneously
            // This simple condition detects both of above conditions.
            const ovelappingConditions = {
                OR: [
                    { startAt_gte: resolvedData.startAt },
                    { finishAt_gte: resolvedData.startAt },
                ],
            }
            const scopeConditions = {}
            if (operation === 'create') {
                organizationId = get(resolvedData, 'organization')
            } else if (operation === 'update') {
                organizationId = get(existingItem, 'organization')
                scopeConditions.id_not = existingItem.id
            }
            if (!organizationId) {
                throw new Error('No organization set for ServiceSubscription')
            }
            scopeConditions.organization = { id: organizationId }
            overlappedSubscriptionsCount = await ServiceSubscriptionAPI.count(context, {
                ...ovelappingConditions,
                ...scopeConditions,
            })
            if (overlappedSubscriptionsCount > 0) {
                return addValidationError(`${OVERLAPPING_ERROR} subscription for current organization overlaps already existing by its time period`)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadServiceSubscriptions,
        create: access.canManageServiceSubscriptions,
        update: access.canManageServiceSubscriptions,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ServiceSubscription,
}
