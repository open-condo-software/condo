/**
 * Generated by `createschema subscription.ServiceSubscription 'type:Select:default,sbbol; isTrial:Checkbox; organization:Relationship:Organization:CASCADE; startAt:DateTimeUtc; finishAt:DateTimeUtc;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/subscription/access/ServiceSubscription')


const ServiceSubscription = new GQLListSchema('ServiceSubscription', {
    // TODO(codegen): write doc for the ServiceSubscription domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        type: {
            // TODO(codegen): write doc for ServiceSubscription.type field!
            schemaDoc: 'TODO DOC!',
            type: Select,
            options: 'default,sbbol',
            isRequired: true,
        },

        isTrial: {
            // TODO(codegen): write doc for ServiceSubscription.isTrial field!
            schemaDoc: 'TODO DOC!',
            type: Checkbox,
            isRequired: true,
        },

        organization: {
            // TODO(codegen): write doc for ServiceSubscription.organization field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        startAt: {
            // TODO(codegen): write doc for ServiceSubscription.startAt field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

        finishAt: {
            // TODO(codegen): write doc for ServiceSubscription.finishAt field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadServiceSubscriptions,
        create: access.canManageServiceSubscriptions,
        update: access.canManageServiceSubscriptions,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ServiceSubscription,
}
