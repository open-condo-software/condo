/**
 * Generated by `createschema subscription.ServiceSubscriptionPayment 'type:Select:default,sbbol; status:Select:processing,done,error,stopped,cancelled; externalId:Text; amount:Decimal; currency:Select:rub; organization:Relationship:Organization:CASCADE; subscription:Relationship:ServiceSubscription:CASCADE; meta:Json;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/subscription/access/ServiceSubscriptionPayment')


const ServiceSubscriptionPayment = new GQLListSchema('ServiceSubscriptionPayment', {
    // TODO(codegen): write doc for the ServiceSubscriptionPayment domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        type: {
            // TODO(codegen): write doc for ServiceSubscriptionPayment.type field!
            schemaDoc: 'TODO DOC!',
            type: Select,
            options: 'default,sbbol',
            isRequired: true,
        },

        status: {
            // TODO(codegen): write doc for ServiceSubscriptionPayment.status field!
            schemaDoc: 'TODO DOC!',
            type: Select,
            options: 'processing,done,error,stopped,cancelled',
            isRequired: true,
        },

        externalId: {
            // TODO(codegen): write doc for ServiceSubscriptionPayment.externalId field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        amount: {
            // TODO(codegen): write doc for ServiceSubscriptionPayment.amount field!
            schemaDoc: 'TODO DOC!',
            type: Decimal,
            isRequired: true,
        },

        currency: {
            // TODO(codegen): write doc for ServiceSubscriptionPayment.currency field!
            schemaDoc: 'TODO DOC!',
            type: Select,
            options: 'rub',
            isRequired: true,
        },

        organization: {
            // TODO(codegen): write doc for ServiceSubscriptionPayment.organization field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        subscription: {
            // TODO(codegen): write doc for ServiceSubscriptionPayment.subscription field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'ServiceSubscription',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        meta: {
            // TODO(codegen): write doc for ServiceSubscriptionPayment.meta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadServiceSubscriptionPayments,
        create: access.canManageServiceSubscriptionPayments,
        update: access.canManageServiceSubscriptionPayments,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ServiceSubscriptionPayment,
}
