/**
 * Generated by `createschema subscription.ServiceSubscriptionPayment 'type:Select:default,sbbol; status:Select:processing,done,error,stopped,cancelled; externalId:Text; amount:Decimal; currency:Select:rub; organization:Relationship:Organization:CASCADE; subscription:Relationship:ServiceSubscription:CASCADE; meta:Json;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/subscription/access/ServiceSubscriptionPayment')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')


const ServiceSubscriptionPayment = new GQLListSchema('ServiceSubscriptionPayment', {
    schemaDoc: 'Payment request for service subscription',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        type: {
            schemaDoc: 'Origin of subscription, either through our system or through external system or marketplace',
            type: Select,
            options: 'default,sbbol',
            isRequired: true,
        },

        status: {
            schemaDoc: 'Reduced set of statuses from a set of statuses in external system, that contains much more of them. Based on this status a system will filter payment request for subsequent fetching of statuses from remote system.',
            type: Select,
            options: 'processing,done,error,stopped,cancelled',
            isRequired: true,
        },

        externalId: {
            schemaDoc: 'Unique identifier in remote system, if this payment request belong to payment requests for subscription from remote system (non-default)',
            type: Text,
            isRequired: true,
        },

        amount: {
            schemaDoc: 'Amount in specified currency',
            type: Decimal,
            isRequired: true,
            knexOptions: {
                scale: 2,
            },
        },

        currency: {
            schemaDoc: 'Currency of amount',
            type: Select,
            options: 'RUB',
            isRequired: true,
        },

        organization: ORGANIZATION_OWNED_FIELD,

        subscription: {
            schemaDoc: 'Subscription, to pay for',
            type: Relationship,
            ref: 'ServiceSubscription',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        meta: {
            schemaDoc: 'Data from remote system',
            type: Json,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadServiceSubscriptionPayments,
        create: access.canManageServiceSubscriptionPayments,
        update: access.canManageServiceSubscriptionPayments,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ServiceSubscriptionPayment,
}
