/**
 * Generated by `createschema subscription.ServiceSubscription 'type:Select:default,sbbol; isTrial:Checkbox; organization:Relationship:Organization:CASCADE; startAt:DateTimeUtc; finishAt:DateTimeUtc;'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'
import { generateNewReactHooks } from '@condo/domains/common/utils/codegeneration/new.generate.hooks'

import { ServiceSubscription as ServiceSubscriptionGQL } from '@condo/domains/subscription/gql'
import { ServiceSubscription, ServiceSubscriptionCreateInput, ServiceSubscriptionUpdateInput, QueryAllServiceSubscriptionsArgs } from '@app/condo/schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'type', 'isTrial', 'organization', 'startAt', 'finishAt', 'unitsCount', 'unitPrice', 'totalPrice', 'currency']
const RELATIONS = ['organization']

export interface IServiceSubscriptionUIState extends ServiceSubscription {
    id: string
    // TODO(codegen): write IServiceSubscriptionUIState or extends it from
}

function convertToUIState (item: ServiceSubscription): IServiceSubscriptionUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IServiceSubscriptionUIState
}

export interface IServiceSubscriptionFormState {
    id?: undefined
    // TODO(codegen): write IServiceSubscriptionUIFormState or extends it from
}

function convertToUIFormState (state: IServiceSubscriptionUIState): IServiceSubscriptionFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IServiceSubscriptionFormState
}

function convertToGQLInput (state: IServiceSubscriptionFormState): ServiceSubscriptionUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<ServiceSubscription, ServiceSubscriptionUpdateInput, IServiceSubscriptionFormState, IServiceSubscriptionUIState, QueryAllServiceSubscriptionsArgs>(ServiceSubscriptionGQL, { convertToGQLInput, convertToUIState })
const {
    useNewObject,
    useNewObjects,
    useNewCreate,
    useNewUpdate,
    useNewSoftDelete,
} = generateNewReactHooks<ServiceSubscription, ServiceSubscriptionCreateInput, ServiceSubscriptionUpdateInput, QueryAllServiceSubscriptionsArgs>(ServiceSubscriptionGQL)

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
    useNewObject,
    useNewObjects,
    useNewCreate,
    useNewUpdate,
    useNewSoftDelete,
}
