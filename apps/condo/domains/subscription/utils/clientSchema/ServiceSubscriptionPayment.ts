/**
 * Generated by `createschema subscription.ServiceSubscriptionPayment 'type:Select:default,sbbol; status:Select:processing,done,error,stopped,cancelled; externalId:Text; amount:Decimal; currency:Select:rub; organization:Relationship:Organization:CASCADE; subscription:Relationship:ServiceSubscription:CASCADE; meta:Json;'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { ServiceSubscriptionPayment as ServiceSubscriptionPaymentGQL } from '@condo/domains/subscription/gql'
import { ServiceSubscriptionPayment, ServiceSubscriptionPaymentUpdateInput, QueryAllServiceSubscriptionPaymentsArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'type', 'status', 'externalId', 'amount', 'currency', 'organization', 'subscription', 'meta']
const RELATIONS = ['organization', 'subscription']

export interface IServiceSubscriptionPaymentUIState extends ServiceSubscriptionPayment {
    id: string
    // TODO(codegen): write IServiceSubscriptionPaymentUIState or extends it from
}

function convertToUIState (item: ServiceSubscriptionPayment): IServiceSubscriptionPaymentUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IServiceSubscriptionPaymentUIState
}

export interface IServiceSubscriptionPaymentFormState {
    id?: undefined
    // TODO(codegen): write IServiceSubscriptionPaymentUIFormState or extends it from
}

function convertToUIFormState (state: IServiceSubscriptionPaymentUIState): IServiceSubscriptionPaymentFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IServiceSubscriptionPaymentFormState
}

function convertToGQLInput (state: IServiceSubscriptionPaymentFormState): ServiceSubscriptionPaymentUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<ServiceSubscriptionPayment, ServiceSubscriptionPaymentUpdateInput, IServiceSubscriptionPaymentFormState, IServiceSubscriptionPaymentUIState, QueryAllServiceSubscriptionPaymentsArgs>(ServiceSubscriptionPaymentGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
