/**
 * Generated by `createschema marketplace.MarketPriceScope 'itemPrice:Relationship:MarketItemPrice:CASCADE; property:Relationship:Property:CASCADE; organization:Relationship:Organization:CASCADE;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, expectValuesOfCommonFields, expectToThrowUniqueConstraintViolationError, expectToThrowGQLError } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')


const { createTestAcquiringIntegration } = require('@condo/domains/acquiring/utils/testSchema')
const { MarketPriceScope, createTestMarketPriceScope, updateTestMarketPriceScope, createTestMarketItemPrice } = require('@condo/domains/marketplace/utils/testSchema')
const { createTestMarketCategory, createTestMarketItem } = require('@condo/domains/marketplace/utils/testSchema')
const { createTestInvoiceContext } = require('@condo/domains/marketplace/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestResident, createTestServiceConsumer } = require('@condo/domains/resident/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')

describe('MarketPriceScope', () => {
    let admin, organization, marketCategory, marketItem, price
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient();
        [marketCategory] = await createTestMarketCategory(admin);
        [organization] = await createTestOrganization(admin);
        [marketItem] = await createTestMarketItem(admin, marketCategory, organization);
        [price] = await createTestMarketItemPrice(admin, marketItem)
    })
    describe('Accesses', () => {
        describe('admin', () => {
            test('can create', async () => {
                const [property] = await createTestProperty(admin, organization)
                const [obj, attrs] = await createTestMarketPriceScope(admin, price, property)
                expectValuesOfCommonFields(obj, attrs, admin)
            })

            test('can update', async () => {
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMarketPriceScope(admin, price, property)
                const [obj, attrs] = await updateTestMarketPriceScope(admin, objCreated.id)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketPriceScope.delete(admin, 'id')
                })
            })

            test('can read', async () => {
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMarketPriceScope(admin, price, property)
                const objs = await MarketPriceScope.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: objCreated.id,
                    }),
                ]))
            })
        })

        describe('support', () => {
            let client
            beforeAll(async () => {
                client = await makeClientWithSupportUser()
            })

            test('can create', async () => {
                const [property] = await createTestProperty(admin, organization)
                const [obj, attrs] = await createTestMarketPriceScope(client, price, property)
                expectValuesOfCommonFields(obj, attrs, client)
            })

            test('can update', async () => {
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMarketPriceScope(client, price, property)
                const [obj, attrs] = await updateTestMarketPriceScope(client, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketPriceScope.delete(client, 'id')
                })
            })

            test('can read', async () => {
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMarketPriceScope(client, price, property)

                const objs = await MarketPriceScope.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: objCreated.id,
                    }),
                ]))
            })
        })

        describe('employee with access', () => {
            let client
            beforeAll(async () => {
                client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canReadMarketItems: true,
                    canReadMarketItemPrices: true,
                    canReadMarketPriceScopes: true,
                    canManageMarketItemPrices: true,
                    canManageMarketPriceScopes: true,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)
            })

            test('can create', async () => {
                const [property] = await createTestProperty(admin, organization)
                const [obj, attrs] = await createTestMarketPriceScope(client, price, property)
                expectValuesOfCommonFields(obj, attrs, client)
            })

            test('can update', async () => {
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMarketPriceScope(client, price, property)
                const [obj, attrs] = await updateTestMarketPriceScope(client, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketPriceScope.delete(client, 'id')
                })
            })

            test('can read', async () => {
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMarketPriceScope(client, price, property)

                const objs = await MarketPriceScope.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: objCreated.id,
                    }),
                ]))
            })
        })

        describe('employee without access', () => {
            let client
            beforeAll(async () => {
                client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                await createTestOrganizationEmployee(admin, organization, client.user, role)
            })

            test('can\'t create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMarketPriceScope(client, marketCategory, organization)
                })
            })

            test('can\'t update', async () => {
                const [property] = await createTestProperty(admin, organization)
                const [objCreated] = await createTestMarketPriceScope(admin, price, property)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMarketPriceScope(client, objCreated.id)
                })
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketPriceScope.delete(client, 'id')
                })
            })

            test('can\'t read', async () => {
                const [property] = await createTestProperty(admin, organization)
                await createTestMarketPriceScope(admin, price, property)

                const objs = await MarketPriceScope.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(0)
            })
        })

        describe('anonymus', () => {
            let client, property
            beforeAll(async () => {
                [property] = await createTestProperty(admin, organization)
                client = await makeClient()
            })
            test('can\'t create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestMarketPriceScope(client, price, property)
                })
            })

            test('can\'t update', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestMarketPriceScope(client, 'id')
                })
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketPriceScope.delete(client, 'id')
                })
            })

            test('can\'t read', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await MarketPriceScope.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })

        describe('resident', () => {
            let client, property
            beforeAll(async () => {
                client = await makeClientWithResidentUser()
                const unitName = faker.random.alphaNumeric(8)
                const accountNumber = faker.random.alphaNumeric(8);

                [property] = await createTestProperty(admin, organization)
                const [resident] = await createTestResident(admin, client.user, property, {
                    unitName,
                })
                await createTestServiceConsumer(admin, resident, organization, {
                    accountNumber,
                })
            })

            test('can\'t create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMarketPriceScope(client, price, property)
                })
            })

            test('can\'t update', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMarketPriceScope(client, 'id')
                })
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketPriceScope.delete(client, 'id')
                })
            })

            test('can read MarketPriceScope of his organization', async () => {
                const [obj] = await createTestMarketPriceScope(admin, price, property)

                const objs = await MarketPriceScope.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                expect(objs).toHaveLength(1)
                expect(objs[0].id).toEqual(obj.id)
            })

            test('each of two residents can read scopes linked to their property', async () => {
                const client = await makeClientWithResidentUser()
                const unitName = faker.random.alphaNumeric(8)
                const [property] = await createTestProperty(admin, organization)
                const [resident] = await createTestResident(admin, client.user, property, {
                    unitName,
                })
                const [scope] = await createTestMarketPriceScope(admin, price, property)

                const client2 = await makeClientWithResidentUser()
                const [property2] = await createTestProperty(admin, organization)
                const [resident2] = await createTestResident(admin, client2.user, property2, {
                    unitName,
                })
                const [scope2] = await createTestMarketPriceScope(admin, price, property2)

                const objs = await MarketPriceScope.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                expect(objs).toHaveLength(1)
                expect(objs[0].id).toEqual(scope.id)

                const objs2 = await MarketPriceScope.getAll(client2, {}, { sortBy: ['updatedAt_DESC'] })
                expect(objs2).toHaveLength(1)
                expect(objs2[0].id).toEqual(scope2.id)

            })

            test('both residents from the same organization can read default price scope', async () => {
                const [organization] = await createTestOrganization(admin)
                const [marketItem] = await createTestMarketItem(admin, marketCategory, organization)
                const [price] = await createTestMarketItemPrice(admin, marketItem)

                const client = await makeClientWithResidentUser()
                const unitName = faker.random.alphaNumeric(8)
                const [property] = await createTestProperty(admin, organization)
                const [resident] = await createTestResident(admin, client.user, property, {
                    unitName,
                })

                const client2 = await makeClientWithResidentUser()
                const [property2] = await createTestProperty(admin, organization)
                const [resident2] = await createTestResident(admin, client2.user, property2, {
                    unitName,
                })
                const [scope] = await createTestMarketPriceScope(admin, price, property, { property: undefined })

                const objs = await MarketPriceScope.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                expect(objs).toHaveLength(1)
                expect(objs[0].id).toEqual(scope.id)

                const objs2 = await MarketPriceScope.getAll(client2, {}, { sortBy: ['updatedAt_DESC'] })
                expect(objs2).toHaveLength(1)
                expect(objs2[0].id).toEqual(scope.id)
            })

            test('residents from different organizations can read default price scopes of their organizations', async () => {
                const unitName = faker.random.alphaNumeric(8)
                const [organization1] = await createTestOrganization(admin)
                const [marketItem1] = await createTestMarketItem(admin, marketCategory, organization1)
                const [price1] = await createTestMarketItemPrice(admin, marketItem1)
                const [property1] = await createTestProperty(admin, organization1)
                const [scope] = await createTestMarketPriceScope(admin, price1, property1, { property: undefined })

                const client = await makeClientWithResidentUser()
                const [resident] = await createTestResident(admin, client.user, property1, {
                    unitName,
                })

                const [organization2] = await createTestOrganization(admin)
                const [marketItem2] = await createTestMarketItem(admin, marketCategory, organization2)
                const [price2] = await createTestMarketItemPrice(admin, marketItem2)
                const [property2] = await createTestProperty(admin, organization2)
                const [scope2] = await createTestMarketPriceScope(admin, price2, property2, { property: undefined })

                const client2 = await makeClientWithResidentUser()
                const [resident2] = await createTestResident(admin, client2.user, property2, {
                    unitName,
                })

                const objs = await MarketPriceScope.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                expect(objs).toHaveLength(1)
                expect(objs[0].id).toEqual(scope.id)

                const objs2 = await MarketPriceScope.getAll(client2, {}, { sortBy: ['updatedAt_DESC'] })
                expect(objs2).toHaveLength(1)
                expect(objs2[0].id).toEqual(scope2.id)
            })
        })

    })

    describe('Constraint tests', () => {
        test('cannot create 2 scope with same property', async () => {
            const [property] = await createTestProperty(admin, organization)
            await createTestMarketPriceScope(admin, price, property)
            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestMarketPriceScope(admin, price, property)
            }, 'MarketPriceScope_unique_property_marketItemPrice')

        })

        test('cannot create 2 scope with same organization (property === null)', async () => {
            const [property] = await createTestProperty(admin, organization)
            await createTestMarketPriceScope(admin, price, property, { property: undefined })
            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestMarketPriceScope(admin, price, property, { property: undefined })
            }, 'MarketPriceScope_unique_marketItemPrice')
        })
    })

    describe('Validation hooks tests', () => {
        test('cannot create scope with property from one organization and marketItem from another organization', async () => {
            const [organization2] = await createTestOrganization(admin)
            const [property] = await createTestProperty(admin, organization2)
            await expectToThrowGQLError(
                async () => {
                    await createTestMarketPriceScope(admin, price, property)
                },
                {
                    code: 'BAD_USER_INPUT',
                    type: 'ORGANIZATION_IN_PROPERTY_AND_MARKET_ITEM_PRICE_NOT_MATCHED',
                    message: 'Cannot create scope with property from one organization and market item from another organization.',
                },
                'obj'
            )
        })
    })
})
