/**
 * Generated by `createschema marketplace.InvoiceContext 'organization:Relationship:Organization:PROTECT; recipient:Json; email:Text; settings:Json; state:Json;'`
 */

const Ajv = require('ajv')
const addFormats = require('ajv-formats')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { RECIPIENT_FIELD } = require('@condo/domains/acquiring/schema/fields/Recipient')
const { getGQLErrorValidator } = require('@condo/domains/common/schema/json.utils')
const access = require('@condo/domains/marketplace/access/InvoiceContext')
const {
    INVOICE_CONTEXT_STATUSES,
    ERROR_INVALID_SETTINGS,
} = require('@condo/domains/marketplace/constants')

const ajv = new Ajv()
addFormats(ajv)

const settingsFieldSchema = {
    type: 'object',
    properties: {
        emails: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string',
                format: 'email',
            },
        },
    },
}

const validateSettingsField = getGQLErrorValidator(ajv.compile(settingsFieldSchema), ERROR_INVALID_SETTINGS)

const InvoiceContext = new GQLListSchema('InvoiceContext', {
    schemaDoc: 'Model contains the settings for processing invoices for organization',
    fields: {

        organization: {
            schemaDoc: 'The organization who created this context',
            type: 'Relationship',
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

        recipient: {
            ...RECIPIENT_FIELD,
            schemaDoc: 'Requisites from agreement. Are used for invoicing in case of not confirmed billing recipient in receipt',
            isRequired: false,
        },

        settings: {
            schemaDoc: 'Settings required the context to work',
            type: 'Json',
            isRequired: true,
            hooks: {
                validateInput: ({ resolvedData, fieldPath }) => {
                    validateSettingsField(resolvedData[fieldPath])
                },
            },
        },

        status: {
            schemaDoc: 'The current status of the context',
            isRequired: false,
            type: 'Select',
            dataType: 'string',
            options: INVOICE_CONTEXT_STATUSES,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadInvoiceContexts,
        create: access.canManageInvoiceContexts,
        update: access.canManageInvoiceContexts,
        delete: false,
        auth: true,
    },
})

module.exports = {
    InvoiceContext,
}
