/**
 * Generated by `createschema marketplace.Invoice 'number:Integer; property:Relationship:Property:PROTECT; unitType:Text; unitName:Text; accountNumber:Text; toPay:Decimal; items:Json; contact?:Relationship:Contact:SET_NULL; client?:Relationship:User:SET_NULL; clientName?:Text; clientPhone?:Text; clientEmail?:Text'`
 */
const Big = require('big.js')
const dayjs = require('dayjs')
const { find: _find, get, has, set, map } = require('lodash')
const isEmpty = require('lodash/isEmpty')
const isEqual = require('lodash/isEqual')
const isNil = require('lodash/isNil')
const omit = require('lodash/omit')
const omitBy = require('lodash/omitBy')
const pick = require('lodash/pick')
const pickBy = require('lodash/pickBy')

const conf = require('@open-condo/config')
const { userIsAdmin } = require('@open-condo/keystone/access')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById, getByCondition, find } = require('@open-condo/keystone/schema')

const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/acquiring/constants/context')
const { RECIPIENT_FIELD } = require('@condo/domains/acquiring/schema/fields/Recipient')
const { MONEY_AMOUNT_FIELD, UNIT_TYPE_FIELD } = require('@condo/domains/common/schema/fields')
const { CLIENT_NAME_FIELD, CLIENT_PHONE_LANDLINE_FIELD } = require('@condo/domains/common/schema/fields')
const { Contact } = require('@condo/domains/contact/utils/serverSchema')
const access = require('@condo/domains/marketplace/access/Invoice')
const {
    ERROR_INVOICE_ALREADY_PAID,
    ERROR_INVOICE_ALREADY_CANCELED,
    INVOICE_STATUSES,
    INVOICE_STATUS_DRAFT,
    INVOICE_STATUS_PAID,
    INVOICE_STATUS_PUBLISHED,
    INVOICE_STATUS_CANCELED,
    ERROR_INVOICE_EMPTY_ROWS,
    ERROR_INVOICE_ROW_WRONG_COUNT,
    ERROR_INVOICE_ROW_WRONG_PRICE,
    INVOICE_PAYMENT_TYPES,
    INVOICE_PAYMENT_TYPE_ONLINE,
    ERROR_FORBID_EDIT_PUBLISHED,
    ERROR_CLIENT_DATA_DOES_NOT_MATCH_TICKET,
    ERROR_FORBID_UPDATE_TICKET, CLIENT_DATA_FIELDS, COMMON_RESOLVED_FIELDS,
    ERROR_PUBLISHING_WITHOUT_DEFINED_PRICES_FORBIDDEN,
    ERROR_NO_FINISHED_ACQUIRING_CONTEXT, DEFAULT_INVOICE_CURRENCY_CODE, INVOICE_PAYMENT_TYPE_CASH,
} = require('@condo/domains/marketplace/constants')
const { INVOICE_ROWS_FIELD } = require('@condo/domains/marketplace/schema/fields/invoiceRows')
const { MarketItem } = require('@condo/domains/marketplace/utils/serverSchema')
const {
    MARKETPLACE_INVOICE_PUBLISHED_MESSAGE_TYPE,
    MARKETPLACE_INVOICE_WITH_TICKET_PUBLISHED_MESSAGE_TYPE,
    MARKETPLACE_INVOICE_CASH_PUBLISHED_MESSAGE_TYPE,
    MARKETPLACE_INVOICE_CASH_WITH_TICKET_PUBLISHED_MESSAGE_TYPE,
} = require('@condo/domains/notification/constants/constants')
const { sendMessage } = require('@condo/domains/notification/utils/serverSchema')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const { TICKET_SOURCE_TYPES } = require('@condo/domains/ticket/constants/common')
const { RESIDENT } = require('@condo/domains/user/constants/common')


const sendPush = async ({ originalInput, userId, propertyId, unitName, unitType, updatedItem, context }) => {
    if (originalInput.status === INVOICE_STATUS_PUBLISHED && userId && propertyId && unitName && unitType) {
        const sender = { dv: 1, fingerprint: get(context, 'authedItem.sender.fingerprint', 'Invoice_afterChange') }
        const resident = await getByCondition('Resident', {
            user: { id: userId },
            property: { id: propertyId },
            unitName: unitName,
            unitType: unitType,
            deletedAt: null,
        })

        const uniqKey = `marketplace_invoice_published_${updatedItem.id}`
        const uniqKeyWithTicket = `marketplace_invoice_${updatedItem.id}_published_with_ticket_${updatedItem.ticket}`
        if (!resident) return

        if (updatedItem.paymentType === INVOICE_PAYMENT_TYPE_ONLINE) {
            if (isNil(updatedItem.ticket)) {
                await sendMessage(context, {
                    dv: 1,
                    sender,
                    to: { user: { id: userId } },
                    type: MARKETPLACE_INVOICE_PUBLISHED_MESSAGE_TYPE,
                    uniqKey,
                    meta: {
                        dv: 1,
                        data: {
                            userId,
                            residentId: resident.id,
                            invoiceId: updatedItem.id,
                            url: `${conf.SERVER_URL}/payments/`,
                        },
                    },
                })
            } else {
                const ticket = await getById('Ticket', updatedItem.ticket)
                const ticketSource = await getById('TicketSource', ticket.source)
                if (ticketSource.type !== TICKET_SOURCE_TYPES.MOBILE_APP ) {
                    await sendMessage(context, {
                        dv: 1,
                        sender,
                        to: { user: { id: userId } },
                        type: MARKETPLACE_INVOICE_WITH_TICKET_PUBLISHED_MESSAGE_TYPE,
                        uniqKey: uniqKeyWithTicket,
                        meta: {
                            dv: 1,
                            data: {
                                userId,
                                residentId: resident.id,
                                invoiceId: updatedItem.id,
                                ticketId: updatedItem.ticket,
                                ticketNumber: ticket.number,
                                url: `${conf.SERVER_URL}/ticket/${updatedItem.ticket}/`,
                            },
                        },
                    })
                }
            }

        } else if (updatedItem.paymentType === INVOICE_PAYMENT_TYPE_CASH) {
            if (isNil(updatedItem.ticket)) {
                await sendMessage(context, {
                    dv: 1,
                    sender,
                    to: { user: { id: userId } },
                    type: MARKETPLACE_INVOICE_CASH_PUBLISHED_MESSAGE_TYPE,
                    uniqKey,
                    meta: {
                        dv: 1,
                        data: {
                            userId,
                            residentId: resident.id,
                            invoiceId: updatedItem.id,
                            url: `${conf.SERVER_URL}/payments/`,
                        },
                    },
                })
            } else {
                const ticket = await getById('Ticket', updatedItem.ticket)
                const ticketSource = await getById('TicketSource', ticket.source)
                if (ticketSource.type !== TICKET_SOURCE_TYPES.MOBILE_APP ) {
                    await sendMessage(context, {
                        dv: 1,
                        sender,
                        to: { user: { id: userId } },
                        type: MARKETPLACE_INVOICE_CASH_WITH_TICKET_PUBLISHED_MESSAGE_TYPE,
                        uniqKey: uniqKeyWithTicket,
                        meta: {
                            dv: 1,
                            data: {
                                userId,
                                residentId: resident.id,
                                invoiceId: updatedItem.id,
                                ticketId: updatedItem.ticket,
                                ticketNumber: ticket.number,
                                url: `${conf.SERVER_URL}/ticket/${updatedItem.ticket}/`,
                            },
                        },
                    })
                }
            }
        }
    }
}
const ERRORS = {
    ALREADY_PAID: {
        code: BAD_USER_INPUT,
        type: ERROR_INVOICE_ALREADY_PAID,
        message: 'Changing of paid invoice is forbidden',
        messageForUser: 'api.marketplace.invoice.error.alreadyPaid',
    },
    ALREADY_CANCELED: {
        code: BAD_USER_INPUT,
        type: ERROR_INVOICE_ALREADY_CANCELED,
        message: 'Changing of canceled invoice is forbidden',
        messageForUser: 'api.marketplace.invoice.error.alreadyCanceled',
    },
    EMPTY_ROWS: {
        code: BAD_USER_INPUT,
        type: ERROR_INVOICE_EMPTY_ROWS,
        message: 'The invoice contains no rows',
        messageForUser: 'api.marketplace.invoice.error.emptyRows',
    },
    WRONG_COUNT: (rowNumber) => ({
        code: BAD_USER_INPUT,
        type: ERROR_INVOICE_ROW_WRONG_COUNT,
        message: `Count at line ${rowNumber} can't be less than 1`,
        messageForUser: 'api.marketplace.invoice.error.rows.count',
        messageInterpolation: { rowNumber },
    }),
    WRONG_PRICE: (rowNumber) => ({
        code: BAD_USER_INPUT,
        type: ERROR_INVOICE_ROW_WRONG_PRICE,
        message: `Price at line ${rowNumber} can't be less than 0`,
        messageForUser: 'api.marketplace.invoice.error.rows.toPay',
        messageInterpolation: { rowNumber },
    }),
    NO_FINISHED_ACQUIRING_CONTEXT: {
        code: BAD_USER_INPUT,
        type: ERROR_NO_FINISHED_ACQUIRING_CONTEXT,
        message: 'The organization has no AcquiringIntegrationContext in finished status for invoices',
        messageForUser: 'api.marketplace.invoice.error.NoFinishedAcquiringContext',
    },
    FORBID_EDIT_PUBLISHED: {
        code: BAD_USER_INPUT,
        type: ERROR_FORBID_EDIT_PUBLISHED,
        message: `Only the status ${INVOICE_STATUS_CANCELED} and ${INVOICE_STATUS_PAID} can be updated by the published invoice`,
        messageForUser: 'api.marketplace.invoice.error.editPublishedForbidden',
    },
    CLIENT_DATA_DOES_NOT_MATCH_TICKET: {
        code: BAD_USER_INPUT,
        type: ERROR_CLIENT_DATA_DOES_NOT_MATCH_TICKET,
        message: `Fields ${CLIENT_DATA_FIELDS.join(', ')} must match same fields in connected ticket`,
        messageForUser: 'api.marketplace.invoice.error.clientDataDoesNotMatchTicket',
    },
    FORBID_UPDATE_TICKET: {
        code: BAD_USER_INPUT,
        type: ERROR_FORBID_UPDATE_TICKET,
        message: 'You cannot update ticket in invoice that is already linked to the ticket',
        messageForUser: 'api.marketplace.invoice.error.forbidUpdateTicket',
    },
    PUBLISHING_WITHOUT_DEFINED_PRICES_FORBIDDEN: {
        code: BAD_USER_INPUT,
        type: ERROR_PUBLISHING_WITHOUT_DEFINED_PRICES_FORBIDDEN,
        message: 'Can\'t publish invoice without defined prices',
        messageForUser: 'api.marketplace.invoice.error.PublishingWithoutDefinedPricesForbidden',
    },
}

const Invoice = new GQLListSchema('Invoice', {
    schemaDoc: 'Invoice model contains information about paid items and payer',
    fields: {

        organization: ORGANIZATION_OWNED_FIELD,

        number: {
            schemaDoc: 'The invoice number within organization',
            type: 'AutoIncrementInteger',
            isRequired: true,
            autoIncrementScopeFields: ['organization'],
        },

        property: {
            schemaDoc: 'The payer\'s property',
            type: 'Relationship',
            ref: 'Property',
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        unitType: {
            ...UNIT_TYPE_FIELD,
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true },
            defaultValue: null,
        },

        unitName: {
            schemaDoc: 'The payer\'s unitName',
            type: 'Text',
        },

        accountNumber: {
            schemaDoc: 'The payer\'s accountNumber within organization',
            type: 'Text',
        },

        toPay: MONEY_AMOUNT_FIELD,

        rows: INVOICE_ROWS_FIELD,

        ticket: {
            schemaDoc: 'The ticket related to this invoice',
            type: 'Relationship',
            ref: 'Ticket',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        contact: {
            schemaDoc: 'The contact the invoice created for. Fill by organization',
            type: 'Relationship',
            ref: 'Contact',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        client: {
            schemaDoc: 'This field indicates, that the Invoice is visible to a Resident and it has access to it. ' +
                'This field will be set to User of corresponding Resident in following cases: ' +
                '1) the Invoice was created by Resident from mobile app;' +
                '2) the Invoice was created by OrganizationEmployee with phone number, that matches some Resident;',
            type: 'Relationship',
            ref: 'User',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        clientName: CLIENT_NAME_FIELD,

        clientPhone: CLIENT_PHONE_LANDLINE_FIELD,

        status: {
            schemaDoc: 'Invoice status affects which invoices can be read by residents and which invoices can be managed. The newly created invoice has status "draft"; the "published" invoice may be paid by resident; "paid" means that invoice already paid; "canceled" means no modifications allowed. Each status, except draft, has related timestamp.',
            isRequired: true,
            type: 'Select',
            dataType: 'string',
            options: INVOICE_STATUSES,
            defaultValue: INVOICE_STATUS_DRAFT,
        },

        paymentType: {
            schemaDoc: 'Shows which payment type chosen: online or cash or something else',
            isRequired: true,
            type: 'Select',
            dataType: 'string',
            options: INVOICE_PAYMENT_TYPES,
            defaultValue: INVOICE_PAYMENT_TYPE_ONLINE,
        },

        publishedAt: {
            schemaDoc: 'When status of the invoice was changed to published (ready to pay)',
            type: 'DateTimeUtc',
            access: { create: false, read: true, update: userIsAdmin },
        },

        paidAt: {
            schemaDoc: 'When status of the invoice was changed to paid',
            type: 'DateTimeUtc',
            access: { create: false, read: true, update: userIsAdmin },
        },

        canceledAt: {
            schemaDoc: 'When status of the invoice was changed to canceled',
            type: 'DateTimeUtc',
            access: { create: false, read: true, update: userIsAdmin },
        },

        recipient: {
            schemaDoc: 'The recipient\'s requisites',
            type: 'Virtual',
            graphQLReturnType: RECIPIENT_FIELD.graphQLReturnType,
            graphQLReturnFragment: RECIPIENT_FIELD.graphQLAdminFragment,
            resolver: async (invoice) => {
                const acquiringContext = await getByCondition('AcquiringIntegrationContext', {
                    organization: { id: invoice.organization },
                    deletedAt: null,
                    invoiceStatus: CONTEXT_FINISHED_STATUS,
                })
                return get(acquiringContext, 'invoiceRecipient')
            },
        },

        acquiringIntegrationId: {
            schemaDoc: 'Integration ID through which this invoice can be paid',
            type: 'Virtual',
            graphQLReturnType: 'ID',
            resolver: async (item, args, context) => {
                const acquiringContext = await getByCondition('AcquiringIntegrationContext', {
                    organization: { id: item.organization },
                    deletedAt: null,
                    invoiceStatus: CONTEXT_FINISHED_STATUS,
                })
                return get(acquiringContext, 'integration', null)
            },
            access: { create: false, read: true, update: false },
        },

        acquiringHostUrl: {
            schemaDoc: 'Url to acquiring integration service. Mobile devices will use it communicate with external acquiring. List of endpoints is the same for all of them.',
            type: 'Virtual',
            graphQLReturnType: 'String',
            resolver: async (item, args, context) => {
                const acquiringContext = await getByCondition('AcquiringIntegrationContext', {
                    organization: { id: item.organization },
                    deletedAt: null,
                    invoiceStatus: CONTEXT_FINISHED_STATUS,
                })
                const integration = await getById('AcquiringIntegration', get(acquiringContext, 'integration'))
                return get(integration, 'hostUrl', null)
            },
            access: { create: false, read: true, update: false },
        },

        canGroupReceipts: {
            schemaDoc: 'Can multiple receipts be united through this acquiring',
            type: 'Virtual',
            graphQLReturnType: 'Boolean',
            resolver: async (item, args, context) => {
                const acquiringContext = await getByCondition('AcquiringIntegrationContext', {
                    organization: { id: item.organization },
                    deletedAt: null,
                    invoiceStatus: CONTEXT_FINISHED_STATUS,
                })
                const integration = await getById('AcquiringIntegration', acquiringContext.integration)
                return get(integration, 'canGroupReceipts', null)
            },
            access: { create: false, read: true, update: false },
        },

        currencyCode: {
            schemaDoc: 'Code of currency in ISO-4217 format',
            type: 'Virtual',
            graphQLReturnType: 'String',
            resolver: async (item, args, context) => {
                return DEFAULT_INVOICE_CURRENCY_CODE // Now we only allow payments in RUB, so temporarily this field will return a constant
            },
            access: { create: false, read: true, update: false },
        },

    },
    hooks: {
        validateInput: async ({ resolvedData, operation, existingItem, context }) => {
            const nextData = { ...existingItem, ...resolvedData }
            const isUpdate = operation === 'update'
            const isConnectClientDataOp = Object.keys(resolvedData).some(key => CLIENT_DATA_FIELDS.includes(key))
            const connectedTicketId = get(nextData, 'ticket')
            const existingTicketId = get(existingItem, 'ticket')
            const resolvedTicketId = get(resolvedData, 'ticket')
            const changedFields = omitBy(resolvedData, (value, key) => {
                if (key === 'toPay') {
                    return Number(value) === Number(get(existingItem, key))
                }
                return isEqual(value, get(existingItem, key))
            })

            const isUpdateClientDataFromTicketOp = connectedTicketId && isConnectClientDataOp &&
                isEmpty(omit(changedFields, [...COMMON_RESOLVED_FIELDS, ...CLIENT_DATA_FIELDS, 'ticket']))

            if (existingTicketId && resolvedTicketId && existingTicketId !== resolvedTicketId) {
                throw new GQLError(ERRORS.FORBID_UPDATE_TICKET, context)
            }

            if (connectedTicketId && isConnectClientDataOp) {
                const ticket = await getById('Ticket', connectedTicketId)
                const notEmptyTicketClientData = pickBy(pick(ticket, CLIENT_DATA_FIELDS), Boolean)
                const notEmptyInvoiceClientData = pickBy(pick(nextData, CLIENT_DATA_FIELDS), Boolean)

                if (!isEqual(notEmptyTicketClientData, notEmptyInvoiceClientData)) {
                    throw new GQLError(ERRORS.CLIENT_DATA_DOES_NOT_MATCH_TICKET, context)
                }
            }

            if (isUpdate && get(existingItem, 'status') === INVOICE_STATUS_PUBLISHED && !connectedTicketId) {
                const resolvedStatus = get(resolvedData, 'status')
                const changedFieldsWithoutStatus = omit(changedFields, [...COMMON_RESOLVED_FIELDS, 'status'])

                const hasAccessToUpdateStatus = resolvedStatus ?
                    [INVOICE_STATUS_CANCELED, INVOICE_STATUS_PAID, INVOICE_STATUS_PUBLISHED].includes(resolvedStatus) : true

                if (!isEmpty(changedFieldsWithoutStatus) || !hasAccessToUpdateStatus) {
                    throw new GQLError(ERRORS.FORBID_EDIT_PUBLISHED, context)
                }
            }

            if (isUpdate && existingItem.status === INVOICE_STATUS_CANCELED && !isUpdateClientDataFromTicketOp) {
                throw new GQLError(ERRORS.ALREADY_CANCELED, context)
            }

            if (
                isUpdate &&
                existingItem.status === INVOICE_STATUS_PAID &&
                existingItem.paymentType === INVOICE_PAYMENT_TYPE_ONLINE &&
                !isUpdateClientDataFromTicketOp
            ) {
                throw new GQLError(ERRORS.ALREADY_PAID, context)
            }

            const [acquiringContext] = await find('AcquiringIntegrationContext', {
                organization: { id: get(nextData, 'organization') },
                invoiceStatus: CONTEXT_FINISHED_STATUS,
                deletedAt: null,
            })

            if (!acquiringContext) {
                throw new GQLError(ERRORS.NO_FINISHED_ACQUIRING_CONTEXT, context)
            }

            if (get(resolvedData, 'status') === INVOICE_STATUS_PUBLISHED && get(nextData, 'rows', []).length === 0) {
                throw new GQLError(ERRORS.EMPTY_ROWS, context)
            }

            // Check rows data
            const nextRows = get(nextData, 'rows', [])
            for (let i = 0; i < nextRows.length; i++) {
                if (Number(get(nextRows[i], 'count', null)) < 1) {
                    throw new GQLError(ERRORS.WRONG_COUNT(i + 1), context)
                }
                if (Number(get(nextRows[i], 'toPay', null)) < 0) {
                    throw new GQLError(ERRORS.WRONG_PRICE(i + 1), context)
                }
            }

            const hasMinPrice = nextRows.some((row) => get(row, 'isMin', false))
            if (get(nextData, 'status') === INVOICE_STATUS_PUBLISHED && hasMinPrice) {
                throw new GQLError(ERRORS.PUBLISHING_WITHOUT_DEFINED_PRICES_FORBIDDEN, context)
            }
        },

        resolveInput: async ({ context, operation, resolvedData, existingItem }) => {
            const user = get(context, ['req', 'user'])
            const userType = get(user, 'type')
            const userId = get(user, 'id')
            const resolvedContact = get(resolvedData, 'contact')
            const resolvedTicket = get(resolvedData, 'ticket')

            // Set client data from connected ticket
            if (resolvedTicket && get(existingItem, 'ticket') !== resolvedTicket) {
                const ticketWithInvoice = await getById('Ticket', resolvedTicket)

                resolvedData['property'] = ticketWithInvoice.property
                resolvedData['unitName'] = ticketWithInvoice.unitName
                resolvedData['unitType'] = ticketWithInvoice.unitType
                resolvedData['clientName'] = ticketWithInvoice.clientName
                resolvedData['clientPhone'] = ticketWithInvoice.clientPhone
                resolvedData['contact'] = ticketWithInvoice.contact
            }

            // Set contact by passed client data
            if (!resolvedContact) {
                const nextData = { ...existingItem, ...resolvedData }
                const resolvedClientName = get(resolvedData, 'clientName')
                const resolvedClientPhone = get(resolvedData, 'clientPhone')
                const propertyId = get(nextData, 'property')
                const unitName = get(nextData, 'unitName')
                const unitType = get(nextData, 'unitType')

                if (resolvedClientName && resolvedClientPhone && propertyId && unitName && unitType) {
                    const existedContact = await getByCondition('Contact', {
                        phone: resolvedClientPhone,
                        property: { id: propertyId },
                        unitName,
                        unitType,
                        deletedAt: null,
                    })

                    if (existedContact) {
                        set(resolvedData, 'contact', existedContact.id)
                    } else {
                        const property = await getById('Property', propertyId)
                        const organizationId = get(property, 'organization')

                        const newContact = await Contact.create(context, {
                            dv: get(nextData, 'dv'),
                            sender: get(nextData, 'sender'),
                            organization: { connect: { id: organizationId } },
                            property: { connect: { id: propertyId } },
                            unitName,
                            unitType,
                            phone: resolvedClientPhone,
                            name: resolvedClientName,
                        })

                        set(resolvedData, 'contact', newContact.id)
                    }
                }
            }

            const nextData = { ...existingItem, ...resolvedData }
            const nextRows = get(nextData, 'rows', [])

            if (userType === RESIDENT) {
                if (operation === 'create') {
                    set(resolvedData, 'client', userId)
                }
            } else {
                const nextContactId = get(nextData, 'contact')
                if (nextContactId) {
                    const contact = await getById('Contact', nextContactId)
                    if (contact) {
                        const nextProperty = get(nextData, 'property')
                        const nextUnitType = get(nextData, 'unitType')
                        const nextUnitName = get(nextData, 'unitName')

                        const resident = await getByCondition('Resident', {
                            user: { phone: contact.phone },
                            property: { id: nextProperty },
                            unitType: nextUnitType,
                            unitName: nextUnitName,
                            deletedAt: null,
                        })

                        set(resolvedData, 'client', get(resident, 'user', null))
                    }
                }
            }

            resolvedData['toPay'] = get(nextData, 'rows', []).reduce((sum, {
                toPay,
                count,
            }) => sum.plus(Big(toPay).mul(count)), Big(0)).toString()

            switch (get(resolvedData, 'status')) {
                case INVOICE_STATUS_PUBLISHED:
                    resolvedData['publishedAt'] = dayjs().toISOString()
                    break
                case INVOICE_STATUS_PAID:
                    resolvedData['paidAt'] = dayjs().toISOString()
                    break
                case INVOICE_STATUS_CANCELED:
                    resolvedData['canceledAt'] = dayjs().toISOString()
                    break
            }

            if (has(resolvedData, 'rows')) { // fill rows.meta with necessary data
                const marketItems = await MarketItem.getAll(context, {
                    organization: { id: get(nextData, 'organization') },
                    sku_in: map(nextRows, 'sku'),
                    deletedAt: null,
                })

                resolvedData['rows'] = nextRows.map((nextRow) => {
                    const marketItem = _find(marketItems, { sku: nextRow.sku })
                    return {
                        ...nextRow,
                        meta: {
                            imageUrl: get(marketItem, ['marketCategory', 'parentCategory', 'image', 'publicUrl']),
                            categoryBgColor: get(marketItem, ['marketCategory', 'parentCategory', 'mobileSettings', 'bgColor']),
                        },
                    }
                })
            }

            return resolvedData
        },
        afterChange: async ({ context, operation, originalInput, updatedItem }) => {
            const { client: userId, property: propertyId, unitName, unitType } = updatedItem
            await sendPush({ originalInput, userId, propertyId, unitName, unitType, updatedItem, context })
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadInvoices,
        create: access.canManageInvoices,
        update: access.canManageInvoices,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Invoice,
}
