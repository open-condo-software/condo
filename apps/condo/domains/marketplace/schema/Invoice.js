/**
 * Generated by `createschema marketplace.Invoice 'number:Integer; property:Relationship:Property:PROTECT; unitType:Text; unitName:Text; accountNumber:Text; toPay:Decimal; items:Json; contact?:Relationship:Contact:SET_NULL; client?:Relationship:User:SET_NULL; clientName?:Text; clientPhone?:Text; clientEmail?:Text'`
 */
const { get } = require('lodash')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const {
    PAYMENT_PROCESSING_STATUS,
    PAYMENT_DONE_STATUS,
    PAYMENT_WITHDRAWN_STATUS,
} = require('@condo/domains/acquiring/constants/payment')
const { Payment } = require('@condo/domains/acquiring/utils/serverSchema')
const { MONEY_AMOUNT_FIELD, UNIT_TYPE_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/marketplace/access/Invoice')
const {
    ERROR_NO_INVOICE_RECEIVERS,
    ERROR_INVOICE_ALREADY_PAID,
    INVOICE_STATUSES,
    INVOICE_STATUS_DRAFT,
    INVOICE_STATUS_PAID,
    INVOICE_STATUS_PUBLISHED,
    ERROR_INVOICE_EMPTY_ROWS,
    ERROR_INVOICE_ROW_WRONG_COUNT,
    ERROR_INVOICE_ROW_WRONG_PRICE,
} = require('@condo/domains/marketplace/constants')
const { INVOICE_ROWS_FIELD } = require('@condo/domains/marketplace/schema/fields/invoiceRows')

const ERRORS = {
    NO_RECEIVERS: {
        code: BAD_USER_INPUT,
        type: ERROR_NO_INVOICE_RECEIVERS,
        message: 'Nobody sees this invoice. You must set property+unitType+unitName or accountNumber',
        messageForUser: 'api.marketplace.invoice.error.noReceivers',
    },
    ALREADY_PAID: {
        code: BAD_USER_INPUT,
        type: ERROR_INVOICE_ALREADY_PAID,
        message: 'Changing of paid invoice is forbidden',
        messageForUser: 'api.marketplace.invoice.error.alreadyPaid',
    },
    EMPTY_ROWS: {
        code: BAD_USER_INPUT,
        type: ERROR_INVOICE_EMPTY_ROWS,
        message: 'The invoice contains no rows',
        messageForUser: 'api.marketplace.invoice.error.emptyRows',
    },
    WRONG_COUNT: (rowNumber) => ({
        code: BAD_USER_INPUT,
        type: ERROR_INVOICE_ROW_WRONG_COUNT,
        message: `Count at line ${rowNumber} can't be less than 1`,
        messageForUser: 'api.marketplace.invoice.error.rows.count',
        messageInterpolation: { rowNumber },
    }),
    WRONG_PRICE: (rowNumber) => ({
        code: BAD_USER_INPUT,
        type: ERROR_INVOICE_ROW_WRONG_PRICE,
        message: `Price at line ${rowNumber} can't be less than 0`,
        messageForUser: 'api.marketplace.invoice.error.rows.toPay',
        messageInterpolation: { rowNumber },
    }),
}

const Invoice = new GQLListSchema('Invoice', {
    schemaDoc: 'Invoice model contains information about paid items and payer',
    fields: {

        context: {
            schemaDoc: 'The invoice context the invoice was created for',
            type: 'Relationship',
            ref: 'InvoiceContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

        number: {
            schemaDoc: 'The invoice number within organization',
            type: 'AutoIncrementInteger',
            isRequired: true,
            autoIncrementScopeFields: ['context.organization'],
        },

        property: {
            schemaDoc: 'The payer\'s property',
            type: 'Relationship',
            ref: 'Property',
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        unitType: UNIT_TYPE_FIELD,

        unitName: {
            schemaDoc: 'The payer\'s unitName',
            type: 'Text',
        },

        accountNumber: {
            schemaDoc: 'The payer\'s accountNumber within organization',
            type: 'Text',
        },

        toPay: MONEY_AMOUNT_FIELD,

        rows: INVOICE_ROWS_FIELD,

        ticket: {
            schemaDoc: 'The ticket related to this invoice',
            type: 'Relationship',
            ref: 'Ticket',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        contact: {
            schemaDoc: 'The contact the invoice created for. Fill if invoice was created or connected via the ticket form',
            type: 'Relationship',
            ref: 'Contact',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        client: {
            schemaDoc: 'The user who sees the invoice. Must filled with the user of corresponding resident.',
            type: 'Relationship',
            ref: 'User',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        status: {
            schemaDoc: 'The regime of counting taxes for company',
            isRequired: true,
            type: 'Select',
            dataType: 'string',
            options: INVOICE_STATUSES,
            defaultValue: INVOICE_STATUS_DRAFT,
        },

    },
    hooks: {
        validateInput: async ({ resolvedData, operation, existingItem, context }) => {
            const nextData = { ...existingItem, ...resolvedData }
            if (!((!!nextData.property && !!nextData.unitType && !!nextData.unitName) || !!nextData.accountNumber)) {
                throw new GQLError(ERRORS.NO_RECEIVERS, context)
            }

            if (operation === 'update' && existingItem.status === INVOICE_STATUS_PAID) {
                // Prevent updating only for paid online invoices (with Payment model)
                // In the case of cash it's may be needed to uncheck the "paid" status
                const paymentsCount = await Payment.count(
                    context,
                    {
                        deletedAt: null,
                        invoice: { id: existingItem.id },
                        status_in: [
                            PAYMENT_PROCESSING_STATUS,
                            PAYMENT_DONE_STATUS,
                            PAYMENT_WITHDRAWN_STATUS,
                        ],
                    })
                if (paymentsCount > 0) {
                    throw new GQLError(ERRORS.ALREADY_PAID, context)
                }
            }

            if (get(resolvedData, 'status') === INVOICE_STATUS_PUBLISHED && get(nextData, 'rows', []).length === 0) {
                throw new GQLError(ERRORS.EMPTY_ROWS, context)
            }

            // Check rows
            const nextRows = get(nextData, 'rows', [])
            for (let i = 0; i < nextRows.length; i++) {
                if (Number(get(nextRows[i], 'count', null)) < 1) {
                    throw new GQLError(ERRORS.WRONG_COUNT(i + 1), context)
                }
                if (Number(get(nextRows[i], 'toPay', null)) < 0) {
                    throw new GQLError(ERRORS.WRONG_PRICE(i + 1), context)
                }
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadInvoices,
        create: access.canManageInvoices,
        update: access.canManageInvoices,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Invoice,
}
