/**
 * Generated by `createschema marketplace.Invoice 'number:Integer; property:Relationship:Property:PROTECT; unitType:Text; unitName:Text; accountNumber:Text; toPay:Decimal; items:Json; contact?:Relationship:Contact:SET_NULL; client?:Relationship:User:SET_NULL; clientName?:Text; clientPhone?:Text; clientEmail?:Text'`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { AutoIncrementInteger } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { MONEY_AMOUNT_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/marketplace/access/Invoice')
const {
    ERROR_NO_INVOICE_RECEIVERS,
    ERROR_INVOICE_ALREADY_PAID,
    INVOICE_STATUSES,
    INVOICE_STATUS_DRAFT, INVOICE_STATUS_PAID,
} = require('@condo/domains/marketplace/constants')
const { INVOICE_ROWS_FIELD } = require('@condo/domains/marketplace/schema/fields/invoiceRows')

const ERRORS = {
    NO_RECEIVERS: {
        code: BAD_USER_INPUT,
        type: ERROR_NO_INVOICE_RECEIVERS,
        message: 'Nobody sees this invoice. You must set property+unitType+unitName or accountNumber',
        messageForUser: 'api.marketplace.invoice.error.noReceivers',
    },
    ALREADY_PAID: {
        code: BAD_USER_INPUT,
        type: ERROR_INVOICE_ALREADY_PAID,
        message: 'Changing of paid invoice is forbidden',
        messageForUser: 'api.marketplace.invoice.error.alreadyPaid',
    },
}

const Invoice = new GQLListSchema('Invoice', {
    schemaDoc: 'Invoice model contains information about paid items and payer',
    fields: {

        context: {
            schemaDoc: 'The invoice context the invoice was created for',
            type: 'Relationship',
            ref: 'InvoiceContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

        number: {
            schemaDoc: 'The invoice number within organization',
            type: AutoIncrementInteger,
            isRequired: true,
            autoIncrementScopeFields: ['context.organization'],
        },

        property: {
            schemaDoc: 'The payer\'s property',
            type: 'Relationship',
            ref: 'Property',
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        unitType: {
            schemaDoc: 'The payer\'s unitType',
            type: 'Text',
        },

        unitName: {
            schemaDoc: 'The payer\'s unitName',
            type: 'Text',
        },

        accountNumber: {
            schemaDoc: 'The payer\'s accountNumber within organization',
            type: 'Text',
        },

        toPay: MONEY_AMOUNT_FIELD,

        rows: INVOICE_ROWS_FIELD,

        ticket: {
            schemaDoc: 'The ticket related to this invoice',
            type: 'Relationship',
            ref: 'Ticket',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        contact: {
            schemaDoc: 'The contact the invoice created for. Fill if invoice was created or connected via the ticket form',
            type: 'Relationship',
            ref: 'Contact',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        client: {
            schemaDoc: 'The user who sees the invoice. Must filled with the user of corresponding resident.',
            type: 'Relationship',
            ref: 'User',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        status: {
            schemaDoc: 'The regime of counting taxes for company',
            isRequired: true,
            type: 'Select',
            dataType: 'string',
            options: INVOICE_STATUSES,
            defaultValue: INVOICE_STATUS_DRAFT,
        },

    },
    hooks: {
        validateInput: ({ resolvedData, operation, existingItem, context }) => {
            const nextData = { ...existingItem, ...resolvedData }
            if (!((!!nextData.property && !!nextData.unitType && !!nextData.unitName) || !!nextData.accountNumber)) {
                throw new GQLError(ERRORS.NO_RECEIVERS, context)
            }

            if (operation === 'update' && existingItem.status === INVOICE_STATUS_PAID) {
                throw new GQLError(ERRORS.ALREADY_PAID, context)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadInvoices,
        create: access.canManageInvoices,
        update: access.canManageInvoices,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Invoice,
}
