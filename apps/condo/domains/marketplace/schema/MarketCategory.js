/**
 * Generated by `createschema marketplace.MarketCategory 'name:Text; parentCategory:Relationship:MarketCategory:CASCADE;'`
 */

const { Relationship, File } = require('@keystonejs/fields')
const Ajv = require('ajv')
const addFormats = require('ajv-formats')

const { GQLError } = require('@open-condo/keystone/errors')
const { LocalizedText } = require('@open-condo/keystone/fields')
const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById } = require('@open-condo/keystone/schema')

const { getGQLErrorValidator } = require('@condo/domains/common/schema/json.utils')
const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { getFileMetaAfterChange } = require('@condo/domains/common/utils/fileAdapter')
const access = require('@condo/domains/marketplace/access/MarketCategory')
const { MARKET_CATEGORY_ERRORS, ERROR_INVALID_SETTINGS } = require('@condo/domains/marketplace/constants')

const MARKET_CATEGORY_FILE_ADAPTER = new FileAdapter('market_category')
const imageMetaAfterChange = getFileMetaAfterChange(MARKET_CATEGORY_FILE_ADAPTER, 'image')

const ajv = new Ajv()
addFormats(ajv)

const settingsFieldSchema = {
    type: 'object',
    additionalProperties: false,
    required: ['bgColor', 'titleColor'],
    properties: {
        bgColor: {
            type: 'string',
            pattern: '^#(?:[0-9a-fA-F]{3}){1,2}$',
        },
        titleColor: {
            type: 'string',
            pattern: '^#(?:[0-9a-fA-F]{3}){1,2}$',
        },
    },
}
const validateSettingsField = getGQLErrorValidator(ajv.compile(settingsFieldSchema), ERROR_INVALID_SETTINGS)

const MarketCategory = new GQLListSchema('MarketCategory', {
    schemaDoc: 'An entity that allows you to define a category tree in the marketplace',
    adminDoc: 'mobileSettings={bgColor:’#rrggbb’, titleColor:’#rrggbb’}',
    fields: {

        name: {
            schemaDoc: 'Key for i18n',
            type: LocalizedText,
            isRequired: true,
            template: 'marketplace.marketCategory.*.name',
        },

        image: {
            schemaDoc: 'Preview image',
            type: File,
            isRequired: true,
            adapter: MARKET_CATEGORY_FILE_ADAPTER,
        },

        mobileSettings: {
            schemaDoc: 'Settings for mobile ui',
            type: Json,
            isRequired: true,
            hooks: {
                validateInput: (args) => {
                    validateSettingsField(args)
                },
            },
        },

        parentCategory: {
            schemaDoc: 'Which category does this subcategory belong to',
            type: Relationship,
            ref: 'MarketCategory',
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
            hooks: {
                afterChange: async (args) => {
                    await imageMetaAfterChange(args)
                },
                validateInput: async ({ resolvedData, existingItem, context }) => {
                    if (resolvedData.parentCategory) {
                        if (existingItem && resolvedData.parentCategory === existingItem.id) throw new GQLError(MARKET_CATEGORY_ERRORS.CANNOT_CONNECT_TO_ITSELF, context)
                        const parentCategoryRecord = await getById('MarketCategory', resolvedData.parentCategory)
    
                        // A->B, B->A then when drawing the category tree there will be a recursion between these two categories.
                        //Is only possible if nesting is greater than 2. So far we have a limit of 2.
                        if (parentCategoryRecord.parentCategory) throw new GQLError(MARKET_CATEGORY_ERRORS.MAXIMUM_DEPTH_REACHED, context)
                    }
                },
            },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMarketCategories,
        create: access.canManageMarketCategories,
        update: access.canManageMarketCategories,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MarketCategory,
}