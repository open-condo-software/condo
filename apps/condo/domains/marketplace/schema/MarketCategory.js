/**
 * Generated by `createschema marketplace.MarketCategory 'name:Text; parentCategory:Relationship:MarketCategory:CASCADE;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')
const get = require('lodash/get')

const { GQLError } = require('@open-condo/keystone/errors')
const { Json, LocalizedText } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/marketplace/access/MarketCategory')
const { MARKET_CATEGORY_ERRORS } = require('@condo/domains/marketplace/constants')


const MarketCategory = new GQLListSchema('MarketCategory', {
    schemaDoc: 'TODO DOC!',
    fields: {

        name: {
            schemaDoc: 'Key for i18n',
            type: LocalizedText,
            isRequired: true,
            template: 'marketplace.marketCategory.*.name',
        },

        parentCategory: {
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'MarketCategory',
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
            hooks: {
                validateInput: async ({ resolvedData, existingItem, context }) => {

                    if (resolvedData.parentCategory) {
                        const parentCategoryRecord = await getById('MarketCategory', resolvedData.parentCategory)
                        let isMaximumDepthReached = false

                        //check parentCategory is not subCategory
                        if (parentCategoryRecord.parentCategory) {
                            const secondOrderParentCategoryRecord = await getById('MarketCategory', parentCategoryRecord.parentCategory)
                            isMaximumDepthReached = secondOrderParentCategoryRecord.deletedAt === null
                        }

                        if (isMaximumDepthReached) throw new GQLError(MARKET_CATEGORY_ERRORS.MAXIMUM_DEPTH_REACHED, context)
                    }
                },
            },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMarketCategories,
        create: access.canManageMarketCategories,
        update: access.canManageMarketCategories,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MarketCategory,
}
