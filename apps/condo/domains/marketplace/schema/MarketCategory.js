/**
 * Generated by `createschema marketplace.MarketCategory 'name:Text; parentCategory:Relationship:MarketCategory:CASCADE;'`
 */

const { Relationship, File } = require('@keystonejs/fields')

const { GQLError } = require('@open-condo/keystone/errors')
const { GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { LocalizedText } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById } = require('@open-condo/keystone/schema')

const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { getFileMetaAfterChange } = require('@condo/domains/common/utils/fileAdapter')
const access = require('@condo/domains/marketplace/access/MarketCategory')
const { MOBILE_SETTINGS_FIELD } = require('@condo/domains/marketplace/schema/fields/mobileSettings')

const ERRORS = {
    MAXIMUM_DEPTH_REACHED: {
        code: BAD_USER_INPUT,
        type: 'MAXIMUM_DEPTH_REACHED',
        message: 'The depth of category inheritance should be no more than 2',
        messageForUser: 'api.marketplace.MarketCategory.MAXIMUM_DEPTH_REACHED',
    },
    CANNOT_CONNECT_TO_ITSELF: {
        code: BAD_USER_INPUT,
        type: 'CANNOT_CONNECT_TO_ITSELF',
        message: 'Cannot connect to itself',
        messageForUser: 'api.marketplace.MarketCategory.CANNOT_CONNECT_TO_ITSELF',
    },
}

const MARKET_CATEGORY_FILE_ADAPTER = new FileAdapter('market_category')
const imageMetaAfterChange = getFileMetaAfterChange(MARKET_CATEGORY_FILE_ADAPTER, 'image')

const MarketCategory = new GQLListSchema('MarketCategory', {
    schemaDoc: 'An entity that allows you to define a category tree in the marketplace',
    fields: {

        name: {
            schemaDoc: 'The category name',
            type: LocalizedText,
            isRequired: true,
            template: 'marketplace.marketCategory.*.name',
        },

        image: {
            schemaDoc: 'Preview image',
            type: File,
            isRequired: true,
            adapter: MARKET_CATEGORY_FILE_ADAPTER,
        },

        mobileSettings: MOBILE_SETTINGS_FIELD,

        parentCategory: {
            schemaDoc: 'Which category does this subcategory belong to',
            type: Relationship,
            ref: 'MarketCategory',
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
            hooks: {
                validateInput: async ({ resolvedData, existingItem, context }) => {
                    if (resolvedData.parentCategory) {
                        if (existingItem && resolvedData.parentCategory === existingItem.id) throw new GQLError(ERRORS.CANNOT_CONNECT_TO_ITSELF, context)
                        const parentCategoryRecord = await getById('MarketCategory', resolvedData.parentCategory)

                        // A->B, B->A then when drawing the category tree there will be a recursion between these two categories.
                        //Is only possible if nesting is greater than 2. So far we have a limit of 2.
                        if (parentCategoryRecord.parentCategory) throw new GQLError(ERRORS.MAXIMUM_DEPTH_REACHED, context)
                    }
                },
            },
        },

        order: {
            schemaDoc: 'The number used for sorting at the client. It\'s possible to sort categories any manner. For example, set some category to the bottom by setting order=100 and sorting asc.',
            type: 'Integer',
            defaultValue: 0,
        },
    },
    hooks: {
        afterChange: async (args) => {
            await imageMetaAfterChange(args)
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMarketCategories,
        create: access.canManageMarketCategories,
        update: access.canManageMarketCategories,
        delete: false,
        auth: true,
    },
    escapeSearch: true,
})

module.exports = {
    MarketCategory,
    ERRORS,
}
