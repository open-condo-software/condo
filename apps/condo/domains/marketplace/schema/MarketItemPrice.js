/**
 * Generated by `createschema marketplace.MarketItemPrice 'price:Json; marketItem:Relationship:MarketItem:CASCADE; organization:Relationship:Organization:CASCADE;'`
 */

const { chunk, get, map, pick } = require('lodash')

const { isSoftDelete } = require('@open-condo/keystone/access')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { find } = require('@open-condo/keystone/schema')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/marketplace/access/MarketItemPrice')
const { PRICE_FIELD } = require('@condo/domains/marketplace/schema/fields/price')
const { MarketPriceScope } = require('@condo/domains/marketplace/utils/serverSchema')

const ERRORS = {
    INVALID_SALES_TAX_PERCENT: (rowNumber) => ({
        code: BAD_USER_INPUT,
        type: 'INVALID_SALES_TAX_PERCENT',
        messageForUser: 'api.marketplace.MarketItemPrice.error.INVALID_SALES_TAX_PERCENT',
        messageInterpolation: { rowNumber },
        message: `Invalid sales tax percent on line ${rowNumber}. Must be greater or equal to 0 and less or equal to 100.`,
    }),
    INVALID_PRICE: (rowNumber) => ({
        code: BAD_USER_INPUT,
        type: 'INVALID_PRICE',
        messageForUser: 'api.marketplace.MarketItemPrice.error.INVALID_PRICE',
        messageInterpolation: { rowNumber },
        message: `Invalid price on line ${rowNumber}. Must be greater or equal to 0.`,
    }),
    EMPTY_PRICE: {
        code: BAD_USER_INPUT,
        type: 'EMPTY_PRICE',
        messageForUser: 'api.marketplace.MarketItemPrice.error.EMPTY_PRICE',
        message: 'Price cannot be empty.',
    },
}

const MarketItemPrice = new GQLListSchema('MarketItemPrice', {
    schemaDoc: 'MarketItemPrice is set separately from MarketItem and indicates the price of the service.',
    fields: {

        price: PRICE_FIELD,

        marketItem: {
            schemaDoc: 'Link to MarketItem',
            type: 'Relationship',
            ref: 'MarketItem',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

    },
    hooks: {
        validateInput: ({ resolvedData, existingItem, context }) => {
            const nextData = { ...existingItem, ...resolvedData }
            // Check rows
            const prices = get(nextData, 'price', [])
            if (prices.length === 0) throw new GQLError(ERRORS.EMPTY_PRICE, context)
            for (let i = 0; i < prices.length; i++) {
                const salesTaxPercent = Number(get(prices[i], 'salesTaxPercent', null))
                if (salesTaxPercent < 0 || salesTaxPercent > 100) {
                    throw new GQLError(ERRORS.INVALID_SALES_TAX_PERCENT(i + 1), context)
                }
                if (Number(get(prices[i], 'price', null)) < 0) {
                    throw new GQLError(ERRORS.INVALID_PRICE(i + 1), context)
                }
            }
        },
        afterChange: async ({ operation, originalInput, context, existingItem, updatedItem }) => {
            const isSoftDeleteOperation = operation === 'update' && existingItem && isSoftDelete(originalInput)

            if (isSoftDeleteOperation) {
                const priceScopes = await find('MarketPriceScope', {
                    marketItemPrice: { id: existingItem.id },
                    deletedAt: null,
                })

                const chunks = chunk(map(priceScopes, 'id'), 50)

                for (const chunk of chunks) {
                    await MarketPriceScope.softDeleteMany(context, chunk, pick(existingItem, ['dv', 'sender']))
                }
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMarketItemPrices,
        create: access.canManageMarketItemPrices,
        update: access.canManageMarketItemPrices,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MarketItemPrice,
}
