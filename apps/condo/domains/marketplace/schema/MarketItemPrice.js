/**
 * Generated by `createschema marketplace.MarketItemPrice 'price:Json; marketItem:Relationship:MarketItem:CASCADE; organization:Relationship:Organization:CASCADE;'`
 */

const get = require('lodash/get')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema  } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/marketplace/access/MarketItemPrice')
const { PRICE_FIELD } = require('@condo/domains/marketplace/schema/fields/price')


const ERRORS = {
    INVALID_SALES_TAX_PERCENT: {
        code: BAD_USER_INPUT,
        type: 'INVALID_SALES_TAX_PERCENT',
        message: 'INVALID_SALES_TAX_PERCENT',
        messageForUser: 'api.marketplace.MarketPrice.INVALID_SALES_TAX_PERCENT',
    },
    INVALID_PRICE: {
        code: BAD_USER_INPUT,
        type: 'INVALID_PRICE',
        message: 'INVALID_PRICE',
        messageForUser: 'api.marketplace.MarketPrice.INVALID_PRICE',
    },
}

const MarketItemPrice = new GQLListSchema('MarketItemPrice', {
    schemaDoc: 'MarketItemPrice is set separately from MarketItem and indicates the price of the service.',
    fields: {

        price: PRICE_FIELD,

        marketItem: {
            schemaDoc: 'Link to MarketItem',
            type: 'Relationship',
            ref: 'MarketItem',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

    },
    hooks: {
        validateInput: ({ resolvedData, existingItem, context }) => {
            const salesTaxPercent = get(resolvedData, 'price.salesTaxPercent')
            const itemPrice = get(resolvedData, 'price.price')
            if (salesTaxPercent && Number(salesTaxPercent) < 0) throw new GQLError(ERRORS.INVALID_SALES_TAX_PERCENT, context)
            if (itemPrice && Number(itemPrice) <= 0) throw new GQLError(ERRORS.INVALID_PRICE, context)
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMarketItemPrices,
        create: access.canManageMarketItemPrices,
        update: access.canManageMarketItemPrices,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MarketItemPrice,
}
