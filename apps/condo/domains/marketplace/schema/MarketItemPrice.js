/**
 * Generated by `createschema marketplace.MarketItemPrice 'price:Json; marketItem:Relationship:MarketItem:CASCADE; organization:Relationship:Organization:CASCADE;'`
 */

const Ajv = require('ajv')
const addFormats = require('ajv-formats')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { getGQLErrorValidator } = require('@condo/domains/common/schema/json.utils')
const access = require('@condo/domains/marketplace/access/MarketItemPrice')
const { ERROR_INVALID_PRICE, PRICE_FIELD_SCHEMA } = require('@condo/domains/marketplace/constants')


const ajv = new Ajv()
addFormats(ajv)
const validatePriceField = getGQLErrorValidator(ajv.compile(PRICE_FIELD_SCHEMA), ERROR_INVALID_PRICE)

const MarketItemPrice = new GQLListSchema('MarketItemPrice', {
    schemaDoc: 'MarketItemPrice is set separately from MarketItem and indicates the price of the service.',
    fields: {

        price: {
            schemaDoc: 'The price field contains information about options (type=variant) and additional services (type=extra). ' +
                'Options are grouped by the group field and offer the choice of one option from the group. ' +
                'Extras are not grouped in any way and can be selected independently. ' +
                'The price may not be final but minimum. To do this, we use the isMin field.',
            type: 'Json',
            isRequired: true,
            hooks: {
                validateInput: validatePriceField,
            },
        },

        marketItem: {
            schemaDoc: 'Link to MarketItem',
            type: 'Relationship',
            ref: 'MarketItem',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        organization: {
            schemaDoc: 'Link to Organization',
            type: 'Relationship',
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMarketItemPrices,
        create: access.canManageMarketItemPrices,
        update: access.canManageMarketItemPrices,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MarketItemPrice,
}
