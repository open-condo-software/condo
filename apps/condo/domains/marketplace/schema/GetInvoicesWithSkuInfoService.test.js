/**
 * Generated by `createservice marketplace.GetInvoiceByUserService '--type=queries'`
 */

const { faker } = require('@faker-js/faker')

const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowAuthenticationError,
} = require('@open-condo/keystone/test.utils')

const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/acquiring/constants/context')
const { createTestAcquiringIntegration, createTestAcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/testSchema')
const { createTestRecipient } = require('@condo/domains/billing/utils/testSchema')
const { INVOICE_STATUS_PUBLISHED } = require('@condo/domains/marketplace/constants')
const {
    getInvoiceByUserByTestClient,
    generateInvoiceRow,
    createTestInvoice,
    createTestMarketCategory,
    createTestMarketItem,
} = require('@condo/domains/marketplace/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { registerResidentByTestClient } = require('@condo/domains/resident/utils/testSchema')
const { createTestTicket } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')

describe('GetInvoiceByUserService', () => {
    let admin
    let acquiringIntegration
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        ;[acquiringIntegration] = await createTestAcquiringIntegration(admin)
    })
    test('resident: execute without property', async () => {
        const [organization] = await createTestOrganization(admin)
        await createTestAcquiringIntegrationContext(admin, organization, acquiringIntegration, {
            invoiceStatus: CONTEXT_FINISHED_STATUS,
            invoiceRecipient: createTestRecipient(),
            invoiceImplicitFeeDistributionSchema: [{
                recipient: 'organization',
                percent: '5',
            }],
        })
        const [property] = await createTestProperty(admin, organization)

        const residentClient = await makeClientWithResidentUser()
        const unitType = FLAT_UNIT_TYPE
        const unitName = faker.lorem.word()
        await registerResidentByTestClient(
            residentClient,
            {
                address: property.address,
                addressMeta: property.addressMeta,
                unitType,
                unitName,
            },
        )

        const [marketCategory] = await createTestMarketCategory(admin)
        const [marketItem] = await createTestMarketItem(admin, marketCategory, organization)
        const [invoice] = await createTestInvoice(admin, organization, {
            status: INVOICE_STATUS_PUBLISHED,
            client: { connect: { id: residentClient.user.id } },
            rows: generateInvoiceRow({
                sku: marketItem.sku,
            }),
        })

        const [data] = await getInvoiceByUserByTestClient(residentClient, { organization: { id: organization.id } })
        expect(data.invoices).toHaveLength(1)
        expect(data.skuInfo).toHaveLength(1)
        expect(data.invoices[0].id).toEqual(invoice.id)
        expect(data.skuInfo[0].sku).toEqual(marketItem.sku)
        expect(data.skuInfo[0].imageUrl).toEqual(marketCategory.image.publicUrl)
        expect(data.skuInfo[0].categoryBgColor).toEqual(marketCategory.mobileSettings.bgColor)
    })

    test('resident: execute with property', async () => {
        const [organization] = await createTestOrganization(admin)
        await createTestAcquiringIntegrationContext(admin, organization, acquiringIntegration, {
            invoiceStatus: CONTEXT_FINISHED_STATUS,
            invoiceRecipient: createTestRecipient(),
            invoiceImplicitFeeDistributionSchema: [{
                recipient: 'organization',
                percent: '5',
            }],
        })
        const [property] = await createTestProperty(admin, organization)

        const residentClient = await makeClientWithResidentUser()
        const unitType = FLAT_UNIT_TYPE
        const unitName = faker.lorem.word()
        await registerResidentByTestClient(
            residentClient,
            {
                address: property.address,
                addressMeta: property.addressMeta,
                unitType,
                unitName,
            },
        )

        const [marketCategory] = await createTestMarketCategory(admin)
        const [marketItem] = await createTestMarketItem(admin, marketCategory, organization)
        const [invoice] = await createTestInvoice(admin, organization, {
            status: INVOICE_STATUS_PUBLISHED,
            client: { connect: { id: residentClient.user.id } },
            property: { connect: { id: property.id } },
            rows: generateInvoiceRow({
                sku: marketItem.sku,
            }),
        })

        const [data] = await getInvoiceByUserByTestClient(residentClient, {
            organization: { id: organization.id },
            property: { id: property.id },
        })
        expect(data.invoices).toHaveLength(1)
        expect(data.skuInfo).toHaveLength(1)
        expect(data.invoices[0].id).toEqual(invoice.id)
        expect(data.skuInfo[0].sku).toEqual(marketItem.sku)
        expect(data.skuInfo[0].imageUrl).toEqual(marketCategory.image.publicUrl)
    })

    test('two residents at different properties: the 1st can see the invoice, the 2nd can\'t', async () => {
        const [organization] = await createTestOrganization(admin)
        await createTestAcquiringIntegrationContext(admin, organization, acquiringIntegration, {
            invoiceStatus: CONTEXT_FINISHED_STATUS,
            invoiceRecipient: createTestRecipient(),
            invoiceImplicitFeeDistributionSchema: [{
                recipient: 'organization',
                percent: '5',
            }],
        })
        const [property] = await createTestProperty(admin, organization)
        const [property2] = await createTestProperty(admin, organization)

        const residentClient = await makeClientWithResidentUser()
        const residentClient2 = await makeClientWithResidentUser()
        const unitType = FLAT_UNIT_TYPE
        const unitName = faker.lorem.word()
        await registerResidentByTestClient(
            residentClient,
            {
                address: property.address,
                addressMeta: property.addressMeta,
                unitType,
                unitName,
            },
        )
        await registerResidentByTestClient(
            residentClient,
            {
                address: property2.address,
                addressMeta: property2.addressMeta,
                unitType,
                unitName,
            },
        )

        const [marketCategory] = await createTestMarketCategory(admin)
        const [marketItem] = await createTestMarketItem(admin, marketCategory, organization)
        const [invoice] = await createTestInvoice(admin, organization, {
            status: INVOICE_STATUS_PUBLISHED,
            client: { connect: { id: residentClient.user.id } },
            property: { connect: { id: property.id } },
            rows: generateInvoiceRow({
                sku: marketItem.sku,
            }),
        })

        const [data] = await getInvoiceByUserByTestClient(residentClient, {
            organization: { id: organization.id },
            property: { id: property.id },
        })
        expect(data.invoices).toHaveLength(1)
        expect(data.skuInfo).toHaveLength(1)
        expect(data.invoices[0].id).toEqual(invoice.id)
        expect(data.skuInfo[0].sku).toEqual(marketItem.sku)
        expect(data.skuInfo[0].imageUrl).toEqual(marketCategory.image.publicUrl)

        const [data2] = await getInvoiceByUserByTestClient(residentClient2, {
            organization: { id: organization.id },
            property: { id: property.id },
        })
        expect(data2.invoices).toHaveLength(0)
        expect(data2.skuInfo).toHaveLength(0)
    })

    test('anonymous: execute', async () => {
        const client = await makeClient()
        await expectToThrowAuthenticationError(async () => {
            await getInvoiceByUserByTestClient(client, {
                organization: { id: 'id' },
            })
        }, 'obj')
    })

    test('admin: execute', async () => {
        const [organization] = await createTestOrganization(admin)
        await createTestAcquiringIntegrationContext(admin, organization, acquiringIntegration, {
            invoiceStatus: CONTEXT_FINISHED_STATUS,
            invoiceRecipient: createTestRecipient(),
            invoiceImplicitFeeDistributionSchema: [{
                recipient: 'organization',
                percent: '5',
            }],
        })

        const [marketCategory] = await createTestMarketCategory(admin)
        const [marketItem] = await createTestMarketItem(admin, marketCategory, organization)
        const [invoice] = await createTestInvoice(admin, organization, {
            status: INVOICE_STATUS_PUBLISHED,
            client: { connect: { id: admin.user.id } },
            rows: generateInvoiceRow({
                sku: marketItem.sku,
            }),
        })

        const [data] = await getInvoiceByUserByTestClient(admin, { organization: { id: organization.id } })
        expect(data.invoices).toHaveLength(1)
        expect(data.skuInfo).toHaveLength(1)
        expect(data.invoices[0].id).toEqual(invoice.id)
        expect(data.skuInfo[0].sku).toEqual(marketItem.sku)
        expect(data.skuInfo[0].imageUrl).toEqual(marketCategory.image.publicUrl)
    })

    test('admin: execute with ticketIds', async () => {
        const [organization] = await createTestOrganization(admin)
        await createTestAcquiringIntegrationContext(admin, organization, acquiringIntegration, {
            invoiceStatus: CONTEXT_FINISHED_STATUS,
            invoiceRecipient: createTestRecipient(),
            invoiceImplicitFeeDistributionSchema: [{
                recipient: 'organization',
                percent: '5',
            }],
        })
        const [property] = await createTestProperty(admin, organization)

        const [ticket] = await createTestTicket(admin, organization, property, {
            client: { connect: { id: admin.user.id } },
        })

        const [marketCategory] = await createTestMarketCategory(admin)
        const [marketItem] = await createTestMarketItem(admin, marketCategory, organization)
        const [invoice] = await createTestInvoice(admin, organization, {
            status: INVOICE_STATUS_PUBLISHED,
            client: { connect: { id: admin.user.id } },
            ticket: { connect: { id: ticket.id } },
            rows: generateInvoiceRow({
                sku: marketItem.sku,
            }),
        })

        const [data] = await getInvoiceByUserByTestClient(admin, {
            organization: { id: organization.id },
            ticketIds: [ticket.id],
        })
        expect(data.invoices).toHaveLength(1)
        expect(data.skuInfo).toHaveLength(1)
        expect(data.invoices[0].id).toEqual(invoice.id)
        expect(data.skuInfo[0].sku).toEqual(marketItem.sku)
        expect(data.skuInfo[0].imageUrl).toEqual(marketCategory.image.publicUrl)
    })
})
