/**
 * Generated by `createservice marketplace.GetInvoiceByUserService '--type=queries'`
 */

const { get, isEmpty } = require('lodash')

const { GQLCustomSchema } = require('@open-condo/keystone/schema')
const { find } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/marketplace/access/GetInvoiceByUserService')
const { MarketItem } = require('@condo/domains/marketplace/utils/serverSchema')


const GetInvoicesWithSkuInfoService = new GQLCustomSchema('GetInvoicesWithSkuInfoService', {
    types: [
        {
            access: true,
            type: 'input GetInvoicesWithSkuInfoInput { organization: OrganizationWhereUniqueInput!, property: PropertyWhereUniqueInput, ticketIds: [ID!] }',
        },
        {
            access: true,
            type: 'type MarketSkuInfo { sku: String! imageUrl: String! categoryBgColor: String! }',
        },
        {
            access: true,
            type: 'type GetInvoicesWithSkuInfoOutput { invoices: [Invoice!]!, skuInfo: [MarketSkuInfo!]! }',
        },
    ],

    queries: [
        {
            access: access.canGetInvoiceByUser,
            schema: 'getInvoicesWithSkuInfo (data: GetInvoicesWithSkuInfoInput!): GetInvoicesWithSkuInfoOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { organization, property, ticketIds } } = args
                const userId = get(context, ['authedItem', 'id'])
                const propertyId = get(property, 'id')
                const organizationId = get(organization, 'id')

                const where = {
                    deletedAt: null,
                    client: { id: userId },
                    organization: { id: organizationId },
                }
                if (propertyId) where.property = { id: propertyId }
                if (!isEmpty(ticketIds)) where.ticket = { id_in: ticketIds }

                const marketItemWhere = {
                    deletedAt: null,
                    sku_in: [],
                    organization: { id: organizationId },
                }

                const invoices = await find('Invoice', where)

                for (const invoice of invoices) {
                    marketItemWhere.sku_in.push(...invoice.rows.map(({ sku }) => sku))
                }

                const marketItems = await MarketItem.getAll(context, marketItemWhere)
                const skuInfo = marketItems.map(item => ({
                    sku: item.sku,
                    imageUrl: get(item, 'marketCategory.image.publicUrl', null),
                    categoryBgColor: get(item, 'marketCategory.mobileSettings.bgColor', null),
                }))

                return {
                    invoices,
                    skuInfo,
                }
            },
        },
    ],

})

module.exports = {
    GetInvoicesWithSkuInfoService,
}
