/**
 * Generated by `createschema marketplace.MarketItem 'name:Text; marketCategory:Relationship:MarketCategory:SET_NULL; sku:Text; description:Text; organization:Relationship:Organization:CASCADE;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, expectValuesOfCommonFields, expectToThrowUniqueConstraintViolationError } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { MarketItem, createTestMarketItem, updateTestMarketItem, createTestMarketCategory } = require('@condo/domains/marketplace/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestResident, createTestServiceConsumer } = require('@condo/domains/resident/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithResidentUser } = require('@condo/domains/user/utils/testSchema')

describe('MarketItem', () => {
    let admin, organization, marketCategory
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient();
        [marketCategory] = await createTestMarketCategory(admin);
        [organization] = await createTestOrganization(admin)
    })
    describe('Accesses', () => {
        describe('admin', () => {
            test('can create', async () => {
                const [obj, attrs] = await createTestMarketItem(admin, marketCategory, organization)
                expectValuesOfCommonFields(obj, attrs, admin)
            })

            test('can update', async () => {
                const [objCreated] = await createTestMarketItem(admin, marketCategory, organization)
                const [obj, attrs] = await updateTestMarketItem(admin, objCreated.id)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketItem.delete(admin, 'id')
                })
            })

            test('can read', async () => {
                const [obj] = await createTestMarketItem(admin, marketCategory, organization)

                const objs = await MarketItem.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })
        })

        describe('support', () => {
            let client
            beforeAll(async () => {
                client = await makeClientWithSupportUser()
            })

            test('can create', async () => {
                const [obj, attrs] = await createTestMarketItem(client, marketCategory, organization)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('can update', async () => {
                const [objCreated] = await createTestMarketItem(client, marketCategory, organization)
                const [obj, attrs] = await updateTestMarketItem(client, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketItem.delete(client, 'id')
                })
            })

            test('can read', async () => {
                const [obj] = await createTestMarketItem(client, marketCategory, organization)

                const objs = await MarketItem.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })
        })

        describe('employee with access', () => {
            let organization, client
            beforeAll(async () => {
                [organization] = await createTestOrganization(admin)
                client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canReadMarketItems: true,
                    canManageMarketItems: true,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)
            })

            test('can create', async () => {
                const [obj, attrs] = await createTestMarketItem(client, marketCategory, organization)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('can update', async () => {
                const [objCreated] = await createTestMarketItem(client, marketCategory, organization)
                const [obj, attrs] = await updateTestMarketItem(client, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketItem.delete(client, 'id')
                })
            })

            test('can read', async () => {
                const [obj] = await createTestMarketItem(client, marketCategory, organization)

                const objs = await MarketItem.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })
        })

        describe('employee without access', () => {
            let organization, client
            beforeAll(async () => {
                [organization] = await createTestOrganization(admin)
                client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canReadMarketItems: false,
                    canManageMarketItems: false,
                })
                await createTestOrganizationEmployee(admin, organization, client.user, role)
            })

            test('can\'t create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMarketItem(client, marketCategory, organization)
                })
            })

            test('can\'t update', async () => {
                const [objCreated] = await createTestMarketItem(admin, marketCategory, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMarketItem(client, objCreated.id)
                })
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketItem.delete(client, 'id')
                })
            })

            test('can\'t read', async () => {
                await createTestMarketItem(admin, marketCategory, organization)

                const objs = await MarketItem.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(0)
            })
        })

        describe('anonymus', () => {
            let organization, client
            beforeAll(async () => {
                [organization] = await createTestOrganization(admin)
                client = await makeClient()
            })
            test('can\'t create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestMarketItem(client, marketCategory, organization)
                })
            })

            test('can\'t update', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestMarketItem(client, 'id')
                })
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketItem.delete(client, 'id')
                })
            })

            test('can\'t read', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await MarketItem.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })

        describe('resident', () => {
            let organization, client
            beforeAll(async () => {
                [organization] = await createTestOrganization(admin)
                client = await makeClientWithResidentUser()
                const unitName = faker.random.alphaNumeric(8)
                const accountNumber = faker.random.alphaNumeric(8)

                const [property] = await createTestProperty(admin, organization)
                const [resident] = await createTestResident(admin, client.user, property, {
                    unitName,
                })
                await createTestServiceConsumer(admin, resident, organization, {
                    accountNumber,
                })
            })

            test('can\'t create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMarketItem(client, marketCategory, organization)
                })
            })

            test('can\'t update', async () => {
                const [objCreated] = await createTestMarketItem(admin, marketCategory, organization)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMarketItem(client, objCreated.id)
                })
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await MarketItem.delete(client, 'id')
                })
            })

            test('can read MarketItem of his organization', async () => {
                const [obj] = await createTestMarketItem(admin, marketCategory, organization)

                const objs = await MarketItem.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })
            // TODO (DOMA-7503) test('Resident can read items according to PriceScope settings')
        })

    })

    describe('constraint tests', () => {
        test('can\'t create two MarketItem with same sku in one organization', async () => {
            const sku = faker.random.alphaNumeric(8)
            await createTestMarketItem(admin, marketCategory, organization, {
                sku,
            })
            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestMarketItem(admin, marketCategory, organization, {
                    sku,
                })
            }, 'MarketItem_unique_organization_sku')
        })

        test('can create two MarketItem with different sku in one organization', async () => {
            await createTestMarketItem(admin, marketCategory, organization, {
                sku: faker.random.alphaNumeric(8),
            })
            await createTestMarketItem(admin, marketCategory, organization, {
                sku: faker.random.alphaNumeric(8),
            })
        })
    })
})
