/**
 * Generated by `createschema marketplace.MarketItemFile 'marketItem:Relationship:MarketItem:CASCADE; file:File;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { getFileMetaAfterChange } = require('@condo/domains/common/utils/fileAdapter')
const access = require('@condo/domains/marketplace/access/MarketItemFile')
const { addOrganizationFieldPlugin } = require('@condo/domains/organization/schema/plugins/addOrganizationFieldPlugin')


const MARKET_ITEM_FILE_FOLDER_NAME = 'marketitemfile'
const Adapter = new FileAdapter(MARKET_ITEM_FILE_FOLDER_NAME)
const fileMetaAfterChange = getFileMetaAfterChange(Adapter)

const MarketItemFile = new GQLListSchema('MarketItemFile', {
    schemaDoc: 'File attached to the market item',
    fields: {

        marketItem: {
            schemaDoc: 'Link to MarketItem',
            type: Relationship,
            ref: 'MarketItem',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        file: {
            schemaDoc: 'File object with meta information and publicUrl',
            type: File,
            adapter: Adapter,
            isRequired: true,
        },

    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization', 'marketItem'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'MarketItemFile_unique_organization_marketItem',
            },
        ],
    },
    hooks: {
        afterChange: fileMetaAfterChange,
        // afterDelete: async ({ existingItem }) => {
        //     await Adapter.delete(existingItem.file)
        // },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), addOrganizationFieldPlugin({ fromField: 'marketItem', isRequired: true }), historical()],
    access: {
        read: access.canReadMarketItemFiles,
        create: access.canManageMarketItemFiles,
        update: access.canManageMarketItemFiles,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MarketItemFile,
}
