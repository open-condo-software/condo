/**
 * Generated by `createschema marketplace.InvoiceContext 'organization:Relationship:Organization:PROTECT; recipient:Json; email:Text; settings:Json; state:Json;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const { faker } = require('@faker-js/faker')

const { generateServerUtils, execGqlWithoutAccess } = require('@open-condo/codegen/generate.server.utils')

const { generateGQLTestUtils, throwIfError } = require('@open-condo/codegen/generate.test.utils')

const { InvoiceContext: InvoiceContextGQL } = require('@condo/domains/marketplace/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const InvoiceContext = generateGQLTestUtils(InvoiceContextGQL)

/* AUTOGENERATE MARKER <CONST> */

async function createTestInvoiceContext (client, organization, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        organization: { connect: { id: organization.id } },
        implicitFeePercent: String(faker.datatype.number({ min: 1, max: 10 })),
        ...extraAttrs,
    }
    const obj = await InvoiceContext.create(client, attrs)
    return [obj, attrs]
}

async function updateTestInvoiceContext (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await InvoiceContext.update(client, id, attrs)
    return [obj, attrs]
}

/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    InvoiceContext, createTestInvoiceContext, updateTestInvoiceContext,
/* AUTOGENERATE MARKER <EXPORTS> */
}
