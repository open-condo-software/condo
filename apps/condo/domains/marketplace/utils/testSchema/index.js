/**
 * Generated by `createschema marketplace.InvoiceContext 'organization:Relationship:Organization:PROTECT; recipient:Json; email:Text; settings:Json; state:Json;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const Big = require('big.js')
const { faker } = require('@faker-js/faker')
const path = require('path')
const conf = require('@open-condo/config')
const { UploadingFile } = require('@open-condo/keystone/test.utils')

const { generateGQLTestUtils, throwIfError } = require('@open-condo/codegen/generate.test.utils')

const { InvoiceContext: InvoiceContextGQL, Invoice: InvoiceGQL } = require('@condo/domains/marketplace/gql')
const { MarketCategory: MarketCategoryGQL } = require('@condo/domains/marketplace/gql')
const { MarketItem: MarketItemGQL } = require('@condo/domains/marketplace/gql')
const { VAT_OPTIONS, TAX_REGIME_GENEGAL } = require('@condo/domains/marketplace/constants')
const { MarketItemFile: MarketItemFileGQL } = require('@condo/domains/marketplace/gql')
const { MarketItemPrice: MarketItemPriceGQL } = require('@condo/domains/marketplace/gql')
const { MarketPriceScope: MarketPriceScopeGQL } = require('@condo/domains/marketplace/gql')
const { REGISTER_INVOICE_MUTATION } = require('@condo/domains/marketplace/gql')
const { GET_INVOICE_BY_USER_QUERY } = require('@condo/domains/marketplace/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const InvoiceContext = generateGQLTestUtils(InvoiceContextGQL)
const MarketCategory = generateGQLTestUtils(MarketCategoryGQL)
const MarketItem = generateGQLTestUtils(MarketItemGQL)
const Invoice = generateGQLTestUtils(InvoiceGQL)

const MarketItemFile = generateGQLTestUtils(MarketItemFileGQL)
const MarketItemPrice = generateGQLTestUtils(MarketItemPriceGQL)
const MarketPriceScope = generateGQLTestUtils(MarketPriceScopeGQL)

/* AUTOGENERATE MARKER <CONST> */

async function createTestInvoiceContext (client, organization, integration, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    if (!integration || !integration.id) throw new Error('no integration.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        integration: { connect: { id: integration.id } },
        organization: { connect: { id: organization.id } },
        taxRegime: TAX_REGIME_GENEGAL,
        currencyCode: 'RUB',
        ...extraAttrs,
    }
    const obj = await InvoiceContext.create(client, attrs)
    return [obj, attrs]
}

async function updateTestInvoiceContext (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await InvoiceContext.update(client, id, attrs)
    return [obj, attrs]
}

const TEST_FILE = path.resolve(conf.PROJECT_ROOT, 'apps/condo/domains/common/test-assets/dino.png')

async function createTestMarketCategory (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        name: sender.fingerprint,
        image: new UploadingFile(TEST_FILE),
        mobileSettings: { bgColor: '#fff', titleColor: '#fff' },
        ...extraAttrs,
    }
    const obj = await MarketCategory.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMarketCategory (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MarketCategory.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestMarketItem (client, marketCategory, organization, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!marketCategory || !marketCategory.id) throw new Error('no marketCategory.id')
    if (!organization || !organization.id) throw new Error('no organization.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        sku: sender.fingerprint,
        name: sender.fingerprint,
        marketCategory: { connect: { id: marketCategory.id } },
        organization: { connect: { id: organization.id } },
        ...extraAttrs,
    }
    const obj = await MarketItem.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMarketItem (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MarketItem.update(client, id, attrs)
    return [obj, attrs]
}

function generateInvoiceRow (attrs = {}) {
    return {
        name: faker.commerce.productName(),
        toPay: String(faker.commerce.price()),
        count: faker.datatype.number({ min: 1, max: 3 }),
        currencyCode: 'RUB',
        vatPercent: String(VAT_OPTIONS[0]),
        salesTaxPercent: String(faker.datatype.number({ min: 0, max: 7 })),
        sku: faker.random.word(),
        isMin: false,
        ...attrs,
    }
}

/**
 * @param {Number} rowsCount
 * @returns {*[]}
 */
function generateInvoiceRows (rowsCount = null) {
    const count = rowsCount || faker.datatype.number({ min: 1, max: 5 })
    const rows = []
    for (let i = 0; i < count; i++) {
        rows.push(generateInvoiceRow())
    }

    return rows
}

function generatePriceRow (attrs = {}) {
    return {
        type: 'variant',
        group: faker.word.noun(),
        name: faker.commerce.productName(),
        price: String(faker.commerce.price()),
        isMin: false,
        vatPercent: String(VAT_OPTIONS[0]),
        salesTaxPercent: String(faker.datatype.number({ min: 0, max: 3 })),
        ...attrs,
    }
}

/**
 * @param {Number} rowsCount
 * @returns {*[]}
 */
function generatePriceRows (rowsCount) {
    const count = rowsCount || faker.datatype.number({ min: 1, max: 5 })
    const rows = []
    for (let i = 0; i < count; i++) {
        rows.push(generatePriceRow())
    }

    return rows
}

async function createTestInvoice (client, invoiceContext, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!invoiceContext || !invoiceContext.id) throw new Error('no invoiceContext.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const rows = generateInvoiceRows()
    const toPay = rows.reduce((result, row) => result.plus(Big(row.toPay).times(Big(row.count))), Big('0.0'))

    const attrs = {
        dv: 1,
        sender,
        context: { connect: { id: invoiceContext.id } },
        rows,
        toPay,
        accountNumber: faker.random.alphaNumeric(13),
        ...extraAttrs,
    }
    const obj = await Invoice.create(client, attrs)
    return [obj, attrs]
}

async function updateTestInvoice (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await Invoice.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestMarketItemFile (client, marketItem, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!marketItem || !marketItem.id) throw new Error('no marketItem.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        file: new UploadingFile(TEST_FILE),
        marketItem: { connect: { id: marketItem.id } },
        ...extraAttrs,
    }
    const obj = await MarketItemFile.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMarketItemFile (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MarketItemFile.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestMarketItemPrice (client, marketItem, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!marketItem || !marketItem.id) throw new Error('no marketItem.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        marketItem: { connect: { id: marketItem.id } },
        price: generatePriceRows(1),
        ...extraAttrs,
    }
    const obj = await MarketItemPrice.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMarketItemPrice (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }


    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MarketItemPrice.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestMarketPriceScope (client, itemPrice, property, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!itemPrice || !itemPrice.id) throw new Error('no itemPrice.id')
    if (!property || !property.id) throw new Error('no property.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        marketItemPrice: { connect: { id: itemPrice.id } },
        property: { connect: { id: property.id } },
        ...extraAttrs,
    }
    const obj = await MarketPriceScope.create(client, attrs)
    return [obj, attrs]
}

async function updateTestMarketPriceScope (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await MarketPriceScope.update(client, id, attrs)
    return [obj, attrs]
}


async function registerInvoiceByTestClient (client, resident, invoiceRows, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!resident || !resident.id) throw new Error('no resident.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        resident,
        invoiceRows,
        ...extraAttrs,
    }
    const { data, errors } = await client.mutate(REGISTER_INVOICE_MUTATION, { data: attrs })
    throwIfError(data, errors)
    return [data.result, attrs]
}


async function getInvoiceByUserByTestClient(client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const { data, errors } = await client.mutate(GET_INVOICE_BY_USER_QUERY, { data: attrs })
    throwIfError(data, errors)
    return [data.obj, attrs]
}
/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    InvoiceContext, createTestInvoiceContext, updateTestInvoiceContext,
    MarketCategory, createTestMarketCategory, updateTestMarketCategory,
    MarketItem, createTestMarketItem, updateTestMarketItem,
    Invoice, createTestInvoice, updateTestInvoice,
    generateInvoiceRow, generateInvoiceRows,
    generatePriceRow, generatePriceRows,
    MarketItemFile, createTestMarketItemFile, updateTestMarketItemFile,
    MarketItemPrice, createTestMarketItemPrice, updateTestMarketItemPrice,
    MarketPriceScope, createTestMarketPriceScope, updateTestMarketPriceScope,
    registerInvoiceByTestClient,
        getInvoiceByUserByTestClient,
/* AUTOGENERATE MARKER <EXPORTS> */
}
