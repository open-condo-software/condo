/**
 * Generated by `createschema marketplace.MarketItem 'name:Text; marketCategory:Relationship:MarketCategory:SET_NULL; sku:Text; description:Text; organization:Relationship:Organization:CASCADE;'`
 */

import {
    MarketItem,
    MarketItemCreateInput, MarketItemPrice,
    MarketItemUpdateInput, MarketPriceScope,
    QueryAllMarketItemsArgs,
} from '@app/condo/schema'
import { get } from 'lodash'
import isUndefined from 'lodash/isUndefined'

import { generateReactHooks } from '@open-condo/codegen/generate.hooks'

import { MarketItem as MarketItemGQL } from '@condo/domains/marketplace/gql'


const RELATIONS = ['marketCategory']
const DISCONNECT_ON_NULL = []
const IGNORE_FORM_FIELDS = ['parentCategory']

export enum PriceType {
    Exact = 'exact',
    Min = 'min',
    Contract = 'contract',
}

export type PriceFormValuesType = {
    properties?: string[]
    priceType?: PriceType
    price?: string
    hasAllProperties?: boolean
    id?: string
}

export type MarketItemFormValuesType = {
    name?: string
    sku?: string
    parentCategory?: string
    marketCategory?: string
    description?: string
    files?: string[]
    prices?: PriceFormValuesType[]
    selectedProperties?: string[]
}

type ConvertToFormStateArgsType = {
    marketItem: MarketItem,
    marketItemPrices: MarketItemPrice[]
    marketPriceScopes: MarketPriceScope[]
}

export function convertToFormState ({ marketItem, marketItemPrices, marketPriceScopes }: ConvertToFormStateArgsType): MarketItemFormValuesType {
    const result: MarketItemFormValuesType = {}

    for (const key of Object.keys(marketItem)) {
        const relationId = get(marketItem[key], 'id')

        result[key] = relationId || marketItem[key]

        if (key === 'marketCategory') {
            result['parentCategory'] = get(marketItem, 'marketCategory.parentCategory.id')
        }
    }

    const prices = []
    for (const marketItemPrice of marketItemPrices) {
        const id = marketItemPrice.id
        const priceScopes = marketPriceScopes.filter(scope => scope.marketItemPrice.id === marketItemPrice.id)
        const properties = priceScopes.map(priceScope => get(priceScope, 'property.id')).filter(Boolean)
        const hasAllProperties = priceScopes.every(scope => !scope.property)

        const [priceObj] = get(marketItemPrice, 'price')
        const priceFromObj = get(priceObj, 'price')
        const isMinPrice = get(priceObj, 'isMin')

        let priceType
        let price
        if (isMinPrice) {
            priceType = priceFromObj === '0' ? PriceType.Contract : PriceType.Min
            price = priceFromObj === '0' ? null : priceFromObj
        } else {
            priceType = PriceType.Exact
            price = priceFromObj
        }

        prices.push({ id, priceType, price, properties, hasAllProperties })
    }

    result['prices'] = prices

    return result
}

type MarketItemMutationType = MarketItemUpdateInput | MarketItemCreateInput

export function formValuesProcessor (formValues: MarketItemFormValuesType): MarketItemMutationType {
    const result: MarketItemMutationType = {}

    for (const key of Object.keys(formValues)) {
        if (IGNORE_FORM_FIELDS.includes(key)) continue
        const isRelation = RELATIONS.includes(key)

        if (isRelation) {
            if (DISCONNECT_ON_NULL.includes(key) && formValues[key] === null) {
                result[key] = { disconnectAll: true }
            } else if (formValues[key]) {
                result[key] = { connect: { id: formValues[key] } }
            }
        } else if (!isUndefined(formValues[key])) {
            result[key] = formValues[key]
        }
    }

    return result
}

export const INITIAL_PRICE_FORM_VALUE = { properties: [], priceType: PriceType.Exact }

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useSoftDelete,
    useCount,
} = generateReactHooks<MarketItem, MarketItemCreateInput, MarketItemUpdateInput, QueryAllMarketItemsArgs>(MarketItemGQL)

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useSoftDelete,
    useCount,
}
