/**
 * Generated by `createschema marketplace.MarketItemPrice 'price:Json; marketItem:Relationship:MarketItem:CASCADE; organization:Relationship:Organization:CASCADE;'`
 */

const { compact, get, uniq } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find, getById } = require('@open-condo/keystone/schema')

const { queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadMarketItemPrices ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    if (user.type === RESIDENT) {
        // TODO (DOMA-7503) use PriceScope to check access
        const userResidents = await find('Resident', { user: { id: user.id }, deletedAt: null })
        if (!userResidents.length) return false
        const residentOrganizationsIds = compact(userResidents.map(resident => get(resident, 'organization')))
        const residentsIds = userResidents.map(resident => resident.id)
        const userServiceConsumers = await find('ServiceConsumer', {
            resident: { id_in: residentsIds },
            deletedAt: null,
        })
        const serviceConsumerOrganizationIds = userServiceConsumers.map(sc => sc.organization)
        const organizationIds = [...residentOrganizationsIds, ...serviceConsumerOrganizationIds]
        if (organizationIds.length) {
            return {
                marketItem: {
                    organization: { id_in: uniq(organizationIds) },
                },
            }
        }
        return false
    }

    return {
        marketItem: {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(user.id, 'canReadMarketItemPrices'),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadMarketItemPrices'),
                ],
                deletedAt: null,
            },
        },
    }
}

async function canManageMarketItemPrices ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true
    if (user.type === RESIDENT) return false

    let organizationId

    if (operation === 'create') {
        const marketItem = await getById('MarketItem', get(originalInput, ['marketItem', 'connect', 'id']))
        if (!marketItem) return false

        organizationId = get(await getById('Organization', marketItem.organization), 'id')
        if (!organizationId) return false
    } else if (operation === 'update') {
        if (!itemId) return false

        const marketItemPrice = await getById('MarketItemPrice', itemId)

        const marketItem = await getById('MarketItem', get(marketItemPrice, 'marketItem'))

        if (!marketItem) return false

        organizationId = get(await getById('Organization', marketItem.organization), 'id')
    }

    if (!organizationId) return false

    return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageMarketItemPrices')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMarketItemPrices,
    canManageMarketItemPrices,
}
