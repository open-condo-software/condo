/**
 * Generated by `createschema marketplace.MarketItem 'name:Text; marketCategory:Relationship:MarketCategory:SET_NULL; sku:Text; description:Text; organization:Relationship:Organization:CASCADE;'`
 */

const { compact, get, uniq } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const {
    getEmployedOrRelatedOrganizationsByPermissions,
} = require('@condo/domains/organization/utils/accessSchema')
const { checkPermissionsInEmployedOrganizations } = require('@condo/domains/organization/utils/accessSchema')
const { getUserResidents, getUserServiceConsumers } = require('@condo/domains/resident/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')


async function canReadMarketItems ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    if (user.type === RESIDENT) {
        // TODO (DOMA-7503) use PriceScope to check access
        const userResidents = await getUserResidents(context, user)
        if (!userResidents.length) return false
        const residentOrganizationsIds = compact(userResidents.map(resident => get(resident, 'organization')))
        const userServiceConsumers = await getUserServiceConsumers(context, user)
        const serviceConsumerOrganizationIds = userServiceConsumers.map(sc => sc.organization)
        const organizationIds = [...residentOrganizationsIds, ...serviceConsumerOrganizationIds]
        if (organizationIds.length) {
            return {
                organization: { id_in: uniq(organizationIds) },
            }
        }
        return false
    }

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canReadMarketItems')

    return {
        organization: {
            id_in: permittedOrganizations,
        },
    }
}

async function canManageMarketItems ({ authentication: { item: user }, originalInput, operation, itemId, itemIds, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true
    if (user.type === RESIDENT) return false

    const isBulkRequest = Array.isArray(originalInput)
    let organizationIds

    if (operation === 'create') {
        if (isBulkRequest) {
            organizationIds = originalInput.map(el => get(el, ['data', 'organization', 'connect', 'id']))

            if (organizationIds.filter(Boolean).length !== originalInput.length) return false
            organizationIds = uniq(organizationIds)
        } else {
            const organizationId = get(originalInput, ['organization', 'connect', 'id'])
            if (!organizationId) return false
            organizationIds = [organizationId]
        }
    } else if (operation === 'update') {
        const ids = itemIds || [itemId]
        if (ids.length !== uniq(ids).length) return false

        const items = await find('MarketItem', {
            id_in: ids,
            deletedAt: null,
        })
        if (items.length !== ids.length || items.some(item => !item.organization)) return false
        organizationIds = uniq(items.map(item => item.organization))
    }

    return await checkPermissionsInEmployedOrganizations(context, user, organizationIds, 'canManageMarketItems')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMarketItems,
    canManageMarketItems,
}
