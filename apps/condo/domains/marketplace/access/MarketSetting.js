/**
 * Generated by `createschema marketplace.MarketSetting 'organization:Relationship:Organization:CASCADE; residentAllowedPaymentTypes:Select:cash, online;'`
 */

const { compact, get, uniq } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find, getById } = require('@open-condo/keystone/schema')

const { getEmployedOrRelatedOrganizationsByPermissions, checkPermissionsInEmployedOrRelatedOrganizations } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadMarketSettings ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    if (user.type === RESIDENT) {
        const userResidents = await find('Resident', { user: { id: user.id }, deletedAt: null })
        if (!userResidents.length) return false
        const residentOrganizationsIds = compact(userResidents.map(resident => get(resident, 'organization')))
        const residentsIds = userResidents.map(resident => resident.id)
        const userServiceConsumers = await find('ServiceConsumer', {
            resident: {
                id_in: residentsIds,
                deletedAt: null,
            },
            deletedAt: null,
        })
        const serviceConsumerOrganizationIds = userServiceConsumers.map(sc => sc.organization)
        const organizationIds = [...residentOrganizationsIds, ...serviceConsumerOrganizationIds]
        if (organizationIds.length) {
            return {
                organization: { id_in: uniq(organizationIds) },
            }
        }
        return false
    }

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canReadMarketSetting')

    return {
        organization: {
            id_in: permittedOrganizations,
        },
    }
}

async function canManageMarketSettings ({ authentication: { item: user }, originalInput, operation, itemId, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true
    if (user.type === RESIDENT) return false

    let organizationId

    if (operation === 'create') {
        organizationId = get(originalInput, ['organization', 'connect', 'id'])
    } else if (operation === 'update') {
        if (!itemId) return false
        const item = await getById('MarketSetting', itemId)
        if (get(item, 'deletedAt')) return false
        organizationId = get(item, 'organization', null)
    }

    if (!organizationId) return false

    return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organizationId, 'canManageMarketSetting')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMarketSettings,
    canManageMarketSettings,
}
