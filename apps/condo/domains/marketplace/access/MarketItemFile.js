/**
 * Generated by `createschema marketplace.MarketItemFile 'marketItem:Relationship:MarketItem:CASCADE; file:File;'`
 */

const { compact, get, uniq } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find, getById } = require('@open-condo/keystone/schema')

const { queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { STAFF } = require('@condo/domains/user/constants/common')

async function canReadMarketItemFiles ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    if (user.type === RESIDENT) {
        const userResidents = await find('Resident', { user: { id: user.id }, deletedAt: null })
        if (!userResidents.length) return false
        const residentOrganizations = compact(userResidents.map(resident => get(resident, 'organization')))
        const residentsIds = userResidents.map(resident => resident.id)
        const userServiceConsumers = await find('ServiceConsumer', {
            resident: { id_in: residentsIds },
            deletedAt: null,
        })
        const serviceConsumerOrganizations = userServiceConsumers.map(sc => sc.organization)
        const organizations = [...residentOrganizations, ...serviceConsumerOrganizations]
        if (organizations.length) {
            return {
                organization: { id_in: uniq(organizations) },
            }
        }
        return false
    }

    return {
        OR: [
            {
                organization: {
                    OR: [
                        queryOrganizationEmployeeFor(user.id, 'canReadMarketItems'),
                        queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadMarketItems'),
                    ],
                },
            },
            { createdBy: { id: user.id } },
        ],
    }
}

async function canManageMarketItemFiles ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type === RESIDENT) return false

    if (user.type === STAFF) {
        if (operation === 'create') {
            const marketItemId = get(originalInput, ['marketItem', 'connect', 'id'], null)

            if (marketItemId) {
                const marketItem = await getById('MarketItem', marketItemId)
                const organizationId = get(marketItem, 'organization', null)

                return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageMarketItems')
            }

            return false
        }

        const marketItemFile = await getById('MarketItemFile', itemId)
        if (!marketItemFile) return false

        const { createdBy, organization } = marketItemFile
        if (!organization) return createdBy === user.id

        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organization, 'canManageMarketItems')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMarketItemFiles,
    canManageMarketItemFiles,
}
