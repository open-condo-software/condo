/**
 * Generated by `createschema marketplace.Invoice 'number:Integer; property:Relationship:Property:PROTECT; unitType:Text; unitName:Text; accountNumber:Text; toPay:Decimal; items:Json; contact?:Relationship:Contact:SET_NULL; client?:Relationship:User:SET_NULL; clientName?:Text; clientPhone?:Text; clientEmail?:Text'`
 */

const { get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const {
    INVOICE_STATUS_PUBLISHED,
    INVOICE_STATUS_PAID,
    INVOICE_STATUS_DRAFT,
} = require('@condo/domains/marketplace/constants')
const {
    queryOrganizationEmployeeFor,
    queryOrganizationEmployeeFromRelatedOrganizationFor,
    checkPermissionInUserOrganizationOrRelatedOrganization,
} = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadInvoices ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    if (user.type === RESIDENT) {
        return {
            deletedAt: null,
            client: { id: user.id },
            OR: [
                { status_in: [INVOICE_STATUS_PUBLISHED, INVOICE_STATUS_PAID] },
                {
                    AND: [
                        { status: INVOICE_STATUS_DRAFT },
                        { createdBy: { type: RESIDENT } },
                    ],
                },
            ],
        }
    }

    return {
        context: {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(user.id, 'canReadInvoices'),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadInvoices'),
                ],
                deletedAt: null,
            },
        },
        deletedAt: null,
    }
}

async function canManageInvoices ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true
    if (user.type === RESIDENT) return false

    let contextId

    if (operation === 'create') {
        contextId = get(originalInput, ['context', 'connect', 'id'])
    } else if (operation === 'update') {
        if (!itemId) return false
        const item = await getById('Invoice', itemId)
        contextId = get(item, 'context')
    }

    const context = await getById('InvoiceContext', contextId)
    const organizationId = get(context, 'organization')

    if (!organizationId) return false

    return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageInvoices')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadInvoices,
    canManageInvoices,
}
