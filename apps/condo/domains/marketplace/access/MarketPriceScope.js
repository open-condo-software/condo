/**
 * Generated by `createschema marketplace.MarketPriceScope 'itemPrice:Relationship:MarketItemPrice:CASCADE; property:Relationship:Property:CASCADE; organization:Relationship:Organization:CASCADE;'`
 */

const { uniq, compact, get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find, getById } = require('@open-condo/keystone/schema')

const { queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadMarketPriceScopes ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    if (user.type === RESIDENT) {
        const userResidents = await find('Resident', { user: { id: user.id }, deletedAt: null })
        if (!userResidents.length) return false
        return {
            deletedAt: null,
            OR: [
                // Scopes with a particular property
                { property: { id_in: userResidents.map(({ property }) => property) } },
                // or organization's default scopes
                {
                    AND: [
                        { property_is_null: true },
                        { marketItemPrice: { marketItem: { organization: { id_in: userResidents.map(({ organization }) => organization) } } } },
                    ],
                },
            ],
        }
    }


    return {
        marketItemPrice: {
            marketItem: {
                organization: {
                    OR: [
                        queryOrganizationEmployeeFor(user.id, 'canReadMarketPriceScopes'),
                        queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadMarketPriceScopes'),
                    ],
                    deletedAt: null,
                },
            },
        },
    }
}

async function canManageMarketPriceScopes ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true
    if (user.type === RESIDENT) return false

    let organizationId

    if (operation === 'create') {
        const marketItemPrice = await getById('MarketItemPrice', get(originalInput, ['marketItemPrice', 'connect', 'id']))
        if (!marketItemPrice) return false

        const marketItem = await getById('MarketItem', get(marketItemPrice, 'marketItem'))
        if (!marketItem) return false

        organizationId = get(marketItem, 'organization')
    } else if (operation === 'update') {
        if (!itemId) return false

        const marketPriceScope = await getById('MarketPriceScope', itemId)
        if (!marketPriceScope) return false

        const marketItemPrice = await getById('MarketItemPrice', get(marketPriceScope, 'marketItemPrice'))
        if (!marketItemPrice) return false

        const marketItem = await getById('MarketItem', get(marketItemPrice, 'marketItem'))
        if (!marketItem) return false

        organizationId = get(marketItem, 'organization')
    }

    if (!organizationId) return false

    return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageMarketPriceScopes')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMarketPriceScopes,
    canManageMarketPriceScopes,
}
