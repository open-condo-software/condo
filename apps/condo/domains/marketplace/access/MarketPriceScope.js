/**
 * Generated by `createschema marketplace.MarketPriceScope 'itemPrice:Relationship:MarketItemPrice:CASCADE; property:Relationship:Property:CASCADE; organization:Relationship:Organization:CASCADE;'`
 */

const get = require('lodash/get')
const uniq = require('lodash/uniq')

const { isSoftDelete } = require('@open-condo/keystone/access')
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find, getById } = require('@open-condo/keystone/schema')

const { queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadMarketPriceScopes ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    if (user.type === RESIDENT) {
        const userResidents = await find('Resident', { user: { id: user.id }, deletedAt: null })
        if (!userResidents.length) return false
        return {
            OR: [
                // Scopes with a particular property
                { property: { id_in: userResidents.map(({ property }) => property) } },
                // or organization's default scopes
                {
                    AND: [
                        { property_is_null: true },
                        { marketItemPrice: { marketItem: { organization: { id_in: userResidents.map(({ organization }) => organization) } } } },
                    ],
                },
            ],
        }
    }


    return {
        marketItemPrice: {
            marketItem: {
                organization: {
                    OR: [
                        queryOrganizationEmployeeFor(user.id, 'canReadMarketPriceScopes'),
                        queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadMarketPriceScopes'),
                    ],
                    deletedAt: null,
                },
            },
        },
    }
}

async function canManageMarketPriceScopes ({ authentication: { item: user }, originalInput, operation, itemId, itemIds }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true
    if (user.type === RESIDENT) return false

    const isBulkRequest = Array.isArray(originalInput)
    const isSoftDeleteOperation = operation === 'update'
        && (
            isBulkRequest
                ? (Array.isArray(itemIds) && originalInput.every(item => isSoftDelete(get(item, 'data'))))
                : (itemId && isSoftDelete(originalInput))
        )

    if (operation !== 'create' && !isSoftDeleteOperation) return false

    let organizationId

    if (operation === 'create') {
        if (isBulkRequest) {
            const marketItemPriceIds = uniq(originalInput.map(item => get(item, 'data.marketItemPrice.connect.id')))
            const marketItemPrices = await find('MarketItemPrice', {
                id_in: marketItemPriceIds,
                deletedAt: null,
            })
            if (marketItemPriceIds.length !== marketItemPrices.length) return false

            const marketItemIds = uniq(marketItemPrices.map(price => get(price, 'marketItem')))
            const marketItems = await find('MarketItem', {
                id_in: marketItemIds,
                deletedAt: null,
            })

            const organizationIds = uniq(marketItems.map(marketItem => get(marketItem, 'organization')))
            if (organizationIds.length !== 1) return false

            organizationId = organizationIds[0]
        } else {
            const marketItemPrice = await getById('MarketItemPrice', get(originalInput, ['marketItemPrice', 'connect', 'id']))
            if (!marketItemPrice) return false

            const marketItem = await getById('MarketItem', get(marketItemPrice, 'marketItem'))
            if (!marketItem) return false

            organizationId = get(marketItem, 'organization')
        }
    } else if (operation === 'update') {
        if (isBulkRequest) {
            if (!itemIds || !Array.isArray(itemIds)) return false
            if (itemIds.length !== uniq(itemIds).length) return false

            const marketPriceScopes = await find('MarketPriceScope', {
                id_in: itemIds,
                deletedAt: null,
            })
            if (marketPriceScopes.length !== itemIds.length) return false

            const marketPriceIds = marketPriceScopes.map(scope => get(scope, 'marketItemPrice'))
            const marketPrices = await find('MarketItemPrice', {
                id_in: marketPriceIds,
                deletedAt: null,
            })

            const marketItemIds = marketPrices.map(price => price.marketItem)
            const marketItems = await find('MarketItem', {
                id_in: marketItemIds,
                deletedAt: null,
            })

            const organizationIds = uniq(marketItems.map(marketItem => get(marketItem, 'organization')))
            if (organizationIds.length !== 1) return false

            organizationId = organizationIds[0]
        } else {
            if (!itemId) return false

            const marketPriceScope = await getById('MarketPriceScope', itemId)
            if (!marketPriceScope) return false

            const marketItemPrice = await getById('MarketItemPrice', get(marketPriceScope, 'marketItemPrice'))
            if (!marketItemPrice) return false

            const marketItem = await getById('MarketItem', get(marketItemPrice, 'marketItem'))
            if (!marketItem) return false

            organizationId = get(marketItem, 'organization')
        }
    }

    if (!organizationId) return false

    return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageMarketPriceScopes')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMarketPriceScopes,
    canManageMarketPriceScopes,
}
