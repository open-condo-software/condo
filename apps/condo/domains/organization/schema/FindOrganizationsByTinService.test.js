/**
 * Generated by `createservice organization.FindOrganizationsByTinService --type queries`
 */

const { faker } = require('@faker-js/faker')

const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
} = require('@open-condo/keystone/test.utils')

const { COUNTRIES } = require('@condo/domains/common/constants/countries')
const {
    findOrganizationsByTinByTestClient,
    generateTin,
    registerNewOrganization,
    Organization,
    createTestOrganization,
    FindOrganizationsByTinLog,
} = require('@condo/domains/organization/utils/testSchema')
const {
    makeClientWithStaffUser,
    makeClientWithResidentUser,
    makeClientWithServiceUser,
} = require('@condo/domains/user/utils/testSchema')


const COUNTRY_KEYS = Object.keys(COUNTRIES)


describe('FindOrganizationsByTinService', () => {
    let adminClient, anonymousClient

    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        anonymousClient = await makeClient()
    })

    describe('Accesses', () => {
        describe('Staff', () => {
            test('Can execute', async () => {
                const staffClient = await makeClientWithStaffUser()
                const [result] = await findOrganizationsByTinByTestClient(staffClient, { tin: String(generateTin(faker.helpers.arrayElement(COUNTRY_KEYS))) })
                expect(result).toBeDefined()
            })
        })

        describe('Resident', () => {
            test('Cannot execute', async () => {
                const residentClient = await makeClientWithResidentUser()
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await findOrganizationsByTinByTestClient(residentClient, { tin: String(generateTin(faker.helpers.arrayElement(COUNTRY_KEYS))) })
                })
            })
        })

        describe('Service user', () => {
            test('Cannot execute', async () => {
                const serviceClient = await makeClientWithServiceUser()
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await findOrganizationsByTinByTestClient(serviceClient, { tin: String(generateTin(faker.helpers.arrayElement(COUNTRY_KEYS))) })
                })
            })
        })

        describe('Anonymous', () => {
            test('Cannot execute', async () => {
                await expectToThrowAuthenticationErrorToResult(async () => {
                    await findOrganizationsByTinByTestClient(anonymousClient, { tin: String(generateTin(faker.helpers.arrayElement(COUNTRY_KEYS))) })
                })
            })
        })
    })

    describe('Basic logic', () => {
        describe('should return all not deleted organizations with the specified TIN, where there are employees with the right "canManageEmployees" excluding service users', () => {
            test.each(COUNTRY_KEYS)('country: %p', async (country) => {
                const staffClient = await makeClientWithStaffUser()
                const serviceClient = await makeClientWithServiceUser()
                const registeredStaffClient = await makeClientWithStaffUser()

                const tin = String(generateTin(country))
                const tin2 = String(generateTin(country))

                const [deletedO10nWithAdministrator] = await registerNewOrganization(staffClient, { tin, country })
                await Organization.softDelete(adminClient, deletedO10nWithAdministrator.id)

                const [deletedO10nWithoutAdministrator] = await createTestOrganization(adminClient, { tin, country })
                await Organization.softDelete(adminClient, deletedO10nWithoutAdministrator.id)

                const [o10nWithAdministrator] = await registerNewOrganization(staffClient, { tin, country })
                const [o10nWithAdministrator2] = await registerNewOrganization(staffClient, { tin, country })

                const [o10nWithoutAdministrator] = await createTestOrganization(adminClient, { tin, country })

                const [o10nWithOtherTin] = await registerNewOrganization(staffClient, { tin: tin2, country })

                const [o10nWithServiceUserOnly] = await registerNewOrganization(serviceClient, { tin, country })

                const [result] = await findOrganizationsByTinByTestClient(registeredStaffClient, { tin })
                expect(result.organizations).toHaveLength(2)
                expect(result.organizations).toEqual(expect.arrayContaining([
                    { id: o10nWithAdministrator.id, name: o10nWithAdministrator.name },
                    { id: o10nWithAdministrator2.id, name: o10nWithAdministrator2.name },
                ]))
            })
        })

        test('Requests should be logged in "FindOrganizationsByTinLog"', async () => {
            const staffClient = await makeClientWithStaffUser()
            const tin1 = String(generateTin())
            const tin2 = String(generateTin())

            const logs1 = await FindOrganizationsByTinLog.getAll(adminClient, { user: { id: staffClient.user.id } })
            expect(logs1).toHaveLength(0)

            const [result] = await findOrganizationsByTinByTestClient(staffClient, { tin: tin1 })
            expect(result).toEqual({ organizations: [] })

            const logs2 = await FindOrganizationsByTinLog.getAll(adminClient, { user: { id: staffClient.user.id } })
            expect(logs2).toHaveLength(1)
            expect(logs2).toEqual(expect.arrayContaining([
                expect.objectContaining({
                    tin: tin1,
                }),
            ]))

            const [result2] = await findOrganizationsByTinByTestClient(staffClient, { tin: tin2 })
            expect(result2).toEqual({ organizations: [] })
            const [result3] = await findOrganizationsByTinByTestClient(staffClient, { tin: tin1 })
            expect(result3).toEqual({ organizations: [] })

            const logs3 = await FindOrganizationsByTinLog.getAll(adminClient,
                { user: { id: staffClient.user.id } },
                { sortBy: ['createdAt_ASC'] }
            )
            expect(logs3).toHaveLength(3)
            expect(logs3).toEqual([
                expect.objectContaining({
                    tin: tin1,
                }),
                expect.objectContaining({
                    tin: tin2,
                }),
                expect.objectContaining({
                    tin: tin1,
                }),
            ])
        })
    })
})
