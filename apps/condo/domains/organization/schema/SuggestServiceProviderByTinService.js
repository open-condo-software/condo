/**
 * Generated by `createservice organization.SuggestServiceProviderByTinService --type queries`
 */

const { pick, uniqBy, sortBy } = require('lodash')

const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/acquiring/constants/context')
const { AcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/serverSchema')
const { MeterResourceOwner } = require('@condo/domains/meter/utils/serverSchema')
const access = require('@condo/domains/organization/access/SuggestServiceProviderByTinService')
const { SERVICE_PROVIDER_TYPE, MAX_RESIDENT_SUGGEST_SERVICE_PROVIDER_BY_WINDOW_SEC, RESIDENT_SUGGEST_SERVICE_PROVIDER_WINDOW_SEC } = require('@condo/domains/organization/constants/common')
const { Organization } = require('@condo/domains/organization/utils/serverSchema')
const { canPossiblyBeTin } = require('@condo/domains/organization/utils/tin.utils')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { RedisGuard } = require('@condo/domains/user/utils/serverSchema/guards')

const redisGuard = new RedisGuard()

const checkLimits = async (uniqueField) => {
    await redisGuard.checkCustomLimitCounters(
        `suggest-service-provider-by-tin-${uniqueField}`,
        RESIDENT_SUGGEST_SERVICE_PROVIDER_WINDOW_SEC,
        MAX_RESIDENT_SUGGEST_SERVICE_PROVIDER_BY_WINDOW_SEC,
    )
}

const getRealOrganizationsIds = async (context, organizations) => {
    const uniqueOrganizationIds = [...new Set(organizations.map(provider => provider.id))]

    const acquiringIntegrationContextsPromise = AcquiringIntegrationContext.getAll(context, {
        organization: { id_in: uniqueOrganizationIds },
        deletedAt: null,
        status: CONTEXT_FINISHED_STATUS,
    })

    const meterResourceOwnersPromise = MeterResourceOwner.getAll(context, {
        organization: { id_in: uniqueOrganizationIds },
        deletedAt: null,
    })

    const realityConfirmers = await Promise.allSettled(
        [acquiringIntegrationContextsPromise, meterResourceOwnersPromise]
    )

    return new Set(realityConfirmers
        .filter(promise => promise.status === 'fulfilled')
        .flatMap(promise => promise.value)
        .map(obj => obj.organization.id))
}

const getRealServiceProviders = async (context, tin) => {
    const serviceProviders = await Organization.getAll(context, { // могут дублироваться
        tin_starts_with: tin,
        deletedAt: null,
        type: SERVICE_PROVIDER_TYPE,
    })
    console.debug('found overall len', serviceProviders.length)
    const realOrganizationIds = await getRealOrganizationsIds(context, serviceProviders)

    return serviceProviders.filter(provider => realOrganizationIds.has(provider.id))
}

const SuggestServiceProviderByTinService = new GQLCustomSchema('SuggestServiceProviderByTinService', {
    types: [
        {
            access: true,
            type: 'input SuggestProviderByTinInput { dv: Int!, sender: JSON!, tin: String! }',
        },
        {
            access: true,
            type: 'type SuggestProviderByTinOutput { tin: String!, name: String! }',
        },
    ],
    
    queries: [
        {
            access: access.canSuggestProviderByTin,
            schema: 'suggestProviderByTin (data: SuggestProviderByTinInput!): [SuggestProviderByTinOutput!]!',
            resolver: async (parent, args, context = {}) => {

                if (context.authedItem.type === RESIDENT) {
                    await checkLimits(context.authedItem.id)
                }
                
                let { data: { tin } } = args
                
                if (!tin) {
                    return []
                }
                tin = tin.trim()
                if (!canPossiblyBeTin(tin)) {
                    return []
                }

                const realServiceProviders = await getRealServiceProviders(context, tin)
                
                const result = uniqBy(realServiceProviders, 'tin')
                    .map(serviceProvider => pick(serviceProvider, ['tin', 'name']))
                sortBy(result, 'name')
                return result
            },
        },
    ],
    
})

module.exports = {
    SuggestServiceProviderByTinService,
}
