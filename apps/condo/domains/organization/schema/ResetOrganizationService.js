/**
 * Generated by `createservice organization.ResetOrganizationService --type mutations`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { checkDvAndSender } = require('@open-condo/keystone/plugins/dvAndSender')
const { GQLCustomSchema, getById, find } = require('@open-condo/keystone/schema')

const { AcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/serverSchema')
const { BankIntegrationOrganizationContext } = require('@condo/domains/banking/utils/serverSchema')
const { BillingIntegrationOrganizationContext } = require('@condo/domains/billing/utils/serverSchema')
const { DV_VERSION_MISMATCH } = require('@condo/domains/common/constants/errors')
const { loadListByChunks } = require('@condo/domains/common/utils/serverSchema')
const { MeterResourceOwner, MeterReportingPeriod } = require('@condo/domains/meter/utils/serverSchema')
const { B2BAppContext } = require('@condo/domains/miniapp/utils/serverSchema')
const access = require('@condo/domains/organization/access/ResetOrganizationService')
const { DELETED_ORGANIZATION_NAME } = require('@condo/domains/organization/constants/common')
const {
    Organization,
    OrganizationLink,
    OrganizationEmployee,
    OrganizationEmployeeRequest,
} = require('@condo/domains/organization/utils/serverSchema')
const { Property } = require('@condo/domains/property/utils/serverSchema')


/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    DV_VERSION_MISMATCH: {
        mutation: 'resetOrganization',
        variable: ['data', 'dv'],
        code: BAD_USER_INPUT,
        type: DV_VERSION_MISMATCH,
        message: 'Unsupported value for dv',
    },
    SENDER_MISMATCH: {
        mutation: 'resetOrganization',
        variable: ['data', 'sender'],
        code: BAD_USER_INPUT,
        type: DV_VERSION_MISMATCH,
        message: 'Unsupported value for sender',
    },
    ORGANIZATION_NOT_FOUND: {
        mutation: 'resetOrganization',
        variable: ['data', 'organizationId'],
        code: BAD_USER_INPUT,
        type: 'ORGANIZATION_NOT_FOUND',
        message: 'Could not find organization by provided id',
    },
}

const ResetOrganizationService = new GQLCustomSchema('ResetOrganizationService', {
    types: [
        {
            access: true,
            type: 'input ResetOrganizationInput { dv: Int! sender: JSON! organizationId: ID! }',
        },
        {
            access: true,
            type: 'type ResetOrganizationOutput { status: String! }',
        },
    ],

    mutations: [
        {
            access: access.canResetOrganization,
            schema: 'resetOrganization(data: ResetOrganizationInput!): ResetOrganizationOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { dv, sender, organizationId } } = args
                checkDvAndSender({ dv, sender }, { ...ERRORS.DV_VERSION_MISMATCH, mutation: 'resetOrganization' }, { ...ERRORS.SENDER_MISMATCH, mutation: 'resetOrganization' }, context)

                const DV_SENDER = { dv, sender }

                if (!organizationId) throw new Error('resetOrganization(): no organizationId')

                const organizationEntity = await getById('Organization', organizationId)
                if (!organizationEntity) {
                    throw new GQLError(ERRORS.ORGANIZATION_NOT_FOUND, context)
                }

                const properties = await loadListByChunks({
                    context,
                    list: Property,
                    chunkSize: 20,
                    limit: 100000,
                    where: {
                        deletedAt: null,
                        organization: { id: organizationId },
                    },
                    fields: 'id',
                })
                for (let property of properties) {
                    await Property.softDelete(context, property.id, 'id', DV_SENDER)
                }

                const employees = await find('OrganizationEmployee', {
                    deletedAt: null,
                    organization: { id: organizationId },
                })
                for (let employee of employees) {
                    await OrganizationEmployee.softDelete(context, employee.id, 'id', DV_SENDER)
                }

                const employeeRequests = await find('OrganizationEmployeeRequest', {
                    organization: { id: organizationId },
                    deletedAt: null,
                })
                for (const request of employeeRequests) {
                    await OrganizationEmployeeRequest.softDelete(context, request.id, 'id', DV_SENDER)
                }

                const organizationLinks = await OrganizationLink.getAll(context, {
                    OR: [
                        { from: { id: organizationId } },
                        { to: { id: organizationId } },
                    ],
                    deletedAt: null,
                })
                for (let organizationLink of organizationLinks) {
                    await OrganizationLink.softDelete(context, organizationLink.id, 'id', DV_SENDER)
                }
                // TODO(DOMA-10423): add deleting meter and propertyMeter to a separate, asynchronous task
                const meterResourceOwners = await find('MeterResourceOwner', {
                    deletedAt: null,
                    organization: { id: organizationId },
                })
                for (const meterResourceOwner of meterResourceOwners) {
                    await MeterResourceOwner.softDelete(context, meterResourceOwner.id, 'id', DV_SENDER)
                }

                const meterReportingPeriods = await find('MeterReportingPeriod', {
                    deletedAt: null,
                    organization: { id: organizationId },
                })
                for (const meterReportingPeriod of meterReportingPeriods) {
                    await MeterReportingPeriod.softDelete(context, meterReportingPeriod.id, 'id', DV_SENDER)
                }

                const billingOrgCtxs = await BillingIntegrationOrganizationContext.getAll(context, {
                    deletedAt: null,
                    organization: { id: organizationId },
                })
                for (let billingOrgCtx of billingOrgCtxs) {
                    await BillingIntegrationOrganizationContext.softDelete(context, billingOrgCtx.id, 'id', DV_SENDER)
                }

                const acquiringIntegrationCtxs = await AcquiringIntegrationContext.getAll(context, {
                    deletedAt: null,
                    organization: { id: organizationId },
                })
                for (let acquiringIntegrationCtx of acquiringIntegrationCtxs) {
                    await AcquiringIntegrationContext.softDelete(context, acquiringIntegrationCtx.id, 'id', DV_SENDER)
                }

                const b2BAppCtxs = await B2BAppContext.getAll(context, {
                    deletedAt: null,
                    organization: { id: organizationId },
                })
                for (let b2BAppCtx of b2BAppCtxs) {
                    await B2BAppContext.softDelete(context, b2BAppCtx.id, 'id', DV_SENDER)
                }

                // banking domain
                const bankIntegrationOrganizationContexts = await BankIntegrationOrganizationContext.getAll(context, {
                    deletedAt: null,
                    organization: { id: organizationId },
                })
                for (let bankIntegrationOrganizationContext of bankIntegrationOrganizationContexts) {
                    await BankIntegrationOrganizationContext.softDelete(context, bankIntegrationOrganizationContext.id, 'id', DV_SENDER)
                }

                const newOrganizationData = {
                    dv: 1,
                    sender,
                    name: DELETED_ORGANIZATION_NAME,
                    meta: null,
                    importId: null,
                    features: [],
                }

                await Organization.update(context, organizationId, newOrganizationData)

                return { status: 'ok' }
            },
        },
    ],
})

module.exports = {
    ResetOrganizationService,
}
