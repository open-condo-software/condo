/**
 * Generated by `createschema organization.FindOrganizationsByTinLog 'user:Relationship:User:SET_NULL; tin:Text'`
 */

const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowGraphQLRequestError,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAccessDeniedErrorToObjects,
    expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const {
    FindOrganizationsByTinLog,
    createTestFindOrganizationsByTinLog,
    updateTestFindOrganizationsByTinLog,
} = require('@condo/domains/organization/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
    registerNewUser,
} = require('@condo/domains/user/utils/testSchema')


describe('FindOrganizationsByTinLog', () => {
    let adminClient, supportClient, userClient, anonymousClient, user, userAttrs

    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymousClient = await makeClient();

        [user, userAttrs] = await registerNewUser(await makeClient())
    })

    describe('Accesses', () => {
        describe('Admin', () => {
            test('Can read', async () => {
                const [testSelfLog] = await createTestFindOrganizationsByTinLog(adminClient, adminClient.user)
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                const logs = await FindOrganizationsByTinLog.getAll(adminClient, { id_in: [testLog.id, testSelfLog.id] })
                expect(logs).toHaveLength(2)
                expect(logs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        tin: testSelfLog.tin,
                        user: expect.objectContaining({ id: adminClient.user.id }),
                    }),
                    expect.objectContaining({
                        tin: testLog.tin,
                        user: expect.objectContaining({ id: user.id }),
                    }),
                ]))
            })

            test('Can create', async () => {
                const [testSelfLog] = await createTestFindOrganizationsByTinLog(adminClient, adminClient.user)
                expect(testSelfLog).toHaveProperty('user.id', adminClient.user.id)
                expect(testSelfLog).toHaveProperty('userPhone', null)
                expect(testSelfLog).toHaveProperty('userEmail', null)
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user, {
                    userPhone: userAttrs.phone,
                    userEmail: userAttrs.email,
                })
                expect(testLog).toHaveProperty('user.id', user.id)
                expect(testLog).toHaveProperty('userPhone', userAttrs.phone)
                expect(testLog).toHaveProperty('userEmail', userAttrs.email)
            })

            test('Cannot update', async () => {
                const [testSelfLog] = await createTestFindOrganizationsByTinLog(adminClient, adminClient.user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestFindOrganizationsByTinLog(adminClient, testSelfLog.id, { user: { connect: { id: user.id } } })
                })
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestFindOrganizationsByTinLog(adminClient, testLog.id, { user: { connect: { id: adminClient.user.id } } })
                })
            })

            test('Cannot delete', async () => {
                const [testSelfLog] = await createTestFindOrganizationsByTinLog(adminClient, adminClient.user)
                await expectToThrowGraphQLRequestError(async () => {
                    await FindOrganizationsByTinLog.delete(adminClient, testSelfLog.id)
                }, 'Cannot query field "deleteFindOrganizationsByTinLog" on type "Mutation"')
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                await expectToThrowGraphQLRequestError(async () => {
                    await FindOrganizationsByTinLog.delete(adminClient, testLog.id)
                }, 'Cannot query field "deleteFindOrganizationsByTinLog" on type "Mutation"')
            })
        })

        describe('Support', () => {
            test('Can read', async () => {
                const [testSelfLog] = await createTestFindOrganizationsByTinLog(adminClient, supportClient.user)
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                const logs = await FindOrganizationsByTinLog.getAll(supportClient, { id_in: [testLog.id, testSelfLog.id] })
                expect(logs).toHaveLength(2)
                expect(logs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        tin: testSelfLog.tin,
                        user: expect.objectContaining({ id: supportClient.user.id }),
                    }),
                    expect.objectContaining({
                        tin: testLog.tin,
                        user: expect.objectContaining({ id: user.id }),
                    }),
                ]))
            })

            test('Cannot create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestFindOrganizationsByTinLog(supportClient, supportClient.user)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestFindOrganizationsByTinLog(supportClient, user)
                })
            })

            test('Cannot update', async () => {
                const [testSelfLog] = await createTestFindOrganizationsByTinLog(adminClient, supportClient.user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestFindOrganizationsByTinLog(supportClient, testSelfLog.id, { user: { connect: { id: user.id } } })
                })
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestFindOrganizationsByTinLog(supportClient, testLog.id, { user: { connect: { id: supportClient.user.id } } })
                })
            })

            test('Cannot delete', async () => {
                const [testSelfLog] = await createTestFindOrganizationsByTinLog(adminClient, supportClient.user)
                await expectToThrowGraphQLRequestError(async () => {
                    await FindOrganizationsByTinLog.delete(supportClient, testSelfLog.id)
                }, 'Cannot query field "deleteFindOrganizationsByTinLog" on type "Mutation"')
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                await expectToThrowGraphQLRequestError(async () => {
                    await FindOrganizationsByTinLog.delete(supportClient, testLog.id)
                }, 'Cannot query field "deleteFindOrganizationsByTinLog" on type "Mutation"')
            })
        })

        describe('User', () => {
            test('Cannot read', async () => {
                const [testSelfLog] = await createTestFindOrganizationsByTinLog(adminClient, userClient.user)
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await FindOrganizationsByTinLog.getAll(userClient, { id_in: [testLog.id, testSelfLog.id] })
                })
            })

            test('Cannot create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestFindOrganizationsByTinLog(userClient, userClient.user)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestFindOrganizationsByTinLog(userClient, user)
                })
            })

            test('Cannot update', async () => {
                const [testSelfLog] = await createTestFindOrganizationsByTinLog(adminClient, userClient.user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestFindOrganizationsByTinLog(userClient, testSelfLog.id, { user: { connect: { id: user.id } } })
                })
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestFindOrganizationsByTinLog(userClient, testLog.id, { user: { connect: { id: userClient.user.id } } })
                })
            })

            test('Cannot delete', async () => {
                const [testSelfLog] = await createTestFindOrganizationsByTinLog(adminClient, userClient.user)
                await expectToThrowGraphQLRequestError(async () => {
                    await FindOrganizationsByTinLog.delete(userClient, testSelfLog.id)
                }, 'Cannot query field "deleteFindOrganizationsByTinLog" on type "Mutation"')
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                await expectToThrowGraphQLRequestError(async () => {
                    await FindOrganizationsByTinLog.delete(userClient, testLog.id)
                }, 'Cannot query field "deleteFindOrganizationsByTinLog" on type "Mutation"')
            })
        })

        describe('Anonymous', () => {
            test('Cannot read', async () => {
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await FindOrganizationsByTinLog.getOne(anonymousClient, { id: testLog.id })
                })
            })

            test('Cannot create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestFindOrganizationsByTinLog(anonymousClient, user)
                })
            })

            test('Cannot update', async () => {
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestFindOrganizationsByTinLog(anonymousClient, testLog.id, { user: { connect: { id: adminClient.user.id } } })
                })
            })

            test('Cannot delete', async () => {
                const [testLog] = await createTestFindOrganizationsByTinLog(adminClient, user)
                await expectToThrowGraphQLRequestError(async () => {
                    await FindOrganizationsByTinLog.delete(anonymousClient, testLog.id)
                }, 'Cannot query field "deleteFindOrganizationsByTinLog" on type "Mutation"')
            })
        })
    })

    describe('Validations', () => {
        test('cannot pass empty user', async () => {
            await expectToThrowGQLError(async () => {
                await createTestFindOrganizationsByTinLog(adminClient, adminClient.user, { user: undefined })
            }, {
                code: 'BAD_USER_INPUT',
                type: 'EMPTY_USER',
                variable: ['data', 'user'],
                message: 'The "user" field must be specified',
            })
        })
    })
})
