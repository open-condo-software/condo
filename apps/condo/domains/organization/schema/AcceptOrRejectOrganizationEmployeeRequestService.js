/**
 * Generated by `createservice organization.AcceptOrRejectOrganizationEmployeeRequestService --type mutations`
 */

const get = require('lodash/get')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { checkDvAndSender } = require('@open-condo/keystone/plugins/dvAndSender')
const { GQLCustomSchema, getByCondition, getById } = require('@open-condo/keystone/schema')

const { COMMON_ERRORS } = require('@condo/domains/common/constants/errors')
const access = require('@condo/domains/organization/access/AcceptOrRejectOrganizationEmployeeRequestService')
const { OrganizationEmployeeRequest, OrganizationEmployee } = require('@condo/domains/organization/utils/serverSchema')


/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    REQUEST_NEEDS_ACCEPT_OR_REJECT: {
        mutation: 'acceptOrRejectOrganizationEmployeeRequest',
        variable: ['data'],
        code: BAD_USER_INPUT,
        type: 'REQUEST_NEEDS_ACCEPT_OR_REJECT',
        message: 'The request must be accepted or rejected',
    },
    REQUEST_ALREADY_PROCESSED: {
        mutation: 'acceptOrRejectOrganizationEmployeeRequest',
        variable: ['data', 'employeeRequest'],
        code: BAD_USER_INPUT,
        type: 'REQUEST_ALREADY_PROCESSED',
        message: 'The request has already been processed',
    },
    REQUEST_NOT_FOUND: {
        mutation: 'acceptOrRejectOrganizationEmployeeRequest',
        variable: ['data', 'employeeRequest'],
        code: BAD_USER_INPUT,
        type: 'REQUEST_NOT_FOUND',
        message: 'The request not found',
    },
    EMPLOYEE_ROLE_REQUIRED: {
        mutation: 'acceptOrRejectOrganizationEmployeeRequest',
        variable: ['data', 'employeeData', 'role'],
        code: BAD_USER_INPUT,
        type: 'EMPLOYEE_ROLE_REQUIRED',
        message: 'Employee role required',
    },
    USER_NOT_FOUND: {
        mutation: 'acceptOrRejectOrganizationEmployeeRequest',
        variable: ['data', 'employeeRequest'],
        code: BAD_USER_INPUT,
        type: 'USER_NOT_FOUND',
        message: 'No user found to join the organization',
    },
    USER_DOES_NOT_HAVE_PHONE: {
        mutation: 'acceptOrRejectOrganizationEmployeeRequest',
        variable: ['data', 'employeeRequest'],
        code: BAD_USER_INPUT,
        type: 'USER_DOES_NOT_HAVE_PHONE',
        message: 'The user does not have a phone',
    },
    DV_VERSION_MISMATCH: {
        ...COMMON_ERRORS.DV_VERSION_MISMATCH,
        mutation: 'acceptOrRejectOrganizationEmployeeRequest',
    },
    WRONG_SENDER_FORMAT: {
        ...COMMON_ERRORS.WRONG_SENDER_FORMAT,
        mutation: 'acceptOrRejectOrganizationEmployeeRequest',
    },
}

const AcceptOrRejectOrganizationEmployeeRequestService = new GQLCustomSchema('AcceptOrRejectOrganizationEmployeeRequestService', {
    types: [
        {
            access: true,
            type: 'input AcceptOrRejectOrganizationEmployeeRequestEmployeeDataInput { role: OrganizationEmployeeRoleWhereUniqueInput! }',
        },
        {
            access: true,
            type: 'input AcceptOrRejectOrganizationEmployeeRequestInput { dv: Int!, sender: SenderFieldInput!, employeeRequest: OrganizationEmployeeRequestWhereUniqueInput!, employeeData: AcceptOrRejectOrganizationEmployeeRequestEmployeeDataInput, isRejected: Boolean, isAccepted: Boolean }',
        },
    ],

    mutations: [
        {
            access: access.canAcceptOrRejectOrganizationEmployeeRequest,
            doc: {
                summary: 'Accepts or rejects requests to join the organization.\n' +
                    'If accepted, a new employee is created',
                errors: ERRORS,
            },
            schema: 'acceptOrRejectOrganizationEmployeeRequest(data: AcceptOrRejectOrganizationEmployeeRequestInput!): OrganizationEmployeeRequest',
            resolver: async (parent, args, context) => {
                const { data } = args
                const {
                    employeeRequest: employeeRequestFromInput,
                    employeeData,
                    isRejected,
                    isAccepted,
                    dv,
                    sender,
                } = data
                const employeeRoleId = get(employeeData, 'role.id')

                checkDvAndSender(data, ERRORS.DV_VERSION_MISMATCH, ERRORS.WRONG_SENDER_FORMAT, context)

                if (!isRejected && !isAccepted) throw new GQLError(ERRORS.REQUEST_NEEDS_ACCEPT_OR_REJECT, context)
                if (isRejected && isAccepted) throw new GQLError(ERRORS.REQUEST_NEEDS_ACCEPT_OR_REJECT, context)

                const request = await getByCondition('OrganizationEmployeeRequest', {
                    id: employeeRequestFromInput.id,
                    deletedAt: null,
                })
                if (!request) throw new GQLError(ERRORS.REQUEST_NOT_FOUND, context)

                const alreadyProcessed = request.isRejected || request.isAccepted
                if (alreadyProcessed) throw new GQLError(ERRORS.REQUEST_ALREADY_PROCESSED, context)

                let employeeIdToConnect

                if (isAccepted) {
                    if (!employeeRoleId) throw new GQLError(ERRORS.EMPLOYEE_ROLE_REQUIRED, context)

                    const user = await getByCondition('User', {
                        id: request.user,
                        deletedAt: null,
                    })

                    if (!user) throw new GQLError(ERRORS.USER_NOT_FOUND, context)

                    // NOTE: Current business process requires phone to create employee
                    if (!user.phone) throw new GQLError(ERRORS.USER_DOES_NOT_HAVE_PHONE, context)

                    const existedEmployee = await getByCondition('OrganizationEmployee', {
                        organization: { id: request.organization },
                        user: { id: user.id },
                        deletedAt: null,
                    })

                    if (existedEmployee) {
                        const updatedEmployee = await OrganizationEmployee.update(context, existedEmployee.id, {
                            isAccepted: true,
                            isRejected: false,
                            role: { connect: { id: employeeRoleId } },
                            name: user.name,
                            email: user.email,
                            phone: user.phone,
                            dv,
                            sender,
                        })
                        employeeIdToConnect = get(updatedEmployee, 'id', null)
                    } else {
                        const employeePayload = {
                            organization: { connect: { id: request.organization } },
                            user: { connect: { id: user.id } },
                            name: user.name,
                            email: user.email,
                            phone: user.phone,
                            role: { connect: { id: employeeRoleId } },
                            hasAllSpecializations: true,
                            isAccepted: true,
                            isRejected: false,
                            dv,
                            sender,
                        }

                        const createdEmployee = await OrganizationEmployee.create(context, employeePayload)
                        employeeIdToConnect = get(createdEmployee, 'id', null)
                    }
                }

                await OrganizationEmployeeRequest.update(context, request.id, {
                    isRejected,
                    isAccepted,
                    ...(isAccepted && !!employeeIdToConnect ? { createdEmployee: { connect: { id: employeeIdToConnect } } } : null),
                    dv,
                    sender,
                })

                return await getById('OrganizationEmployeeRequest', request.id)
            },
        },
    ],
})

module.exports = {
    AcceptOrRejectOrganizationEmployeeRequestService,
}
