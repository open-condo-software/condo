/**
 * Generated by `createschema organization.OrganizationLinkEmployeeAccess 'link:Relationship:OrganizationLink:CASCADE; employee:Relationship:OrganizationEmployee:CASCADE; canManageOrganization:Checkbox; canManageEmployees:Checkbox; canManageRoles:Checkbox; canManageIntegrations:Checkbox; canManageProperties:Checkbox; canManageTickets:Checkbox;'`
 */
const { updateTestOrganizationLinkEmployeeAccess } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationLinkWithTwoOrganizations } = require('@condo/domains/organization/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { createTestOrganizationLinkEmployeeAccess } = require('@condo/domains/organization/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj } = require('../../common/utils/testSchema')

describe('OrganizationLinkEmployeeAccess', () => {

    test('admin: create OrganizationLinkEmployeeAccess', async () => {
        const admin = await makeLoggedInAdminClient()
        const { employeeFrom, link } = await createTestOrganizationLinkWithTwoOrganizations()

        const [access] = await createTestOrganizationLinkEmployeeAccess(admin, link, employeeFrom, {
            canManageTickets: true,
        })

        expect(access.canManageTickets).toEqual(true)
    })

    test('admin: cannot create OrganizationLinkEmployeeAccess for employee from "to" organization', async () => {
        const admin = await makeLoggedInAdminClient()
        const { employeeTo, link } = await createTestOrganizationLinkWithTwoOrganizations()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestOrganizationLinkEmployeeAccess(admin, link, employeeTo, {
                canManageTickets: true,
            })
        })
    })

    test('admin: can update OrganizationLinkEmployeeAccess', async () => {
        const admin = await makeLoggedInAdminClient()
        const { employeeFrom, link } = await createTestOrganizationLinkWithTwoOrganizations()
        const [access] = await createTestOrganizationLinkEmployeeAccess(admin, link, employeeFrom, {
            canManageTickets: true,
        })
        const [updatedAccess] = await updateTestOrganizationLinkEmployeeAccess(admin, access.id, {
            canManageTickets: false,
            canManageTicketComments: true,
        })

        expect(updatedAccess.id).toEqual(access.id)
        expect(updatedAccess.canManageTickets).toEqual(false)
        expect(updatedAccess.canManageTicketComments).toEqual(true)
    })

    test('anonymous: cannot create OrganizationLinkEmployeeAccess', async () => {
        const client = await makeClient()
        const { employeeFrom, link } = await createTestOrganizationLinkWithTwoOrganizations()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestOrganizationLinkEmployeeAccess(client, link, employeeFrom)
        })
    })

    test('user: cannot create OrganizationLinkEmployeeAccess', async () => {
        const user = await makeClientWithNewRegisteredAndLoggedInUser()
        const admin = await makeLoggedInAdminClient()
        const { employeeFrom, link } = await createTestOrganizationLinkWithTwoOrganizations()
        const [access] = await createTestOrganizationLinkEmployeeAccess(admin, link, employeeFrom, {
            canManageTickets: true,
        })

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestOrganizationLinkEmployeeAccess(user, access.id, {
                canManageTickets: false,
                canManageTicketComments: true,
            })
        })
    })

    test('anonymous: cannot update OrganizationLinkEmployeeAccess', async () => {
        const client = await makeClient()
        const admin = await makeLoggedInAdminClient()
        const { employeeFrom, link } = await createTestOrganizationLinkWithTwoOrganizations()
        const [access] = await createTestOrganizationLinkEmployeeAccess(admin, link, employeeFrom, {
            canManageTickets: true,
        })

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestOrganizationLinkEmployeeAccess(client, access.id, {
                canManageTickets: false,
                canManageTicketComments: true,
            })
        })
    })

    test('user: cannot update OrganizationLinkEmployeeAccess', async () => {
        const user = await makeClientWithNewRegisteredAndLoggedInUser()
        const { employeeFrom, link } = await createTestOrganizationLinkWithTwoOrganizations()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestOrganizationLinkEmployeeAccess(user, link, employeeFrom)
        })
    })
})
