/**
 * Generated by `createschema organization.EmployeeFiltersTemplate 'name:Text; employee:Relationship:OrganizationEmployee:CASCADE; schemaName:Text; filters:Json'`
 */
const faker = require('faker')
const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@core/keystone/test.utils')
const { EmployeeFiltersTemplate, createTestEmployeeFiltersTemplate, updateTestEmployeeFiltersTemplate,
    createTestOrganizationEmployeeRole, updateTestOrganizationEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const { expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObj,
} = require('@condo/domains/common/utils/testSchema')
const { createTestOrganization, createTestOrganizationEmployee } = require('../utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

describe('EmployeeFiltersTemplate', () => {
    describe('Create', () => {
        test('admin: can create EmployeeFiltersTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(admin, employee, {})

            expect(filtersTemplate.id).toMatch(UUID_RE)
        })

        test('employee: can create EmployeeFiltersTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(user, employee, {})

            expect(filtersTemplate.id).toMatch(UUID_RE)
        })

        test('deleted employee: cannot create EmployeeFiltersTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)
            await updateTestOrganizationEmployee(admin, employee.id, {
                deletedAt: 'true',
            })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestEmployeeFiltersTemplate(user, employee, {})
            })
        })

        test('blocked employee: cannot create EmployeeFiltersTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)
            await updateTestOrganizationEmployee(admin, employee.id, {
                isBlocked: true,
            })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestEmployeeFiltersTemplate(user, employee, {})
            })
        })

        test('user: cannot create EmployeeFiltersTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, employeeUser.user, role)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestEmployeeFiltersTemplate(user, employee, {})
            })
        })

        test('anonymous: cannot create EmployeeFiltersTemplate', async () => {
            const admin = await makeLoggedInAdminClient()
            const anonymous = await makeClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const employeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, employeeUser.user, role)

            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestEmployeeFiltersTemplate(anonymous, employee, {})
            })
        })
    })

    describe('Read', () => {
        test('admin: can read EmployeeFiltersTemplates', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(admin, employee, {})
            const templates = await EmployeeFiltersTemplate.getAll(admin, { id: filtersTemplate.id })

            expect(templates).toHaveLength(1)
            expect(templates[0].id).toEqual(filtersTemplate.id)
        })

        test('employee: can read his EmployeeFiltersTemplates', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(user, employee, {})
            const templates = await EmployeeFiltersTemplate.getAll(user, { id: filtersTemplate.id })

            expect(templates).toHaveLength(1)
            expect(templates[0].id).toEqual(filtersTemplate.id)
        })

        test('employee: cannot read not his own EmployeeFiltersTemplates', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, user2.user, role)

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(user1, employee1, {})
            const templates = await EmployeeFiltersTemplate.getAll(user2, { id: filtersTemplate.id })

            expect(templates).toHaveLength(0)
        })

        test('user: cannot read EmployeeFiltersTemplates', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(user1, employee, {})
            const templates = await EmployeeFiltersTemplate.getAll(user2, { id: filtersTemplate.id })

            expect(templates).toHaveLength(0)
        })

        test('anonymous: cannot read EmployeeFiltersTemplates', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const anonymous = await makeClient()

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(user1, employee, {})

            await expectToThrowAuthenticationErrorToObjects(async () => {
                await EmployeeFiltersTemplate.getAll(anonymous, { id: filtersTemplate.id })
            })
        })
    })

    describe('Update', () => {
        test('admin: can update EmployeeFiltersTemplates', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(admin, employee, {})
            const newTemplateName = faker.random.alphaNumeric(8)
            const [updatedTemplate] = await updateTestEmployeeFiltersTemplate(admin, filtersTemplate.id, {
                name: newTemplateName,
            })

            expect(updatedTemplate.id).toEqual(filtersTemplate.id)
            expect(updatedTemplate.name).toEqual(newTemplateName)
        })

        test('employee: can update his EmployeeFiltersTemplates', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, user.user, role)

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(user, employee, {})
            const newTemplateName = faker.random.alphaNumeric(8)
            const [updatedTemplate] = await updateTestEmployeeFiltersTemplate(user, filtersTemplate.id, {
                name: newTemplateName,
            })

            expect(updatedTemplate.id).toEqual(filtersTemplate.id)
            expect(updatedTemplate.name).toEqual(newTemplateName)
        })

        test('employee: cannot update not his own EmployeeFiltersTemplates', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestOrganizationEmployee(admin, organization, user2.user, role)

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(user1, employee1, {})
            const newTemplateName = faker.random.alphaNumeric(8)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestEmployeeFiltersTemplate(user2, filtersTemplate.id, {
                    name: newTemplateName,
                })
            })
        })

        test('user: cannot update EmployeeFiltersTemplates', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const user2 = await makeClientWithNewRegisteredAndLoggedInUser()

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(user1, employee1, {})
            const newTemplateName = faker.random.alphaNumeric(8)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestEmployeeFiltersTemplate(user2, filtersTemplate.id, {
                    name: newTemplateName,
                })
            })
        })

        test('anonymous: cannot update EmployeeFiltersTemplates', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const user1 = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee1] = await createTestOrganizationEmployee(admin, organization, user1.user, role)
            const user2 = await makeClient()

            const [filtersTemplate] = await createTestEmployeeFiltersTemplate(user1, employee1, {})
            const newTemplateName = faker.random.alphaNumeric(8)

            await expectToThrowAuthenticationErrorToObj(async () => {
                await updateTestEmployeeFiltersTemplate(user2, filtersTemplate.id, {
                    name: newTemplateName,
                })
            })
        })
    })
})
