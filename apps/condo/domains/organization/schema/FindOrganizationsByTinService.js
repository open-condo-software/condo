/**
 * Generated by `createservice organization.FindOrganizationsByTinService --type queries`
 */

const get = require('lodash/get')

const conf = require('@open-condo/config')
const { featureToggleManager } = require('@open-condo/featureflags/featureToggleManager')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { getLogger } = require('@open-condo/keystone/logging')
const { checkDvAndSender } = require('@open-condo/keystone/plugins/dvAndSender')
const { GQLCustomSchema, find } = require('@open-condo/keystone/schema')

const { COMMON_ERRORS } = require('@condo/domains/common/constants/errors')
const { USER_WHITE_LIST_FOR_FIND_ORGANIZATIONS_BY_TIN } = require('@condo/domains/common/constants/featureflags')
const access = require('@condo/domains/organization/access/FindOrganizationsByTinService')
const { DEFAULT_UNAVAILABLE_TINS } = require('@condo/domains/organization/constants/common')
const { FindOrganizationsByTinLog } = require('@condo/domains/organization/utils/serverSchema')
const { STAFF } = require('@condo/domains/user/constants/common')
const { FIND_ORGANIZATION_BY_TIN_TYPE } = require('@condo/domains/user/constants/limits')
const {
    checkDailyRequestLimitCountersByUser,
    checkDailyRequestLimitCountersByPhone,
    checkDailyRequestLimitCountersByEmail,
    checkTotalRequestLimitCountersByUser,
    checkTotalRequestLimitCountersByEmail,
    checkTotalRequestLimitCountersByPhone,
} = require('@condo/domains/user/utils/serverSchema/requestLimitHelpers')


const appLogger = getLogger('condo')
const logger = appLogger.child({ module: 'organization/findOrganizationsByTin' })

const MAX_TOTAL_REQUESTS = 50

// NOTE: we use these TIN codes for testing by users,
// so we don't use them for this request so that the response doesn't contain a lot of data
const UNAVAILABLE_TINS = conf.UNAVAILABLE_TINS_FOR_ORGANIZATIONS_SEARCH
    ? [...JSON.parse(conf.UNAVAILABLE_TINS_FOR_ORGANIZATIONS_SEARCH), ...DEFAULT_UNAVAILABLE_TINS]
    : [...DEFAULT_UNAVAILABLE_TINS]

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    EMPTY_TIN: {
        query: 'findOrganizationsByTin',
        variable: ['data', 'tin'],
        code: BAD_USER_INPUT,
        type: 'EMPTY_TIN',
        message: 'Empty tin',
    },
    UNAVAILABLE_TIN: {
        query: 'findOrganizationsByTin',
        variable: ['data', 'tin'],
        code: BAD_USER_INPUT,
        type: 'UNAVAILABLE_TIN',
        message: 'Unavailable tin',
    },
    DV_VERSION_MISMATCH: {
        ...COMMON_ERRORS.DV_VERSION_MISMATCH,
        query: 'findOrganizationsByTin',
    },
    WRONG_SENDER_FORMAT: {
        ...COMMON_ERRORS.WRONG_SENDER_FORMAT,
        query: 'findOrganizationsByTin',
    },
}

const FindOrganizationsByTinService = new GQLCustomSchema('FindOrganizationsByTinService', {
    types: [
        {
            access: true,
            type: 'input FindOrganizationsByTinInput { dv: Int!, sender: SenderFieldInput!, tin: String! }',
        },
        {
            access: true,
            type: 'type FindOrganizationsByTinOrganizationType { id: String!, name: String! }',
        },
        {
            access: true,
            type: 'type FindOrganizationsByTinOutput { organizations: [FindOrganizationsByTinOrganizationType]! }',
        },
    ],

    queries: [
        {
            access: access.canFindOrganizationsByTin,
            schema: 'findOrganizationsByTin (data: FindOrganizationsByTinInput!): FindOrganizationsByTinOutput',
            doc: {
                summary: 'Returns all organizations by TIN. Used to get organizations that the user can apply to join',
                errors: ERRORS,
            },
            resolver: async (parent, args, context) => {
                const { data } = args
                const { tin, dv, sender } = data
                const authedItemId = get(context, 'authedItem.id', null)
                const authedItemPhone = get(context, 'authedItem.phone', null)
                const authedItemEmail = get(context, 'authedItem.email', null)
                if (!authedItemId) throw new Error('no authedItemId!')

                checkDvAndSender(data, ERRORS.DV_VERSION_MISMATCH, ERRORS.WRONG_SENDER_FORMAT, context)

                const normalizedTin = tin.trim()
                if (!normalizedTin) throw new GQLError(ERRORS.EMPTY_TIN, context)

                // NOTE: we don't use "isFeatureEnabled" because it can skip the request limit for all users
                const userWhiteList = await featureToggleManager.getFeatureValue(context, USER_WHITE_LIST_FOR_FIND_ORGANIZATIONS_BY_TIN, [], { user: authedItemId }) || []
                const skipRequestLimit = get(context, 'authedItem.isAdmin', false)
                    || get(context, 'authedItem.isSupport', false)
                    || (Array.isArray(userWhiteList) && userWhiteList.includes(authedItemId))
                if (!skipRequestLimit) {
                    // NOTE: Users can change email/phone and user data may be reset,
                    // so we remember all identifiers: userId, phone, email
                    await checkDailyRequestLimitCountersByUser(context, FIND_ORGANIZATION_BY_TIN_TYPE, authedItemId)
                    if (authedItemPhone) await checkDailyRequestLimitCountersByPhone(context, FIND_ORGANIZATION_BY_TIN_TYPE, authedItemPhone)
                    if (authedItemEmail) await checkDailyRequestLimitCountersByEmail(context, FIND_ORGANIZATION_BY_TIN_TYPE, authedItemEmail)

                    await checkTotalRequestLimitCountersByUser(context, FIND_ORGANIZATION_BY_TIN_TYPE, authedItemId, MAX_TOTAL_REQUESTS)
                    if (authedItemEmail) await checkTotalRequestLimitCountersByEmail(context, FIND_ORGANIZATION_BY_TIN_TYPE, authedItemEmail, MAX_TOTAL_REQUESTS)
                    if (authedItemPhone) await checkTotalRequestLimitCountersByPhone(context, FIND_ORGANIZATION_BY_TIN_TYPE, authedItemPhone, MAX_TOTAL_REQUESTS)
                } else {
                    const reqId = get(context, ['req', 'id'])
                    logger.info({ msg: 'Request limit was skip for user', reqId, authedItemId })
                }

                await FindOrganizationsByTinLog.create(context, {
                    tin: normalizedTin,
                    user: { connect: { id: authedItemId } },
                    userPhone: authedItemPhone,
                    userEmail: authedItemEmail,
                    dv,
                    sender,
                })

                if (UNAVAILABLE_TINS.includes(normalizedTin)) throw new GQLError(ERRORS.UNAVAILABLE_TIN, context)

                const organizations = await find('Organization', {
                    tin: normalizedTin,
                    employees_some: {
                        user: { deletedAt: null, type: STAFF },
                        role: { canManageEmployees: true, deletedAt: null },
                        isAccepted: true,
                        isRejected: false,
                        isBlocked: false,
                        deletedAt: null,
                    },
                    deletedAt: null,
                })

                return { organizations }
            },
        },
    ],
})

module.exports = {
    FindOrganizationsByTinService,
}
