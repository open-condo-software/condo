/**
 * Generated by `createservice organization.FindOrganizationsByTinService --type queries`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { checkDvAndSender } = require('@open-condo/keystone/plugins/dvAndSender')
const { GQLCustomSchema, allItemsQueryByChunks } = require('@open-condo/keystone/schema')

const { COMMON_ERRORS } = require('@condo/domains/common/constants/errors')
const access = require('@condo/domains/organization/access/FindOrganizationsByTinService')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    EMPTY_TIN: {
        query: 'findOrganizationsByTin',
        variable: ['data', 'tin'],
        code: BAD_USER_INPUT,
        type: 'EMPTY_TIN',
        message: 'Empty tin',
    },
    DV_VERSION_MISMATCH: {
        ...COMMON_ERRORS.DV_VERSION_MISMATCH,
        query: 'findOrganizationsByTin',
    },
    WRONG_SENDER_FORMAT: {
        ...COMMON_ERRORS.WRONG_SENDER_FORMAT,
        query: 'findOrganizationsByTin',
    },
}

const FindOrganizationsByTinService = new GQLCustomSchema('FindOrganizationsByTinService', {
    types: [
        {
            access: true,
            type: 'input FindOrganizationsByTinInput { dv: Int!, sender: JSON!, tin: String! }',
        },
        {
            access: true,
            type: 'type FindOrganizationsByTinOrganizationType { id: String!, name: String! }',
        },
        {
            access: true,
            type: 'type FindOrganizationsByTinOutput { organizations: [FindOrganizationsByTinOrganizationType]! }',
        },
    ],
    
    queries: [
        {
            access: access.canFindOrganizationsByTin,
            schema: 'findOrganizationsByTin (data: FindOrganizationsByTinInput!): FindOrganizationsByTinOutput',
            doc: {
                summary: 'Returns all organizations by TIN, to which the user can send a request to join',
                errors: ERRORS,
            },
            resolver: async (parent, args, context ) => {
                const { data } = args
                const { tin } = data

                checkDvAndSender(data, ERRORS.DV_VERSION_MISMATCH, ERRORS.WRONG_SENDER_FORMAT, context)

                if (!tin) throw new GQLError(ERRORS.EMPTY_TIN, context)

                // todo: Add logger
                // await checkDailyRequestLimitCountersByIp(context, 'findOrganizationsByTin', context.req.ip)

                const orgIds = new Set()
                await allItemsQueryByChunks({
                    schemaName: 'OrganizationEmployee',
                    where: {
                        organization: { tin, deletedAt: null },
                        user: { deletedAt: null },
                        role: { canManageEmployees: true, deletedAt: null },
                        isAccepted: true,
                        isRejected: false,
                        isBlocked: false,
                        deletedAt: null,
                    },
                    chunkSize: 100,
                    chunkProcessor: (employees) => {
                        employees.forEach(employee => {
                            orgIds.add(employee.organization)
                        })
                        return []
                    },
                })

                if (orgIds.size < 1) return { organizations: [] }

                const organizations = await allItemsQueryByChunks({
                    schemaName: 'Organization',
                    where: { id_in: Array.from(orgIds), tin, deletedAt: null },
                    chunkSize: 100,
                    chunkProcessor: (orgs) => {
                        return orgs.map(org => ({ id: org.id, name: org.name }))
                    },
                })

                return { organizations }
            },
        },
    ],
    
})

module.exports = {
    FindOrganizationsByTinService,
}
