/**
 * Generated by `createschema organization.OrganizationEmployeeRequest 'organization:Relationship:Organization:CASCADE;user:Relationship:User:CASCADE;isAccepted:Checkbox;isRejected:Checkbox'`
 */

const {
    makeLoggedInAdminClient,
    makeClient,
    DATETIME_RE,
    expectToThrowGraphQLRequestError,
    expectToThrowGQLError,
    expectToThrowUniqueConstraintViolationError,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAccessDeniedErrorToObjects,
    catchErrorFrom,
} = require('@open-condo/keystone/test.utils')

const {
    OrganizationEmployeeRequest,
    createTestOrganizationEmployeeRequest,
    updateTestOrganizationEmployeeRequest,
    createTestOrganization,
    makeEmployeeUserClientWithAbilities,
    createTestOrganizationEmployeeRole,
    createTestOrganizationEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
    makeClientWithServiceUser,
    createTestUser,
    makeClientWithStaffUser,
    makeClientWithResidentUser,
} = require('@condo/domains/user/utils/testSchema')


describe('OrganizationEmployeeRequest', () => {
    let admin, support, resident, service, anonymous,
        organization, user

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        resident = await makeClientWithResidentUser()
        service = await makeClientWithServiceUser()
        anonymous = await makeClient()
    })

    beforeEach(async () => {
        [organization] = await createTestOrganization(admin);
        [user] = await createTestUser(admin)
    })

    describe('Accesses', () => {
        describe('Admin', () => {
            test('can create for any users', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                expect(request.organization.id).toBe(organization.id)
                expect(request.organizationId).toBe(organization.id)
                expect(request.organizationName).toBe(organization.name)
                expect(request.organizationTin).toBe(organization.tin)
                expect(request.user.id).toBe(user.id)
                expect(request.isAccepted).toBeFalsy()
                expect(request.isRejected).toBeFalsy()
                expect(request.processedBy).toBeNull()
                expect(request.processedAt).toBeNull()
                expect(request.retries).toBe(0)
                expect(request.createdEmployee).toBeNull()
            })

            test('can read any requests', async () => {
                const [createdRequest] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                const request = await OrganizationEmployeeRequest.getOne(admin, { id: createdRequest.id })
                expect(request.id).toBe(createdRequest.id)
            })

            test('can update any requests', async () => {
                const [createdRequest] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                const [updatedRequest] = await updateTestOrganizationEmployeeRequest(admin, createdRequest.id, {
                    isAccepted: true,
                })
                expect(createdRequest.isAccepted).toBeFalsy()
                expect(updatedRequest.isAccepted).toBeTruthy()
            })

            test('cannot delete', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.delete(admin, request.id)
                })
            })

            test('can soft delete any requests', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                const [deletedRequest] = await OrganizationEmployeeRequest.softDelete(admin, request.id)
                expect(deletedRequest.deletedAt).toMatch(DATETIME_RE)
            })
        })

        describe('Support', () => {
            test('cannot create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationEmployeeRequest(support, organization, user)
                })
            })

            test('can read any requests', async () => {
                const [createdRequest] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                const request = await OrganizationEmployeeRequest.getOne(support, { id: createdRequest.id })
                expect(request.id).toBe(createdRequest.id)
            })

            test('cannot update', async () => {
                const [createdRequest] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRequest(support, createdRequest.id, {
                        isAccepted: true,
                    })
                })
            })

            test('cannot delete', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.delete(support, request.id)
                })
            })

            test('can soft delete any requests', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                const [deletedRequest] = await OrganizationEmployeeRequest.softDelete(support, request.id)
                expect(deletedRequest.deletedAt).toMatch(DATETIME_RE)
            })
        })

        describe('Staff', () => {
            let justStaff, employeeWithPermission, employeeWithoutPermission, organization

            beforeAll(async () => {
                employeeWithPermission = await makeEmployeeUserClientWithAbilities({ canManageOrganizationEmployeeRequests: true })
                organization = employeeWithPermission.organization

                const [roleWithoutPermissions] = await createTestOrganizationEmployeeRole(admin, organization, {
                    canManageOrganizationEmployeeRequests: false,
                })
                employeeWithoutPermission = await makeClientWithNewRegisteredAndLoggedInUser()
                await createTestOrganizationEmployee(admin, organization, employeeWithoutPermission.user, roleWithoutPermissions)
            })

            beforeEach(async () => {
                justStaff = await makeClientWithStaffUser()
            })

            test('cannot create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationEmployeeRequest(employeeWithPermission, organization, employeeWithPermission.user)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationEmployeeRequest(employeeWithoutPermission, organization, employeeWithoutPermission.user)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationEmployeeRequest(justStaff, organization, justStaff.user)
                })
            })

            test('can read if has employee with permission "canManageOrganizationEmployeeRequests"', async () => {
                const [createdRequest] = await createTestOrganizationEmployeeRequest(admin, organization, justStaff.user)
                const request = await OrganizationEmployeeRequest.getOne(employeeWithPermission, { id: createdRequest.id })
                expect(request.id).toBe(createdRequest.id)
            })
            test('can read if it is his request', async () => {
                const [createdRequest] = await createTestOrganizationEmployeeRequest(admin, organization, justStaff.user)
                const request = await OrganizationEmployeeRequest.getOne(justStaff, { id: createdRequest.id })
                expect(request.id).toBe(createdRequest.id)
            })
            test('cannot read if has not employee with permission "canManageOrganizationEmployeeRequests" and it is not his request', async () => {
                const [createdRequest] = await createTestOrganizationEmployeeRequest(admin, organization, justStaff.user)
                const request = await OrganizationEmployeeRequest.getOne(employeeWithoutPermission, { id: createdRequest.id })
                expect(request).toBeUndefined()
            })

            test('cannot update', async () => {
                const [createdRequest] = await createTestOrganizationEmployeeRequest(admin, organization, justStaff.user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRequest(employeeWithPermission, createdRequest.id, {
                        isAccepted: true,
                    })
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRequest(employeeWithoutPermission, createdRequest.id, {
                        isAccepted: true,
                    })
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRequest(justStaff, createdRequest.id, {
                        isAccepted: true,
                    })
                })
            })

            test('cannot delete', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, justStaff.user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.delete(employeeWithPermission, request.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.delete(employeeWithoutPermission, request.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.delete(justStaff, request.id)
                })
            })

            test('can soft delete if it is his request and there is no answer to it', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, justStaff.user)
                const [deletedRequest] = await OrganizationEmployeeRequest.softDelete(justStaff, request.id)
                expect(deletedRequest.deletedAt).toMatch(DATETIME_RE)
            })
            test('cannot soft delete if it is his request and there is answer to it', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, justStaff.user)
                await updateTestOrganizationEmployeeRequest(admin, request.id, { isRejected: true })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.softDelete(justStaff, request.id)
                })
            })
            test('cannot soft delete if it is not his request', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, justStaff.user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.softDelete(employeeWithPermission, request.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.softDelete(employeeWithoutPermission, request.id)
                })
            })
        })

        describe('Resident', () => {
            test('cannot create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationEmployeeRequest(resident, organization, user)
                })
            })

            test('cannot read', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await OrganizationEmployeeRequest.getOne(resident, { id: request.id })
                })
            })

            test('cannot update', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRequest(resident, request.id, {
                        isAccepted: true,
                    })
                })
            })

            test('cannot delete', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.delete(resident, request.id)
                })
            })

            test('cannot soft delete', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.softDelete(resident, request.id)
                })
            })
        })

        describe('Service user', () => {
            test('cannot create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationEmployeeRequest(service, organization, user)
                })
            })

            test('cannot read', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await OrganizationEmployeeRequest.getOne(service, { id: request.id })
                })
            })

            test('cannot update', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRequest(service, request.id, {
                        isAccepted: true,
                    })
                })
            })

            test('cannot delete', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.delete(service, request.id)
                })
            })

            test('cannot soft delete', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.softDelete(service, request.id)
                })
            })
        })

        describe('Anonymous', () => {
            test('cannot create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestOrganizationEmployeeRequest(anonymous, organization, user)
                })
            })

            test('cannot read', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await OrganizationEmployeeRequest.getOne(anonymous, { id: request.id })
                })
            })

            test('cannot update', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRequest(anonymous, request.id, {
                        isAccepted: true,
                    })
                })
            })

            test('cannot delete', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRequest.delete(anonymous, request.id)
                })
            })

            test('cannot soft delete', async () => {
                const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await OrganizationEmployeeRequest.softDelete(anonymous, request.id)
                })
            })
        })
    })

    describe('Basic logic', () => {
        test('cannot update "organization" field', async () => {
            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            const [organization2] = await createTestOrganization(admin)

            await expectToThrowGraphQLRequestError(async () => {
                await updateTestOrganizationEmployeeRequest(admin, request.id, { organization: { connect: { id: organization2.id } } })
            }, 'Field "organization" is not defined by type "OrganizationEmployeeRequestUpdateInput"')
        })

        test('cannot create and update "organizationId", "organizationName", "organizationTin" fields', async () => {
            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            const [organization2] = await createTestOrganization(admin)

            await expectToThrowGraphQLRequestError(async () => {
                await updateTestOrganizationEmployeeRequest(admin, request.id, { organizationId: organization2.id })
            }, 'Field "organizationId" is not defined by type "OrganizationEmployeeRequestUpdateInput"')
            await expectToThrowGraphQLRequestError(async () => {
                await updateTestOrganizationEmployeeRequest(admin, request.id, { organizationName: organization2.name })
            }, 'Field "organizationName" is not defined by type "OrganizationEmployeeRequestUpdateInput"')
            await expectToThrowGraphQLRequestError(async () => {
                await updateTestOrganizationEmployeeRequest(admin, request.id, { organizationTin: organization2.tin })
            }, 'Field "organizationTin" is not defined by type "OrganizationEmployeeRequestUpdateInput"')

            await expectToThrowGraphQLRequestError(async () => {
                await createTestOrganizationEmployeeRequest(admin, organization, user, { organizationId: organization2.id })
            }, 'Field "organizationId" is not defined by type "OrganizationEmployeeRequestCreateInput"')
            await expectToThrowGraphQLRequestError(async () => {
                await createTestOrganizationEmployeeRequest(admin, organization, user, { organizationName: organization2.name })
            }, 'Field "organizationName" is not defined by type "OrganizationEmployeeRequestCreateInput"')
            await expectToThrowGraphQLRequestError(async () => {
                await createTestOrganizationEmployeeRequest(admin, organization, user, { organizationTin: organization2.tin })
            }, 'Field "organizationTin" is not defined by type "OrganizationEmployeeRequestCreateInput"')
        })

        test('"organizationId", "organizationName", "organizationTin" fields should be auto-set from "organization"', async () => {
            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            expect(request.organization.id).toBe(organization.id)
            expect(request.organizationId).toBe(organization.id)
            expect(request.organizationName).toBe(organization.name)
            expect(request.organizationTin).toBe(organization.tin)
        })

        test('cannot update "user" field', async () => {
            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            const [user2] = await createTestUser(admin)

            await expectToThrowGraphQLRequestError(async () => {
                await updateTestOrganizationEmployeeRequest(admin, request.id, { user: { connect: { id: user2.id } } })
            }, 'Field "user" is not defined by type "OrganizationEmployeeRequestUpdateInput"')
        })

        test('cannot create with "isAccepted" or "isRejected" fields', async () => {
            await expectToThrowGraphQLRequestError(async () => {
                await createTestOrganizationEmployeeRequest(admin, organization, user, { isAccepted: true })
            }, 'Field "isAccepted" is not defined by type "OrganizationEmployeeRequestCreateInput"')
            await expectToThrowGraphQLRequestError(async () => {
                await createTestOrganizationEmployeeRequest(admin, organization, user, { isRejected: false })
            }, 'Field "isRejected" is not defined by type "OrganizationEmployeeRequestCreateInput"')

            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            expect(request.isAccepted).toBeFalsy()
            expect(request.isRejected).toBeFalsy()
        })

        test('cannot set "isAccepted" and "isRejected" at the same time', async () => {
            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            const [organization2] = await createTestOrganization(admin)
            const [user2] = await createTestUser(admin)
            const [request2] = await createTestOrganizationEmployeeRequest(admin, organization2, user2)

            await expectToThrowGQLError(async () => {
                await updateTestOrganizationEmployeeRequest(admin, request.id, { isRejected: true, isAccepted: true })
            }, {
                variable: ['data'],
                code: 'BAD_USER_INPUT',
                type: 'ACCEPT_OR_REJECT_ONLY',
                message: '"isAccepted" and "isRejected" cannot be marked at the same time',
            })

            await updateTestOrganizationEmployeeRequest(admin, request2.id, { isRejected: true })
            await expectToThrowGQLError(async () => {
                await updateTestOrganizationEmployeeRequest(admin, request2.id, { isAccepted: true })
            }, {
                variable: ['data'],
                code: 'BAD_USER_INPUT',
                type: 'ACCEPT_OR_REJECT_ONLY',
                message: '"isAccepted" and "isRejected" cannot be marked at the same time',
            })
        })

        test('cannot create and update "processedBy", "processedAt" fields', async () => {
            await expectToThrowGraphQLRequestError(async () => {
                await createTestOrganizationEmployeeRequest(admin, organization, user, { processedBy: { connect: { id: admin.user } } })
            }, 'Field "processedBy" is not defined by type "OrganizationEmployeeRequestCreateInput"')
            await expectToThrowGraphQLRequestError(async () => {
                await createTestOrganizationEmployeeRequest(admin, organization, user, { processedAt: new Date().toISOString() })
            }, 'Field "processedAt" is not defined by type "OrganizationEmployeeRequestCreateInput"')

            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            await catchErrorFrom(async () => {
                await updateTestOrganizationEmployeeRequest(admin, request.id, { processedBy: { connect: { id: admin.user.id } } })
            }, (caught) => {
                expect(caught.errors[0].message).toBe('You do not have access to this resource')
                expect(caught.errors[0].data).toEqual(expect.objectContaining({
                    type: 'mutation',
                    target: 'updateOrganizationEmployeeRequest',
                    restrictedFields: ['processedBy'],
                }))
            })
            await catchErrorFrom(async () => {
                await updateTestOrganizationEmployeeRequest(admin, request.id, { processedAt: new Date().toISOString() })
            }, (caught) => {
                expect(caught.errors[0].message).toBe('You do not have access to this resource')
                expect(caught.errors[0].data).toEqual(expect.objectContaining({
                    type: 'mutation',
                    target: 'updateOrganizationEmployeeRequest',
                    restrictedFields: ['processedAt'],
                }))
            })
        })

        test('"processedBy", "processedAt" fields should be auto-set from authed item when set "isAccepted" or "isRejected"', async () => {
            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            expect(request.processedBy).toBeNull()
            expect(request.processedAt).toBeNull()
            const [updatedRequest] = await updateTestOrganizationEmployeeRequest(admin, request.id, { isRejected: true })
            expect(updatedRequest.processedBy.id).toBe(admin.user.id)
            expect(updatedRequest.processedAt).toMatch(DATETIME_RE)

            const [organization2] = await createTestOrganization(admin)
            const [user2] = await createTestUser(admin)
            const [request2] = await createTestOrganizationEmployeeRequest(admin, organization2, user2)
            expect(request2.processedBy).toBeNull()
            expect(request2.processedAt).toBeNull()
            const [updatedRequest2] = await updateTestOrganizationEmployeeRequest(admin, request2.id, { isAccepted: true })
            expect(updatedRequest2.processedBy.id).toBe(admin.user.id)
            expect(updatedRequest2.processedAt).toMatch(DATETIME_RE)
        })

        test('"retries" can be from 0 to 4', async () => {
            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            expect(request.retries).toBe(0)
            let [updatedRequest] = await updateTestOrganizationEmployeeRequest(admin, request.id, { retries: 0 })
            expect(updatedRequest.retries).toBe(0);
            [updatedRequest] = await updateTestOrganizationEmployeeRequest(admin, request.id, { retries: 1 })
            expect(updatedRequest.retries).toBe(1);
            [updatedRequest] = await updateTestOrganizationEmployeeRequest(admin, request.id, { retries: 2 })
            expect(updatedRequest.retries).toBe(2);
            [updatedRequest] = await updateTestOrganizationEmployeeRequest(admin, request.id, { retries: 3 })
            expect(updatedRequest.retries).toBe(3);
            [updatedRequest] = await updateTestOrganizationEmployeeRequest(admin, request.id, { retries: 4 })
            expect(updatedRequest.retries).toBe(4)

            await expectToThrowGQLError(async () => {
                // NOTE: check max value
                await updateTestOrganizationEmployeeRequest(admin, request.id, { retries: 5 })
            }, {
                variable: ['data', 'retries'],
                code: 'BAD_USER_INPUT',
                type: 'INVALID_RETRIES',
                message: 'Invalid retries. The value must be from 0 to 4',
            })
            await expectToThrowGQLError(async () => {
                // NOTE: check min value
                await updateTestOrganizationEmployeeRequest(admin, request.id, { retries: -1 })
            }, {
                variable: ['data', 'retries'],
                code: 'BAD_USER_INPUT',
                type: 'INVALID_RETRIES',
                message: 'Invalid retries. The value must be from 0 to 4',
            })
        })

        test('can create only one entry for organization by user', async () => {
            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestOrganizationEmployeeRequest(admin, organization, user)
            }, 'OrganizationEmployeeRequest_unique_organization_and_user')
        })

        test('cannot connect employee with another organization and user', async () => {
            const [organization2] = await createTestOrganization(admin)
            const [user2] = await createTestUser(admin)
            const [request] = await createTestOrganizationEmployeeRequest(admin, organization, user)
            const [requestWithAnotherUser] = await createTestOrganizationEmployeeRequest(admin, organization, user2)
            const [requestWithAnotherOrganization] = await createTestOrganizationEmployeeRequest(admin, organization2, user)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
            const [employee] = await createTestOrganizationEmployee(admin, organization, user, role)

            await expectToThrowGQLError(async () => {
                await updateTestOrganizationEmployeeRequest(admin, requestWithAnotherUser.id, { createdEmployee: { connect: { id: employee.id } } })
            }, {
                variable: ['data', 'employee'],
                code: 'BAD_USER_INPUT',
                type: 'EMPLOYEE_WITH_ANOTHER_USER',
                message: 'An employee with another user cannot be connected',
            })
            await expectToThrowGQLError(async () => {
                await updateTestOrganizationEmployeeRequest(admin, requestWithAnotherOrganization.id, { createdEmployee: { connect: { id: employee.id } } })
            }, {
                variable: ['data', 'employee'],
                code: 'BAD_USER_INPUT',
                type: 'EMPLOYEE_FROM_ANOTHER_ORGANIZATION',
                message: 'An employee from another organization cannot be connected',
            })

            const [updatedRequest] = await updateTestOrganizationEmployeeRequest(admin, request.id, { createdEmployee: { connect: { id: employee.id } } })
            expect(updatedRequest.createdEmployee.id).toBe(employee.id)
        })
    })
})
