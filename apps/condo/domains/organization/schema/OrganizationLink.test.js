/**
 * Generated by `createschema organization.OrganizationLink 'from:Relationship:Organization:CASCADE; to:Relationship:Organization:SET_NULL;'`
 */

import { OrganizationLink } from '../utils/testSchema'
import { makeClientWithSupportUser } from '@condo/domains/user/utils/testSchema'

const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { createTestOrganization } = require('../utils/testSchema')
const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@core/keystone/test.utils')
const { createTestOrganizationLink, updateTestOrganizationLink } = require('@condo/domains/organization/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj } = require('../../common/utils/testSchema')

describe('OrganizationLink', () => {
    test('admin: can create OrganizationLink', async () => {
        const admin = await makeLoggedInAdminClient()
        const [organizationFrom] = await createTestOrganization(admin)
        const [organizationTo] = await createTestOrganization(admin)

        const [obj] = await createTestOrganizationLink(admin, organizationFrom, organizationTo)

        expect(obj.id).toMatch(UUID_RE)
    })

    test('support: can create OrganizationLink', async () => {
        const support = await makeClientWithSupportUser()
        const admin = await makeLoggedInAdminClient()
        const [organizationFrom] = await createTestOrganization(admin)
        const [organizationTo] = await createTestOrganization(admin)

        const [obj] = await createTestOrganizationLink(support, organizationFrom, organizationTo)

        expect(obj.id).toMatch(UUID_RE)
    })

    test('admin: can read OrganizationLink', async () => {
        const admin = await makeLoggedInAdminClient()
        const [organizationFrom] = await createTestOrganization(admin)
        const [organizationTo] = await createTestOrganization(admin)
        await createTestOrganizationLink(admin, organizationFrom, organizationTo)

        const links = await OrganizationLink.getAll(admin)
        expect(links).toHaveLength(1)
    })

    test('support: can read OrganizationLink', async () => {
        const support = await makeClientWithSupportUser()
        const admin = await makeLoggedInAdminClient()
        const [organizationFrom] = await createTestOrganization(admin)
        const [organizationTo] = await createTestOrganization(admin)
        await createTestOrganizationLink(admin, organizationFrom, organizationTo)

        const links = await OrganizationLink.getAll(support)
        expect(links).toHaveLength(1)
    })

    test('admin: can update OrganizationLink', async () => {
        const admin = await makeLoggedInAdminClient()
        const [organizationFrom] = await createTestOrganization(admin)
        const [organizationTo1] = await createTestOrganization(admin)
        const [organizationTo2] = await createTestOrganization(admin)
        const [link] = await createTestOrganizationLink(admin, organizationFrom, organizationTo1)

        const [updatedLink] = await updateTestOrganizationLink(admin, link.id, {
            to: { connect: { id: organizationTo2.id } },
        })

        expect(updatedLink.to.id).toEqual(organizationTo2.id)
    })

    test('user: cannot create OrganizationLink', async () => {
        const admin = await makeLoggedInAdminClient()
        const user = await makeClientWithNewRegisteredAndLoggedInUser()
        const [organizationFrom] = await createTestOrganization(admin)
        const [organizationTo] = await createTestOrganization(admin)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestOrganizationLink(user, organizationFrom, organizationTo)
        })
    })

    test('user: cannot update OrganizationLink', async () => {
        const user = await makeClientWithNewRegisteredAndLoggedInUser()
        const admin = await makeLoggedInAdminClient()
        const [organizationFrom] = await createTestOrganization(admin)
        const [organizationTo] = await createTestOrganization(admin)
        const [link] = await createTestOrganizationLink(admin, organizationFrom, organizationTo)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestOrganizationLink(user, link.id)
        })
    })

    test('anonymous: cannot create OrganizationLink', async () => {
        const client = await makeClient()
        const admin = await makeLoggedInAdminClient()
        const [organizationFrom] = await createTestOrganization(admin)
        const [organizationTo] = await createTestOrganization(admin)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestOrganizationLink(client, organizationFrom, organizationTo)
        })
    })

    test('anonymous: cannot update OrganizationLink', async () => {
        const client = await makeClient()
        const admin = await makeLoggedInAdminClient()
        const [organizationFrom] = await createTestOrganization(admin)
        const [organizationTo] = await createTestOrganization(admin)
        const [link] = await createTestOrganizationLink(admin, organizationFrom, organizationTo)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestOrganizationLink(client, link.id)
        })
    })
})
