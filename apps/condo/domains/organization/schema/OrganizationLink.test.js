/**
 * Generated by `createschema organization.OrganizationLink 'from:Relationship:Organization:CASCADE; to:Relationship:Organization:SET_NULL;'`
 */

const dayjs = require('dayjs')

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const { HOLDING_TYPE, ORGANIZATION_TYPES  } = require('@condo/domains/organization/constants/common')
const { registerNewOrganization, createTestOrganizationEmployeeRole, createTestOrganizationLink, updateTestOrganizationLink } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { Ticket, createTestTicket } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithSupportUser, makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

const { ERRORS } = require('./OrganizationLink')

const {
    createTestOrganizationEmployee,
    OrganizationLink,
    createTestOrganization,
} = require('../utils/testSchema')

describe('OrganizationLink', () => {
    let admin
    let support
    let anonymous
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
    })
    describe('CRUD', () => {
        describe('Create', () => {
            let fromUser
            let toUser
            let fromOrg
            let toOrg
            beforeAll(async () => {
                fromUser = await makeClientWithNewRegisteredAndLoggedInUser()
                toUser = await makeClientWithNewRegisteredAndLoggedInUser()
            })
            beforeEach(async () => {
                [fromOrg] = await registerNewOrganization(fromUser, { type: HOLDING_TYPE });
                [toOrg] = await registerNewOrganization(toUser)
            })
            test('Admin can', async () => {
                const [link] = await createTestOrganizationLink(admin, fromOrg, toOrg)
                expect(link).toBeDefined()
                expect(link).toHaveProperty(['from', 'id'], fromOrg.id)
                expect(link).toHaveProperty(['to', 'id'], toOrg.id)
            })
            test('Support can', async () => {
                const [link] = await createTestOrganizationLink(support, fromOrg, toOrg)
                expect(link).toBeDefined()
                expect(link).toHaveProperty(['from', 'id'], fromOrg.id)
                expect(link).toHaveProperty(['to', 'id'], toOrg.id)
            })
            test('User cannot even he is admin of both organizations', async () => {
                const [toOrganization] = await registerNewOrganization(fromUser)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationLink(fromUser, fromOrg, toOrganization)
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestOrganizationLink(anonymous, fromOrg, toOrg)
                })
            })
        })
        describe('Read', () => {
            let fromUser
            let toUser
            let fromOrg
            let toOrg
            let link
            beforeAll(async () => {
                fromUser = await makeClientWithNewRegisteredAndLoggedInUser()
                toUser = await makeClientWithNewRegisteredAndLoggedInUser();
                [fromOrg] = await registerNewOrganization(fromUser, { type: HOLDING_TYPE });
                [toOrg] = await registerNewOrganization(toUser);
                [link] = await createTestOrganizationLink(support, fromOrg, toOrg)
            })
            test('Admin can', async () => {
                const readLink = await OrganizationLink.getOne(admin, { id: link.id })
                expect(readLink).toHaveProperty('id', link.id)
            })
            test('Support can', async () => {
                const readLink = await OrganizationLink.getOne(support, { id: link.id })
                expect(readLink).toHaveProperty('id', link.id)
            })
            test('User can', async () => {
                const user = await makeClientWithNewRegisteredAndLoggedInUser()
                const readLink = await OrganizationLink.getOne(user, { id: link.id })
                expect(readLink).toHaveProperty('id', link.id)
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await OrganizationLink.getOne(anonymous, { id: link.id })
                })
            })
        })
        describe('Update', () => {
            let fromUser
            let toUser
            let fromOrg
            let toOrg
            let link
            beforeAll(async () => {
                fromUser = await makeClientWithNewRegisteredAndLoggedInUser()
                toUser = await makeClientWithNewRegisteredAndLoggedInUser()
            })
            beforeEach(async () => {
                [fromOrg] = await registerNewOrganization(fromUser, { type: HOLDING_TYPE });
                [toOrg] = await registerNewOrganization(toUser);
                [link] = await createTestOrganizationLink(support, fromOrg, toOrg)
            })
            test('Admin can', async () => {
                const [deletedLink] = await updateTestOrganizationLink(admin, link.id, {
                    deletedAt: dayjs().toISOString(),
                })
                expect(deletedLink).toHaveProperty('deletedAt')
                expect(deletedLink.deletedAt).not.toBeNull()
            })
            test('Support can', async () => {
                const [deletedLink] = await updateTestOrganizationLink(support, link.id, {
                    deletedAt: dayjs().toISOString(),
                })
                expect(deletedLink).toHaveProperty('deletedAt')
                expect(deletedLink.deletedAt).not.toBeNull()
            })
            test('User cannot even if he is admin of both organizations', async () => {
                const [anotherToOrg] = await registerNewOrganization(fromUser);
                [link] = await createTestOrganizationLink(support, fromOrg, anotherToOrg)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationLink(fromUser, link.id, {
                        deletedAt: dayjs().toISOString(),
                    })
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestOrganizationLink(anonymous, link.id, {})
                })
            })
        })
    })
    describe('Validations', () => {
        test('user may be a member of several "from" organizations', async () => {
            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
            const ticketCreator1 = await makeClientWithProperty()
            const ticketCreator2 = await makeClientWithProperty()
            const [ticket1] = await createTestTicket(ticketCreator1, ticketCreator1.organization, ticketCreator1.property)
            const [ticket2] = await createTestTicket(ticketCreator2, ticketCreator2.organization, ticketCreator2.property)

            const [organizationFrom1] = await createTestOrganization(admin, { type: HOLDING_TYPE })
            const [organizationFrom2] = await createTestOrganization(admin, { type: HOLDING_TYPE })
            await createTestOrganizationLink(admin, organizationFrom1, ticketCreator1.organization)
            await createTestOrganizationLink(admin, organizationFrom2, ticketCreator2.organization)

            const [role1] = await createTestOrganizationEmployeeRole(admin, organizationFrom1)
            await createTestOrganizationEmployee(admin, organizationFrom1, userClient.user, role1)
            const [role2] = await createTestOrganizationEmployeeRole(admin, organizationFrom1)
            await createTestOrganizationEmployee(admin, organizationFrom2, userClient.user, role2)

            const allTickets = await Ticket.getAll(userClient, {})

            expect(allTickets).toHaveLength(2)

            const [ticketFromOrganization1] = await Ticket.getAll(userClient, { id: ticket1.id })
            expect(ticketFromOrganization1).toBeDefined()
            expect(ticketFromOrganization1.id).toEqual(ticket1.id)

            const [ticketFromOrganization2] = await Ticket.getAll(userClient, { id: ticket2.id })
            expect(ticketFromOrganization2).toBeDefined()
            expect(ticketFromOrganization2.id).toEqual(ticket2.id)
        })
        describe(`"from" organization must have "${HOLDING_TYPE}" type`,  () => {
            test.each(ORGANIZATION_TYPES.filter(type => type !== HOLDING_TYPE))('Fail with "%p" type', async (type) => {
                const [orgFrom] = await registerNewOrganization(admin, { type })
                const [orgTo] = await registerNewOrganization(admin)
                await expectToThrowGQLError(async () => {
                    await createTestOrganizationLink(support, orgFrom, orgTo)
                }, ERRORS.PARENT_NOT_HOLDING)
            })
        })
    })
})
