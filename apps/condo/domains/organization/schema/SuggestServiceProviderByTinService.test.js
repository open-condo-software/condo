/**
 * Generated by `createservice organization.SuggestServiceProviderByTinService --type queries`
 */

const { createTestAcquiringIntegration, createTestAcquiringIntegrationContext } = require('@condo/domainsacquiring/utils/testSchema')
const { faker } = require('@faker-js/faker')
const { zip, zipObject } = require('lodash')

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObjects } = require('@open-condo/keystone/test.utils')

const { CONTEXT_FINISHED_STATUS } = require('.@condo/domains/acquiring/constants/context')
const { COLD_WATER_METER_RESOURCE_ID } = require('@condo/domains/meter/constants/constants')
const { createTestMeterResourceOwner, MeterResource } = require('@condo/domains/meter/utils/testSchema')
const { SERVICE_PROVIDER_TYPE, MANAGING_COMPANY_TYPE } = require('@condo/domains/organization/constants/common')
const { suggestProviderByTinServiceByTestClient, registerNewOrganization } = require('@condo/domains/organization/utils/testSchema')
const { Organization } = require('@condo/domains/organization/utils/testSchema')
const { VALID_TINS } = require('@condo/domains/organization/utils/tin.utils.spec')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


const gotProviderInArray = (serviceProvider, suggestedProviders) => {
    const ourCreatedProvider = suggestedProviders.find(provider => provider.tin === serviceProvider.tin)

    expect(ourCreatedProvider).toBeDefined()
    expect(ourCreatedProvider.tin).toEqual(serviceProvider.tin)

    return ourCreatedProvider
}

const addMeterResourceOwner = async (user, admin, serviceProvider) => {
    const [org] = await registerNewOrganization(user)
    const resource = await MeterResource.getOne(admin, { id: COLD_WATER_METER_RESOURCE_ID })
    const [property] = await createTestProperty(admin, org)
    return createTestMeterResourceOwner(admin, serviceProvider, resource, {
        address: property.address,
    })
}

const generateOrganizations = async (client, attrs) => {
    const organizationsPromises = []
    for (let i = 0; i < faker.random.numeric(2); i++){
        organizationsPromises.push(registerNewOrganization(client, attrs))
    }
    const organizationsAndAttrs = await Promise.all(organizationsPromises)
    return organizationsAndAttrs.map(([org]) => org)
}

describe('SuggestServiceProviderByTinService', () => {

    let support
    let admin
    let integration
    let user
    let serviceProviderTin
    beforeAll(async () => {
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        serviceProviderTin = faker.helpers.arrayElement(VALID_TINS)

        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser();
        [integration] = await createTestAcquiringIntegration(support)
    })

    it('should not find organization without acquiring context or meter owning', async () => {
        const [serviceProvider] = await registerNewOrganization(user, {
            tin: serviceProviderTin,
            type: SERVICE_PROVIDER_TYPE,
        })

        const suggestedProviders = await suggestProviderByTinServiceByTestClient(user, {
            tin: serviceProviderTin, 
        })

        const ourCreatedProvider = suggestedProviders.find(provider => provider.id === serviceProvider.id)

        expect(ourCreatedProvider).not.toBeDefined()
    })

    it('should find organization with finished acquiring context', async () => {
        const [serviceProvider] = await registerNewOrganization(user, {
            tin: serviceProviderTin,
            type: SERVICE_PROVIDER_TYPE, 
        })

        await createTestAcquiringIntegrationContext(admin, serviceProvider, integration, {
            status: CONTEXT_FINISHED_STATUS,
        })

        const [suggestedProviders] = await suggestProviderByTinServiceByTestClient(user, {
            tin: serviceProviderTin,
        })
        await gotProviderInArray(serviceProvider, suggestedProviders)
    })

    it('should find organization with meter resource owning', async () => {
        const [serviceProvider] = await registerNewOrganization(user, {
            tin: serviceProviderTin,
            type: SERVICE_PROVIDER_TYPE,
        })

        await addMeterResourceOwner(user, admin, serviceProvider)

        const [suggestedProviders] = await suggestProviderByTinServiceByTestClient(user, {
            tin: serviceProviderTin,
        })
        await gotProviderInArray(serviceProvider, suggestedProviders)
    })

    it('should find organization with finished acquiring context and meter resource owning', async () => {
        const [serviceProvider] = await registerNewOrganization(user, {
            tin: serviceProviderTin,
            type: SERVICE_PROVIDER_TYPE,
        })

        await createTestAcquiringIntegrationContext(admin, serviceProvider, integration, {
            status: CONTEXT_FINISHED_STATUS,
        })
        await addMeterResourceOwner(user, admin, serviceProvider)

        const [suggestedProviders] = await suggestProviderByTinServiceByTestClient(user, {
            tin: serviceProviderTin,
        })
        await gotProviderInArray(serviceProvider, suggestedProviders)
    })

    it('should squish duplicate tin', async () => {
        const serviceProviders = await generateOrganizations(user, {
            tin: serviceProviderTin,
            type: SERVICE_PROVIDER_TYPE,
        })

        for (const provider of serviceProviders) {
            await addMeterResourceOwner(user, admin, provider)
        }

        const [suggestedProviders] = await suggestProviderByTinServiceByTestClient(user, {
            tin: serviceProviderTin, 
        })

        expect(suggestedProviders).toHaveLength(1)
        expect(suggestedProviders[0].tin).toBe(serviceProviderTin)
    })

    it('should prefer name of managing company if has duplicates', async () => {
        const [serviceProvider] = await registerNewOrganization(user, { tin: serviceProviderTin, type: SERVICE_PROVIDER_TYPE })
        const [managingCompany] = await registerNewOrganization(user, { tin: serviceProviderTin, type: MANAGING_COMPANY_TYPE })

        await createTestAcquiringIntegrationContext(admin, serviceProvider, integration, {
            status: CONTEXT_FINISHED_STATUS,
        })
        await addMeterResourceOwner(user, admin, serviceProvider)

        const [suggestedProviders] = await suggestProviderByTinServiceByTestClient(user, {
            tin: serviceProviderTin,
        })
        const ourCreatedProvider = gotProviderInArray(serviceProvider, suggestedProviders)
        expect(ourCreatedProvider.name).not.toEqual(managingCompany.name)
    })

    it('should return empty array if tin is empty', async () => {
        const [serviceProvider] = await registerNewOrganization(user, { tin: serviceProviderTin, type: SERVICE_PROVIDER_TYPE })
        await addMeterResourceOwner(user, admin, serviceProvider)
        const [suggestedProviders] = await suggestProviderByTinServiceByTestClient(user, {
            tin: '',
        })

        expect(suggestedProviders).toHaveLength(0)
    })

    it('should find organizations by partial tin', async () => {
        const [serviceProvider] = await registerNewOrganization(user, {
            tin: serviceProviderTin,
            type: SERVICE_PROVIDER_TYPE,
        })
        await addMeterResourceOwner(user, admin, serviceProvider)
        const [suggestedProviders] = await suggestProviderByTinServiceByTestClient(user, {
            tin: serviceProviderTin.slice(0, 3),
        })
        const suggestedTins = new Set(suggestedProviders.map(provider => provider.tin))
        expect(suggestedProviders.length).toBeGreaterThan(0)
        expect(suggestedTins).toContain(serviceProviderTin)
    })

    it('should sort providers by name', async () => {
        const names = ['C', 'A', 'B']
        const tins = ['753911372120', '793675913668', '732503106799']
        const pairs = zip(names, tins)
        const attrs = pairs.map(pair => zipObject(['name', 'tin'], pair))

        for (const attr of attrs) {
            const [serviceProvider] = await registerNewOrganization(user, attr)
            await addMeterResourceOwner(user, admin, serviceProvider)
        }

        const [suggestedProviders] = await suggestProviderByTinServiceByTestClient(user, {
            tin: '7',
        })
        const gotNames = suggestedProviders.map(provider => provider.name)
        const sortedNames = [...gotNames].sort()
        expect(suggestedProviders.length).toBeGreaterThanOrEqual(3)
        gotNames.forEach((gotName, i) => {
            expect(gotName).toEqual(sortedNames[i])
        })
    })
})