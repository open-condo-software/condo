/**
 * Generated by `createservice organization.SuggestServiceProviderByTinService --type queries`
 */

const { faker } = require('@faker-js/faker')

const {
    expectToThrowAuthenticationErrorToResult,
    expectToThrowAccessDeniedErrorToResult,
} = require('@open-condo/keystone/test.utils')


const { CONTEXT_FINISHED_STATUS, CONTEXT_IN_PROGRESS_STATUS } = require('@condo/domains/acquiring/constants/context')
const {
    TestUtils,
    ResidentTestMixin,
    MeterTestMixin,
} = require('@condo/domains/billing/utils/testSchema/testUtils')
const { COLD_WATER_METER_RESOURCE_ID } = require('@condo/domains/meter/constants/constants')
const { createTestMeterResourceOwner, updateTestMeterResourceOwner, MeterResource, MeterResourceOwner } = require('@condo/domains/meter/utils/testSchema')
const { SERVICE_PROVIDER_TYPE } = require('@condo/domains/organization/constants/common')
const { suggestProviderByTinServiceByTestClient } = require('@condo/domains/organization/utils/testSchema')


const addMeterResourceOwner = async (utils) => {
    const resource = await MeterResource.getOne(utils.clients.admin, { id: COLD_WATER_METER_RESOURCE_ID })
    return createTestMeterResourceOwner(utils.clients.admin, utils.organization, resource, {
        address: utils.property.address,
    })
}
const removeMeterResourceOwners = async (utils) => {
    const owners = await MeterResourceOwner.getAll(utils.clients.admin, { organization: { id: utils.organization.id } })
    for (const owner of owners) {
        await updateTestMeterResourceOwner(utils.clients.admin, owner.id, { deletedAt: new Date().toISOString() })
    }
}
describe('SuggestServiceProviderByTinService', () => {

    let utils

    beforeAll(async () => {
        utils = new TestUtils([ResidentTestMixin, MeterTestMixin])
        await utils.init()
        await utils.updateOrganization({ type: SERVICE_PROVIDER_TYPE })
    })

    describe('Permissions check', () => {
        test('anonymous: can not execute', async () => {
            await expectToThrowAuthenticationErrorToResult(async () => {
                await suggestProviderByTinServiceByTestClient(utils.clients.anonymous, {
                    tin: String(faker.datatype.number({ min: 100, max: 10000 })),
                })
            })
        })
        test('user: can not execute', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await suggestProviderByTinServiceByTestClient(utils.clients.user, {
                    tin: String(faker.datatype.number({ min: 100, max: 10000 })),
                })
            })
        })
        test('employee: can not execute', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await suggestProviderByTinServiceByTestClient(utils.clients.employee['billing'], {
                    tin: String(faker.datatype.number({ min: 100, max: 10000 })),
                })
            })
        })
        test('service user: can not execute', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await suggestProviderByTinServiceByTestClient(utils.clients.service, {
                    tin: String(faker.datatype.number({ min: 100, max: 10000 })),
                })
            })
        })
        test('admin: can execute', async () => {
            const [organizations] = await suggestProviderByTinServiceByTestClient(utils.clients.admin, {
                tin: utils.organization.tin.substr(0, 5),
            })
            expect(organizations).not.toHaveLength(0)
        })
        test('support: can execute', async () => {
            const [organizations] = await suggestProviderByTinServiceByTestClient(utils.clients.support, {
                tin: utils.organization.tin.substr(0, 5),
            })
            expect(organizations).not.toHaveLength(0)
        })
        test('resident: can execute', async () => {
            const [organizations] = await suggestProviderByTinServiceByTestClient(utils.clients.resident, {
                tin: utils.organization.tin.substr(0, 5),
            })
            expect(organizations).not.toHaveLength(0)
        })
    })

    describe('Filtering options', () => {

        beforeEach(async () => {
            await utils.updateAcquiringContext({ status: CONTEXT_FINISHED_STATUS })
            await removeMeterResourceOwners(utils)
        })

        test('should find organization with finished acquiring context', async () => {
            const [organizations] = await suggestProviderByTinServiceByTestClient(utils.clients.resident, {
                tin: utils.organization.tin.substr(0, 5),
            })
            expect(organizations).toContainEqual({
                tin: utils.organization.tin,
                name: utils.organization.name,
            })
        })

        test('should find organization with meter resource owning', async () => {
            await utils.updateAcquiringContext({ status: CONTEXT_IN_PROGRESS_STATUS })
            await addMeterResourceOwner(utils)
            const [organizations] = await suggestProviderByTinServiceByTestClient(utils.clients.resident, {
                tin: utils.organization.tin.substr(0, 5),
            })
            expect(organizations).toContainEqual({
                tin: utils.organization.tin,
                name: utils.organization.name,
            })
        })

        test('should find organization with finished acquiring context and meter resource owning', async () => {
            await addMeterResourceOwner(utils)
            const [organizations] = await suggestProviderByTinServiceByTestClient(utils.clients.resident, {
                tin: utils.organization.tin.substr(0, 5),
            })
            expect(organizations).toContainEqual({
                tin: utils.organization.tin,
                name: utils.organization.name,
            })
        })

        test('should not find organization without acquiring context in Finished status and without meter owning', async () => {
            await utils.updateAcquiringContext({ status: CONTEXT_IN_PROGRESS_STATUS })
            const [organizations] = await suggestProviderByTinServiceByTestClient(utils.clients.resident, {
                tin: utils.organization.tin.substr(0, 5),
            })
            expect(organizations).toHaveLength(0)
        })

        test('should merge organizations with same tin', async () => {


        })

    })


})
