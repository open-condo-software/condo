/**
 * Generated by `createschema organization.FindOrganizationsByTinLog 'user:Relationship:User:SET_NULL; tin:Text'`
 */

const get = require('lodash/get')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { versioned, uuided, tracked, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/organization/access/FindOrganizationsByTinLog')


const ERRORS = {
    EMPTY_USER: {
        code: BAD_USER_INPUT,
        type: 'EMPTY_USER',
        variable: ['data', 'user'],
        message: 'The "user" field must be specified',
    },
}

const FindOrganizationsByTinLog = new GQLListSchema('FindOrganizationsByTinLog', {
    schemaDoc: 'Log of "FindOrganizationsByTin" executions',
    fields: {

        user: {
            schemaDoc: 'The user who executed the query',
            type: 'Relationship',
            ref: 'User',
            isRequired: true,
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        userPhone: {
            schemaDoc: 'The phone of user who executed the query',
            type: 'Text',
            isRequired: false,
        },

        userEmail: {
            schemaDoc: 'The email of user who executed the query',
            type: 'Text',
            isRequired: false,
        },

        tin: {
            schemaDoc: 'TIN by which organizations were searched',
            type: 'Text',
            isRequired: true,
        },

    },
    hooks: {
        validateInput: async ({ resolvedData, context, existingItem }) => {
            const newItem = { ...existingItem, ...resolvedData }
            const user = get(newItem, 'user')
            if (!user) {
                throw new GQLError(ERRORS.EMPTY_USER, context)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), dvAndSender()],
    access: {
        read: access.canReadFindOrganizationsByTinLogs,
        create: access.canManageFindOrganizationsByTinLogs,
        update: access.canManageFindOrganizationsByTinLogs,
        delete: false,
        auth: true,
    },
})

module.exports = {
    FindOrganizationsByTinLog,
}
