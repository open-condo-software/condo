/**
 * Generated by `createschema organization.FindOrganizationsByTinLog 'user:Relationship:User:SET_NULL; tin:Text'`
 */

const get = require('lodash/get')

const { versioned, uuided, tracked, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/organization/access/FindOrganizationsByTinLog')


const FindOrganizationsByTinLog = new GQLListSchema('FindOrganizationsByTinLog', {
    schemaDoc: 'Logging the query "FindOrganizationsByTin"',
    fields: {

        user: {
            schemaDoc: 'The user who caused the query',
            type: 'Relationship',
            ref: 'User',
            isRequired: true,
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        userId: {
            schemaDoc: 'The user id who caused the query (save id if user deleted)',
            type: 'Text',
            isRequired: false,
            access: {
                read: true,
                create: false,
                update: false,
            },
        },

        tin: {
            schemaDoc: 'TIN by which organizations were searched',
            type: 'Text',
            isRequired: true,
        },

    },
    hooks: {
        resolveInput: async (props) => {
            const { resolvedData, existingItem } = props
            const newItem = { ...existingItem, ...resolvedData }
            const userId = get(newItem, 'user', null)
            if (userId) {
                resolvedData['userId'] = userId
            }
            return resolvedData
        },
    },
    plugins: [uuided(), versioned(), tracked(), dvAndSender()],
    access: {
        read: access.canReadFindOrganizationsByTinLogs,
        create: access.canManageFindOrganizationsByTinLogs,
        update: access.canManageFindOrganizationsByTinLogs,
        delete: false,
        auth: true,
    },
})

module.exports = {
    FindOrganizationsByTinLog,
}
