/**
 * Generated by `createservice organization.SendNewBillingReceiptFilesNotificationsService '--type=mutations'`
 */
const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')

const { makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToResult,
    expectToThrowAccessDeniedErrorToResult,
    catchErrorFrom,
} = require('@open-condo/keystone/test.utils')

const {
    makeContextWithOrganizationAndIntegrationAsAdmin,
    makeServiceUserForIntegration,
    createTestBillingProperty,
    createTestBillingAccount,
    makeOrganizationIntegrationManager,
    createTestBillingReceipt,
    createTestBillingReceiptFile,
    updateTestBillingReceipt,
} = require('@condo/domains/billing/utils/testSchema')
const { NOT_FOUND, WRONG_VALUE } = require('@condo/domains/common/constants/errors')
const { DATE_FORMAT } = require('@condo/domains/common/utils/date')
const { createTestContact } = require('@condo/domains/contact/utils/testSchema')
const {
    BILLING_RECEIPT_FILE_ADDED_TYPE,
} = require('@condo/domains/notification/constants/constants')
const {
    Message,
} = require('@condo/domains/notification/utils/testSchema')
const {
    sendNewBillingReceiptFilesNotificationsByTestClient,
} = require('@condo/domains/organization/utils/testSchema')
const {
    createTestProperty,
} = require('@condo/domains/property/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
} = require('@condo/domains/user/utils/testSchema')

function wait (timeout) {
    return new Promise((resolve) => {
        setTimeout(resolve, timeout)
    })
}

describe('SendNewBillingReceiptFilesNotificationsService', () => {
    let admin
    let support
    let anonymous
    let user
    let context
    let receiptByAdmin
    let receiptByService
    let property
    let account
    let integrationUser
    let integrationManager
    let anotherContext
    let anotherProperty
    let anotherAccount
    let organization
    let organizationProperty

    beforeAll(async () => {
        const {
            admin: adminClient,
            context: billingContext,
            integration,
            organization: adminOrganization,
        } = await makeContextWithOrganizationAndIntegrationAsAdmin()
        admin = adminClient
        context = billingContext
        organization = adminOrganization
        integrationUser = await makeServiceUserForIntegration(integration)
        const supportUser = await makeClientWithSupportUser()
        support = supportUser
        const [firstProperty] = await createTestBillingProperty(admin, context)
        const [firstAccount] = await createTestBillingAccount(admin, context, firstProperty)
        const [orgProperty] = await createTestProperty(admin, organization, {
            address: firstProperty.address,
            addressMeta: firstProperty.addressMeta,
        })
        organizationProperty = orgProperty
        property = firstProperty
        account = firstAccount
        const { context: secondContext } = await makeContextWithOrganizationAndIntegrationAsAdmin()
        anotherContext = secondContext
        const [secondProperty] = await createTestBillingProperty(admin, anotherContext)
        const [secondAccount] = await createTestBillingAccount(admin, anotherContext, secondProperty)
        anotherProperty = secondProperty
        anotherAccount = secondAccount
        anonymous = await makeClient()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        const { managerUserClient } = await makeOrganizationIntegrationManager({ context })
        integrationManager = managerUserClient
        const [receipt] = await createTestBillingReceipt(admin, context, property, account)
        receiptByAdmin = receipt
        const [receiptCreatedByIntegration] = await createTestBillingReceipt(integrationUser, context, property, account)
        receiptByService = receiptCreatedByIntegration
    })

    describe('Access validations', () => {
        it('admin: success case', async () => {
            const createdAfter = dayjs().toISOString()
            const [billingReceiptFile] = await createTestBillingReceiptFile(admin, receiptByAdmin, context)
            const [contact] = await createTestContact(admin, organization, organizationProperty, {
                unitName: account.unitName,
                unitType: account.unitType,
                isVerified: true,
            })

            const [{ notificationsSent }] = await sendNewBillingReceiptFilesNotificationsByTestClient(admin, {
                organization: { id: organization.id },
                createdAfter,
                period: receiptByAdmin.period,
            })

            // assert sent notifications count
            expect(notificationsSent).not.toEqual(0)

            // check notification message
            const [message] = await Message.getAll(admin, {
                type: BILLING_RECEIPT_FILE_ADDED_TYPE,
                email: contact.email,
            }, { sortBy: 'createdAt_DESC' })

            expect(message).toHaveProperty('email', contact.email)
            expect(message).toHaveProperty('meta')
            expect(message.meta).toHaveProperty('data')
            expect(message.meta.data).toMatchObject({
                organization: organization.name,
            })
        })
        it('support: success case', async () => {
            const createdAfter = dayjs().toISOString()
            const [billingReceiptFile] = await createTestBillingReceiptFile(admin, receiptByAdmin, context)
            const [contact] = await createTestContact(admin, organization, organizationProperty, {
                unitName: account.unitName,
                unitType: account.unitType,
                isVerified: true,
            })

            const [{ notificationsSent }] = await sendNewBillingReceiptFilesNotificationsByTestClient(support, {
                organization: { id: organization.id },
                createdAfter,
                period: receiptByAdmin.period,
            })

            // assert sent notifications count
            expect(notificationsSent).not.toEqual(0)

            // check notification message
            const [message] = await Message.getAll(admin, {
                type: BILLING_RECEIPT_FILE_ADDED_TYPE,
                email: contact.email,
            }, { sortBy: 'createdAt_DESC' })

            expect(message).toHaveProperty('email', contact.email)
            expect(message).toHaveProperty('meta')
            expect(message.meta).toHaveProperty('data')
            expect(message.meta.data).toMatchObject({
                organization: organization.name,
            })
        })
        it('user: denied case', async () => {
            const createdAfter = dayjs().toISOString()

            await expectToThrowAccessDeniedErrorToResult(async () => {
                await sendNewBillingReceiptFilesNotificationsByTestClient(user, {
                    organization: { id: organization.id },
                    createdAfter,
                    period: receiptByAdmin.period,
                })
            })
        })
        it('anonymous: denied case', async () => {
            const createdAfter = dayjs().add(-1, 'days').toISOString()

            await expectToThrowAuthenticationErrorToResult(async () => {
                await sendNewBillingReceiptFilesNotificationsByTestClient(anonymous, {
                    organization: { id: organization.id },
                    createdAfter,
                    period: receiptByAdmin.period,
                })
            })
        })
    })

    describe('Business logic', () => {
        it('Watermark filtering out files', async () => {
            const [billingReceiptFile] = await createTestBillingReceiptFile(admin, receiptByAdmin, context)
            const [contact] = await createTestContact(admin, organization, organizationProperty, {
                unitName: account.unitName,
                unitType: account.unitType,
                isVerified: true,
            })

            // wait for a second
            await wait(1000)
            const createdAfter = dayjs().toISOString()
            await wait(1000)
            const [{ notificationsSent }] = await sendNewBillingReceiptFilesNotificationsByTestClient(admin, {
                organization: { id: organization.id },
                createdAfter,
                period: receiptByAdmin.period,
            })

            // assert sent notifications count
            expect(notificationsSent).toEqual(0)
        })

        it('BillingReceipt was deleted', async () => {
            const createdAfter = dayjs().toISOString()
            const [billingProperty] = await createTestBillingProperty(admin, context)
            const [billingReceipt] = await createTestBillingReceipt(admin, context, billingProperty, account)
            const [billingReceiptFile] = await createTestBillingReceiptFile(admin, billingReceipt, context)
            const [orgProperty] = await createTestProperty(admin, organization, {
                address: billingProperty.address,
                addressMeta: billingProperty.addressMeta,
            })
            const [contact] = await createTestContact(admin, organization, orgProperty, {
                unitName: account.unitName,
                unitType: account.unitType,
                isVerified: true,
            })

            // deleted receipt
            await updateTestBillingReceipt(admin, billingReceipt.id, {
                deletedAt: dayjs().toISOString(),
            })

            await wait(1000)
            const [{ notificationsSent }] = await sendNewBillingReceiptFilesNotificationsByTestClient(admin, {
                organization: { id: organization.id },
                createdAfter,
                period: billingReceipt.period,
            })

            // assert sent notifications count
            expect(notificationsSent).toEqual(0)
        })

        it('No verified contacts', async () => {
            const createdAfter = dayjs().toISOString()
            const [billingProperty] = await createTestBillingProperty(admin, context)
            const [billingReceipt] = await createTestBillingReceipt(admin, context, billingProperty, account)
            const [billingReceiptFile] = await createTestBillingReceiptFile(admin, billingReceipt, context)
            const [orgProperty] = await createTestProperty(admin, organization, {
                address: billingProperty.address,
                addressMeta: billingProperty.addressMeta,
            })
            const [contact] = await createTestContact(admin, organization, orgProperty, {
                unitName: account.unitName,
                unitType: account.unitType,
                isVerified: false,
            })

            await wait(1000)
            const [{ notificationsSent }] = await sendNewBillingReceiptFilesNotificationsByTestClient(admin, {
                organization: { id: organization.id },
                createdAfter,
                period: billingReceipt.period,
            })

            // assert sent notifications count
            expect(notificationsSent).toEqual(0)
        })
    })

    describe('Validations', () => {
        let periodDate, year, month, createdAfter
        let billingReceiptFile, contact

        beforeAll(async () => {
            const [billingReceiptFileResult] = await createTestBillingReceiptFile(admin, receiptByAdmin, context)
            const [contactResult] = await createTestContact(admin, organization, organizationProperty, {
                unitName: account.unitName,
                unitType: account.unitType,
                isVerified: true,
            })
            billingReceiptFile = billingReceiptFileResult
            contact = contactResult

            periodDate = dayjs(receiptByAdmin.period)
            year = periodDate.year()
            month = periodDate.format('MMMM')
            createdAfter = dayjs().add(-1, 'days').toISOString()
        })

        it('Not valid period', async () => {
            await catchErrorFrom(async () => {
                await sendNewBillingReceiptFilesNotificationsByTestClient(admin, {
                    organization: { id: organization.id },
                    createdAfter,
                    period: 'january 2024',
                })
            }, ({ errors }) => {
                expect(errors).toMatchObject([{
                    extensions: {
                        code: 'BAD_USER_INPUT',
                        type: NOT_FOUND,
                        message: `Please provide proper period not before start of previous and not later than start of current month, valid format is ${DATE_FORMAT}`,
                    },
                }])
            })
        })

        it('Empty organization', async () => {
            await catchErrorFrom(async () => {
                await sendNewBillingReceiptFilesNotificationsByTestClient(admin, {
                    organization: { id: faker.datatype.uuid() },
                    createdAfter,
                    period: receiptByAdmin.period,
                })
            }, ({ errors }) => {
                expect(errors).toMatchObject([{
                    extensions: {
                        code: 'BAD_USER_INPUT',
                        type: NOT_FOUND,
                        message: 'Could not find Organization by specified search criteria',
                    },
                }])
            })
        })
    })
})