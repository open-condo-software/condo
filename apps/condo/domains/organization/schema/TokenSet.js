/**
 * Generated by `createschema organization.TokenSet 'user:Relationship:User:SET_NULL; organization:Relationship:Organization:SET_NULL; importRemoteSystem:Text; accessToken:Text; accessTokenExpiresAt:DateTimeUtc; refreshToken:Text; refreshTokenExpiresAt:DateTimeUtc;'`
 */

const { Text, Relationship, DateTimeUtc } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/organization/access/TokenSet')


const TokenSet = new GQLListSchema('TokenSet', {
    // TODO(codegen): write doc for the TokenSet domain model!
    schemaDoc: 'Set of oauth tokens from remote systems',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        user: {
            schemaDoc: 'User owner of tokens',
            type: Relationship,
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.SET_NULL' },
        },

        organization: {
            schemaDoc: 'Organization owner of tokens',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.SET_NULL' },
        },

        importRemoteSystem: {
            schemaDoc: 'Remote system name',
            type: Text,
            isRequired: true,
        },

        accessToken: {
            schemaDoc: 'Token to call remote system API',
            type: Text,
            isRequired: true,
        },

        accessTokenExpiresAt: {
            schemaDoc: 'Time when access token needs to be generated again',
            type: DateTimeUtc,
            isRequired: true,
        },

        refreshToken: {
            schemaDoc: 'Token to generate access tokens',
            type: Text,
            isRequired: true,
        },

        refreshTokenExpiresAt: {
            schemaDoc: 'Time when we will completly lost control over organization',
            type: DateTimeUtc,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadTokenSets,
        create: access.canManageTokenSets,
        update: access.canManageTokenSets,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TokenSet,
}
