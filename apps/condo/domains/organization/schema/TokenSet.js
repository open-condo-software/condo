/**
 * Generated by `createschema organization.TokenSet 'user:Relationship:User:SET_NULL; organization:Relationship:Organization:SET_NULL; importRemoteSystem:Text; accessToken:Text; accessTokenExpiresAt:DateTimeUtc; refreshToken:Text; refreshTokenExpiresAt:DateTimeUtc;'`
 */

const { Text, Relationship, DateTimeUtc } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/organization/access/TokenSet')


const TokenSet = new GQLListSchema('TokenSet', {
    schemaDoc: 'Set of oauth tokens from remote systems',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        user: {
            schemaDoc: 'User owner of tokens',
            type: Relationship,
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        organization: {
            schemaDoc: 'Organization owner of tokens',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        importRemoteSystem: {
            schemaDoc: 'Remote system name',
            type: Text,
            isRequired: true,
        },

        accessToken: {
            schemaDoc: 'Token to call remote system API',
            type: Text,
            isRequired: true,
        },

        accessTokenExpiresAt: {
            schemaDoc: 'Time when access token needs to be generated again',
            type: DateTimeUtc,
            isRequired: true,
        },

        refreshToken: {
            schemaDoc: 'Token to generate access tokens',
            type: Text,
            isRequired: true,
        },

        refreshTokenExpiresAt: {
            schemaDoc: 'Time when we will completly lost control over organization',
            type: DateTimeUtc,
            isRequired: true,
        },

        clientSecret: {
            schemaDoc: 'Should be known only to application and authorization SBBOL server. It will be presented only in record for our Organization, that an will be an author of requests to SBBOL API in server-server integration. "Our" organization is a record of Organization, created from data, received from SBBOL after successful authorization in application using SBBOL with credentials of SBBOL-account, that represents our company as a partner of SBBOL. So, logically, this field will be initialized only for one record.',
            type: Text,
            isRequired: false,
        },

        clientSecretExpiresAt: {
            schemaDoc: 'After specified datetime a client secret will be invalid and should be changed. There is a scheduled job for that',
            type: DateTimeUtc,
            isRequired: false,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadTokenSets,
        create: access.canManageTokenSets,
        update: access.canManageTokenSets,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TokenSet,
}
