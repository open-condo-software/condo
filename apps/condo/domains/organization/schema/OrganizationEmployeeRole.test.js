/**
 * Generated by `createschema organization.OrganizationEmployeeRole 'organization:Relationship:Organization:CASCADE; name:Text; statusTransitions:Json; canManageOrganization:Checkbox; canManageEmployees:Checkbox; canManageRoles:Checkbox; canManageIntegrations:Checkbox; canManageProperties:Checkbox; canManageTickets:Checkbox;' --force`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, expectToThrowUniqueConstraintViolationError,
    expectToThrowGQLError, expectToThrowAuthenticationErrorToObjects, expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObj,
} = require('@open-condo/keystone/test.utils')
const { getTranslations, getAvailableLocales } = require('@open-condo/locales/loader')

const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/miniapp/constants')
const { B2BAppRole, createTestB2BApp, createTestB2BAppContext, createTestB2BAppRole } = require('@condo/domains/miniapp/utils/testSchema')
const { ORGANIZATION_TICKET_VISIBILITY, PROPERTY_TICKET_VISIBILITY } = require('@condo/domains/organization/constants/common')
const { DEFAULT_ROLES } = require('@condo/domains/organization/constants/common')
const {
    OrganizationEmployee,
    OrganizationEmployeeRole,
    createTestOrganizationEmployeeRole,
    updateTestOrganizationEmployeeRole,
    createTestOrganizationEmployee,
    registerNewOrganization,
    createTestOrganization, makeEmployeeUserClientWithAbilities,
} = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithRegisteredOrganization } = require('@condo/domains/organization/utils/testSchema/Organization')
const { DEFAULT_STATUS_TRANSITIONS } = require('@condo/domains/ticket/constants/statusTransitions')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

const { ERRORS } = require('./OrganizationEmployeeRole')


describe('OrganizationEmployeeRole', () => {
    let admin, support, employeeUser, employeeUserWithoutPermissions, notEmployeeUser, anonymous

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        employeeUser = await makeEmployeeUserClientWithAbilities({ canManageRoles: true })
        const [roleWithoutPermissions] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization, { canManageRoles: false })
        employeeUserWithoutPermissions = await makeClientWithNewRegisteredAndLoggedInUser()
        await createTestOrganizationEmployee(admin, employeeUser.organization, employeeUserWithoutPermissions.user, roleWithoutPermissions, { isAccepted: true })
        notEmployeeUser = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()
    })

    describe('Accesses', () => {
        describe('Admin', () => {
            test('can read roles for any organizations', async () => {
                const roles = await OrganizationEmployeeRole.getAll(admin, { id: employeeUser.role.id })
                expect(roles).toHaveLength(1)
            })
            test('can create roles for any organizations', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                expect(role).toBeDefined()
            })
            test('can update roles for any organizations', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization, { canManageTickets: true })
                expect(role).toHaveProperty('canManageTickets', true)
                const [updatedRole] = await updateTestOrganizationEmployeeRole(admin, role.id, { canManageTickets: false })
                expect(updatedRole).toHaveProperty('canManageTickets', false)
            })
            test('cannot delete', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRole.delete(admin, role.id)
                })
            })
            test('can soft-delete', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                const [deletedRole] = await OrganizationEmployeeRole.softDelete(admin, role.id)
                expect(deletedRole.deletedAt).not.toBeNull()
            })
        })

        describe('Support', () => {
            test('can read roles for any organizations', async () => {
                const roles = await OrganizationEmployeeRole.getAll(support, { id: employeeUser.role.id })
                expect(roles).toHaveLength(1)
            })
            test('can create roles for any organizations', async () => {
                const [role] = await createTestOrganizationEmployeeRole(support, employeeUser.organization)
                expect(role).toBeDefined()
            })
            test('can update roles for any organizations', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization, { canManageTickets: true })
                expect(role).toHaveProperty('canManageTickets', true)
                const [updatedRole] = await updateTestOrganizationEmployeeRole(support, role.id, { canManageTickets: false })
                expect(updatedRole).toHaveProperty('canManageTickets', false)
            })
            test('cannot delete', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRole.delete(support, role.id)
                })
            })
            test('can soft-delete', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                const [deletedRole] = await OrganizationEmployeeRole.softDelete(support, role.id)
                expect(deletedRole.deletedAt).not.toBeNull()
            })
        })

        describe('Employee', () => {
            test('can read for organization it employed in', async () => {
                const roles = await OrganizationEmployeeRole.getAll(employeeUser, { id: employeeUser.role.id })
                expect(roles).toHaveLength(1)
                const roles2 = await OrganizationEmployeeRole.getAll(employeeUserWithoutPermissions, { id: employeeUser.role.id })
                expect(roles2).toHaveLength(1)
            })
            test('can create with granted "canManageRoles" permission for organization it employed in', async () => {
                const [role] = await createTestOrganizationEmployeeRole(employeeUser, employeeUser.organization)
                expect(role).toBeDefined()
            })
            test('cannot create without granted "canManageRoles" permission for organization it employed in', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationEmployeeRole(employeeUserWithoutPermissions, employeeUser.organization)
                })
            })
            test('can update with granted "canManageRoles" permission for organization it employed in', async () => {
                const [role] = await createTestOrganizationEmployeeRole(employeeUser, employeeUser.organization, { canManageTickets: true })
                expect(role).toHaveProperty('canManageTickets', true)
                const [updatedRole] = await updateTestOrganizationEmployeeRole(employeeUser, role.id, { canManageTickets: false })
                expect(updatedRole).toHaveProperty('canManageTickets', false)
            })
            test('cannot update without granted "canManageRoles" permission for organization it employed in', async () => {
                const [role] = await createTestOrganizationEmployeeRole(employeeUser, employeeUser.organization, { canManageTickets: true })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRole(employeeUserWithoutPermissions, role.id, { canManageTickets: false })
                })
            })
            test('cannot delete', async () => {
                const [role] = await createTestOrganizationEmployeeRole(employeeUser, employeeUser.organization)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRole.delete(employeeUser, role.id)
                })
            })
            test('can soft-delete with granted "canManageRoles" permission for organization it employed in', async () => {
                const [role] = await createTestOrganizationEmployeeRole(employeeUser, employeeUser.organization)
                const [deletedRole] = await OrganizationEmployeeRole.softDelete(employeeUser, role.id)
                expect(deletedRole.deletedAt).not.toBeNull()
            })
            test('cannot soft-delete without granted "canManageRoles" permission for organization it employed in', async () => {
                const [role] = await createTestOrganizationEmployeeRole(employeeUser, employeeUser.organization, { canManageTickets: true })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRole.softDelete(employeeUserWithoutPermissions, role.id)
                })
            })
        })

        describe('Not employee', () => {
            test('cannot read', async () => {
                const roles = await OrganizationEmployeeRole.getAll(notEmployeeUser, { id: employeeUser.role.id })
                expect(roles).toHaveLength(0)
            })
            test('cannot create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationEmployeeRole(notEmployeeUser, employeeUser.organization)
                })
            })
            test('cannot update', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRole(notEmployeeUser, role.id)
                })
            })
            test('cannot delete', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRole.delete(notEmployeeUser, role.id)
                })
            })
            test('cannot soft-delete', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRole.softDelete(notEmployeeUser, role.id)
                })
            })
        })

        describe('Anonymous', () => {
            test('cannot read', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await OrganizationEmployeeRole.getAll(anonymous, { id: employeeUser.role.id })
                })
            })
            test('cannot create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestOrganizationEmployeeRole(anonymous, employeeUser.organization)
                })
            })
            test('cannot update', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRole(anonymous, role.id)
                })
            })
            test('cannot delete', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await OrganizationEmployeeRole.delete(anonymous, role.id)
                })
            })
            test('cannot soft-delete', async () => {
                const [role] = await createTestOrganizationEmployeeRole(admin, employeeUser.organization)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await OrganizationEmployeeRole.softDelete(anonymous, role.id)
                })
            })
        })
    })

    describe('Constraints', () => {
        test('cannot create role with duplicate name in organization', async () => {
            const [organization] = await createTestOrganization(admin)
            const roleName = faker.lorem.words(3)
            await createTestOrganizationEmployeeRole(admin, organization, { name: roleName })

            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestOrganizationEmployeeRole(admin, organization, { name: roleName })
            }, 'organization_employee_role_unique_organization_and_name')
        })
    })

    describe('Basic logic', () => {
        describe('"isDefault" field', () => {
            test('cannot be created or updated by any user', async () => {
                const [organization] = await createTestOrganization(admin)

                const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRole(admin, role.id, { isDefault: true })
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationEmployeeRole(admin, organization, { isDefault: true })
                })
            })

            test('filled with the value of false by default', async () => {
                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                expect(role).toHaveProperty('isDefault', false)
            })
        })
        describe('"isEditable" field', () => {
            test('cannot be created or updated by any user', async () => {
                const [organization] = await createTestOrganization(admin)

                const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestOrganizationEmployeeRole(admin, role.id, { isEditable: false })
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestOrganizationEmployeeRole(admin, organization, { isEditable: false })
                })
            })

            test('filled with the value of true by default', async () => {
                const [organization] = await createTestOrganization(admin)
                const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                expect(role).toHaveProperty('isEditable', true)
            })
        })

        test('you cannot soft-delete a role if "isDefault" is true', async () => {
            const [organization] = await registerNewOrganization(admin)
            const [role] = await OrganizationEmployeeRole.getAll(admin, { organization: { id: organization.id }, isDefault: true })
            await expectToThrowGQLError(async () => {
                await OrganizationEmployeeRole.softDelete(admin, role.id)
            }, ERRORS.CANNOT_DELETE_DEFAULT_ROLE)
        })
        test('you cannot soft-delete a role if have employees with this role', async () => {
            const [organization] = await registerNewOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization)
            const employeeClient = await makeClientWithNewRegisteredAndLoggedInUser()
            const [employee] = await createTestOrganizationEmployee(admin, organization, employeeClient.user, role, { isAccepted: true })
            await expectToThrowGQLError(async () => {
                await OrganizationEmployeeRole.softDelete(admin, role.id)
            }, ERRORS.EMPLOYEES_WITH_THIS_ROLE_WERE_FOUND(1))

            await OrganizationEmployee.softDelete(admin, employee.id)
            const [deletedRole] = await OrganizationEmployeeRole.softDelete(admin, role.id)
            expect(deletedRole.deletedAt).not.toBeNull()
        })
        test('you cannot soft-delete a role if have b2b-app roles with this employee role', async () => {
            const [organization] = await registerNewOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization)
            const [b2bApp] = await createTestB2BApp(admin, { contextDefaultStatus: CONTEXT_FINISHED_STATUS })
            await createTestB2BAppContext(admin, b2bApp, organization)
            const [b2bAppRole] = await createTestB2BAppRole(admin, b2bApp, role)

            await expectToThrowGQLError(async () => {
                await OrganizationEmployeeRole.softDelete(admin, role.id)
            }, ERRORS.B2B_APP_ROLES_WITH_THIS_ROLE_WERE_FOUND(1))

            await B2BAppRole.softDelete(admin, b2bAppRole.id)
            const [deletedRole] = await OrganizationEmployeeRole.softDelete(admin, role.id)
            expect(deletedRole.deletedAt).not.toBeNull()
        })

        test('you cannot update "name", "description", "ticketVisibilityType" fields if "isDefault" is true', async () => {
            const [organization] = await registerNewOrganization(admin)
            const [role] = await OrganizationEmployeeRole.getAll(admin, {
                organization: { id: organization.id },
                isDefault: true,
                isEditable: true,
            })
            expect(role).toBeDefined()

            await expectToThrowGQLError(async () => {
                await updateTestOrganizationEmployeeRole(admin, role.id, { name: faker.lorem.word(3) })
            }, ERRORS.CANNOT_UPDATE_FIELD_FOR_DEFAULT_ROLE('name'))

            await expectToThrowGQLError(async () => {
                // updateTestOrganizationEmployeeRole update name because we pass name: undefined
                await updateTestOrganizationEmployeeRole(admin, role.id, { description: faker.lorem.word(3), name: undefined })
            }, ERRORS.CANNOT_UPDATE_FIELD_FOR_DEFAULT_ROLE('description'))

            await expectToThrowGQLError(async () => {
                // updateTestOrganizationEmployeeRole update name because we pass name: undefined
                await updateTestOrganizationEmployeeRole(admin, role.id, { ticketVisibilityType: PROPERTY_TICKET_VISIBILITY, name: undefined })
            }, ERRORS.CANNOT_UPDATE_FIELD_FOR_DEFAULT_ROLE('ticketVisibilityType'))
        })

        test('you cannot update a role if "isEditable" is false', async () => {
            const [organization] = await registerNewOrganization(admin)
            const [role] = await OrganizationEmployeeRole.getAll(admin, { organization: { id: organization.id }, isEditable: false })
            expect(role).toBeDefined()
            await expectToThrowGQLError(async () => {
                // updateTestOrganizationEmployeeRole update name because we pass name: undefined
                await updateTestOrganizationEmployeeRole(admin, role.id, { canReadTickets: false, name: undefined })
            }, ERRORS.CANNOT_UPDATE_NOT_EDITABLE_ROLE)
        })

        test('name of custom role cannot same with translation of default role', async () => {
            const [organization] = await createTestOrganization(admin)

            await expectToThrowGQLError(async () => {
                await createTestOrganizationEmployeeRole(admin, organization, { name: 'manager' })
            }, ERRORS.ROLE_NAME_ALREADY_EXIST)
            await expectToThrowGQLError(async () => {
                await createTestOrganizationEmployeeRole(admin, organization, { name: 'ДИСПЕТЧЕР' })
            }, ERRORS.ROLE_NAME_ALREADY_EXIST)
        })
        test('name and description of custom role cannot same with translation keys of default role', async () => {
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                name: 'employee.role.contractor.name',
                description: 'employee.role.contractor.description',
            })
            expect(role).toHaveProperty('name', 'employee. role. contractor. name')
            expect(role).toHaveProperty('description', 'employee. role. contractor. description')
        })
        test('name of custom role length must be between 1 to 128 characters', async () => {
            const [organization] = await createTestOrganization(admin)

            const [role, attr] = await createTestOrganizationEmployeeRole(admin, organization, { name: `  ${faker.random.alphaNumeric(10)}  ` })
            expect(role).toHaveProperty('name', attr.name.trim())

            await expectToThrowGQLError(async () => {
                await createTestOrganizationEmployeeRole(admin, organization, { name: '    ' })
            }, ERRORS.INVALID_ROLE_NAME_LENGTH)
            await expectToThrowGQLError(async () => {
                await createTestOrganizationEmployeeRole(admin, organization, { name: faker.random.alphaNumeric(129) })
            }, ERRORS.INVALID_ROLE_NAME_LENGTH)
        })
        test('name of a custom role cannot be deleted', async () => {
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization)
            await expectToThrowGQLError(async () => {
                await updateTestOrganizationEmployeeRole(admin, role.id, { name: '' })
            }, ERRORS.INVALID_ROLE_NAME_LENGTH)
            await expectToThrowGQLError(async () => {
                await updateTestOrganizationEmployeeRole(admin, role.id, { name: null })
            }, ERRORS.INVALID_ROLE_NAME_LENGTH)
        })

        test('description of custom role length cannot be more than 1024 characters', async () => {
            const [organization] = await createTestOrganization(admin)

            const [role, attr] = await createTestOrganizationEmployeeRole(admin, organization, { description: `  ${faker.random.alphaNumeric(10)}  ` })
            expect(role).toHaveProperty('description', attr.description.trim())

            const [role2, attr2] = await createTestOrganizationEmployeeRole(admin, organization, { description: '    ' })
            expect(role2).toHaveProperty('description', attr2.description.trim())

            await expectToThrowGQLError(async () => {
                await createTestOrganizationEmployeeRole(admin, organization, { description: faker.random.alphaNumeric(1025) })
            }, ERRORS.INVALID_ROLE_DESCRIPTION_LENGTH)
        })
        test('description of a custom role can be deleted', async () => {
            const [organization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, organization)
            const [updatedRole] = await updateTestOrganizationEmployeeRole(admin, role.id, { description: '' })
            expect(updatedRole).toHaveProperty('description', '')
            const [updatedRole2] = await updateTestOrganizationEmployeeRole(admin, role.id, { description: null })
            expect(updatedRole2).toHaveProperty('description', '')
        })

        test.each(getAvailableLocales())('localization [%s]: static roles has translations', async (locale) => {
            const translations = getTranslations(locale)

            const client = await makeClientWithRegisteredOrganization()
            client.setHeaders({
                'Accept-Language': locale,
            })

            const defaultRolesInstances = await OrganizationEmployeeRole.getAll(client, {
                organization: { id: client.organization.id },
                isDefault: true,
            })
            Object.values(DEFAULT_ROLES).forEach(staticRole => {
                const nameTranslation = translations[staticRole.name]
                const descriptionTranslation = translations[staticRole.description]
                const defaultRoleInstance = Object.values(defaultRolesInstances).find(x => x.name === nameTranslation && x.description === descriptionTranslation)
                console.log({
                    defaultRolesInstances,
                    nameTranslation,
                    descriptionTranslation,
                    defaultRoleInstance,
                })
                expect(defaultRoleInstance).toBeDefined()
            })
        })

        test('role has default values for ability attributes, according to schema defaults', async () => {
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            const [obj, attrs] = await createTestOrganizationEmployeeRole(admin, organization)
            expect(obj.id).toMatch(UUID_RE)
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(1)
            expect(obj.name).toEqual(attrs.name)
            expect(obj.statusTransitions).toMatchObject(DEFAULT_STATUS_TRANSITIONS)
            expect(obj.organization).toEqual(expect.objectContaining({ id: organization.id }))
            expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            expect(obj.createdAt).toMatch(DATETIME_RE)
            expect(obj.updatedAt).toMatch(DATETIME_RE)
            expect(obj.isDefault).toBeFalsy()
            expect(obj.isEditable).toBeTruthy()
            expect(obj.canManageOrganization).toBeFalsy()
            expect(obj.canManageEmployees).toBeFalsy()
            expect(obj.canManageRoles).toBeFalsy()
            expect(obj.canManageIntegrations).toBeFalsy()
            expect(obj.canManageProperties).toBeFalsy()
            expect(obj.canManageTickets).toBeFalsy()
            expect(obj.canManageCallRecords).toBeFalsy()
            expect(obj.canDownloadCallRecords).toBeFalsy()
            expect(obj.canManageContacts).toBeFalsy()
            expect(obj.canManageContactRoles).toBeFalsy()
            expect(obj.canManageTicketComments).toBeTruthy()
            expect(obj.canShareTickets).toBeTruthy()
            expect(obj.canBeAssignedAsResponsible).toBeTruthy()
            expect(obj.canBeAssignedAsExecutor).toBeTruthy()
            expect(obj.canReadPayments).toBeFalsy()
            expect(obj.canReadBillingReceipts).toBeFalsy()
            expect(obj.canManageBankAccounts).toBeFalsy()
            expect(obj.canManageBankAccountReportTasks).toBeFalsy()
            expect(obj.canManageBankContractorAccounts).toBeFalsy()
            expect(obj.canManageBankIntegrationAccountContexts).toBeFalsy()
            expect(obj.canManageBankIntegrationOrganizationContexts).toBeFalsy()
            expect(obj.canManageBankTransactions).toBeFalsy()
            expect(obj.canManageBankAccountReports).toBeFalsy()
            expect(obj.canManageIncidents).toBeFalsy()
            expect(obj.canManageNewsItems).toBeFalsy()
            expect(obj.canManageNewsItemTemplates).toBeFalsy()
            expect(obj.canManageMobileFeatureConfigs).toBeFalsy()
            expect(obj.nameNonLocalized).toEqual(obj.name)
            expect(obj.descriptionNonLocalized).toEqual(obj.description)
            expect(obj.ticketVisibilityType).toEqual(ORGANIZATION_TICKET_VISIBILITY)
        })
    })
})
