/**
 * Generated by `createservice organization.GetAccessTokenByUserIdService --type queries`
 */

const faker = require('faker')

const { makeLoggedInAdminClient, makeClient, expectToThrowAuthenticationErrorToResult, expectToThrowAccessDeniedErrorToResult } = require('@open-condo/keystone/test.utils')

const { SBBOL_INTEGRATION_NAME } = require('@condo/domains/organization/constants')
const { getSbbolSecretStorage } = require('@condo/domains/organization/integrations/sbbol/utils/getSbbolSecretStorage')
const { getAccessTokenByUserIdByTestClient, createTestTokenAccessRight } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithServiceUser } = require('@condo/domains/user/utils/testSchema')


 
describe('GetAccessTokenByUserIdService', () => {
    let admin, service, storage
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        service = await makeClientWithServiceUser()
        await createTestTokenAccessRight(admin, service.user, SBBOL_INTEGRATION_NAME)
        storage = getSbbolSecretStorage()
    })

    test('service: execute', async () => {
        const value = faker.datatype.uuid()
        const userId = faker.datatype.uuid()
        
        await storage.setRefreshToken(value, userId)
        await storage.setAccessToken(value, userId)

        const payload = {
            userId,
            integrationName: SBBOL_INTEGRATION_NAME,
        }
        const [data, attrs] = await getAccessTokenByUserIdByTestClient(service, payload)

        expect(data.accessToken).toEqual(value)
        expect(data.ttl).toBeTruthy()
    })

    test('service: execute if no TokenAccessRight instance', async () => {
        const service = await makeClientWithServiceUser()
        const value = faker.datatype.uuid()
        const userId = faker.datatype.uuid()

        await storage.setRefreshToken(value, userId)
        await storage.setAccessToken(value, userId)

        const payload = {
            userId,
            integrationName: SBBOL_INTEGRATION_NAME,
        }
        await expectToThrowAccessDeniedErrorToResult(async () => {
            await getAccessTokenByUserIdByTestClient(service, payload)
        })
    })
 
    test('anonymous: execute', async () => {
        const client = await makeClient()
        const userId = faker.datatype.uuid()
        const payload = {
            userId,
            integrationName: SBBOL_INTEGRATION_NAME,
        }

        await expectToThrowAuthenticationErrorToResult(async () => {
            await getAccessTokenByUserIdByTestClient(client, payload)
        })
    })
 
    test('admin: execute', async () => {
        const value = faker.datatype.uuid()
        const userId = faker.datatype.uuid()

        await storage.setRefreshToken(value, userId)
        await storage.setAccessToken(value, userId)

        const payload = {
            userId,
            integrationName: SBBOL_INTEGRATION_NAME,
        }
        const [data, attrs] = await getAccessTokenByUserIdByTestClient(admin, payload)

        expect(data.accessToken).toEqual(value)
        expect(data.ttl).toBeTruthy()
    })
})