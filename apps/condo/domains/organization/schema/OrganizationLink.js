/**
 * Generated by `createschema organization.OrganizationLink 'from:Relationship:Organization:CASCADE; to:Relationship:Organization:SET_NULL;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/organization/access/OrganizationLink')


const OrganizationLink = new GQLListSchema('OrganizationLink', {
    schemaDoc: 'communication between an organization and organizations in which it can view internal information (tickets)',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        from: {
            schemaDoc: 'Organization that can view internal information of organizations from the field "to"',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, unique: true, on_delete: 'models.CASCADE' },
        },

        to: {
            schemaDoc: 'Organizations whose internal information can be viewed by an organization from the field "from"',
            type: Relationship,
            ref: 'Organization.relatedOrganizations',
            many: true,
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadOrganizationLinks,
        create: access.canManageOrganizationLinks,
        update: access.canManageOrganizationLinks,
        delete: false,
        auth: true,
    },
})

module.exports = {
    OrganizationLink,
}
