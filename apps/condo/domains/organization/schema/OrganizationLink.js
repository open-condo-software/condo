/**
 * Generated by `createschema organization.OrganizationLink 'from:Relationship:Organization:CASCADE; to:Relationship:Organization:SET_NULL;'`
 */

const { Relationship } = require('@keystonejs/fields')

const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const access = require('@condo/domains/organization/access/OrganizationLink')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const { dvAndSender } = require('../../common/schema/plugins/dvAndSender')


const OrganizationLink = new GQLListSchema('OrganizationLink', {
    schemaDoc: 'A relationship between organizations that allows employees of one organization to interact as employees of another.',
    fields: {
        from: ORGANIZATION_OWNED_FIELD,

        to: {
            schemaDoc: 'Organization that gives access',
            type: Relationship,
            ref: 'Organization.relatedOrganizations',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadOrganizationLinks,
        create: access.canManageOrganizationLinks,
        update: access.canManageOrganizationLinks,
        delete: false,
        auth: true,
    },
})

module.exports = {
    OrganizationLink,
}
