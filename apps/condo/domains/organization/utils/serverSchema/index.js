/**
 * Generated by `createschema organization.Organization 'country:Select:ru,en; name:Text; description?:Text; avatar?:File; meta:Json; employees:Relationship:OrganizationEmployee:CASCADE; statusTransitions:Json; defaultEmployeeRoleStatusTransitions:Json' --force`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */

const { generateServerUtils, execGqlWithoutAccess } = require('@open-condo/codegen/generate.server.utils')

const { RESET_ORGANIZATION_MUTATION } = require('@condo/domains/organization/gql')
const { REPLACE_ORGANIZATION_EMPLOYEE_ROLE_MUTATION } = require('@condo/domains/organization/gql')
const { FIND_ORGANIZATIONS_BY_TIN_MUTATION } = require('@condo/domains/organization/gql')
const { SEND_ORGANIZATION_EMPLOYEE_REQUEST_MUTATION } = require('@condo/domains/organization/gql')
const { ACCEPT_OR_REJECT_ORGANIZATION_EMPLOYEE_REQUEST_MUTATION } = require('@condo/domains/organization/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const Organization = generateServerUtils('Organization')
const OrganizationEmployee = generateServerUtils('OrganizationEmployee')
const OrganizationEmployeeRole = generateServerUtils('OrganizationEmployeeRole')
const OrganizationLink = generateServerUtils('OrganizationLink')
const OrganizationEmployeeSpecialization = generateServerUtils('OrganizationEmployeeSpecialization')
const FindOrganizationsByTinLog = generateServerUtils('FindOrganizationsByTinLog')

async function resetOrganization (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')
    if (!data.organizationId) throw new Error('no data.organizationId')

    return await execGqlWithoutAccess(context, {
        query: RESET_ORGANIZATION_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to resetOrganization',
        dataPath: 'obj',
    })
}

async function replaceOrganizationEmployeeRole (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: REPLACE_ORGANIZATION_EMPLOYEE_ROLE_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to replaceOrganizationEmployeeRole',
        dataPath: 'obj',
    })
}

async function findOrganizationsByTin (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: FIND_ORGANIZATIONS_BY_TIN_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to findOrganizationsByTin',
        dataPath: 'obj',
    })
}
const OrganizationEmployeeRequest = generateServerUtils('OrganizationEmployeeRequest')
async function sendOrganizationEmployeeRequest (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: SEND_ORGANIZATION_EMPLOYEE_REQUEST_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to sendOrganizationEmployeeRequest',
        dataPath: 'obj',
    })
}

async function acceptOrRejectOrganizationEmployeeRequest (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: ACCEPT_OR_REJECT_ORGANIZATION_EMPLOYEE_REQUEST_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to acceptOrRejectOrganizationEmployeeRequest',
        dataPath: 'obj',
    })
}

/* AUTOGENERATE MARKER <CONST> */

module.exports = {
    Organization,
    OrganizationEmployee,
    OrganizationEmployeeRole,
    OrganizationLink,
    OrganizationEmployeeSpecialization,
    resetOrganization,
    replaceOrganizationEmployeeRole,
    findOrganizationsByTin,
    FindOrganizationsByTinLog,
    OrganizationEmployeeRequest,
    sendOrganizationEmployeeRequest,
    acceptOrRejectOrganizationEmployeeRequest,
/* AUTOGENERATE MARKER <EXPORTS> */
}
