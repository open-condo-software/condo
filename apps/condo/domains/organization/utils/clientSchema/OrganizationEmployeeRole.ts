/**
 * Generated by `createschema organization.OrganizationEmployeeRole 'organization:Relationship:Organization:CASCADE; name:Text; statusTransitions:Json; canManageOrganization:Checkbox; canManageEmployees:Checkbox; canManageRoles:Checkbox; canManageIntegrations:Checkbox; canManageProperties:Checkbox; canManageTickets:Checkbox;' --force`
 */
import {
    OrganizationEmployeeRole,
    OrganizationEmployeeRoleCreateInput,
    OrganizationEmployeeRoleUpdateInput,
    QueryAllOrganizationEmployeeRolesArgs,
} from '@app/condo/schema'

import { generateReactHooks } from '@open-condo/codegen/generate.hooks'

import { OrganizationEmployeeRole as OrganizationEmployeeRoleGQL } from '@condo/domains/organization/gql'

export interface IOrganizationEmployeeRoleSelectState {
    value: string
    label: string
}

const convertGQLItemToFormSelectState = (item: OrganizationEmployeeRole): IOrganizationEmployeeRoleSelectState | undefined => {
    if (!item) {
        return
    }
    const { name, id } = item

    return { value: id, label: name }
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useSoftDelete,
} = generateReactHooks<OrganizationEmployeeRole, OrganizationEmployeeRoleCreateInput, OrganizationEmployeeRoleUpdateInput, QueryAllOrganizationEmployeeRolesArgs>(OrganizationEmployeeRoleGQL)

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useSoftDelete,
    convertGQLItemToFormSelectState,
}
