/**
 * Generated by `createschema organization.OrganizationLinkEmployeeAccess 'link:Relationship:OrganizationLink:CASCADE; employee:Relationship:OrganizationEmployee:CASCADE; canManageOrganization:Checkbox; canManageEmployees:Checkbox; canManageRoles:Checkbox; canManageIntegrations:Checkbox; canManageProperties:Checkbox; canManageTickets:Checkbox;'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { OrganizationLinkEmployeeAccess as OrganizationLinkEmployeeAccessGQL } from '@condo/domains/organization/gql'
import { OrganizationLinkEmployeeAccess, OrganizationLinkEmployeeAccessUpdateInput, QueryAllOrganizationLinkEmployeeAccessesArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'link', 'employee', 'canManageOrganization', 'canManageEmployees', 'canManageRoles', 'canManageIntegrations', 'canManageProperties', 'canManageTickets']
const RELATIONS = ['link', 'employee']

export interface IOrganizationLinkEmployeeAccessUIState extends OrganizationLinkEmployeeAccess {
    id: string
    // TODO(codegen): write IOrganizationLinkEmployeeAccessUIState or extends it from
}

function convertToUIState (item: OrganizationLinkEmployeeAccess): IOrganizationLinkEmployeeAccessUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IOrganizationLinkEmployeeAccessUIState
}

export interface IOrganizationLinkEmployeeAccessFormState {
    id?: undefined
    // TODO(codegen): write IOrganizationLinkEmployeeAccessUIFormState or extends it from
}

function convertToUIFormState (state: IOrganizationLinkEmployeeAccessUIState): IOrganizationLinkEmployeeAccessFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IOrganizationLinkEmployeeAccessFormState
}

function convertToGQLInput (state: IOrganizationLinkEmployeeAccessFormState): OrganizationLinkEmployeeAccessUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<OrganizationLinkEmployeeAccess, OrganizationLinkEmployeeAccessUpdateInput, IOrganizationLinkEmployeeAccessFormState, IOrganizationLinkEmployeeAccessUIState, QueryAllOrganizationLinkEmployeeAccessesArgs>(OrganizationLinkEmployeeAccessGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
