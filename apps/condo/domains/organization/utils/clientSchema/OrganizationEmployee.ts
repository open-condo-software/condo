/**
 * Generated by `createschema organization.OrganizationEmployee 'organization:Relationship:Organization:CASCADE; user:Relationship:User:SET_NULL; inviteCode:Text; name:Text; email:Text; phone:Text; role:Relationship:OrganizationEmployeeRole:SET_NULL; isAccepted:Checkbox; isRejected:Checkbox' --force`
 */

import { get, omit } from 'lodash'
import {
    DivisionCreateInput, DivisionUpdateInput,
    OrganizationEmployee,
    OrganizationEmployeeCreateInput,
    OrganizationEmployeeUpdateInput,
    QueryAllOrganizationEmployeesArgs,
} from '@app/condo/schema'
import { generateNewReactHooks } from '@condo/domains/common/utils/codegeneration/new.generate.hooks'
import { OrganizationEmployee as OrganizationEmployeeGQL } from '@condo/domains/organization/gql'

function convertGQLItemToFormSelectState (item: OrganizationEmployee): { value: string, label: string } | undefined {
    const userOrganization = get(item, 'organization')
    if (!userOrganization) {
        return
    }

    const { name } = userOrganization

    return { value: item.id, label: name }
}

function formValuesProcessor (formValues): OrganizationEmployeeCreateInput | OrganizationEmployeeUpdateInput {
    const input: DivisionCreateInput | DivisionUpdateInput = omit(formValues, ['specializations', 'role'])
    if (formValues['role']) {
        input['role'] = { connect: { id: formValues['role'] } }
    }
    if (formValues['specializations']) {
        input['specializations'] = {
            disconnectAll: true,
            connect: formValues['specializations'].map(id => ({ id })),
        }
    }

    return input
}

const {
    useNewObject,
    useNewObjects,
    useNewCreate,
    useNewUpdate,
    useNewSoftDelete,
} = generateNewReactHooks<OrganizationEmployee, OrganizationEmployeeCreateInput, OrganizationEmployeeUpdateInput, QueryAllOrganizationEmployeesArgs>(OrganizationEmployeeGQL)

export {
    useNewObject,
    useNewObjects,
    useNewCreate,
    useNewUpdate,
    useNewSoftDelete,
    convertGQLItemToFormSelectState,
    formValuesProcessor,
}
