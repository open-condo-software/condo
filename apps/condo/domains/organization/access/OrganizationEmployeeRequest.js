// @ts-nocheck
/**
 * Generated by `createschema organization.OrganizationEmployeeRequest 'organization:Relationship:Organization:CASCADE;user:Relationship:User:CASCADE;isAccepted:Checkbox;isRejected:Checkbox'`
 */

const get = require('lodash/get')

const { isSoftDelete } = require('@open-condo/keystone/access')
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { STAFF } = require('@condo/domains/user/constants/common')

const { getEmployedOrRelatedOrganizationsByPermissions, checkPermissionsInEmployedOrRelatedOrganizations } = require('../utils/accessSchema')

/**
 * Requests can read:
 * 1) User who sent the request
 * 2) Employee with permission "canManageOrganizationEmployeeRequests"
 * 3) Supports
 * 3) Admins
 */
async function canReadOrganizationEmployeeRequests ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}
    if (user.type !== STAFF) return false

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canManageOrganizationEmployeeRequests')

    if (permittedOrganizations.length < 0) return { user: { id: user.id } }

    return {
        OR: [{
            organization: { id_in: permittedOrganizations },
        }, {
            user: { id: user.id },
        }],
    }
}

/**
 * Requests can create and update:
 * 1) Admins
 *
 * Requests can soft delete:
 * 1) Admins
 * 2) Supports
 * 3) Users who sent the request if it was not answered
 */
async function canManageOrganizationEmployeeRequests ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true
    if (user.type !== STAFF) return false

    const isSoftDeleteOperation = operation === 'update' && !!get(originalInput, 'deletedAt')
    if (isSoftDeleteOperation) {
        if (user.isSupport) return true

        if (!itemId) return false
        const item = await getById('OrganizationEmployeeRequest', itemId)
        if (!item || item.deletedAt) return false
        const userId = get(item, 'user')
        if (!userId) return false
        if (get(item, 'isAccepted') || get(item, 'isRejected')) return false
        return userId === user.id
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadOrganizationEmployeeRequests,
    canManageOrganizationEmployeeRequests,
}
