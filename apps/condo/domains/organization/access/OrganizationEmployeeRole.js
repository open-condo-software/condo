/**
 * Generated by `createschema organization.OrganizationEmployeeRole 'organization:Relationship:Organization:CASCADE; user:Relationship:User:SET_NULL; name:Text; statusTransitions:Json; canManageOrganization:Checkbox; canManageEmployees:Checkbox; canManageRoles:Checkbox; canManageIntegrations:Checkbox; canManageProperties:Checkbox; canManageTickets:Checkbox;' --force`
 */
const { queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const { getByCondition, getById } = require('@core/keystone/schema')
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')
const get = require('lodash/get')

async function canReadOrganizationEmployeeRoles ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isSupport || item.isAdmin) return {}
        const userId = item.id
        return {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(userId),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(userId),
                ],
            },
        }
    }
    return false
}

async function canManageOrganizationEmployeeRoles ({ authentication: { item, listKey }, operation, originalInput }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        if (operation === 'create') {
            const organizationId = get(originalInput, ['organization', 'connect', 'id'])

            // `GraphQLWhere` type cannot be used in case of `create` operation,
            // because we will get an error:
            // > Expected a Boolean for OrganizationEmployeeRole.access.create(), but got Object
            // In https://www.keystonejs.com/api/access-control#list-level-access-control it states:
            // > For `create` operations, an `AccessDeniedError` is returned if the operation is set to / returns `false`
            // Actually, here we repeating the same logic, as declared for another operations
            const userEmployee = await getByCondition('OrganizationEmployee', {
                organization: { id: organizationId },
                user: { id: item.id },
                deletedAt: null,
                isBlocked: false,
            })
            if (!userEmployee) return false

            const employeeRole = await getById('OrganizationEmployeeRole', userEmployee.role)
            if (!employeeRole) return false

            return employeeRole.canManageRoles
        }
        return {
            organization: { employees_some: { user: { id: item.id }, role: { canManageRoles: true }, isBlocked: false } },
        }
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadOrganizationEmployeeRoles,
    canManageOrganizationEmployeeRoles,
}
