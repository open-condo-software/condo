/**
 * Generated by `createschema organization.OrganizationEmployee 'organization:Relationship:Organization:CASCADE; user:Relationship:User:SET_NULL; inviteCode:Text; name:Text; email:Text; phone:Text; role:Relationship:OrganizationEmployeeRole:SET_NULL; isAccepted:Checkbox; isRejected:Checkbox' --force`
 */
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { canReadObjectsAsB2BAppServiceUser } = require('@condo/domains/miniapp/utils/b2bAppServiceUserAccess')
const {
    checkPermissionsInEmployedOrganizations,
    getEmployedOrRelatedOrganizationsByPermissions,
} = require('@condo/domains/organization/utils/accessSchema')
const { SERVICE } = require('@condo/domains/user/constants/common')


async function canReadOrganizationEmployees (args) {
    const { authentication: { item: user }, context } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    if (user.type === SERVICE) {
        return await canReadObjectsAsB2BAppServiceUser(args)
    }

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canReadEmployees')

    return {
        OR: [
            { user: { id: user.id } },
            {
                organization: {
                    id_in: permittedOrganizations,
                },
            },
        ],
    }
}

async function canManageOrganizationEmployees ({ authentication: { item: user }, context, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    // NOTE: you should use `inviteNewOrganizationEmployee`
    if (operation === 'create') return false
    if (user.isSupport) return true

    if (operation === 'update' && itemId) {
        const employeeToEdit = await getById('OrganizationEmployee', itemId)

        if (!employeeToEdit || !employeeToEdit.organization) return false

        return await checkPermissionsInEmployedOrganizations(context, user, employeeToEdit.organization, 'canManageEmployees')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadOrganizationEmployees,
    canManageOrganizationEmployees,
}
