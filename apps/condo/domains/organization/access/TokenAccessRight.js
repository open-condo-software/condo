// @ts-nocheck
/**
 * Generated by `createschema organization.TokenAccessRight 'name:Text; user:Relationship:User:CASCADE;'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { SERVICE } = require('@condo/domains/user/constants/common')

async function canReadTokenAccessRights ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}
    
    if (user.type === SERVICE) return {
        user: { id: user.id },
        deletedAt: null,
    }

    return false
}

async function canManageTokenAccessRights ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadTokenAccessRights,
    canManageTokenAccessRights,
}
