/**
 * Generated by `createservice organization.GetAccessTokenByUserIdService --type queries`
 */
const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { TokenAccessRight } = require('@condo/domains/organization/utils/serverSchema')
const { SERVICE } = require('@condo/domains/user/constants/common')

async function canGetAccessTokenByUserId (args) {
    const { authentication: { item: user }, args: { data }, context } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type === SERVICE) {
        const tokenAccessRights = await TokenAccessRight.getAll(context, {
            deletedAt: null,
            name: get(data, 'integrationName'),
            user: { id: user.id },
        }, { first: 1 })

        return tokenAccessRights.length > 0
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canGetAccessTokenByUserId,
}