/**
 * Generated by `createschema settings.MobileFeatureConfig 'organization:Relationship:Organization:CASCADE; emergencyPhone:Text; commonPhone:Text; onlyProgressionMeterReadingsIsEnabled:Checkbox; meta:Json; ticketSubmittingIsEnabled:Checkbox'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { normalizePhone } = require('@condo/domains/common/utils/phone')
const access = require('@condo/domains/settings/access/MobileFeatureConfig')



const ERRORS = {
    TICKET_SUBMITTING_PHONES_NOT_CONFIGURED: {
        code: BAD_USER_INPUT,
        type: 'TICKET_SUBMITTING_PHONES_NOT_CONFIGURED',
        message: 'emergencyPhone or commonPhone field not specified',
        messageForUser: 'api.organization.MobileFeatureConfig.TICKET_SUBMITTING_PHONES_NOT_CONFIGURED',
    },
    COMMON_PHONE_INVALID: {
        code: BAD_USER_INPUT,
        variable: ['data', 'commonPhone'],
        type: 'COMMON_PHONE_NOT_CONFIGURED',
        message: 'commonPhone is invalid',
        messageForUser: 'api.organization.MobileFeatureConfig.COMMON_PHONE_INVALID',
    },
    EMERGENCY_PHONE_INVALID: {
        code: BAD_USER_INPUT,
        variable: ['data', 'emergencyPhone'],
        type: 'COMMON_PHONE_NOT_CONFIGURED',
        message: 'emergencyPhone is invalid',
        messageForUser: 'api.organization.MobileFeatureConfig.EMERGENCY_PHONE_INVALID',
    },
    ORGANIZATION_IS_REQUIRED: {
        code: BAD_USER_INPUT,
        variable: ['data', 'organization'],
        type: 'ORGANIZATION_IS_REQUIRED',
        message: 'The organization is required to create',
        messageForUser: 'api.organization.MobileFeatureConfig.ORGANIZATION_IS_REQUIRED',
    },
}

const MobileFeatureConfig = new GQLListSchema('MobileFeatureConfig', {
    schemaDoc: 'The entity helps to manage the enabling/disabling of some features in the mobile application,' +
        ' as well as to store the data required in the disabled state of the feature.',
    fields: {

        organization: {
            schemaDoc: 'Ref to the organization. Also needed for scope management',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        emergencyPhone: {
            schemaDoc: 'The phone number where the organization wants to receive emergency calls',
            type: Text,
        },

        commonPhone: {
            schemaDoc: 'The phone number where the organization wants to receive common calls',
            type: Text,
        },

        ticketSubmittingIsEnabled: {
            schemaDoc: 'Disabling the ability to send tickets by the user of the resident\'s mobile application. ' +
                'Instead, he will be shown a screen with phones where he can contact to send a request',
            type: Checkbox,
            hooks: {
                validateInput: async ({ resolvedData, context }) => {
                    if (resolvedData.ticketSubmittingIsEnabled) {
                        if (!resolvedData['emergencyPhone'] && !resolvedData['commonPhone']) {
                            throw new GQLError(ERRORS.TICKET_SUBMITTING_PHONES_NOT_CONFIGURED, context)
                        }
                        if (resolvedData['commonPhone'] && normalizePhone(resolvedData['commonPhone']) !== resolvedData['commonPhone']) {
                            throw new GQLError(ERRORS.COMMON_PHONE_INVALID, context)
                        }
                        if (resolvedData['emergencyPhone'] && normalizePhone(resolvedData['emergencyPhone']) !== resolvedData['emergencyPhone']) {
                            throw new GQLError(ERRORS.EMERGENCY_PHONE_INVALID, context)
                        }
                    }
                },
            },
        },

        onlyProgressionMeterReadingsIsEnabled: {
            schemaDoc: 'If enabled, the resident can only submit meter readings if they are greater than the previous ones. ' +
                'Restrictions apply to mobile phones only.',
            type: Checkbox,
        },

        meta: {
            schemaDoc: 'Can be used to store additional settings from external sources or mini apps',
            type: Json,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMobileFeatureConfigs,
        create: access.canManageMobileFeatureConfigs,
        update: access.canManageMobileFeatureConfigs,
        delete: false,
        auth: true,
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'mobilefeatureconfig_unique_organization',
            },
        ],
    },
})

module.exports = {
    MobileFeatureConfig,
}
