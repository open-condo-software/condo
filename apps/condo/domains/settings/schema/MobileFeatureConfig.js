/**
 * Generated by `createschema settings.MobileFeatureConfig 'organization:Relationship:Organization:CASCADE; emergencyPhone:Text; commonPhone:Text; onlyGreaterThanPreviousMeterReadingIsEnabled:Checkbox; meta:Json; ticketSubmittingIsDisabled:Checkbox'`
 */

const { z } = require('zod')

const { GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { PHONE_FIELD } = require('@condo/domains/common/schema/fields')
const { getGQLErrorValidator } = require('@condo/domains/common/schema/json.utils')
const { ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const access = require('@condo/domains/settings/access/MobileFeatureConfig')
const { ticketSubmittingValidations } = require('@condo/domains/settings/utils/MobileFeatureConfigSchemaValidations')

const CONTENT_CONFIGURATION_SCHEMA = z.object({
    marketplace: z.object({
        appId: z.string(),
    }).optional(),
}).strict()

const CONTENT_CONFIGURATION_FIELD_NAME = 'ContentConfiguration'

const CONTENT_CONFIGURATION_FIELD_TYPE = `
    type ${CONTENT_CONFIGURATION_FIELD_NAME} {
        marketplace: MarketplaceContentConfigurationType
    }

    type MarketplaceContentConfigurationType {
        appId: String!
    }
`

const contentConfigurationValidator = CONTENT_CONFIGURATION_SCHEMA

const ERRORS = {
    TICKET_SUBMITTING_PHONES_NOT_CONFIGURED: {
        code: BAD_USER_INPUT,
        variable: ['data', 'commonPhone'],
        type: 'TICKET_SUBMITTING_PHONES_NOT_CONFIGURED',
        message: 'commonPhone field not specified',
        messageForUser: 'api.settings.mobileFeatureConfig.TICKET_SUBMITTING_PHONES_NOT_CONFIGURED',
    },
    COMMON_PHONE_INVALID: {
        code: BAD_USER_INPUT,
        variable: ['data', 'commonPhone'],
        type: 'COMMON_PHONE_NOT_CONFIGURED',
        message: 'commonPhone is invalid',
        messageForUser: 'api.settings.mobileFeatureConfig.COMMON_PHONE_INVALID',
    },
    ORGANIZATION_IS_REQUIRED: {
        code: BAD_USER_INPUT,
        variable: ['data', 'organization'],
        type: 'ORGANIZATION_IS_REQUIRED',
        message: 'The organization is required to create',
        messageForUser: 'api.settings.MobileFeatureConfig.ORGANIZATION_IS_REQUIRED',
    },
    CONTENT_CONFIGURATION_INVALID: {
        code: BAD_USER_INPUT,
        variable: ['data', 'contentConfiguration'],
        type: 'CONTENT_CONFIGURATION_INVALID',
        message: 'Content configuration is invalid',
        messageForUser: 'api.settings.mobileFeatureConfig.CONTENT_CONFIGURATION_INVALID',
    },
}

const MobileFeatureConfig = new GQLListSchema('MobileFeatureConfig', {
    schemaDoc: 'Manages availability of some features in mobile application,' +
        ' stores data required in disabled state of a feature.',
    fields: {
        organization: ORGANIZATION_OWNED_FIELD,

        commonPhone: {
            ...PHONE_FIELD,
            schemaDoc: 'Phone number where the organization wants to receive common calls',
        },

        ticketSubmittingIsDisabled: {
            schemaDoc: 'Disabling the ability to send tickets by the user of the resident\'s mobile application. ' +
                'Instead, he will be shown a screen with phones where he can contact to send a request',
            type: 'Checkbox',
        },

        onlyGreaterThanPreviousMeterReadingIsEnabled: {
            schemaDoc: 'Restricts residents to submit only meter readings, that are greater than previous. ' +
                'Restrictions apply to mobile phones only.',
            type: 'Checkbox',
        },

        contentConfiguration: {
            schemaDoc: 'Desired mobile app content configuration for this organization',
            type: 'Json',
            extendGraphQLTypes: [CONTENT_CONFIGURATION_FIELD_TYPE],
            graphQLReturnType: CONTENT_CONFIGURATION_FIELD_NAME,
            isRequired: false,
            hooks: {
                validateInput: getGQLErrorValidator(contentConfigurationValidator, 'CONTENT_CONFIGURATION_INVALID'),
            },
        },

        meta: {
            schemaDoc: 'Can be used to store some meta information for mobile applications.',
            type: 'Json',
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMobileFeatureConfigs,
        create: access.canManageMobileFeatureConfigs,
        update: access.canManageMobileFeatureConfigs,
        delete: false,
        auth: true,
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'mobilefeatureconfig_unique_organization',
            },
        ],
    },
    hooks: {
        validateInput: async ({ resolvedData, context, existingItem }) => {
            await ticketSubmittingValidations(resolvedData, context, existingItem, ERRORS)
        },
    },
})

module.exports = {
    MobileFeatureConfig,
}