/**
 * Generated by `createschema settings.MobileFeatureConfig 'organization:Relationship:Organization:CASCADE; emergencyPhone:Text; commonPhone:Text; onlyGreaterThanPreviousMeterReadingIsEnabled:Checkbox; meta:Json; ticketSubmittingIsEnabled:Checkbox'`
 */

const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    expectValuesOfCommonFields,
    catchErrorFrom,
    expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { SERVICE_PROVIDER_TYPE } = require('@condo/domains/organization/constants/common')
const {
    createTestOrganization,
    createTestOrganizationEmployee,
    createTestOrganizationEmployeeRole,
    registerNewOrganization,
} = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty, updateTestProperty } = require('@condo/domains/property/utils/testSchema')
const { registerResidentByTestClient } = require('@condo/domains/resident/utils/testSchema')
const {
    MobileFeatureConfig,
    createTestMobileFeatureConfig,
    updateTestMobileFeatureConfig,
} = require('@condo/domains/settings/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
    makeClientWithResidentUser,
} = require('@condo/domains/user/utils/testSchema')

describe('MobileFeatureConfig', () => {
    let admin, support
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
    })
    describe('CRUD tests', () => {
        describe('accesses', () => {
            describe('admin', () => {
                test('can create', async () => {
                    const [organization] = await createTestOrganization(admin)

                    const [obj, attrs] = await createTestMobileFeatureConfig(admin, organization)

                    expectValuesOfCommonFields(obj, attrs, admin)
                })

                test('can update', async () => {
                    const [organization] = await createTestOrganization(admin)

                    const [objCreated] = await createTestMobileFeatureConfig(admin, organization)

                    const [obj, attrs] = await updateTestMobileFeatureConfig(admin, objCreated.id)

                    expect(obj.dv).toEqual(1)
                    expect(obj.sender).toEqual(attrs.sender)
                    expect(obj.v).toEqual(2)
                    expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                })

                test('can\'t hard delete', async () => {
                    const [organization] = await createTestOrganization(admin)

                    const [objCreated] = await createTestMobileFeatureConfig(admin, organization)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await MobileFeatureConfig.delete(admin, objCreated.id)
                    })
                })

                test('can read', async () => {
                    const [organization] = await createTestOrganization(admin)

                    const [obj, attrs] = await createTestMobileFeatureConfig(admin, organization)

                    const objs = await MobileFeatureConfig.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                    expect(objs.length).toBeGreaterThanOrEqual(1)
                    expect(objs).toEqual(expect.arrayContaining([
                        expect.objectContaining({
                            id: obj.id,
                        }),
                    ]))
                })
            })

            describe('support', () => {
                test('can create', async () => {
                    const [organization] = await createTestOrganization(admin)

                    const [obj, attrs] = await createTestMobileFeatureConfig(support, organization)

                    expectValuesOfCommonFields(obj, attrs, support)
                })

                test('can update', async () => {
                    const [organization] = await createTestOrganization(admin)

                    const [objCreated] = await createTestMobileFeatureConfig(support, organization)

                    const [obj, attrs] = await updateTestMobileFeatureConfig(support, objCreated.id)

                    expect(obj.dv).toEqual(1)
                    expect(obj.sender).toEqual(attrs.sender)
                    expect(obj.v).toEqual(2)
                    expect(obj.updatedBy).toEqual(expect.objectContaining({ id: support.user.id }))
                })

                test('can\'t hard delete', async () => {
                    const [organization] = await createTestOrganization(admin)

                    const [objCreated] = await createTestMobileFeatureConfig(support, organization)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await MobileFeatureConfig.delete(support, objCreated.id)
                    })
                })

                test('can read', async () => {
                    const [organization] = await createTestOrganization(admin)

                    const [obj, attrs] = await createTestMobileFeatureConfig(support, organization)

                    const objs = await MobileFeatureConfig.getAll(support, {}, { sortBy: ['updatedAt_DESC'] })

                    expect(objs.length).toBeGreaterThanOrEqual(1)
                    expect(objs).toEqual(expect.arrayContaining([
                        expect.objectContaining({
                            id: obj.id,
                        }),
                    ]))
                })
            })

            describe('anonymous', () => {
                test('can\'t create', async () => {
                    const client = await makeClient()
                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await createTestMobileFeatureConfig(client, { id: 'id' })
                    })
                })

                test('can\'t update', async () => {
                    const client = await makeClient()
                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await updateTestMobileFeatureConfig(client, 'id')
                    })
                })

                test('can\'t hard delete', async () => {
                    const client = await makeClient()
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await MobileFeatureConfig.delete(client, 'id')
                    })
                })

                test('can\'t read', async () => {
                    const client = await makeClient()
                    await expectToThrowAuthenticationErrorToObjects(async () => {
                        await MobileFeatureConfig.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                    })
                })
            })


            describe('employee', () => {
                test('can create', async () => {
                    const client = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)

                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                        canManageMobileFeatureConfigs: true,
                    })
                    await createTestOrganizationEmployee(admin, organization, client.user, role)

                    const [obj, attrs] = await createTestMobileFeatureConfig(client, organization)

                    expect(obj.id).toMatch(UUID_RE)
                    expect(obj.dv).toEqual(1)
                    expect(obj.sender).toEqual(attrs.sender)
                    expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
                })

                test('can update', async () => {
                    const client = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)

                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                        canManageMobileFeatureConfigs: true,
                    })
                    await createTestOrganizationEmployee(admin, organization, client.user, role)

                    const [objCreated] = await createTestMobileFeatureConfig(admin, organization)

                    const [obj, attrs] = await updateTestMobileFeatureConfig(client, objCreated.id)

                    expect(obj.id).toMatch(UUID_RE)
                    expect(obj.dv).toEqual(1)
                    expect(obj.sender).toEqual(attrs.sender)
                    expect(obj.v).toEqual(2)
                    expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
                })

                test('can\'t delete', async () => {
                    const client = await makeClientWithNewRegisteredAndLoggedInUser()

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await MobileFeatureConfig.delete(client, 'id')
                    })
                })

                test('can read', async () => {
                    const client = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)

                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {})
                    await createTestOrganizationEmployee(admin, organization, client.user, role)

                    const [objCreated] = await createTestMobileFeatureConfig(admin, organization)

                    const objs = await MobileFeatureConfig.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                    expect(objs).toHaveLength(1)
                    expect(objs[0]).toMatchObject({
                        id: objCreated.id,
                    })
                })
            })

            describe('resident', () => {
                test('Can read configs from ALL organizations having property he resides in', async () => {
                    const manager = await makeClientWithNewRegisteredAndLoggedInUser()
                    const providerManager = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [managingCompany] = await registerNewOrganization(manager)
                    const [serviceProvider] = await registerNewOrganization(providerManager, {
                        type: SERVICE_PROVIDER_TYPE,
                    })
                    const [managingConfig] = await createTestMobileFeatureConfig(manager, managingCompany)
                    const [providerConfig] = await createTestMobileFeatureConfig(providerManager, serviceProvider)
                    expect(managingConfig).toHaveProperty('id')
                    expect(providerConfig).toHaveProperty('id')

                    const residentUser = await makeClientWithResidentUser()
                    const [resident] = await registerResidentByTestClient(residentUser)
                    expect(resident).toHaveProperty('addressKey')
                    expect(resident).toHaveProperty('address')

                    const initConfigs = await MobileFeatureConfig.getAll(residentUser, {
                        organization: { id_in: [managingCompany.id, serviceProvider.id] },
                    })
                    expect(initConfigs).toHaveLength(0)

                    const [managingProperty] = await createTestProperty(manager, managingCompany, {
                        address: resident.address,
                    })
                    expect(managingProperty).toHaveProperty('addressKey', resident.addressKey)

                    const newConfigs = await MobileFeatureConfig.getAll(residentUser, {
                        organization: { id_in: [managingCompany.id, serviceProvider.id] },
                    })
                    expect(newConfigs).toEqual([
                        expect.objectContaining({ id: managingConfig.id }),
                    ])

                    const [providerProperty] = await createTestProperty(providerManager, serviceProvider, {
                        address: resident.address,
                    })
                    expect(providerProperty).toHaveProperty('addressKey', resident.addressKey)

                    const allConfigs = await MobileFeatureConfig.getAll(residentUser, {
                        organization: { id_in: [managingCompany.id, serviceProvider.id] },
                    })
                    expect(allConfigs).toHaveLength(2)
                    expect(allConfigs).toEqual(expect.arrayContaining([
                        expect.objectContaining({ id: managingConfig.id }),
                        expect.objectContaining({ id: providerConfig.id }),
                    ]))

                    await updateTestProperty(manager, managingProperty.id, {
                        deletedAt: (new Date()).toISOString(),
                    })

                    const finalConfigs = await MobileFeatureConfig.getAll(residentUser, {
                        organization: { id_in: [managingCompany.id, serviceProvider.id] },
                    }, { raw: true })
                    console.log(finalConfigs)
                    console.log(JSON.stringify(finalConfigs.data, null, 2))
                    expect(finalConfigs).toEqual([
                        expect.objectContaining({ id: providerConfig.id }),
                    ])
                })
            })
        })

        describe('Validation tests', () => {

            test('organization uniq constraint', async () => {
                const [organization] = await createTestOrganization(admin)

                await createTestMobileFeatureConfig(admin, organization, {
                    commonPhone: undefined,
                    ticketSubmittingIsDisabled: false,
                })

                await catchErrorFrom(async () => {
                    await createTestMobileFeatureConfig(admin, organization, {
                        ticketSubmittingIsDisabled: false,
                    })
                }, ({ errors, data }) => {
                    expect(errors[0].message).toMatch('duplicate key value violates unique constraint "mobilefeatureconfig_unique_organization"')
                    expect(data).toEqual({ 'obj': null })
                })
            })

            test('TICKET_SUBMITTING_PHONES_NOT_CONFIGURED', async () => {
                const [organization] = await createTestOrganization(admin)

                await expectToThrowGQLError(
                    async () => await createTestMobileFeatureConfig(admin, organization, {
                        commonPhone: undefined,
                        ticketSubmittingIsDisabled: true,
                    }),
                    {
                        code: 'BAD_USER_INPUT',
                        type: 'TICKET_SUBMITTING_PHONES_NOT_CONFIGURED',
                        message: 'commonPhone field not specified',
                    })
            })

            test('COMMON_PHONE_INVALID', async () => {
                const [organization] = await createTestOrganization(admin)

                await expectToThrowGQLError(
                    async () => await createTestMobileFeatureConfig(admin, organization, {
                        commonPhone: 'undefined',
                        ticketSubmittingIsDisabled: true,
                    }),
                    {
                        code: 'BAD_USER_INPUT',
                        type: 'WRONG_PHONE_FORMAT',
                        message: 'Wrong phone number format',
                    })
            })
        })
    })
})
