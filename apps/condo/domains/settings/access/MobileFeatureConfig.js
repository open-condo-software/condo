/**
 * Generated by `createschema settings.MobileFeatureConfig 'organization:Relationship:Organization:CASCADE; emergencyPhone:Text; commonPhone:Text; onlyGreaterThanPreviousMeterReadingIsEnabled:Checkbox; meta:Json; ticketSubmittingIsEnabled:Checkbox'`
 */

const { uniq, map, get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find, getById } = require('@open-condo/keystone/schema')

const { checkPermissionInUserOrganizationOrRelatedOrganization } = require('@condo/domains/organization/utils/accessSchema')
const { queryOrganizationEmployeeFor, queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadMobileFeatureConfigs ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    if (user.type === RESIDENT) {
        const residents = await find('Resident', { user: { id: user.id }, deletedAt: null })
        const organizations = uniq(map(residents, 'organization'))

        if (residents.length > 0) {
            return {
                organization: {
                    id_in: organizations,
                    deletedAt: null,
                },
                deletedAt: null,
            }
        }
        return false
    }

    return {
        organization: {
            OR: [
                queryOrganizationEmployeeFor(user.id),
                queryOrganizationEmployeeFromRelatedOrganizationFor(user.id),
            ],
        },
    }
}

async function canManageMobileFeatureConfigs (attrs) {
    const { authentication: { item: user }, originalInput, operation, itemId } = attrs
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.type === RESIDENT) return false
    if (user.isAdmin || user.isSupport) return true

    let organizationId
    if (operation === 'create') {
        organizationId = get(originalInput, 'organization.connect.id')
    }
    if ( operation === 'update') {
        if (!itemId) return false

        const foundConfig = await getById('MobileFeatureConfig', itemId)
        if (!foundConfig) return false

        organizationId = get(foundConfig, 'organization')
    }

    return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageMobileFeatureConfigs')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMobileFeatureConfigs,
    canManageMobileFeatureConfigs,
}

