/**
 * Generated by `createschema miniapp.B2BAppContext 'integration:Relationship:B2BApp:PROTECT; organization:Relationship:Organization:PROTECT; settings:Json; state:Json;'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { B2BAppContext as B2BAppContextGQL } from '@condo/domains/miniapp/gql'
import { B2BAppContext, B2BAppContextUpdateInput, QueryAllB2BAppContextsArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'app', 'organization', 'status']
const RELATIONS = ['app', 'organization']

export interface IB2BAppContextUIState extends B2BAppContext {
    id: string
}

function convertToUIState (item: B2BAppContext): IB2BAppContextUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IB2BAppContextUIState
}

export interface IB2BAppContextFormState {
    id?: undefined
}

function convertToUIFormState (state: IB2BAppContextUIState): IB2BAppContextFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IB2BAppContextFormState
}

function convertToGQLInput (state: IB2BAppContextFormState): B2BAppContextUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<B2BAppContext, B2BAppContextUpdateInput, IB2BAppContextFormState, IB2BAppContextUIState, QueryAllB2BAppContextsArgs>(B2BAppContextGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
