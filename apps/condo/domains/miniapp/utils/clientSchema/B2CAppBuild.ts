/**
 * Generated by `createschema miniapp.B2CAppBuild 'app:Relationship:B2CApp:PROTECT; version:Text'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { B2CAppBuild as B2CAppBuildGQL } from '@condo/domains/miniapp/gql'
import { B2CAppBuild, B2CAppBuildUpdateInput, QueryAllB2CAppBuildsArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'app', 'version']
const RELATIONS = ['app']

export interface IB2CAppBuildUIState extends B2CAppBuild {
    id: string
}

function convertToUIState (item: B2CAppBuild): IB2CAppBuildUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IB2CAppBuildUIState
}

export interface IB2CAppBuildFormState {
    id?: undefined
}

function convertToUIFormState (state: IB2CAppBuildUIState): IB2CAppBuildFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IB2CAppBuildFormState
}

function convertToGQLInput (state: IB2CAppBuildFormState): B2CAppBuildUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<B2CAppBuild, B2CAppBuildUpdateInput, IB2CAppBuildFormState, IB2CAppBuildUIState, QueryAllB2CAppBuildsArgs>(B2CAppBuildGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
