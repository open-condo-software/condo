/**
 * Generated by `createschema miniapp.B2BAppContext 'integration:Relationship:B2BApp:PROTECT; organization:Relationship:Organization:PROTECT; settings:Json; state:Json;'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { checkB2BAppAccessRight } = require('@condo/domains/miniapp/utils/accessSchema')
const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const { SERVICE, STAFF } = require('@condo/domains/user/constants/common')
const { canDirectlyReadSchemaObjects, canDirectlyManageSchemaObjects } = require('@condo/domains/user/utils/directAccess')


/**
 * B2B App context may only be read:
 * 1. Admin / support
 * 2. Users with direct access
 * 3. Organization employee (without settings / state)
 * 4. Integration service account
 */
async function canReadB2BAppContexts ({ authentication: { item: user }, listKey }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    const hasDirectAccess = await canDirectlyReadSchemaObjects(user, listKey)
    if (hasDirectAccess) return true

    if (user.type === SERVICE) {
        return { app: { accessRights_some: { user: { id: user.id }, deletedAt: null } } }
    } else if (user.type === STAFF) {
        return { organization: { employees_some: { user: { id: user.id }, isBlocked: false, isRejected: false, deletedAt: null } } }
    }

    return false
}

/**
 * B2B App context may only be created by:
 * 1. Admin / support
 * 2. Users with direct access
 * 3. Organization employee with canManageIntegrations = true
 *
 * B2B App context may only be updated by:
 * 1. Admin / support
 * 2. Users with direct access
 * 3. App service user
 */
async function canManageB2BAppContexts ({ authentication: { item: user }, originalInput, operation, itemId, listKey }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    const hasDirectAccess = await canDirectlyManageSchemaObjects(user, listKey)
    if (hasDirectAccess) return true

    if (operation === 'create') {
        const organizationId = get(originalInput, ['organization', 'connect', 'id'])

        return await checkOrganizationPermission(user.id, organizationId, 'canManageIntegrations')
    } else if (operation === 'update') {
        if (!itemId) return false
        const context = await getById('B2BAppContext', itemId)
        if (!context || context.deletedAt) return false
        const { app } = context

        return await checkB2BAppAccessRight(user.id, app)
    }

    return false
}

/**
 * Organization employees not allowed seeing app's settings / state
 */
async function canReadAndManageSensitiveContextData ({ authentication: { item: user } }) {
    return !!(user.isSupport || user.isAdmin || user.type === SERVICE)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadB2BAppContexts,
    canManageB2BAppContexts,
    canReadAndManageSensitiveContextData,
}
