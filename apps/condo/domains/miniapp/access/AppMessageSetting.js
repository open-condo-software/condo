/**
 * Generated by `createschema miniapp.AppMessageSettings 'app?:Relationship:B2CApp:CASCADE; blockReason:Text; blockedNotificationTypes:Text; throttlingTime:Integer;'`
 */

const uniq = require('lodash/uniq')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { STAFF } = require('@condo/domains/user/constants/common')


async function canReadAppMessageSetting ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    if (user.type === STAFF) {
        const userEmployees = await find('OrganizationEmployee', {
            deletedAt: null,
            organization: { deletedAt: null },
            role: { deletedAt: null },
            user: { id: user.id },
            isBlocked: false,
            isRejected: false,
        })
        const organizationIds = uniq(userEmployees.map(employee => employee.organization))
        const b2bAppContexts = await find('B2BAppContext', {
            deletedAt: null,
            organization: { id_in: organizationIds },
        })
        const b2bAppIds = uniq(b2bAppContexts.map(context => context.app))

        return {
            b2bApp: {
                id_in: b2bAppIds,
            },
        }
    }

    return false
}

async function canManageAppMessageSetting ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadAppMessageSetting,
    canManageAppMessageSetting,
}
