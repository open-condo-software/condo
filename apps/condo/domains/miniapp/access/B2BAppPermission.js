/**
 * Generated by `createschema miniapp.B2BAppPermission 'app:Relationship:B2BApp:PROTECT; key:Text'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { checkB2BAppAccessRight } = require('@condo/domains/miniapp/utils/accessSchema')
const { SERVICE } = require('@condo/domains/user/constants/common')

/**
 * B2B App permissions may only be read:
 * 1. Admin / support
 * 2. Integration service account
 * Employee cannot access permissions, since they interact only with their B2B app roles
 */
async function canReadB2BAppPermissions ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}


    return { app: { accessRights_some: { user: { id: user.id }, deletedAt: null } } }
}

/**
 * B2B App permissions may only be created or modified by:
 * 1. Admin / support
 * 2. Integration service account
 */
async function canManageB2BAppPermissions ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type !== SERVICE) {
        return false
    }

    let appId = get(originalInput, ['app', 'connect', 'id'], null)
    if (operation === 'update') {
        if (!itemId) return false
        const item = await getById('B2BAppPermission', itemId)
        appId = get(item, 'app', null)
    }

    return await checkB2BAppAccessRight(user.id, appId)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadB2BAppPermissions,
    canManageB2BAppPermissions,
}
