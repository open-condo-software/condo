/**
 * Generated by `createschema miniapp.B2BAppPermission 'app:Relationship:B2BApp:PROTECT; key:Text'`
 */

const compact = require('lodash/compact')
const get = require('lodash/get')
const uniq = require('lodash/uniq')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById, find } = require('@open-condo/keystone/schema')

const { checkB2BAppAccessRight } = require('@condo/domains/miniapp/utils/accessSchema')
const { queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const { SERVICE, STAFF } = require('@condo/domains/user/constants/common')
const { canDirectlyReadSchemaObjects, canDirectlyManageSchemaObjects } = require('@condo/domains/user/utils/directAccess')


/**
 * B2B App permissions may only be read:
 * 1. Admin / support
 * 2. Integration service account
 * 3. Users with direct access
 * Employee cannot access permissions, since they interact only with their B2B app roles
 */
async function canReadB2BAppPermissions ({ authentication: { item: user }, listKey }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}

    const hasDirectAccess = await canDirectlyReadSchemaObjects(user, listKey)
    if (hasDirectAccess) return true

    if (user.type === SERVICE) {
        return { app: { accessRights_some: { user: { id: user.id }, deletedAt: null } } }
    }

    if (user.type === STAFF) {
        const employeeQuery = queryOrganizationEmployeeFor(user.id).employees_some
        const userEmployeesWithCanManageRoles = await find('OrganizationEmployee',
            {
                ...employeeQuery,
                isAccepted: true,
                role: { canManageRoles: true },
            }
        )
        const userOrganizationIds = uniq(compact(userEmployeesWithCanManageRoles.map(employee => employee.organization)))
        const b2bAppContexts =  await find('B2BAppContext', {
            organization: { id_in: userOrganizationIds },
            deletedAt: null,
        })
        const b2bAppIds = uniq(compact(b2bAppContexts.map(context => get(context, 'app'))))

        return { app: { id_in: b2bAppIds } }
    }

    return false
}

/**
 * B2B App permissions may only be created or modified by:
 * 1. Admin / support
 * 2. Integration service account
 * 3. Users with direct access
 */
async function canManageB2BAppPermissions ({ authentication: { item: user }, originalInput, operation, itemId, listKey }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    const hasDirectAccess = await canDirectlyManageSchemaObjects(user, listKey, originalInput, operation)
    if (hasDirectAccess) return true

    if (user.type !== SERVICE) {
        return false
    }

    let appId = get(originalInput, ['app', 'connect', 'id'], null)
    if (operation === 'update') {
        if (!itemId) return false
        const item = await getById('B2BAppPermission', itemId)
        appId = get(item, 'app', null)
    }

    return await checkB2BAppAccessRight(user.id, appId)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadB2BAppPermissions,
    canManageB2BAppPermissions,
}
