// @ts-nocheck
/**
 * Generated by `createschema miniapp.CustomValue 'objectId:Text; data:Json; customField:Relationship:CustomField:PROTECT; sourceType:Text; sourceId:Text; organization:Relationship:Organization:PROTECT;'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { getEmployedOrRelatedOrganizationsByPermissions } = require('../../organization/utils/accessSchema')
const { SERVICE, STAFF } = require('../../user/constants/common')
const { canReadObjectsAsB2BAppServiceUser, canManageObjectsAsB2BAppServiceUser } = require('../utils/b2bAppServiceUserAccess')

async function canReadCustomValues (args) {
    const { authentication: { item: user }, context } = args
    
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    if (user.type === SERVICE) {
        const canReadObjsAsB2BAppServiceUser = await canReadObjectsAsB2BAppServiceUser(args)
        return canReadObjsAsB2BAppServiceUser
    }

    if (user.type === STAFF) {
        const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, [])

        return {
            customField: { staffCanRead: true, deletedAt: null },
            organization: {
                id_in: permittedOrganizations,
                deletedAt: null,
            },
        }
    }

    return false
}

async function canManageCustomValues (args) {
    const { authentication: { item: user }, originalInput } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    const isBulkRequest = Array.isArray(originalInput)
    // Todo: (DOMA-11051) Bulk requests are not supported in canManageObjectsAsB2BAppServiceUser
    if (isBulkRequest) { return false }

    if (user.type === SERVICE) {
        return await canManageObjectsAsB2BAppServiceUser(args)
    }
    
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadCustomValues,
    canManageCustomValues,
}
