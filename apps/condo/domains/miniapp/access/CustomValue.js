// @ts-nocheck
/**
 * Generated by `createschema miniapp.CustomValue 'objectId:Text; data:Json; customField:Relationship:CustomField:PROTECT; sourceType:Text; sourceId:Text; organization:Relationship:Organization:PROTECT;'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

async function canReadCustomValues ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    // TODO(codegen): write canReadCustomValues logic for user!
    return true
}

async function canManageCustomValues ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (operation === 'create') {
        // TODO(codegen): write canManageCustomValues create logic!
        return false
    } else if (operation === 'update') {
        // TODO(codegen): write canManageCustomValues update logic!
        return false
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadCustomValues,
    canManageCustomValues,
}
