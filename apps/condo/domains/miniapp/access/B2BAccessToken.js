/**
 * Generated by `createschema miniapp.B2BAccessToken 'sessionId:Text; context:Relationship:B2BAppContext:CASCADE; rightSet:Relationship:B2BAppAccessRightSet:CASCADE; expiresAt:Text;'`
 */

const get = require('lodash/get')
const has = require('lodash/has')

const { userIsAdmin } = require('@open-condo/keystone/access')
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { getEmployedOrganizationsByPermissions } = require('@condo/domains/organization/utils/accessSchema')

async function canReadB2BAccessTokens ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isSupport) return false
    if (user.isAdmin) return true

    const organizations = await getEmployedOrganizationsByPermissions(context, user, 'canManageIntegrations')

    return {
        context: {
            organization: {
                id_in: organizations,
            },
        },
    }
}

async function canManageB2BAccessTokens ({ authentication: { item: user }, originalInput, operation, itemId, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isSupport) return false
    if (user.isAdmin) return true

    const permittedOrganizations = await getEmployedOrganizationsByPermissions(context, user, 'canManageIntegrations')
    let organizationForItem

    const isUpdatingContext = operation === 'update' && has(originalInput, 'context')
    if (operation === 'create' || isUpdatingContext) {
        const contextId = get(originalInput, 'context.connect.id')
        const context = await getById('B2BAppContext', contextId)
        organizationForItem = get(context, 'organization')
    }

    if (operation === 'update') {
        const item = await getById('B2BAccessToken', itemId)
        const context = await getById('B2BAppContext', get(item, 'context'))
        organizationForItem = get(context, 'organization')
    }

    return permittedOrganizations.some(organizationId => organizationId === organizationForItem)
}

const readonlyForNonAdmin = {
    read: true,
    create: true,
    update: userIsAdmin,
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadB2BAccessTokens,
    canManageB2BAccessTokens,
    readonlyForNonAdmin,
}
