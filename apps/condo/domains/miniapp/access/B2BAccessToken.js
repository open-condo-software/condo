/**
 * Generated by `createschema miniapp.B2BAccessToken 'sessionId:Text; context:Relationship:B2BAppContext:CASCADE; rightSet:Relationship:B2BAppAccessRightSet:CASCADE; expiresAt:Text;'`
 */

const get = require('lodash/get')

const { userIsAdmin, isSpecificQuery, isFilteringBy } = require('@open-condo/keystone/access')
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { canReadObjectsAsB2BAppServiceUser, canManageObjectsAsB2BAppServiceUser } = require('@condo/domains/miniapp/utils/b2bAppServiceUserAccess')
const { SERVICE } = require('@condo/domains/user/constants/common')

function isFilteringBySensitiveData (where) {
    return isFilteringBy(where, ['sessionId'])
}

async function canReadB2BAccessTokens (args) {
    const { authentication: { item: user } } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type === SERVICE) {
        const where = get(args, 'args.where', {})
        if (isFilteringBySensitiveData(where)) {
            return false
        }
        return canReadObjectsAsB2BAppServiceUser(args)
    }

    return false
}

async function canManageB2BAccessTokens (args) {
    const { authentication: { item: user } } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type === SERVICE) {
        return canManageObjectsAsB2BAppServiceUser(args)
    }

    return false
}

const updatableOnlyForAdmin = {
    read: true,
    create: true,
    update: userIsAdmin,
}

const readableOnlyOnCreate = {
    read: () => {
        return isSpecificQuery('createB2BAccessToken') || isSpecificQuery('createB2BAccessTokens')
    },
    create: true,
    update: false,
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadB2BAccessTokens,
    canManageB2BAccessTokens,
    updatableOnlyForAdmin,
    readableOnlyOnCreate,
}
