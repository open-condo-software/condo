/**
 * Generated by `createschema miniapp.B2BAppRole 'app:Relationship:B2BApp:CASCADE; role:Relationship:OrganizationEmployeeRole:CASCADE; permissions:Json;'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find, getById } = require('@open-condo/keystone/schema')

const { queryOrganizationEmployeeFor, checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const { SERVICE, STAFF } = require('@condo/domains/user/constants/common')

/**
 * B2B App roles may only be read:
 * 1. Admin / support
 * 2. Integration service account
 * 3. Organization employees
 * 3.a If employee has 'canManageRoles' in role = return all roles from this organization
 * 3.b Otherwise = return only roles to user employees
 */
async function canReadB2BAppRoles ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    if (user.type === SERVICE) {
        return { app: { accessRights_some: { user: { id: user.id }, deletedAt: null } } }
    }

    if (user.type === STAFF) {
        const employeeCondition = queryOrganizationEmployeeFor(user.id).employees_some
        const userEmployees = await find('OrganizationEmployee', employeeCondition)
        const userEmployeesIds = userEmployees.map(employee => employee.id)
        const userRoleIds = userEmployees.map(employee => employee.role)

        return {
            role: {
                OR: [
                    { id_in: userRoleIds },
                    {
                        organization: {
                            employees_some: { id_in: userEmployeesIds, role: { canManageRoles: true } },
                        },
                    },
                ],
            },
        }
    }

    return false
}

/**
 * B2B App roles may only be created or modified by:
 * 1. Admin / support
 * 2. Employee with "canManageRoles" permission
 */
async function canManageB2BAppRoles ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type === STAFF) {
        let organizationRoleId = get(originalInput, ['role', 'connect', 'id'])

        if (operation === 'update') {
            if (!itemId) return false
            const item = await getById('B2BAppRole', itemId)
            organizationRoleId = get(item, 'role')
        }

        if (!organizationRoleId) return false
        const organizationRole = await getById('OrganizationEmployeeRole', organizationRoleId)
        if (!organizationRole) return false

        return await checkOrganizationPermission(user.id, organizationRole.organization, 'canManageRoles')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadB2BAppRoles,
    canManageB2BAppRoles,
}
