/**
 * Generated by `createschema miniapp.B2CAppProperty 'app:Relationship:B2CApp:PROTECT; address:Text;' --force`
 */

const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { RESIDENT, SERVICE } = require('@condo/domains/user/constants/common')
const { checkB2CAppAccessRight } = require('../utils/accessSchema')
const get = require('lodash/get')
const { getById } = require('@condo/keystone/schema')

async function canReadB2CAppProperties ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}
    if (user.type === RESIDENT) return {}

    return { app: { accessRights_some: { deletedAt: null, user: { id: user.id } } } }
}

async function canManageB2CAppProperties ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (operation === 'create') {
        return await checkB2CAppAccessRight(user.id, get(originalInput, ['app', 'connect', 'id']))
    } else if (operation === 'update') {
        if (!itemId) return false
        if (user.type !== SERVICE) return false
        const item = await getById('B2CAppProperty', itemId)
        const appId = get(item, 'app')
        return await checkB2CAppAccessRight(user.id, appId)
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadB2CAppProperties,
    canManageB2CAppProperties,
}
