/**
 * Generated by `createschema miniapp.DescriptionBlock 'description:Text; image:File;'`
 */
const { createTestDescriptionBlock, updateTestDescriptionBlock, DescriptionBlock } = require('@condo/domains/miniapp/utils/testSchema')
const { createTestBillingIntegration } = require('@condo/domains/billing/utils/testSchema')
const { createTestAcquiringIntegration } = require('@condo/domains/acquiring/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { makeClientWithSupportUser, makeLoggedInClient } = require('@condo/domains/user/utils/testSchema')
const {
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowValidationFailureError,
} = require('@condo/domains/common/utils/testSchema')


describe('DescriptionBlock', () => {
    describe('CRUD', () => {
        let admin
        let support
        let user
        let anonymous
        let billing
        beforeAll(async () => {
            admin = await makeLoggedInAdminClient()
            support = await makeClientWithSupportUser()
            user = await makeLoggedInClient()
            anonymous = await makeClient()
            const [integration] = await createTestBillingIntegration(admin)
            billing = integration
        })
        describe('Create', () => {
            test('Admin can', async () => {
                const [block] = await createTestDescriptionBlock(admin, billing.id)
                expect(block).toBeDefined()
            })
            test('Support can', async () => {
                const [block] = await createTestDescriptionBlock(support, billing.id)
                expect(block).toBeDefined()
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestDescriptionBlock(user, billing.id)
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestDescriptionBlock(anonymous, billing.id)
                })
            })
        })
        describe('Update', () => {
            const description = 'TEST'

            test('Admin can', async () => {
                const [block] = await createTestDescriptionBlock(admin, billing.id)
                const [updated] = await updateTestDescriptionBlock(admin, block.id, {
                    description,
                })
                expect(updated).toHaveProperty('description', description)
            })
            test('Support can', async () => {
                const [block] = await createTestDescriptionBlock(support, billing.id)
                const [updated] = await updateTestDescriptionBlock(support, block.id, {
                    description,
                })
                expect(updated).toHaveProperty('description', description)
            })
            test('User cannot', async () => {
                const [block] = await createTestDescriptionBlock(support, billing.id)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestDescriptionBlock(user, block.id, { description })
                })
            })
            test('Anonymous cannot', async () => {
                const [block] = await createTestDescriptionBlock(support, billing.id)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestDescriptionBlock(anonymous, block.id, { description })
                })
            })
        })
        describe('Read', () => {
            let block
            beforeAll(async () => {
                [block] = await createTestDescriptionBlock(admin, billing.id)
            })

            test('Admin can', async () => {
                const blocks = await DescriptionBlock.getAll(admin, { id: block.id })
                expect(blocks).toHaveLength(1)
                expect(blocks).toHaveProperty(['0', 'id'], block.id)
            })
            test('Support can', async () => {
                const blocks = await DescriptionBlock.getAll(support, { id: block.id })
                expect(blocks).toHaveLength(1)
                expect(blocks).toHaveProperty(['0', 'id'], block.id)
            })
            test('User can', async () => {
                const blocks = await DescriptionBlock.getAll(user, { id: block.id })
                expect(blocks).toHaveLength(1)
                expect(blocks).toHaveProperty(['0', 'id'], block.id)
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await DescriptionBlock.getAll(anonymous, { id: block.id })
                })
            })
        })
    })
    describe('Validation', () => {
        describe('Must be connected to singe integration', () => {
            let admin
            let billing
            let acquiring
            beforeAll(async () => {
                admin = await makeLoggedInAdminClient()
                const [integration] = await createTestBillingIntegration(admin)
                billing = integration
                const [acquiringIntegration] = await createTestAcquiringIntegration(admin, [billing])
                acquiring = acquiringIntegration
            })
            test('More than 1', async () => {
                await expectToThrowValidationFailureError(async () => {
                    await createTestDescriptionBlock(admin, billing.id, acquiring.id)
                })
            })
            test('No connections', async () => {
                await expectToThrowValidationFailureError(async () => {
                    await createTestDescriptionBlock(admin)
                })
            })
            test('On update more than one', async () => {
                const [block] = await createTestDescriptionBlock(admin, billing.id)
                await expectToThrowValidationFailureError(async () => {
                    await updateTestDescriptionBlock(admin, block.id, {
                        acquiringIntegration: { connect: { id: acquiring.id } },
                    })
                })
            })
            describe('Valid cases', () => {
                test('acquiring only', async () => {
                    const [block] = await createTestDescriptionBlock(admin, undefined, acquiring.id)
                    expect(block).toBeDefined()
                })
                test('billing only', async () => {
                    const [block] = await createTestDescriptionBlock(admin, billing.id)
                    expect(block).toBeDefined()
                })
            })
        })
    })
})
