/**
 * Generated by `createschema miniapp.CustomField 'locale:Text; name:Text; priority:Integer; schemaName:Text; type:Text; validationRules:Json; isVisible:Checkbox;'`
 */

const Ajv = require('ajv')
const { get } = require('lodash')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/miniapp/access/CustomField')
const ajv = new Ajv()

const CONTACT_SCHEMA = 'Contact'
const RESIDENT_SCHEMA = 'Resident'
const PROPERTY_SCHEMA = 'Property'
const ORGANIZATION_SCHEMA = 'Organization'

const STRING_TYPE = 'String'
const JSON_TYPE = 'Json'

const ALLOWED_SCHEMAS = {
    [CONTACT_SCHEMA]: {
        pathToOrganizationId: ['organization', 'id'],

        allowedTypes: [STRING_TYPE, JSON_TYPE],
    },
    [RESIDENT_SCHEMA]: {
        pathToOrganizationId: ['organization', 'id'],

        allowedTypes: [STRING_TYPE, JSON_TYPE],
    },
    [PROPERTY_SCHEMA]: {
        pathToOrganizationId: ['organization', 'id'],

        allowedTypes: [STRING_TYPE, JSON_TYPE],
    },
    [ORGANIZATION_SCHEMA]: {
        pathToOrganizationId: ['id'],

        allowedTypes: [STRING_TYPE, JSON_TYPE],
    },
}


const ALLOWED_TYPES = {
    [STRING_TYPE]: {
        valueIsValid: (value) => typeof value === 'string',
    },
    [JSON_TYPE]: {
        valueIsValid: (value) => {
            try {
                JSON.parse(value)
                return true
            } catch (err) {
                return false
            }
        },
    },
}


const CustomField = new GQLListSchema('CustomField', {
    schemaDoc: 'Custom field allows you to extend functionality of the platform without coding. Use it to store domain-specific stuff or to develop miniapps',
    fields: {
        locale: {
            schemaDoc: 'Locale of this field, For example, if you create SSN field (social security number) you should use en-US locale. If not set, then it is considered that this CustomField is global and not region specific',
            type: 'Text',
            isRequired: false,
        },

        isVisible: {
            schemaDoc: 'If field is visible, then it will be displayed in UI',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: false,
        },

        name: {
            schemaDoc: 'User friendly name of the field. Will be displayed in UI',
            type: 'Text',
            isRequired: true,
            // Todo @toplenboren why localized text is not showing in Admin Panel ?
            //template: 'miniapp.customField.*.name',
        },

        priority: {
            schemaDoc: 'Higher the priority, higher (visually) the custom value is displayed in UI',
            type: 'Integer',
            isRequired: true,
            defaultValue: 0,
            hooks: {
                validateInput: ({ resolvedData, fieldPath, addFieldValidationError }) => {
                    const value = resolvedData[fieldPath]
                    if (!(-100 < value && value <= 100)) {
                        return addFieldValidationError('priority should be between -100 and 100')
                    }
                },
            },
        },

        schemaName: {
            schemaDoc: 'Condo schema that this field relates to.',
            type: 'Select',
            options: Object.keys(ALLOWED_SCHEMAS),
            isRequired: true,
            access: {
                update: false,
            },
        },

        type: {
            schemaDoc: 'Type of that field',
            type: 'Select',
            options: Object.keys(ALLOWED_TYPES),
            isRequired: true,
            access: {
                update: false,
            },
        },

        isUniquePerObject: {
            schemaDoc: 'If true, then only single CustomValues can exist on condo object (CustomValue.objectId)',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: true,
            access: {
                update: false,
            },
        },

        validationRules: {
            schemaDoc: 'Custom user defined validation rules for this field. Should be json-schema',
            type: 'Json',
            isRequired: false,
            hooks: {
                validateInput: ({ resolvedData, fieldPath, addFieldValidationError }) => {
                    const value = get(resolvedData, fieldPath, null)
                    if (!value) {
                        return
                    }

                    const schemaIsValid = ajv.validateSchema(value)

                    if (!schemaIsValid) {
                        addFieldValidationError('Bad validation rules, should be valid json-schema')
                    }
                },
            },
            access: {
                update: false,
            },
        },

        staffCanRead: {
            schemaDoc: 'If true, staff type account can read values of this custom field',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: true,
        },

        staffCanManage: {
            schemaDoc: 'If true, staff type account can create and update values of this custom field',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: false,
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadCustomFields,
        create: access.canManageCustomFields,
        update: access.canManageCustomFields,
        delete: false,
        auth: true,
    },
})

module.exports = {
    CustomField,
    ALLOWED_SCHEMAS,
    ALLOWED_TYPES,
}
