/**
 * Generated by `createschema miniapp.CustomField 'locale:Text; name:Text; priority:Integer; schemaName:Text; type:Text; validationRules:Json; isVisible:Checkbox;'`
 */

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { find } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/miniapp/access/CustomField')


const CONTACT_SCHEMA = 'Contact'
const PROPERTY_SCHEMA = 'Property'
const PROPERTY_MAP_SCHEMA = 'Property.map'

const ALLOWED_SCHEMAS = {
    [CONTACT_SCHEMA]: {
        pathToOrganizationId: ['organization', 'id'],

        allowedTypes: [TEXT_TYPE],
    },
    [PROPERTY_SCHEMA]: {
        pathToOrganizationId: ['organization', 'id'],

        allowedTypes: [TEXT_TYPE],

        validateInput: (addValidationError, value, customField) => {

        },
    },
    [PROPERTY_MAP_SCHEMA]: {
        pathToOrganizationId: ['organization', 'id'],

        validateInput: ({ addValidationError, value, customField }) => {
            if (customField.type !== 'JSON') {
                // if custom field is bad
                addValidationError('la la la')
            }
        },

        // 1. not beautiful
        resolveOutput: ({ value, authedItem: { user } }) => {
            if (user.type === 'RESIDENT') {
                const residents = find('Resident', { user: { id: user.id } })

                // return only those fields that have same unitName and same unitType
                return value.filter('...')
            }
        },

        // 2. beautiful, but expensive
        access: {
            read: ({ addAccessDeniedError, authedItem: { user } }) => {
                if (user.type === 'RESIDENT') {
                    const residents = find('Resident', { user: { id: user.id } })

                    return { 'OR': [{ unitName: '1', unitType: '2' }] }
                }
            },
        },
    },
}

const TEXT_TYPE = 'Text'
const JSON_TYPE = 'JSON'
//const PROPERTY_MAP_TYPE = 'PROPERTY_MAP'

const ALLOWED_TYPES = {
    [TEXT_TYPE]: {
        //resolveInput: (jsonValue) => JSON.stringify,
        validateInput: (value) => true,
        renderToString: (value) => value,
    },
    [JSON_TYPE]: {
        //resolveInput: (jsonValue) => jsonValue,
        validateInput: (value) => true,
        renderToString: (value) => undefined,
    },
    // [PROPERTY_MAP_TYPE]: {
    //     resolveInput: (jsonValue) => jsonValue,
    //     validateInput: (value) => true,
    //     renderToString: (value) => undefined,
    // }
}


const CustomField = new GQLListSchema('CustomField', {
    schemaDoc: 'Custom field allows you to extend functionality of the platform without coding. Use it to store domain-specific stuff or to develop miniapps',
    fields: {
        locale: {
            schemaDoc: 'Locale of this field, For example, if you create SSN field (social security number) you should use en-US locale. If not set, then it is considered that this CustomField is global and not region specific',
            type: 'Text',
            isRequired: false,
        },

        name: {
            schemaDoc: 'User friendly name of the field',
            type: 'Text',
            isRequired: true,
            // Todo @toplenboren why localized text is not showing in Admin Panel ?
            //template: 'miniapp.customField.*.name',
        },

        priority: {
            schemaDoc: 'Higher the priority, higher (visually) the custom value is displayed',
            type: 'Integer',
            isRequired: true,
            defaultValue: 0,
            hooks: {
                validateInput: ({ resolvedData, fieldPath, addFieldValidationError }) => {
                    const value = resolvedData[fieldPath]
                    if (!(-100 < value && value <= 100)) {
                        return addFieldValidationError('priority should be between -100 and 100')
                    }
                },
            },
        },

        schemaName: {
            schemaDoc: 'Condo schema that this field relates to.',
            type: 'Select',
            options: Object.keys(ALLOWED_SCHEMAS),
            isRequired: true,
        },

        type: {
            schemaDoc: 'Type of that field',
            type: 'Select',
            options: Object.keys(ALLOWED_TYPES),
            isRequired: true,
        },

        validationRules: {
            schemaDoc: 'Custom validation rules for this field. Should be json-schema',
            type: 'Json',
            isRequired: false,
        },

        isVisible: {
            schemaDoc: 'If field is visible, then it will be displayed inside of the condo interface',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: false,
        },

        serviceCanRead: {
            schemaDoc: 'If true, service account of miniapp can read values of this custom field',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: true,
        },

        serviceCanManage: {
            schemaDoc: 'If true, service account can create and update values of this custom field',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: true,
        },

        // staffCanRead: {
        //     schemaDoc: 'If true, staff account can read values of this custom field',
        //     type: 'Checkbox',
        //     isRequired: true,
        //     defaultValue: true,
        // },
        //
        // staffCanManage: {
        //     schemaDoc: 'If true, staff account can create and update values of this custom field',
        //     type: 'Checkbox',
        //     isRequired: true,
        //     defaultValue: false,
        // },

        // residentCanRead: {
        //     schemaDoc: 'If true, resident account can read values of this custom field',
        //     type: 'Checkbox',
        //     isRequired: true,
        //     defaultValue: false,
        // },
        //
        // residentCanManage: {
        //     schemaDoc: 'If true, service account can create and update values of this custom field',
        //     type: 'Checkbox',
        //     isRequired: true,
        //     defaultValue: false,
        // },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadCustomFields,
        create: access.canManageCustomFields,
        update: access.canManageCustomFields,
        delete: false,
        auth: true,
    },
})

module.exports = {
    CustomField,
}
