/**
 * Generated by `createservice miniapp.AllOrganizationAppsService --type queries`
 */

const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { expectToThrowAuthenticationErrorToObjects, expectToThrowAccessDeniedErrorToObjects } = require('@condo/domains/common/utils/testSchema')
const { createTestOrganization, makeEmployeeUserClientWithAbilities } = require('@condo/domains/organization/utils/testSchema')
const { allMiniAppsByTestClient } = require('@condo/domains/miniapp/utils/testSchema')
const { makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { createTestBillingIntegration, createTestBillingIntegrationOrganizationContext, updateTestBillingIntegrationOrganizationContext } = require('@condo/domains/billing/utils/testSchema')
const { createTestAcquiringIntegration, createTestAcquiringIntegrationContext, updateTestAcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/testSchema')
const { BILLING_APP_TYPE, ACQUIRING_APP_TYPE } = require('@condo/domains/miniapp/constants')
const dayjs = require('dayjs')

describe('AllMiniAppsService', () => {
    describe('Execute', () => {
        describe('User', () => {
            test('Can for his organization', async () => {
                const client = await makeEmployeeUserClientWithAbilities()
                const [data] = await allMiniAppsByTestClient(client, client.organization.id)
                expect(data).toBeDefined()
            })
            test('Cannot for other organizations', async () => {
                const admin = await makeLoggedInAdminClient()
                const [organization] = await createTestOrganization(admin)
                const client = await makeEmployeeUserClientWithAbilities()
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await allMiniAppsByTestClient(client, organization.id)
                })
            })
        })
        test('Admin can', async () => {
            const admin = await makeLoggedInAdminClient()
            const client = await makeEmployeeUserClientWithAbilities()
            const [data] = await allMiniAppsByTestClient(admin, client.organization.id)
            expect(data).toBeDefined()
        })
        test('Support can', async () => {
            const support = await makeClientWithSupportUser()
            const client = await makeEmployeeUserClientWithAbilities()
            const [data] = await allMiniAppsByTestClient(support, client.organization.id)
            expect(data).toBeDefined()
        })
        test('Anonymous cannot', async () => {
            const client = await makeClient()
            const admin = await makeLoggedInAdminClient()
            const [organization] = await createTestOrganization(admin)
            await expectToThrowAuthenticationErrorToObjects(async () => {
                await allMiniAppsByTestClient(client, organization.id)
            })
        })
    })
    describe('Functionality', () => {
        describe('Billing integration', () => {
            let integration
            let admin
            beforeAll(async () => {
                admin = await makeLoggedInAdminClient()
            })
            beforeEach(async () => {
                [integration] = await createTestBillingIntegration(admin, { isHidden: false })
            })
            test('Shows unconnected without context', async () => {
                const client = await makeEmployeeUserClientWithAbilities()
                const [data] = await allMiniAppsByTestClient(client, client.organization.id)
                expect(data).toBeDefined()
                expect(data).toEqual(expect.arrayContaining([expect.objectContaining({
                    id: integration.id,
                    type: BILLING_APP_TYPE,
                    connected: false,
                    name: integration.name,
                    shortDescription: integration.shortDescription,
                    category: BILLING_APP_TYPE,
                })]))
            })
            test('Shows connected with context', async () => {
                const client = await makeEmployeeUserClientWithAbilities()
                await createTestBillingIntegrationOrganizationContext(admin, client.organization, integration)
                const [data] = await allMiniAppsByTestClient(client, client.organization.id)
                expect(data).toBeDefined()
                expect(data).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: integration.id,
                        type: BILLING_APP_TYPE,
                        connected: true,
                    }),
                ]))
            })
            test('Shows unconnected with deleted context', async () => {
                const client = await makeEmployeeUserClientWithAbilities()
                const [context] = await createTestBillingIntegrationOrganizationContext(admin, client.organization, integration)
                await updateTestBillingIntegrationOrganizationContext(admin, context.id, {
                    deletedAt: dayjs().toISOString(),
                })
                const [data] = await allMiniAppsByTestClient(client, client.organization.id)
                expect(data).toBeDefined()
                expect(data).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: integration.id,
                        type: BILLING_APP_TYPE,
                        connected: false,
                    }),
                ]))
            })
            test('Doesn\'t shows if hidden integration', async () => {
                const client = await makeEmployeeUserClientWithAbilities()
                const [hiddenIntegration] = await createTestBillingIntegration(admin, { isHidden: true })
                const [data] = await allMiniAppsByTestClient(client, client.organization.id)
                expect(data).toBeDefined()
                expect(data).not.toEqual(expect.arrayContaining([{
                    id: hiddenIntegration.id,
                    type: BILLING_APP_TYPE,
                }]))
            })
        })
        describe('Acquiring integration', () => {
            let integration
            let billings
            let admin
            beforeAll(async () => {
                admin = await makeLoggedInAdminClient()
                const [billing] = await createTestBillingIntegration(admin)
                billings = [billing]
            })
            beforeEach(async () => {
                [integration] = await createTestAcquiringIntegration(admin, billings)
            })
            test('Shows unconnected without context', async () => {
                const client = await makeEmployeeUserClientWithAbilities()
                const [data] = await allMiniAppsByTestClient(client, client.organization.id)
                expect(data).toBeDefined()
                expect(data).toEqual(expect.arrayContaining([expect.objectContaining({
                    id: integration.id,
                    type: ACQUIRING_APP_TYPE,
                    connected: false,
                    name: integration.name,
                    shortDescription: integration.shortDescription,
                    category: ACQUIRING_APP_TYPE,
                })]))
            })
            test('Shows connected with context', async () => {
                const client = await makeEmployeeUserClientWithAbilities()
                await createTestAcquiringIntegrationContext(admin, client.organization, integration)
                const [data] = await allMiniAppsByTestClient(client, client.organization.id)
                expect(data).toBeDefined()
                expect(data).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: integration.id,
                        type: ACQUIRING_APP_TYPE,
                        connected: true,
                    }),
                ]))
            })
            test('Shows unconnected with deleted context', async () => {
                const client = await makeEmployeeUserClientWithAbilities()
                const [context] = await createTestAcquiringIntegrationContext(admin, client.organization, integration)
                await updateTestAcquiringIntegrationContext(admin, context.id, {
                    deletedAt: dayjs().toISOString(),
                })
                const [data] = await allMiniAppsByTestClient(client, client.organization.id)
                expect(data).toBeDefined()
                expect(data).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: integration.id,
                        type: ACQUIRING_APP_TYPE,
                        connected: false,
                    }),
                ]))
            })
            test('Doesn\'t shows if hidden integration', async () => {
                const [hiddenIntegration] = await createTestAcquiringIntegration(admin, billings, { isHidden: true })
                const client = await makeEmployeeUserClientWithAbilities()
                const [data] = await allMiniAppsByTestClient(client, client.organization.id)
                expect(data).toBeDefined()
                expect(data).not.toEqual(expect.arrayContaining([{
                    id: hiddenIntegration.id,
                    type: ACQUIRING_APP_TYPE,
                }]))
            })
        })
    })
})