/**
 * Generated by `createschema miniapp.B2BAppPromoBlock 'title:Text; subtitle:Text; backgroundColor:Text; backgroundImage:File'`
 */
const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowValidationFailureError,
} = require('@open-condo/keystone/test.utils')

const {
    B2BAppPromoBlock,
    createTestB2BAppPromoBlock,
    updateTestB2BAppPromoBlock,
} = require('@condo/domains/miniapp/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

describe('B2BAppPromoBlock', () => {
    describe('CRUD', () => {
        let admin
        let support
        let user
        let anonymous
        let actors
        beforeAll(async () => {
            admin = await makeLoggedInAdminClient()
            support = await makeClientWithSupportUser()
            user = await makeClientWithNewRegisteredAndLoggedInUser()
            anonymous = await makeClient()
            actors = {
                admin,
                support,
                user,
                anonymous,
            }
        })
        describe('Create', () => {
            test('Admin can', async () => {
                const [block] = await createTestB2BAppPromoBlock(admin)
                expect(block).toHaveProperty('id')
            })
            test('Support can', async () => {
                const [block] = await createTestB2BAppPromoBlock(support)
                expect(block).toHaveProperty('id')
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2BAppPromoBlock(user)
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestB2BAppPromoBlock(anonymous)
                })
            })
        })
        describe('Update', () => {
            let block
            beforeAll(async () => {
                [block] = await createTestB2BAppPromoBlock(admin)
            })
            test('Admin can', async () => {
                const title = faker.company.catchPhrase()
                expect(block).toHaveProperty('title')
                expect(block.title).not.toEqual(title)
                const [updated] = await updateTestB2BAppPromoBlock(admin, block.id, {
                    title,
                })
                expect(updated).toHaveProperty('title', title)
            })
            test('Support can', async () => {
                const subtitle = faker.commerce.productName()
                expect(block).toHaveProperty('subtitle')
                expect(block.title).not.toEqual(subtitle)
                const [updated] = await updateTestB2BAppPromoBlock(support, block.id, {
                    subtitle,
                })
                expect(updated).toHaveProperty('subtitle', subtitle)
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2BAppPromoBlock(user, block.id, {
                        title: 'My title',
                    })
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestB2BAppPromoBlock(anonymous, block.id, {
                        title: 'My title',
                    })
                })
            })
        })
        describe('Read', () => {
            let block
            beforeAll(async () => {
                [block] = await createTestB2BAppPromoBlock(admin)
            })
            const canReadRoles = [['admin'], ['support'], ['user']]
            test.each(canReadRoles)('%p can read all', async (role) => {
                const actor = actors[role]
                const blocks = await B2BAppPromoBlock.getAll(actor, { id: block.id })
                expect(blocks).toHaveLength(1)
                expect(blocks[0]).toHaveProperty('id')
                expect(blocks[0]).toHaveProperty('title')
                expect(blocks[0]).toHaveProperty('subtitle')
                expect(blocks[0]).toHaveProperty('textVariant')
                expect(blocks[0]).toHaveProperty('backgroundColor')
                expect(blocks[0]).toHaveProperty(['backgroundImage', 'publicUrl'])
                expect(blocks[0]).toHaveProperty('targetUrl')
                expect(blocks[0]).toHaveProperty('priority')
                expect(blocks[0]).toHaveProperty('external')
            })
            test('Anonymous cannot read', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await B2BAppPromoBlock.getAll(anonymous, { id: block.id })
                })
            })
        })
        describe('Hard-delete', () => {
            let block
            beforeAll(async () => {
                [block] = await createTestB2BAppPromoBlock(admin)
            })
            const noDeleteRoles = [['admin'], ['support'], ['user'], ['anonymous']]
            test.each(noDeleteRoles)('%p cannot hard-delete', async (role) => {
                const actor = actors[role]
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppPromoBlock.delete(actor, block.id)
                })
            })
        })
    })
    describe('Validations', () => {
        describe('Background color must be hex or gradient', () => {
            let admin
            let blockId
            beforeAll(async () => {
                admin = await makeLoggedInAdminClient()
                const [promoBlock] = await createTestB2BAppPromoBlock(admin)
                blockId = promoBlock.id
            })
            describe('Valid colors', () => {
                const cases = [
                    ['#af1'],
                    ['#FF0022'],
                    ['linear-gradient(90deg, #4cd174 0%, #6db8f2 100%)'],
                ]
                test.each(cases)('%p', async (backgroundColor) => {
                    const [updated] = await updateTestB2BAppPromoBlock(admin, blockId, {
                        backgroundColor,
                    })
                    expect(updated).toHaveProperty('backgroundColor', backgroundColor)
                })
            })
            describe('Invalid colors', () => {
                const cases = [
                    ['#ag1'],
                    ['#ffff'],
                    ['#FF00222'],
                    ['fff000'],
                    ['#fff000;'],
                    ['linear-gradient(90deg, #4cd174 0%, #6db8f2 100%);'],
                    ['radial-gradient(circle, rgba(2,0,36,1) 0%, rgba(9,9,121,1) 35%, rgba(0,212,255,1) 100%)'],
                ]
                test.each(cases)('%p', async (backgroundColor) => {
                    await expectToThrowValidationFailureError(async () => {
                        await updateTestB2BAppPromoBlock(admin, blockId, {
                            backgroundColor,
                        })
                    }, 'Invalid color specified')
                })
            })
        })
    })
})
