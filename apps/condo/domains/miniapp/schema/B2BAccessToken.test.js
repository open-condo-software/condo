/**
 * Generated by `createschema miniapp.B2BAccessToken 'sessionId:Text; context:Relationship:B2BAppContext:CASCADE; rightSet:Relationship:B2BAppAccessRightSet:CASCADE; expiresAt:Text;'`
 */

const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')
const { gql } = require('graphql-tag')
const IORedis = require('ioredis')

const conf = require('@open-condo/config')
const {
    makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor, expectValuesOfCommonFields,
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { B2BAccessToken, createTestB2BAccessToken, updateTestB2BAccessToken, createTestB2BAppContext,
    createTestB2BAppAccessRightSet, createTestB2BAppAccessRight, createTestB2BAccessTokenReadonly,
    B2BAccessTokenReadonly, updateTestB2BAppAccessRightSet, createTestB2BApp, updateTestB2BAccessTokenReadonly,
    updateTestB2BAppContext,
} = require('@condo/domains/miniapp/utils/testSchema')
const { Organization, registerNewOrganization, createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser,
    registerNewServiceUserByTestClient,
} = require('@condo/domains/user/utils/testSchema')



describe('B2BAccessToken', () => {

    let admin
    let b2bAppContext
    let organization
    let b2bApp
    let tokenRightSet
    let miniapRightSet
    let serviceUser
    beforeEach(async () => {
        admin = await makeLoggedInAdminClient()
        ;[b2bApp] = await createTestB2BApp(admin, {
            name: faker.company.name().replace(/ /, '-').toUpperCase() + ' B2B APP',
            developer: faker.company.name(),
        })
        ;[organization] = await createTestOrganization(admin)
        ;[b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, organization)
        ;[miniapRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp)
        ;[tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { 
            name: faker.random.alphaNumeric(8),
            type: 'token',
        })
        ;[serviceUser] = await registerNewServiceUserByTestClient(admin)
        await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, miniapRightSet)
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                // 1) prepare data
                const admin = await makeLoggedInAdminClient()

                // 2) action
                const [obj, attrs] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)

                // 3) check
                expectValuesOfCommonFields(obj, attrs, admin)

            })


            test('support can\'t', async () => {
                const client = await makeClientWithSupportUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2BAccessToken(client, b2bAppContext, tokenRightSet)
                })
            })

            describe('user', () => {
                test('can\'t with no rights', async () => {
                    const client = await makeClientWithNewRegisteredAndLoggedInUser()
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestB2BAccessTokenReadonly(client, b2bAppContext, tokenRightSet)
                    })
                })

                test.todo('Need to complete DOMA-6766 and give user access to B2BAppContext')
                test.skip('can with employment and rights', async () => {
                    const client = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [integrationManagerRole] = await createTestOrganizationEmployeeRole(admin, organization, { canManageIntegrations: true })
                    await createTestOrganizationEmployee(admin, organization, client.user, integrationManagerRole)
                    const [accessToken] = await createTestB2BAccessTokenReadonly(client, b2bAppContext, tokenRightSet)
                    expect(accessToken).toBeDefined()
                })
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestB2BAccessToken(client, b2bAppContext, tokenRightSet)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)

                const [obj, attrs] = await updateTestB2BAccessToken(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })


            test('support can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)

                const client = await makeClientWithSupportUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2BAccessTokenReadonly(client, objCreated.id)
                })
            })

            describe('user', () => {
                
                const USER_READONLY_FIELDS = [
                    ['sessionId', faker.random.alphaNumeric(8)],
                    ['user', { connect: { id: faker.datatype.uuid() } }],
                    ['context', { connect: { id: faker.datatype.uuid() } }],
                    ['expiresAt', faker.datatype.datetime({ min: dayjs().valueOf(), max: dayjs().add(1, 'month').valueOf() })],
                ]
                
                const USER_UPDATABLE_FIELDS = [
                    ['deletedAt', { value: dayjs().toISOString(), check: (item) => expect(item.deletedAt).toMatch(DATETIME_RE) }],
                ]
                
                describe('can\'t', () => {
                    let accessToken
                    let client
                    beforeAll(async () => {
                        client = await makeClientWithNewRegisteredAndLoggedInUser()
                        ;[accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                    })
                    
                    test.each(USER_READONLY_FIELDS)('%p', async (field, value) => {
                        const [role] = await createTestOrganizationEmployeeRole(admin, organization, { canManageIntegrations: true })
                        await createTestOrganizationEmployee(admin, organization, client.user, role)
                        await expectToThrowAccessDeniedErrorToObj(async () => {
                            await updateTestB2BAccessTokenReadonly(client, accessToken.id, { [field]: value })
                        })
                    })
                })

                describe('can', () => {
                    let accessToken
                    let client
                    beforeAll(async () => {
                        client = await makeClientWithNewRegisteredAndLoggedInUser()
                    })

                    beforeEach(async () => {
                        [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                    })

                    test.each(USER_UPDATABLE_FIELDS)('%p', async (field, { value, check }) => {
                        const [role] = await createTestOrganizationEmployeeRole(admin, organization, { canManageIntegrations: true })
                        await createTestOrganizationEmployee(admin, organization, client.user, role)
                        const [updatedAccessToken] = await updateTestB2BAccessTokenReadonly(client, accessToken.id, { [field]: value })
                        if (!check) {
                            expect(updatedAccessToken).toHaveProperty(field, value)
                        } else {
                            check(updatedAccessToken)
                        }
                    })
                })

            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestB2BAccessToken(client, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAccessToken.delete(admin, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAccessToken.delete(client, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)

                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAccessToken.delete(client, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)

                const objs = await B2BAccessToken.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,

                    }),
                ]))
            })

            describe('user', () => {

                test('can\'t with no rights', async () => {
                    await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                    const client = await makeClientWithNewRegisteredAndLoggedInUser()
                    const objs = await B2BAccessTokenReadonly.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                    expect(objs).toHaveLength(0)
                })

                test('can with employment and rights', async () => {
                    const [obj, attrs] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)

                    const client = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, { canManageIntegrations: true })
                    await createTestOrganizationEmployee(admin, organization, client.user, role)

                    const objs = await B2BAccessTokenReadonly.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                    expect(objs.length).toBeGreaterThanOrEqual(1)
                    expect(objs).toEqual(expect.arrayContaining([expect.objectContaining({ id: obj.id })]))
                })

            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await B2BAccessToken.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            const [obj] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
            expect(obj).toHaveProperty('dv', 1)
        })
    })

    describe('Real-life cases', () => {
        
        test('Returned sessionId is encoded', async () => {
            const redisClient = new IORedis(conf.REDIS_URL)
            const [createdToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
            expect(createdToken).toHaveProperty('sessionId')
            const session = await redisClient.get(`sess:${createdToken.sessionId}`)
            expect(session).toBeNull()
        })
        
        test.todo('After DOMA-6766 rewrite test to use employee with role')
        test('Show token only once after creation', async () => {
            // const client = await makeClientWithNewRegisteredAndLoggedInUser()
            // const [role] = await createTestOrganizationEmployeeRole(admin, organization, { canManageIntegrations: true })
            // await createTestOrganizationEmployee(admin, organization, client.user, role)

            const [createdToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
            expect(createdToken).toHaveProperty('token')
            expect(createdToken.token.length).toBeGreaterThan(0)

            const gottenToken = await B2BAccessToken.getOne(admin, { id: createdToken.id })
            expect(gottenToken).toHaveProperty('token')
            expect(gottenToken.token).toBeNull()
        })
        
        describe('Token', () => {
            
            describe('Authentication', () => {

                test('Can\'t logout with token', async () => {
                    await updateTestB2BAppAccessRightSet(admin, miniapRightSet.id, { canReadOrganizations: true })
                    await updateTestB2BAppAccessRightSet(admin, tokenRightSet.id, { canReadOrganizations: true })
                    const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                    const anonymous = await makeClient()
                    anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })
                    const { errors, data } = await anonymous.mutate(gql`
                    mutation unauthenticateUser {
                        obj: unauthenticateUser {
                            success
                        }
                    }
                `)
                    expect(data.obj).toBeNull()
                    expect(errors).toEqual([
                        expect.objectContaining({
                            extensions: expect.objectContaining({
                                code: 'FORBIDDEN',
                                message: 'You can not log out with token',
                            }),
                            name: 'GQLError',
                        }),
                    ])
                })

                test('Executes as connected service user', async () => {
                    await updateTestB2BAppAccessRightSet(admin, miniapRightSet.id, { canReadOrganizations: true })
                    await updateTestB2BAppAccessRightSet(admin, tokenRightSet.id, { canReadOrganizations: true })
                    const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                    const anonymous = await makeClient()
                    anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })
                    const res = await anonymous.query(gql`
                    query {
                        obj: authenticatedUser {
                            id
                            type
                        }
                    }
                `)
                    expect(res.errors).not.toBeDefined()
                    expect(res.data.obj).toEqual(expect.objectContaining({
                        id: serviceUser.id,
                        type: 'service',
                    }))
                })

            })
            
            test('Can access only connected organization', async () => {
                const [originalOrganization] = await registerNewOrganization(admin)
                const [b2bApp] = await createTestB2BApp(admin)
                const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, originalOrganization, { status: 'Finished' })
                const [miniappRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadOrganizations: true })
                const [tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'token', canReadOrganizations: true })
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, miniappRightSet)
   
                await registerNewOrganization(admin)
                
                const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                const anonymous = await makeClient()
                anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })
                const organizations = await Organization.getAll(anonymous, {})
                expect(organizations).toHaveLength(1)
                expect(organizations[0].id).toEqual(originalOrganization.id)
            })

            test('Overrides miniapp B2BAccessRightSet with own right set', async () => {
                const [originalOrganization] = await registerNewOrganization(admin)
                const [b2bApp] = await createTestB2BApp(admin)
                const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, originalOrganization, { status: 'Finished' })
                await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadOrganizations: true, canReadMeters: true })
                const [tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'token', canReadMeters: true })
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, tokenRightSet)

                const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                const anonymous = await makeClient()
                anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })

                const organizations = await Organization.getAll(anonymous, {})
                expect(organizations).toHaveLength(0)
            })

            test('Updating tokenB2BAccessRightSet leads to updating created token permissions', async () => {
                const [originalOrganization] = await registerNewOrganization(admin)
                const [b2bApp] = await createTestB2BApp(admin)
                const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, originalOrganization, { status: 'Finished' })
                const [miniappRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadOrganizations: true })
                const [tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'token', canReadOrganizations: true })
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, miniappRightSet)

                await registerNewOrganization(admin)

                const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                const anonymous = await makeClient()
                anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })

                const organizations = await Organization.getAll(anonymous, {})
                expect(organizations).toHaveLength(1)
                expect(organizations[0].id).toEqual(originalOrganization.id)

                await updateTestB2BAppAccessRightSet(admin, tokenRightSet.id, { canReadOrganizations: false })
                const repeatOrganizations = await Organization.getAll(anonymous, {})
                expect(repeatOrganizations).toHaveLength(0)
            })
            
            describe('Deleting related objects', () => {

                test('Deleting B2BAppAccessRightSet leads to session removal', async () => {
                    const [originalOrganization] = await registerNewOrganization(admin)
                    const [b2bApp] = await createTestB2BApp(admin)
                    const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, originalOrganization, { status: 'Finished' })
                    const [miniappRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadOrganizations: true })
                    const [tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'token', canReadOrganizations: true })
                    const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                    await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, miniappRightSet)

                    await registerNewOrganization(admin)

                    const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                    const anonymous = await makeClient()
                    anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })

                    const organizations = await Organization.getAll(anonymous, {})
                    expect(organizations).toHaveLength(1)
                    expect(organizations[0].id).toEqual(originalOrganization.id)

                    await updateTestB2BAppAccessRightSet(admin, tokenRightSet.id, { deletedAt: dayjs().toISOString() })
                    await expectToThrowAuthenticationErrorToObjects(async () => {
                        await Organization.getAll(anonymous, {})
                    })
                })
            
                test('Deleting B2BAppContext leads to session removal', async () => {
                    const [originalOrganization] = await registerNewOrganization(admin)
                    const [b2bApp] = await createTestB2BApp(admin)
                    const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, originalOrganization, { status: 'Finished' })
                    const [miniappRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadOrganizations: true })
                    const [tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'token', canReadOrganizations: true })
                    const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                    await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, miniappRightSet)

                    await registerNewOrganization(admin)

                    const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                    const anonymous = await makeClient()
                    anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })

                    const organizations = await Organization.getAll(anonymous, {})
                    expect(organizations).toHaveLength(1)
                    expect(organizations[0].id).toEqual(originalOrganization.id)

                    await updateTestB2BAppContext(admin, b2bAppContext.id, { deletedAt: dayjs().toISOString() })
                    await expectToThrowAuthenticationErrorToObjects(async () => {
                        await Organization.getAll(anonymous, {})
                    })
                })

            })

        })
    })
})
