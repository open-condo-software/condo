/**
 * Generated by `createschema miniapp.B2BAccessToken 'sessionId:Text; context:Relationship:B2BAppContext:CASCADE; rightSet:Relationship:B2BAppAccessRightSet:CASCADE; expiresAt:Text;'`
 */

const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')
const { gql } = require('graphql-tag')
const IORedis = require('ioredis')
const pick = require('lodash/pick')

const conf = require('@open-condo/config')
const {
    makeLoggedInAdminClient, makeClient, expectValuesOfCommonFields,
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowGQLError, expectToThrowAccessDeniedErrorToObjects,
    makeLoggedInClient,
} = require('@open-condo/keystone/test.utils')

const { B2BAccessToken, createTestB2BAccessToken, updateTestB2BAccessToken, createTestB2BAppContext,
    createTestB2BAppAccessRightSet, createTestB2BAppAccessRight, createTestB2BAccessTokenReadonly,
    B2BAccessTokenReadonly, updateTestB2BAppAccessRightSet, createTestB2BApp, updateTestB2BAccessTokenReadonly,
    updateTestB2BAppContext,
} = require('@condo/domains/miniapp/utils/testSchema')
const { Organization, registerNewOrganization, createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser,
    registerNewServiceUserByTestClient, makeClientWithServiceUser, createTestUserRightsSet,
} = require('@condo/domains/user/utils/testSchema')



describe('B2BAccessToken', () => {

    let admin
    let b2bAppContext
    let organization
    let b2bApp
    let scopedRightSet
    let globalRightSet
    let serviceUser
    beforeEach(async () => {
        admin = await makeLoggedInAdminClient()
        ;[b2bApp] = await createTestB2BApp(admin, {
            name: faker.company.name().replace(/ /, '-').toUpperCase() + ' B2B APP',
            developer: faker.company.name(),
        })
        ;[organization] = await createTestOrganization(admin)
        ;[b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, organization, { status: 'Finished' })
        ;[globalRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp)
        ;[scopedRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, {
            name: faker.random.alphaNumeric(8),
            type: 'SCOPED',
        })
        ;[serviceUser] = await registerNewServiceUserByTestClient(admin)
        await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, globalRightSet)
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                // 1) prepare data
                const admin = await makeLoggedInAdminClient()

                // 2) action
                const [obj, attrs] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)

                // 3) check
                expectValuesOfCommonFields(obj, attrs, admin)

            })


            describe('support', () => {
                test('can\'t with no rights', async () => {
                    const client = await makeClientWithSupportUser()
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestB2BAccessToken(client, b2bAppContext, scopedRightSet)
                    })
                })

                test('can with direct access', async () => {
                    const [rightSet] = await createTestUserRightsSet(admin, { canManageB2BAccessTokens: true })
                    const client = await makeClientWithSupportUser({ rightsSet: { connect: { id: rightSet.id } } })
                    const [accessToken] = await createTestB2BAccessTokenReadonly(client, b2bAppContext, scopedRightSet)
                    expect(accessToken).toBeDefined()
                })
            })

            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2BAccessTokenReadonly(client, b2bAppContext, scopedRightSet)
                })
            })

            test('serviceUser can with rights', async () => {
                const [b2bApp] = await createTestB2BApp(admin)
                const [organization] = await createTestOrganization(admin)
                const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, organization, { status: 'Finished' })
                const [globalRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canManageB2BAccessTokens: true, canReadB2BAccessTokens: true })
                const [scopedRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'SCOPED' })

                const serviceUserClient = await makeClientWithServiceUser()
                await createTestB2BAppAccessRight(admin, serviceUserClient.user, b2bApp, globalRightSet)
                const [accessToken] = await createTestB2BAccessTokenReadonly(serviceUserClient, b2bAppContext, scopedRightSet)
                expect(accessToken).toBeDefined()
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestB2BAccessToken(client, b2bAppContext, scopedRightSet)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)

                const [obj, attrs] = await updateTestB2BAccessToken(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            describe('support', () => {

                test('can\'t with no rights', async () => {
                    const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)
                    const client = await makeClientWithSupportUser()
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestB2BAccessTokenReadonly(client, objCreated.id)
                    })
                })

                test('can with direct access', async () => {
                    const [rightSet] = await createTestUserRightsSet(admin, { canManageB2BAccessTokens: true })
                    const client = await makeClientWithSupportUser({ rightsSet: { connect: { id: rightSet.id } } })
                    const [accessToken] = await createTestB2BAccessTokenReadonly(admin, b2bAppContext, scopedRightSet)
                    await updateTestB2BAccessTokenReadonly(client, accessToken.id)
                })

            })

            test('user can\'t', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2BAccessTokenReadonly(client, accessToken.id)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestB2BAccessToken(client, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAccessToken.delete(admin, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAccessToken.delete(client, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)

                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAccessToken.delete(client, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)

                const objs = await B2BAccessToken.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,

                    }),
                ]))
            })

            describe('support', () => {

                test('can\'t with no rights', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const [obj, attrs] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)
                    const client = await makeClientWithSupportUser()
                    await expectToThrowAccessDeniedErrorToObjects(async () => {
                        await B2BAccessToken.getOne(client, { id: obj.id })
                    })
                })

                test('can with direct access', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const [obj, attrs] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)
                    const [rightSet] = await createTestUserRightsSet(admin, { canReadB2BAccessTokens: true })
                    const client = await makeClientWithSupportUser({ rightsSet: { connect: { id: rightSet.id } } })
                    const createdToken = await B2BAccessToken.getOne(client, { id: obj.id })
                    expect(createdToken).toBeDefined()
                })

            })

            describe('service user', () => {

                test('can\'t with no rights', async () => {
                    const [b2bApp] = await createTestB2BApp(admin, {
                        name: faker.company.name().replace(/ /, '-').toUpperCase() + ' B2B APP',
                        developer: faker.company.name(),
                    })
                    const [organization] = await createTestOrganization(admin)
                    const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, organization, { status: 'Finished' })
                    const [globalRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadB2BAccessTokens: true })
                    const [scopedRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, {
                        name: faker.random.alphaNumeric(8),
                        type: 'SCOPED',
                    })
                    const serviceUserClient = await makeClientWithServiceUser()
                    await createTestB2BAppAccessRight(admin, serviceUserClient.user, b2bApp, globalRightSet)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestB2BAccessToken(serviceUserClient, b2bAppContext, scopedRightSet)
                    })
                })

                test('can with rights', async () => {
                    const [b2bApp] = await createTestB2BApp(admin, {
                        name: faker.company.name().replace(/ /, '-').toUpperCase() + ' B2B APP',
                        developer: faker.company.name(),
                    })
                    const [organization] = await createTestOrganization(admin)
                    const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, organization, { status: 'Finished' })
                    const [globalRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canManageB2BAccessTokens: true })
                    const [scopedRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, {
                        name: faker.random.alphaNumeric(8),
                        type: 'SCOPED',
                    })
                    const serviceUserClient = await makeClientWithServiceUser()
                    await createTestB2BAppAccessRight(admin, serviceUserClient.user, b2bApp, globalRightSet)

                    const [accessToken] = await createTestB2BAccessToken(serviceUserClient, b2bAppContext, scopedRightSet)
                    expect(accessToken).toBeDefined()
                })

            })

            test('user can\'t', async () => {
                await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await B2BAccessTokenReadonly.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await B2BAccessToken.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Fields update access', () => {
        const updateInput = {}
        const updatableByNonAdminFields = ['deletedAt']

        beforeAll(async () => {
            const admin = await makeLoggedInAdminClient()
            const [anotherB2bApp] = await createTestB2BApp(admin, {
                name: faker.company.name().replace(/ /, '-').toUpperCase() + ' B2B APP',
                developer: faker.company.name(),
            })
            const [anotherOrganization] = await createTestOrganization(admin)
            const [anotherB2bAppContext] = await createTestB2BAppContext(admin, anotherB2bApp, anotherOrganization, { status: 'Finished' })
            const [anotherGlobalRightSet] = await createTestB2BAppAccessRightSet(admin, anotherB2bApp)
            const [anotherScopedRightSet] = await createTestB2BAppAccessRightSet(admin, anotherB2bApp, {
                name: faker.random.alphaNumeric(8),
                type: 'SCOPED',
            })
            const [anotherServiceUser] = await registerNewServiceUserByTestClient(admin)
            await createTestB2BAppAccessRight(admin, anotherServiceUser, anotherB2bApp, anotherGlobalRightSet)

            updateInput.sessionId = faker.random.alphaNumeric(8)
            updateInput.user = { connect: { id: anotherServiceUser.id } }
            updateInput.context = { connect: { id: anotherB2bAppContext.id } }
            updateInput.rightSet = { connect: { id: anotherScopedRightSet.id } }
            updateInput.expiresAt = faker.datatype.datetime({ min: dayjs().valueOf(), max: dayjs().add(1, 'month').valueOf() })
            updateInput.deletedAt = dayjs().toISOString()
        })

        test('admin can update everything', async () => {
            const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)
            const [updatedToken] = await updateTestB2BAccessToken(admin, accessToken.id, updateInput)
            expect(updatedToken).toBeDefined()
        })

        test(`others can update only ${updatableByNonAdminFields}`, async () => {
            const [rightSet] = await createTestUserRightsSet(admin, { canManageB2BAccessTokens: true })
            const client = await makeClientWithSupportUser({ rightsSet: { connect: { id: rightSet.id } } })
            const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestB2BAccessToken(client, accessToken.id, updateInput)
            })

            const [updatedToken] = await updateTestB2BAccessToken(client, accessToken.id, pick(updateInput, 'deletedAt'))
            expect(updatedToken).toBeDefined()
        })
        // const USER_READONLY_FIELDS = [
        //     ['sessionId', faker.random.alphaNumeric(8)],
        //     ['user', { connect: { id: faker.datatype.uuid() } }],
        //     ['context', { connect: { id: faker.datatype.uuid() } }],
        //     ['expiresAt', faker.datatype.datetime({ min: dayjs().valueOf(), max: dayjs().add(1, 'month').valueOf() })],
        // ]
        //
        // const USER_UPDATABLE_FIELDS = [
        //     ['deletedAt', { value: dayjs().toISOString(), check: (item) => expect(item.deletedAt).toMatch(DATETIME_RE) }],
        // ]
        //
        // describe('can\'t', () => {
        //     let accessToken
        //     let client
        //     beforeAll(async () => {
        //         client = await makeClientWithNewRegisteredAndLoggedInUser()
        //         ;[accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
        //     })
        //    
        //     test.each(USER_READONLY_FIELDS)('%p', async (field, value) => {
        //         const [role] = await createTestOrganizationEmployeeRole(admin, organization, { canManageIntegrations: true })
        //         await createTestOrganizationEmployee(admin, organization, client.user, role)
        //         await expectToThrowAccessDeniedErrorToObj(async () => {
        //             await updateTestB2BAccessTokenReadonly(client, accessToken.id, { [field]: value })
        //         })
        //     })
        // })
        //
        // describe('can', () => {
        //     let accessToken
        //     let client
        //     beforeAll(async () => {
        //         client = await makeClientWithNewRegisteredAndLoggedInUser()
        //     })
        //
        //     beforeEach(async () => {
        //         [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
        //     })
        //
        //     test.each(USER_UPDATABLE_FIELDS)('%p', async (field, { value, check }) => {
        //         const [role] = await createTestOrganizationEmployeeRole(admin, organization, { canManageIntegrations: true })
        //         await createTestOrganizationEmployee(admin, organization, client.user, role)
        //         const [updatedAccessToken] = await updateTestB2BAccessTokenReadonly(client, accessToken.id, { [field]: value })
        //         if (!check) {
        //             expect(updatedAccessToken).toHaveProperty(field, value)
        //         } else {
        //             check(updatedAccessToken)
        //         }
        //     })
        // })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            const [obj] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)
            expect(obj).toHaveProperty('dv', 1)
        })

        test('Accepts only context and rightSet for same app', async () => {
            const [otherApp1] = await createTestB2BApp(admin)
            const [otherApp2] = await createTestB2BApp(admin)
            const [otherApp3] = await createTestB2BApp(admin)
            await createTestB2BAppAccessRightSet(admin, otherApp1)
            await createTestB2BAppAccessRightSet(admin, otherApp2)
            await createTestB2BAppAccessRightSet(admin, otherApp3)
            const [tokenRightSet1] = await createTestB2BAppAccessRightSet(admin, otherApp1, { type: 'SCOPED' })
            const [tokenRightSet2] = await createTestB2BAppAccessRightSet(admin, otherApp2, { type: 'SCOPED' })
            const [tokenRightSet3] = await createTestB2BAppAccessRightSet(admin, otherApp3, { type: 'SCOPED' })
            const [otherServiceUser1] = await registerNewServiceUserByTestClient(admin)
            const [otherServiceUser2] = await registerNewServiceUserByTestClient(admin)
            const [otherServiceUser3] = await registerNewServiceUserByTestClient(admin)
            await createTestB2BAppAccessRight(admin, otherServiceUser1, otherApp1)
            await createTestB2BAppAccessRight(admin, otherServiceUser2, otherApp2)
            await createTestB2BAppAccessRight(admin, otherServiceUser3, otherApp3)
            await updateTestB2BAppContext(admin, b2bAppContext.id, { status: 'Finished' })
            const [otherContext1] = await createTestB2BAppContext(admin, otherApp1, organization, { status: 'Finished' })
            const [otherContext2] = await createTestB2BAppContext(admin, otherApp2, organization, { status: 'Finished' })
            const [otherContext3] = await createTestB2BAppContext(admin, otherApp3, organization, { status: 'Finished' })

            const badCases = [
                [otherContext2, tokenRightSet1],
                [otherContext1, tokenRightSet2],
                [otherContext1, tokenRightSet3],
            ]

            for (const [context, rightSet] of badCases) {
                await expectToThrowGQLError(async () => {
                    await createTestB2BAccessToken(admin, context, rightSet)
                }, {
                    code: 'BAD_USER_INPUT',
                    type: 'ACCESS_TOKEN_CONTEXT_DOES_NOT_MATCH_RIGHT_SET',
                    message: 'B2BAppContext and B2BRightSet connected to different B2BApps',
                }, 'obj')
            }

        })
    })

    describe('Real-life cases', () => {
        
        test('Returned sessionId is encoded', async () => {
            const redisClient = new IORedis(conf.REDIS_URL)
            const [createdToken] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)
            expect(createdToken).toHaveProperty('sessionId')
            const session = await redisClient.get(`sess:${createdToken.sessionId}`)
            expect(session).toBeNull()
        })

        test('Show token only once after creation', async () => {
            await updateTestB2BAppAccessRightSet(admin, globalRightSet.id, { canManageB2BAccessTokens: true, canReadB2BAccessTokens: true })
            const client = await makeLoggedInClient(serviceUser)
            const [createdToken] = await createTestB2BAccessToken(client, b2bAppContext, scopedRightSet)
            expect(createdToken).toHaveProperty('token')
            expect(createdToken.token.length).toBeGreaterThan(0)

            const gottenToken = await B2BAccessToken.getOne(client, { id: createdToken.id })
            expect(gottenToken).toHaveProperty('token')
            expect(gottenToken.token).toBeNull()
        })
        
        describe('Token', () => {
            
            describe('Authentication', () => {

                test('Can\'t logout with token', async () => {
                    await updateTestB2BAppAccessRightSet(admin, globalRightSet.id, { canReadOrganizations: true })
                    await updateTestB2BAppAccessRightSet(admin, scopedRightSet.id, { canReadOrganizations: true })
                    const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)
                    const anonymous = await makeClient()
                    anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })
                    const { errors, data } = await anonymous.mutate(gql`
                    mutation unauthenticateUser {
                        obj: unauthenticateUser {
                            success
                        }
                    }
                `)
                    expect(data.obj).toBeNull()
                    expect(errors).toEqual([
                        expect.objectContaining({
                            extensions: expect.objectContaining({
                                code: 'FORBIDDEN',
                                message: 'You can not log out with token',
                            }),
                            name: 'GQLError',
                        }),
                    ])
                })

                test('Executes as connected service user', async () => {
                    await updateTestB2BAppAccessRightSet(admin, globalRightSet.id, { canReadOrganizations: true })
                    await updateTestB2BAppAccessRightSet(admin, scopedRightSet.id, { canReadOrganizations: true })
                    const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, scopedRightSet)
                    const anonymous = await makeClient()
                    anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })
                    const res = await anonymous.query(gql`
                    query {
                        obj: authenticatedUser {
                            id
                            type
                        }
                    }
                `)
                    expect(res.errors).not.toBeDefined()
                    expect(res.data.obj).toEqual(expect.objectContaining({
                        id: serviceUser.id,
                        type: 'service',
                    }))
                })

            })
            
            test('Can access only connected organization', async () => {
                const [originalOrganization] = await registerNewOrganization(admin)
                const [b2bApp] = await createTestB2BApp(admin)
                const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, originalOrganization, { status: 'Finished' })
                const [miniappRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadOrganizations: true })
                const [tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'SCOPED', canReadOrganizations: true })
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, miniappRightSet)
   
                await registerNewOrganization(admin)
                
                const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                const anonymous = await makeClient()
                anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })
                const organizations = await Organization.getAll(anonymous, {})
                expect(organizations).toHaveLength(1)
                expect(organizations[0].id).toEqual(originalOrganization.id)
            })

            test('Overrides miniapp B2BAccessRightSet with own right set', async () => {
                const serviceUserClient = await makeClientWithServiceUser()
                const [originalOrganization] = await registerNewOrganization(admin)
                const [b2bApp] = await createTestB2BApp(admin)
                const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, originalOrganization, { status: 'Finished' })
                const [miniappRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadOrganizations: true, canReadMeters: true })
                await createTestB2BAppAccessRight(admin, serviceUserClient.user, b2bApp, miniappRightSet)
                const [tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'SCOPED', canReadMeters: true })

                const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                const anonymous = await makeClient()
                anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })

                const serviceUserOrganizations = await Organization.getAll(serviceUserClient, {})
                expect(serviceUserOrganizations.length).toBeGreaterThanOrEqual(1)

                const accessTokenOrganizations = await Organization.getAll(anonymous, {})
                expect(accessTokenOrganizations).toHaveLength(0)
            })

            test('Updating tokenB2BAccessRightSet leads to updating created token permissions', async () => {
                const [originalOrganization] = await registerNewOrganization(admin)
                const [b2bApp] = await createTestB2BApp(admin)
                const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, originalOrganization, { status: 'Finished' })
                const [miniappRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadOrganizations: true })
                const [tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'SCOPED', canReadOrganizations: true })
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, miniappRightSet)

                await registerNewOrganization(admin)

                const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                const anonymous = await makeClient()
                anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })

                const organizations = await Organization.getAll(anonymous, {})
                expect(organizations).toHaveLength(1)
                expect(organizations[0].id).toEqual(originalOrganization.id)

                await updateTestB2BAppAccessRightSet(admin, tokenRightSet.id, { canReadOrganizations: false })
                const repeatOrganizations = await Organization.getAll(anonymous, {})
                expect(repeatOrganizations).toHaveLength(0)
            })
            
            describe('Deleting related objects', () => {

                test('Deleting B2BAppAccessRightSet leads to session removal', async () => {
                    const [originalOrganization] = await registerNewOrganization(admin)
                    const [b2bApp] = await createTestB2BApp(admin)
                    const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, originalOrganization, { status: 'Finished' })
                    const [miniappRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadOrganizations: true })
                    const [tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'SCOPED', canReadOrganizations: true })
                    const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                    await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, miniappRightSet)

                    await registerNewOrganization(admin)

                    const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                    const anonymous = await makeClient()
                    anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })

                    const organizations = await Organization.getAll(anonymous, {})
                    expect(organizations).toHaveLength(1)
                    expect(organizations[0].id).toEqual(originalOrganization.id)

                    await updateTestB2BAppAccessRightSet(admin, tokenRightSet.id, { deletedAt: dayjs().toISOString() })
                    await expectToThrowAuthenticationErrorToObjects(async () => {
                        await Organization.getAll(anonymous, {})
                    })
                })
            
                test('Deleting B2BAppContext leads to session removal', async () => {
                    const [originalOrganization] = await registerNewOrganization(admin)
                    const [b2bApp] = await createTestB2BApp(admin)
                    const [b2bAppContext] = await createTestB2BAppContext(admin, b2bApp, originalOrganization, { status: 'Finished' })
                    const [miniappRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { canReadOrganizations: true })
                    const [tokenRightSet] = await createTestB2BAppAccessRightSet(admin, b2bApp, { type: 'SCOPED', canReadOrganizations: true })
                    const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                    await createTestB2BAppAccessRight(admin, serviceUser, b2bApp, miniappRightSet)

                    await registerNewOrganization(admin)

                    const [accessToken] = await createTestB2BAccessToken(admin, b2bAppContext, tokenRightSet)
                    const anonymous = await makeClient()
                    anonymous.setHeaders({ 'Authorization': `Bearer ${accessToken.token}` })

                    const organizations = await Organization.getAll(anonymous, {})
                    expect(organizations).toHaveLength(1)
                    expect(organizations[0].id).toEqual(originalOrganization.id)

                    await updateTestB2BAppContext(admin, b2bAppContext.id, { deletedAt: dayjs().toISOString() })
                    await expectToThrowAuthenticationErrorToObjects(async () => {
                        await Organization.getAll(anonymous, {})
                    })
                })

            })

        })
    })
})
