/**
 * Generated by `createschema miniapp.B2BAppAccessRight 'user:Relationship:User:PROTECT;'`
 */

const dayjs = require('dayjs')

const {
    makeLoggedInAdminClient,
    makeClient,
    expectToThrowUniqueConstraintViolationError,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAccessDeniedErrorToObjects,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowValidationFailureError,
    expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const { NON_SERVICE_USER_ERROR } = require('@condo/domains/miniapp/constants')
const { ERRORS } = require('@condo/domains/miniapp/schema/B2BAppAccessRight')
const {
    createTestB2BApp,
    createTestB2BAppAccessRight,
    updateTestB2BAppAccessRight,
    B2BAppAccessRight, createTestB2BAppAccessRightSet,
} = require('@condo/domains/miniapp/utils/testSchema')
const {
    makeClientWithSupportUser,
    makeClientWithNewRegisteredAndLoggedInUser,
    registerNewServiceUserByTestClient,
} = require('@condo/domains/user/utils/testSchema')


describe('B2BAppAccessRight', () => {
    describe('CRUD', () => {
        let admin
        let support
        let user
        let anonymous
        beforeAll(async () => {
            admin = await makeLoggedInAdminClient()
            support = await makeClientWithSupportUser()
            user = await makeClientWithNewRegisteredAndLoggedInUser()
            anonymous = await makeClient()
        })
        describe('Create', () => {
            let app
            let serviceUser
            beforeEach(async () => {
                [serviceUser] = await registerNewServiceUserByTestClient(admin)
                const [newApp] = await createTestB2BApp(admin)
                app = newApp

            })
            test('Admin can', async () => {
                const [right] = await createTestB2BAppAccessRight(admin, serviceUser, app)
                expect(right).toBeDefined()
            })
            test('Support can', async () => {
                const [right] = await createTestB2BAppAccessRight(support, serviceUser, app)
                expect(right).toBeDefined()
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2BAppAccessRight(user, serviceUser, app)
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestB2BAppAccessRight(anonymous, serviceUser, app)
                })
            })
        })
        describe('Read', () => {
            let right
            beforeAll(async () => {
                const [app] = await createTestB2BApp(admin)
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                const [accessRight] = await createTestB2BAppAccessRight(admin, serviceUser, app)
                right = accessRight
            })
            test('Admin can', async () => {
                const rights = await B2BAppAccessRight.getAll(admin, {
                    id: right.id,
                })
                expect(rights).toBeDefined()
                expect(rights).toHaveLength(1)
                expect(rights[0]).toHaveProperty('id', right.id)
            })
            test('Support can', async () => {
                const rights = await B2BAppAccessRight.getAll(support, {
                    id: right.id,
                })
                expect(rights).toBeDefined()
                expect(rights).toHaveLength(1)
                expect(rights[0]).toHaveProperty('id', right.id)
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await B2BAppAccessRight.getAll(user, {
                        id: right.id,
                    })
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await B2BAppAccessRight.getAll(anonymous, {
                        id: right.id,
                    })
                })
            })
        })
        describe('Update', () => {
            let right
            let userToChange
            beforeAll(async () => {
                const [app] = await createTestB2BApp(admin)
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                const [accessRight] = await createTestB2BAppAccessRight(admin, serviceUser, app)
                right = accessRight
            })
            beforeEach(async () => {
                [userToChange] = await registerNewServiceUserByTestClient(admin)
            })
            test('Admin can', async () => {
                const [newRight] = await updateTestB2BAppAccessRight(admin, right.id, {
                    user: { connect: { id: userToChange.id } },
                })
                expect(newRight).toBeDefined()
                expect(newRight).toHaveProperty(['user', 'id'], userToChange.id)
            })
            test('Support can', async () => {
                const [newRight] = await updateTestB2BAppAccessRight(support, right.id, {
                    user: { connect: { id: userToChange.id } },
                })
                expect(newRight).toBeDefined()
                expect(newRight).toHaveProperty(['user', 'id'], userToChange.id)
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2BAppAccessRight(user, right.id, {
                        deletedAt: dayjs().toISOString(),
                    })
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2BAppAccessRight(user, right.id, {
                        deletedAt: dayjs().toISOString(),
                    })
                })
            })
        })
        describe('Delete', () => {
            let right
            beforeAll(async () => {
                const [app] = await createTestB2BApp(admin)
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                const [accessRight] = await createTestB2BAppAccessRight(admin, serviceUser, app)
                right = accessRight
            })
            test('Nobody can', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRight.delete(admin, right.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRight.delete(support, right.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRight.delete(user, right.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRight.delete(anonymous, right.id)
                })
            })
        })
    })
    describe('Validations', () => {
        test('Cannot be linked to non-service user', async () => {
            const admin = await makeLoggedInAdminClient()
            const [app] = await createTestB2BApp(admin)
            const client = await makeClientWithNewRegisteredAndLoggedInUser()
            const [serviceUser] = await registerNewServiceUserByTestClient(admin)
            await expectToThrowValidationFailureError(async () => {
                await createTestB2BAppAccessRight(admin, client.user, app)
            }, NON_SERVICE_USER_ERROR)
            const [right] = await createTestB2BAppAccessRight(admin, serviceUser, app)
            await expectToThrowValidationFailureError(async () => {
                await updateTestB2BAppAccessRight(admin, right.id, {
                    user: { connect: { id: client.user.id } },
                })
            }, NON_SERVICE_USER_ERROR)
        })

        test('One service user can be linked for different B2BApps', async () => {
            const admin = await makeLoggedInAdminClient()
            const [serviceUser] = await registerNewServiceUserByTestClient(admin)

            const [app] = await createTestB2BApp(admin)
            const [app2] = await createTestB2BApp(admin)

            const [accessRight1] = await createTestB2BAppAccessRight(admin, serviceUser, app)
            const [accessRight2] = await createTestB2BAppAccessRight(admin, serviceUser, app2)

            expect(accessRight1).toBeDefined()
            expect(accessRight2).toBeDefined()
        })

        test('Ð¡an not create or update "B2BAppAccessRight" if "app" and "accessRightSet" refer to different "B2BApp"', async () => {
            const admin = await makeLoggedInAdminClient()
            const [serviceUser] = await registerNewServiceUserByTestClient(admin)

            const [app] = await createTestB2BApp(admin)
            const [app2] = await createTestB2BApp(admin)

            // access right sets for first app
            const [accessRightSet1] = await createTestB2BAppAccessRightSet(admin, app)

            // access right sets for second app
            const [accessRightSet2] = await createTestB2BAppAccessRightSet(admin, app2)

            // cannot create B2BAppAccessRight for app if accessRightSet for another app
            await expectToThrowGQLError(async () => {
                await createTestB2BAppAccessRight(admin, serviceUser, app, accessRightSet2)
            }, ERRORS.ACCESS_RIGHT_SET_NOT_FOR_CONNECTED_B2B_APP)

            // can create B2BAppAccessRight for app if accessRightSet for that app
            const [b2BAppAccessRight] = await createTestB2BAppAccessRight(admin, serviceUser, app, accessRightSet1)

            // cannot update B2BAppAccessRight for app if accessRightSet for another app
            await expectToThrowGQLError(async () => {
                await updateTestB2BAppAccessRight(admin, b2BAppAccessRight.id, {
                    app: { connect: { id: app2.id } },
                })
            }, ERRORS.ACCESS_RIGHT_SET_NOT_FOR_CONNECTED_B2B_APP)
            await expectToThrowGQLError(async () => {
                await updateTestB2BAppAccessRight(admin, b2BAppAccessRight.id, {
                    accessRightSet: { connect: { id: accessRightSet2.id } },
                })
            }, ERRORS.ACCESS_RIGHT_SET_NOT_FOR_CONNECTED_B2B_APP)
        })
    })
    describe('Constraints', () => {
        test('Cannot be created 2 active access rights for a single app', async () => {
            const admin = await makeLoggedInAdminClient()
            const [serviceUser] = await registerNewServiceUserByTestClient(admin)
            const [serviceUser2] = await registerNewServiceUserByTestClient(admin)

            const [app] = await createTestB2BApp(admin)
            await createTestB2BAppAccessRight(admin, serviceUser, app)

            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestB2BAppAccessRight(admin, serviceUser2, app)
            }, 'b2b_app_access_right_unique_app')
        })
    })
})
