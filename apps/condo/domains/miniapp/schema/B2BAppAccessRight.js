/**
 * Generated by `createschema miniapp.B2BAppAccessRight 'user:Relationship:User:PROTECT;'`
 */

const { Relationship } = require('@keystonejs/fields')
const { GQLListSchema } = require('@condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@condo/keystone/plugins')
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')
const access = require('@condo/domains/miniapp/access/B2BAppAccessRight')
const { SERVICE_USER_FIELD } = require('@condo/domains/miniapp/schema/fields/accessRight')


const B2BAppAccessRight = new GQLListSchema('B2BAppAccessRight', {
    schemaDoc: 'Link between service user and B2B App. The existence of this connection means that this user has the rights to perform actions on behalf of the integration',
    fields: {
        user: SERVICE_USER_FIELD,
        app: {
            schemaDoc: 'Link to B2BApp.accessRights',
            type: Relationship,
            ref: 'B2BApp.accessRights',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadB2BAppAccessRights,
        create: access.canManageB2BAppAccessRights,
        update: access.canManageB2BAppAccessRights,
        delete: false,
        auth: true,
    },
})

module.exports = {
    B2BAppAccessRight,
}
