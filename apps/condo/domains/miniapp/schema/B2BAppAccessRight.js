/**
 * Generated by `createschema miniapp.B2BAppAccessRight 'user:Relationship:User:PROTECT;'`
 */

const { Relationship } = require('@keystonejs/fields')
const { GQLListSchema, getById } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')
const access = require('@condo/domains/miniapp/access/B2BAppAccessRight')
const { SERVICE } = require('@condo/domains/user/constants/common')
const { NON_SERVICE_USER_ERROR } = require('@condo/domains/miniapp/constants')


const B2BAppAccessRight = new GQLListSchema('B2BAppAccessRight', {
    schemaDoc: 'Link between service user and B2B App. The existence of this connection means that this user has the rights to perform actions on behalf of the integration',
    fields: {
        user: {
            schemaDoc: `Link to user. Note, that user must be of "${SERVICE}" type`,
            type: Relationship,
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
            hooks: {
                validateInput: async ({ resolvedData, fieldPath, addFieldValidationError }) => {
                    if (resolvedData[fieldPath]) {
                        const user = await getById('User', resolvedData[fieldPath])
                        if (!user || user.type !== SERVICE) {
                            addFieldValidationError(NON_SERVICE_USER_ERROR)
                        }
                    }
                },
            },
        },
        app: {
            schemaDoc: 'Link to B2BApp.accessRights',
            type: Relationship,
            ref: 'B2BApp.accessRights',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical(), dvAndSender()],
    access: {
        read: access.canReadB2BAppAccessRights,
        create: access.canManageB2BAppAccessRights,
        update: access.canManageB2BAppAccessRights,
        delete: false,
        auth: true,
    },
})

module.exports = {
    B2BAppAccessRight,
}
