/**
 * Generated by `createschema miniapp.CustomValue 'objectId:Text; data:Json; customField:Relationship:CustomField:PROTECT; sourceType:Text; sourceId:Text; organization:Relationship:Organization:PROTECT;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, expectValuesOfCommonFields, expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const { CONTEXT_FINISHED_STATUS, CONTEXT_IN_PROGRESS_STATUS } = require('@condo/domains/miniapp/constants')
const { CustomValue, createTestCustomField, createTestB2BApp,
    createTestB2BAppContext, createTestB2BAppAccessRightSet,
    createTestB2BAppAccessRight, createTestCustomValue, updateTestCustomValue, updateTestCustomField,
    updateTestB2BAppContext, updateTestB2BAppAccessRight,
} = require('@condo/domains/miniapp/utils/testSchema')
const {
    createTestOrganization,
} = require('@condo/domains/organization/utils/testSchema')
const {
    makeEmployeeUserClientWithAbilities,
} = require('@condo/domains/organization/utils/testSchema')
const { FLAT_UNIT_TYPE, APARTMENT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { createTestProperty, updateTestProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithServiceUser } = require('@condo/domains/user/utils/testSchema')

const { B2B_APP_SOURCE_TYPE, ERRORS } = require('./CustomValue')


describe('CustomValue', () => {
    let admin
    let support
    let manager
    let anonymous
    let customField
    let b2bApp

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        manager = await makeEmployeeUserClientWithAbilities({
            canManageB2BApps: true,
            canManageRoles: true,
        })
        anonymous = await makeClient()

        const [b2bAppObj] = await createTestB2BApp(admin)
        b2bApp = b2bAppObj

        const [customFieldObj] = await createTestCustomField(admin, { schemaName: 'Property', isUniquePerObject: false })
        customField = customFieldObj
    })

    describe('Basic CRUD tests', () => {
        let property
        let organization

        beforeAll(async () => {
            const [orgObj] = await createTestOrganization(admin)
            organization = orgObj

            const [propertyObj] = await createTestProperty(admin, organization)
            property = propertyObj
        })

        describe('create', () => {
            test('admin can', async () => {
                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }

                const [obj, attrs] = await createTestCustomValue(admin, customField, organization, payload)

                expectValuesOfCommonFields(obj, attrs, admin)
                expect(obj.data).toEqual(attrs.data)
                expect(obj.objectId).toEqual(attrs.objectId)
                expect(obj.sourceType).toEqual(attrs.sourceType)
                expect(obj.sourceId).toEqual(attrs.sourceId)
                expect(obj.unitName).toEqual(attrs.unitName)
                expect(obj.unitType).toEqual(attrs.unitType)
                expect(obj.addressKey).toEqual(attrs.addressKey)
                expect(obj.uniqKey).toEqual(attrs.uniqKey)
            })

            test('support can', async () => {
                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }

                const [obj, attrs] = await createTestCustomValue(support, customField, organization, payload)

                expectValuesOfCommonFields(obj, attrs, support)
                expect(obj.data).toEqual(attrs.data)
                expect(obj.objectId).toEqual(attrs.objectId)
                expect(obj.sourceType).toEqual(attrs.sourceType)
                expect(obj.sourceId).toEqual(attrs.sourceId)
                expect(obj.unitName).toEqual(attrs.unitName)
                expect(obj.unitType).toEqual(attrs.unitType)
                expect(obj.addressKey).toEqual(attrs.addressKey)
                expect(obj.uniqKey).toEqual(attrs.uniqKey)
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    const payload = {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    }

                    const [obj, attrs] = await createTestCustomValue(anonymous, customField, organization, payload)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                    data: '1',
                }

                const [customValue] = await createTestCustomValue(admin, customField, organization, payload)

                const [obj, attrs] = await updateTestCustomValue(admin, customValue.id, { data: '2' })

                expect(obj.data).toEqual(attrs.data)
                expect(obj.v).toEqual(2)
            })

            test('support can', async () => {
                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                    data: '1',
                }

                const [customValue] = await createTestCustomValue(support, customField, organization, payload)

                const [obj, attrs] = await updateTestCustomValue(support, customValue.id, { data: '2' })

                expect(obj.data).toEqual(attrs.data)
                expect(obj.v).toEqual(2)
            })

            test('anonymous can\'t', async () => {
                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                    data: '1',
                }

                const [customValue] = await createTestCustomValue(admin, customField, organization, payload)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestCustomValue(anonymous, customValue.id, { data: '2' })
                })
            })
        })

        describe('hard delete', () => {
            const payload = {}
            let customValueToDelete

            beforeAll(async () => {
                const [property] = await createTestProperty(admin, organization)

                payload.objectId = property.id
                payload.sourceType = B2B_APP_SOURCE_TYPE
                payload.sourceId = b2bApp.id

                const [customValueToDeleteObj] = await createTestCustomValue(admin, customField, organization, payload)
                customValueToDelete = customValueToDeleteObj
            })

            test('admin can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CustomValue.delete(admin, customValueToDelete.id)
                })
            })

            test('support can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CustomValue.delete(support, customValueToDelete.id)
                })
            })

            test('user can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CustomValue.delete(manager, customValueToDelete.id)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CustomValue.delete(anonymous, customValueToDelete.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }

                const [obj, attrs] = await createTestCustomValue(admin, customField, organization, payload)

                expectValuesOfCommonFields(obj, attrs, admin)
                expect(obj.data).toEqual(attrs.data)
                expect(obj.objectId).toEqual(attrs.objectId)
                expect(obj.sourceType).toEqual(attrs.sourceType)
                expect(obj.sourceId).toEqual(attrs.sourceId)
                expect(obj.unitName).toEqual(attrs.unitName)
                expect(obj.unitType).toEqual(attrs.unitType)
                expect(obj.addressKey).toEqual(attrs.addressKey)
                expect(obj.uniqKey).toEqual(attrs.uniqKey)
            })

            test('support can', async () =>{
                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }

                const [obj, attrs] = await createTestCustomValue(support, customField, organization, payload)

                expectValuesOfCommonFields(obj, attrs, support)
                expect(obj.data).toEqual(attrs.data)
                expect(obj.objectId).toEqual(attrs.objectId)
                expect(obj.sourceType).toEqual(attrs.sourceType)
                expect(obj.sourceId).toEqual(attrs.sourceId)
                expect(obj.unitName).toEqual(attrs.unitName)
                expect(obj.unitType).toEqual(attrs.unitType)
                expect(obj.addressKey).toEqual(attrs.addressKey)
                expect(obj.uniqKey).toEqual(attrs.uniqKey)
            })

            test('anonymous can\'t', async () => {
                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }

                const [obj, attrs] = await createTestCustomValue(admin, customField, organization, payload)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await CustomValue.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Access tests', () => {
        describe('b2b app service user',  () => {
            let customField
            let organization
            let property

            beforeAll(async () => {
                const [customFieldObj] = await createTestCustomField(admin, { isUniquePerObject: false })
                customField = customFieldObj

                const [organizationObj] = await createTestOrganization(admin)
                organization = organizationObj

                const [propertyObj] = await createTestProperty(support, organization)
                property = propertyObj
            })

            test('can create, update, and read', async () => {
                const [b2bApp] = await createTestB2BApp(support)
                const b2bAppServiceUserClient = await makeClientWithServiceUser()
                const b2bAppServiceUser = b2bAppServiceUserClient.user

                const [b2bAppAccessRightSet] = await createTestB2BAppAccessRightSet(support, b2bApp, { canReadOrganizations: true, canReadCustomValues: true, canManageCustomValues: true })
                await createTestB2BAppAccessRight(support, b2bAppServiceUser, b2bApp, b2bAppAccessRightSet)
                await createTestB2BAppContext(support, b2bApp, organization, {
                    status: CONTEXT_FINISHED_STATUS,
                })

                const [customValue, attrs] = await createTestCustomValue(b2bAppServiceUserClient, customField, organization, {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                })

                expect(customValue.data).toEqual(attrs.data)
                expect(customValue.v).toEqual(1)

                const [customValue2, attrs2] = await updateTestCustomValue(b2bAppServiceUserClient, customValue.id, {
                    data: '2',
                })

                expect(customValue2.data).toEqual(attrs2.data)
                expect(customValue2.v).toEqual(2)

                const customValueRead = await CustomValue.getAll(b2bAppServiceUserClient, { id: customValue.id })

                expect(customValueRead).toHaveLength(1)
                expect(customValueRead[0].id).toEqual(customValue.id)
                expect(customValueRead[0].v).toEqual(2)
                expect(customValueRead[0].data).toEqual(attrs2.data)
            })

            test('can not create if does not have access right or it was deleted', async () => {
                const [b2bApp] = await createTestB2BApp(support)
                const b2bAppServiceUserClient = await makeClientWithServiceUser()
                const b2bAppServiceUser = b2bAppServiceUserClient.user
                await createTestB2BAppContext(support, b2bApp, organization, {
                    status: CONTEXT_FINISHED_STATUS,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCustomValue(b2bAppServiceUserClient, customField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    })
                })

                const [b2bAppAccessRightSet] = await createTestB2BAppAccessRightSet(support, b2bApp, { canReadOrganizations: true, canReadCustomValues: true, canManageCustomValues: true })
                const [b2bAppAccessRight] = await createTestB2BAppAccessRight(support, b2bAppServiceUser, b2bApp, b2bAppAccessRightSet)
                await updateTestB2BAppAccessRight(support, b2bAppAccessRight.id, { deletedAt: 'true' })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCustomValue(b2bAppServiceUserClient, customField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    })
                })
            })

            test('can not create if miniapp is not connected', async () => {
                const [b2bApp] = await createTestB2BApp(support)
                const b2bAppServiceUserClient = await makeClientWithServiceUser()
                const b2bAppServiceUser = b2bAppServiceUserClient.user

                const [b2bAppAccessRightSet] = await createTestB2BAppAccessRightSet(support, b2bApp, { canReadOrganizations: true, canReadCustomValues: true, canManageCustomValues: true })
                await createTestB2BAppAccessRight(support, b2bAppServiceUser, b2bApp, b2bAppAccessRightSet)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCustomValue(b2bAppServiceUserClient, customField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    })
                })

                const [context] = await createTestB2BAppContext(support, b2bApp, organization, {
                    status: CONTEXT_IN_PROGRESS_STATUS,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCustomValue(b2bAppServiceUserClient, customField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    })
                })

                await updateTestB2BAppContext(support, context.id, {
                    status: CONTEXT_FINISHED_STATUS,
                    deletedAt: 'true',
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCustomValue(b2bAppServiceUserClient, customField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    })
                })
            })
        })

        describe('organization employee user',  () => {
            let organizationEmployeeClient
            let organization
            let b2bApp
            let property

            beforeAll(async () => {
                const organizationEmployeeClientObj = await makeEmployeeUserClientWithAbilities()
                organizationEmployeeClient = organizationEmployeeClientObj
                organization = organizationEmployeeClientObj.organization

                const [b2bAppObj] = await createTestB2BApp(support)
                b2bApp = b2bAppObj

                const [propertyObj] = await createTestProperty(support, organization)
                property = propertyObj
            })

            test('Can read if customField.staffCanRead is true', async () => {
                const [customField] = await createTestCustomField(support, {
                    schemaName: 'Property',
                    staffCanRead: true,
                })

                const [customValue] = await createTestCustomValue(support, customField, organization, {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                })

                const customValuesAsOrgEmployee1 = await CustomValue.getAll(organizationEmployeeClient, { id: customValue.id })
                expect(customValuesAsOrgEmployee1).toHaveLength(1)
                expect(customValuesAsOrgEmployee1[0].id).toEqual(customValue.id)

                await updateTestCustomField(support, customField.id, { staffCanRead: false })

                const customValuesAsOrgEmployee2 = await CustomValue.getAll(organizationEmployeeClient, { id: customValue.id })
                expect(customValuesAsOrgEmployee2).toHaveLength(0)
            })

            test('Can not create or update customValues', async () => {
                const [customField] = await createTestCustomField(support, {
                    schemaName: 'Property',
                    staffCanRead: true,
                })

                const validPayload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCustomValue(organizationEmployeeClient, customField, organization, validPayload)
                })

                const [customValue] = await createTestCustomValue(support, customField, organization, validPayload)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestCustomValue(organizationEmployeeClient, customValue.id, { deletedAt: 'true' })
                })
            })
        })
    })

    describe('Validation tests', () => {
        describe('data', () => {
            const CUSTOM_FIELDS = {}
            let commonPayload = {}

            let property
            let organization

            beforeAll(async () => {
                const [stringCustomFieldObj] = await createTestCustomField(support, {
                    schemaName: 'Property',
                    type: 'String',
                })
                CUSTOM_FIELDS.string = stringCustomFieldObj

                const [stringWithValidationsCustomFieldObj] = await createTestCustomField(support, {
                    schemaName: 'Property',
                    type: 'String',
                    validationRules: { minLength: 2, maxLength: 5, pattern: '^[a-zA-Z]+$' },
                })
                CUSTOM_FIELDS.stringWithValidations = stringWithValidationsCustomFieldObj

                const [jsonCustomFieldObj] = await createTestCustomField(support, {
                    schemaName: 'Property',
                    type: 'Json',
                })
                CUSTOM_FIELDS.json = jsonCustomFieldObj

                const [jsonCustomFieldWithValidationsObj] = await createTestCustomField(support, {
                    schemaName: 'Property',
                    type: 'Json',
                    validationRules: {},
                })
                CUSTOM_FIELDS.jsonWithValidations = jsonCustomFieldWithValidationsObj

                const [orgObj] = await createTestOrganization(admin)
                organization = orgObj

                const [propertyObj] = await createTestProperty(admin, organization)
                property = propertyObj

                commonPayload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }
            })

            describe('failing cases:', () => {
                const PAYLOADS = {
                    // type valdations
                    'string: can\'t convert number to string': { customFieldType: 'string', data: 24 },

                    // validationRules validations
                    'string: too big': { customFieldType: 'stringWithValidations', data: 'abcdefg' },
                    'string: does not follow regexp': { customFieldType: 'stringWithValidations', data: '12345' },
                    'string: too small': { customFieldType: 'stringWithValidations', data: 'a' },

                    'json: non existing property': { customFieldType: 'jsonWithValidations', data: {} },
                    'json: bad inner property type': { customFieldType: 'jsonWithValidations', data: {} },
                    'json: not all required fields are specified': { customFieldType: 'jsonWithValidations', data: {} },
                }

                test.each(Object.keys(PAYLOADS))('bad value: %p', async (key) => {
                    const customFieldType = PAYLOADS[key].customFieldType
                    const customField = CUSTOM_FIELDS[customFieldType]

                    const extraAttrs = { ...commonPayload, data: PAYLOADS[key].data }

                    await expectToThrowGQLError(async () => {
                        await createTestCustomValue(support, customField, organization, extraAttrs)
                    }, { code: ERRORS.INVALID_DATA.code, type: ERRORS.INVALID_DATA.type, message: ERRORS.INVALID_DATA.message })
                })
            })
        })

        describe('objectId', () => {
            let propertyCustomField
            let organizationCustomField

            let organization // all objs will be linked to this organization
            let fakeOrganization // this organization has no objects

            let b2bApp

            beforeAll(async () => {
                const [organizationObj] = await createTestOrganization(admin)
                organization = organizationObj

                const [b2bAppObj] = await createTestB2BApp(admin)
                b2bApp = b2bAppObj

                const [fakeOrganizationObj] = await createTestOrganization(admin)
                fakeOrganization = fakeOrganizationObj

                const [propertyCustomFieldObj] = await createTestCustomField(support, {
                    schemaName: 'Property',
                    type: 'String',
                })
                propertyCustomField = propertyCustomFieldObj

                const [organizationCustomFieldObj] = await createTestCustomField(support, {
                    schemaName: 'Organization',
                    type: 'String',
                })
                organizationCustomField = organizationCustomFieldObj
            })

            test('fails if provided objectId is deleted', async () => {
                const [property] = await createTestProperty(support, organization)

                await updateTestProperty(support, property.id, { deletedAt: 'true' })

                await expectToThrowGQLError(async () => {
                    await createTestCustomValue(support, propertyCustomField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    })
                }, { code: ERRORS.INVALID_OBJECT_ID.code, type: ERRORS.INVALID_OBJECT_ID.type })
            })

            test('fails if provided objectId is not uuid', async () => {
                const [property] = await createTestProperty(support, organization)

                await updateTestProperty(support, property.id, { deletedAt: 'true' })

                await expectToThrowGQLError(async () => {
                    await createTestCustomValue(support, propertyCustomField, organization, {
                        objectId: 'yoink',
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    })
                }, { code: ERRORS.INVALID_OBJECT_ID.code, type: ERRORS.INVALID_OBJECT_ID.type })
            })

            test('property: fails if provided objectId is not in this organization', async () => {
                const [property] = await createTestProperty(support, fakeOrganization)

                await updateTestProperty(support, property.id, { deletedAt: 'true' })

                await expectToThrowGQLError(async () => {
                    await createTestCustomValue(support, propertyCustomField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    })
                }, { code: ERRORS.INVALID_OBJECT_ID.code, type: ERRORS.INVALID_OBJECT_ID.type })
            })

            test('organization: fails if provided objectId is not in this organization', async () => {

                const [property] = await createTestProperty(support, organization)
                await updateTestProperty(support, property.id, { deletedAt: 'true' })

                await expectToThrowGQLError(async () => {
                    await createTestCustomValue(support, organizationCustomField, organization, {
                        objectId: fakeOrganization.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    })
                }, { code: ERRORS.INVALID_OBJECT_ID.code, type: ERRORS.INVALID_OBJECT_ID.type })
            })
        })

        describe('source', () => {
            let propertyCustomField
            let property
            let organization // all objs will be linked to this organization

            let b2bApp
            let b2bAppServiceUser
            let b2bAppServiceUserClient

            beforeAll(async () => {
                const [organizationObj] = await createTestOrganization(admin)
                organization = organizationObj

                const [propertyCustomFieldObj] = await createTestCustomField(support, {
                    schemaName: 'Property',
                    type: 'String',
                    isUniquePerObject: false,
                })
                propertyCustomField = propertyCustomFieldObj

                const [propertyObj] = await createTestProperty(support, organizationObj)
                property = propertyObj

                const b2bApp1serviceUserClient = await makeClientWithServiceUser()
                const b2bApp1serviceUser = b2bApp1serviceUserClient.user
                b2bAppServiceUser = b2bApp1serviceUser
                b2bAppServiceUserClient = b2bApp1serviceUserClient

                const [b2bApp1] = await createTestB2BApp(support)
                b2bApp = b2bApp1

                const [b2bApp1accessRightSet] = await createTestB2BAppAccessRightSet(support, b2bApp1, { canReadProperties: true, canReadOrganizations: true, canReadCustomValues: true, canManageCustomValues: true })
                const [b2BAppAccessRight] = await createTestB2BAppAccessRight(support, b2bApp1serviceUser, b2bApp1, b2bApp1accessRightSet)

                const b2bAppContext1 = await createTestB2BAppContext(support, b2bApp1, organization, {
                    status: CONTEXT_FINISHED_STATUS,
                })
            })

            test('B2BApp: fails if source id is not id', async () => {
                await expectToThrowGQLError(async () => {
                    await createTestCustomValue(support, propertyCustomField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: 'yoink',
                    })
                }, { code: ERRORS.INVALID_SOURCE.code, type: ERRORS.INVALID_SOURCE.type })
            })

            test('B2BApp: fails if source id is not B2BApp', async () => {
                await expectToThrowGQLError(async () => {
                    await createTestCustomValue(support, propertyCustomField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: property.id,
                    })
                }, { code: ERRORS.INVALID_SOURCE.code, type: ERRORS.INVALID_SOURCE.type })
            })

            test('B2BApp: fails if current service user is not related to provided sourceId', async () => {

                const b2bApp2serviceUserClient = await makeClientWithServiceUser()
                const b2bApp2serviceUser = b2bApp2serviceUserClient.user
                const [b2bApp2] = await createTestB2BApp(support)

                const [b2bApp2accessRightSet] = await createTestB2BAppAccessRightSet(support, b2bApp2, { canReadProperties: true, canReadOrganizations: true, canReadCustomValues: true, canManageCustomValues: true })
                const [b2BApp2AccessRight] = await createTestB2BAppAccessRight(support, b2bApp2serviceUser, b2bApp2, b2bApp2accessRightSet)

                const b2bAppContext2 = await createTestB2BAppContext(support, b2bApp2, organization, {
                    status: CONTEXT_FINISHED_STATUS,
                })

                await expectToThrowGQLError(async () => {
                    await createTestCustomValue(b2bApp2serviceUserClient, propertyCustomField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp.id,
                    })
                }, { code: ERRORS.INVALID_SOURCE.code, type: ERRORS.INVALID_SOURCE.type })

                await expectToThrowGQLError(async () => {
                    await createTestCustomValue(b2bAppServiceUserClient, propertyCustomField, organization, {
                        objectId: property.id,
                        sourceType: B2B_APP_SOURCE_TYPE,
                        sourceId: b2bApp2.id,
                    })
                }, { code: ERRORS.INVALID_SOURCE.code, type: ERRORS.INVALID_SOURCE.type })
            })
        })

        describe('uniqKey', () => {
            let customField
            let property
            let organization

            let b2bApp
            let b2bAppServiceUser
            let b2bAppServiceUserClient

            beforeAll(async () => {
                const [organizationObj] = await createTestOrganization(admin)
                organization = organizationObj

                const [customFieldObj] = await createTestCustomField(support, {
                    schemaName: 'Property',
                    type: 'String',
                    isUniquePerObject: false,
                })
                customField = customFieldObj

                const [propertyObj] = await createTestProperty(support, organizationObj)
                property = propertyObj

                const b2bApp1serviceUserClient = await makeClientWithServiceUser()
                const b2bApp1serviceUser = b2bApp1serviceUserClient.user
                b2bAppServiceUser = b2bApp1serviceUser
                b2bAppServiceUserClient = b2bApp1serviceUserClient

                const [b2bApp1] = await createTestB2BApp(support)
                b2bApp = b2bApp1

                const [b2bApp1accessRightSet] = await createTestB2BAppAccessRightSet(support, b2bApp1, { canReadProperties: true, canReadOrganizations: true, canReadCustomValues: true, canManageCustomValues: true })
                await createTestB2BAppAccessRight(support, b2bApp1serviceUser, b2bApp1, b2bApp1accessRightSet)
                await createTestB2BAppContext(support, b2bApp1, organization, {
                    status: CONTEXT_FINISHED_STATUS,
                })
            })

            test('Can\'t create two customValues with same uniqKey', async () => {
                const uniqKey = faker.random.alphaNumeric(64)
                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }

                await createTestCustomValue(b2bAppServiceUserClient, customField, organization, {
                    ...payload,
                    uniqKey,
                })

                await expectToThrowGQLError(async () => {
                    await createTestCustomValue(b2bAppServiceUserClient, customField, organization, {
                        ...payload,
                        uniqKey,
                    })
                }, { code: ERRORS.ALREADY_EXISTS_UNIQ_KEY.code, type: ERRORS.ALREADY_EXISTS_UNIQ_KEY.type })
            })

            test('Can create two customValues if uniqKey is not specified', async () => {
                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }

                await createTestCustomValue(b2bAppServiceUserClient, customField, organization, {
                    ...payload,
                    uniqKey: null,
                })

                await createTestCustomValue(b2bAppServiceUserClient, customField, organization, {
                    ...payload,
                    uniqKey: null,
                })
            })
        })

        describe('uniqKeyObjectId', () => {
            let property
            let organization
            let b2bApp

            beforeAll(async () => {
                const [organizationObj] = await createTestOrganization(admin)
                organization = organizationObj

                const [propertyObj] = await createTestProperty(support, organizationObj)
                property = propertyObj

                const [b2bAppObj] = await createTestB2BApp(support)
                b2bApp = b2bAppObj
            })

            test('Can\'t create two customValues with same objectId, if CustomField.isUniquePerObject set to true', async () => {
                const [customField] = await createTestCustomField(support, { isUniquePerObject: true })

                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }

                await createTestCustomValue(support, customField, organization, {
                    ...payload,
                })

                await expectToThrowGQLError(async () => {
                    await createTestCustomValue(support, customField, organization, {
                        ...payload,
                    })
                }, { code: ERRORS.ALREADY_EXISTS_OBJECT_ID.code, message: ERRORS.ALREADY_EXISTS_OBJECT_ID.message, type: ERRORS.ALREADY_EXISTS_OBJECT_ID.type })
            })

            test('Can create two customValues with same objectId, if CustomField.isUniquePerObject set to false', async () => {
                const [customField] = await createTestCustomField(support, { isUniquePerObject: true })

                const payload = {
                    objectId: property.id,
                    sourceType: B2B_APP_SOURCE_TYPE,
                    sourceId: b2bApp.id,
                }

                await createTestCustomValue(support, customField, organization, {
                    ...payload,
                })

                await createTestCustomValue(support, customField, organization, {
                    ...payload,
                })
            })
        })
    })

    describe('Real life cases', () => {
        test('Custom field for b2b integrations', async () => {

            // 1. Support creates custom field with specific validations for b2b integrations to use
            const [customField] = await createTestCustomField(support, {
                schemaName: 'Property',
                name: 'Special building id',
                type: 'String',
                validationRules: {
                    minLength: 2,
                    maxLength: 5,
                },
                isUniquePerObject: false,
            })

            // 2. Organization is created, B2B integration is set up
            const orgEmployeeClient = await makeEmployeeUserClientWithAbilities({
                canManageB2BApps: true,
                canManageRoles: true,
            })

            const organization = orgEmployeeClient.organization
            const [property1] = await createTestProperty(support, organization)
            const [property2] = await createTestProperty(support, organization)

            const b2bApp1serviceUserClient = await makeClientWithServiceUser()
            const b2bApp1serviceUser = b2bApp1serviceUserClient.user

            const [b2bApp1] = await createTestB2BApp(support)

            const [b2bApp1accessRightSet] = await createTestB2BAppAccessRightSet(support, b2bApp1, { canReadOrganizations: true, canReadCustomValues: true, canManageCustomValues: true })
            const [b2BAppAccessRight] = await createTestB2BAppAccessRight(support, b2bApp1serviceUser, b2bApp1, b2bApp1accessRightSet)

            const b2bAppContext1 = await createTestB2BAppContext(support, b2bApp1, organization, {
                status: CONTEXT_FINISHED_STATUS,
            })

            // 3. B2B Integration service user creates custom values to custom fields created on step 1

            await createTestCustomValue(b2bApp1serviceUserClient, customField, organization, {
                objectId: property1.id,
                sourceType: B2B_APP_SOURCE_TYPE,
                sourceId: b2bApp1.id,
                data: '123',
                addressKey: property1.addressKey,
                unitName: null,
                unitType: null,
            })

            await createTestCustomValue(b2bApp1serviceUserClient, customField, organization, {
                objectId: property2.id,
                sourceType: B2B_APP_SOURCE_TYPE,
                sourceId: b2bApp1.id,
                data: '12',
                addressKey: property2.addressKey,
                unitName: null,
                unitType: null,
                uniqKey: 'test-uniq-key-0',
            })

            await createTestCustomValue(b2bApp1serviceUserClient, customField, organization, {
                objectId: property1.id,
                sourceType: B2B_APP_SOURCE_TYPE,
                sourceId: b2bApp1.id,
                data: '123',
                addressKey: property1.addressKey,
                unitName: '1',
                unitType: FLAT_UNIT_TYPE,
                uniqKey: 'test-uniq-key-1',
            })

            await createTestCustomValue(b2bApp1serviceUserClient, customField, organization, {
                objectId: property1.id,
                sourceType: B2B_APP_SOURCE_TYPE,
                sourceId: b2bApp1.id,
                data: '1234',
                addressKey: property1.addressKey,
                unitName: '1',
                unitType: APARTMENT_UNIT_TYPE,
            })

            await createTestCustomValue(b2bApp1serviceUserClient, customField, organization, {
                objectId: property2.id,
                sourceType: B2B_APP_SOURCE_TYPE,
                sourceId: b2bApp1.id,
                data: 'abc',
                addressKey: property2.addressKey,
                unitName: '1',
                unitType: FLAT_UNIT_TYPE,
            })

            // 4. B2B Integration read and filter on custom values

            const b2bApp1ServiceUserCustomValues = await CustomValue.getAll(b2bApp1serviceUserClient, {})
            expect(b2bApp1ServiceUserCustomValues).toHaveLength(5)

            // Filter by uniq key
            const b2bApp1ServiceUserCustomValuesFilteredByUniqKey = await CustomValue.getAll(b2bApp1serviceUserClient, {
                uniqKey: 'test-uniq-key-0',
            })
            expect(b2bApp1ServiceUserCustomValuesFilteredByUniqKey).toHaveLength(1)
            expect(b2bApp1ServiceUserCustomValuesFilteredByUniqKey[0].data).toEqual('12')


            // 5. Staff users read and filter on custom values

            const staffUserCustomValues = await CustomValue.getAll(orgEmployeeClient, {})
            expect(staffUserCustomValues).toHaveLength(5)
        })
    })
})
