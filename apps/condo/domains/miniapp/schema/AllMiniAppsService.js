/**
 * Generated by `createservice miniapp.AllOrganizationAppsService --type queries`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/miniapp/access/AllMiniAppsService')
const { ACQUIRING_APP_TYPE, BILLING_APP_TYPE, APP_TYPES, B2B_APP_TYPE } = require('@condo/domains/miniapp/constants')
const { find } = require('@core/keystone/schema')
const { APPS_FILE_ADAPTER } = require('@condo/domains/miniapp/schema/fields/integration')

const AllMiniAppsService = new GQLCustomSchema('AllMiniAppsService', {
    types: [
        {
            access: true,
            type: `enum AppType { ${APP_TYPES.join(' ')} }`,
        },
        {
            access: true,
            type: 'input AllMiniAppsInput { dv: Int!, sender: SenderFieldInput!, organization: OrganizationWhereUniqueInput! }',
        },
        {
            access: true,
            type: 'type MiniAppOutput { id: ID!, type: AppType!, connected: Boolean!, name: String!, shortDescription: String!, category: String, logo: String }',
        },
    ],
    
    queries: [
        {
            access: access.canExecuteAllMiniApps,
            schema: 'allMiniApps (data: AllMiniAppsInput!): [MiniAppOutput!]',
            resolver: async (parent, args) => {
                const { data: { organization } } = args
                const services = []

                const billingIntegrations = await find('BillingIntegration', {
                    isHidden: false,
                    deletedAt: null,
                })
                const billingContexts = await find('BillingIntegrationOrganizationContext', {
                    organization,
                    deletedAt: null,
                })
                const connectedBillingIntegrations = billingContexts.map(context => context.integration)
                for (const billing of billingIntegrations) {
                    const logoUrl = billing.logo ? APPS_FILE_ADAPTER.publicUrl({ filename: billing.logo.filename }) : null
                    services.push({
                        id: billing.id,
                        type: BILLING_APP_TYPE,
                        name: billing.name,
                        shortDescription: billing.shortDescription,
                        connected: connectedBillingIntegrations.includes(billing.id),
                        category: BILLING_APP_TYPE,
                        logo: logoUrl,
                    })
                }

                const acquiringIntegrations = await find('AcquiringIntegration', {
                    isHidden: false,
                    deletedAt: null,
                })
                const acquiringContexts = await find('AcquiringIntegrationContext', {
                    organization,
                    deletedAt: null,
                })
                const connectedAcquiringIntegrations = acquiringContexts.map(context => context.integration)
                for (const acquiring of acquiringIntegrations) {
                    const logoUrl = acquiring.logo ? APPS_FILE_ADAPTER.publicUrl({ filename: acquiring.logo.filename }) : null
                    services.push({
                        id: acquiring.id,
                        type: ACQUIRING_APP_TYPE,
                        name: acquiring.name,
                        shortDescription: acquiring.shortDescription,
                        connected: connectedAcquiringIntegrations.includes(acquiring.id),
                        category: ACQUIRING_APP_TYPE,
                        logo: logoUrl,
                    })
                }

                const B2BApps = await find('B2BApp', {
                    isHidden: false,
                    isGlobal: false,
                    deletedAt: null,
                })
                const B2BAppContexts = await find('B2BAppContext', {
                    organization,
                    deletedAt: null,
                })
                const connectedB2BApps = B2BAppContexts.map(context => context.app)
                for (const app of B2BApps) {
                    const logoUrl = app.logo ? APPS_FILE_ADAPTER.publicUrl({ filename: app.logo.filename }) : null
                    services.push({
                        id: app.id,
                        type: B2B_APP_TYPE,
                        name: app.name,
                        shortDescription: app.shortDescription,
                        connected: connectedB2BApps.includes(app.id),
                        category: app.category,
                        logo: logoUrl,
                    })
                }

                return services
            },
        },
    ],
    
})

module.exports = {
    AllMiniAppsService,
}
