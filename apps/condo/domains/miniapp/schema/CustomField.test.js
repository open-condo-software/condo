/**
 * Generated by `createschema miniapp.CustomField 'locale:Text; name:Text; priority:Integer; schemaName:Text; type:Text; validationRules:Json; isVisible:Checkbox;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, expectValuesOfCommonFields } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { CustomField, createTestCustomField, updateTestCustomField } = require('@condo/domains/miniapp/utils/testSchema')
const {
    makeEmployeeUserClientWithAbilities,
    createTestOrganizationEmployeeRole,
    createTestOrganizationEmployee, createTestOrganization,
} = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithServiceUser } = require('@condo/domains/user/utils/testSchema')

const { CONTEXT_FINISHED_STATUS } = require('../constants')
const { createTestB2BApp, createTestB2BAppContext, createTestB2BAppAccessRight, createTestCustomValue} = require('../utils/testSchema')


describe('CustomField', () => {
    
    let admin
    let support
    let manager
    let employee
    let anotherManager
    let serviceUser
    let anonymous
    let connectedApp
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        manager = await makeEmployeeUserClientWithAbilities({
            canManageB2BApps: true,
            canManageRoles: true,
        })

        const [anotherRole] = await createTestOrganizationEmployeeRole(admin, manager.organization, {
            canManageRoles: false,
        })
        employee = await makeClientWithNewRegisteredAndLoggedInUser()
        const [emp] = await createTestOrganizationEmployee(admin, manager.organization, employee.user, anotherRole)
        employee.employee = emp
        employee.organization = manager.organization
        employee.role = anotherRole

        anotherManager = await makeEmployeeUserClientWithAbilities({
            canManageB2BApps: true,
            canManageRoles: true,
        });


        [connectedApp] = await createTestB2BApp(support, { contextDefaultStatus: CONTEXT_FINISHED_STATUS })
        await createTestB2BAppContext(manager, connectedApp, manager.organization)
        await createTestB2BAppContext(anotherManager, connectedApp, anotherManager.organization)

        serviceUser = await makeClientWithServiceUser()
        await createTestB2BAppAccessRight(support, serviceUser.user, connectedApp)

        anonymous = await makeClient()
    })
    
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestCustomField(admin)

                expectValuesOfCommonFields(obj, attrs, admin)
                expect(obj.type).toEqual(attrs.type)
                expect(obj.schemaName).toEqual(attrs.schemaName)
                expect(obj.name).toEqual(attrs.name)
                expect(obj.priority).toBeDefined()
                expect(obj.locale).toBeDefined()
                expect(obj.validationRules).toBeDefined()
                expect(obj.isVisible).toBeDefined()
            })

            test('support can', async () => {
                const [obj, attrs] = await createTestCustomField(support)

                expectValuesOfCommonFields(obj, attrs, support)
            })

            test('user can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCustomField(manager)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestCustomField(anonymous)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [objCreated] = await createTestCustomField(support)

                const [obj, attrs] = await updateTestCustomField(admin, objCreated.id, { name: faker.random.alphaNumeric(8) })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.name).toEqual(attrs.name)
            })

            test('support can', async () => {
                const [objCreated] = await createTestCustomField(support)

                const [obj, attrs] = await updateTestCustomField(support, objCreated.id, { name: faker.random.alphaNumeric(8) })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: support.user.id }))
                expect(obj.name).toEqual(attrs.name)
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestCustomField(support)
                
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestCustomField(manager, objCreated.id, { name: faker.random.alphaNumeric(8) })
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestCustomField(admin)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestCustomField(anonymous, objCreated.id, { name: faker.random.alphaNumeric(8) })
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [objCreated] = await createTestCustomField(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CustomField.delete(admin, objCreated.id)  // TODO(codegen): write 'admin: delete CustomField' test
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [obj] = await createTestCustomField(admin)

                const objs = await CustomField.getAll(admin, { id: obj.id }, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0].id).toEqual(obj.id)
            })

            test('user can', async () => {
                const [obj] = await createTestCustomField(admin)

                const objs = await CustomField.getAll(manager, { id: obj.id }, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0].id).toEqual(obj.id)
            })

            test('anonymous can\'t', async () => {
                await createTestCustomField(admin)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await CustomField.getAll(anonymous, {}, { sortBy: ['updatedAt_DESC'] })  // TODO(codegen): write 'anonymous: read CustomField' test
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Custom validation should be valid json-schema', async () => {
            const testCustomValidation = {}

            const [obj, attrs] = await createTestCustomField(support)

            expectValuesOfCommonFields(obj, attrs, support)
        })

        test('Custom validations can be specified', async () => {
            const testCustomValidation = {}

            const [customField, customFieldAttrs] = await createTestCustomField(support)

            const [organization] = await createTestOrganization(support)

            const payload = {
                objectId: 'test-id',
                sourceType: 'B2BApp',
                sourceId: 'test-id',
            }

            const [customValue, customValueAttrs] = await createTestCustomValue(support, customField, organization, payload)

            const correctPayloads = []

            const incorrectPayloads = []
        })
    })
})
