/**
 * Generated by `createschema miniapp.CustomField 'locale:Text; name:Text; priority:Integer; schemaName:Text; type:Text; validationRules:Json; isVisible:Checkbox;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, expectValuesOfCommonFields, expectToThrowGQLError,
    expectToThrowGraphQLRequestError, expectToThrowValidationFailureError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { CustomField, createTestCustomField, updateTestCustomField } = require('@condo/domains/miniapp/utils/testSchema')
const {
    makeEmployeeUserClientWithAbilities,
    createTestOrganizationEmployeeRole,
    createTestOrganizationEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithServiceUser } = require('@condo/domains/user/utils/testSchema')

const { ERRORS } = require('./CustomField')

const { CONTEXT_FINISHED_STATUS } = require('../constants')
const { createTestB2BApp, createTestB2BAppContext, createTestB2BAppAccessRight } = require('../utils/testSchema')
const {updateTestTicketExportTask} = require("../../ticket/utils/testSchema");
const {CANCELLED} = require("../../common/constants/export");


describe('CustomField', () => {
    
    let admin
    let support
    let manager
    let employee
    let anotherManager
    let serviceUser
    let anonymous
    let connectedApp

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        manager = await makeEmployeeUserClientWithAbilities({
            canManageB2BApps: true,
            canManageRoles: true,
        })

        const [anotherRole] = await createTestOrganizationEmployeeRole(admin, manager.organization, {
            canManageRoles: false,
        })
        employee = await makeClientWithNewRegisteredAndLoggedInUser()
        const [emp] = await createTestOrganizationEmployee(admin, manager.organization, employee.user, anotherRole)
        employee.employee = emp
        employee.organization = manager.organization
        employee.role = anotherRole

        anotherManager = await makeEmployeeUserClientWithAbilities({
            canManageB2BApps: true,
            canManageRoles: true,
        });

        [connectedApp] = await createTestB2BApp(support, { contextDefaultStatus: CONTEXT_FINISHED_STATUS })
        await createTestB2BAppContext(manager, connectedApp, manager.organization)
        await createTestB2BAppContext(anotherManager, connectedApp, anotherManager.organization)

        serviceUser = await makeClientWithServiceUser()
        await createTestB2BAppAccessRight(support, serviceUser.user, connectedApp)

        anonymous = await makeClient()
    })
    
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestCustomField(admin)

                expectValuesOfCommonFields(obj, attrs, admin)
                expect(obj.type).toEqual(attrs.type)
                expect(obj.schemaName).toEqual(attrs.schemaName)
                expect(obj.name).toEqual(attrs.name)
                expect(obj.priority).toBeDefined()
                expect(obj.locale).toBeDefined()
                expect(obj.validationRules).toBeDefined()
                expect(obj.isVisible).toBeDefined()
            })

            test('support can', async () => {
                const [obj, attrs] = await createTestCustomField(support)

                expectValuesOfCommonFields(obj, attrs, support)
                expect(obj.type).toEqual(attrs.type)
                expect(obj.schemaName).toEqual(attrs.schemaName)
                expect(obj.name).toEqual(attrs.name)
                expect(obj.priority).toBeDefined()
                expect(obj.locale).toBeDefined()
                expect(obj.validationRules).toBeDefined()
                expect(obj.isVisible).toBeDefined()
            })

            test('user can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestCustomField(manager)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestCustomField(anonymous)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [objCreated] = await createTestCustomField(support)

                const [obj, attrs] = await updateTestCustomField(admin, objCreated.id, { name: faker.random.alphaNumeric(8) })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.name).toEqual(attrs.name)
            })

            test('support can', async () => {
                const [objCreated] = await createTestCustomField(support)

                const [obj, attrs] = await updateTestCustomField(support, objCreated.id, { name: faker.random.alphaNumeric(8) })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: support.user.id }))
                expect(obj.name).toEqual(attrs.name)
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestCustomField(support)
                
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestCustomField(manager, objCreated.id, { name: faker.random.alphaNumeric(8) })
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestCustomField(admin)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestCustomField(anonymous, objCreated.id, { name: faker.random.alphaNumeric(8) })
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [objCreated] = await createTestCustomField(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await CustomField.delete(admin, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [obj] = await createTestCustomField(admin)

                const objs = await CustomField.getAll(admin, { id: obj.id }, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0].id).toEqual(obj.id)
            })

            test('user can', async () => {
                const [obj] = await createTestCustomField(admin)

                const objs = await CustomField.getAll(manager, { id: obj.id }, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0].id).toEqual(obj.id)
            })

            test('anonymous can\'t', async () => {
                await createTestCustomField(admin)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await CustomField.getAll(anonymous, {}, { sortBy: ['updatedAt_DESC'] })  // TODO(codegen): write 'anonymous: read CustomField' test
                })
            })
        })
    })

    describe('validationRules field validation:', () => {

        const VALID_JSON_SCHEMAS = {
            'string': {
                type: 'string',
                minLength: 3,
                maxLength: 15,
                pattern: '^[a-zA-Z]+$',
            },
            'object': {
                'type': 'object',
                'properties': {
                    'name': {
                        'type': 'string',
                    },
                },
                'required': ['name'],
                'additionalProperties': false,
            },
            'number': {
                'type': 'number',
                'minimum': 10,
                'maximum': 100,
            },
        }

        const INVALID_JSON_SCHEMAS = {
            'additional-props-should-be-boolean': {
                'type': 'object',
                'properties': {
                    'name': {
                        'type': 'string',
                    },
                },
                'required': ['name'],
                'additionalProperties': 1234,
            },
            'invalid-number-schema': {
                'type': 'number',
                'minimum': 'hello world',
                'maximum': 100,
            },
        }

        test.each(Object.keys(VALID_JSON_SCHEMAS))('valid %p schema', async (key) => {
            const validationRules = VALID_JSON_SCHEMAS[key]
            const [obj, attrs] = await createTestCustomField(support, { validationRules })
            expectValuesOfCommonFields(obj, attrs, support)
        })

        test.each(Object.keys(INVALID_JSON_SCHEMAS))('invalid schema â€“ %p', async (key) => {
            const validationRules = INVALID_JSON_SCHEMAS[key]

            await expectToThrowValidationFailureError(
                async () => await createTestCustomField(support, { validationRules }),
                'Bad validation rules, should be valid json-schema',
            )
        })
    })

    describe('Non updatable fields', () => {

        let customField

        beforeAll(async () => {
            const [customFieldObj] = await createTestCustomField(admin)
            customField = customFieldObj
        })

        const NON_UPDATABLE_FIELDS = [
            'isUniquePerObject',
            'type',
            'schema',
            'validationRules',
        ]

        test.each(NON_UPDATABLE_FIELDS)( 'field %p can not be updated', async (key) => {
            await expectToThrowGraphQLRequestError(async () => {
                await updateTestCustomField(admin, customField.id, { [key]: true })
            }, `Field "${key}" is not defined`)

            await expectToThrowGraphQLRequestError(async () => {
                await updateTestCustomField(support, customField.id, { [key]: true })
            }, `Field "${key}" is not defined`)
        })
    })
})
