/**
 * Generated by `createschema miniapp.B2CAppBuild 'app:Relationship:B2CApp:PROTECT; version:Text'`
 */

const dayjs = require('dayjs')
const get = require('lodash/get')
const { Text, Relationship, File } = require('@keystonejs/fields')
const { NON_ZIP_FILE_ERROR, NO_APP_ERROR, RESTRICT_BUILD_APP_CHANGE_ERROR } = require('@condo/domains/miniapp/constants')
const { GQLListSchema, getById, getByCondition } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')
const access = require('@condo/domains/miniapp/access/B2CAppBuild')
const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { B2CApp } = require('@condo/domains/miniapp/utils/serverSchema')

const B2C_APP_BUILD_FILE_ADAPTER = new FileAdapter('B2CAppBuilds')


const B2CAppBuild = new GQLListSchema('B2CAppBuild', {
    schemaDoc: 'Cordova build of B2C Application',
    labelResolver: async (item) => {
        const app = await getById('B2CApp', item.app)
        const appName = get(app, 'name', 'deleted')
        const appDeveloper = get(app, 'developer', 'deleted')
        return `${appDeveloper}-${appName}-${item.version}`
    },
    fields: {
        app: {
            schemaDoc: 'Link to B2C application. Exists and required for any non-deleted builds. Setting this to null automatically disconnect build from app, which will cause build deletion',
            type: Relationship,
            ref: 'B2CApp.builds',
            isRequired: false,
            kmigratorOptions: { null: true, on_delete: 'models.PROTECT' },
            access: {
                update: access.canUpdateAppLink,
            },
            hooks: {
                validateInput: async ({ operation, resolvedData, addFieldValidationError }) => {
                    if (operation === 'update') {
                        if (resolvedData.hasOwnProperty('app') && resolvedData.app !== null) {
                            return addFieldValidationError(RESTRICT_BUILD_APP_CHANGE_ERROR)
                        }
                    }
                },
            },
        },
        version: {
            schemaDoc: 'Version of build which used to control builds inside B2CApp model',
            type: Text,
            isRequired: true,
        },
        data: {
            schemaDoc: 'B2C app cordova build compressed to single .zip file',
            type: File,
            isRequired: true,
            adapter: B2C_APP_BUILD_FILE_ADAPTER,
            hooks: {
                validateInput: ({ resolvedData, fieldPath, addFieldValidationError }) => {
                    const mimetype = get(resolvedData, [fieldPath, 'mimetype'])
                    if (mimetype !== 'application/zip') {
                        addFieldValidationError(`${NON_ZIP_FILE_ERROR}, but got: ${mimetype}`)
                    }
                },
            },
        },
    },
    hooks: {
        // TODO(DOMA-3223): Move data to long-term HDD on cloud services on soft-delete
        resolveInput: async ({ resolvedData }) => {
            if (resolvedData && resolvedData.hasOwnProperty('app') && resolvedData['app'] === null) {
                resolvedData['deletedAt'] = dayjs().toISOString()
            }
            return resolvedData
        },
        validateInput: async ({ operation, addValidationError, resolvedData }) => {
            if (operation === 'create' && !resolvedData['app']) {
                return addValidationError(NO_APP_ERROR)
            }
        },
        afterChange: async ({ updatedItem, operation, existingItem, context }) => {
            if (operation === 'update' && (!updatedItem.app || updatedItem.deletedAt)) {
                const appToReset = await getByCondition('B2CApp', {
                    currentBuild: { id: existingItem.id },
                    deletedAt: null,
                })
                if (appToReset) {
                    await B2CApp.update(context, appToReset.id, {
                        currentBuild: null,
                        dv: 1,
                        sender: { dv: 1, fingerprint: 'build-ref-delete' },
                    })
                }
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadB2CAppBuilds,
        create: access.canManageB2CAppBuilds,
        update: access.canManageB2CAppBuilds,
        delete: false,
        auth: true,
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['version', 'app'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'b2c_app_build_unique_version',
            },
        ],
    },
})

module.exports = {
    B2CAppBuild,
}
