/**
 * Generated by `createservice miniapp.SendB2BAppPushMessageService '--type=mutations'`
 */

const { faker } = require('@faker-js/faker')
const { get } = require('lodash')
const omit = require('lodash/omit')

const conf = require('@open-condo/config')
const { makeLoggedInAdminClient, makeClient, UUID_RE, expectToThrowAccessDeniedErrorToResult, expectToThrowAuthenticationErrorToResult, waitFor, expectToThrowGQLErrorToResult } = require('@open-condo/keystone/test.utils')

const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/miniapp/constants')
const { sendB2BAppPushMessageByTestClient, createTestB2BApp, createTestB2BAppContext, createTestB2BAppAccessRightSet, createTestB2BAppAccessRight } = require('@condo/domains/miniapp/utils/testSchema')
const { MESSAGE_SENT_STATUS, B2B_APP_MESSAGE_PUSH_TYPE, DEVICE_PLATFORM_ANDROID, APP_MASTER_ID_ANDROID } = require('@condo/domains/notification/constants/constants')
const { Message, syncRemoteClientWithPushTokenByTestClient } = require('@condo/domains/notification/utils/testSchema')
const { DEFAULT_ROLES } = require('@condo/domains/organization/constants/common')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithServiceUser, makeClientWithSupportUser, makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

const { ERRORS } = require('./SendB2BAppPushMessageService')


describe('SendB2BAppPushMessageService', () => {
    let serviceUser,
        admin,
        support,
        staffClient,
        anonymous,
        organization,
        b2bApp

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
        staffClient = await makeClientWithNewRegisteredAndLoggedInUser()
        serviceUser = await makeClientWithServiceUser()

        const [testOrganization] = await createTestOrganization(admin)
        const [role] = await createTestOrganizationEmployeeRole(admin, testOrganization, omit(DEFAULT_ROLES['Administrator'], ['isDefault', 'isEditable']))
        await createTestOrganizationEmployee(admin, testOrganization, staffClient.user, role)

        const [app] = await createTestB2BApp(admin)
        await createTestB2BAppContext(admin, app, testOrganization, { status: CONTEXT_FINISHED_STATUS })

        const [accessRightSet] = await createTestB2BAppAccessRightSet(admin, app, {
            canExecuteSendB2BAppPushMessage: true,
        })
        await createTestB2BAppAccessRight(admin, serviceUser.user, app, accessRightSet)

        await syncRemoteClientWithPushTokenByTestClient(staffClient, { devicePlatform: DEVICE_PLATFORM_ANDROID, appId: APP_MASTER_ID_ANDROID })

        organization = testOrganization
        b2bApp = app
    })

    describe('Access', () => {
        describe('Service user', () => {
            test('can execute', async () => {
                const [result] = await sendB2BAppPushMessageByTestClient(serviceUser, b2bApp, organization, staffClient.user)

                expect(result.id).toMatch(UUID_RE)
            })
        })
        describe('Admin', () => {
            test('can not execute', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await sendB2BAppPushMessageByTestClient(admin, b2bApp, organization, staffClient.user)
                })
            })
        })
        describe('Support', () => {
            test('can not execute', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await sendB2BAppPushMessageByTestClient(support, b2bApp, organization, staffClient.user)
                })
            })
        })
        describe('User', () => {
            test('can not execute', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await sendB2BAppPushMessageByTestClient(staffClient, b2bApp, organization, staffClient.user)
                })
            })
        })
        describe('Anonymous', () => {
            test('can not execute', async () => {
                await expectToThrowAuthenticationErrorToResult(async () => {
                    await sendB2BAppPushMessageByTestClient(anonymous, b2bApp, organization, staffClient.user)
                })
            })
        })
    })

    describe('Logic', () => {
        test('Successfully sends a message from a service user with B2B app access rights', async () => {
            const body = faker.random.alphaNumeric(8)
            const [result] = await sendB2BAppPushMessageByTestClient(serviceUser, b2bApp, organization, staffClient.user, {
                type: B2B_APP_MESSAGE_PUSH_TYPE,
                meta: {
                    dv: 1,
                    body,
                },
            })

            await waitFor(async () => {
                const message = await Message.getOne(admin, { id: result.id })

                expect(message.status).toBe(MESSAGE_SENT_STATUS)
                expect(message.organization.id).toBe(organization.id)
                expect(message.user.id).toBe(staffClient.user.id)
                expect(message.type).toBe(B2B_APP_MESSAGE_PUSH_TYPE)
                expect(message.meta.body).toBe(body)
                expect(message.lang).toBe(get(organization, ['country', 'locale'], conf.DEFAULT_LOCALE))
            })
        })

        test('Throws an error if no finished B2BContext exists for the specified organization and B2BApp', async () => {
            const [testOrganization] = await createTestOrganization(admin)
            const [role] = await createTestOrganizationEmployeeRole(admin, testOrganization, omit(DEFAULT_ROLES['Administrator'], ['isDefault', 'isEditable']))
            await createTestOrganizationEmployee(admin, testOrganization, staffClient.user, role)

            await expectToThrowGQLErrorToResult(async () => {
                await sendB2BAppPushMessageByTestClient(serviceUser, b2bApp, testOrganization, staffClient.user)
            }, ERRORS.NO_B2B_CONTEXT)
        })

        test('Throws an error if no B2BAppAccessRight exists with canExecuteSendB2BAppPushMessage', async () => {
            const [app] = await createTestB2BApp(admin)
            await createTestB2BAppContext(admin, app, organization, { status: CONTEXT_FINISHED_STATUS })
            const [accessRightSet] = await createTestB2BAppAccessRightSet(admin, app)
            await createTestB2BAppAccessRight(admin, serviceUser.user, app, accessRightSet)

            await expectToThrowGQLErrorToResult(async () => {
                await sendB2BAppPushMessageByTestClient(serviceUser, app, organization, staffClient.user)
            }, ERRORS.NO_B2B_APP_ACCESS_RIGHT)
        })

        test('Throws an error if no organization employee exists for the specified user and organization', async () => {
            const user = await makeClientWithNewRegisteredAndLoggedInUser()

            await expectToThrowGQLErrorToResult(async () => {
                await sendB2BAppPushMessageByTestClient(serviceUser, b2bApp, organization, user.user)
            }, ERRORS.NO_EMPLOYEE_FOR_USER)
        })
    })
})