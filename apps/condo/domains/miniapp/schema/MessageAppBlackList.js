/**
 * Generated by `createschema miniapp.MessageAppBlackList 'app?:Relationship:B2CApp:CASCADE; description:Text'`
 */

const { Text, Relationship, Select } = require('@keystonejs/fields')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/miniapp/access/MessageAppBlackList')
const { MESSAGE_TYPES } = require('@condo/domains/notification/constants/constants')


const MessageAppBlackList = new GQLListSchema('MessageAppBlackList', {
    schemaDoc: 'Rule for blocking specific type of messages for apps',
    fields: {
        app: {
            schemaDoc: 'the app we want to block from sending messages to (null - all apps)',
            type: Relationship,
            ref: 'B2CApp',
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
        },

        type: {
            schemaDoc: 'The type of message we want to block',
            type: Select,
            options: MESSAGE_TYPES,
            dataType: 'string',
            isRequired: true,
        },

        description: {
            schemaDoc: 'The reason why the entry was added to the MessageAppBlackList',
            type: Text,
            isRequired: true,
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['app', 'type'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'message_app_black_list_unique_app_and_type',
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMessageAppBlackLists,
        create: access.canManageMessageAppBlackLists,
        update: access.canManageMessageAppBlackLists,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MessageAppBlackList,
}
