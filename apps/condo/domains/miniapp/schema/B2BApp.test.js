/**
 * Generated by `createschema miniapp.B2BApp 'name:Text;'`
 */

const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

const { B2BApp, createTestB2BApp, updateTestB2BApp } = require('@condo/domains/miniapp/utils/testSchema')
const {
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAuthenticationErrorToObj,
} = require('@condo/domains/common/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

const faker = require('faker')


describe('B2BApp', () => {
    describe('CRUD', () => {
        let admin
        let support
        let user
        let anonymous
        beforeAll(async () => {
            admin = await makeLoggedInAdminClient()
            support = await makeClientWithSupportUser()
            user = await makeClientWithNewRegisteredAndLoggedInUser()
            anonymous = await makeClient()
        })
        describe('Create', () => {
            const createPayload = {
                name: faker.company.companyName().replace(/ /, '-').toUpperCase() + ' B2B APP',
                shortDescription: faker.commerce.productDescription(),
                developer: faker.company.companyName(),
                instruction: faker.datatype.string(),
                connectedMessage: faker.company.catchPhrase(),
            }
            test('Admin can', async () => {
                const [app] = await createTestB2BApp(admin, createPayload)
                expect(app).toBeDefined()
                expect(app).toEqual(expect.objectContaining(createPayload))
            })
            test('Support can', async () => {
                const [app] = await createTestB2BApp(support, createPayload)
                expect(app).toBeDefined()
                expect(app).toEqual(expect.objectContaining(createPayload))
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2BApp(user)
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestB2BApp(anonymous)
                })
            })
        })
        describe('Read', () => {
            let app
            beforeAll(async () => {
                [app] = await createTestB2BApp(admin)
            })
            test('Admin can', async () => {
                const apps = await B2BApp.getAll(admin, {
                    id: app.id,
                })
                expect(apps).toBeDefined()
                expect(apps).toHaveLength(1)
                expect(apps[0]).toHaveProperty('id', app.id)
                expect(apps[0]).toHaveProperty('name', app.name)
            })
            test('Support can', async () => {
                const apps = await B2BApp.getAll(support, {
                    id: app.id,
                })
                expect(apps).toBeDefined()
                expect(apps).toHaveLength(1)
                expect(apps[0]).toHaveProperty('id', app.id)
                expect(apps[0]).toHaveProperty('name', app.name)
            })
            test('User can', async () => {
                const apps = await B2BApp.getAll(user, {
                    id: app.id,
                })
                expect(apps).toBeDefined()
                expect(apps).toHaveLength(1)
                expect(apps[0]).toHaveProperty('id', app.id)
                expect(apps[0]).toHaveProperty('name', app.name)
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await B2BApp.getAll(anonymous, {
                        id: app.id,
                    })
                })
            })
        })
        describe('Update', () => {
            let createdApp
            const updatePayload = {
                name: faker.company.companyName().replace(/ /, '-').toUpperCase() + ' B2B APP',
            }
            beforeEach(async () => {
                [createdApp] = await createTestB2BApp(admin)
            })
            test('Admin can', async () => {
                const [app] = await updateTestB2BApp(admin, createdApp.id, updatePayload)
                expect(app).toBeDefined()
                expect(app).toEqual(expect.objectContaining(updatePayload))
            })
            test('Support can', async () => {
                const [app] = await updateTestB2BApp(support, createdApp.id, updatePayload)
                expect(app).toBeDefined()
                expect(app).toEqual(expect.objectContaining(updatePayload))
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2BApp(user, createdApp.id, updatePayload)
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestB2BApp(anonymous, createdApp.id, updatePayload)
                })
            })
        })
        describe('Delete', () => {
            let app
            beforeAll(async () => {
                [app] = await createTestB2BApp(admin)
            })
            test('Nobody can', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BApp.delete(admin, app.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BApp.delete(support, app.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BApp.delete(user, app.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BApp.delete(anonymous, app.id)
                })
            })
        })
    })
})
