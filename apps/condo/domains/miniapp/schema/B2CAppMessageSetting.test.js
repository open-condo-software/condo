/**
 * Generated by `createschema miniapp.B2CAppMessageSetting 'app?:Relationship:B2CApp:CASCADE; blockReason:Text; blockedNotificationTypes:Text; throttlingTime:Integer;'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor, expectValuesOfCommonFields,
    expectToThrowUniqueConstraintViolationError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects,
} = require('@open-condo/keystone/test.utils')


const { B2CAppMessageSetting, createTestB2CAppMessageSetting, updateTestB2CAppMessageSetting } = require('@condo/domains/miniapp/utils/testSchema')
const { createTestB2CApp } = require('@condo/domains/miniapp/utils/testSchema')
const { B2C_APP_MESSAGE_PUSH_TYPE, VOIP_INCOMING_CALL_MESSAGE_TYPE } = require('@condo/domains/notification/constants/constants')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

describe('B2CAppMessageSetting', () => {
    let admin, support, anonymous, user
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()
    })
    describe('access tests', () => {
        describe('admin', () => {
            test('can create', async () => {
                const [app] = await createTestB2CApp(admin)
                const notificationWindowSize = 30000
                const numberOfNotificationInWindow = 5
                const [obj, attrs] = await createTestB2CAppMessageSetting(admin, app, {
                    notificationWindowSize,
                    numberOfNotificationInWindow,
                })

                expectValuesOfCommonFields(obj, attrs, admin)
                expect(obj.type).toEqual(B2C_APP_MESSAGE_PUSH_TYPE)
                expect(obj.isBlacklisted).toBeFalsy()
                expect(obj.notificationWindowSize).toEqual(notificationWindowSize)
                expect(obj.numberOfNotificationInWindow).toEqual(numberOfNotificationInWindow)
            })

            test('can update', async () => {
                const [app] = await createTestB2CApp(admin)
                const [objCreated] = await createTestB2CAppMessageSetting(admin, app)

                const [obj, attrs] = await updateTestB2CAppMessageSetting(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2CAppMessageSetting.delete(admin, 'id')
                })
            })

            test('can read', async () => {
                const [app] = await createTestB2CApp(admin)
                const [obj, attrs] = await createTestB2CAppMessageSetting(admin, app)

                const objs = await B2CAppMessageSetting.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                        type: B2C_APP_MESSAGE_PUSH_TYPE,
                    }),
                ]))
            })
        })

        describe('support', () => {
            test('can create', async () => {
                const [app] = await createTestB2CApp(admin)
                const [obj, attrs] = await createTestB2CAppMessageSetting(support, app)

                expectValuesOfCommonFields(obj, attrs, support)
                expect(obj.type).toEqual(B2C_APP_MESSAGE_PUSH_TYPE)
                expect(obj.isBlacklisted).toBeFalsy()
            })

            test('can update', async () => {
                const [app] = await createTestB2CApp(admin)
                const [objCreated] = await createTestB2CAppMessageSetting(support, app)

                const [obj, attrs] = await updateTestB2CAppMessageSetting(support, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: support.user.id }))
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2CAppMessageSetting.delete(support, 'id')
                })
            })

            test('can read', async () => {
                const [app] = await createTestB2CApp(admin)
                const [obj, attrs] = await createTestB2CAppMessageSetting(support, app)

                const objs = await B2CAppMessageSetting.getAll(support, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                        type: B2C_APP_MESSAGE_PUSH_TYPE,
                    }),
                ]))
            })
        })

        describe('user', () => {
            test('can\'t create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2CAppMessageSetting(user, { id: 'id' })
                })
            })

            test('can\'t update', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2CAppMessageSetting(user, 'id')
                })
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2CAppMessageSetting.delete(user, 'id')
                })
            })

            test('can\'t read', async () => {
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await B2CAppMessageSetting.getAll(user, {})
                })
            })
        })

        describe('anonymous', () => {
            test('can\'t create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestB2CAppMessageSetting(anonymous, { id: 'id' })
                })
            })

            test('can\'t update', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestB2CAppMessageSetting(anonymous, 'id')
                })
            })

            test('can\'t delete', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2CAppMessageSetting.delete(anonymous, 'id')
                })
            })

            test('can\'t read', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await B2CAppMessageSetting.getAll(anonymous, {})
                })
            })
        })
    })

    describe('Constraint tests', () => {
        test('b2c_app_message_setting_unique_app_and_type can\'t create two records with same message type and B2CApp', async () => {
            const [app] = await createTestB2CApp(admin)
            const [obj, attrs] = await createTestB2CAppMessageSetting(admin, app)

            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestB2CAppMessageSetting(admin, app)
            }, 'b2c_app_message_setting_unique_app_and_type')
        })

        test('b2c_app_message_setting_unique_app_and_type can create two records with dif message type and same B2CApp', async () => {
            const [app] = await createTestB2CApp(admin)
            const [obj1] = await createTestB2CAppMessageSetting(admin, app)

            const [obj2] = await createTestB2CAppMessageSetting(admin, app, { type: VOIP_INCOMING_CALL_MESSAGE_TYPE })
            expect(obj1.type).toEqual(B2C_APP_MESSAGE_PUSH_TYPE)
            expect(obj2.type).toEqual(VOIP_INCOMING_CALL_MESSAGE_TYPE)
            expect(obj1.app).toEqual(obj2.app)
        })

        test('b2c_app_message_setting_unique_app_and_type can create two records with same message type and dif B2CApp', async () => {
            const [app1] = await createTestB2CApp(admin)
            const [app2] = await createTestB2CApp(admin)
            const [obj1] = await createTestB2CAppMessageSetting(admin, app1)

            const [obj2] = await createTestB2CAppMessageSetting(admin, app2)
            expect(obj1.app.id).toEqual(app1.id)
            expect(obj2.app.id).toEqual(app2.id)
            expect(obj1.type).toEqual(obj2.type)
        })
    })
})
