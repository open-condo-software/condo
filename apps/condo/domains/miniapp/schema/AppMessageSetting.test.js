/**
 * Generated by `createschema miniapp.AppMessageSetting 'app?:Relationship:B2CApp:CASCADE; blockReason:Text; blockedNotificationTypes:Text; throttlingTime:Integer;'`
 */

const { makeLoggedInAdminClient, makeClient, expectValuesOfCommonFields,
    expectToThrowUniqueConstraintViolationError, expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')


const { AppMessageSetting, createTestAppMessageSetting, updateTestAppMessageSetting } = require('@condo/domains/miniapp/utils/testSchema')
const { createTestB2CApp, createTestB2BApp, createTestB2BAppContext } = require('@condo/domains/miniapp/utils/testSchema')
const { B2C_APP_MESSAGE_PUSH_TYPE, B2B_APP_MESSAGE_PUSH_TYPE, VOIP_INCOMING_CALL_MESSAGE_TYPE, TICKET_CREATED_TYPE } = require('@condo/domains/notification/constants/constants')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

const { ERRORS } = require('./AppMessageSetting')


describe('AppMessageSetting', () => {
    let admin, support, anonymous, user, b2cApp

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()
    })

    describe('B2CApp', () => {
        beforeEach(async () => {
            const [testB2cApp] = await createTestB2CApp(admin)
            b2cApp = testB2cApp
        })

        describe('Access', () => {
            describe('Admin', () => {
                test('can create', async () => {
                    const notificationWindowSize = 30000
                    const numberOfNotificationInWindow = 5
                    const [obj, attrs] = await createTestAppMessageSetting(admin, {
                        notificationWindowSize,
                        numberOfNotificationInWindow,
                        b2cApp,
                    })

                    expectValuesOfCommonFields(obj, attrs, admin)
                    expect(obj.type).toEqual(B2C_APP_MESSAGE_PUSH_TYPE)
                    expect(obj.isBlacklisted).toBeFalsy()
                    expect(obj.notificationWindowSize).toEqual(notificationWindowSize)
                    expect(obj.numberOfNotificationInWindow).toEqual(numberOfNotificationInWindow)
                })

                test('can update', async () => {
                    const [objCreated] = await createTestAppMessageSetting(admin, {
                        b2cApp,
                    })

                    const [obj, attrs] = await updateTestAppMessageSetting(admin, objCreated.id)

                    expect(obj.dv).toEqual(1)
                    expect(obj.sender).toEqual(attrs.sender)
                    expect(obj.v).toEqual(2)
                    expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                })

                test('can\'t delete', async () => {
                    const [appMessageSetting] = await createTestAppMessageSetting(admin, {
                        b2cApp,
                    })

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await AppMessageSetting.delete(admin, appMessageSetting.id)
                    })
                })

                test('can read', async () => {
                    const [obj] = await createTestAppMessageSetting(admin, {
                        b2cApp,
                    })

                    const objs = await AppMessageSetting.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                    expect(objs.length).toBeGreaterThanOrEqual(1)
                    expect(objs).toEqual(expect.arrayContaining([
                        expect.objectContaining({
                            id: obj.id,
                            type: B2C_APP_MESSAGE_PUSH_TYPE,
                        }),
                    ]))
                })
            })

            describe('Support', () => {
                test('can create', async () => {
                    const [b2cApp] = await createTestB2CApp(admin)
                    const [obj, attrs] = await createTestAppMessageSetting(support, {
                        b2cApp,
                    })

                    expectValuesOfCommonFields(obj, attrs, support)
                    expect(obj.type).toEqual(B2C_APP_MESSAGE_PUSH_TYPE)
                    expect(obj.isBlacklisted).toBeFalsy()
                })

                test('can update', async () => {
                    const [b2cApp] = await createTestB2CApp(admin)
                    const [objCreated] = await createTestAppMessageSetting(support, {
                        b2cApp,
                    })

                    const [obj, attrs] = await updateTestAppMessageSetting(support, objCreated.id)

                    expect(obj.dv).toEqual(1)
                    expect(obj.sender).toEqual(attrs.sender)
                    expect(obj.v).toEqual(2)
                    expect(obj.updatedBy).toEqual(expect.objectContaining({ id: support.user.id }))
                })

                test('can\'t delete', async () => {
                    const [appMessageSetting] = await createTestAppMessageSetting(admin, {
                        b2cApp,
                    })

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await AppMessageSetting.delete(support, appMessageSetting.id)
                    })
                })

                test('can read', async () => {
                    const [b2cApp] = await createTestB2CApp(admin)
                    const [obj] = await createTestAppMessageSetting(support, {
                        b2cApp,
                    })

                    const objs = await AppMessageSetting.getAll(support, {}, { sortBy: ['updatedAt_DESC'] })

                    expect(objs.length).toBeGreaterThanOrEqual(1)
                    expect(objs).toEqual(expect.arrayContaining([
                        expect.objectContaining({
                            id: obj.id,
                            type: B2C_APP_MESSAGE_PUSH_TYPE,
                        }),
                    ]))
                })
            })

            describe('User', () => {
                test('can\'t create', async () => {
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestAppMessageSetting(user, { b2cApp })
                    })
                })

                test('can\'t update', async () => {
                    const [appMessageSetting] = await createTestAppMessageSetting(admin, {
                        b2cApp,
                    })

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestAppMessageSetting(user, appMessageSetting.id)
                    })
                })

                test('can\'t delete', async () => {
                    const [appMessageSetting] = await createTestAppMessageSetting(admin, {
                        b2cApp,
                    })

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await AppMessageSetting.delete(user, appMessageSetting.id)
                    })
                })

                test('can\'t read', async () => {
                    const objs = await AppMessageSetting.getAll(user, {})

                    expect(objs).toHaveLength(0)
                })

                test('user with employee in organization with b2b app from setting can read', async () => {
                    const staffUser = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)
                    const [app] = await createTestB2BApp(admin)
                    await createTestB2BAppContext(admin, app, organization)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                    await createTestOrganizationEmployee(admin, organization, staffUser.user, role)
                    const [setting] = await createTestAppMessageSetting(admin, {
                        b2bApp: app,
                    })

                    const readSetting = await AppMessageSetting.getOne(staffUser, { id: setting.id })

                    expect(readSetting.id).toEqual(setting.id)
                    expect(readSetting.type).toBeDefined()
                    expect(readSetting.type).toEqual(setting.type)
                    expect(readSetting.b2bApp.id).toEqual(setting.b2bApp.id)
                })
            })

            describe('Anonymous', () => {
                test('can\'t create', async () => {
                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await createTestAppMessageSetting(anonymous, { b2cApp })
                    })
                })

                test('can\'t update', async () => {
                    const [appMessageSetting] = await createTestAppMessageSetting(admin, {
                        b2cApp,
                    })

                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await updateTestAppMessageSetting(anonymous, appMessageSetting.id)
                    })
                })

                test('can\'t delete', async () => {
                    const [appMessageSetting] = await createTestAppMessageSetting(admin, {
                        b2cApp,
                    })

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await AppMessageSetting.delete(anonymous, appMessageSetting.id)
                    })
                })

                test('can\'t read', async () => {
                    await expectToThrowAuthenticationErrorToObjects(async () => {
                        await AppMessageSetting.getAll(anonymous, {})
                    })
                })
            })
        })
    })

    describe('Validations', () => {
        test('can not create AppMessageSetting with b2bApp and b2cApp together', async () => {
            const [b2cApp] = await createTestB2CApp(admin)
            const [b2bApp] = await createTestB2BApp(admin)

            await expectToThrowGQLError(async () => {
                await createTestAppMessageSetting(admin, {
                    b2cApp,
                    b2bApp,
                })
            }, ERRORS.APP_MESSAGE_SETTING_MUST_HAVE_ONLY_B2B_OR_B2C_APP_FIELD)
        })

        test('can not create AppMessageSetting without b2bApp or b2cApp', async () => {
            await expectToThrowGQLError(async () => {
                await createTestAppMessageSetting(admin, {
                    type: TICKET_CREATED_TYPE,
                })
            }, ERRORS.APP_MESSAGE_SETTING_MUST_HAVE_ONLY_B2B_OR_B2C_APP_FIELD)
        })

        test('can not connect b2bApp to AppMessageSetting with b2cApp', async () => {
            const [b2cApp] = await createTestB2CApp(admin)
            const [b2bApp] = await createTestB2BApp(admin)

            const [setting] = await createTestAppMessageSetting(admin, {
                b2cApp,
            })

            await expectToThrowGQLError(async () => {
                await updateTestAppMessageSetting(admin, setting.id,  {
                    b2bApp: { connect: { id: b2bApp.id } },
                })
            }, ERRORS.APP_MESSAGE_SETTING_MUST_HAVE_ONLY_B2B_OR_B2C_APP_FIELD)
        })

        test('can update AppMessageSetting fields', async () => {
            const [b2bApp] = await createTestB2BApp(admin)
            const [setting] = await createTestAppMessageSetting(admin, {
                b2bApp,
                isBlacklisted: false,
            })

            expect(setting.isBlacklisted).toEqual(false)

            const [updatedSetting] = await updateTestAppMessageSetting(admin, setting.id,  {
                isBlacklisted: true,
            })

            expect(updatedSetting.isBlacklisted).toEqual(true)
        })

        test('can not create two records with same message type and B2CApp', async () => {
            const [b2cApp] = await createTestB2CApp(admin)
            await createTestAppMessageSetting(admin, {
                b2cApp,
            })

            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestAppMessageSetting(admin, {
                    b2cApp,
                })
            }, 'app_message_setting_unique_b2c_app_and_type')
        })

        test('can not create two records with same message type and B2BApp', async () => {
            const [b2bApp] = await createTestB2BApp(admin)
            await createTestAppMessageSetting(admin, {
                b2bApp,
            })
            
            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestAppMessageSetting(admin, {
                    b2bApp,
                })
            }, 'app_message_setting_unique_b2b_app_and_type')
        })

        test('can create two records with different message types and same B2CApp', async () => {
            const [b2cApp] = await createTestB2CApp(admin)
            const [obj1] = await createTestAppMessageSetting(admin, {
                b2cApp,
            })

            const [obj2] = await createTestAppMessageSetting(admin, {
                b2cApp,
                type: VOIP_INCOMING_CALL_MESSAGE_TYPE,
            })
            expect(obj1.type).toEqual(B2C_APP_MESSAGE_PUSH_TYPE)
            expect(obj2.type).toEqual(VOIP_INCOMING_CALL_MESSAGE_TYPE)
            expect(obj1.b2cApp.id).toEqual(obj2.b2cApp.id)
        })

        test('can create two records with different message types and same B2BApp', async () => {
            const [b2bApp] = await createTestB2BApp(admin)
            const [obj1] = await createTestAppMessageSetting(admin, {
                b2bApp,
            })

            const [obj2] = await createTestAppMessageSetting(admin, {
                b2bApp,
                type: TICKET_CREATED_TYPE,
            })

            expect(obj1.type).toEqual(B2B_APP_MESSAGE_PUSH_TYPE)
            expect(obj2.type).toEqual(TICKET_CREATED_TYPE)
            expect(obj1.b2bApp.id).toEqual(obj2.b2bApp.id)
        })

        test('can create two records with same message type and different app types', async () => {
            const [b2cApp] = await createTestB2CApp(admin)
            const [obj1] = await createTestAppMessageSetting(admin, {
                b2cApp,
                type: TICKET_CREATED_TYPE,
            })

            const [b2bApp] = await createTestB2BApp(admin)
            const [obj2] = await createTestAppMessageSetting(admin, {
                b2bApp,
                type: TICKET_CREATED_TYPE,
            })

            expect(obj1.type).toEqual(TICKET_CREATED_TYPE)
            expect(obj1.b2cApp.id).toEqual(b2cApp.id)
            expect(obj2.type).toEqual(TICKET_CREATED_TYPE)
            expect(obj2.b2bApp.id).toEqual(b2bApp.id)
        })

        test('can create two records with same message type and different B2CApp', async () => {
            const [b2cApp1] = await createTestB2CApp(admin)
            const [b2cApp2] = await createTestB2CApp(admin)
            const [obj1] = await createTestAppMessageSetting(admin, {
                b2cApp: b2cApp1,
            })

            const [obj2] = await createTestAppMessageSetting(admin, {
                b2cApp: b2cApp2,
            })
            expect(obj1.b2cApp.id).toEqual(b2cApp1.id)
            expect(obj2.b2cApp.id).toEqual(b2cApp2.id)
            expect(obj1.type).toEqual(obj2.type)
        })
    })
})
