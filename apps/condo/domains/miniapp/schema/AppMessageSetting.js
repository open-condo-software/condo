/**
 * Generated by `createschema miniapp.AppMessageSettings 'app?:Relationship:B2CApp:CASCADE; blockReason:Text; blockedNotificationTypes:Text; throttlingTime:Integer;'`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const { OPERATION_FORBIDDEN } = require('@condo/domains/common/constants/errors')
const access = require('@condo/domains/miniapp/access/AppMessageSetting')
const { DEFAULT_NOTIFICATION_WINDOW_DURATION_IN_SECONDS, DEFAULT_NOTIFICATION_WINDOW_MAX_COUNT } = require('@condo/domains/miniapp/constants')
const { getMessageTypeField } = require('@condo/domains/notification/schema/fields/MessageType')


const ERRORS = {
    APP_MESSAGE_SETTING_MUST_HAVE_ONLY_B2B_OR_B2C_APP_FIELD: {
        code: BAD_USER_INPUT,
        type: OPERATION_FORBIDDEN,
        message: 'AppMessageSetting must have either b2bApp or b2cApp field',
    },
}

const AppMessageSetting = new GQLListSchema('AppMessageSetting', {
    schemaDoc:
        'Configuration of sending push notifications for specific miniapp. ' +
        'Used to block certain types of push notifications and control throttling of notifications of a certain miniapp.' +
        'Each setting contains either a B2BApp or a B2CApp, but not both at once.',
    fields: {

        b2bApp: {
            schemaDoc: 'Link to B2BApp to which this setting applies',
            type: 'Relationship',
            ref: 'B2BApp',
            isRequired: false,
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
            access: {
                update: false,
            },
        },

        b2cApp: {
            schemaDoc: 'Link to B2CApp to which this config applies',
            type: 'Relationship',
            ref: 'B2CApp',
            isRequired: false,
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
            access: {
                update: false,
            },
        },

        reason: {
            schemaDoc: 'Reason why specific message type limits changed for miniapp',
            type: 'Text',
            isRequired: true,
        },

        type: getMessageTypeField({
            isRequired: true,
            schemaDoc: 'The type of message we want to configure',
        }),

        notificationWindowSize: {
            schemaDoc: 'Time interval in seconds to which the settings apply',
            type: 'Integer',
            isRequired: true,
            defaultValue: DEFAULT_NOTIFICATION_WINDOW_DURATION_IN_SECONDS,
        },

        numberOfNotificationInWindow: {
            schemaDoc:
                'The number of notifications that can be sent in single time window in seconds to a specific user. ' +
                'If the value is 0, then the miniapp cannot send this type of message',
            type: 'Integer',
            isRequired: true,
            defaultValue: DEFAULT_NOTIFICATION_WINDOW_MAX_COUNT,
        },

    },
    hooks: {
        validateInput: ({ context, existingItem, resolvedData }) => {
            const newItem = { ...existingItem, ...resolvedData }

            if ((!newItem.b2cApp && !newItem.b2bApp) || (newItem.b2cApp && newItem.b2bApp)) {
                throw new GQLError(ERRORS.APP_MESSAGE_SETTING_MUST_HAVE_ONLY_B2B_OR_B2C_APP_FIELD, context)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadAppMessageSetting,
        create: access.canManageAppMessageSetting,
        update: access.canManageAppMessageSetting,
        delete: false,
        auth: true,
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['b2cApp', 'type'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'app_message_setting_unique_b2c_app_and_type',
            },
            {
                type: 'models.UniqueConstraint',
                fields: ['b2bApp', 'type'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'app_message_setting_unique_b2b_app_and_type',
            },
        ],
    },
})

module.exports = {
    AppMessageSetting,
    ERRORS,
}
