/**
 * Generated by `createschema miniapp.B2CAppAccessRight 'user:Relationship:User:PROTECT; app:Relationship:B2CApp:PROTECT;'`
 */

const { makeLoggedInAdminClient, makeClient } = require('@condo/keystone/test.utils')

const {
    createTestB2CApp,
    B2CAppAccessRight,
    createTestB2CAppAccessRight,
    updateTestB2CAppAccessRight,
} = require('@condo/domains/miniapp/utils/testSchema')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAccessDeniedErrorToObjects,
    expectToThrowValidationFailureError,
} = require('@condo/keystone/test.utils')
const {
    makeClientWithSupportUser,
    makeClientWithNewRegisteredAndLoggedInUser,
    registerNewServiceUserByTestClient,
} = require('@condo/domains/user/utils/testSchema')
const { NON_SERVICE_USER_ERROR } = require('@condo/domains/miniapp/constants')
const dayjs = require('dayjs')

describe('B2CAppAccessRight', () => {
    describe('CRUD operations', () => {
        let admin
        let user
        let support
        let anonymous
        beforeAll(async () => {
            admin = await makeLoggedInAdminClient()
            support = await makeClientWithSupportUser()
            user = await makeClientWithNewRegisteredAndLoggedInUser()
            anonymous = await makeClient()
        })
        describe('Create', () => {
            let app
            let serviceUser
            beforeEach(async () => {
                [app] = await createTestB2CApp(admin)
                const [newUser] = await registerNewServiceUserByTestClient(admin)
                serviceUser = newUser
            })
            test('Admin can', async () => {
                const [right] = await createTestB2CAppAccessRight(admin, serviceUser, app)
                expect(right).toBeDefined()
                expect(right).toHaveProperty(['user', 'id'], serviceUser.id)
                expect(right).toHaveProperty(['app', 'id'], app.id)
            })
            test('Support can', async () => {
                const [right] = await createTestB2CAppAccessRight(support, serviceUser, app)
                expect(right).toBeDefined()
                expect(right).toHaveProperty(['user', 'id'], serviceUser.id)
                expect(right).toHaveProperty(['app', 'id'], app.id)
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2CAppAccessRight(user, serviceUser, app)
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2CAppAccessRight(user, serviceUser, app)
                })
            })
        })
        describe('Read', () => {
            let right
            beforeAll(async () => {
                const [app] = await createTestB2CApp(admin)
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                const [accessRight] = await createTestB2CAppAccessRight(admin, serviceUser, app)
                right = accessRight
            })
            test('Admin can', async () => {
                const rights = await B2CAppAccessRight.getAll(admin, {
                    id: right.id,
                })
                expect(rights).toBeDefined()
                expect(rights).toHaveLength(1)
                expect(rights[0]).toHaveProperty('id', right.id)
            })
            test('Support can', async () => {
                const rights = await B2CAppAccessRight.getAll(support, {
                    id: right.id,
                })
                expect(rights).toBeDefined()
                expect(rights).toHaveLength(1)
                expect(rights[0]).toHaveProperty('id', right.id)
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await B2CAppAccessRight.getAll(user, {})
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await B2CAppAccessRight.getAll(anonymous, {})
                })
            })
        })
        describe('Update', () => {
            let right
            beforeEach(async () => {
                const [app] = await createTestB2CApp(admin)
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                const [accessRight] = await createTestB2CAppAccessRight(admin, serviceUser, app)
                right = accessRight
            })
            test('Admin can', async () => {
                const [updatedRight] = await updateTestB2CAppAccessRight(admin, right.id, {
                    deletedAt: dayjs().toISOString(),
                })
                expect(updatedRight).toBeDefined()
                expect(updatedRight).toHaveProperty('deletedAt')
                expect(updatedRight.deletedAt).not.toBeNull()
            })
            test('Support can', async () => {
                const [updatedRight] = await updateTestB2CAppAccessRight(support, right.id, {
                    deletedAt: dayjs().toISOString(),
                })
                expect(updatedRight).toBeDefined()
                expect(updatedRight).toHaveProperty('deletedAt')
                expect(updatedRight.deletedAt).not.toBeNull()
            })
            test('User cannot', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2CAppAccessRight(user, right.id, {})
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestB2CAppAccessRight(anonymous, right.id, {})
                })
            })
        })
        describe('Delete', () => {
            test('Nobody can', async () => {
                const [serviceUser] = await registerNewServiceUserByTestClient(admin)
                const [app] = await createTestB2CApp(admin)
                const [right] = await createTestB2CAppAccessRight(admin, serviceUser, app)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2CAppAccessRight.delete(admin, right.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2CAppAccessRight.delete(support, right.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2CAppAccessRight.delete(user, right.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2CAppAccessRight.delete(anonymous, right.id)
                })

            })
        })
    })
    describe('Validations', () => {
        test('Cannot be linked to non-service user', async () => {
            const admin = await makeLoggedInAdminClient()
            const [app] = await createTestB2CApp(admin)
            const client = await makeClientWithNewRegisteredAndLoggedInUser()
            const [serviceUser] = await registerNewServiceUserByTestClient(admin)
            await expectToThrowValidationFailureError(async () => {
                await createTestB2CAppAccessRight(admin, client.user, app)
            }, NON_SERVICE_USER_ERROR)
            const [right] = await createTestB2CAppAccessRight(admin, serviceUser, app)
            await expectToThrowValidationFailureError(async () => {
                await updateTestB2CAppAccessRight(admin, right.id, {
                    user: { connect: { id: client.user.id } },
                })
            }, NON_SERVICE_USER_ERROR)
        })
    })
})
