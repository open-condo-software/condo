/**
 * Generated by `createservice miniapp.AllOrganizationAppsService --type queries`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/miniapp/access/AllOrganizationAppsService')
const { ACQUIRING_APP_TYPE, BILLING_APP_TYPE, APP_TYPES } = require('@condo/domains/miniapp/constants')
const { find } = require('@core/keystone/schema')

const AllOrganizationAppsService = new GQLCustomSchema('AllOrganizationAppsService', {
    types: [
        {
            access: true,
            type: `enum AppType { ${APP_TYPES.join(' ')} }`,
        },
        {
            access: true,
            type: 'input AllOrganizationAppsInput { dv: Int!, sender: SenderFieldInput!, organization: OrganizationWhereUniqueInput! }',
        },
        {
            access: true,
            type: 'type AppInfoOutput { id: ID!, type: AppType!, connected: Boolean!, name: String!, shortDescription: String! }',
        },
    ],
    
    queries: [
        {
            access: access.canAllOrganizationApps,
            schema: 'allOrganizationApps (data: AllOrganizationAppsInput!): [AppInfoOutput!]',
            resolver: async (parent, args) => {
                const { data: { organization } } = args
                const services = []

                const billingIntegrations = await find('BillingIntegration', {
                    deletedAt: null,
                    isHidden: false,
                })
                const billingContexts = await find('BillingIntegrationOrganizationContext', {
                    organization,
                    deletedAt: null,
                })
                const connectedBillingIntegrations = billingContexts.map(context => context.integration)
                for (const billing of billingIntegrations) {
                    services.push({
                        id: billing.id,
                        type: BILLING_APP_TYPE,
                        name: billing.name,
                        shortDescription: billing.shortDescription,
                        connected: connectedBillingIntegrations.includes(billing.id),
                    })
                }

                const acquiringIntegrations = await find('AcquiringIntegration', {
                    deletedAt: null,
                    isHidden: false,
                })
                const acquiringContexts = await find('AcquiringIntegrationContext', {
                    organization,
                    deletedAt: null,
                })
                const connectedAcquiringIntegrations = acquiringContexts.map(context => context.integration)
                for (const acquiring of acquiringIntegrations) {
                    services.push({
                        id: acquiring.id,
                        type: ACQUIRING_APP_TYPE,
                        name: acquiring.name,
                        shortDescription: acquiring.shortDescription,
                        connected: connectedAcquiringIntegrations.includes(acquiring.id),
                    })
                }

                return services
            },
        },
    ],
    
})

module.exports = {
    AllOrganizationAppsService,
}
