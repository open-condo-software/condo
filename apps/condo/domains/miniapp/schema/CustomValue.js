/**
 * Generated by `createschema miniapp.CustomValue 'objectId:Text; data:Json; customField:Relationship:CustomField:PROTECT; sourceType:Text; sourceId:Text; organization:Relationship:Organization:PROTECT;'`
 */

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById} = require('@open-condo/keystone/schema')

const access = require('@condo/domains/miniapp/access/CustomValue')

const B2BApp = 'B2BApp'

const ALLOWED_SOURCE_TYPES = {
    [B2BApp]: {
        validateSource: ({ sourceType, sourceId, userId }) => {
            // 1. check that this b2b app exists
            // 2. check that this user is
        },
    },
}

const CustomValue = new GQLListSchema('CustomValue', {
    schemaDoc: 'Custom value for CustomField',
    fields: {
        customField: {
            schemaDoc: 'CustomField object that this data refers to ',
            type: 'Relationship',
            ref: 'CustomField',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

        data: {
            schemaDoc: 'Data of this customValue',
            type: 'Json',
            isRequired: true,
        },

        objectId: {
            schemaDoc: 'What instance of CustomField.schemaName this customValue relates to?',
            type: 'Text',
            isRequired: true,
        },

        sourceType: {
            schemaDoc: 'Type of entity, responsible for the last update of this customField',
            type: 'Select',
            options: Object.keys(ALLOWED_SOURCE_TYPES),
            isRequired: true,
        },

        sourceId: {
            schemaDoc: 'ID of entity, responsible for the last update of this customField',
            type: 'Text',
            isRequired: true,
        },

        organization: {
            schemaDoc: 'Organization that owns data inside this CustomValue',
            type: 'Relationship',
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },
        hooks: {
            validateInput: async (resolvedData, existingItem, operation) => {
                const resultObject = { ...resolvedData, ...existingItem }

                if (!resultObject.customField || !resultObject.customField.id) {
                    throw new Error('lalala')
                }

                const customField = getById('CustomField', resultObject.id)

                // 1. Validate data on custom field

                const customFieldTypeValidateInputHook = () => {}
                const customFieldSchemaValidateInputHook = () => {}

                // 2. Validate data on custom field validation rules

                const customFieldValidationRules = customField.validationRules
                //const customFieldValidationRulesAjvValidator =
            },
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadCustomValues,
        create: access.canManageCustomValues,
        update: access.canManageCustomValues,
        delete: false,
        auth: true,
    },
})

module.exports = {
    CustomValue,
}
