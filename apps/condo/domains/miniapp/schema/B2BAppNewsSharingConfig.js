/**
 * Generated by `createschema miniapp.B2BAppNewsSharingConfig 'publishUrl:Text; previewUrl:Text; getRecipientsUrl:Text;'`
 */

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { getFileMetaAfterChange } = require('@condo/domains/common/utils/fileAdapter')
const access = require('@condo/domains/miniapp/access/B2BAppNewsSharingConfig')


const NEWS_SHARING_FILE_ADAPTER = new FileAdapter('news-sharing')

const iconMetaAfterChange = getFileMetaAfterChange(NEWS_SHARING_FILE_ADAPTER, 'icon')

const previewPictureMetaAfterChange = getFileMetaAfterChange(NEWS_SHARING_FILE_ADAPTER, 'previewPicture')

/**
 * News Sharing B2BApp
 *
 * News Sharing B2BApp allow b2b users to share their NewsItem to external source like Telegram or Whatsapp from /news page
 *
 *                         [ whatsapp-sharing-miniapp ] -> [ whatsapp ]
 * [ condo /news page ] ->              ...                    ...
 *                         [ telegram-sharing-miniapp ] -> [ telegram ]
 *
 * To create miniapp that can be embedded to /news page developer should provide API and information defined here
 *
 * @type {GQLListSchema}
 */
const B2BAppNewsSharingConfig = new GQLListSchema('B2BAppNewsSharingConfig', {

    schemaDoc: 'News Sharing B2BApp allow b2b users to share their NewsItem to external source (like Telegram) from /news page',
    fields: {
        name: {
            schemaDoc: 'Short and simple name of the external source. For example: Telegram',
            type:  'Text',
            isRequired: true,
        },

        publishUrl: {
            schemaDoc: 'URL that implements publishing NewsItem method',
            type: 'Url',
            isRequired: true,
        },

        icon: {
            schemaDoc: 'Icon of the app: Telegram Icon / WhatsApp Icon',
            type: 'File',
            isRequired: false,
            adapter: NEWS_SHARING_FILE_ADAPTER,
        },

        previewPicture: {
            schemaDoc: 'Preview picture: might be app screenshot',
            type: 'File',
            isRequired: false,
            adapter: NEWS_SHARING_FILE_ADAPTER,
        },

        previewUrl: {
            schemaDoc: 'URL that returns HTML preview NewsItem',
            type: 'Url',
            isRequired: false,
        },

        getRecipientsUrl: {
            schemaDoc: 'URL that implements getRecipients function',
            type: 'Url',
            isRequired: true,
        },

        customFormUrl: {
            schemaDoc: 'URL that implements customForm. If not filled, then app will use standard news form',
            type: 'Url',
            isRequired: false,
        },
    },
    hooks: {
        afterChange: async ({ updatedItem, listKey }) => {
            await iconMetaAfterChange({ updatedItem, listKey })
            await previewPictureMetaAfterChange({ updatedItem, listKey })
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadB2BAppNewsSharingConfigs,
        create: access.canManageB2BAppNewsSharingConfigs,
        update: access.canManageB2BAppNewsSharingConfigs,
        delete: false,
        auth: true,
    },
})

module.exports = {
    B2BAppNewsSharingConfig,
}