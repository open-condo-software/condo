/**
 * Generated by `createschema miniapp.B2BAppAccessRightSet 'app:Relationship:B2BApp:CASCADE;'`
 */

const {
    makeLoggedInAdminClient, makeClient, UUID_RE, catchErrorFrom,
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects,
    expectToThrowUniqueConstraintViolationError,
} = require('@open-condo/keystone/test.utils')

const { createTestContact, Contact, updateTestContact } = require('@condo/domains/contact/utils/testSchema')
const {
    createTestB2BApp,
    createTestB2BAppContext,
    createTestB2BAppAccessRight,
    B2BAppAccessRight,
    updateTestB2BAppAccessRight,
    B2BAppAccessRightSet,
    createTestB2BAppAccessRightSet,
    updateTestB2BAppAccessRightSet,
} = require('@condo/domains/miniapp/utils/testSchema')
const { Organization, createTestOrganization, updateTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { registerNewOrganization } = require('@condo/domains/organization/utils/testSchema/Organization')
const { createTestProperty, Property, updateTestProperty } = require('@condo/domains/property/utils/testSchema')
const {
    createTestTicket,
    createTestTicketComment,
    TicketComment,
    updateTestTicket,
    Ticket,
    updateTestTicketComment,
} = require('@condo/domains/ticket/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
    registerNewServiceUserByTestClient,
    makeLoggedInClient,
} = require('@condo/domains/user/utils/testSchema')


describe('B2BAppAccessRightSet', () => {
    let admin
    let support
    let integratedServiceUser, integratedToAnotherAppServiceUser
    let notServiceUser
    let anonymous

    let app
    let anotherApp

    let accessRightSet

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        notServiceUser = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymous = await makeClient()

        const [createdApp] = await createTestB2BApp(admin)
        app = createdApp

        const [createdApp2] = await createTestB2BApp(admin)
        anotherApp = createdApp2

        const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)
        accessRightSet = createdAccessRightSet

        const [newServiceUser] = await registerNewServiceUserByTestClient(admin)
        integratedServiceUser = await makeLoggedInClient({ email: newServiceUser.email, password: newServiceUser.password })
        await createTestB2BAppAccessRight(admin, integratedServiceUser.user, app)

        const [newServiceUser2] = await registerNewServiceUserByTestClient(admin)
        integratedToAnotherAppServiceUser = await makeLoggedInClient({ email: newServiceUser2.email, password: newServiceUser2.password })
        await createTestB2BAppAccessRight(admin, integratedToAnotherAppServiceUser.user, anotherApp)
    })

    describe('Accesses', () => {
        describe('Admin', () => {
            test('Can create', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                expect(createdAccessRightSet).toBeDefined()
                expect(createdAccessRightSet.id).toMatch(UUID_RE)
                expect(createdAccessRightSet).toHaveProperty('app.id', app.id)
                expect(createdAccessRightSet).toHaveProperty('canManageOrganizations', false)
                expect(createdAccessRightSet).toHaveProperty('canReadOrganizations', false)
                expect(createdAccessRightSet).toHaveProperty('canManageContacts', false)
                expect(createdAccessRightSet).toHaveProperty('canReadContacts', false)
                expect(createdAccessRightSet).toHaveProperty('canManageProperties', false)
                expect(createdAccessRightSet).toHaveProperty('canReadProperties', false)
            })

            test('Can read everything', async () => {
                const [foundedAccessRightSet] = await B2BAppAccessRightSet.getAll(admin, {
                    id: accessRightSet.id,
                })
                expect(foundedAccessRightSet).toHaveProperty('id', accessRightSet.id)
            })

            test('Can update', async () => {
                const [updatedAccessRightSet] = await updateTestB2BAppAccessRightSet(admin, accessRightSet.id)
                expect(updatedAccessRightSet).toHaveProperty('id', accessRightSet.id)
            })

            test('Can soft-delete', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                const [deletedAccessRightSet] = await B2BAppAccessRightSet.softDelete(admin, createdAccessRightSet.id)
                expect(!!deletedAccessRightSet.deletedAt).toBeTruthy()
            })

            test('Can not hard-delete', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRightSet.delete(admin, createdAccessRightSet.id)
                })
            })
        })

        describe('Support', () => {
            test('Can create', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(support, app)

                expect(createdAccessRightSet).toBeDefined()
                expect(createdAccessRightSet.id).toMatch(UUID_RE)
                expect(createdAccessRightSet).toHaveProperty('app.id', app.id)
            })

            test('Can read everything', async () => {
                const [foundedAccessRightSet] = await B2BAppAccessRightSet.getAll(support, {
                    id: accessRightSet.id,
                })
                expect(foundedAccessRightSet).toHaveProperty('id', accessRightSet.id)
            })

            test('Can update', async () => {
                const [updatedAccessRightSet] = await updateTestB2BAppAccessRightSet(support, accessRightSet.id)
                expect(updatedAccessRightSet).toHaveProperty('id', accessRightSet.id)
            })

            test('Can soft-delete', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                const [deletedAccessRightSet] = await B2BAppAccessRightSet.softDelete(support, createdAccessRightSet.id)
                expect(!!deletedAccessRightSet.deletedAt).toBeTruthy()
            })

            test('Can not hard-delete', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRightSet.delete(support, createdAccessRightSet.id)
                })
            })
        })

        describe('Service user', () => {
            test('Can not create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2BAppAccessRightSet(integratedServiceUser, app)
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2BAppAccessRightSet(integratedToAnotherAppServiceUser, app)
                })
            })

            test('Can only read if integrated with app', async () => {
                const [foundedAccessRightSet] = await B2BAppAccessRightSet.getAll(integratedServiceUser, {
                    id: accessRightSet.id,
                })
                expect(foundedAccessRightSet).toHaveProperty('id', accessRightSet.id)

                const [foundedAccessRightSetForAnotherApp] = await B2BAppAccessRightSet.getAll(integratedToAnotherAppServiceUser, {
                    id: accessRightSet.id,
                })
                expect(foundedAccessRightSetForAnotherApp).toBeUndefined()
            })

            test('Can not update', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2BAppAccessRightSet(integratedServiceUser, accessRightSet.id)
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2BAppAccessRightSet(integratedToAnotherAppServiceUser, accessRightSet.id)
                })
            })

            test('Can not soft-delete', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRightSet.softDelete(integratedToAnotherAppServiceUser, createdAccessRightSet.id)
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRightSet.softDelete(integratedServiceUser, createdAccessRightSet.id)
                })
            })

            test('Can not hard-delete', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRightSet.delete(integratedServiceUser, createdAccessRightSet.id)
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRightSet.delete(integratedToAnotherAppServiceUser, createdAccessRightSet.id)
                })
            })
        })

        describe('Not service user', () => {
            test('Can not create', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestB2BAppAccessRightSet(notServiceUser, app)
                })
            })

            test('Can not read', async () => {
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await B2BAppAccessRightSet.getAll(notServiceUser, {
                        id: accessRightSet.id,
                    })
                })
            })

            test('Can not update', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestB2BAppAccessRightSet(notServiceUser, accessRightSet.id)
                })
            })

            test('Can not soft-delete', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRightSet.softDelete(notServiceUser, createdAccessRightSet.id)
                })
            })

            test('Can not hard-delete', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRightSet.delete(notServiceUser, createdAccessRightSet.id)
                })
            })
        })

        describe('Anonymous', () => {
            test('Can not create', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestB2BAppAccessRightSet(anonymous, app)
                })
            })

            test('Can not read', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await B2BAppAccessRightSet.getAll(anonymous, {
                        id: accessRightSet.id,
                    })
                })
            })

            test('Can not update', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestB2BAppAccessRightSet(anonymous, accessRightSet.id)
                })
            })

            test('Can not soft-delete', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await B2BAppAccessRightSet.softDelete(anonymous, createdAccessRightSet.id)
                })
            })

            test('Can not hard-delete', async () => {
                const [app] = await createTestB2BApp(admin)
                const [createdAccessRightSet] = await createTestB2BAppAccessRightSet(admin, app)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await B2BAppAccessRightSet.delete(anonymous, createdAccessRightSet.id)
                })
            })
        })
    })

    describe('Constraints', () => {
        test('Cannot be created 2 links for a app', async () => {
            const [app] = await createTestB2BApp(admin)
            await createTestB2BAppAccessRightSet(admin, app)

            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestB2BAppAccessRightSet(admin, app)
            }, 'b2b_app_access_right_set_unique_app')
        })
    })
})

describe('B2BApp permissions for service user', () => {
    let admin
    let user
    let serviceUserClient
    let serviceUser

    beforeEach(async () => {
        admin = await makeLoggedInAdminClient()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        const [newServiceUser] = await registerNewServiceUserByTestClient(admin)
        serviceUser = newServiceUser
        serviceUserClient = await makeLoggedInClient({ email: newServiceUser.email, password: newServiceUser.password })
    })

    test('Get all permissions for app', async () => {
        const [app] = await createTestB2BApp(admin)
        const [accessRightSet] = await createTestB2BAppAccessRightSet(admin, app)
        await createTestB2BAppAccessRight(admin, serviceUser, app, accessRightSet)

        const foundRight = await B2BAppAccessRight.getOne(admin, { app: { id: app.id } })
        expect(foundRight).toHaveProperty('accessRightSet.canReadOrganizations', false)
        expect(foundRight).toHaveProperty('accessRightSet.canManageOrganizations', false)
        expect(foundRight).toHaveProperty('accessRightSet.canReadProperties', false)
        expect(foundRight).toHaveProperty('accessRightSet.canManageProperties', false)
        expect(foundRight).toHaveProperty('accessRightSet.canReadContacts', false)
        expect(foundRight).toHaveProperty('accessRightSet.canManageContacts', false)
    })

    test('Organization', async () => {
        const [organization] = await registerNewOrganization(user)

        const [app] = await createTestB2BApp(admin)
        await createTestB2BAppContext(admin, app, organization, { status: 'Finished' })
        const [right] = await createTestB2BAppAccessRight(admin, serviceUser, app)

        // B2BApp without permissions
        const countWithoutPermissions = await Organization.count(serviceUserClient, {})
        expect(countWithoutPermissions).toBe(0)
        const propertyWithoutPermissions = await Organization.getOne(serviceUserClient, { id: organization.id })
        expect(propertyWithoutPermissions).toBeUndefined()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestOrganization(serviceUserClient)
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestOrganization(serviceUserClient, organization.id, {})
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await Organization.softDelete(serviceUserClient, organization.id)
        })

        const countByUser = await Organization.count(user, {})
        expect(countByUser).toBe(1)

        // you cannot create a field "canManageOrganizations: true". Only reading! Always false!
        await catchErrorFrom(async () => {
            await createTestB2BAppAccessRightSet(admin, right.id, {
                canManageOrganizations: false,
            })
        }, (e) => {
            expect(e.errors[0].message).toContain('Field "canManageOrganizations" is not defined by type "B2BAppAccessRightCreateInput"')
        })

        // add permissions for B2BApp
        const [accessRightSet] = await createTestB2BAppAccessRightSet(admin, app, {
            canReadOrganizations: true,
        })
        await updateTestB2BAppAccessRight(admin, right.id, { accessRightSet: { connect: { id: accessRightSet.id } } })

        // you can update 'canReadOrganizations'
        await updateTestB2BAppAccessRight(admin, app, {
            canReadOrganizations: true,
        })

        // you cannot update a field "canManageOrganizations". Only reading! Always false!
        await catchErrorFrom(async () => {
            await updateTestB2BAppAccessRight(admin, right.id, {
                canManageOrganizations: false,
            })
        }, (e) => {
            expect(e.errors[0].message).toContain('Field "canManageOrganizations" is not defined by type "B2BAppAccessRightUpdateInput"')
        })

        // B2BApp with permission "canReadOrganization"
        const countWithPermissions = await Organization.count(serviceUserClient, {})
        expect(countWithPermissions).toBe(1)
        const organizationWithPermissions = await Organization.getOne(serviceUserClient, { id: organization.id })
        expect(organizationWithPermissions.id).toBe(organization.id)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestOrganization(serviceUserClient)
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestOrganization(serviceUserClient, organization.id, {})
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await Organization.softDelete(serviceUserClient, organization.id)
        })
    })

    test('Property', async () => {
        const [organization] = await registerNewOrganization(user)

        const [app] = await createTestB2BApp(admin)
        await createTestB2BAppContext(admin, app, organization, { status: 'Finished' })
        const [right] = await createTestB2BAppAccessRight(admin, serviceUser, app)

        const [property] = await createTestProperty(user, organization)

        // B2BApp without permissions
        const countWithoutPermissions = await Property.count(serviceUserClient, {})
        expect(countWithoutPermissions).toBe(0)
        const propertyWithoutPermissions = await Property.getOne(serviceUserClient, { id: property.id })
        expect(propertyWithoutPermissions).toBeUndefined()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestProperty(serviceUserClient, organization)
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestProperty(serviceUserClient, property.id, {})
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await Property.softDelete(serviceUserClient, property.id)
        })

        const countByUser = await Property.count(user, {})
        expect(countByUser).toBe(1)
        const propertyByUser = await Property.getOne(user, { id: property.id })
        expect(propertyByUser.id).toBe(property.id)

        // add permissions for B2BApp
        const [accessRightSet] = await createTestB2BAppAccessRightSet(admin, app, {
            canReadProperties: true,
            canManageProperties: true,
            canReadOrganizations: true, // required permission for manage property
        })
        await updateTestB2BAppAccessRight(admin, right.id, { accessRightSet: { connect: { id: accessRightSet.id } } })

        // you can update 'canReadProperties' and 'canManageProperties'
        await updateTestB2BAppAccessRight(admin, app, {
            canReadProperties: true,
            canManageProperties: true,
        })

        // B2BApp with permissions
        await createTestProperty(serviceUserClient, organization)

        const countByUser2 = await Property.count(user, { organization: { id: organization.id } })
        expect(countByUser2).toBe(2)

        const countWithPermissions = await Property.count(serviceUserClient, {})
        expect(countWithPermissions).toBe(2)
        const propertyWithPermissions = await Property.getOne(serviceUserClient, { id: property.id })
        expect(propertyWithPermissions.id).toBe(property.id)

        await updateTestProperty(serviceUserClient, property.id, {})
        await Property.softDelete(serviceUserClient, property.id)

        const countByUser3 = await Property.count(user, { organization: { id: organization.id } })
        expect(countByUser3).toBe(1)
    })

    test('Contact', async () => {
        const [organization] = await registerNewOrganization(user)

        const [app] = await createTestB2BApp(admin)
        await createTestB2BAppContext(admin, app, organization, { status: 'Finished' })
        const [right] = await createTestB2BAppAccessRight(admin, serviceUser, app)

        const [property] = await createTestProperty(user, organization)
        const [contact] = await createTestContact(user, organization, property)

        // B2BApp without permissions
        const countWithoutPermissions = await Contact.count(serviceUserClient, {})
        expect(countWithoutPermissions).toBe(0)
        const contactWithoutPermissions = await Contact.getOne(serviceUserClient, { id: contact.id })
        expect(contactWithoutPermissions).toBeUndefined()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestContact(serviceUserClient, organization, property)
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestContact(serviceUserClient, contact.id, {})
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await Contact.softDelete(serviceUserClient, contact.id)
        })

        const countByUser = await Contact.count(user, {})
        expect(countByUser).toBe(1)
        const contactByUser = await Contact.getOne(user, { id: contact.id })
        expect(contactByUser.id).toBe(contact.id)

        // add permissions for B2BApp
        const [accessRightSet] = await createTestB2BAppAccessRightSet(admin, app, {
            canReadContacts: true,
            canManageContacts: true,
            canReadOrganizations: true, // required permission for manage contact
            canReadProperties: true, // required permission for manage contact
        })
        await updateTestB2BAppAccessRight(admin, right.id, { accessRightSet: { connect: { id: accessRightSet.id } } })

        // you can update 'canReadContacts' and 'canManageContacts'
        await updateTestB2BAppAccessRight(admin, app, {
            canReadContacts: true,
            canManageContacts: true,
        })

        // B2BApp with permissions
        await createTestContact(serviceUserClient, organization, property)

        const countByUser2 = await Contact.count(user, { organization: { id: organization.id } })
        expect(countByUser2).toBe(2)

        const countWithPermissions = await Contact.count(serviceUserClient, {})
        expect(countWithPermissions).toBe(2)
        const contactWithPermissions = await Contact.getOne(serviceUserClient, { id: contact.id })
        expect(contactWithPermissions.id).toBe(contact.id)

        await updateTestContact(serviceUserClient, contact.id, {})
        await Contact.softDelete(serviceUserClient, contact.id)

        const countByUser3 = await Contact.count(user, { organization: { id: organization.id } })
        expect(countByUser3).toBe(1)
    })

    // NOTE: Currently these schemes are not added to read/manage the service user.
    //       It is used to local test the preprocessor
    test.skip('Ticket and TicketComment', async () => {
        const [organization] = await registerNewOrganization(user)

        const [app] = await createTestB2BApp(admin)
        await createTestB2BAppContext(admin, app, organization, { status: 'Finished' })
        const [right] = await createTestB2BAppAccessRight(admin, serviceUser, app)

        const [property] = await createTestProperty(user, organization)
        const [ticket] = await createTestTicket(user, organization, property)

        const [ticketComment] = await createTestTicketComment(user, ticket, user.user)

        // B2BApp without permissions
        const countWithoutPermissions = await TicketComment.count(serviceUserClient, {})
        expect(countWithoutPermissions).toBe(0)
        const contactWithoutPermissions = await TicketComment.getOne(serviceUserClient, {
            ticket: { id: ticket.id },
        })
        expect(contactWithoutPermissions).toBeUndefined()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestTicket(serviceUserClient, organization, property)
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestTicket(serviceUserClient, ticket.id)
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await Ticket.softDelete(serviceUserClient, ticket.id)
        })

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestTicketComment(serviceUserClient, ticket, serviceUser)
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestTicketComment(serviceUserClient, ticketComment.id)
        })
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await TicketComment.softDelete(serviceUserClient, ticketComment.id)
        })

        // add permissions for B2BApp
        const [accessRightSet] = await createTestB2BAppAccessRightSet(admin, app, {
            canReadContacts: true,
            canManageContacts: true,
            canReadOrganizations: true,
            canReadProperties: true,
            canReadTickets: true,
            canManageTickets: true,
            canReadTicketComments: true,
            canManageTicketComments: true,
        })
        await updateTestB2BAppAccessRight(admin, right.id, { accessRightSet: { connect: { id: accessRightSet.id } } })

        // you can update 'canReadTickets', 'canManageTickets', 'canReadTicketComments' and 'canManageTicketComments'
        await updateTestB2BAppAccessRight(admin, app, {
            canReadTickets: true,
            canManageTickets: true,
            canReadTicketComments: true,
            canManageTicketComments: true,
        })

        await createTestTicket(serviceUserClient, organization, property)

        {
            const countByUser2 = await Ticket.count(user, { organization: { id: organization.id } })
            expect(countByUser2).toBe(2)

            const countWithPermissions = await Ticket.count(serviceUserClient, {})
            expect(countWithPermissions).toBe(2)
            const contactWithPermissions = await Ticket.getOne(serviceUserClient, { id: ticket.id })
            expect(contactWithPermissions.id).toBe(ticket.id)
        }

        await updateTestTicket(serviceUserClient, ticket.id, {})

        // NOTE: problem with field accesses - the field "user" can only be read/submitted by the user who created the comment
        const [tcByServiceUser] = await createTestTicketComment(serviceUserClient, ticket, serviceUser)

        {
            const countByUser2 = await TicketComment.count(user, { ticket: { organization: { id: organization.id } } })
            expect(countByUser2).toBe(2)

            const countWithPermissions = await TicketComment.count(serviceUserClient, {})
            expect(countWithPermissions).toBe(2)
            const contactWithPermissions = await TicketComment.getOne(serviceUserClient, { id: ticketComment.id })
            expect(contactWithPermissions.id).toBe(ticketComment.id)
        }

        // NOTE: problem with field accesses - the field "user" can only be read/submitted by the user who created the comment
        await updateTestTicketComment(serviceUserClient, tcByServiceUser.id)

        // await Ticket.softDelete(serviceUserClient, ticketByServiceUser.id)
        await TicketComment.softDelete(serviceUserClient, tcByServiceUser.id)

        {
            const countByUser3 = await Ticket.count(user, { organization: { id: organization.id } })
            expect(countByUser3).toBe(2)
        }

        {
            const countByUser3 = await TicketComment.count(user, { ticket: { organization: { id: organization.id } } })
            expect(countByUser3).toBe(1)
        }
    })
})
