/**
 * Generated by `createschema help.Help 'organization:Relationship:Organization:CASCADE; name?:Text; properties:Relationship:Property:SET_NULL; content:Text;'`
 */
const faker = require('faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@core/keystone/test.utils')

const { Help, createTestHelp, updateTestHelp } = require('@condo/domains/help/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects } = require('@condo/domains/common/utils/testSchema')
const { createTestOrganization, createTestOrganizationEmployeeRole, createTestOrganizationEmployee, createTestOrganizationLink } = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

describe('Help', () => {
    describe('Permissions', () => {
        describe('Create', () => {
            describe('Anonymous', () => {
                it('Cannot create Help', async () => {
                    const client = await makeClient()

                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)
                    const [property1] = await createTestProperty(admin, organization)
                    const [property2] = await createTestProperty(admin, organization)

                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await createTestHelp(client, organization, {
                            properties: {
                                connect: [
                                    { id: property1.id },
                                    { id: property2.id },
                                ],
                            },
                        })
                    })
                })
            })

            describe('Admin', () => {
                it('Can create Help', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)
                    const [property1] = await createTestProperty(admin, organization)
                    const [property2] = await createTestProperty(admin, organization)

                    const [help] = await createTestHelp(admin, organization, {
                        properties: {
                            connect: [
                                { id: property1.id },
                                { id: property2.id },
                            ],
                        },
                    })

                    expect(help.id).toMatch(UUID_RE)
                    expect(help.properties).toHaveLength(2)
                    expect(help.properties[0].id).toEqual(property1.id)
                    expect(help.properties[1].id).toEqual(property2.id)
                })
            })

            describe('Organization Employee', () => {
                it('can create Help in the organization in which he is an employee with "canManageHelps" is true', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                        canManageHelps: true,
                    })
                    await createTestOrganizationEmployee(admin, organization, user.user, role)
                    const [property] = await createTestProperty(admin, organization)

                    const [help] = await createTestHelp(user, organization, {
                        properties: {
                            connect: [
                                { id: property.id },
                            ],
                        },
                    })

                    expect(help.id).toMatch(UUID_RE)
                    expect(help.properties).toHaveLength(1)
                    expect(help.properties[0].id).toEqual(property.id)
                })

                it('can create Help in the related "to" organization ' +
                    'if in the related "from" organization the employee with the "canManageHelps" is true', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const clientFrom = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationFrom] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                        canManageHelps: true,
                    })
                    await createTestOrganizationEmployee(admin, organizationFrom, clientFrom.user, role)

                    const [organizationTo] = await createTestOrganization(admin)
                    const [propertyTo] = await createTestProperty(admin, organizationTo)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [help] = await createTestHelp(clientFrom, organizationTo, {
                        properties: {
                            connect: [
                                { id: propertyTo.id },
                            ],
                        },
                    })

                    expect(help.id).toMatch(UUID_RE)
                    expect(help.properties).toHaveLength(1)
                    expect(help.properties[0].id).toEqual(propertyTo.id)
                })

                it('cannot create Help in the organization in which he is not an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestHelp(user, organization)
                    })
                })

                it('cannot create Help in the organization in which he is an employee with "canManageHelps" is false', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                    await createTestOrganizationEmployee(admin, organization, user.user, role)
                    const [property] = await createTestProperty(admin, organization)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestHelp(user, organization, {
                            properties: {
                                connect: [
                                    { id: property.id },
                                ],
                            },
                        })
                    })
                })

                it('cannot create Help in the related "to" organization' +
                    'if in the related "from" organization the employee with "canManageHelps" is false', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const clientFrom = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationFrom] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom)
                    await createTestOrganizationEmployee(admin, organizationFrom, clientFrom.user, role)

                    const [organizationTo] = await createTestOrganization(admin)
                    const [propertyTo] = await createTestProperty(admin, organizationTo)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestHelp(clientFrom, organizationTo, {
                            properties: {
                                connect: [
                                    { id: propertyTo.id },
                                ],
                            },
                        })
                    })
                })

                it('cannot create Help in the related "from" organization', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const [organizationFrom] = await createTestOrganization(admin)

                    const clientTo = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationTo] = await createTestOrganization(admin)
                    const [propertyTo] = await createTestProperty(admin, organizationFrom)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationTo, {
                        canManageHelps: true,
                    })
                    await createTestOrganizationEmployee(admin, organizationTo, clientTo.user, role)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestHelp(clientTo, organizationFrom, {
                            properties: {
                                connect: [
                                    { id: propertyTo.id },
                                ],
                            },
                        })
                    })
                })
            })
        })

        describe('Read', () => {
            describe('Anonymous', () => {
                it('Cannot read Helps', async () => {
                    const client = await makeClient()

                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)
                    const [property1] = await createTestProperty(admin, organization)
                    const [property2] = await createTestProperty(admin, organization)

                    await createTestHelp(admin, organization, {
                        properties: {
                            connect: [
                                { id: property1.id },
                                { id: property2.id },
                            ],
                        },
                    })

                    await expectToThrowAuthenticationErrorToObjects(async () => {
                        await Help.getAll(client)
                    })
                })
            })

            describe('Admin', () => {
                it('Can read Helps', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)
                    const [property1] = await createTestProperty(admin, organization)
                    const [property2] = await createTestProperty(admin, organization)

                    const [createdHelp] = await createTestHelp(admin, organization, {
                        properties: {
                            connect: [
                                { id: property1.id },
                                { id: property2.id },
                            ],
                        },
                    })

                    const help = await Help.getOne(admin, { id: createdHelp.id })

                    expect(help.id).toMatch(UUID_RE)
                    expect(help.properties).toHaveLength(2)
                    expect(help.properties[0].id).toEqual(property1.id)
                    expect(help.properties[1].id).toEqual(property2.id)
                })
            })

            describe('Organization Employee', () => {
                it('can read Helps from the organization in which he is an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                    await createTestOrganizationEmployee(admin, organization, user.user, role)
                    const [property] = await createTestProperty(admin, organization)

                    const [createdHelp] = await createTestHelp(admin, organization, {
                        properties: {
                            connect: [
                                { id: property.id },
                            ],
                        },
                    })

                    const help = await Help.getOne(user, { id: createdHelp.id })

                    expect(help.id).toMatch(UUID_RE)
                    expect(help.properties).toHaveLength(1)
                    expect(help.properties[0].id).toEqual(property.id)
                })

                it('can read Helps from the related "to" organization', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const clientFrom = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationFrom] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom)
                    await createTestOrganizationEmployee(admin, organizationFrom, clientFrom.user, role)

                    const [organizationTo] = await createTestOrganization(admin)
                    const [propertyTo] = await createTestProperty(admin, organizationTo)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [createdHelp] = await createTestHelp(admin, organizationTo, {
                        properties: {
                            connect: [
                                { id: propertyTo.id },
                            ],
                        },
                    })

                    const help = await Help.getOne(clientFrom, { id: createdHelp.id })

                    expect(help.id).toMatch(UUID_RE)
                    expect(help.properties).toHaveLength(1)
                    expect(help.properties[0].id).toEqual(propertyTo.id)
                })

                it('cannot read Helps from the organization in which he is not an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)
                    const [property] = await createTestProperty(admin, organization)

                    const [createdHelp] = await createTestHelp(admin, organization, {
                        properties: {
                            connect: [
                                { id: property.id },
                            ],
                        },
                    })

                    const help = await Help.getOne(user, { id: createdHelp.id })

                    expect(help).toBeUndefined()
                })

                it('cannot read Helps from the related "from" organization', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const [organizationFrom] = await createTestOrganization(admin)
                    const [propertyFrom] = await createTestProperty(admin, organizationFrom)

                    const clientTo = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationTo] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationTo, {
                        canManageHelps: true,
                    })
                    await createTestOrganizationEmployee(admin, organizationTo, clientTo.user, role)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [createdHelp] = await createTestHelp(admin, organizationFrom, {
                        properties: {
                            connect: [
                                { id: propertyFrom.id },
                            ],
                        },
                    })

                    const help = await Help.getOne(clientTo, { id: createdHelp.id })

                    expect(help).toBeUndefined()
                })
            })
        })

        describe('Update', () => {
            describe('Anonymous', () => {
                it('Cannot update Help', async () => {
                    const client = await makeClient()

                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)
                    const [property1] = await createTestProperty(admin, organization)
                    const [property2] = await createTestProperty(admin, organization)

                    const [help] = await createTestHelp(admin, organization, {
                        properties: {
                            connect: [
                                { id: property1.id },
                            ],
                        },
                    })

                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await updateTestHelp(client, help.id, {
                            properties: {
                                connect: [
                                    { id: property2.id },
                                ],
                            },
                        })
                    })
                })
            })

            describe('Admin', () => {
                it('Can update Help', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const [organization] = await createTestOrganization(admin)
                    const [property1] = await createTestProperty(admin, organization)
                    const [property2] = await createTestProperty(admin, organization)
                    const newContent = faker.random.alphaNumeric(8)

                    const [help] = await createTestHelp(admin, organization, {
                        properties: {
                            connect: [
                                { id: property1.id },
                            ],
                        },
                    })

                    const [updatedHelp] = await updateTestHelp(admin, help.id, {
                        properties: {
                            connect: [
                                { id: property2.id },
                            ],
                        },
                        content: newContent,
                    })

                    expect(updatedHelp.id).toEqual(help.id)
                    expect(updatedHelp.properties).toHaveLength(2)
                    expect(updatedHelp.properties[0].id).toEqual(property1.id)
                    expect(updatedHelp.properties[1].id).toEqual(property2.id)
                    expect(updatedHelp.content).toEqual(newContent)
                })
            })

            describe('Organization Employee', () => {
                it('can update Help in the organization in which he is an employee with "canManageHelps" is true', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
                        canManageHelps: true,
                    })
                    await createTestOrganizationEmployee(admin, organization, user.user, role)
                    const [property] = await createTestProperty(admin, organization)
                    const newContent = faker.random.alphaNumeric(8)

                    const [help] = await createTestHelp(user, organization, {
                        properties: {
                            connect: [
                                { id: property.id },
                            ],
                        },
                    })

                    const [updatedHelp] = await updateTestHelp(user, help.id, {
                        content: newContent,
                    })

                    expect(updatedHelp.id).toEqual(help.id)
                    expect(updatedHelp.properties).toEqual(help.properties)
                    expect(updatedHelp.content).toEqual(newContent)
                })

                it('can update Help in the related "to" organization' +
                    'if in the related "from" organization the employee with the "canManageHelps" is true', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const clientFrom = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationFrom] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom, {
                        canManageHelps: true,
                    })
                    await createTestOrganizationEmployee(admin, organizationFrom, clientFrom.user, role)

                    const [organizationTo] = await createTestOrganization(admin)
                    const [propertyTo] = await createTestProperty(admin, organizationTo)
                    const newContent = faker.random.alphaNumeric(8)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [help] = await createTestHelp(clientFrom, organizationTo, {
                        properties: {
                            connect: [
                                { id: propertyTo.id },
                            ],
                        },
                    })

                    const [updatedHelp] = await updateTestHelp(clientFrom, help.id, {
                        content: newContent,
                    })

                    expect(updatedHelp.id).toEqual(help.id)
                    expect(updatedHelp.properties).toEqual(help.properties)
                    expect(updatedHelp.content).toEqual(newContent)
                })

                it('cannot update Help in the organization in which he is not an employee', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)
                    const [property] = await createTestProperty(admin, organization)
                    const newContent = faker.random.alphaNumeric(8)

                    const [help] = await createTestHelp(admin, organization, {
                        properties: {
                            connect: [
                                { id: property.id },
                            ],
                        },
                    })

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestHelp(user, help.id, {
                            content: newContent,
                        })
                    })
                })

                it('cannot update Help in the organization in which he is an employee with "canManageHelps" is false', async () => {
                    const admin = await makeLoggedInAdminClient()
                    const user = await makeClientWithNewRegisteredAndLoggedInUser()

                    const [organization] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organization)
                    await createTestOrganizationEmployee(admin, organization, user.user, role)
                    const [property] = await createTestProperty(admin, organization)
                    const newContent = faker.random.alphaNumeric(8)

                    const [help] = await createTestHelp(admin, organization, {
                        properties: {
                            connect: [
                                { id: property.id },
                            ],
                        },
                    })

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestHelp(user, help.id, {
                            content: newContent,
                        })
                    })
                })

                it('cannot update Help in the related "to" organization' +
                    'if in the related "from" organization the employee with "canManageHelps" is false', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const clientFrom = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationFrom] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationFrom)
                    await createTestOrganizationEmployee(admin, organizationFrom, clientFrom.user, role)

                    const [organizationTo] = await createTestOrganization(admin)
                    const [propertyTo] = await createTestProperty(admin, organizationTo)
                    const newContent = faker.random.alphaNumeric(8)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [help] = await createTestHelp(admin, organizationTo, {
                        properties: {
                            connect: [
                                { id: propertyTo.id },
                            ],
                        },
                    })

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestHelp(clientFrom, help.id, {
                            content: newContent,
                        })
                    })
                })

                it('cannot update Help in the related "from" organization', async () => {
                    const admin = await makeLoggedInAdminClient()

                    const [organizationFrom] = await createTestOrganization(admin)
                    const [propertyFrom] = await createTestProperty(admin, organizationFrom)
                    const newContent = faker.random.alphaNumeric(8)
                    const clientTo = await makeClientWithNewRegisteredAndLoggedInUser()
                    const [organizationTo] = await createTestOrganization(admin)
                    const [role] = await createTestOrganizationEmployeeRole(admin, organizationTo, {
                        canManageHelps: true,
                    })
                    await createTestOrganizationEmployee(admin, organizationTo, clientTo.user, role)

                    await createTestOrganizationLink(admin, organizationFrom, organizationTo)

                    const [help] = await createTestHelp(admin, organizationFrom, {
                        properties: {
                            connect: [
                                { id: propertyFrom.id },
                            ],
                        },
                    })

                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestHelp(clientTo, help.id, {
                            content: newContent,
                        })
                    })
                })
            })
        })
    })
})
