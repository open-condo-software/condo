/**
 * Generated by `createservice resident.FindUnitsByAddressService --type queries`
 */

const get = require('lodash/get')
const slice = require('lodash/slice')

const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { PARKING_UNIT_TYPE, UNIT_TYPES, FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { PROPERTY_MAP_JSON_FIELDS } = require('@condo/domains/property/gql')
const { Property: PropertyAPI } = require('@condo/domains/property/utils/serverSchema')
const { getUnitsFromSections } = require('@condo/domains/property/utils/serverSchema/helpers')
const access = require('@condo/domains/resident/access/FindUnitsByAddressService')
const {
    RESIDENT_FIND_UNITS_WINDOW_SEC,
    MAX_RESIDENT_FIND_UNITS_BY_WINDOW_SEC,
} = require('@condo/domains/resident/constants/constants')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { RedisGuard } = require('@condo/domains/user/utils/serverSchema/guards')


const TOTAL_UNITS_LIMIT = 25000

const redisGuard = new RedisGuard()

const checkLimits = async (uniqueField, context) => {
    await redisGuard.checkCustomLimitCounters(
        `find-units-by-address-${uniqueField}`,
        RESIDENT_FIND_UNITS_WINDOW_SEC,
        MAX_RESIDENT_FIND_UNITS_BY_WINDOW_SEC,
        context,
    )
}

const FindUnitsByAddressService = new GQLCustomSchema('FindUnitsByAddressService', {
    types: [
        {
            access: true,
            type: 'input FindUnitsByAddressInput { addressKey: String! }',
        },
        {
            access: true,
            type: 'type UnitType { unitName: String!, unitType: BuildingUnitSubType! }',
        },
        {
            access: true,
            type: 'type FindUnitsByAddressOutput { units: [UnitType]! }',
        },
    ],
    
    queries: [
        {
            access: access.canFindUnitsByAddress,
            schema: 'findUnitsByAddress (data: FindUnitsByAddressInput!): FindUnitsByAddressOutput',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { addressKey } = data

                if (context.authedItem.type === RESIDENT) {
                    await checkLimits(context.authedItem.id, context)
                }

                const [property] = await PropertyAPI.getAll(
                    context,
                    {
                        addressKey,
                        deletedAt: null,
                    },
                    `id map { ${PROPERTY_MAP_JSON_FIELDS} } address addressKey isApproved`,
                    { sortBy: ['isApproved_DESC', 'createdAt_ASC'], first: 1 },
                )

                if (!property) return { units: [] }

                const unitsFromSections = getUnitsFromSections(get(property, ['map', 'sections'])).map(value => ({
                    unitName: value.label, unitType: value.unitType || FLAT_UNIT_TYPE,
                }))

                const unitsFromParking = getUnitsFromSections(get(property, ['map', 'parking'])).map(value => ({
                    unitName: value.label, unitType: value.unitType || PARKING_UNIT_TYPE,
                }))

                // This is here just to double-check values and make sure we won't get graphql error
                // We also want to filter out the unitNames with empty strings
                const validUnits = [...unitsFromSections, ...unitsFromParking].filter(value => !!(value.unitName) && UNIT_TYPES.includes(value.unitType))

                // This is here to prevent abuse and DoS attacks to resident app
                const validAndLimitedUnits = slice(validUnits, 0, Math.min(validUnits.length, TOTAL_UNITS_LIMIT))

                return { units: validAndLimitedUnits }
            },
        },
    ],
    
})

module.exports = {
    FindUnitsByAddressService,
}
