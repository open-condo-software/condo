/**
 * Generated by `createservice resident.FindUnitsByAddressService --type queries`
 */

const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/resident/access/FindUnitsByAddressService')

const { Property: PropertyAPI } = require('../../property/utils/serverSchema')
const { RESIDENT } = require('../../user/constants/common')
const { RedisGuard } = require('../../user/utils/serverSchema/guards')
const {
    RESIDENT_FIND_UNITS_WINDOW_SEC,
    MAX_RESIDENT_FIND_UNITS_BY_WINDOW_SEC,
} = require('../constants/constants')

const redisGuard = new RedisGuard()

const checkLimits = async (uniqueField, context) => {
    await redisGuard.checkCustomLimitCounters(
        `find-units-by-address-${uniqueField}`,
        RESIDENT_FIND_UNITS_WINDOW_SEC,
        MAX_RESIDENT_FIND_UNITS_BY_WINDOW_SEC,
        context,
    )
}

const FindUnitsByAddressService = new GQLCustomSchema('FindUnitsByAddressService', {
    types: [
        {
            access: true,
            type: 'input FindUnitsByAddressInput { addressKey: String! }',
        },
        {
            access: true,
            type: 'type UnitType { unitName: String!, unitType: BuildingUnitType! }',
        },
        {
            access: true,
            type: 'type FindUnitsByAddressOutput { units: [UnitType]! }',
        },
    ],
    
    queries: [
        {
            access: access.canFindUnitsByAddress,
            schema: 'findUnitsByAddress (data: FindUnitsByAddressInput!): FindUnitsByAddressOutput',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { addressKey } = data

                if (context.authedItem.type === RESIDENT) {
                    await checkLimits(context.authedItem.id, context)
                }

                const property = await PropertyAPI.getAll(
                    context,
                    {
                        addressKey,
                    },
                    'id map',
                    { sortBy: ['isApproved_DESC', 'createdAt_ASC'], first: 1 },
                )

                if (property.length === 0) return { units: [] }

                return []
            },
        },
    ],
    
})

module.exports = {
    FindUnitsByAddressService,
}
