/**
 * Generated by `createschema resident.ServiceConsumer 'resident:Relationship:Resident:CASCADE; billingAccount?:Relationship:BillingAccount:SET_NULL; accountNumber:Text;'`
 */

import { createTestResident } from '../utils/testSchema'
import { createTestProperty, makeClientWithProperty } from '@condo/domains/property/utils/testSchema'
import { createTestBillingAccount, createTestBillingProperty, makeContextWithOrganizationAndIntegrationAsAdmin, } from '@condo/domains/billing/utils/testSchema'
import { buildingMapJson } from '@condo/domains/property/constants/property'
import { registerNewOrganization } from '@condo/domains/organization/utils/testSchema/Organization'
import { makeClientWithResidentUser } from '@condo/domains/user/utils/testSchema'
import { createTestOrganization, createTestOrganizationEmployee, createTestOrganizationEmployeeRole, } from '@condo/domains/organization/utils/testSchema'
import { expectToThrowAccessDeniedErrorToObj } from '@condo/domains/common/utils/testSchema'
import { makeClient } from '@core/keystone/test.utils'
const { makeLoggedInAdminClient } = require('@core/keystone/test.utils')
const { createTestServiceConsumer } = require('@condo/domains/resident/utils/testSchema')


describe('ServiceConsumer', () => {


    describe('Create', () => {
        it('can be created by admin', async () => {
            const userClient = await makeClientWithProperty()
            const adminClient = await makeLoggedInAdminClient()

            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [billingProperty] = await createTestBillingProperty(adminClient, context)
            const [billingAccount] = await createTestBillingAccount(adminClient, context, billingProperty)

            const fields = {
                billingAccount: { connect: { id: billingAccount.id } },
            }

            const [resident] = await createTestResident(adminClient, userClient.user, userClient.organization, userClient.property, fields)
            const [consumer] = await createTestServiceConsumer(adminClient, resident)
            expect(consumer.resident.id).toEqual(resident.id)
        })

        it('can be created by user with type === resident', async () => {
            const userClient = await makeClientWithResidentUser()
            const [organization] = await registerNewOrganization(userClient)
            const [property] = await createTestProperty(userClient, organization, { map: buildingMapJson })

            const [resident] = await createTestResident(userClient, userClient.user, organization, property)

            const [consumer] = await createTestServiceConsumer(userClient, resident)
            expect(consumer.resident.id).toEqual(resident.id)
        })

        it('cannot be created by other users', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const userClient = await makeClientWithProperty()
            const [organization] = await createTestOrganization(adminClient)
            const [anotherOrganization] = await createTestOrganization(adminClient)
            const [role] = await createTestOrganizationEmployeeRole(adminClient, organization)
            await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
            const [resident] = await createTestResident(adminClient, userClient.user, anotherOrganization, userClient.property)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestServiceConsumer(userClient, resident)
            })
        })

        it('cannot be created by user, who is not employed in specified organization', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const userClient = await makeClientWithProperty()
            const anotherUser = await makeClientWithProperty()
            const [resident] = await createTestResident(adminClient, userClient.user, userClient.organization, userClient.property)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestServiceConsumer(anotherUser, resident)
            })
        })

        it('cannot be created by anonymous', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const userClient = await makeClientWithProperty()
            const anonymous = await makeClient()
            const [resident] = await createTestResident(adminClient, userClient.user, userClient.organization, userClient.property)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestServiceConsumer(anonymous, resident)
            })
        })
    })
})
