/**
 * Generated by `createservice resident.RegisterServiceConsumerService --type mutations`
 */

const { makeClient } = require('@core/keystone/test.utils')
const { catchErrorFrom, expectToThrowAccessDeniedErrorToResult, expectToThrowAuthenticationErrorToResult } = require('@condo/domains/common/utils/testSchema')
const { updateTestUser } = require('@condo/domains/user/utils/testSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { createTestResident } = require('@condo/domains/resident/utils/testSchema')
const { createTestBillingProperty, createTestBillingAccount, createTestBillingIntegration, createTestBillingIntegrationOrganizationContext } = require('@condo/domains/billing/utils/testSchema')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { makeLoggedInAdminClient } = require('@core/keystone/test.utils')
const { registerConsumerServiceByTestClient } = require('@condo/domains/resident/utils/testSchema')
 
describe('RegisterServiceConsumerService', () => {
    it('creates b2b-integration serviceConsumer for valid input as resident', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const [integration] = await createTestBillingIntegration(adminClient)
        const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, userClient.organization, integration)
        const [billingProperty] = await createTestBillingProperty(adminClient, context)
        const [billingAccountAttrs] = await createTestBillingAccount(adminClient, context, billingProperty)

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.organization, userClient.property, {
            unitName: billingAccountAttrs.unitName,
        })

        const payload = {
            residentId: resident.id,
            unitName: billingAccountAttrs.unitName,
            accountNumber: billingAccountAttrs.number,
        }
        const [consumerId] = await registerConsumerServiceByTestClient(userClient, payload)

        expect(consumerId).not.toEqual(undefined)
    })

    it('does not create b2b-integration serviceConsumer for not valid input as resident', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const [integration] = await createTestBillingIntegration(adminClient)
        const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, userClient.organization, integration)
        const [billingProperty] = await createTestBillingProperty(adminClient, context)
        const [billingAccountAttrs] = await createTestBillingAccount(adminClient, context, billingProperty)

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.organization, userClient.property, {
            unitName: billingAccountAttrs.unitName,
        })

        const payload = {
            residentId: resident.id,
            unitName: billingAccountAttrs.unitName + 'not-valid-buddy',
            accountNumber: billingAccountAttrs.number,
        }

        await catchErrorFrom(async () => {
            await registerConsumerServiceByTestClient(userClient, payload)
        }, (e) => {
            expect(e.message).not.toEqual(undefined)
        })
    })

    it('cannot be invoked by non-resident user', async () => {

        const userClient = await makeClientWithProperty()

        const payload = {
            residentId: 'test-id',
            unitName: 'test-unitname',
            accountNumber: 'test-number',
        }

        await expectToThrowAccessDeniedErrorToResult(async () => {
            await registerConsumerServiceByTestClient(userClient, payload)
        })
    })

    it('cannot be invoked by anonymous', async () => {

        const userClient = await makeClient()

        const payload = {
            residentId: 'test-id',
            unitName: 'test-unitname',
            accountNumber: 'test-number',
        }

        await expectToThrowAuthenticationErrorToResult(async () => {
            await registerConsumerServiceByTestClient(userClient, payload)
        })
    })
})