/**
 * Generated by `createservice resident.RegisterServiceConsumerService --type mutations`
 */

const { createTestServiceConsumer } = require(
    '@condo/domains/resident/utils/testSchema')
const { createTestResident } = require(
    '@condo/domains/resident/utils/testSchema')
const { createTestBillingProperty, createTestBillingAccount, createTestBillingIntegration, createTestBillingIntegrationOrganizationContext } = require(
    '@condo/domains/billing/utils/testSchema')
const { makeClientWithProperty } = require(
    '@condo/domains/property/utils/testSchema')
const { makeLoggedInAdminClient } = require('@core/keystone/test.utils')

const { registerConsumerServiceByTestClient } = require('@condo/domains/resident/utils/testSchema')
 
describe('RegisterServiceConsumerService', () => {
    it('creates b2b-integration serviceConsumer for valid input', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const [integration] = await createTestBillingIntegration(adminClient)
        const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, userClient.organization, integration)
        const [billingProperty] = await createTestBillingProperty(adminClient, context)
        const [billingAccount, billingAccountAttrs] = await createTestBillingAccount(adminClient, context, billingProperty)
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.organization, userClient.property, {
            unitName: billingAccountAttrs.unitName,
        })

        const payload = {
            residentId: resident.id,
            unitName: billingAccountAttrs.unitName,
            accountNumber: billingAccountAttrs.number,
        }
        const [consumer] = await registerConsumerServiceByTestClient(adminClient, payload)

        expect(consumer.billingAccount.id).toEqual(billingAccount.id)
    })
})