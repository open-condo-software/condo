/**
 * Generated by `createservice resident.RegisterServiceConsumerService --type mutations`
 */
const faker = require('faker')


const { makeClient } = require('@open-condo/keystone/test.utils')
const { makeLoggedInAdminClient } = require('@open-condo/keystone/test.utils')
const { catchErrorFrom, expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObj } = require('@open-condo/keystone/test.utils')

const { addAcquiringIntegrationAndContext } = require('@condo/domains/acquiring/utils/testSchema')
const { addBillingIntegrationAndContext } = require('@condo/domains/billing/utils/testSchema')
const { createTestBillingProperty, createTestBillingAccount, createTestBillingIntegration, createTestBillingIntegrationOrganizationContext } = require('@condo/domains/billing/utils/testSchema')
const { COLD_WATER_METER_RESOURCE_ID } = require('@condo/domains/meter/constants/constants')
const { MeterResource, createTestMeter, Meter } = require('@condo/domains/meter/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { registerServiceConsumerByTestClient, updateTestServiceConsumer, createTestResident } = require('@condo/domains/resident/utils/testSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { updateTestUser } = require('@condo/domains/user/utils/testSchema')
 
describe('RegisterServiceConsumerService', () => {

    it('does not create same service consumer twice', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const [integration] = await createTestBillingIntegration(adminClient)
        const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, userClient.organization, integration)
        const [billingProperty] = await createTestBillingProperty(adminClient, context)
        const [billingAccountAttrs] = await createTestBillingAccount(adminClient, context, billingProperty)

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.property, {
            unitName: billingAccountAttrs.unitName,
        })

        const payload = {
            residentId: resident.id,
            accountNumber: billingAccountAttrs.number,
            organizationId: userClient.organization.id,
        }

        const out = await registerServiceConsumerByTestClient(userClient, payload)
        expect(out).not.toEqual(undefined)

        const out2 = await registerServiceConsumerByTestClient(userClient, payload)
        expect(out2.id).toEqual(out.id)
    })

    it('allows to create service consumers with same resident and accountNumber for multiple organizations', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const USER_UNIT_NAME = String(faker.datatype.number())
        const USER_ACCOUNT_NUMBER = String(faker.datatype.number())

        // Org 1 = management company organization

        const organization1 = userClient.organization

        const [resource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })
        const [integration] = await createTestBillingIntegration(adminClient)

        await createTestMeter(adminClient, organization1, userClient.property, resource, {
            unitName: USER_UNIT_NAME,
            accountNumber: USER_ACCOUNT_NUMBER,
        })
        await createTestBillingIntegrationOrganizationContext(adminClient, organization1, integration)

        // Org 2 = just some other org, which provides some services for this resident (like intercom service)

        const [organization2] = await createTestOrganization(adminClient)

        const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, organization2, integration)
        const [billingProperty] = await createTestBillingProperty(adminClient, context)
        const [billingAccountAttrs] = await createTestBillingAccount(adminClient, context, billingProperty, {
            number: USER_ACCOUNT_NUMBER,
            unitName: USER_UNIT_NAME,
        })

        // Prepare resident and create serviceConsumers

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.property, {
            unitName: billingAccountAttrs.unitName,
        })

        const payload = {
            residentId: resident.id,
            accountNumber: billingAccountAttrs.number,
            organizationId: organization2.id,
        }

        const [out] = await registerServiceConsumerByTestClient(userClient, payload)
        expect(out.id).toBeDefined()

        const payload2 = {
            residentId: resident.id,
            accountNumber: billingAccountAttrs.number,
            organizationId: organization1.id,
        }

        const [out2] = await registerServiceConsumerByTestClient(userClient, payload2)
        expect(out2.id).toBeDefined()

        expect(out.id === out2.id).toBeFalsy()
    })

    it('can create, delete and create service consumer', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const [integration] = await createTestBillingIntegration(adminClient)
        const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, userClient.organization, integration)
        const [billingProperty] = await createTestBillingProperty(adminClient, context)
        const [billingAccountAttrs] = await createTestBillingAccount(adminClient, context, billingProperty)

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.property, {
            unitName: billingAccountAttrs.unitName,
        })

        const payload = {
            residentId: resident.id,
            accountNumber: billingAccountAttrs.number,
            organizationId: userClient.organization.id,
        }
        const [out] = await registerServiceConsumerByTestClient(userClient, payload)
        expect(out).not.toEqual(undefined)

        await updateTestServiceConsumer(userClient, out.id, { deletedAt: 'true' })

        const [out2] = await registerServiceConsumerByTestClient(userClient, payload)
        expect(out2.id).toEqual(out.id)
    })

    it('creates serviceConsumer with billingAccount for separate organization', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const [ organization ] = await createTestOrganization(adminClient)

        const { billingIntegrationContext } = await addBillingIntegrationAndContext(adminClient, organization)

        const [billingProperty] = await createTestBillingProperty(adminClient, billingIntegrationContext)
        const [billingAccountAttrs] = await createTestBillingAccount(adminClient, billingIntegrationContext, billingProperty)

        const { acquiringIntegration, acquiringIntegrationContext } = await addAcquiringIntegrationAndContext(adminClient, organization)

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.property, {
            unitName: billingAccountAttrs.unitName,
        })

        const payload = {
            residentId: resident.id,
            accountNumber: billingAccountAttrs.number,
            organizationId: organization.id,
        }

        const [ out ] = await registerServiceConsumerByTestClient(userClient, payload)
        expect(out).toBeDefined()
        expect(out.accountNumber).toEqual(payload.accountNumber)
        expect(out.resident.id).toEqual(payload.residentId)
        expect(out.organization.id).toEqual(payload.organizationId)
        expect(out.residentAcquiringIntegrationContext.id).toEqual(acquiringIntegrationContext.id)
        expect(out.residentAcquiringIntegrationContext.integration).toBeDefined()
        expect(out.residentAcquiringIntegrationContext.integration.id).toEqual(acquiringIntegration.id)
        expect(out.residentAcquiringIntegrationContext.integration.hostUrl).toEqual(acquiringIntegration.hostUrl)
    })

    it('creates serviceConsumer with billingAccount and Meters', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const USER_UNIT_NAME = String(faker.datatype.number())
        const USER_ACCOUNT_NUMBER = ' ' + String(faker.datatype.number()) + ' '

        const { billingIntegration, billingIntegrationContext } = await addBillingIntegrationAndContext(adminClient, userClient.organization)
        const [billingProperty] = await createTestBillingProperty(adminClient, billingIntegrationContext)
        await createTestBillingAccount(adminClient, billingIntegrationContext, billingProperty, {
            number: USER_ACCOUNT_NUMBER,
            unitName: USER_UNIT_NAME,
        })

        await addAcquiringIntegrationAndContext(adminClient, userClient.organization)

        const [resource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })
        await createTestMeter(adminClient, userClient.organization, userClient.property, resource, {
            unitName: USER_UNIT_NAME,
            accountNumber: USER_ACCOUNT_NUMBER,
        })
        await createTestBillingIntegrationOrganizationContext(adminClient, userClient.organization, billingIntegration)

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.property, {
            unitName: USER_UNIT_NAME,
        })

        const payload = {
            residentId: resident.id,
            accountNumber: USER_ACCOUNT_NUMBER,
            organizationId: userClient.organization.id,
            extra: { paymentCategory: 'Housing' },
        }
        const [ out ] = await registerServiceConsumerByTestClient(userClient, payload)
        const [ meter ] = await Meter.getAll(userClient)

        expect(out).toBeDefined()
        expect(out.accountNumber).toEqual(payload.accountNumber)
        expect(out.resident.id).toEqual(payload.residentId)
        expect(out.organization.id).toEqual(payload.organizationId)
        expect(out.paymentCategory).toEqual('Housing')
        // TODO(zuch): Fix test
        //expect(out.residentBillingAccount.id).toEqual(billingAccountAttrs.id)
        //expect(out.residentOrganization.id).toEqual(userClient.organization.id)
        //expect(out.residentAcquiringIntegrationContext.id).toEqual(acquiringIntegrationContext.id)
        //expect(out.residentAcquiringIntegrationContext.integration).toEqual(acquiringIntegration.id)
        expect(meter).toBeDefined()
        expect(meter.number).toBeDefined()
    })

    it('creates serviceConsumer with billingAccount without Meters', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const [integration] = await createTestBillingIntegration(adminClient)
        const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, userClient.organization, integration)

        const [billingProperty] = await createTestBillingProperty(adminClient, context)
        const [billingAccountAttrs] = await createTestBillingAccount(adminClient, context, billingProperty)

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.property, {
            unitName: billingAccountAttrs.unitName,
        })

        const payload = {
            residentId: resident.id,
            accountNumber: billingAccountAttrs.number,
            organizationId: userClient.organization.id,
        }
        const [ out ] = await registerServiceConsumerByTestClient(userClient, payload)

        expect(out).toBeDefined()
        expect(out.accountNumber).toEqual(payload.accountNumber)
        expect(out.resident.id).toEqual(payload.residentId)
        expect(out.organization.id).toEqual(payload.organizationId)
    })

    it('creates serviceConsumer without billingAccount when Meters are found', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const [resource] = await MeterResource.getAll(adminClient, { id: COLD_WATER_METER_RESOURCE_ID })
        const [integration] = await createTestBillingIntegration(adminClient)

        const USER_UNIT_NAME = String(faker.datatype.number())
        const USER_ACCOUNT_NUMBER = String(faker.datatype.number())

        await createTestMeter(adminClient, userClient.organization, userClient.property, resource, {
            unitName: USER_UNIT_NAME,
            accountNumber: USER_ACCOUNT_NUMBER,
        })
        await createTestBillingIntegrationOrganizationContext(adminClient, userClient.organization, integration)

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.property, {
            unitName: USER_UNIT_NAME,
        })

        const payload = {
            residentId: resident.id,
            accountNumber: USER_ACCOUNT_NUMBER,
            organizationId: userClient.organization.id,
        }

        const [ out ] = await registerServiceConsumerByTestClient(userClient, payload)
        expect(out).toBeDefined()
        expect(out.accountNumber).toEqual(payload.accountNumber)
        expect(out.resident.id).toEqual(payload.residentId)
        expect(out.organization.id).toEqual(payload.organizationId)
        expect(out.billingAccount).toBeNull()
        expect(out.residentBillingAccount).toBeNull()
    })

    it('fails with error when billingAccount not found, and Meters are not found', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const [integration] = await createTestBillingIntegration(adminClient)
        await createTestBillingIntegrationOrganizationContext(adminClient, userClient.organization, integration)

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.property, {
            unitName: '21',
        })

        const payload = {
            residentId: resident.id,
            accountNumber: '221231232',
            organizationId: userClient.organization.id,
        }

        await catchErrorFrom(async () => {
            await registerServiceConsumerByTestClient(userClient, payload)
        }, ({ errors }) => {
            expect(errors).toMatchObject([{
                message: 'Can\'t find billingAccount and any meters with this accountNumber, unitName and organization combination',
                name: 'GQLError',
                path: ['obj'],
                extensions: {
                    mutation: 'registerServiceConsumer',
                    variable: ['data', 'accountNumber'],
                    code: 'BAD_USER_INPUT',
                    type: 'NOT_FOUND',
                    message: 'Can\'t find billingAccount and any meters with this accountNumber, unitName and organization combination',
                },
            }])
        })
    })

    it('fails with error when creating serviceConsumer for nullish data', async () => {

        const userClient = await makeClientWithProperty()
        const adminClient = await makeLoggedInAdminClient()

        const [integration] = await createTestBillingIntegration(adminClient)
        const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, userClient.organization, integration)
        const [billingProperty] = await createTestBillingProperty(adminClient, context)
        const [billingAccountAttrs] = await createTestBillingAccount(adminClient, context, billingProperty)

        await updateTestUser(adminClient, userClient.user.id, { type: RESIDENT })
        const [resident] = await createTestResident(adminClient, userClient.user, userClient.property, {
            unitName: billingAccountAttrs.unitName,
        })

        const payloadWithNullishAccountName = {
            residentId: resident.id,
            accountNumber: '',
            organizationId: userClient.organization.id,
        }

        await catchErrorFrom(async () => {
            await registerServiceConsumerByTestClient(userClient, payloadWithNullishAccountName)
        }, ({ errors }) => {
            expect(errors).toMatchObject([{
                message: 'Argument "accountNumber" is null or empty',
                name: 'GQLError',
                path: ['obj'],
                extensions: {
                    mutation: 'registerServiceConsumer',
                    variable: ['data', 'accountNumber'],
                    code: 'BAD_USER_INPUT',
                    type: 'WRONG_FORMAT',
                    message: 'Argument "accountNumber" is null or empty',
                },
            }])
        })
    })

    it('cannot be invoked by non-resident user', async () => {

        const userClient = await makeClientWithProperty()

        const payload = {
            residentId: 'test-id',
            accountNumber: 'test-number',
            organizationId: userClient.organization.id,
        }

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await registerServiceConsumerByTestClient(userClient, payload)
        })
    })

    it('cannot be invoked by anonymous', async () => {

        const userClient = await makeClient()
        const userClient2 = await makeClientWithProperty()

        const payload = {
            residentId: 'test-id',
            accountNumber: 'test-number',
            organizationId: userClient2.organization.id,
        }

        await expectToThrowAuthenticationErrorToObj(async () => {
            await registerServiceConsumerByTestClient(userClient, payload)
        })
    })
})
