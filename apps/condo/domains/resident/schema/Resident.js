/**
 * Generated by `createschema resident.Resident 'user:Relationship:User:CASCADE; organization:Relationship:Organization:PROTECT; property:Relationship:Property:PROTECT; billingAccount?:Relationship:BillingAccount:SET_NULL; unitName:Text;'`
 */

const { Text, Relationship, Virtual } = require('@keystonejs/fields')
const get = require('lodash/get')
const isNull = require('lodash/isNull')
const omit = require('lodash/omit')
const pick = require('lodash/pick')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { addressService } = require('@open-condo/keystone/plugins/addressService')
const { GQLListSchema, getById } = require('@open-condo/keystone/schema')

const { DEFAULT_ACQUIRING_INTEGRATION_NAME } = require('@condo/domains/acquiring/constants/integration')
const { removeOrphansRecurrentPaymentContexts } = require('@condo/domains/acquiring/tasks')
const { AcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/serverSchema')
const { DEFAULT_BILLING_INTEGRATION_NAME } = require('@condo/domains/billing/constants/constants')
const { BillingIntegrationOrganizationContext } = require('@condo/domains/billing/utils/serverSchema')
const { UNIT_TYPE_FIELD } = require('@condo/domains/common/schema/fields')
const { Meter } = require('@condo/domains/meter/utils/serverSchema')
const { addOrganizationFieldPlugin } = require(
    '@condo/domains/organization/schema/plugins/addOrganizationFieldPlugin')
const { Property } = require('@condo/domains/property/utils/serverSchema')
const { getAddressUpToBuildingFrom } = require('@condo/domains/property/utils/serverSchema/helpers')
const access = require('@condo/domains/resident/access/Resident')
const { PAYMENT_CATEGORIES_META } = require('@condo/domains/resident/constants')
const {
    RESIDENT_PROPERTY_FIELDS,
    ORGANIZATION_FEATURES_FIELDS,
    PAYMENT_CATEGORIES_FIELDS,
} = require('@condo/domains/resident/gql')
const { Resident: ResidentAPI } = require('@condo/domains/resident/utils/serverSchema')

const { RESIDENT_ORGANIZATION_FIELD } = require('./fields')


const { manageResidentToTicketClientConnections } = require('../tasks')



const addressFieldHooks = {
    resolveInput: async ({ resolvedData: { address, addressMeta } }) => {
        const newAddress = getAddressUpToBuildingFrom(addressMeta)
        return newAddress || address
    },
}

const Resident = new GQLListSchema('Resident', {
    schemaDoc: 'Person, that resides in a specified property and unit',
    fields: {
        user: {
            schemaDoc: 'Mobile user account',
            type: Relationship,
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        // The reason for this field is to avoid adding check for resident user into global Organization read access.
        // This field have specific use case for mobile client.
        residentOrganization: {
            ...RESIDENT_ORGANIZATION_FIELD,
        },

        property: {
            schemaDoc: 'Property, in which this person resides. Can be missing, when a resident has been registered, but there is no Property in our system yet',
            type: Relationship,
            ref: 'Property',
            isRequired: false,
            knexOptions: { isNotNullable: false }, // Required relationship only!
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
            hooks: {
                validateInput: async ({ context, resolvedData, operation, addFieldValidationError }) => {
                    if (operation === 'update') return
                    const propertyId = resolvedData.property
                    if (!propertyId) return
                    const [property] = await Property.getAll(context, { id: propertyId })
                    const residentAddress = getAddressUpToBuildingFrom(resolvedData.addressMeta)
                    if (property.address.toLowerCase() !== residentAddress.toLowerCase()) {
                        // but wait... if these addresses were updated by address service, the addressKey will be the same
                        let areAddressesEqual = false

                        if (!!property.addressKey && !!resolvedData.addressKey && property.addressKey === resolvedData.addressKey) {
                            areAddressesEqual = true
                        }

                        if (!areAddressesEqual) {
                            return addFieldValidationError('Cannot connect property, because its address differs from address of resident')
                        }
                    }
                },
            },
        },

        // The reason for this field is to avoid adding check for resident user into global Property read access.
        // This field have specific use case for mobile client.
        residentProperty: {
            schemaDoc: 'Property data, that is returned for current resident in mobile client',
            type: Virtual,
            extendGraphQLTypes: ['type ResidentProperty { id: ID!, name: String, address: String!, addressKey: String }'],
            graphQLReturnType: 'ResidentProperty',
            graphQLReturnFragment: `{ ${RESIDENT_PROPERTY_FIELDS} }`,
            resolver: async (item) => {
                if (item.property) {
                    const property = await getById('Property', item.property)
                    return pick(property, ['id', 'name', 'address', 'addressKey'])
                } else {
                    return null
                }
            },
            access: true,
        },

        organizationFeatures: {
            schemaDoc: 'Contains features that are enabled for user organization',
            type: Virtual,
            extendGraphQLTypes: ['type OrganizationFeatures { hasBillingData: Boolean!, hasMeters: Boolean! }'],
            graphQLReturnType: 'OrganizationFeatures',
            graphQLReturnFragment: `{ ${ORGANIZATION_FEATURES_FIELDS} }`,
            resolver: async (item, _, context) => {
                if (item.organization) {
                    const organizationId = get(item, 'organization', null)
                    const billingContextsCount = await BillingIntegrationOrganizationContext.count(context, {
                        organization: { id: organizationId },
                        lastReport_not: null,
                        deletedAt: null,
                    })

                    const propertyId = get(item, 'property', null)
                    const unitName = get(item, 'unitName', null)
                    const metersCount = await Meter.count(context, {
                        organization: { id: organizationId },
                        property: { id: propertyId },
                        unitName: unitName,
                        deletedAt: null,
                    })

                    return {
                        hasBillingData: billingContextsCount > 0,
                        hasMeters: metersCount > 0,
                    }
                } else {
                    return null
                }
            },
            access: true,
        },

        // TODO(pahaz): we should remove this field. Because you don't need it anymore. You can get billing/acquiring from ?!
        paymentCategories: {
            schemaDoc: 'Contains billing and acquiring integration names that are enabled for this resident per category',
            type: Virtual,
            extendGraphQLTypes: ['type PaymentCategory { id: String!, categoryName: String!, billingName: String! acquiringName: String! }'],
            graphQLReturnType: '[PaymentCategory]',
            graphQLReturnFragment: `{ ${PAYMENT_CATEGORIES_FIELDS} }`,
            resolver: async (item, _, context) => {
                return PAYMENT_CATEGORIES_META
                    .filter(x => x.active)
                    .map(async category => {
                        let billingName = DEFAULT_BILLING_INTEGRATION_NAME
                        let acquiringName = DEFAULT_ACQUIRING_INTEGRATION_NAME

                        if (category.canGetBillingFromOrganization && item.organization) {
                            const [billingCtx] = await BillingIntegrationOrganizationContext.getAll(
                                context, { organization: { id: item.organization, deletedAt: null }, deletedAt: null },
                            )
                            billingName = get(billingCtx, ['integration', 'name'], DEFAULT_BILLING_INTEGRATION_NAME)
                        }

                        if (category.canGetAcquiringFromOrganization && item.organization) {
                            const [acquiringCtx] = await AcquiringIntegrationContext.getAll(
                                context, { organization: { id: item.organization, deletedAt: null }, deletedAt: null },
                            )
                            acquiringName = get(acquiringCtx, ['integration', 'name'], DEFAULT_ACQUIRING_INTEGRATION_NAME)
                        }

                        return {
                            id: category.id,
                            categoryName: category.name,
                            billingName: billingName,
                            acquiringName: acquiringName,
                        }
                    })
            },
        },

        unitName: {
            schemaDoc: 'Unit of the property, in which this person resides',
            type: Text,
            isRequired: true,
        },

        unitType: {
            ...UNIT_TYPE_FIELD,
        },
    },
    plugins: [
        addOrganizationFieldPlugin({ fromField: 'property' }),
        uuided(),
        addressService({
            fieldsHooks: { address: addressFieldHooks },
            resolveAddressFields: ({ addressFields, operation }) => {
                return operation === 'update'
                    ? omit(addressFields, ['address', 'addressMeta'])
                    : addressFields
            },
        }),
        versioned(),
        tracked(),
        softDeleted(),
        dvAndSender(),
        historical(),
    ],
    hooks: {
        validateInput: async ({ resolvedData, operation, addValidationError, context }) => {
            const { address, addressMeta, unitName, unitType, user: userId } = resolvedData
            if (operation === 'create') {
                const addressUpToBuilding = getAddressUpToBuildingFrom(addressMeta)
                const [resident] = await ResidentAPI.getAll(context, {
                    address_i: addressUpToBuilding,
                    unitName_i: unitName,
                    unitType,
                    user: { id: userId },
                    deletedAt: null,
                }, {
                    first: 1,
                })
                if (resident) {
                    return addValidationError('Cannot create resident, because another resident with the same provided "address" and "unitName" already exists for current user')
                }
            } else if (operation === 'update') {
                if (address || addressMeta || unitName) {
                    return addValidationError('Changing of address, addressMeta, unitName or property is not allowed for already existing Resident')
                }
            }
        },
        afterChange: async ({ context, operation, updatedItem, originalInput }) => {
            const deletedAt = get(updatedItem, 'deletedAt', null)
            const userId = get(updatedItem, 'user', null)
            const propertyId = get(updatedItem, 'property', null)
            const unitName = get(updatedItem, 'unitName', null)
            const unitType = get(updatedItem, 'unitType', null)
            const sender = get(originalInput, 'sender', null)
            const dv = get(originalInput, 'dv', null)

            const changedPropertyId = get(originalInput, ['property', 'connect', 'id'], null)
            const changedUnitName = get(originalInput, 'unitName', null)
            const changedUnitType = get(originalInput, 'unitType', null)

            if (!isNull(changedPropertyId) || !isNull(changedUnitName) || !isNull(changedUnitType)) {
                await manageResidentToTicketClientConnections.delay(propertyId, unitType, unitName, userId, dv, sender)
            }

            // handle soft delete
            // in order to soft delete recurrent payment contexts
            if (operation === 'update' && deletedAt) {
                await removeOrphansRecurrentPaymentContexts.delay({
                    residentId: updatedItem.id,
                    dv,
                    sender,
                })
            }
        },
    },
    access: {
        read: access.canReadResidents,
        create: access.canManageResidents,
        update: access.canManageResidents,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Resident,
}
