/**
 * Generated by `createschema resident.Resident 'user:Relationship:User:CASCADE; organization:Relationship:Organization:PROTECT; property:Relationship:Property:PROTECT; billingAccount?:Relationship:BillingAccount:SET_NULL; unitName:Text;'`
 */

const { pick, get } = require('lodash')
const { Text, Relationship, Virtual } = require('@keystonejs/fields')
const { GQLListSchema, getById } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')

const { SENDER_FIELD, DV_FIELD, ADDRESS_META_FIELD } = require('@condo/domains/common/schema/fields')

const access = require('@condo/domains/resident/access/Resident')
const { RESIDENT_ORGANIZATION_FIELD } = require('./fields')
const { Resident: ResidentAPI } = require('@condo/domains/resident/utils/serverSchema')
const { PAYMENT_CATEGORIES_META } = require('@condo/domains/resident/constants')

const { Property } = require('@condo/domains/property/utils/serverSchema')
const { getAddressUpToBuildingFrom } = require('@condo/domains/property/utils/serverSchema/helpers')

const { BillingIntegrationOrganizationContext } = require('@condo/domains/billing/utils/serverSchema')
const { DEFAULT_BILLING_INTEGRATION_NAME } = require('@condo/domains/billing/constants/constants')

const { AcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/serverSchema')
const { DEFAULT_ACQUIRING_INTEGRATION_NAME } = require('@condo/domains/acquiring/constants/integration')

const { Meter } = require('@condo/domains/meter/utils/serverSchema')

const Resident = new GQLListSchema('Resident', {
    schemaDoc: 'Person, that resides in a specified property and unit',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        user: {
            schemaDoc: 'Mobile user account',
            type: Relationship,
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        organization: {
            schemaDoc: 'Organization, that provides service to this resident. Can be missing, when a resident has been registered, but there is no Organization, that serves specified address in our system yet',
            type: Relationship,
            ref: 'Organization',
            isRequired: false,
            knexOptions: { isNotNullable: false }, // Relationship only!
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        // The reason for this field is to avoid adding check for resident user into global Organization read access.
        // This field have specific use case for mobile client.
        residentOrganization: {
            ...RESIDENT_ORGANIZATION_FIELD,
        },

        property: {
            schemaDoc: 'Property, in which this person resides. Can be missing, when a resident has been registered, but there is no Property in our system yet',
            type: Relationship,
            ref: 'Property',
            isRequired: false,
            knexOptions: { isNotNullable: false }, // Required relationship only!
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
            hooks: {
                validateInput: async ({ context, resolvedData, operation, addFieldValidationError }) => {
                    if (operation === 'update') return
                    const propertyId = resolvedData.property
                    if (!propertyId) return
                    const [property] = await Property.getAll(context, { id: propertyId })
                    const residentAddress = getAddressUpToBuildingFrom(resolvedData.addressMeta)
                    if (property.address !== residentAddress) {
                        return addFieldValidationError('Cannot connect property, because its address differs from address of resident')
                    }
                },
            },
        },

        // The reason for this field is to avoid adding check for resident user into global Property read access.
        // This field have specific use case for mobile client.
        residentProperty: {
            schemaDoc: 'Property data, that is returned for current resident in mobile client',
            type: Virtual,
            extendGraphQLTypes: ['type ResidentProperty { id: ID!, name: String, address: String! }'],
            graphQLReturnType: 'ResidentProperty',
            resolver: async (item) => {
                if (item.property) {
                    const property = await getById('Property', item.property)
                    return pick(property, ['id', 'name', 'address'])
                } else {
                    return null
                }
            },
            access: true,
        },

        organizationFeatures: {
            schemaDoc: 'Contains features that are enabled for user organization',
            type: Virtual,
            extendGraphQLTypes: ['type OrganizationFeatures { hasBillingData: Boolean!, hasMeters: Boolean! }'],
            graphQLReturnType: 'OrganizationFeatures',
            resolver: async (item, _, context) => {
                if (item.organization) {
                    const organizationId = get(item, 'organization', null)
                    const billingContextsCount = await BillingIntegrationOrganizationContext.count(context, {
                        organization: { id: organizationId },
                        lastReport_not: null,
                        deletedAt: null,
                    })

                    const propertyId = get(item, 'property', null)
                    const unitName = get(item, 'unitName', null)
                    const metersCount = await Meter.count(context, {
                        organization: { id: organizationId },
                        property: { id: propertyId },
                        unitName: unitName,
                        deletedAt: null,
                    })

                    return {
                        hasBillingData: billingContextsCount > 0,
                        hasMeters: metersCount > 0,
                    }
                } else {
                    return null
                }
            },
            access: true,
        },

        paymentCategories: {
            schemaDoc: 'Contains billing and acquiring integration names that are enabled for this resident per category',
            type: Virtual,
            extendGraphQLTypes: ['type PaymentCategory { id: String!, categoryName: String!, billingName: String! acquiringName: String! }'],
            graphQLReturnType: '[PaymentCategory]',
            resolver: async (item, _, context) => {
                return PAYMENT_CATEGORIES_META
                    .filter(x => x.active)
                    .map(async category => {
                        let billingName = DEFAULT_BILLING_INTEGRATION_NAME
                        let acquiringName = DEFAULT_ACQUIRING_INTEGRATION_NAME

                        if (category.canGetBillingFromOrganization && item.organization) {
                            const [billingCtx] = await BillingIntegrationOrganizationContext.getAll(
                                context, { organization: { id: item.organization, deletedAt: null }, deletedAt: null }
                            )
                            billingName = get(billingCtx, ['integration', 'name'], DEFAULT_BILLING_INTEGRATION_NAME)
                        }

                        if (category.canGetAcquiringFromOrganization && item.organization) {
                            const [acquiringCtx] = await AcquiringIntegrationContext.getAll(
                                context, { organization: { id: item.organization, deletedAt: null }, deletedAt: null }
                            )
                            acquiringName = get(acquiringCtx, ['integration', 'name'], DEFAULT_ACQUIRING_INTEGRATION_NAME)
                        }

                        return {
                            id: category.id,
                            categoryName: category.name,
                            billingName: billingName,
                            acquiringName: acquiringName,
                        }
                    })
            },
        },

        address: {
            schemaDoc: 'Normalized address',
            type: Text,
            isRequired: true,
            hooks: {
                resolveInput: async ({ resolvedData: { address, addressMeta } }) => {
                    const newAddress = getAddressUpToBuildingFrom(addressMeta)
                    return newAddress || address
                },
            },
        },

        addressMeta: ADDRESS_META_FIELD,

        unitName: {
            schemaDoc: 'Unit of the property, in which this person resides',
            type: Text,
            isRequired: true,
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    hooks: {
        validateInput: async ({ resolvedData, operation, addValidationError, context }) => {
            const { address, addressMeta, unitName, user: userId } = resolvedData
            if (operation === 'create') {
                const addressUpToBuilding = getAddressUpToBuildingFrom(addressMeta)
                const [resident] = await ResidentAPI.getAll(context, {
                    address_i: addressUpToBuilding,
                    unitName_i: unitName,
                    user: { id: userId },
                    deletedAt: null,
                }, {
                    first: 1,
                })
                if (resident) {
                    return addValidationError('Cannot create resident, because another resident with the same provided "address" and "unitName" already exists for current user')
                }
            } else if (operation === 'update') {
                if (address || addressMeta || unitName) {
                    return addValidationError('Changing of address, addressMeta, unitName or property is not allowed for already existing Resident')
                }
            }
        },
    },
    access: {
        read: access.canReadResidents,
        create: access.canManageResidents,
        update: access.canManageResidents,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Resident,
}