/**
 * Generated by `createservice property.RegisterResidentService --type mutations`
 */

const omit = require('lodash/omit')

const {
    createInstance: createAddressServiceClientInstance,
} = require('@open-condo/keystone/plugins/utils/address-service-client')
const { getById, GQLCustomSchema } = require('@open-condo/keystone/schema')

const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { Property: PropertyAPI } = require('@condo/domains/property/utils/serverSchema')
const { getAddressUpToBuildingFrom } = require('@condo/domains/property/utils/serverSchema/helpers')
const access = require('@condo/domains/resident/access/RegisterResidentService')
const { Resident: ResidentAPI } = require('@condo/domains/resident/utils/serverSchema')

const RegisterResidentService = new GQLCustomSchema('RegisterResidentService', {
    types: [
        {
            access: true,
            // TODO(DOMA-6063): we need to remove `addressMeta` attribute here! We can work only with the `address` argument and request all data from addressService by addressKey or raw address string
            type: 'input RegisterResidentInput { dv: Int!, sender: SenderFieldInput!, address: String!, addressMeta: AddressMetaFieldInput!, unitName: String!, unitType: BuildingUnitSubType }',
        },
    ],

    mutations: [
        {
            access: access.canRegisterResident,
            schema: 'registerResident(data: RegisterResidentInput!): Resident',
            resolver: async (parent, args, context) => {
                const { data: { dv, sender, address, addressMeta, unitName, unitType } } = args
                const attrs = {
                    dv,
                    sender,
                    address,
                    addressMeta,
                    unitName,
                    unitType,
                    user: { connect: { id: context.authedItem.id } },
                }

                const client = createAddressServiceClientInstance({ address })

                const addressItem = await client.search(address)

                const [existingResident] = await ResidentAPI.getAll(context, {
                    // Keep searching by address string and additionally search by addressKey
                    OR: [
                        { address_i: address },
                        { addressKey: addressItem.addressKey },
                    ],
                    unitName_i: unitName,
                    unitType,
                    user: { id: context.authedItem.id },
                }, {
                    first: 1,
                })

                const propertyAddress = getAddressUpToBuildingFrom(addressMeta)
                const [property] = await PropertyAPI.getAll(
                    context,
                    { address_i: propertyAddress, deletedAt: null },
                    { sortBy: ['isApproved_DESC', 'createdAt_ASC'], first: 1 }
                )

                if (property) {
                    attrs.property = { connect: { id: property.id } }
                }

                if (!attrs.unitType) {
                    attrs.unitType = FLAT_UNIT_TYPE
                }

                let id
                if (existingResident) {
                    const nextAttrs = omit(
                        { ...attrs, deletedAt: null },
                        ['address', 'addressMeta', 'unitName']
                    )

                    // TODO(DOMA-1780): we need to update address and addressMeta from property
                    await ResidentAPI.update(context, existingResident.id, nextAttrs)
                    id = existingResident.id
                } else {
                    const propertyAddress = getAddressUpToBuildingFrom(addressMeta)
                    const residentAttrs = { ...attrs, address: propertyAddress }
                    const resident = await ResidentAPI.create(context, residentAttrs)

                    id = resident.id
                }

                // Hack that helps to resolve all subfields in result of this mutation
                const result = await getById('Resident', id)

                return result
            },
        },
    ],

})

module.exports = {
    RegisterResidentService,
}
