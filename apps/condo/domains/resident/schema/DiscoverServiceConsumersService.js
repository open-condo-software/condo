/**
 * Generated by `createservice resident.DiscoverServiceConsumersService --type mutations`
 */
const { set, get, filter, flatMap, map, omit, uniq } = require('lodash')

const { featureToggleManager } = require('@open-condo/featureflags/featureToggleManager')
const { getLogger } = require('@open-condo/keystone/logging')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/acquiring/constants/context')
const { AcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/serverSchema')
const { BILLING_ACCOUNT_OWNER_TYPE_COMPANY } = require('@condo/domains/billing/constants/constants')
const { BillingAccount, BillingReceipt } = require('@condo/domains/billing/utils/serverSchema')
const { DISABLE_DISCOVER_SERVICE_CONSUMERS } = require('@condo/domains/common/constants/featureflags')
const { md5 } = require('@condo/domains/common/utils/crypto')
const { loadListByChunks } = require('@condo/domains/common/utils/serverSchema')
const { SERVICE_PROVIDER_TYPE } = require('@condo/domains/organization/constants/common')
const { Property } = require('@condo/domains/property/utils/serverSchema')
const access = require('@condo/domains/resident/access/DiscoverServiceConsumersService')
const { Resident, ServiceConsumer } = require('@condo/domains/resident/utils/serverSchema')

const logger = getLogger('DiscoverServiceConsumersMutation')

const DiscoverServiceConsumersService = new GQLCustomSchema('DiscoverServiceConsumersService', {
    schemaDoc: 'Mutation to create Service Consumers for all residents for address, unitType, unitName, and BillingAccounts for said address' +
        'If a new Resident is created this mutation is called for specific Resident (optional field Resident is provided)' +
        'If a new BillingAccount is created this mutation is called for specific BillingAccount (optional field BillingAccount is provided)',

    types: [
        {
            access: true,
            type: 'input DiscoverServiceConsumersInputFilters { residentsIds: [ID!] }',
        },
        {
            access: true,
            type: 'input DiscoverServiceConsumersInput { dv: Int!, sender: SenderFieldInput!, billingAccountsIds: [ID!]!, filters: DiscoverServiceConsumersInputFilters }',
        },
        {
            access: true,
            type: 'type DiscoverServiceConsumersOutputStatistics { created: Int!, residentsFound: Int!, billingAccountsFound: Int! }',
        },
        {
            access: true,
            type: 'type DiscoverServiceConsumersOutput { status: String!, statistics: DiscoverServiceConsumersOutputStatistics! }',
        },
    ],

    mutations: [
        {
            access: access.canDiscoverServiceConsumers,
            schema: 'discoverServiceConsumers(data: DiscoverServiceConsumersInput!): DiscoverServiceConsumersOutput',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { dv, sender, billingAccountsIds, filters } = data

                if (billingAccountsIds.length === 0) {
                    return {
                        status: 'skip',
                        statistics: {
                            created: 0,
                            residentsFound: 0,
                            billingAccountsFound: 0,
                        },
                    }
                }

                const reqId = get(context, ['req', 'id'])

                /**
                 * @type {{id: string, organizationId: string, address: string, addressKey: string, unitType: string, unitName: string, number: string, billingContextId: string}[]}
                 */
                let billingAccountItemsData = []
                await loadListByChunks({
                    context,
                    list: BillingAccount,
                    chunkSize: 50,
                    where: {
                        deletedAt: null,
                        context: { status: CONTEXT_FINISHED_STATUS, deletedAt: null },
                        id_in: billingAccountsIds,
                        isClosed: false,
                        ownerType_not: BILLING_ACCOUNT_OWNER_TYPE_COMPANY,
                    },
                    chunkProcessor: async (/** @type {BillingAccount[]} */ chunk) => {
                        for (const billingAccount of chunk) {
                            const id = get(billingAccount, 'id')
                            const organizationId = get(billingAccount, ['context', 'organization', 'id'], null)
                            const organizationType = get(billingAccount, ['context', 'organization', 'type'], null)
                            const address = get(billingAccount, ['property', 'address'], null)
                            const addressKey = get(billingAccount, ['property', 'addressKey'], null)
                            const unitType = get(billingAccount, 'unitType', null)
                            const unitName = get(billingAccount, 'unitName', null)
                            const number = get(billingAccount, 'number')
                            const billingContextId = get(billingAccount, ['context', 'id'], null)

                            const shouldDiscover = organizationType === SERVICE_PROVIDER_TYPE ? true : !await featureToggleManager.isFeatureEnabled(
                                context,
                                DISABLE_DISCOVER_SERVICE_CONSUMERS,
                                { organization: organizationId },
                            )

                            if (shouldDiscover) {
                                billingAccountItemsData.push({ id, organizationId, address, addressKey, unitType, unitName, number, billingContextId })
                            }
                        }

                        return []
                    },
                })

                // Filter by acquiring context
                // The organization must have the finished acquiring context
                /** @type {Object<string, string[]>} */
                let organizationsToAcquiringContextsMap = {}
                await loadListByChunks({
                    context,
                    list: AcquiringIntegrationContext,
                    chunkSize: 50,
                    where: {
                        deletedAt: null,
                        organization: { id_in: map(billingAccountItemsData, 'organizationId') },
                        status: CONTEXT_FINISHED_STATUS,
                    },
                    chunkProcessor: (chunk) => {
                        chunk.forEach((row) => {
                            const organizationId = get(row, ['organization', 'id'])
                            const acquiringContextId = get(row, 'id')
                            organizationsToAcquiringContextsMap = {
                                ...organizationsToAcquiringContextsMap,
                                [organizationId]: [
                                    ...(organizationsToAcquiringContextsMap[organizationId] || []),
                                    acquiringContextId,
                                ],
                            }
                        })
                        return []
                    },
                })

                billingAccountItemsData = billingAccountItemsData.filter((item) => !!get(organizationsToAcquiringContextsMap, item.organizationId))

                // Filter by property
                // Make sure that organization has the property
                const organizationsIdsWithProperties = new Set()
                await loadListByChunks({
                    context,
                    list: Property,
                    chunkSize: 50,
                    where: {
                        deletedAt: null,
                        OR: billingAccountItemsData.map((item) => ({
                            AND: [
                                { deletedAt: null },
                                { organization: { id: item.organizationId } },
                                { OR: [{ address_i: item.address }, { addressKey: item.addressKey }] },
                            ],
                        })),
                    },
                    chunkProcessor: (chunk) => {
                        chunk.forEach((row) => {
                            organizationsIdsWithProperties.add(`${get(row, ['organization', 'id'])}_${get(row, 'address')}`)
                        })
                        return []
                    },
                })

                billingAccountItemsData = billingAccountItemsData.filter((item) => organizationsIdsWithProperties.has(`${item.organizationId}_${item.address}`))

                // Filter duplicates (same organization and number) of each billing account
                /** @type {Object<string, string[]>} */
                const billingAccountsCandidatesForDuplicates = {}
                await loadListByChunks({
                    context,
                    list: BillingAccount,
                    where: {
                        OR: billingAccountItemsData.map((item) => ({
                            AND: [
                                { context: { organization: { id: item.organizationId } } },
                                { number: item.number },
                            ],
                        })),
                    },
                    chunkSize: 50,
                    chunkProcessor: (/** @type {BillingAccount[]} */ chunk) => {
                        chunk.forEach((billingAccount) => {
                            const theKey = `${billingAccount.context.organization.id}_${billingAccount.number}`
                            set(billingAccountsCandidatesForDuplicates, theKey, uniq([...get(billingAccountsCandidatesForDuplicates, theKey, []), billingAccount.id]))
                        })

                        return []
                    },
                })

                // There should be only one
                // Keep billing account which has the latest receipt
                const billingReceiptsIdsWithoutDuplicates = []
                for (const theKey in billingAccountsCandidatesForDuplicates) {
                    const billingAccountsIds = billingAccountsCandidatesForDuplicates[theKey]
                    if (billingAccountsIds.length === 1) {
                        billingReceiptsIdsWithoutDuplicates.push(billingAccountsIds[0])
                    } else {
                        const [lastReceipt] = await BillingReceipt.getAll(context, { account: { id_in: billingAccountsIds } }, { sortBy: 'period_DESC', first: 1 })
                        if (lastReceipt) {
                            billingReceiptsIdsWithoutDuplicates.push(lastReceipt.account.id)
                        } else {
                            // It's impossible but must be logged :)
                            logger.warn({ msg: `There are duplicated billing accounts ids with no receipts: ${billingAccountsIds.join(',')}` })
                        }
                    }
                }
                billingAccountItemsData = billingAccountItemsData.filter(({ id }) => billingReceiptsIdsWithoutDuplicates.includes(id))

                // Filter out billing accounts that have the same address, unitType, and unitName,
                // and one of two last receipts have the same category as the receipt for the 2nd account
                // with the same period
                /** @type {Object<string, Set<string>>} */
                const billingAccountsByAddressAndCategoryAndPeriod = {}
                for (const item of billingAccountItemsData) {
                    // We decided to check 2 last receipts
                    /** @type {BillingReceipt[]} */
                    const receipts = await BillingReceipt.getAll(context, {
                        deletedAt: null,
                        context: {
                            deletedAt: null,
                            organization: { id: item.organizationId },
                        },
                        account: {
                            deletedAt: null,
                            OR: [
                                { property: { address: item.address } },
                                { property: { addressKey: item.addressKey } },
                            ],
                            unitType: item.unitType,
                            unitName: item.unitName,
                            number: item.number,
                        },
                    }, { sortBy: ['period_DESC'], first: 2 })

                    for (const receipt of receipts) {
                        const theKey = md5(`${item.address}_${item.unitType}_${item.unitName}_${receipt.category.id}_${receipt.period}`)
                        /** @type {Set<string>} */
                        const current = get(billingAccountsByAddressAndCategoryAndPeriod, theKey, new Set())
                        current.add(item.id)
                        set(billingAccountsByAddressAndCategoryAndPeriod, theKey, current)
                    }
                }
                const billingAccountsIdsExcludedBySameCategory = Object.keys(billingAccountsByAddressAndCategoryAndPeriod).reduce((result, k) => {
                    const billingAccountsIds = billingAccountsByAddressAndCategoryAndPeriod[k]
                    if (billingAccountsIds.size >= 2) {
                        return [...result, ...Array.from(billingAccountsIds)]
                    }

                    return result
                }, [])

                billingAccountItemsData = billingAccountItemsData.filter(({ id }) => !billingAccountsIdsExcludedBySameCategory.includes(id))

                const residentsWhere = {
                    deletedAt: null,
                    OR: billingAccountItemsData.map(({ address, addressKey, unitType, unitName }) => ({
                        AND: [{ OR: [{ address_i: address }, { addressKey }] }, { unitType }, { unitName }],
                    })),
                }
                const residentsFilter = get(filters, 'residentsIds')
                if (residentsFilter) {
                    residentsWhere.id_in = residentsFilter
                }

                let residentsCount = 0
                const combinations = []
                await loadListByChunks({
                    context,
                    list: Resident,
                    chunkSize: 50,
                    where: residentsWhere,
                    chunkProcessor: (/** @type {Resident[]} */ chunk) => {
                        const chunkCombinations = flatMap(chunk, (resident) => billingAccountItemsData.map((billingAccountItemData) => {
                            if (
                                (
                                    resident.address === billingAccountItemData.address
                                    || resident.addressKey === billingAccountItemData.addressKey
                                )
                                && resident.unitType === billingAccountItemData.unitType
                                && resident.unitName === billingAccountItemData.unitName
                            ) {
                                return [resident, billingAccountItemData]
                            }
                        }))

                        combinations.push(...chunkCombinations)

                        residentsCount += chunk.length

                        return []
                    },
                })

                const definedCombinations = combinations.filter(Boolean)

                const serviceConsumersData = definedCombinations.map(([resident, account]) => {
                    const organizationId = get(account, 'organizationId', null)
                    const billingContextId = get(account, 'billingContextId', null)
                    const [acquiringContextId] = get(organizationsToAcquiringContextsMap, organizationId, [null])

                    return {
                        dv,
                        sender,
                        resident: resident.id,
                        accountNumber: account.number,
                        organization: organizationId,
                        billingAccount: account.id,
                        billingIntegrationContext: billingContextId || null,
                        acquiringIntegrationContext: acquiringContextId || null,
                        isDiscovered: true,
                    }
                })

                // Find already created service consumers to prevent creating of duplicates
                const existingServiceConsumers = await ServiceConsumer.getAll(context, {
                    OR: serviceConsumersData.map((data) => ({
                        AND: [
                            { resident: { id: data.resident } },
                            { accountNumber: data.accountNumber },
                            { organization: { id: data.organization } },
                        ],
                    })),
                })

                const createdServiceConsumers = await Promise.all(
                    serviceConsumersData.map((serviceConsumerData) => {
                        const [existingServiceConsumer] = filter(existingServiceConsumers, {
                            resident: { id: serviceConsumerData.resident },
                            accountNumber: serviceConsumerData.accountNumber,
                            organization: { id: serviceConsumerData.organization },
                        })

                        const data = {
                            ...serviceConsumerData,
                            resident: { connect: { id: serviceConsumerData.resident } },
                            organization: { connect: { id: serviceConsumerData.organization } },
                            billingAccount: { connect: { id: serviceConsumerData.billingAccount } },
                            billingIntegrationContext: serviceConsumerData.billingIntegrationContext ? { connect: { id: serviceConsumerData.billingIntegrationContext } } : null,
                            acquiringIntegrationContext: serviceConsumerData.acquiringIntegrationContext ? { connect: { id: serviceConsumerData.acquiringIntegrationContext } } : null,
                        }

                        if (existingServiceConsumer) {
                            return ServiceConsumer.update(context, existingServiceConsumer.id, {
                                // We don't update organization!
                                ...omit(data, 'organization'),
                                deletedAt: null,
                            })
                        }

                        return ServiceConsumer.create(context, data)
                    }),
                )

                const statistics = {
                    created: createdServiceConsumers.filter(Boolean).length,
                    residentsFound: residentsCount,
                    billingAccountsFound: billingAccountItemsData.length,
                }

                logger.info({
                    msg: 'Created ServiceConsumers',
                    payload: { billingAccountsIds },
                    statistics,
                    reqId,
                })

                return { status: 'success', statistics }
            },
        },
    ],
})

module.exports = {
    DiscoverServiceConsumersService,
}
