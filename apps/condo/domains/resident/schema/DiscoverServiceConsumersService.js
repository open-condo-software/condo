/**
 * Generated by `createservice resident.DiscoverServiceConsumersService --type mutations`
 */
const { get, flatMap } = require('lodash')

const { featureToggleManager } = require('@open-condo/featureflags/featureToggleManager')
const { getLogger } = require('@open-condo/keystone/logging')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')
const { getById } = require('@open-condo/keystone/schema')

const { BillingAccount } = require('@condo/domains/billing/utils/serverSchema')
const { ENABLE_DISCOVER_SERVICE_CONSUMERS } = require('@condo/domains/common/constants/featureflags')
const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/miniapp/constants')
const access = require('@condo/domains/resident/access/DiscoverServiceConsumersService')
const {
    RESIDENT_DISCOVER_CONSUMERS_WINDOW,
    MAX_RESIDENT_DISCOVER_CONSUMERS_BY_WINDOW,
} = require('@condo/domains/resident/constants/constants')
const { Resident, ServiceConsumer } = require('@condo/domains/resident/utils/serverSchema')
const logger = getLogger('DiscoverServiceConsumersMutation')
const { RedisGuard } = require('@condo/domains/user/utils/serverSchema/guards')


const redisGuard = new RedisGuard()

const asyncFilter = async (arr, predicate) => Promise.all(arr.map(predicate)).then((results) => arr.filter((_v, index) => results[index]))

const DiscoverServiceConsumersService = new GQLCustomSchema('DiscoverServiceConsumersService', {
    schemaDoc: 'Mutation to create Service Consumers for all residents for address, unitType, unitName, and BillingAccounts for said address' +
        'If a new Resident is created this mutation is called for specific Resident (optional field Resident is provided)' +
        'If a new BillingAccount is created this mutation is called for specific BillingAccount (optional field BillingAccount is provided)',

    types: [
        {
            access: true,
            type: 'input DiscoverServiceConsumersInput { dv: Int!, sender: SenderFieldInput!, address: String!, unitName: String!, unitType: String!, billingAccount: BillingAccountWhereUniqueInput, resident: ResidentWhereUniqueInput }',
        },
        {
            access: true,
            type: 'type DiscoverServiceConsumersOutput { status: String!, createdServiceConsumersTotal: Int! }',
        },
    ],

    mutations: [
        {
            access: access.canDiscoverServiceConsumers,
            schema: 'discoverServiceConsumers(data: DiscoverServiceConsumersInput!): DiscoverServiceConsumersOutput',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { address, unitName, unitType, billingAccount, resident, dv, sender } = data

                const reqId = get(context, ['req', 'id'])

                const checkLimits = async (phone) => {
                    await redisGuard.checkCustomLimitCounters(
                        `discover-service-consumers-${phone}`,
                        RESIDENT_DISCOVER_CONSUMERS_WINDOW,
                        MAX_RESIDENT_DISCOVER_CONSUMERS_BY_WINDOW,
                    )
                }

                if (resident) {
                    const residentObj = await Resident.getOne(context, { id: resident.id })
                    const user = await getById('User', residentObj.user.id)
                    await checkLimits(user.phone)
                }

                const residents = await Resident.getAll(
                    context,
                    {
                        deletedAt: null,
                        ...(
                            resident
                                ? { id: resident.id }
                                : {
                                    address: address,
                                    unitName: unitName,
                                    unitType: unitType,
                                }
                        ),
                    },
                )

                // Keep only residents of organizations the feature flag enabled for
                const residentsFilteredByFeatureFlag = await asyncFilter(
                    residents,
                    async (resident) => await featureToggleManager.isFeatureEnabled(
                        context,
                        ENABLE_DISCOVER_SERVICE_CONSUMERS,
                        { organization: resident.organization.id },
                    )
                )

                const billingAccounts = await BillingAccount.getAll(
                    context,
                    billingAccount ? {
                        id: billingAccount.id,
                        deletedAt: null,
                        context: { status: CONTEXT_FINISHED_STATUS, deletedAt: null },
                    } : {
                        context: { status: CONTEXT_FINISHED_STATUS, deletedAt: null },
                        property: { address: address, deletedAt: null },
                        unitName: unitName,
                        unitType: unitType,
                        deletedAt: null,
                    },
                )


                const getPayload = (accountNumber, resident) => ({
                    dv,
                    sender,
                    resident: { connect: { id: resident.id } },
                    organization: { connect: { id: get(resident, ['organization', 'id']) } },
                    accountNumber: accountNumber,
                    isDiscovered: true,
                })

                const combinations = flatMap(residentsFilteredByFeatureFlag, (resident) => billingAccounts.map((account) => [resident, account]))
                const createdServiceConsumers = await Promise.all(combinations.map(([resident, account]) => ServiceConsumer.create(context, getPayload(account.number, resident))))

                logger.info({
                    msg: 'Created ServiceConsumers for input data: ',
                    payload: {
                        created: createdServiceConsumers.length,
                        residentsFound: residents.length,
                        residentsFilteredByFeatureFlag: residentsFilteredByFeatureFlag.length,
                        billingAccountsFound: billingAccounts.length,
                        address,
                        unitName,
                        unitType,
                        billingAccount,
                        resident,
                    },
                    reqId,
                })

                return { status: 'success', createdServiceConsumersTotal: createdServiceConsumers.length }
            },
        },
    ],
})

module.exports = {
    DiscoverServiceConsumersService,
}
