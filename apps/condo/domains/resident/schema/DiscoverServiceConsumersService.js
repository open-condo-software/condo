/**
 * Generated by `createservice resident.DiscoverServiceConsumersService --type mutations`
 */

const { get, _ } = require('lodash')

const { getLogger } = require('@open-condo/keystone/logging')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { BillingAccount } = require('@condo/domains/billing/utils/serverSchema')
const access = require('@condo/domains/resident/access/DiscoverServiceConsumersService')
const { Resident, ServiceConsumer } = require('@condo/domains/resident/utils/serverSchema')
const logger = getLogger('DiscoverServiceConsumersMutation')

const DiscoverServiceConsumersService = new GQLCustomSchema('DiscoverServiceConsumersService', {
    schemaDoc: 'Mutation to create Service Consumers for all residents for address, unitType, unitName, and BillingAccounts for said address' +
        'If a new Resident is created this mutation is called for specific Resident (optional field Resident is provided)' +
        'If a new BillingAccount is created this mutation is called for specific BillingAccount (optional field BillingAccount is provided)',

    types: [
        {
            access: true,
            type: 'input DiscoverServiceConsumersInput { dv: Int!, sender: SenderFieldInput!, address: String!, unitName: String!, unitType: String!, billingAccount: BillingAccountWhereUniqueInput, resident: ResidentWhereUniqueInput }',
        },
        {
            access: true,
            type: 'type DiscoverServiceConsumersOutput { status: String!, createdServiceConsumersTotal: Int! }',
        },
    ],

    mutations: [
        {
            access: access.canDiscoverServiceConsumers,
            schema: 'discoverServiceConsumers(data: DiscoverServiceConsumersInput!): DiscoverServiceConsumersOutput',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { address, unitName, unitType, billingAccount, resident, dv, sender } = data

                const residents = await Resident.getAll(context,
                    resident ? { id: resident.id, deletedAt: null } : {
                        address: address,
                        unitName: unitName,
                        unitType: unitType,
                        deletedAt: null,
                    })

                const billingAccounts = await BillingAccount.getAll(context,
                    billingAccount ? { id: billingAccount.id, deletedAt: null } : {
                        context: { status: 'Finished', deletedAt: null },
                        property: { address: address, deletedAt: null  },
                        unitName: unitName,
                        unitType: unitType,
                        deletedAt: null,
                    })


                const getPayload = (accountNumber, resident) => ({
                    dv,
                    sender,
                    resident: { connect: { id: resident.id } },
                    organization: { connect: { id: get(resident, ['organization', 'id']) } },
                    accountNumber: accountNumber,
                })

                const combinations = _.flatMap(residents, (resident) =>  billingAccounts.map((account) => [resident, account]))
                const createdServiceConsumers = await Promise.all(combinations.map(([resident, account]) => ServiceConsumer.create(context, getPayload(account.number, resident))))

                logger.info({  msg: 'Created ServiceConsumers for input data: ', payload: {
                    created: createdServiceConsumers.length,
                    residentsFound: residents.length,
                    billingAccountsFound: billingAccounts.length,
                    address, unitName, unitType, billingAccount, resident,
                } })

                return { status: 'success', createdServiceConsumersTotal: createdServiceConsumers.length }
            },
        },
    ],
})

module.exports = {
    DiscoverServiceConsumersService,
}
