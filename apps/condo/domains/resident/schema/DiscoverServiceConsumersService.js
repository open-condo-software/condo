/**
 * Generated by `createservice resident.DiscoverServiceConsumersService --type mutations`
 */
const { get, filter, flatMap, omit } = require('lodash')

const { featureToggleManager } = require('@open-condo/featureflags/featureToggleManager')
const { getLogger } = require('@open-condo/keystone/logging')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/acquiring/constants/context')
const { AcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/serverSchema')
const { BILLING_ACCOUNT_OWNER_TYPE_COMPANY } = require('@condo/domains/billing/constants/constants')
const { BillingAccount } = require('@condo/domains/billing/utils/serverSchema')
const { ENABLE_DISCOVER_SERVICE_CONSUMERS } = require('@condo/domains/common/constants/featureflags')
const { loadListByChunks } = require('@condo/domains/common/utils/serverSchema')
const { SERVICE_PROVIDER_TYPE } = require('@condo/domains/organization/constants/common')
const { Property } = require('@condo/domains/property/utils/serverSchema')
const access = require('@condo/domains/resident/access/DiscoverServiceConsumersService')
const { Resident, ServiceConsumer } = require('@condo/domains/resident/utils/serverSchema')

const logger = getLogger('DiscoverServiceConsumersMutation')

const DiscoverServiceConsumersService = new GQLCustomSchema('DiscoverServiceConsumersService', {
    schemaDoc: 'Mutation to create Service Consumers for all residents for address, unitType, unitName, and BillingAccounts for said address' +
        'If a new Resident is created this mutation is called for specific Resident (optional field Resident is provided)' +
        'If a new BillingAccount is created this mutation is called for specific BillingAccount (optional field BillingAccount is provided)',

    types: [
        {
            access: true,
            type: 'input DiscoverServiceConsumersInputFilters { residentsIds: [ID!] }',
        },
        {
            access: true,
            type: 'input DiscoverServiceConsumersInput { dv: Int!, sender: SenderFieldInput!, billingAccountsIds: [ID!]!, filters: DiscoverServiceConsumersInputFilters }',
        },
        {
            access: true,
            type: 'type DiscoverServiceConsumersOutputStatistics { created: Int!, residentsFound: Int!, billingAccountsFound: Int! }',
        },
        {
            access: true,
            type: 'type DiscoverServiceConsumersOutput { status: String!, statistics: DiscoverServiceConsumersOutputStatistics! }',
        },
    ],

    mutations: [
        {
            access: access.canDiscoverServiceConsumers,
            schema: 'discoverServiceConsumers(data: DiscoverServiceConsumersInput!): DiscoverServiceConsumersOutput',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { dv, sender, billingAccountsIds, filters } = data

                if (billingAccountsIds.length === 0) {
                    return {
                        status: 'skip',
                        statistics: {
                            created: 0,
                            residentsFound: 0,
                            billingAccountsFound: 0,
                        },
                    }
                }

                const reqId = get(context, ['req', 'id'])

                const billingAccounts = await BillingAccount.getAll(
                    context,
                    {
                        deletedAt: null,
                        context: { status: CONTEXT_FINISHED_STATUS, deletedAt: null },
                        id_in: billingAccountsIds,
                        isClosed: false,
                        ownerType_not: BILLING_ACCOUNT_OWNER_TYPE_COMPANY,
                    },
                )

                let items = []
                for (const billingAccount of billingAccounts) {
                    const organizationId = get(billingAccount, ['context', 'organization', 'id'], null)
                    const organizationType = get(billingAccount, ['context', 'organization', 'type'], null)
                    const address = get(billingAccount, ['property', 'address'], null)
                    const addressKey = get(billingAccount, ['property', 'addressKey'], null)
                    const unitType = get(billingAccount, 'unitType', null)
                    const unitName = get(billingAccount, 'unitName', null)

                    const shouldDiscover = organizationType === SERVICE_PROVIDER_TYPE ? true : await featureToggleManager.isFeatureEnabled(
                        context,
                        ENABLE_DISCOVER_SERVICE_CONSUMERS,
                        { organization: organizationId },
                    )

                    if (shouldDiscover) {
                        items.push({ organizationId, address, addressKey, unitType, unitName })
                    }
                }

                // Filter by acquiring context
                /** @type {Object<string, string[]>} */
                let organizationsToAcquiringContextsMap = {}
                await loadListByChunks({
                    context,
                    list: AcquiringIntegrationContext,
                    chunkSize: 50,
                    where: {
                        deletedAt: null,
                        organization: { id_in: items.map(({ organizationId }) => organizationId) },
                        status: CONTEXT_FINISHED_STATUS,
                    },
                    chunkProcessor: (chunk) => {
                        chunk.forEach((row) => {
                            const organizationId = get(row, ['organization', 'id'])
                            const acquiringContextId = get(row, 'id')
                            organizationsToAcquiringContextsMap = {
                                ...organizationsToAcquiringContextsMap,
                                [organizationId]: [
                                    ...(organizationsToAcquiringContextsMap[organizationId] || []),
                                    acquiringContextId,
                                ],
                            }
                        })
                        return []
                    },
                })

                items = items.filter((item) => !!get(organizationsToAcquiringContextsMap, item.organizationId))

                // Filter by property
                const organizationsIdsWithProperties = new Set()
                await loadListByChunks({
                    context,
                    list: Property,
                    chunkSize: 50,
                    where: {
                        deletedAt: null,
                        OR: items.map((item) => ({
                            AND: [
                                { organization: { id: item.organizationId } },
                                { OR: [{ address_i: item.address }, { addressKey: item.addressKey }] },
                            ],
                        })),
                    },
                    chunkProcessor: (chunk) => {
                        chunk.forEach((row) => {
                            organizationsIdsWithProperties.add(`${get(row, ['organization', 'id'])}_${get(row, 'address')}`)
                        })
                        return []
                    },
                })

                items = items.filter((item) => organizationsIdsWithProperties.has(`${item.organizationId}_${item.address}`))

                const residentsWhere = {
                    deletedAt: null,
                    OR: items.map(({ address, addressKey, unitType, unitName }) => ({
                        AND: [{ OR: [{ address_i: address }, { addressKey }] }, { unitType }, { unitName }],
                    })),
                }
                const residentsFilter = get(filters, 'residentsIds')
                if (residentsFilter) {
                    residentsWhere.id_in = residentsFilter
                }
                const residents = await Resident.getAll(context, residentsWhere)

                const combinations = flatMap(residents, (resident) => billingAccounts.map((account) => {
                    if (
                        (
                            resident.address === account.property.address
                            || resident.addressKey === account.property.addressKey
                        )
                        && resident.unitType === account.unitType
                        && resident.unitName === account.unitName
                    ) {
                        return [resident, account]
                    }
                }))
                const definedCombinations = combinations.filter(Boolean)

                const serviceConsumersData = definedCombinations.map(([resident, account]) => {
                    const organizationId = get(account, ['context', 'organization', 'id'], null)
                    const billingContextId = get(account, ['context', 'id'], null)
                    const [acquiringContextId] = get(organizationsToAcquiringContextsMap, organizationId, [null])

                    return {
                        dv,
                        sender,
                        resident: resident.id,
                        accountNumber: account.number,
                        organization: organizationId,
                        billingAccount: account.id,
                        billingIntegrationContext: billingContextId || null,
                        acquiringIntegrationContext: acquiringContextId || null,
                        isDiscovered: true,
                    }
                })

                // Find already created service consumers to prevent creating of duplicates
                const existingServiceConsumers = await ServiceConsumer.getAll(context, {
                    OR: serviceConsumersData.map((data) => ({
                        AND: [
                            { resident: { id: data.resident } },
                            { accountNumber: data.accountNumber },
                            { organization: { id: data.organization } },
                        ],
                    })),
                })

                const createdServiceConsumers = await Promise.all(
                    serviceConsumersData.map((serviceConsumerData) => {
                        const [existingServiceConsumer] = filter(existingServiceConsumers, {
                            resident: { id: serviceConsumerData.resident },
                            accountNumber: serviceConsumerData.accountNumber,
                            organization: { id: serviceConsumerData.organization },
                        })

                        const data = {
                            ...serviceConsumerData,
                            resident: { connect: { id: serviceConsumerData.resident } },
                            organization: { connect: { id: serviceConsumerData.organization } },
                            billingAccount: { connect: { id: serviceConsumerData.billingAccount } },
                            billingIntegrationContext: serviceConsumerData.billingIntegrationContext ? { connect: { id: serviceConsumerData.billingIntegrationContext } } : null,
                            acquiringIntegrationContext: serviceConsumerData.acquiringIntegrationContext ? { connect: { id: serviceConsumerData.acquiringIntegrationContext } } : null,
                        }

                        if (existingServiceConsumer) {
                            return ServiceConsumer.update(context, existingServiceConsumer.id, {
                                // We don't update organization!
                                ...omit(data, 'organization'),
                                deletedAt: null,
                            })
                        }

                        return ServiceConsumer.create(context, data)
                    }),
                )

                const statistics = {
                    created: createdServiceConsumers.filter(Boolean).length,
                    residentsFound: residents.length,
                    billingAccountsFound: billingAccounts.length,
                }

                logger.info({
                    msg: 'Created ServiceConsumers',
                    payload: { billingAccountsIds },
                    statistics,
                    reqId,
                })

                return { status: 'success', statistics }
            },
        },
    ],
})

module.exports = {
    DiscoverServiceConsumersService,
}
