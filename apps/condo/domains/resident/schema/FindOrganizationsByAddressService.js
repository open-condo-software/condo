/**
 * Generated by `createservice resident.FindOrganizationsByAddressService --type queries`
 */
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/resident/access/FindOrganizationsByAddressService')
const {
    MAX_RESIDENT_FIND_ORGANIZATIONS_BY_WINDOW_SEC,
    RESIDENT_FIND_ORGANIZATIONS_WINDOW_SEC,
} = require('@condo/domains/resident/constants/constants')
const {
    findOrganizationsByAddressKeyTinAccountNumber,
    findOrganizationsByAddressKeyUnitNameUnitType,
    findOrganizationsByAddressKey,
} = require('@condo/domains/resident/utils/serverSchema/findOrganizationsByAddress')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { RedisGuard } = require('@condo/domains/user/utils/serverSchema/guards')

const redisGuard = new RedisGuard()

const checkLimits = async (uniqueField, context) => {
    await redisGuard.checkCustomLimitCounters(
        `find-organizations-by-address-${uniqueField}`,
        RESIDENT_FIND_ORGANIZATIONS_WINDOW_SEC,
        MAX_RESIDENT_FIND_ORGANIZATIONS_BY_WINDOW_SEC,
        context,
    )
}

const FindOrganizationsByAddressService = new GQLCustomSchema('FindOrganizationsByAddressService', {
    types: [
        {
            access: true,
            type: 'input FindOrganizationsByAddressInput { addressKey: String!, unitName: String, unitType: String, tin: String, accountNumber: String }',
        },
        {
            access: true,
            type: 'type FindOrganizationByAddressReceiptType { number: String, category: ID!, balance: String, routingNumber: String, bankAccount: String }',
        },
        {
            access: true,
            type: 'type FindOrganizationByAddressMeterType { resource: String!, number: String, account: String, value: String }',
        },
        {
            access: true,
            type: 'type FindOrganizationByAddressOutput { id: String!, name: String!, tin: String!, type:OrganizationTypeType!, receipts: [FindOrganizationByAddressReceiptType], meters: [FindOrganizationByAddressMeterType] }',
        },
    ],
    queries: [
        {
            access: access.canFindOrganizationsByAddress,
            schema: 'findOrganizationsByAddress (data: FindOrganizationsByAddressInput!): [FindOrganizationByAddressOutput]',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { unitName, unitType, tin, accountNumber } = data

                if (context.authedItem.type === RESIDENT) {
                    await checkLimits(context.authedItem.id, context)
                }

                if (tin && accountNumber) {
                    return findOrganizationsByAddressKeyTinAccountNumber(data)
                } else if (unitName && unitType) {
                    return findOrganizationsByAddressKeyUnitNameUnitType(context, data)
                } else {
                    return findOrganizationsByAddressKey(data)
                }
            },
        },
    ],
})

module.exports = {
    FindOrganizationsByAddressService,
}
