/**
 * Generated by `createschema resident.ServiceConsumer 'resident:Relationship:Resident:CASCADE; billingAccount?:Relationship:BillingAccount:SET_NULL; accountNumber:Text;'`
 */

const { Text, Relationship } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/resident/access/ServiceConsumer')


const ServiceConsumer = new GQLListSchema('ServiceConsumer', {
    schemaDoc: 'Service Consumer object. Existence of this object means that the resident is willing to pay for certain services',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        resident: {
            schemaDoc: 'Resident object',
            type: Relationship,
            ref: 'Resident',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        billingAccount: {
            schemaDoc: 'Billing account, that will allow this resident to pay for certain service',
            type: Relationship,
            ref: 'BillingAccount',
            isRequired: false,
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        billingIntegrationContext: {
            schemaDoc: 'Billing integration context, that this serviceConsumer is connected to',
            type: Relationship,
            ref: 'BillingIntegrationOrganizationContext',
            isRequired: false,
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        acquiringIntegrationContext: {
            schemaDoc: 'Acquiring integration context, that this serviceConsumer is connected to',
            type: Relationship,
            ref: 'AcquiringIntegrationContext',
            isRequired: true,
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        accountNumber: {
            schemaDoc: 'Account number taken from resident. This is what resident think his account number is',
            type: Text,
            isRequired: true,
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadServiceConsumers,
        create: access.canManageServiceConsumers,
        update: access.canManageServiceConsumers,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ServiceConsumer,
}
