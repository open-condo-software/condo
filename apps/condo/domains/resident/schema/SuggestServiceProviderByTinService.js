/**
 * Generated by `createservice organization.SuggestServiceProviderByTinService --type queries`
 */

const { pick, uniqBy } = require('lodash')

const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/acquiring/constants/context')
const { AcquiringIntegrationContext } = require('@condo/domains/acquiring/utils/serverSchema')
const { MeterResourceOwner } = require('@condo/domains/meter/utils/serverSchema')
const { SERVICE_PROVIDER_TYPE } = require('@condo/domains/organization/constants/common')
const { Organization } = require('@condo/domains/organization/utils/serverSchema')
const access = require('@condo/domains/resident/access/SuggestServiceProviderByTinService')
const { MAX_RESIDENT_SUGGEST_SERVICE_PROVIDER_BY_WINDOW_SEC, RESIDENT_SUGGEST_SERVICE_PROVIDER_WINDOW_SEC } = require('@condo/domains/resident/constants')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { RedisGuard } = require('@condo/domains/user/utils/serverSchema/guards')

const redisGuard = new RedisGuard()

const checkLimits = async (uniqueField) => {
    await redisGuard.checkCustomLimitCounters(
        `suggest-service-provider-by-tin-${uniqueField}`,
        RESIDENT_SUGGEST_SERVICE_PROVIDER_WINDOW_SEC,
        MAX_RESIDENT_SUGGEST_SERVICE_PROVIDER_BY_WINDOW_SEC,
    )
}

const filterOrganizationsByAcquiringContextOrMeterResourceOwnership = async (context, organizations) => {
    const organizationIds = [...new Set(organizations.map(organization => organization.id))]

    const acquiringIntegrationContexts = await AcquiringIntegrationContext.getAll(context, {
        organization: { id_in: organizationIds },
        deletedAt: null,
        status: CONTEXT_FINISHED_STATUS,
    })

    const meterResourceOwners = await MeterResourceOwner.getAll(context, {
        organization: { id_in: organizationIds },
        deletedAt: null,
    })

    const organizationsForSuggest = new Set(
        acquiringIntegrationContexts.map(context => context.organization.id)
            .concat(meterResourceOwners.map(owner => owner.organization.id))
    )

    return organizations.filter(organization => organizationsForSuggest.has(organization.id))
}


const SuggestServiceProviderByTinService = new GQLCustomSchema('SuggestServiceProviderByTinService', {
    types: [
        {
            access: true,
            type: 'input SuggestProviderByTinInput { tinOrName: String! }',
        },
        {
            access: true,
            type: 'type SuggestProviderByTinOutput { tin: String!, name: String! }',
        },
    ],
    
    queries: [
        {
            access: access.canSuggestProviderByTin,
            schema: 'suggestProviderByTin (data: SuggestProviderByTinInput!): [SuggestProviderByTinOutput]',
            resolver: async (parent, args, context = {}) => {
                if (context.authedItem.type === RESIDENT) {
                    await checkLimits(context.authedItem.id)
                }

                const { data: { tinOrName } } = args
                if (!tinOrName) {
                    return []
                }

                const serviceProviders = await Organization.getAll(context, {
                    OR: [
                        { tin_starts_with: tinOrName.trim() },
                        { name_contains: tinOrName.trim() },
                    ],
                    deletedAt: null,
                    type: SERVICE_PROVIDER_TYPE,
                }, { sortBy: ['name_ASC'] }) // 100 default limit
                const serviceProvidersForSuggest = await filterOrganizationsByAcquiringContextOrMeterResourceOwnership(context, serviceProviders)
                return uniqBy(serviceProvidersForSuggest, 'tin')
                    .map(serviceProvider => pick(serviceProvider, ['tin', 'name']))
            },
        },
    ],
    
})

module.exports = {
    SuggestServiceProviderByTinService,
}
