/**
 * Generated by `createservice resident.FindOrganizationsForAddressService --type queries`
 */

const { GQLCustomSchema, find } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/resident/access/FindOrganizationsForAddressService')
const {
    findBillingReceiptsForOrganizations,
    getAcquiringPresenceForOrganizations,
    getMetersPresenceForOrganizations,
    getBillingInformationForOrganizations,
} = require('@condo/domains/resident/utils/serverSchema/findOrganizationsForAddress')

const FindOrganizationsForAddressService = new GQLCustomSchema('FindOrganizationsForAddressService', {
    types: [
        {
            access: true,
            type: 'input FindOrganizationsForAddressInput { addressKey: String!, unitName: String, unitType: String, tin: String, accountNumber: String }',
        },
        {
            access: true,
            type: 'type FindOrganizationForAddressOrganizationType { id: ID!, name: String!, tin: String!, type: OrganizationTypeType! }',
        },
        {
            access: true,
            type: 'type FindOrganizationForAddressAccountType { number: String!, category: ID!, balance: String, routingNumber: String!, bankAccountNumber: String! }',
        },
        {
            access: true,
            type: 'type FindOrganizationForAddressOutput { organization: FindOrganizationForAddressOrganizationType!, account: FindOrganizationForAddressAccountType, hasMeters: Boolean!, hasBillingData: Boolean! }',
        },
    ],
    
    queries: [
        {
            access: access.canFindOrganizationsForAddress,
            schema: 'findOrganizationsForAddress (data: FindOrganizationsForAddressInput!): [FindOrganizationForAddressOutput]',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const { addressKey, unitName, unitType, tin, accountNumber } = data
                const properties = await find('Property', { addressKey, deletedAt: null })
                if (!properties) {
                    return []
                }
                let organizations = await find('Organization', {
                    id_in: [...new Set(properties.map(({ organization }) => organization))],
                    ...tin ? { tin } : {},
                    deletedAt: null,
                })
                const withAcquiring = await getAcquiringPresenceForOrganizations(organizations)
                organizations = organizations.filter(({ id }) => withAcquiring.has(id))
                const withMeters = await getMetersPresenceForOrganizations(organizations)
                const billingInformation = await getBillingInformationForOrganizations(organizations)
                organizations = organizations.filter(organization => organization.hasMeters || billingInformation[organization.id])
                if (!organizations) {
                    return  []
                }
                const organizationIndex = Object.fromEntries(organizations.map(({ id, name, tin, type }) => ([id, {
                    organization: { id, name, tin, type },
                    hasMeters: withMeters.has(id),
                    hasBillingData: !!billingInformation[id],
                }])))
                if (accountNumber || unitName && unitType) {
                    const receipts = await findBillingReceiptsForOrganizations(organizations, billingInformation, {
                        addressKey, unitName, unitType,
                        accountNumber,
                    })
                    const unknownOrganizations = Object.values(organizationIndex).filter(({ organization: { id } }) => !receipts.find(({ organizationId }) => organizationId === id))
                    return receipts.map(({ organizationId, ...account }) => ({
                        ...organizationIndex[organizationId],
                        account,
                    })).concat(accountNumber ? [] : unknownOrganizations)
                }
                return Object.values(organizationIndex)
            },
        },
    ],
    
})

module.exports = {
    FindOrganizationsForAddressService,
}
