/**
 * Generated by `createservice resident.FindOrganizationsForAddressService --type queries`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, find } = require('@open-condo/keystone/schema')

const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const access = require('@condo/domains/resident/access/FindOrganizationsForAddressService')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY: {
        query: 'findOrganizationsForAddress',
        variable: ['data', 'someVar'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
        code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@open-condo/keystone/errors'
        type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
        message: 'Describe what happened for developer',
        messageForUser: 'api.user.findOrganizationsForAddress.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
    },
}

const FindOrganizationsForAddressService = new GQLCustomSchema('FindOrganizationsForAddressService', {
    types: [
        {
            access: true,
            type: 'input FindOrganizationsForAddressInput { addressKey: String!, unitName: String, unitType: String, tin: String, accountNumber: String }',
        },
        {
            access: true,
            type: 'type OrganizationForAddressOutput { name: String, tin: String, category: ID, accountNumber: String, hasMeters: Checkbox }',
        },
        {
            access: true,
            type: 'type FindOrganizationsForAddressOutput [OrganizationForAddressOutput]',
        },
    ],
    
    queries: [
        {
            access: access.canFindOrganizationsForAddress,
            schema: 'findOrganizationsForAddress (data: FindOrganizationsForAddressInput!): FindOrganizationsForAddressOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                const { addressKey, unitName, unitType, tin, accountNumber } = data
                // 1. Find all properties
                const properties = await find('Property', {
                    addressKey,
                    deletedAt: null,
                })
                if (!properties) {
                    return []
                }
                const organizations = properties.map(({ organization: { id } }) => id)
                console.log(organizations)


                // TODO(codegen): write logic here

                // TODO: throw ERRORS in a following way
                // throw new GQLError(ERRORS.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY)
            },
        },
    ],
    
})

module.exports = {
    FindOrganizationsForAddressService,
}
