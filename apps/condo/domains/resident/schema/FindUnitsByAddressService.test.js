/**
 * Generated by `createservice resident.FindUnitsByAddressService --type queries`
 */

const { makeClient, expectToThrowAuthenticationErrorToResult, expectToThrowAccessDeniedErrorToResult } = require('@open-condo/keystone/test.utils')

const { registerNewOrganization } = require('@condo/domains/organization/utils/testSchema')
const { PARKING_UNIT_TYPE, FLAT_UNIT_TYPE, APARTMENT_UNIT_TYPE, COMMERCIAL_UNIT_TYPE, WAREHOUSE_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { buildingMapJson } = require('@condo/domains/property/constants/property')
const { getUnitsFromSections } = require('@condo/domains/property/utils/serverSchema/helpers')
const { createTestProperty, updateTestProperty } = require('@condo/domains/property/utils/testSchema')
const { findUnitsByAddressByTestClient } = require('@condo/domains/resident/utils/testSchema')
const { makeClientWithResidentUser, makeClientWithSupportUser, makeClientWithServiceUser, makeClientWithStaffUser } = require('@condo/domains/user/utils/testSchema')

let anonymousClient
let supportClient 
let residentClient
let staffClient
let serviceClient

let propertyWithoutMap
let propertyWithMap
let propertyWithMapSectionUnits, propertyWithMapParkingUnits

describe('FindUnitsByAddressService', () => {
    beforeAll(async () => {
        anonymousClient = await makeClient()

        staffClient = await makeClientWithStaffUser()
        serviceClient = await makeClientWithServiceUser()
        supportClient = await makeClientWithSupportUser()
        residentClient = await makeClientWithResidentUser()

        const [organizationObj] = await registerNewOrganization(supportClient)

        const [propertyWithMapObj] = await createTestProperty(supportClient, organizationObj, {
            isApproved: true,
            map: buildingMapJson,
        })
        propertyWithMap = propertyWithMapObj

        propertyWithMapSectionUnits = getUnitsFromSections(buildingMapJson.sections)
        propertyWithMapParkingUnits = getUnitsFromSections(buildingMapJson.parking)
        
        const [propertyWithoutMapObj] = await createTestProperty(supportClient, organizationObj, { isApproved: true })
        propertyWithoutMap = propertyWithoutMapObj

    })

    test('returns empty array if no property map for support', async () => {
        const payload = { addressKey: propertyWithoutMap.addressKey }
        const [data] = await findUnitsByAddressByTestClient(supportClient, payload)

        expect(data.units).toHaveLength(0)
    })

    test('returns empty array if no addressKey for support', async () => {
        const payload = { addressKey: 'not-a-uuid' }
        const [data] = await findUnitsByAddressByTestClient(supportClient, payload)

        expect(data.units).toHaveLength(0)
    })

    test('returns empty array if no addressKey for support 2', async () => {
        const payload = { addressKey: '' }
        const [data] = await findUnitsByAddressByTestClient(supportClient, payload)

        expect(data.units).toHaveLength(0)
    })

    test('returns empty array if no property map for resident', async () => {
        const payload = { addressKey: propertyWithoutMap.addressKey }
        const [data] = await findUnitsByAddressByTestClient(residentClient, payload)

        expect(data.units).toHaveLength(0)
    })

    test('returns array with units if property map exists for support', async () => {
        const payload = { addressKey: propertyWithMap.addressKey }
        const [data] = await findUnitsByAddressByTestClient(supportClient, payload)

        expect(data.units).toHaveLength(propertyWithMapSectionUnits.length + propertyWithMapParkingUnits.length)
    })

    test('returns array with units if property map exists for resident', async () => {
        const payload = { addressKey: propertyWithMap.addressKey }
        const [data] = await findUnitsByAddressByTestClient(residentClient, payload)

        expect(data.units).toHaveLength(propertyWithMapSectionUnits.length + propertyWithMapParkingUnits.length)
    })

    test('service cannot execute the mutation', async () => {
        const payload = { addressKey: propertyWithMap.addressKey }

        await expectToThrowAccessDeniedErrorToResult(async () => {
            await findUnitsByAddressByTestClient(serviceClient, payload)
        })
    })

    test('staff cannot execute the mutation', async () => {
        const payload = { addressKey: propertyWithMap.addressKey }

        await expectToThrowAccessDeniedErrorToResult(async () => {
            await findUnitsByAddressByTestClient(staffClient, payload)
        })
    })

    test('anonymous cannot execute the mutation', async () => {
        const payload = { addressKey: propertyWithMap.addressKey }

        await expectToThrowAuthenticationErrorToResult(async () => {
            await findUnitsByAddressByTestClient(anonymousClient, payload)
        })
    })

    test('all unit types can be returned', async () => {
        const [organizationObj] = await registerNewOrganization(supportClient)
        const [property] = await createTestProperty(supportClient, organizationObj, {
            isApproved: false,
            map: {
                'dv': 1,
                'type': 'building',
                'sections': [
                    {
                        'id': '1',
                        'type': 'section',
                        'index': 1,
                        'name': 'default section',
                        'floors': [
                            {
                                'id': '1',
                                'type': 'floor',
                                'index': 1,
                                'name': '1',
                                'units': [
                                    {
                                        'id': '1',
                                        'label': '1',
                                        'type': 'unit',
                                    },
                                    {
                                        'id': '1',
                                        'label': '1',
                                        'type': 'unit',
                                        'unitType': APARTMENT_UNIT_TYPE,
                                    },
                                    {
                                        'id': '3',
                                        'label': '3',
                                        'type': 'unit',
                                        'unitType': COMMERCIAL_UNIT_TYPE,
                                    },
                                    {
                                        'id': '4',
                                        'label': '4',
                                        'type': 'unit',
                                        'unitType': WAREHOUSE_UNIT_TYPE,
                                    },
                                    {
                                        'id': '5',
                                        'label': '5',
                                        'type': 'unit',
                                        'unitType': FLAT_UNIT_TYPE,
                                    },
                                ],
                            },
                        ],
                    },
                ],
                'parking': [
                    {
                        'id': '1',
                        'type': 'section',
                        'index': 1,
                        'name': 'default parking',
                        'floors': [
                            {
                                'id': '1',
                                'type': 'floor',
                                'index': 1,
                                'name': '1',
                                'units': [
                                    {
                                        'id': '1',
                                        'label': 'test-parking-unit-name',
                                        'type': 'unit',
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
        })

        const payload = { addressKey: property.addressKey }
        const [data] = await findUnitsByAddressByTestClient(residentClient, payload)

        expect(data.units).toHaveLength(6)

        expect(data.units.filter(x => x.unitType === PARKING_UNIT_TYPE)).toStrictEqual([{ unitName: 'test-parking-unit-name', unitType: PARKING_UNIT_TYPE }])
        expect(data.units.filter(x => x.unitType === APARTMENT_UNIT_TYPE)).toStrictEqual([{ unitName: '1', unitType: APARTMENT_UNIT_TYPE }])
        expect(data.units.filter(x => x.unitType === COMMERCIAL_UNIT_TYPE)).toStrictEqual([{ unitName: '3', unitType: COMMERCIAL_UNIT_TYPE }])
        expect(data.units.filter(x => x.unitType === WAREHOUSE_UNIT_TYPE)).toStrictEqual([{ unitName: '4', unitType: WAREHOUSE_UNIT_TYPE }])
        expect(data.units.filter(x => x.unitType === FLAT_UNIT_TYPE)).toStrictEqual([{ unitName: '1', unitType: FLAT_UNIT_TYPE }, { unitName: '5', unitType: FLAT_UNIT_TYPE }])
    })

    test('units are returned from the correct property', async () => {
        const [organizationObj] = await registerNewOrganization(supportClient)
        const [organization2Obj] = await registerNewOrganization(supportClient)
        const [organization3Obj] = await registerNewOrganization(supportClient)

        const [oldestProperty] = await createTestProperty(supportClient, organizationObj, {
            isApproved: false,
            map: {
                'dv': 1,
                'type': 'building',
                'sections': [
                    {
                        'id': '1',
                        'type': 'section',
                        'index': 1,
                        'name': 'default section',
                        'floors': [
                            {
                                'id': '1',
                                'type': 'floor',
                                'index': 1,
                                'name': '1',
                                'units': [
                                    {
                                        'id': '1',
                                        'label': '1',
                                        'type': 'unit',
                                    },
                                    {
                                        'id': '1',
                                        'label': '1',
                                        'type': 'unit',
                                    },
                                ],
                            },
                        ],
                    },
                ],
                'parking': [],
            },
        })

        const [ newProperty ] = await createTestProperty(supportClient, organization2Obj, {
            address: oldestProperty.address,
            isApproved: false,
            map: buildingMapJson,
        })

        const [oldestPropertyUnits] = await findUnitsByAddressByTestClient(residentClient, { addressKey: oldestProperty.addressKey })
        expect(newProperty.addressKey).toEqual(oldestProperty.addressKey)
        expect(oldestPropertyUnits.units).toHaveLength(2)

        const [deletedOldestProperty] = await updateTestProperty(supportClient, oldestProperty.id, { deletedAt: 'true' })

        const [newOldestPropertyUnits] = await findUnitsByAddressByTestClient(residentClient, { addressKey: oldestProperty.addressKey })
        expect(deletedOldestProperty.deletedAt).toBeDefined()
        expect(newOldestPropertyUnits.units).toHaveLength(propertyWithMapSectionUnits.length + propertyWithMapParkingUnits.length)

        const [approvedProperty] = await createTestProperty(supportClient, organization3Obj, {
            address: oldestProperty.address,
            isApproved: true,
        })

        const [approvedPropertyUnits] = await findUnitsByAddressByTestClient(residentClient, { addressKey: oldestProperty.addressKey })
        expect(approvedPropertyUnits.units).toHaveLength(0)
        expect(approvedProperty.addressKey).toEqual(oldestProperty.addressKey)
    })
})