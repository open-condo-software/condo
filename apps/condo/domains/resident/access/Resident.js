/**
 * Generated by `createschema resident.Resident 'user:Relationship:User:CASCADE; organization:Relationship:Organization:PROTECT; property:Relationship:Property:PROTECT; billingAccount?:Relationship:BillingAccount:SET_NULL; unitName:Text;'`
 */
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { isSoftDelete } = require('@core/keystone/access')
const { getById } = require('@core/keystone/schema')

async function canReadResidents ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return {}
        if (item.type === RESIDENT) {
            return { user: { id: item.id } }
        }
        return false
    }
    return false
}

async function canManageResidents ({ authentication: { item, listKey }, originalInput, operation, itemId }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        if (item.type === RESIDENT) {
            // Only soft-delete is allowed for current resident
            if (operation === 'update' && itemId) {
                const resident = await getById('Resident', itemId)
                if (!resident || resident.user !== item.id) return false
                if (isSoftDelete(originalInput)) return true
            }
            return false
        }
        return false
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadResidents,
    canManageResidents,
}