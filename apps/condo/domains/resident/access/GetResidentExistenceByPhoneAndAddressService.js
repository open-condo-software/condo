/**
 * Generated by `createservice resident.GetResidentExistenceByPhoneAndAddressService --type queries`
 */
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { checkOrganizationPermission, checkRelatedOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')


async function canGetResidentExistenceByPhoneAndAddress ({ authentication: { item: user }, args }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    const { data: { propertyId } } = args
    const userId = user.id
    const property = await getById('Property', propertyId)
    const propertyOrganization = property.organization
    
    const organizationPermission = await checkOrganizationPermission(userId, propertyOrganization)
    if (organizationPermission) {
        return true
    }

    const relatedOrganizationPermission = await checkRelatedOrganizationPermission(userId, propertyOrganization)
    if (relatedOrganizationPermission) {
        return true
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canGetResidentExistenceByPhoneAndAddress,
}