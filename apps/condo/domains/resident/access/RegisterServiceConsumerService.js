/**
 * Generated by `createservice resident.RegisterServiceConsumerService --type mutations`
 */
const { get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canRegisterServiceConsumer ({ args: { data }, authentication: { item: user } }) {
    if (!user) throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true
    if (user.type === RESIDENT) {
        //Two mutations have different input types
        const residentId = get(data, 'residentId') || get(data, 'resident.id')

        if (!residentId) return false

        const [isMatch] = await find('Resident', {
            id: residentId,
            user: { id: user.id },
        })

        return !!isMatch
    }

    return false
}


/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canRegisterServiceConsumer,
}