/**
 * Generated by `createservice resident.RegisterServiceConsumerService --type mutations`
 */
const { get } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canRegisterServiceConsumer ({ args: { data }, authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.type === RESIDENT) {
        //Two mutations have different input types
        const [isMatch] =  await find('Resident', {
            id: get(data, 'residentId') || get(data, 'resident.id'),
            user: { id: get(user, 'id') },
        })
        
        return !!isMatch
    }

    return !!user.isAdmin
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canRegisterServiceConsumer,
}