/**
 * Generated by `createschema resident.Resident 'user:Relationship:User:CASCADE; organization:Relationship:Organization:PROTECT; property:Relationship:Property:PROTECT; billingAccount?:Relationship:BillingAccount:SET_NULL; unitName:Text;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */

const { generateServerUtils, execGqlWithoutAccess } = require('@condo/codegen/generate.server.utils')

const { Resident: ResidentGQL } = require('@condo/domains/resident/gql')
const { REGISTER_RESIDENT_MUTATION } = require('@condo/domains/property/gql')
const { ServiceConsumer: ServiceConsumerGQL } = require('@condo/domains/resident/gql')
const { REGISTER_CONSUMER_SERVICE_MUTATION } = require('@condo/domains/resident/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const Resident = generateServerUtils(ResidentGQL)

async function registerResident (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: REGISTER_RESIDENT_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to registerResident',
        dataPath: 'obj',
    })
}


const ServiceConsumer = generateServerUtils(ServiceConsumerGQL)
async function registerConsumerService (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: REGISTER_CONSUMER_SERVICE_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to registerConsumerService',
        dataPath: 'obj',
    })
}

/* AUTOGENERATE MARKER <CONST> */

module.exports = {
    Resident,
    registerResident,
    ServiceConsumer,
    registerConsumerService,
/* AUTOGENERATE MARKER <EXPORTS> */
}
