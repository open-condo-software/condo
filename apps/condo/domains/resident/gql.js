/**
 * Generated by `createschema resident.Resident 'user:Relationship:User:CASCADE; organization:Relationship:Organization:PROTECT; property:Relationship:Property:PROTECT; billingAccount?:Relationship:BillingAccount:SET_NULL; unitName:Text;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */

const { generateGqlQueries } = require('@condo/domains/common/utils/codegeneration/generate.gql')
const { ADDRESS_META_SUBFIELDS_QUERY_LIST } = require('@condo/domains/property/schema/fields/AddressMetaField')

const gql = require('graphql-tag')

const COMMON_FIELDS = 'id dv sender { dv fingerprint } v deletedAt newId createdBy { id name } updatedBy { id name } createdAt updatedAt'

const RESIDENT_ORGANIZATION_FIELDS = 'id name country'
const RESIDENT_PROPERTY_FIELDS = 'id name address'
const ORGANIZATION_FEATURES_FIELDS = 'hasBillingData hasMeters'
const PAYMENT_CATEGORIES_FIELDS = 'id categoryName billingName acquiringName'
const RESIDENT_FIELDS = `{ user { id name } organization { id name tin } residentOrganization { ${RESIDENT_ORGANIZATION_FIELDS} } property { id createdAt deletedAt } residentProperty { ${RESIDENT_PROPERTY_FIELDS} } address addressMeta { ${ADDRESS_META_SUBFIELDS_QUERY_LIST} } unitName unitType ${COMMON_FIELDS} organizationFeatures { ${ORGANIZATION_FEATURES_FIELDS} } paymentCategories { ${PAYMENT_CATEGORIES_FIELDS} } }`
const Resident = generateGqlQueries('Resident', RESIDENT_FIELDS)

const REGISTER_RESIDENT_MUTATION = gql`
    mutation registerResident ($data: RegisterResidentInput!) {
        result: registerResident(data: $data) ${RESIDENT_FIELDS}
    }
`
const SERVICE_CONSUMER_FIELDS = `{ residentBillingAccount { id } residentAcquiringIntegrationContext { id integration { id hostUrl } } paymentCategory resident { id user { id } organization { id } unitType unitName deletedAt } billingAccount { id number } accountNumber ${COMMON_FIELDS} organization { id name tin country } }`
const ServiceConsumer = generateGqlQueries('ServiceConsumer', SERVICE_CONSUMER_FIELDS)

const REGISTER_SERVICE_CONSUMER_MUTATION = gql`
    mutation registerServiceConsumer ($data: RegisterServiceConsumerInput!) {
        obj: registerServiceConsumer(data: $data) ${SERVICE_CONSUMER_FIELDS}
    }
`

/* AUTOGENERATE MARKER <CONST> */

module.exports = {
    Resident,
    REGISTER_RESIDENT_MUTATION,
    ServiceConsumer,
    REGISTER_SERVICE_CONSUMER_MUTATION,
    RESIDENT_ORGANIZATION_FIELDS,
    RESIDENT_PROPERTY_FIELDS,
    ORGANIZATION_FEATURES_FIELDS,
    PAYMENT_CATEGORIES_FIELDS,
/* AUTOGENERATE MARKER <EXPORTS> */
}
