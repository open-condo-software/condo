/**
 * Generated by `createservice property.ExportPropertiesToExcelService --type queries`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/property/access/ExportPropertiesToExcelService')
const { Property: PropertyAPI } = require('@condo/domains/property/utils/serverSchema')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@core/keystone/errors')
const { NOTHING_TO_EXPORT } = require('@condo/domains/common/constants/errors')
const dayjs = require('dayjs')
const { createExportFile } = require('@condo/domains/common/utils/createExportFile')
const { loadListByChunks } = require('@condo/domains/common/utils/serverSchema/')

const errors = {
    NOTHING_TO_EXPORT: {
        query: 'exportPropertiesToExcel',
        code: BAD_USER_INPUT,
        type: NOTHING_TO_EXPORT,
        message: 'No properties found to export for specified organization',
        messageForUser: 'api.property.exportPropertiesToExcel.NOTHING_TO_EXPORT',
    },
}

// TODO(zuch): use workers for export
const ExportPropertiesToExcelService = new GQLCustomSchema('ExportPropertiesToExcelService', {
    types: [
        {
            access: true,
            type: 'input ExportPropertiesToExcelInput { where: PropertyWhereInput!, sortBy: [SortPropertiesBy!] }',
        },
        {
            access: true,
            type: 'type ExportPropertiesToExcelOutput { status: String!, linkToFile: String!  }',
        },
    ],

    queries: [
        {
            access: access.canExportPropertiesToExcel,
            schema: 'exportPropertiesToExcel (data: ExportPropertiesToExcelInput!): ExportPropertiesToExcelOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { where, sortBy } = args.data
                const allProperties = await loadListByChunks({
                    context,
                    list: PropertyAPI,
                    where,
                    sortBy,
                })
                if (allProperties.length === 0) {
                    throw new GQLError(errors.NOTHING_TO_EXPORT, context)
                }
                const excelRows = allProperties.map(property => {
                    return {
                        organization: property.organization.name,
                        address: property.address,
                        unitsCount: property.unitsCount,
                        uninhabitedUnitsCount: property.uninhabitedUnitsCount,
                        ticketsClosed: property.ticketsClosed,
                        ticketsInWork: property.ticketsInWork,
                    }
                })
                const linkToFile = await createExportFile({
                    fileName: `properties_${dayjs().format('DD_MM')}.xlsx`,
                    templatePath: './domains/property/templates/PropertiesExportTemplate.xlsx',
                    replaces: { properties: excelRows },
                    meta: {
                        listkey: 'Property',
                        id: allProperties[0].id,
                    },
                })
                return { status: 'ok', linkToFile }
            },
        },
    ],

})

module.exports = {
    ExportPropertiesToExcelService,
}
