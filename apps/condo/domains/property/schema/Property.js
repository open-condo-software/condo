/**
 * Generated by `createschema property.Property 'organization:Text; name:Text; address:Text; addressMeta:Json; type:Select:building,village; map?:Json'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/property/access/Property')
const { ORGANIZATION_OWNED_FIELD } = require('../../../schema/_common')

// ORGANIZATION_OWNED_FIELD
const Property = new GQLListSchema('Property', {
    // TODO(codegen): write doc for the Property domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        organization: ORGANIZATION_OWNED_FIELD,

        name: {
            // TODO(codegen): write doc for Property.name field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        address: {
            // TODO(codegen): write doc for Property.address field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        addressMeta: {
            // TODO(codegen): write doc for Property.addressMeta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: true,
        },

        type: {
            // TODO(codegen): write doc for Property.type field!
            schemaDoc: 'TODO DOC!',
            type: Select,
            options: 'building,village',
            isRequired: true,
        },

        map: {
            // TODO(codegen): write doc for Property.map field!
            schemaDoc: 'TODO DOC!',
            type: Json,
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadProperties,
        create: access.canManageProperties,
        update: access.canManageProperties,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Property,
}
