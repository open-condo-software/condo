/**
 * Generated by `createservice property.CheckPropertyWithAddressExistService --type queries`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/property/access/CheckPropertyWithAddressExistService')
const { Property } = require('@condo/domains/property/utils/serverSchema')
const get = require('lodash/get')
const { jsonAddressMetaValidator } = require('../utils/validation.utils')
const { getAddressUpToBuildingFrom, FLAT_WITHOUT_FLAT_TYPE_MESSAGE } = require('@condo/domains/common/utils/addressApi/helpers')

const NO_OBJECT_MESSAGE = 'No object specified!'
const META_INCORRECT_JSON_MESSAGE = 'AddressMeta Json had incorrect format!'
const DV_VERSION_MISMATCH_MESSAGE = 'Unknown version of addressMeta! Expected "dv" to equal 1'

const CheckPropertyWithAddressExistService = new GQLCustomSchema('CheckPropertyWithAddressExistService', {
    types: [
        {
            access: true,
            type: 'input CheckPropertyWithAddressExistInput { address: String!, addressMeta: JSON! }',
        },
        {
            access: true,
            type: 'type CheckPropertyWithAddressExistOutput { isFound: Boolean! }',
        },
    ],
    
    queries: [
        {
            access: access.canCheckPropertyWithAddressExist,
            schema: 'checkPropertyWithAddressExist (data: CheckPropertyWithAddressExistInput!): CheckPropertyWithAddressExistOutput',
            resolver: async (parent, args, context = {}) => {
                const { data: inputData } = args
                // Later we will use "address" without "addressMeta"
                const { addressMeta } = inputData
                if (!addressMeta) throw new Error(NO_OBJECT_MESSAGE)
                if (!jsonAddressMetaValidator(addressMeta)) throw new Error(META_INCORRECT_JSON_MESSAGE)

                const dv = get(addressMeta, 'dv')
                if (dv !== 1) {
                    throw new Error(DV_VERSION_MISMATCH_MESSAGE)
                }
                const flat = get(addressMeta, ['data', 'flat'])
                const flatType = get(addressMeta, ['data', 'flat_type'])
                if (flat && !flatType) {
                    throw new Error(FLAT_WITHOUT_FLAT_TYPE_MESSAGE)
                }

                const search = getAddressUpToBuildingFrom(addressMeta)

                const count = await Property.count(context, {
                    address_i: search,
                })
                return {
                    isFound: count > 0,
                }
            },
        },
    ],
    
})

module.exports = {
    CheckPropertyWithAddressExistService,
    NO_OBJECT_MESSAGE,
    META_INCORRECT_JSON_MESSAGE,
    DV_VERSION_MISMATCH_MESSAGE,
}
