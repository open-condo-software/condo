/**
 * Generated by `createservice property.CheckPropertyWithAddressExistService --type queries`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/property/access/CheckPropertyWithAddressExistService')
const { Property } = require('@condo/domains/property/utils/serverSchema')
const get = require('lodash/get')
const { getAddressUpToBuildingFrom } = require('../utils/serverSchema/helpers')

const NO_OBJECT_MESSAGE = 'No object specified!'
const META_INCORRECT_JSON_MESSAGE = 'AddressMeta Json had incorrect format!'
const DV_VERSION_MISMATCH_MESSAGE = 'Unknown version of addressMeta! Expected "dv" to equal 1'

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@core/keystone/errors')
const { DV_VERSION_MISMATCH } = require('@condo/domains/common/constants/errors')
const { FLAT_WITHOUT_FLAT_TYPE } = require('../constants/errors')

const errors = {
    DV_VERSION_MISMATCH: {
        query: 'checkPropertyWithAddressExist',
        variable: ['data', 'addressMeta', 'dv'],
        code: BAD_USER_INPUT,
        type: DV_VERSION_MISMATCH,
        message: 'Version number value {dv} is incorrect',
    },
    FLAT_WITHOUT_FLAT_TYPE: {
        query: 'checkPropertyWithAddressExist',
        variable: ['data', 'addressMeta', 'flatType'],
        code: BAD_USER_INPUT,
        type: FLAT_WITHOUT_FLAT_TYPE,
        message: 'Flat type is not specified',
    },
}

const CheckPropertyWithAddressExistService = new GQLCustomSchema('CheckPropertyWithAddressExistService', {
    types: [
        {
            access: true,
            type: 'input CheckPropertyWithAddressExistInput { address: String!, addressMeta: AddressMetaFieldInput! }',
        },
        {
            access: true,
            type: 'type CheckPropertyWithAddressExistOutput { isFound: Boolean! }',
        },
    ],
    
    queries: [
        {
            access: access.canCheckPropertyWithAddressExist,
            schema: 'checkPropertyWithAddressExist (data: CheckPropertyWithAddressExistInput!): CheckPropertyWithAddressExistOutput',
            doc: {
                summary: 'Tells, whether a Property with given address exists in condo database',
                description: 'In specified address string a part up to building will be taken into account. So, it will make no sense when something more precise, like apartment number, will be specified.',
                errors,
            },
            resolver: async (parent, args, context = {}) => {
                const { data: inputData } = args
                // Later we will use "address" without "addressMeta"
                const { addressMeta } = inputData

                const dv = get(addressMeta, 'dv')
                if (dv !== 1) {
                    throw new GQLError({
                        ...errors.DV_VERSION_MISMATCH,
                        messageInterpolation: {
                            dv,
                        },
                    }, context)
                }
                const flat = get(addressMeta, ['data', 'flat'])
                const flatType = get(addressMeta, ['data', 'flat_type'])
                if (flat && !flatType) {
                    throw new GQLError(errors.FLAT_WITHOUT_FLAT_TYPE, context)
                }

                const search = getAddressUpToBuildingFrom(addressMeta)

                const count = await Property.count(context, {
                    address_i: search,
                })
                return {
                    isFound: count > 0,
                }
            },
        },
    ],
    
})

module.exports = {
    CheckPropertyWithAddressExistService,
    NO_OBJECT_MESSAGE,
    META_INCORRECT_JSON_MESSAGE,
    DV_VERSION_MISMATCH_MESSAGE,
}
