/**
 * Generated by `createschema property.PropertyFile 'property:Relationship:Property:CASCADE; category:Relationship:PropertyFileCategory:CASCADE; file:File;'`
 */
const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { createTestOrganization,  createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { PropertyFile, createTestPropertyFile, updateTestPropertyFile, createTestProperty, createTestPropertyFileCategory, softDeleteTestPropertyFile } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


describe('PropertyFile', () => {
    let admin, support, anonymous, employeeUserWithPropertyFilePermissions, employeeUserWithoutPropertyFilePermissions, employeeUserInOtherOrganization, notEmployeeUser,
        property, propertyFileCategory, propertyFile

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
        employeeUserWithPropertyFilePermissions = await makeClientWithNewRegisteredAndLoggedInUser()
        employeeUserWithoutPropertyFilePermissions = await makeClientWithNewRegisteredAndLoggedInUser()
        employeeUserInOtherOrganization = await makeClientWithNewRegisteredAndLoggedInUser()
        notEmployeeUser = await makeClientWithNewRegisteredAndLoggedInUser()

        const [testOrganization] = await createTestOrganization(admin)
        const [testOtherOrganization] = await createTestOrganization(admin)
        const [testProperty] = await createTestProperty(admin, testOrganization)
        const [roleWithAccess] = await createTestOrganizationEmployeeRole(admin, testOrganization, { canManagePropertyFiles: true, canReadPropertyFiles: true })
        const [roleWithoutAccess] = await createTestOrganizationEmployeeRole(admin, testOrganization, { canManagePropertyFiles: false, canReadPropertyFiles: false })
        const [roleWithCanAccessInOtherOrganization] = await createTestOrganizationEmployeeRole(admin, testOtherOrganization, { canManagePropertyFiles: true, canReadPropertyFiles: true })
        await createTestOrganizationEmployee(admin, testOrganization, employeeUserWithPropertyFilePermissions.user, roleWithAccess)
        await createTestOrganizationEmployee(admin, testOrganization, employeeUserWithoutPropertyFilePermissions.user, roleWithoutAccess)
        await createTestOrganizationEmployee(admin, testOtherOrganization, employeeUserInOtherOrganization.user, roleWithCanAccessInOtherOrganization)
        const [testPropertyFileCategory] = await createTestPropertyFileCategory(admin)
        const [testPropertyFile] = await createTestPropertyFile(admin, testProperty, testPropertyFileCategory)

        property = testProperty
        propertyFileCategory = testPropertyFileCategory
        propertyFile = testPropertyFile
    })

    describe('Access', () => {
        describe('Create', () => {
            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestPropertyFile(anonymous, property, propertyFileCategory)
                })
            })

            it('admin can', async () => {
                const [createdPropertyFile] = await createTestPropertyFile(admin, property, propertyFileCategory)

                expect(createdPropertyFile.id).toMatch(UUID_RE)
                expect(createdPropertyFile.property.id).toEqual(property.id)
                expect(createdPropertyFile.category.id).toEqual(propertyFileCategory.id)
            })

            it('support can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestPropertyFile(support, property, propertyFileCategory)
                })
            })

            it('employee with canManagePropertyFiles can', async () => {
                const [createdPropertyFile] = await createTestPropertyFile(employeeUserWithPropertyFilePermissions, property, propertyFileCategory)

                expect(createdPropertyFile.id).toMatch(UUID_RE)
                expect(createdPropertyFile.property.id).toEqual(property.id)
                expect(createdPropertyFile.category.id).toEqual(propertyFileCategory.id)
            })

            it('employee without canManagePropertyFiles can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestPropertyFile(employeeUserWithoutPropertyFilePermissions, property, propertyFileCategory)
                })
            })

            it('user without employee can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestPropertyFile(notEmployeeUser, property, propertyFileCategory)
                })
            })

            it('employee can not create PropertyFile to property in other organization', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestPropertyFile(employeeUserInOtherOrganization, property, propertyFileCategory)
                })
            })
        })

        describe('Read', () => {
            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await PropertyFile.getOne(anonymous, { id: propertyFile.id })
                })
            })

            it('admin can', async () => {
                const readPropertyFile = await PropertyFile.getOne(admin, { id: propertyFile.id })

                expect(readPropertyFile.id).toMatch(propertyFile.id)
            })

            it('support can not', async () => {
                const readPropertyFile = await PropertyFile.getOne(support, { id: propertyFile.id })

                expect(readPropertyFile).toBeUndefined()
            })

            it('employee with canReadPropertyFiles can', async () => {
                const readPropertyFile = await PropertyFile.getOne(employeeUserWithPropertyFilePermissions, { id: propertyFile.id })

                expect(readPropertyFile.id).toMatch(propertyFile.id)
            })

            it('employee without canReadPropertyFiles can not', async () => {
                const readPropertyFile = await PropertyFile.getOne(employeeUserWithoutPropertyFilePermissions, { id: propertyFile.id })

                expect(readPropertyFile).toBeUndefined()
            })

            it('user without employee can not', async () => {
                const readPropertyFile = await PropertyFile.getOne(notEmployeeUser, { id: propertyFile.id })

                expect(readPropertyFile).toBeUndefined()
            })

            it('employee with canReadPropertyFiles can not read PropertyFile to property in other organization', async () => {
                const readPropertyFile = await PropertyFile.getOne(employeeUserInOtherOrganization, { id: propertyFile.id })

                expect(readPropertyFile).toBeUndefined()
            })
        })

        describe('Update', () => {
            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestPropertyFile(anonymous, propertyFile.id, {})
                })
            })

            it('admin can', async () => {
                const [createdPropertyFile] = await createTestPropertyFile(admin, property, propertyFileCategory)
                const [otherCategory] = await createTestPropertyFileCategory(admin)

                const [updatedPropertyFile] = await updateTestPropertyFile(admin, createdPropertyFile.id, {
                    category: { connect: { id: otherCategory.id } },
                })

                expect(updatedPropertyFile.category.id).toEqual(otherCategory.id)
            })

            it('support can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestPropertyFile(support, propertyFile.id, {})
                })
            })

            it('employee with canManagePropertyFiles can not', async () => {
                const [otherCategory] = await createTestPropertyFileCategory(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestPropertyFile(employeeUserWithPropertyFilePermissions, propertyFile.id, {
                        category: { connect: { id: otherCategory.id } },
                    })
                })
            })

            it('employee without canManagePropertyFiles can not', async () => {
                const [otherCategory] = await createTestPropertyFileCategory(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestPropertyFile(employeeUserWithPropertyFilePermissions, propertyFile.id, {
                        category: { connect: { id: otherCategory.id } },
                    })
                })
            })

            it('user without employee can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestPropertyFile(notEmployeeUser, propertyFile.id, {})
                })
            })

            it('employee can not update PropertyFile to property in other organization', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestPropertyFile(employeeUserInOtherOrganization, propertyFile.id, {})
                })
            })
        })

        describe('Soft delete', () => {
            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await softDeleteTestPropertyFile(anonymous, propertyFile.id)
                })
            })

            it('admin can', async () => {
                const [createdPropertyFile] = await createTestPropertyFile(admin, property, propertyFileCategory)
                const [deletedPropertyFile] = await softDeleteTestPropertyFile(admin, createdPropertyFile.id)

                expect(deletedPropertyFile.deletedAt).toBeDefined()
            })

            it('support can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await softDeleteTestPropertyFile(support, propertyFile.id)
                })
            })

            it('employee with canManagePropertyFiles can', async () => {
                const [createdPropertyFile] = await createTestPropertyFile(employeeUserWithPropertyFilePermissions, property, propertyFileCategory)
                const [deletedPropertyFile] = await softDeleteTestPropertyFile(employeeUserWithPropertyFilePermissions, createdPropertyFile.id)

                expect(deletedPropertyFile.deletedAt).toBeDefined()
            })

            it('employee without canManagePropertyFiles can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await softDeleteTestPropertyFile(employeeUserWithoutPropertyFilePermissions, propertyFile.id)
                })
            })

            it('user without employee can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await softDeleteTestPropertyFile(notEmployeeUser, propertyFile.id)
                })
            })

            it('employee can not soft delete PropertyFile to property in other organization', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await softDeleteTestPropertyFile(employeeUserInOtherOrganization, propertyFile.id)
                })
            })
        })
    })
})
