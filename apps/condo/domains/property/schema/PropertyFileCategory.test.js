/**
 * Generated by `createschema property.PropertyFileCategory 'name:Text; order:Integer;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { PropertyFileCategory, createTestPropertyFileCategory, updateTestPropertyFileCategory, softDeleteTestPropertyFileCategory } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


describe('PropertyFileCategory', () => {
    let admin, support, anonymous, userClient, propertyFileCategory

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()

        const [testPropertyFileCategory] = await createTestPropertyFileCategory(admin)
        propertyFileCategory = testPropertyFileCategory
    })

    describe('Access', () => {
        describe('Create', () => {
            it('admin can', async () => {
                const [testPropertyFileCategory] = await createTestPropertyFileCategory(admin)

                expect(testPropertyFileCategory).toBeDefined()
                expect(testPropertyFileCategory.id).toMatch(UUID_RE)
            })

            it('support can', async () => {
                const [testPropertyFileCategory] = await createTestPropertyFileCategory(support)

                expect(testPropertyFileCategory).toBeDefined()
                expect(testPropertyFileCategory.id).toMatch(UUID_RE)
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestPropertyFileCategory(anonymous)
                })
            })

            it('user can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestPropertyFileCategory(userClient)
                })
            })
        })

        describe('Read', () => {
            it('admin can', async () => {
                const readPropertyFileCategory = await PropertyFileCategory.getOne(admin, { id: propertyFileCategory.id })

                expect(readPropertyFileCategory).toBeDefined()
                expect(readPropertyFileCategory.id).toEqual(propertyFileCategory.id)
            })

            it('support can', async () => {
                const readPropertyFileCategory = await PropertyFileCategory.getOne(support, { id: propertyFileCategory.id })

                expect(readPropertyFileCategory).toBeDefined()
                expect(readPropertyFileCategory.id).toEqual(propertyFileCategory.id)
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await PropertyFileCategory.getOne(anonymous, { id: propertyFileCategory.id })
                })
            })

            it('user can', async () => {
                const readPropertyFileCategory = await PropertyFileCategory.getOne(userClient, { id: propertyFileCategory.id })

                expect(readPropertyFileCategory).toBeDefined()
                expect(readPropertyFileCategory.id).toEqual(propertyFileCategory.id)
            })
        })

        describe('Update', () => {
            it('admin can', async () => {
                const [testPropertyFileCategory] = await createTestPropertyFileCategory(admin)
                const newName = faker.random.alphaNumeric(8)

                const [updatedPropertyFileCategory] = await updateTestPropertyFileCategory(admin, testPropertyFileCategory.id, {
                    name: newName,
                })

                expect(updatedPropertyFileCategory.id).toEqual(testPropertyFileCategory.id)
                expect(updatedPropertyFileCategory.name).toEqual(newName)
            })

            it('support can', async () => {
                const [testPropertyFileCategory] = await createTestPropertyFileCategory(support)
                const newName = faker.random.alphaNumeric(8)

                const [updatedPropertyFileCategory] = await updateTestPropertyFileCategory(support, testPropertyFileCategory.id, {
                    name: newName,
                })

                expect(updatedPropertyFileCategory.id).toEqual(testPropertyFileCategory.id)
                expect(updatedPropertyFileCategory.name).toEqual(newName)
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestPropertyFileCategory(anonymous, propertyFileCategory.id, {})
                })
            })

            it('user can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestPropertyFileCategory(userClient, propertyFileCategory.id, {})
                })
            })
        })

        describe('Soft delete', () => {
            it('admin can', async () => {
                const [testPropertyFileCategory] = await createTestPropertyFileCategory(admin)
                const [deletedPropertyFileCategory] = await softDeleteTestPropertyFileCategory(admin, testPropertyFileCategory.id)

                expect(deletedPropertyFileCategory.id).toEqual(testPropertyFileCategory.id)
                expect(deletedPropertyFileCategory.deletedAt).toBeDefined()
            })

            it('support can', async () => {
                const [testPropertyFileCategory] = await createTestPropertyFileCategory(support)
                const [deletedPropertyFileCategory] = await softDeleteTestPropertyFileCategory(support, testPropertyFileCategory.id)

                expect(deletedPropertyFileCategory.id).toEqual(testPropertyFileCategory.id)
                expect(deletedPropertyFileCategory.deletedAt).toBeDefined()
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await softDeleteTestPropertyFileCategory(anonymous, propertyFileCategory.id)
                })
            })

            it('user can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await softDeleteTestPropertyFileCategory(userClient, propertyFileCategory.id)
                })
            })
        })
    })
})
