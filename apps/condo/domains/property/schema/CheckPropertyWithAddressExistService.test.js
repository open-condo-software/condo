/**
 * Generated by `createservice property.CheckPropertyWithAddressExistService --type queries`
 */
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { checkPropertyWithAddressExistByTestClient } = require('@condo/domains/property/utils/testSchema')
const { catchErrorFrom } = require('@condo/domains/common/utils/testSchema')
const { DV_VERSION_MISMATCH_MESSAGE } = require('./CheckPropertyWithAddressExistService')
const { FLAT_WITHOUT_FLAT_TYPE_MESSAGE } = require('../utils/serverSchema/helpers')

describe('CheckPropertyWithAddressExistService', async () => {
    test('user finds result', async () => {
        const client = await makeClientWithProperty(true)
        const payload = {
            address: client.property.address,
            addressMeta: client.property.addressMeta,
        }
        const expectedResult = {
            isFound: true,
        }
        const [result] = await checkPropertyWithAddressExistByTestClient(client, payload)
        expect(result).toStrictEqual(expectedResult)
    })
    test('user don\'t find result', async () => {
        const client = await makeClientWithProperty(false)
        const payload = {
            address: 'address',
            addressMeta: { ...client.property.addressMeta, value: 'address' },
        }
        const expectedResult = {
            isFound: false,
        }
        const [result] = await checkPropertyWithAddressExistByTestClient(client, payload)
        expect(result).toStrictEqual(expectedResult)
    })

    describe('user get error', () => {
        test('if meta dv is not specified', async () => {
            const client = await makeClientWithProperty()
            client.property.addressMeta.dv = 2
            const payload = {
                address: client.property.address,
                addressMeta: client.property.addressMeta,
            }
            await catchErrorFrom(async () => {
                await checkPropertyWithAddressExistByTestClient(client, payload)
            }, ({ errors }) => {
                expect(errors[0].message).toEqual(DV_VERSION_MISMATCH_MESSAGE)
            })
        })
        test('if flat is specified without flat type', async () => {
            const client = await makeClientWithProperty(true)
            client.property.addressMeta.data.flat_type = null
            const payload = {
                address: client.property.address,
                addressMeta: client.property.addressMeta,
            }
            await catchErrorFrom(async () => {
                await checkPropertyWithAddressExistByTestClient(client, payload)
            }, ({ errors }) => {
                expect(errors[0].message).toEqual(FLAT_WITHOUT_FLAT_TYPE_MESSAGE)
            })
        })
        test('if addressMeta json has invalid format ', async () => {
            const client = await makeClientWithProperty(true)
            const payload = {
                address: client.property.address,
                addressMeta: {
                    invalidField: 'invalid data',
                },
            }
            await catchErrorFrom(async () => {
                await checkPropertyWithAddressExistByTestClient(client, payload)
            }, ({ errors }) => {
                expect(errors[0].message).toEqual('Variable "$data" got invalid value { invalidField: "invalid data" } at "data.addressMeta"; Field "dv" of required type "Int!" was not provided.')
            })
        })
    })
})