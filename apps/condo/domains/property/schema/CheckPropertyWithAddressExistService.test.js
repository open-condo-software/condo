/**
 * Generated by `createservice property.CheckPropertyWithAddressExistService --type queries`
 */
const { makeClientWithFlatAndProperty, makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { checkPropertyWithAddressExistByTestClient } = require('@condo/domains/property/utils/testSchema')
 
describe('CheckPropertyWithAddressExistService', async () => {
    test('user: execute on existing address', async () => {
        const client = await makeClientWithFlatAndProperty()
        const payload = {
            addressMeta: {
                value: client.property.addressMeta.value,
                data: client.property.addressMeta,
            },
        }
        const expectedResult = {
            isFound: true,
        }
        const [result] = await checkPropertyWithAddressExistByTestClient(client, payload)
        expect(result).toStrictEqual(expectedResult)
    })
    test('user: execute on non-existent address', async () => {
        const client = await makeClientWithProperty()
        const payload = {
            addressMeta: {
                value: 'address',
                data: {},
            },
        }
        const expectedResult = {
            isFound: false,
        }
        const [result] = await checkPropertyWithAddressExistByTestClient(client, payload)
        expect(result).toStrictEqual(expectedResult)
    })
})