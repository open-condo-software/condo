/**
 * Generated by `createschema property.Property 'organization:Text; name:Text; address:Text; addressMeta:Json; type:Select:building,village; map?:Json'`
 */
const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')

const {
    catchErrorFrom,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
} = require('@open-condo/keystone/test.utils')
const { makeClient, UUID_RE, DATETIME_RE, makeLoggedInAdminClient } = require('@open-condo/keystone/test.utils')

const {
    createTestOrganizationWithAccessToAnotherOrganization,
    makeClientWithRegisteredOrganization,
    makeEmployeeUserClientWithAbilities,
} = require('@condo/domains/organization/utils/testSchema')
const { buildingMapJson } = require('@condo/domains/property/constants/property')
const { Property, createTestProperty, updateTestProperty, makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { registerResidentByTestClient } = require('@condo/domains/resident/utils/testSchema')
const { createTestTicket, updateTestTicket, ticketStatusByType } = require('@condo/domains/ticket/utils/testSchema')
const { makeClientWithResidentUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')



const emptyParkingValueCases = [null, undefined]

describe('Property', () => {
    let admin
    let support
    let anonymous
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
    })
    describe('CRUD', () => {
        describe('Employee', () => {
            let canManageEmployee
            let cannotManageEmployee
            beforeAll(async () => {
                canManageEmployee = await makeEmployeeUserClientWithAbilities({
                    canManageProperties: true,
                    canReadProperties: true,
                })
                cannotManageEmployee = await makeEmployeeUserClientWithAbilities({
                    canManageProperties: false,
                    canReadProperties: true,
                })
            })
            test('Cannot manage properties if has no "canManageProperties" in role', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestProperty(cannotManageEmployee, cannotManageEmployee.property.id)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestProperty(cannotManageEmployee, cannotManageEmployee.organization)
                })
            })
            test('Can manage properties if has "canManageProperties" in role', async () => {
                const [obj, attrs] = await createTestProperty(canManageEmployee, canManageEmployee.organization)
                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toStrictEqual(attrs.sender)
                expect(obj.organization).toEqual(expect.objectContaining({ id: canManageEmployee.organization.id }))
                expect(obj.type).toEqual('building')
                expect(obj.name).toEqual(attrs.name)
                expect(obj.address).toEqual(attrs.address)
                expect(obj.addressMeta).toStrictEqual(attrs.addressMeta)
                expect(obj.map).toEqual(null)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: canManageEmployee.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: canManageEmployee.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.unitsCount).toEqual(0)
                expect(obj.uninhabitedUnitsCount).toEqual(0)

                const [updated] = await updateTestProperty(canManageEmployee, obj.id, {
                    deletedAt: dayjs().toISOString(),
                })
                expect(updated).toHaveProperty('deletedAt')
                expect(updated.deletedAt).not.toBeNull()
            })
            test('Can read properties in his organization despite of role', async () => {
                const property = await Property.getOne(cannotManageEmployee, { id: cannotManageEmployee.property.id })
                expect(property).toHaveProperty('id', cannotManageEmployee.property.id)
            })
            test('Cannot read properties with canReadProperties: false', async () => {
                const cannotReadEmployee = await makeEmployeeUserClientWithAbilities({
                    canReadProperties: false,
                })
                const property = await Property.getOne(cannotManageEmployee, { id: cannotReadEmployee.property.id })

                expect(property).toBeUndefined()
            })
            test('Cannot approve property despite of role, but can drop isApproved property', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestProperty(canManageEmployee, canManageEmployee.organization, {
                        isApproved: true,
                    })
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestProperty(canManageEmployee, canManageEmployee.property.id, {
                        isApproved: true,
                    })
                })
                const [property] = await createTestProperty(support, canManageEmployee.organization, {
                    isApproved: true,
                })
                expect(property).toHaveProperty('isApproved', true)
                const [updated] = await updateTestProperty(canManageEmployee, property.id, {
                    isApproved: false,
                })
                expect(updated).toHaveProperty('isApproved', false)
            })
            test('Cannot read and manage property of other organization', async () => {
                const properties = await Property.getOne(canManageEmployee, { id: cannotManageEmployee.property.id })
                expect(properties).toBeUndefined()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestProperty(canManageEmployee, cannotManageEmployee.organization)
                })
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestProperty(canManageEmployee, cannotManageEmployee.property.id)
                })
            })
            test('Can read and restore soft-deleted properties if has "canManageProperties" in role', async () => {
                const [property] = await createTestProperty(canManageEmployee, canManageEmployee.organization)
                const [updated] = await updateTestProperty(canManageEmployee, property.id, { deletedAt: dayjs().toISOString() })
                expect(updated).toHaveProperty('deletedAt')
                expect(updated.deletedAt).not.toBeNull()
                const readProperty = await Property.getOne(canManageEmployee, { id: property.id, deletedAt_not: null })
                expect(readProperty).toHaveProperty('id', property.id)
                const [restored] = await updateTestProperty(canManageEmployee, property.id, { deletedAt: null })
                expect(restored).toHaveProperty('deletedAt', null)
            })
        })
        describe('Resident', () => {
            test('Can read properties, he resides in', async () => {
                const { property } = await makeClientWithProperty()
                const residentClient = await makeClientWithResidentUser()
                await registerResidentByTestClient(residentClient, {
                    address: property.address,
                    addressMeta: property.addressMeta,
                    unitName: '1',
                })

                const { property: anotherProperty } = await makeClientWithProperty()

                const objs = await Property.getAll(residentClient, { id_in: [property.id, anotherProperty.id] })
                expect(objs).toHaveLength(1)
                expect(objs).toHaveProperty(['0', 'id'], property.id)
            })
        })
        describe('Support', () => {
            test('Can read and manage any property', async () => {
                const client = await makeClientWithProperty()
                const property = await Property.getOne(support, { id: client.property.id })
                expect(property).toHaveProperty('id', client.property.id)
                expect(property).toHaveProperty('isApproved', false)
                const [updated] = await updateTestProperty(support, property.id, {
                    isApproved: true,
                })
                expect(updated).toHaveProperty('isApproved', true)
                const [newProperty] = await createTestProperty(support, client.organization, {
                    isApproved: true,
                })
                expect(newProperty).toHaveProperty('isApproved', true)
            })
        })
        describe('Admin', () => {
            test('Can read and manage any property', async () => {
                const client = await makeClientWithProperty()
                const property = await Property.getOne(admin, { id: client.property.id })
                expect(property).toHaveProperty('id', client.property.id)
                expect(property).toHaveProperty('isApproved', false)
                const [updated] = await updateTestProperty(admin, property.id, {
                    isApproved: true,
                })
                expect(updated).toHaveProperty('isApproved', true)
                const [newProperty] = await createTestProperty(admin, client.organization, {
                    isApproved: true,
                })
                expect(newProperty).toHaveProperty('isApproved', true)
            })
        })
        describe('Anonymous', () => {
            test('Cannot read and manage properties', async () => {
                const client = await makeClientWithProperty()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await Property.getOne(anonymous, { id: client.property.id })
                })
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestProperty(anonymous, client.organization)
                })
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestProperty(anonymous, client.property.id)
                })
            })
        })
        describe('Employee from linked organization', () => {
            test('Employee of parent ("from") organization can see properties of child ("to") organization, but cannot manage it', async () => {
                const { clientFrom, propertyTo } = await createTestOrganizationWithAccessToAnotherOrganization()

                const property = await Property.getOne(clientFrom, { id: propertyTo.id })
                expect(property).toHaveProperty('id', propertyTo.id)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestProperty(clientFrom, property.id, { deletedAt: dayjs().toISOString() })
                })
            })
            test('Employee of a child ("to") organization can neither read nor manage the property of parent ("from") organization', async () => {
                const { propertyFrom, clientTo } = await createTestOrganizationWithAccessToAnotherOrganization()

                const property = await Property.getOne(clientTo, { id: propertyFrom.id })
                expect(property).toBeUndefined()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestProperty(clientTo, propertyFrom.id, { deletedAt: dayjs().toISOString() })
                })
            })
        })
    })
    describe('isApproved', () => {
        test('Should drop on address change', async () => {
            const client = await makeClientWithProperty()
            const [approved] = await updateTestProperty(support, client.property.id, {
                isApproved: true,
            })
            expect(approved).toHaveProperty('isApproved', true)
            const [changed] = await updateTestProperty(client, client.property.id, {
                address: faker.address.streetAddress(true),
            })
            expect(changed).toHaveProperty('isApproved', false)
        })
    })
    describe('Map', () => {
        test('Updates unitsCount and uninhabitedUnitsCount on map change', async () => {
            const user = await makeClientWithRegisteredOrganization()
            const [property] = await createTestProperty(user, user.organization, { map: buildingMapJson })
            expect(property).toHaveProperty('map')
            expect(property.map).toMatchObject(buildingMapJson)
            expect(property).toHaveProperty('unitsCount', 28)
            expect(property).toHaveProperty('uninhabitedUnitsCount', 8)

            const [noMap] = await updateTestProperty(user, property.id, { map: null })
            expect(noMap).toHaveProperty('map', null)
            expect(noMap).toHaveProperty('unitsCount', 0)
            expect(noMap).toHaveProperty('uninhabitedUnitsCount', 0)

            const buildingMap = { ...buildingMapJson }
            buildingMap['sections'][0]['floors'][0]['units'][0].unitType = 'commercial'
            buildingMap['sections'][0]['floors'][1]['units'][0].unitType = 'warehouse'
            buildingMap['sections'][0]['floors'][2]['units'][0].unitType = 'apartment'

            const [updated] = await updateTestProperty(user, property.id, { map: buildingMap })
            expect(updated).toHaveProperty('unitsCount', 25)
            expect(updated).toHaveProperty('uninhabitedUnitsCount', 11)
        })
        test('Can be created with `null` in `map.sections[].floors[].units[]`', async () => {
            const map = {
                'dv': 1,
                'type': 'building',
                'sections': [
                    {
                        'id': '5',
                        'type': 'section',
                        'index': 1,
                        'name': '1',
                        'preview': null,
                        'floors': [
                            {
                                'id': '7',
                                'type': 'floor',
                                'index': 1,
                                'name': '1',
                                'units': [
                                    {
                                        'id': '6',
                                        'type': 'unit',
                                        'name': null,
                                        'label': '1',
                                        'preview': null,
                                    },
                                ],
                            },
                        ],
                    },
                ],
                'parking': [],
            }
            const client = await makeClientWithRegisteredOrganization()
            const payload = {
                map,
            }
            const [obj] = await createTestProperty(client, client.organization, payload)
            expect(obj).toBeDefined()
        })
        test.each(emptyParkingValueCases)('Can be created with `%p` value in `map.parking`', async (parking) => {
            const map = {
                'dv': 1,
                'type': 'building',
                'sections': [
                    {
                        'id': '5',
                        'type': 'section',
                        'index': 1,
                        'name': '1',
                        'preview': null,
                        'floors': [
                            {
                                'id': '7',
                                'type': 'floor',
                                'index': 1,
                                'name': '1',
                                'units': [
                                    {
                                        'id': '6',
                                        'type': 'unit',
                                        'name': null,
                                        'label': '1',
                                        'preview': null,
                                    },
                                ],
                            },
                        ],
                    },
                ],
                'parking': parking,
            }
            const client = await makeClientWithRegisteredOrganization()
            const payload = {
                map,
            }
            const [obj] = await createTestProperty(client, client.organization, payload)
            expect(obj.id).toMatch(UUID_RE)
        })
    })
    describe('Constraints', () => {
        // TODO(AleX83Xpert): Migrate this constraint to addressKey
        test('Address of all non-deleted properties in organization should be unique', async () => {
            const user  = await makeEmployeeUserClientWithAbilities({
                canManageProperties: true,
            })

            // Create
            await catchErrorFrom(async () => {
                await createTestProperty(user, user.organization, { address: user.property.address })
            }, ({ errors, data }) => {
                expect(errors).toHaveLength(1)
                expect(errors[0].message).toMatch(`Property with the same address (id=${user.property.id}) already exists in current organization`)
                expect(data).toEqual({ 'obj': null })
            })

            // Update
            const [anotherProperty] = await createTestProperty(user, user.organization)
            expect(anotherProperty).toBeDefined()
            await catchErrorFrom(async () => {
                await updateTestProperty(user, anotherProperty.id, { address: user.property.address })
            }, ({ errors, data }) => {
                expect(errors).toHaveLength(1)
                expect(errors[0].message).toMatch(`Property with the same address (id=${user.property.id}) already exists in current organization`)
                expect(data).toEqual({ 'obj': null })
            })

            // Success on soft-delete
            const [deleted] = await updateTestProperty(user, user.property.id, { deletedAt: dayjs().toISOString() })
            expect(deleted).not.toHaveProperty('deletedAt', null)

            // Create
            const [recreated] = await createTestProperty(user, user.organization, { address: user.property.address })
            expect(recreated).toHaveProperty('address', user.property.address)
            expect(recreated.id).not.toBe(user.property.id)

            const [deletedAgain] = await updateTestProperty(user, recreated.id, { deletedAt: dayjs().toISOString() })
            expect(deletedAgain).not.toHaveProperty('deletedAt', null)

            // Update
            const [updated] = await updateTestProperty(user, anotherProperty.id, { address: user.property.address })
            expect(updated).toHaveProperty('address', user.property.address)

            // Another organization
            const anotherUser = await makeClientWithProperty()
            const [anotherOrgProperty] = await createTestProperty(anotherUser, anotherUser.organization, { address: user.property.address })
            expect(anotherOrgProperty).toHaveProperty('address', user.property.address)
        })
    })
    describe('Ticket-related stats', () => {
        test('Should be updated correctly', async () => {
            const client = await makeClientWithProperty()
            const [ticket] = await createTestTicket(client, client.organization, client.property)
            const [obj] = await Property.getAll(client, { id_in: [client.property.id] })
            expect(obj.ticketsInWork).toEqual('0')
            expect(obj.ticketsDeferred).toEqual('0')
            expect(obj.ticketsClosed).toEqual('0')

            const statuses = await ticketStatusByType(client)

            // Move ticket to processing status
            await updateTestTicket(client, ticket.id, { status: { connect:{ id: statuses.processing } } })
            const [afterTicketProcessing] = await Property.getAll(client, { id_in: [client.property.id] })
            expect(afterTicketProcessing.ticketsInWork).toEqual('1')
            expect(afterTicketProcessing.ticketsDeferred).toEqual('0')
            expect(afterTicketProcessing.ticketsClosed).toEqual('0')

            // Defer ticket
            await updateTestTicket(client, ticket.id, {
                status: { connect: { id: statuses.deferred } },
                deferredUntil: faker.date.soon(30, dayjs().add(1, 'day')),
            })
            const [afterTicketDeferred] = await Property.getAll(client, { id_in: [client.property.id] })
            expect(afterTicketDeferred.ticketsInWork).toEqual('0')
            expect(afterTicketDeferred.ticketsDeferred).toEqual('1')
            expect(afterTicketDeferred.ticketsClosed).toEqual('0')

            // Close ticket
            await updateTestTicket(client, ticket.id, { status: { connect: { id: statuses.closed } } })
            const [afterTicketClosed] = await Property.getAll(client, { id_in: [client.property.id] })
            expect(afterTicketClosed.ticketsInWork).toEqual('0')
            expect(afterTicketClosed.ticketsDeferred).toEqual('0')
            expect(afterTicketClosed.ticketsClosed).toEqual('1')
        })
    })
})
