/**
 * Generated by `createschema property.Property 'organization:Text; name:Text; address:Text; addressMeta:Json; type:Select:building,village; map?:Json'`
 */

const { makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { Property, createTestProperty, updateTestProperty, makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')

const { makeClientWithRegisteredOrganization } = require('../../../utils/testSchema/Organization')
const { createTestTicket, updateTestTicket, ticketStatusByType } = require('@condo/domains/ticket/utils/testSchema')
const { buildingMapJson } = require('@condo/domains/property/constants/property')

describe('Property', () => {

    test('user: create Property', async () => {
        const client = await makeClientWithRegisteredOrganization()
        const [obj, attrs] = await createTestProperty(client, client.organization)
        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toStrictEqual(attrs.sender)
        expect(obj.organization).toEqual(expect.objectContaining({ id: client.organization.id }))
        expect(obj.type).toEqual('building')
        expect(obj.name).toEqual(attrs.name)
        expect(obj.address).toEqual(attrs.address)
        expect(obj.addressMeta).toStrictEqual(attrs.addressMeta)
        expect(obj.map).toEqual(null)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
    })

    test('user: update Property.map field for created property', async () => {
        const client = await makeClientWithRegisteredOrganization()
        const [obj1, attrs] = await createTestProperty(client, client.organization)
        const obj = await Property.update(client, obj1.id, { dv: 1, sender: attrs.sender, map: buildingMapJson })
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toStrictEqual(attrs.sender)
        expect(obj.organization).toEqual(expect.objectContaining({ id: client.organization.id }))
        expect(obj.type).toEqual('building')
        expect(obj.name).toEqual(attrs.name)
        expect(obj.address).toEqual(attrs.address)
        expect(obj.addressMeta).toStrictEqual(attrs.addressMeta)
        expect(obj.map).toStrictEqual(buildingMapJson)
        expect(obj.v).toEqual(2)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).not.toEqual(obj.createdAt)
        expect(obj.unitsCount).toEqual('28')
    })    

    test('user: checking "tickets in work" and "closed tickets" fields', async () => {
        const client = await makeClientWithProperty()
        const [ticket] = await createTestTicket(client, client.organization, client.property)
        const [obj] = await Property.getAll(client, { id_in: [client.property.id] })
        expect(obj.ticketsInWork).toEqual('1')
        expect(obj.ticketsClosed).toEqual('0')
        // Close ticket
        const statuses = await ticketStatusByType(client)
        await updateTestTicket(client, ticket.id, { status: { connect: { id: statuses.closed } } })
        const [afterTicketClosed] = await Property.getAll(client, { id_in: [client.property.id] })
        expect(afterTicketClosed.ticketsInWork).toEqual('0')
        expect(afterTicketClosed.ticketsClosed).toEqual('1')
    })
  
    test('anonymous: read Property', async () => {
        const client = await makeClient()
        try {
            await Property.getAll(client)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['objs'],
            })
            expect(e.data).toEqual({ 'objs': null })
        }
    })

    test('anonymous: update Property', async () => {
        const user = await makeClientWithRegisteredOrganization()
        const [objCreated] = await createTestProperty(user, user.organization) 

        const guest = await makeClient()
        const payload = {} 
        try {
            await updateTestProperty(guest, objCreated.id, payload)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })
    
    test('anonymous: delete Property', async () => {
        const user = await makeClientWithRegisteredOrganization()
        const [objCreated] = await createTestProperty(user, user.organization)
        const guest = await makeClient()
        try {
            await Property.delete(guest, objCreated.id)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

})
