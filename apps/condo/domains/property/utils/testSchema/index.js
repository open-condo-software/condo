/**
 * Generated by `createschema property.Property 'organization:Text; name:Text; address:Text; addressMeta:Json; type:Select:building,village; map?:Json'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const faker = require('faker')

const { generateGQLTestUtils } = require('@condo/domains/common/utils/codegeneration/generate.test.utils')

const { Property: PropertyGQL } = require('@condo/domains/property/gql')
const { PropertyUnit: PropertyUnitGQL } = require('@condo/domains/property/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const Property = generateGQLTestUtils(PropertyGQL)
const PropertyUnit = generateGQLTestUtils(PropertyUnitGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createTestProperty (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    // TODO(codegen): write createTestProperty logic for generate fields

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await Property.create(client, attrs)
    return [obj, attrs]
}

async function updateTestProperty (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    // TODO(codegen): check the updateTestProperty logic for generate fields

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await Property.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestPropertyUnit (client, property, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!{ field.name }} || !property.id) throw new Error('no property.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    // TODO(codegen): write createTestPropertyUnit logic for generate fields

    const attrs = {
        dv: 1,
        sender,
        property: { connect: { id: property.id } },
        ...extraAttrs,
    }
    const obj = await PropertyUnit.create(client, attrs)
    return [obj, attrs]
}

async function updateTestPropertyUnit (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    // TODO(codegen): check the updateTestPropertyUnit logic for generate fields

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await PropertyUnit.update(client, id, attrs)
    return [obj, attrs]
}

/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    Property, createTestProperty, updateTestProperty,
    PropertyUnit, createTestPropertyUnit, updateTestPropertyUnit,
/* AUTOGENERATE MARKER <EXPORTS> */
}
