/**
 * Generated by `createschema property.PropertyFile 'property:Relationship:Property:CASCADE; category:Relationship:PropertyFileCategory:CASCADE; file:File;'`
 */

const { uniq } = require('lodash')
const get = require('lodash/get')
const isEmpty = require('lodash/isEmpty')
const omit = require('lodash/omit')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const { queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const { queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')


const AVAILABLE_TO_UPDATE_PROPERTY_FILE_FIELDS = ['dv', 'sender', 'deletedAt']

async function canReadPropertyFiles ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}
    
    return {
        property: {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(user.id, 'canReadPropertyFiles'),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadPropertyFiles'),
                ],
            },
        },
    }
}

async function canManagePropertyFiles ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    const isBulkRequest = Array.isArray(originalInput)

    let propertyId

    if (operation === 'create') {
        if (isBulkRequest) {
            const propertyIds = uniq(originalInput.map(item => get(item, 'data.property.connect.id')))
            if (propertyIds.length !== 1) {
                return false
            }

            propertyId = propertyIds[0]
        } else {
            propertyId = get(originalInput, ['property', 'connect', 'id'])
        }
    } else if (operation === 'update') {
        const inaccessibleUpdatedFields = omit(originalInput, AVAILABLE_TO_UPDATE_PROPERTY_FILE_FIELDS)
        if (!isEmpty(inaccessibleUpdatedFields)) {
            return false
        }

        const propertyFile = await getById('PropertyFile', itemId)
        if (!propertyFile || propertyFile.deletedAt) {
            return false
        }

        propertyId = propertyFile.property
    }

    if (!propertyId) {
        return false
    }

    const property = await getById('Property', propertyId)
    if (!property || !property.organization) {
        return false
    }

    const organizationId = property.organization
    if (!organizationId) {
        return false
    }

    return await checkOrganizationPermission(user.id, organizationId, 'canManagePropertyFiles')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadPropertyFiles,
    canManagePropertyFiles,
}
