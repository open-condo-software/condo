/**
 * Generated by `createschema property.Property 'organization:Text; name:Text; address:Text; addressMeta:Json; type:Select:building,village; map?:Json'`
 */
const get = require('lodash/get')
const { queryOrganizationEmployeeFromRelatedOrganizationFor } = require('@condo/domains/organization/utils/accessSchema')
const { queryOrganizationEmployeeFor } = require('@condo/domains/organization/utils/accessSchema')
const { getById, find } = require('@core/keystone/schema')
const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const { throwAuthenticationError } = require('@condo/domains/common/utils/apolloErrorFormatter')
const { RESIDENT } = require('@condo/domains/user/constants/common')
const { uniq, compact } = require('lodash')
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')


async function canReadProperties ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isSupport || item.isAdmin) return {}
        const userId = item.id
        if (item.type === RESIDENT) {
            const residents = await find('Resident', { user: { id: userId }, deletedAt: null })
            if (!residents.length) return false
            const residentProperties = compact(residents.map(resident => get(resident, 'property')))
            return {
                id_in: uniq(residentProperties),
            }
        }
        return {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(userId),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(userId),
                ],
            },
        }
    }
    return false
}

async function canManageProperties ({ authentication: { item, listKey }, originalInput, operation, itemId }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false
    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        if (operation === 'create') {
            const organizationId = get(originalInput, ['organization', 'connect', 'id'])
            if (!organizationId) return false
            return await checkOrganizationPermission(item.id, organizationId, 'canManageProperties')
        } else if (operation === 'update' && itemId) {
            const property = await getById('Property', itemId)
            if (!property) return false
            const { organization: organizationId } = property
            return await checkOrganizationPermission(item.id, organizationId, 'canManageProperties')
        }
        return false
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadProperties,
    canManageProperties,
}