/**
 * Generated by `createservice analytics.OverviewDashboardService`
 */

const dayjs = require('dayjs')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')
const { i18n } = require('@open-condo/locales/loader')

const { PAYMENT_WITHDRAWN_STATUS, PAYMENT_DONE_STATUS } = require('@condo/domains/acquiring/constants/payment')
const access = require('@condo/domains/analytics/access/OverviewDashboardService')
const { AnalyticsDataProvider } = require('@condo/domains/analytics/utils/services/AnalyticsDataProvider')
const { PaymentDataLoader } = require('@condo/domains/analytics/utils/services/dataLoaders/payment')
const { ReceiptDataLoader } = require('@condo/domains/analytics/utils/services/dataLoaders/receipt')
const { TicketDataLoader } = require('@condo/domains/analytics/utils/services/dataLoaders/ticket')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')

const ERRORS = {
    NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY: { mutation: 'overviewDashboard',
        variable: ['data', 'someVar'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
        code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@open-condo/keystone/errors'
        type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
        message: 'Describe what happened for developer',
        messageForUser: 'api.user.overviewDashboard.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
    },
}


const OverviewDashboardService = new GQLCustomSchema('OverviewDashboardService', {
    types: [
        {
            access: true,
            type: 'input OverviewDashboardGroupByInput { aggregatePeriod: String! }',
        },
        {
            access: true,
            type: 'input OverviewDashboardWhereInput { organization: String!, dateFrom: String!, dateTo: String! }',
        },
        {
            access: true,
            type: 'input OverviewDashboardInput { dv: Int!, sender: JSON!, where: OverviewDashboardWhereInput!, groupBy: OverviewDashboardGroupByInput! }',
        },
        {
            access: true,
            // TODO(codegen): write OverviewDashboardService output !
            type: 'type OverviewDashboardOutput { overview: JSON! }',
        },
    ],

    queries: [
        {
            access: access.canOverviewDashboard,
            schema: 'overviewDashboard(data: OverviewDashboardInput!): OverviewDashboardOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { where, groupBy } } = args

                const ticketNullReplaces = {
                    categoryClassifier: i18n('pages.condo.analytics.TicketAnalyticsPage.NullReplaces.CategoryClassifier'),
                    executor: i18n('pages.condo.analytics.TicketAnalyticsPage.NullReplaces.Executor'),
                    assignee: i18n('pages.condo.analytics.TicketAnalyticsPage.NullReplaces.Assignee'),
                }

                const dateFilter = {
                    AND: [
                        { createdAt_gte: where.dateFrom },
                        { createdAt_lte: where.dateTo },
                    ],
                }
                const ticketWhereFilter = { organization: { id: where.organization }, ...dateFilter }

                const dataProvider = new AnalyticsDataProvider({
                    entities: {
                        ticketByProperty: {
                            provider: new TicketDataLoader({ context }),
                            queryOptions: {
                                where: ticketWhereFilter,
                                groupBy: ['property', 'status'],
                                nullReplaces: ticketNullReplaces,
                            },
                        },
                        ticketByDay: {
                            provider: new TicketDataLoader({ context }),
                            queryOptions: {
                                where: ticketWhereFilter,
                                groupBy: [groupBy.aggregatePeriod, 'status'],
                                nullReplaces: ticketNullReplaces,
                            },
                        },
                        ticketByCategory: {
                            provider: new TicketDataLoader({ context }),
                            queryOptions: {
                                where: ticketWhereFilter,
                                groupBy: ['categoryClassifier', 'status'],
                                nullReplaces: ticketNullReplaces,
                            },
                        },
                        payment: {
                            provider: new PaymentDataLoader({ context }),
                            queryOptions: {
                                where: {
                                    organization: { id: where.organization },
                                    // status_in: [PAYMENT_WITHDRAWN_STATUS, PAYMENT_DONE_STATUS],
                                    AND: [
                                        { period_gte: dayjs(where.dateFrom).startOf('month').toISOString() },
                                        { period_lte: dayjs(where.dateTo).endOf('month').toISOString() },
                                        { status: PAYMENT_DONE_STATUS },
                                        // { period_gte: dayjs(where.dateFrom).startOf('month').format('YYYY-MM-DD') },
                                        // { period_lte: dayjs(where.dateTo).endOf('month').format('YYYY-MM-DD') },
                                        // { status: PAYMENT_WITHDRAWN_STATUS },
                                    ],
                                    // OR: [
                                    //     { status: PAYMENT_DONE_STATUS },
                                    //     { status: PAYMENT_WITHDRAWN_STATUS },
                                    // ],
                                },
                                groupBy: ['month', 'createdBy'],
                            },
                        },
                        receipt: {
                            provider: new ReceiptDataLoader({ context }),
                            queryOptions: {
                                where: {
                                    organization: { id: where.organization },
                                    AND: [
                                        { period_gte: dayjs(where.dateFrom).startOf('month').toISOString() },
                                        { period_lte: dayjs(where.dateTo).endOf('month').toISOString() },
                                    ],
                                },
                                groupBy: ['month'],
                            },
                        },
                    },
                })

                const overview = await dataProvider.loadAll()

                // TODO: throw ERRORS in a following way
                // throw new GQLError(ERRORS.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY)
                return { overview }
            },
        },
    ],
})

module.exports = {
    OverviewDashboardService,
}
