/**
 * Generated by `createservice analytics.GetExternalReportIframeUrlService`
 */

const jwt = require('jsonwebtoken')
const get = require('lodash/get')

const conf = require('@open-condo/config')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/analytics/access/GetExternalReportIframeUrlService')
const { ExternalReport } = require('@condo/domains/analytics/utils/serverSchema/index')

const EXTERNAL_REPORT_EXPIRATION_SECONDS = 30 * 60

const getMetabaseUrl = (externalReport, organizationId) => {
    const METABASE_CONFIG = conf['METABASE_CONFIG'] && JSON.parse(conf['METABASE_CONFIG'])

    const metabaseServerUrl = get(METABASE_CONFIG, 'url')
    const metabaseSecret = get(METABASE_CONFIG, 'secret')
    const dashboardId = get(externalReport, ['meta', 'dashboard'])

    if (!metabaseServerUrl || !metabaseSecret || !dashboardId) {
        return null
    }

    const payload = {
        resource: { dashboard: dashboardId },
        params: {
            organizationid: organizationId,
        },
        exp: Math.round(Date.now() / 1000) + EXTERNAL_REPORT_EXPIRATION_SECONDS,
    }
    const token = jwt.sign(payload, metabaseSecret, {}, null)

    return metabaseServerUrl + '/embed/dashboard/' + token + '#bordered=false&titled=false'
}

const GetExternalReportIframeUrlService = new GQLCustomSchema('GetExternalReportIframeUrlService', {
    types: [
        {
            access: true,
            type: 'input GetExternalReportIframeUrlInput { dv: Int!, sender: JSON!, id: ID!, organizationId: ID! }',
        },
        {
            access: true,
            type: 'type GetExternalReportIframeUrlOutput { title: String!, iframeUrl: String }',
        },
    ],

    queries: [
        {
            access: access.canGetExternalReportIframeUrl,
            schema: 'getExternalReportIframeUrl(data: GetExternalReportIframeUrlInput!): GetExternalReportIframeUrlOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                let iframeUrl = null
                const { data: { id, organizationId } } = args

                const externalReport = await ExternalReport.getOne(context, { id })

                switch (externalReport.type) {
                    case 'metabase':
                        iframeUrl = getMetabaseUrl(externalReport, organizationId)
                        break
                    default:
                        break
                }

                return {
                    title: externalReport.title,
                    iframeUrl,
                }
            },
        },
    ],

})

module.exports = {
    GetExternalReportIframeUrlService,
}
