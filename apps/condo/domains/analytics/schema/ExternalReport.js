/**
 * Generated by `createschema analytics.ExternalReport 'type:Select:metabase; title:Text; description?:Text; meta?:Json'`
 */

const { Text, Select, Checkbox, Virtual, Relationship } = require('@keystonejs/fields')
const { Json } = require('@condo/keystone/fields')
const { GQLListSchema } = require('@condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@condo/keystone/plugins')
const { COMMON_AND_ORGANIZATION_OWNED_FIELD } = require('@condo/domains/organization/schema/fields')
const conf = require('@condo/config')
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')
const access = require('@condo/domains/analytics/access/ExternalReport')
const get = require('lodash/get')
const jwt = require('jsonwebtoken')
const { EXTERNAL_REPORT_TYPES } = require('@condo/domains/analytics/constants/constants')
const { OrganizationEmployee } = require('@condo/domains/organization/utils/serverSchema/index')

const getUserOrganizationLinkId = (context) => {
    const cookies = Object.fromEntries(
        get(context, ['req', 'headers', 'cookie'], '')
            .split('; ')
            .map(cookieString => cookieString.split('='))
    )

    return get(cookies, 'organizationLinkId')
}

const getMetabaseUrl = (externalReport, organizationId) => {
    const METABASE_CONFIG = conf['METABASE_CONFIG'] && JSON.parse(conf['METABASE_CONFIG'])

    const metabaseServerUrl = get(METABASE_CONFIG, 'url')
    const metabaseSecret = get(METABASE_CONFIG, 'secret')
    const dashboardId = get(externalReport, ['meta', 'dashboard'])

    if (!metabaseServerUrl || !metabaseSecret || !dashboardId) {
        return null
    }

    const payload = {
        resource: { dashboard: externalReport.meta.dashboard },
        params: {
            'organizationid': organizationId,
        },
        exp: Math.round(Date.now() / 1000) + (10 * 60), // 10 minute expiration
    }
    const token = jwt.sign(payload, metabaseSecret, {}, null)

    return metabaseServerUrl + '/embed/dashboard/' + token + '#bordered=false&titled=false'
}

const ExternalReport = new GQLListSchema('ExternalReport', {
    schemaDoc: 'External report for analytics section that could be displayed with iframe',
    fields: {
        type: {
            schemaDoc: 'Type of external report. Way to determine logic of url building process',
            type: Select,
            options: EXTERNAL_REPORT_TYPES,
            isRequired: true,
        },

        title: {
            schemaDoc: 'Report card title text',
            type: Text,
            isRequired: true,
        },

        description: {
            schemaDoc: 'Report card description',
            type: Text,
        },

        meta: {
            schemaDoc: 'Meta data for building iframe link. For example, external id or custom options that required at specified type of report',
            type: Json,
        },

        organization: COMMON_AND_ORGANIZATION_OWNED_FIELD,

        isHidden: {
            schemaDoc: 'Indicates visibility of concrete external report at ui',
            type: Checkbox,
            defaultValue: false,
            isRequired: true,
        },

        iframeUrl: {
            schemaDoc: 'Url for iframe',
            type: Virtual,
            resolver: async (item, _, context) => {
                let link = ''
                const userOrganizationLinkId = getUserOrganizationLinkId(context)

                if (userOrganizationLinkId) {
                    const { organization: { id: userOrganizationId } } = await OrganizationEmployee.getOne(context, {
                        id: userOrganizationLinkId, user: { id: context.authedItem.id },
                    })

                    const { type } = item

                    switch (type) {
                        case 'metabase':
                            link = getMetabaseUrl(item, userOrganizationId)
                            break
                        default:
                            break
                    }
                }

                return link
            },
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadExternalReports,
        create: access.canManageExternalReports,
        update: access.canManageExternalReports,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ExternalReport,
}
