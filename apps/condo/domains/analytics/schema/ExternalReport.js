/**
 * Generated by `createschema analytics.ExternalReport 'type:Select:metabase; title:Text; description?:Text; meta?:Json'`
 */

const { Text, Select, Checkbox, Virtual, Relationship } = require('@keystonejs/fields')
const { Json } = require('@condo/keystone/fields')
const { GQLListSchema } = require('@condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@condo/keystone/plugins')
const conf = require('@condo/config')
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')
const access = require('@condo/domains/analytics/access/ExternalReport')
const get = require('lodash/get')
const jwt = require('jsonwebtoken')
const { OrganizationEmployee } = require('@condo/domains/organization/utils/serverSchema/index')


const getMetabaseUrl = (externalReport, organizationId) => {
    const METABASE_SITE_URL = conf['METABASE_SITE_URL']
    const METABASE_SECRET_KEY = conf['METABASE_SECRET_KEY']
    const dashboardId = get(externalReport, ['meta', 'dashboard'])

    if (!METABASE_SECRET_KEY || !METABASE_SECRET_KEY || !dashboardId) {
        return ''
    }

    const payload = {
        resource: { dashboard: externalReport.meta.dashboard },
        params: {
            'organizationid': organizationId,
        },
        exp: Math.round(Date.now() / 1000) + (10 * 60), // 10 minute expiration
    }
    const token = jwt.sign(payload, METABASE_SECRET_KEY, {}, null)

    return METABASE_SITE_URL + '/embed/dashboard/' + token + '#bordered=false&titled=false'
}

const ExternalReport = new GQLListSchema('ExternalReport', {
    schemaDoc: 'External report for analytics section that could be displayed with iframe',
    fields: {
        type: {
            schemaDoc: 'Type of external report. Way to determine logic of url building process',
            type: Select,
            options: 'metabase',
            isRequired: true,
        },

        title: {
            schemaDoc: 'Report card title text',
            type: Text,
            isRequired: true,
        },

        description: {
            schemaDoc: 'Report card description',
            type: Text,
        },

        meta: {
            schemaDoc: 'Meta data for building iframe link. For example, external id or custom options that required at specified type of report',
            type: Json,
        },

        organization: {
            schemaDoc: 'Organization related report',
            type: Relationship,
            ref: 'Organization',
            isRequired: false,
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
        },

        iframeUrl: {
            schemaDoc: 'Url for iframe ',
            type: Virtual,
            resolver: async (item, _, context) => {
                let link = ''
                const cookies = Object.fromEntries(
                    get(context, ['req', 'headers', 'cookie'], '')
                        .split('; ')
                        .map(cookieString => cookieString.split('='))
                )
                const userOrganizationLinkId = get(cookies, 'organizationLinkId')

                if (userOrganizationLinkId) {
                    const { organization: { id: userOrganizationId } } = await OrganizationEmployee.getOne(context, { id: userOrganizationLinkId })

                    const { type } = item

                    switch (type) {
                        case 'metabase':
                            link = getMetabaseUrl(item, userOrganizationId)
                            break
                        default:
                            break
                    }
                }

                return link
            },
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadExternalReports,
        create: access.canManageExternalReports,
        update: access.canManageExternalReports,
        delete: false,
        auth: true,
    },
})

module.exports = {
    ExternalReport,
}
