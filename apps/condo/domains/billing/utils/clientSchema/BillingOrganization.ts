/**
 * Generated by `createschema billing.BillingOrganization 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; tin:Text; iec:Text; bic:Text; checkNumber:Text;'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { BillingOrganization as BillingOrganizationGQL } from '@condo/domains/billing/gql'
import { BillingOrganization, BillingOrganizationUpdateInput, QueryAllBillingOrganizationsArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'context', 'tin', 'iec', 'bic', 'checkNumber']
const RELATIONS = ['context']

export interface IBillingOrganizationUIState extends BillingOrganization {
    id: string
    // TODO(codegen): write IBillingOrganizationUIState or extends it from
}

function convertToUIState (item: BillingOrganization): IBillingOrganizationUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IBillingOrganizationUIState
}

export interface IBillingOrganizationFormState {
    id?: undefined
    // TODO(codegen): write IBillingOrganizationUIFormState or extends it from
}

function convertToUIFormState (state: IBillingOrganizationUIState): IBillingOrganizationFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IBillingOrganizationFormState
}

function convertToGQLInput (state: IBillingOrganizationFormState): BillingOrganizationUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<BillingOrganization, BillingOrganizationUpdateInput, IBillingOrganizationFormState, IBillingOrganizationUIState, QueryAllBillingOrganizationsArgs>(BillingOrganizationGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
