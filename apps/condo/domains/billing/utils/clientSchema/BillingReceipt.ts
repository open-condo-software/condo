/**
 * Generated by `createschema billing.BillingReceipt 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; importId?:Text; property:Relationship:BillingProperty:CASCADE; account:Relationship:BillingAccount:CASCADE; period:CalendarDay; raw:Json; toPay:Text; services:Json; meta:Json'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { BillingReceipt as BillingReceiptGQL } from '@condo/domains/billing/gql'
import { BillingReceipt, BillingReceiptUpdateInput, QueryAllBillingReceiptsArgs } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'context', 'importId', 'property', 'account', 'period', 'raw', 'toPay', 'services', 'meta']
const RELATIONS = ['context', 'property', 'account']

export interface IBillingReceiptUIState extends BillingReceipt {
    id: string
    // TODO(codegen): write IBillingReceiptUIState or extends it from
}

function convertToUIState (item: BillingReceipt): IBillingReceiptUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IBillingReceiptUIState
}

export interface IBillingReceiptFormState {
    id?: undefined
    // TODO(codegen): write IBillingReceiptUIFormState or extends it from
}

function convertToUIFormState (state: IBillingReceiptUIState): IBillingReceiptFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IBillingReceiptFormState
}

function convertToGQLInput (state: IBillingReceiptFormState): BillingReceiptUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<BillingReceipt, BillingReceiptUpdateInput, IBillingReceiptFormState, IBillingReceiptUIState, QueryAllBillingReceiptsArgs>(BillingReceiptGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
