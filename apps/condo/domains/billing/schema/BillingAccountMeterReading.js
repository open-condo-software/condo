/**
 * Generated by `createschema billing.BillingAccountMeterReading 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; importId?:Text; property:Relationship:BillingProperty:CASCADE; account:Relationship:BillingAccount:CASCADE; meter:Relationship:BillingAccountMeter:CASCADE; period:CalendarDay; value1:Integer; value2:Integer; value3:Integer; date:DateTimeUtc; raw:Json; meta:Json' --force`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/billing/access/BillingAccountMeterReading')


const BillingAccountMeterReading = new GQLListSchema('BillingAccountMeterReading', {
    // TODO(codegen): write doc for the BillingAccountMeterReading domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        context: {
            // TODO(codegen): write doc for BillingAccountMeterReading.context field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BillingIntegrationOrganizationContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        importId: {
            // TODO(codegen): write doc for BillingAccountMeterReading.importId field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        property: {
            // TODO(codegen): write doc for BillingAccountMeterReading.property field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BillingProperty',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        account: {
            // TODO(codegen): write doc for BillingAccountMeterReading.account field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BillingAccount',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        meter: {
            // TODO(codegen): write doc for BillingAccountMeterReading.meter field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BillingAccountMeter',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        period: {
            // TODO(codegen): write doc for BillingAccountMeterReading.period field!
            schemaDoc: 'TODO DOC!',
            type: CalendarDay,
            isRequired: true,
        },

        value1: {
            // TODO(codegen): write doc for BillingAccountMeterReading.value1 field!
            schemaDoc: 'TODO DOC!',
            type: Integer,
            isRequired: true,
        },

        value2: {
            // TODO(codegen): write doc for BillingAccountMeterReading.value2 field!
            schemaDoc: 'TODO DOC!',
            type: Integer,
            isRequired: true,
        },

        value3: {
            // TODO(codegen): write doc for BillingAccountMeterReading.value3 field!
            schemaDoc: 'TODO DOC!',
            type: Integer,
            isRequired: true,
        },

        date: {
            // TODO(codegen): write doc for BillingAccountMeterReading.date field!
            schemaDoc: 'TODO DOC!',
            type: DateTimeUtc,
            isRequired: true,
        },

        raw: {
            // TODO(codegen): write doc for BillingAccountMeterReading.raw field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: true,
        },

        meta: {
            // TODO(codegen): write doc for BillingAccountMeterReading.meta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadBillingAccountMeterReadings,
        create: access.canManageBillingAccountMeterReadings,
        update: access.canManageBillingAccountMeterReadings,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BillingAccountMeterReading,
}
