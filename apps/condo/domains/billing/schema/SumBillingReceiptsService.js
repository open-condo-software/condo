/**
 * Generated by `createservice billing.SumBillingReceiptsService`
 */

const Big = require('big.js')

const { getDatabaseAdapter } = require('@open-condo/keystone/databaseAdapters/utils')
const { GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, getSchemaCtx } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/billing/access/SumBillingReceiptsService')
const { WRONG_VALUE } = require('@condo/domains/common/constants/errors')

const ERRORS = {
    PERIOD_BADLY_SPECIFIED: {
        mutation: 'registerBillingReceipts',
        variable: ['where', 'period'],
        code: BAD_USER_INPUT,
        type: WRONG_VALUE,
        message: 'You must specify period field for receipts in where query. where.period should be a simple string, example: _allBillingReceiptsSum(period: "2022-12-01")',
    },
}

const SumBillingReceiptsService = new GQLCustomSchema('SumBillingReceiptsService', {

    types: [
        {
            access: true,
            type: 'input BillingReceiptsSumInput { period: String!, tin: String!, importRemoteSystem: String }',
        },
        {
            access: true,
            type: 'type BillingReceiptsSumOutput { sum: String! }',
        },
    ],

    queries: [
        {
            access: access.canSumBillingReceipts,
            schema: '_allBillingReceiptsSum (where: BillingReceiptsSumInput!): BillingReceiptsSumOutput',
            resolver: async (parent, args) => {
                const { where: { period, tin, importRemoteSystem } } = args

                const { keystone } = getSchemaCtx('BillingReceipt')
                const { knex } = getDatabaseAdapter(keystone)

                const query = knex('BillingReceipt')
                    .sum('BillingReceipt.toPay as totalToPay')
                    .innerJoin('BillingIntegrationOrganizationContext', 'BillingReceipt.context', 'BillingIntegrationOrganizationContext.id')
                    .innerJoin('Organization', 'BillingIntegrationOrganizationContext.organization', 'Organization.id')
                    .where('BillingReceipt.period', period)
                    .andWhere('Organization.tin', tin)

                if (importRemoteSystem) {
                    query
                        .andWhereNot('Organization.importId', null)
                        .andWhere('Organization.importRemoteSystem', importRemoteSystem)
                }

                const result = await query

                return {
                    sum: Big(result[0].totalToPay).toFixed(8),
                }
            },
        },
    ],

})

module.exports = {
    SumBillingReceiptsService,
    ERRORS,
}