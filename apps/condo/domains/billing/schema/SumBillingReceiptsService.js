/**
 * Generated by `createservice billing.SumBillingReceiptsService`
 */

const Big = require('big.js')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/billing/access/SumBillingReceiptsService')
const { WRONG_VALUE } = require('@condo/domains/common/constants/errors')
const { GqlWithKnexLoadList } = require('@condo/domains/common/utils/serverSchema')

const ERRORS = {
    PERIOD_BADLY_SPECIFIED: {
        mutation: 'registerBillingReceipts',
        variable: ['where', 'period'],
        code: BAD_USER_INPUT,
        type: WRONG_VALUE,
        message: 'You must specify period field for receipts in where query. where.period should be a simple string, example: _allBillingReceiptsSum(period: "2022-12-01")',
    },
}

const SumBillingReceiptsService = new GQLCustomSchema('SumBillingReceiptsService', {

    types: [
        {
            access: true,
            type: 'type BillingReceiptsSumOutput { sum: String! }',
        },
    ],
    
    queries: [
        {
            access: access.canSumBillingReceipts,
            schema: '_allBillingReceiptsSum (where: BillingReceiptWhereInput!): BillingReceiptsSumOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { where } = args

                // We do not want to give user an easy way to query whole database. You must specify period in where query.
                //
                // It was done like this, and not as a separate argument for several reasons:
                // 1. in order to keep validation of period in one place - in GraphQL
                // 2. in order to keep all<model> styled api arguments somewhat consistent (e.x _allPaymentsSum / allBillingReceipts )
                //
                // If you try to add more periods to the where clause, like: where: (period=a1 period=a2) you will get an error
                // If you try to be hacky and do this: where: (period=a1 period_gt=a1) you are going to have intersection of these clauses which means you will get only period=a1 ones!
                if (!where.period || typeof where.period !== 'string') {
                    throw new GQLError(ERRORS.PERIOD_BADLY_SPECIFIED)
                }

                const billingReceiptsLoader = new GqlWithKnexLoadList({
                    listKey: 'BillingReceipt',
                    fields: 'id toPay',
                    where,
                    sortBy: 'createdAt_DESC',
                })
                const objs = await billingReceiptsLoader.load()
                const toPaySum = objs.reduce((accumulator, receipt) => {
                    return accumulator.plus(new Big(receipt.toPay))
                }, new Big(0))

                return {
                    sum: toPaySum.toFixed(8),
                }
            },
        },
    ],
    
})

module.exports = {
    SumBillingReceiptsService,
    ERRORS,
}
