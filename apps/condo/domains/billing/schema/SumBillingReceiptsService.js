/**
 * Generated by `createservice billing.SumBillingReceiptsService`
 */

const Big = require('big.js')

const { getDatabaseAdapter } = require('@open-condo/keystone/databaseAdapters/utils')
const { GQLError } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, getSchemaCtx, find, allItemsQueryByChunks } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/billing/access/SumBillingReceiptsService')
const { WRONG_VALUE } = require('@condo/domains/common/constants/errors')


const ERRORS = {
    TIN_OR_ORGANIZATION_ID_MUST_BE_SPECIFIED: {
        mutation: '_allBillingReceiptsSum',
        variable: ['where'],
        code: 'BAD_USER_INPUT',
        type: WRONG_VALUE,
        message: 'You must specify one of two values: tin or organizationId',
    },
}

const SumBillingReceiptsService = new GQLCustomSchema('SumBillingReceiptsService', {
    types: [
        {
            access: true,
            type: 'input BillingReceiptsSumInput { period: String!, organizationId: ID, tin: String, importRemoteSystem: String }',
        },
        {
            access: true,
            type: 'type BillingReceiptsSumOutput { sum: String! }',
        },
    ],
    queries: [
        {
            access: access.canSumBillingReceipts,
            schema: '_allBillingReceiptsSum (where: BillingReceiptsSumInput!): BillingReceiptsSumOutput',
            resolver: async (parent, args) => {
                const { where: { period, tin, organizationId, importRemoteSystem } } = args

                if (!tin && !organizationId) {
                    throw new GQLError(ERRORS.TIN_OR_ORGANIZATION_ID_MUST_BE_SPECIFIED)
                }

                const { keystone } = getSchemaCtx('BillingReceipt')
                const { knex } = getDatabaseAdapter(keystone)

                const organizationWhere = { deletedAt: null }
                if (organizationId) {
                    organizationWhere.id = organizationId
                }
                if (tin) {
                    organizationWhere.tin = tin
                }
                if (importRemoteSystem) {
                    organizationWhere.importId_not = null
                    organizationWhere.importRemoteSystem = importRemoteSystem
                }

                const contextIds = []
                await allItemsQueryByChunks({
                    schemaName: 'BillingIntegrationOrganizationContext',
                    where: {
                        organization: organizationWhere,
                        deletedAt: null,
                    },
                    chunkProcessor: (contexts) => {
                        contextIds.push(...contexts.map(context => context.id))
                        
                        return []
                    },
                })

                const result = await knex('BillingReceipt')
                    .sum('toPay as totalToPay')
                    .whereIn('context', contextIds)
                    .andWhere('period', period)
                    .andWhere('deletedAt', null)

                return {
                    sum: Big(result[0].totalToPay || 0).toFixed(8),
                }
            },
        },
    ],

})

module.exports = {
    SumBillingReceiptsService,
    ERRORS,
}