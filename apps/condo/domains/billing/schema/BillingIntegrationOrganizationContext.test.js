/**
 * Generated by `createschema billing.BillingIntegrationOrganizationContext 'integration:Relationship:BillingIntegration:PROTECT; organization:Relationship:Organization:CASCADE; settings:Json; state:Json' --force`
 */

const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { BillingIntegrationOrganizationContext, createTestBillingIntegration, createTestBillingIntegrationAccessRight, createTestBillingIntegrationOrganizationContext, updateTestBillingIntegrationOrganizationContext } = require('@condo/domains/billing/utils/testSchema')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects } = require('../../common/utils/testSchema')

describe('BillingIntegrationOrganizationContext', () => {
    test('admin: create BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration, integrationAttrs] = await createTestBillingIntegration(admin)
        const [organization, organizationAttrs] = await createTestOrganization(admin)

        const [context, contextAttrs] = await createTestBillingIntegrationOrganizationContext(admin, integration, organization)
        expect(context).toEqual(expect.objectContaining({
            integration: integrationAttrs.name,
            organization: organizationAttrs.name,
        }))
    })

    test('user: create BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration, integrationAttrs] = await createTestBillingIntegration(admin)
        const [organization, organizationAttrs] = await createTestOrganization(admin)

        const user = await makeClientWithNewRegisteredAndLoggedInUser()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingIntegrationOrganizationContext(user, integration, organization)
        })
    })
})
