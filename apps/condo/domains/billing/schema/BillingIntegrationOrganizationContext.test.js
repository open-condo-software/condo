/**
 * Generated by `createschema billing.BillingIntegrationOrganizationContext 'integration:Relationship:BillingIntegration:PROTECT; organization:Relationship:Organization:CASCADE; settings:Json; state:Json' --force`
 */

import { BillingIntegrationOrganizationContext } from '@condo/domains/billing/utils/testSchema'
import { expectToThrowAccessDeniedErrorToObjects } from '@condo/domains/common/utils/testSchema'

const { createTestOrganizationEmployee, createTestOrganizationEmployeeRole } = require('@condo/domains/organization/utils/testSchema')
const { makeLoggedInClient } = require('@condo/domains/user/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { createTestBillingIntegration,
    createTestBillingIntegrationOrganizationContext, updateTestBillingIntegrationOrganizationContext } = require('@condo/domains/billing/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj } = require('@condo/domains/common/utils/testSchema')

describe('BillingIntegrationOrganizationContext', () => {
    test('admin: create BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

        expect(context).toEqual(expect.objectContaining({
            integration: { id: integration.id, name: integration.name },
            organization: { id: organization.id, name: organization.name },
        }))
    })

    test('user: create BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const user = await makeLoggedInClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingIntegrationOrganizationContext(user, organization, integration)
        })
    })

    test('anonymous: create BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const user = await makeClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingIntegrationOrganizationContext(user, organization, integration)
        })
    })

    test('organization integration manager: create BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageIntegrations: true,
        })
        const managerUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
        await createTestOrganizationEmployee(admin, organization, managerUserClient.user, role)
        const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)

        expect(context).toEqual(expect.objectContaining({
            integration: { id: integration.id, name: integration.name },
            organization: { id: organization.id, name: organization.name },
        }))
    })

    test('admin: update BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const payload = { settings: { dv: 1, test: 'test' } }
        const [updatedObj] = await updateTestBillingIntegrationOrganizationContext(admin, context.id, payload)

        expect(updatedObj.settings.test).toEqual('test')
    })

    test('user: update BillingIntegrationOrganizationContext', async () => {
        const user = await makeLoggedInClient()
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const payload = { settings: { dv: 1, test: 'test' } }

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingIntegrationOrganizationContext(user, context.id, payload)
        })
    })

    test('anonymous: update BillingIntegrationOrganizationContext', async () => {
        const user = await makeClient()
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const payload = { settings: { dv: 1, test: 'test' } }

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingIntegrationOrganizationContext(user, context.id, payload)
        })
    })

    test('organization integration manager: update BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageIntegrations: true,
        })
        const managerUserClient = await makeLoggedInClient()
        await createTestOrganizationEmployee(admin, organization, managerUserClient.user, role)
        const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)

        const payload = { settings: { dv: 1, test: 'test' } }
        const [updatedObj] = await updateTestBillingIntegrationOrganizationContext(managerUserClient, context.id, payload)

        expect(updatedObj.settings.test).toEqual('test')
    })

    test('admin: read BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

        const contexts = await BillingIntegrationOrganizationContext.getAll(admin, { id: context.id })
        expect(contexts).toHaveLength(1)
    })

    test('user: read BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const user = await makeLoggedInClient()

        const contexts = await BillingIntegrationOrganizationContext.getAll(user, { id: context.id })
        expect(contexts).toHaveLength(0)
    })

    test('anonymous: read BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const client = await makeClient()

        await expectToThrowAccessDeniedErrorToObjects(async () => {
            await BillingIntegrationOrganizationContext.getAll(client, { id: context.id })
        })
    })

    test('organization integration manager: read BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageIntegrations: true,
        })
        const managerUserClient = await makeLoggedInClient()
        await createTestOrganizationEmployee(admin, organization, managerUserClient.user, role)
        const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
        const contexts = await BillingIntegrationOrganizationContext.getAll(managerUserClient, { id: context.id })
        expect(contexts).toHaveLength(1)
    })

    test('admin: delete BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingIntegrationOrganizationContext.delete(admin, context.id)
        })
    })

    test('user: delete BillingIntegrationOrganizationContext', async () => {
        const user = await makeLoggedInClient()
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingIntegrationOrganizationContext.delete(user, context.id)
        })
    })

    test('anonymous: delete BillingIntegrationOrganizationContext', async () => {
        const user = await makeClient()
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingIntegrationOrganizationContext.delete(user, context.id)
        })
    })

    test('organization integration manager: delete BillingIntegrationOrganizationContext', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageIntegrations: true,
        })
        const managerUserClient = await makeLoggedInClient()
        await createTestOrganizationEmployee(admin, organization, managerUserClient.user, role)
        const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingIntegrationOrganizationContext.delete(managerUserClient, context.id)
        })
    })
})