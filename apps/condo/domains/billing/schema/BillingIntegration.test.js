/**
 * Generated by `createschema billing.BillingIntegration name:Text;`
 */
import { catchErrorFrom } from '@condo/domains/common/utils/testSchema'

const { getRandomString } = require('@core/keystone/test.utils')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { BillingIntegration, createTestBillingIntegration, updateTestBillingIntegration } = require('@condo/domains/billing/utils/testSchema')
const { expectToThrowAuthenticationErrorToObjects, expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObj  } = require('@condo/domains/common/utils/testSchema')

describe('BillingIntegration', () => {

    describe('Validators', () => {
        test('update format with right payload', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestBillingIntegration(admin)

            const payload = {
                dataFormat: {
                    hasToPayDetail: true,
                    hasServices: true,
                    hasServicesDetail: true,
                    currency: {
                        code: 'RUB',
                        symbolNative: 'â‚½.',
                        decimalDigits: 2,
                        rounding: 0,
                        delimiterNative: ',',
                    },
                },
            }

            const [updatedIntegration] = await updateTestBillingIntegration(admin, objCreated.id, payload)

            expect(updatedIntegration.id).toEqual(objCreated.id)
            expect(updatedIntegration.dataFormat.hasToPayDetail).toEqual(true)
        })

        test('update format with wrong payload', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestBillingIntegration(admin)

            const payload = {
                dataFormat: {
                    hasToPayDetail: true,
                    hasServices: true,
                    // no hasServiceDetail key!
                },
            }

            await catchErrorFrom(async () => {
                await updateTestBillingIntegration(admin, objCreated.id, payload)
            }, (err) => {
                expect(err).toBeDefined()
            })
        })
    })

    test('admin: create BillingIntegration', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration, attrs] = await createTestBillingIntegration(admin)
        expect(integration).toEqual(expect.objectContaining({
            name: attrs.name,
            detailsTitle: attrs.detailsTitle,
        }))
    })

    test('user: create BillingIntegration', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingIntegration(client)
        })
    })

    test('anonymous: create BillingIntegration', async () => {
        const client = await makeClient()
        await expectToThrowAuthenticationErrorToObj(async () => {
            await createTestBillingIntegration(client)
        })
    })

    test('support: create BillingIntegration', async () => {
        const support = await makeClientWithSupportUser()
        const [integration, attrs] = await createTestBillingIntegration(support)
        expect(integration).toEqual(expect.objectContaining({
            name: attrs.name,
        }))
    })

    test('support: update BillingIntegration', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingIntegration(admin)

        const support = await makeClientWithSupportUser()
        const payload = { name: 'super-billing!' }
        const [updatedIntegration] = await updateTestBillingIntegration(support, objCreated.id, payload)
        expect(updatedIntegration.id).toEqual(objCreated.id)
        expect(updatedIntegration.name).toEqual('super-billing!')
    })

    test('user: read BillingIntegration', async () => {
        const admin = await makeLoggedInAdminClient()
        const [obj, attrs] = await createTestBillingIntegration(admin)

        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const objs = await BillingIntegration.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

        expect(objs.length >= 1).toBeTruthy()
        expect(objs).toEqual(expect.arrayContaining([
            expect.objectContaining({
                id: obj.id,
                sender: attrs.sender,
                createdBy: expect.objectContaining({ id: admin.user.id }),
                updatedBy: expect.objectContaining({ id: admin.user.id }),
                createdAt: obj.createdAt,
                updatedAt: obj.updatedAt,
                name: attrs.name,
            }),
        ]))
    })

    test('anonymous: read BillingIntegration', async () => {
        const client = await makeClient()

        await expectToThrowAuthenticationErrorToObjects(async () => {
            await BillingIntegration.getAll(client)
        })
    })

    test('user: update BillingIntegration', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingIntegration(admin)

        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const payload = { name: getRandomString() }
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingIntegration(client, objCreated.id, payload)
        })
    })

    test('anonymous: update BillingIntegration', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingIntegration(admin)

        const client = await makeClient()
        const payload = {}
        await expectToThrowAuthenticationErrorToObj(async () => {
            await updateTestBillingIntegration(client, objCreated.id, payload)
        })
    })

    test('user: delete BillingIntegration', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingIntegration(admin)

        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingIntegration.delete(client, objCreated.id)
        })
    })

    test('anonymous: delete BillingIntegration', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingIntegration(admin)

        const client = await makeClient()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingIntegration.delete(client, objCreated.id)
        })
    })
})
