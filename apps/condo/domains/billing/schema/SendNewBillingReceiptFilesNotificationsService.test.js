/**
 * Generated by `createservice billing.SendNewBillingReceiptFilesNotificationsService '--type=mutations'`
 */
const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')

const { makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToResult,
    expectToThrowAccessDeniedErrorToResult,
    catchErrorFrom,
} = require('@open-condo/keystone/test.utils')

const {
    makeContextWithOrganizationAndIntegrationAsAdmin,
    sendNewBillingReceiptFilesNotificationsByTestClient,
} = require('@condo/domains/billing/utils/testSchema')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const { DATE_FORMAT } = require('@condo/domains/common/utils/date')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
} = require('@condo/domains/user/utils/testSchema')

describe('SendNewBillingReceiptFilesNotificationsService', () => {
    let admin
    let support
    let anonymous
    let user
    let receiptByAdmin
    let organization

    beforeAll(async () => {
        const {
            admin: adminClient,
            organization: adminOrganization,
        } = await makeContextWithOrganizationAndIntegrationAsAdmin()
        admin = adminClient
        organization = adminOrganization
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
    })

    describe('Access validations', () => {
        it('admin: success case', async () => {
            const createdAfter = dayjs().toISOString()
            const [{ taskStarted }] = await sendNewBillingReceiptFilesNotificationsByTestClient(admin, {
                organization: { id: organization.id },
                createdAfter,
                period: '2024-01-01',
            })

            // assert task started
            expect(taskStarted).toBeTruthy()
        })
        it('support: success case', async () => {
            const createdAfter = dayjs().toISOString()
            const [{ taskStarted }] = await sendNewBillingReceiptFilesNotificationsByTestClient(support, {
                organization: { id: organization.id },
                createdAfter,
                period: '2024-01-01',
            })

            // assert task started
            expect(taskStarted).toBeTruthy()
        })
        it('user: denied case', async () => {
            const createdAfter = dayjs().toISOString()

            await expectToThrowAccessDeniedErrorToResult(async () => {
                await sendNewBillingReceiptFilesNotificationsByTestClient(user, {
                    organization: { id: organization.id },
                    createdAfter,
                    period: '2024-01-01',
                })
            })
        })
        it('anonymous: denied case', async () => {
            const createdAfter = dayjs().add(-1, 'days').toISOString()

            await expectToThrowAuthenticationErrorToResult(async () => {
                await sendNewBillingReceiptFilesNotificationsByTestClient(anonymous, {
                    organization: { id: organization.id },
                    createdAfter,
                    period: '2024-01-01',
                })
            })
        })
    })

    describe('Validations', () => {
        let createdAfter

        beforeAll(async () => {
            createdAfter = dayjs().add(-1, 'days').toISOString()
        })

        it('Not valid period', async () => {
            await catchErrorFrom(async () => {
                await sendNewBillingReceiptFilesNotificationsByTestClient(admin, {
                    organization: { id: organization.id },
                    createdAfter,
                    period: 'january 2024',
                })
            }, ({ errors }) => {
                expect(errors).toMatchObject([{
                    extensions: {
                        code: 'BAD_USER_INPUT',
                        type: NOT_FOUND,
                        message: `Please provide proper period not before start of previous and not later than start of current month, valid format is ${DATE_FORMAT}`,
                    },
                }])
            })
        })

        it('Empty organization', async () => {
            await catchErrorFrom(async () => {
                await sendNewBillingReceiptFilesNotificationsByTestClient(admin, {
                    organization: { id: faker.datatype.uuid() },
                    createdAfter,
                    period: '2024-01-01',
                })
            }, ({ errors }) => {
                expect(errors).toMatchObject([{
                    extensions: {
                        code: 'BAD_USER_INPUT',
                        type: NOT_FOUND,
                        message: 'Could not find Organization by specified search criteria',
                    },
                }])
            })
        })
    })
})