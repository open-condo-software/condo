/**
 * Generated by `createschema billing.BillingIntegration name:Text;`
 */

const { Text, Relationship } = require('@keystonejs/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const access = require('@condo/domains/billing/access/BillingIntegration')
const { CURRENCY_CODE_FIELD } = require('@condo/domains/common/schema/fields')
const { DATA_FORMAT_FIELD } = require('./fields/BillingIntegration/DataFormat')
const {
    LOGO_FIELD,
    APPS_FILE_ADAPTER,
    DEVELOPER_FIELD,
    PARTNER_URL_FIELD,
    SHORT_DESCRIPTION_FIELD,
    INSTRUCTION_TEXT_FIELD,
    IFRAME_URL_FIELD,
    CONNECTED_MESSAGE_FIELD,
    IS_HIDDEN_FIELD,
    CONTEXT_DEFAULT_STATUS_FIELD,
} = require('@condo/domains/miniapp/schema/fields/integration')
const { ABOUT_DOCUMENT_FIELD } = require('@condo/domains/miniapp/schema/fields/aboutDocumentField')
const { NO_INSTRUCTION_OR_MESSAGE_ERROR } = require('@condo/domains/miniapp/constants')
const { getFileMetaAfterChange } = require('@condo/domains/common/utils/fileAdapter')
const { dvAndSender } = require('../../common/schema/plugins/dvAndSender')

const logoMetaAfterChange = getFileMetaAfterChange(APPS_FILE_ADAPTER, 'logo')

const BillingIntegration = new GQLListSchema('BillingIntegration', {
    schemaDoc: 'Identification of the `integration component` which responsible for getting data from the `billing data source` and delivering the data to `this API`. Examples: tap-1c, ... ',
    fields: {
        name: {
            schemaDoc: 'The name of the `integration component` that the developer remembers',
            type: Text,
            isRequired: true,
        },

        logo: LOGO_FIELD,

        shortDescription: SHORT_DESCRIPTION_FIELD,

        about: ABOUT_DOCUMENT_FIELD,

        developer: DEVELOPER_FIELD,

        partnerUrl: PARTNER_URL_FIELD,

        instruction: INSTRUCTION_TEXT_FIELD,

        connectedMessage: CONNECTED_MESSAGE_FIELD,

        appUrl: IFRAME_URL_FIELD,

        billingPageTitle: {
            schemaDoc: 'This title is shown on /billing page, usually contains word "Billing"',
            type: Text,
            isRequired: false,
        },

        contextDefaultStatus: CONTEXT_DEFAULT_STATUS_FIELD,

        dataFormat: DATA_FORMAT_FIELD,

        currencyCode: {
            ...CURRENCY_CODE_FIELD,
            schemaDoc: 'Currency which this billing uses',
            isRequired: true,
        },

        // settings data structure config (settings field for BillingIntegrationOrganizationContext)
        // state data structure config (state field for BillingIntegrationOrganizationContext)
        // log messages translation and adaptation (message field for BillingIntegrationLog)
        accessRights: {
            type: Relationship,
            ref: 'BillingIntegrationAccessRight.integration',
            many: true,
        },

        // TODO(DOMA-1647): Need better solution, used to test UPS flow for now
        isHidden: IS_HIDDEN_FIELD,
    },
    hooks: {
        validateInput: ({ resolvedData, context, addValidationError, existingItem }) => {
            const newItem = { ...existingItem, ...resolvedData }
            if (!newItem.appUrl && (!newItem.instruction || !newItem.connectedMessage)) {
                return addValidationError(NO_INSTRUCTION_OR_MESSAGE_ERROR)
            }
        },
        afterChange: logoMetaAfterChange,
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBillingIntegrations,
        create: access.canManageBillingIntegrations,
        update: access.canManageBillingIntegrations,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BillingIntegration,
}
