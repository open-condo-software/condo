/**
 * Generated by `createschema billing.BillingAccount 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; importId?:Text; property:Relationship:BillingProperty:CASCADE; bindingId:Text; number:Text; unit:Text; raw:Json; meta:Json'`
 */
const faker = require('faker')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithIntegrationAccess } = require('@condo/domains/billing/utils/testSchema')
const { OrganizationEmployee, updateTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')
const { BillingAccount, createTestBillingAccount,
    updateTestBillingAccount, createTestBillingProperty,
    makeContextWithOrganizationAndIntegrationAsAdmin, createTestBillingIntegrationOrganizationContext,
    makeOrganizationIntegrationManager, createReceiptsReader } = require('@condo/domains/billing/utils/testSchema')
const { expectToThrowAuthenticationErrorToObjects, expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObj } = require('@condo/domains/common/utils/testSchema')
const { catchErrorFrom } = require('@condo/domains/common/utils/testSchema')

describe('BillingAccount', () => {
    describe('Constraints', () => {
        test('can create two BillingAccount with same globalId in different contexts', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, property, {
                globalId: 'cat',
            })

            const { context: context2 } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property2] = await createTestBillingProperty(admin, context2)
            const [billingAccount2] = await createTestBillingAccount(admin, context2, property2, {
                globalId: 'cat',
            })

            expect(billingAccount.id).not.toEqual(billingAccount2.id)
            expect(billingAccount.globalId).toEqual(billingAccount2.globalId)
        })

        test('cannot create two BillingAccount with same globalId in single context', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            await createTestBillingAccount(admin, context, property, {
                globalId: 'cat',
            })
            
            const [property2] = await createTestBillingProperty(admin, context)
            
            await catchErrorFrom(
                async () =>
                    await createTestBillingAccount(admin, context, property2, {
                        globalId: 'cat',
                    }),
                (e) => {
                    expect(e.errors).toBeDefined()
                }
            )
        })
    })

    describe('Create', () => {

        test('can be created by Admin', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, property, {
                fullName: 'Yuri Gagarin',
            })

            expect(billingAccount.context.id).toEqual(context.id)
            expect(billingAccount.property.id).toEqual(property.id)
            expect(billingAccount.fullName).toEqual('Yuri Gagarin')
        })

        test('can\'t be created by user', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const client = await makeClientWithNewRegisteredAndLoggedInUser()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestBillingAccount(client, context, property)
            })
        })

        test('can\'t be created by anonymous', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const client = await makeClient()

            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestBillingAccount(client, context, property)
            })
        })

        test('can be created by integration account', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const integrationClient = await makeClientWithIntegrationAccess()
            const [organization] = await createTestOrganization(adminClient)
            const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, organization, integrationClient.integration)
            const [property] = await createTestBillingProperty(adminClient, context)
            const [billingAccount] = await createTestBillingAccount(integrationClient, context, property)

            expect(billingAccount.context.id).toEqual(context.id)
            expect(billingAccount.property.id).toEqual(property.id)
        })

        test('can be created by integration organization manager', async () => {
            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)
            const [billingAccount] = await createTestBillingAccount(managerUserClient, context, property)

            expect(billingAccount.context.id).toEqual(context.id)
            expect(billingAccount.property.id).toEqual(property.id)
        })

        test('cannot be created by soft-deleted integration organization manager', async () => {
            const admin = await makeLoggedInAdminClient()

            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)

            const employees = await OrganizationEmployee.getAll(admin, { user: { id: managerUserClient.user.id } })
            expect(employees).toHaveLength(1)
            await updateTestOrganizationEmployee(admin, employees[0].id, { deletedAt: 'true' })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestBillingAccount(managerUserClient, context, property)
            })
        })

        test('cannot be created by blocked integration organization manager', async () => {
            const admin = await makeLoggedInAdminClient()

            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)

            const employees = await OrganizationEmployee.getAll(admin, { user: { id: managerUserClient.user.id } })
            expect(employees).toHaveLength(1)
            await updateTestOrganizationEmployee(admin, employees[0].id, { isBlocked: true })

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestBillingAccount(managerUserClient, context, property)
            })
        })
    })

    describe('Read', () => {
        test('can be read by admin', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, property)
            const billingAccounts = await BillingAccount.getAll(admin, { id: billingAccount.id })
            expect(billingAccounts).toHaveLength(1)
        })

        test('can be read by integration', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const integrationClient = await makeClientWithIntegrationAccess()
            const [organization] = await createTestOrganization(adminClient)
            const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, organization, integrationClient.integration)
            const [property] = await createTestBillingProperty(adminClient, context)
            const [billingAccount] = await createTestBillingAccount(adminClient, context, property)

            const billingAccounts = await BillingAccount.getAll(integrationClient, { id: billingAccount.id })
            expect(billingAccounts).toHaveLength(1)
        })

        test('can be read by organization integration manager', async () => {
            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)
            const [billingAccount] = await createTestBillingAccount(managerUserClient, context, property)
            const billingAccounts = await BillingAccount.getAll(managerUserClient, { id: billingAccount.id })
            expect(billingAccounts).toHaveLength(1)
        })

        test('can be read by organization employee with `canReadBillingReceipts`', async () => {
            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)
            const [billingAccount] = await createTestBillingAccount(managerUserClient, context, property)
            const client = await createReceiptsReader(organization)

            const billingAccounts = await BillingAccount.getAll(client, { id: billingAccount.id })
            expect(billingAccounts).toHaveLength(1)
        })

        test('cannot be read by soft-deleted organization integration manager', async () => {
            const admin = await makeLoggedInAdminClient()
            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const employees = await OrganizationEmployee.getAll(admin, { user: { id: managerUserClient.user.id } })
            expect(employees).toHaveLength(1)
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)
            const [billingAccount] = await createTestBillingAccount(managerUserClient, context, property)
            await updateTestOrganizationEmployee(admin, employees[0].id, { deletedAt: 'true' })
            const billingAccounts = await BillingAccount.getAll(managerUserClient, { id: billingAccount.id })
            expect(billingAccounts).toHaveLength(0)
        })

        test('cannot be read by blocked organization integration manager', async () => {
            const admin = await makeLoggedInAdminClient()
            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const employees = await OrganizationEmployee.getAll(admin, { user: { id: managerUserClient.user.id } })
            expect(employees).toHaveLength(1)
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)
            const [billingAccount] = await createTestBillingAccount(managerUserClient, context, property)
            await updateTestOrganizationEmployee(admin, employees[0].id, { isBlocked: true })
            const billingAccounts = await BillingAccount.getAll(managerUserClient, { id: billingAccount.id })
            expect(billingAccounts).toHaveLength(0)
        })

        test('cannot be read by user', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const client = await makeClientWithNewRegisteredAndLoggedInUser()
            await createTestBillingAccount(admin, context, property)
            const billingAccounts = await BillingAccount.getAll(client)
            expect(billingAccounts).toHaveLength(0)
        })

        test('cannot be read by anonymous', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const client = await makeClient()
            await createTestBillingAccount(admin, context, property)

            await expectToThrowAuthenticationErrorToObjects(async () => {
                await BillingAccount.getAll(client)
            })
        })
    })

    describe('Update', () => {
        test('can be updated by admin', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, property)

            const randomUnitName = faker.lorem.word()
            const payload = {
                unitName: randomUnitName,
            }
            const [updatedBillingAccount] = await updateTestBillingAccount(admin, billingAccount.id, payload)

            expect(billingAccount.id).toEqual(updatedBillingAccount.id)
            expect(updatedBillingAccount.unitName).toEqual(randomUnitName)
        })

        test('can be updated by organization integration manager', async () => {
            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)
            const [billingAccount] = await createTestBillingAccount(managerUserClient, context, property)
            const randomUnitName = faker.lorem.word()
            const payload = {
                unitName: randomUnitName,
            }
            const [updatedBillingAccount] = await updateTestBillingAccount(managerUserClient, billingAccount.id, payload)

            expect(billingAccount.id).toEqual(updatedBillingAccount.id)
            expect(updatedBillingAccount.unitName).toEqual(randomUnitName)
        })

        test('cannot be updated by soft-deleted organization integration manager', async () => {
            const admin = await makeLoggedInAdminClient()

            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)
            const [billingAccount] = await createTestBillingAccount(managerUserClient, context, property)

            const employees = await OrganizationEmployee.getAll(admin, { user: { id: managerUserClient.user.id } })
            expect(employees).toHaveLength(1)
            await updateTestOrganizationEmployee(admin, employees[0].id, { deletedAt: 'true' })

            const payload = {}

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestBillingAccount(managerUserClient, billingAccount.id, payload)
            })
        })

        test('cannot be updated by blocked organization integration manager', async () => {
            const admin = await makeLoggedInAdminClient()

            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)
            const [billingAccount] = await createTestBillingAccount(managerUserClient, context, property)

            const employees = await OrganizationEmployee.getAll(admin, { user: { id: managerUserClient.user.id } })
            expect(employees).toHaveLength(1)
            await updateTestOrganizationEmployee(admin, employees[0].id, { isBlocked: true })

            const payload = {}

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestBillingAccount(managerUserClient, billingAccount.id, payload)
            })
        })

        test('can be updated by integration', async () => {
            const adminClient = await makeLoggedInAdminClient()
            const integrationClient = await makeClientWithIntegrationAccess()
            const [organization] = await createTestOrganization(adminClient)
            const [context] = await createTestBillingIntegrationOrganizationContext(adminClient, organization, integrationClient.integration)
            const [property] = await createTestBillingProperty(adminClient, context)
            const [billingAccount] = await createTestBillingAccount(adminClient, context, property)

            const randomUnitName = faker.lorem.word()
            const payload = {
                unitName: randomUnitName,
            }
            const [updatedBillingAccount] = await updateTestBillingAccount(integrationClient, billingAccount.id, payload)

            expect(billingAccount.context.id).toEqual(context.id)
            expect(billingAccount.property.id).toEqual(property.id)
            expect(updatedBillingAccount.unitName).toEqual(randomUnitName)
        })

        test('cannot be updated by user', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, property)
            const client = await makeClientWithNewRegisteredAndLoggedInUser()

            const payload = {}
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestBillingAccount(client, billingAccount.id, payload)
            })
        })

        test('cannot be updated by anonymous', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, property)
            const client = await makeClient()

            const payload = {}
            await expectToThrowAuthenticationErrorToObj(async () => {
                await updateTestBillingAccount(client, billingAccount.id, payload)
            })
        })
    })

    describe('Delete', () => {
        test('cannot be deleted by admin', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, property)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await BillingAccount.delete(admin, billingAccount.id)
            })
        })

        test('cannot be deleted by organization integration manager', async () => {
            const { organization, integration, managerUserClient } = await makeOrganizationIntegrationManager()
            const [context] = await createTestBillingIntegrationOrganizationContext(managerUserClient, organization, integration)
            const [property] = await createTestBillingProperty(managerUserClient, context)
            const [billingAccount] = await createTestBillingAccount(managerUserClient, context, property)

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await BillingAccount.delete(managerUserClient, billingAccount.id)
            })
        })

        test('cannot be deleted by user', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, property)
            const user = await makeClientWithNewRegisteredAndLoggedInUser()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await BillingAccount.delete(user, billingAccount.id)
            })
        })

        test('cannot be deleted by anonymous', async () => {
            const admin = await makeLoggedInAdminClient()
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin()
            const [property] = await createTestBillingProperty(admin, context)
            const [billingAccount] = await createTestBillingAccount(admin, context, property)
            const client = await makeClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await BillingAccount.delete(client, billingAccount.id)
            })
        })
    })
})
