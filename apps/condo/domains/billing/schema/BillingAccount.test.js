/**
 * Generated by `createschema billing.BillingAccount 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; importId?:Text; property:Relationship:BillingProperty:CASCADE; bindingId:Text; number:Text; unit:Text; raw:Json; meta:Json'`
 */

const {makeLoggedInClient} = require("@condo/domains/user/utils/testSchema");
const {createTestBillingProperty} = require("@condo/domains/billing/utils/testSchema");
const {createTestBillingIntegrationOrganizationContext} = require("@condo/domains/billing/utils/testSchema");
const {createTestOrganization} = require("@condo/domains/organization/utils/testSchema");
const {createTestBillingIntegration} = require("@condo/domains/billing/utils/testSchema");
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { BillingAccount, createTestBillingAccount, updateTestBillingAccount } = require('@condo/domains/billing/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects } = require('../../common/utils/testSchema')

describe('BillingAccount', () => {
    test('admin: create BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount, attrs] = await createTestBillingAccount(admin, context, property)

        expect(billingAccount.id).toMatch(UUID_RE)
        expect(billingAccount.dv).toEqual(1)
        expect(billingAccount.sender).toEqual(attrs.sender)
        expect(billingAccount.v).toEqual(1)
        expect(billingAccount.newId).toEqual(null)
        expect(billingAccount.deletedAt).toEqual(null)
        expect(billingAccount.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(billingAccount.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(billingAccount.createdAt).toMatch(DATETIME_RE)
        expect(billingAccount.updatedAt).toMatch(DATETIME_RE)
    })

    test('user: create BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const client = await makeLoggedInClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingAccount(client, context, property)
        })
    })

    test('anonymous: create BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const client = await makeClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingAccount(client, context, property)
        })
    })

    test('admin: read BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount, attrs] = await createTestBillingAccount(admin , context, property)
        const billingAccounts = await BillingAccount.getAll(admin)
        expect(billingAccounts.length).toBeGreaterThan(0)

        const lastBillingAccount = billingAccounts[billingAccounts.length - 1]
        expect(lastBillingAccount.id).toMatch(UUID_RE)
        expect(lastBillingAccount.dv).toEqual(1)
        expect(lastBillingAccount.sender).toEqual(attrs.sender)
        expect(lastBillingAccount.v).toEqual(1)
        expect(lastBillingAccount.newId).toEqual(null)
        expect(lastBillingAccount.deletedAt).toEqual(null)
        expect(lastBillingAccount.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(lastBillingAccount.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(lastBillingAccount.createdAt).toMatch(DATETIME_RE)
        expect(lastBillingAccount.updatedAt).toMatch(DATETIME_RE)
    })


    test('user: read BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const client = await makeLoggedInClient()
        await createTestBillingAccount(admin , context, property)

        const billingAccounts = await BillingAccount.getAll(client)
        expect(billingAccounts).toHaveLength(0)
    })

    test('anonymous: read BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const client = await makeClient()
        await createTestBillingAccount(admin , context, property)

        await expectToThrowAccessDeniedErrorToObjects(async () => {
            await BillingAccount.getAll(client)
        })
    })

    test('admin: update BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin , context, property)

        const payload = {}
        const [updatedBillingAccount, attrs] = await updateTestBillingAccount(admin, billingAccount.id, payload)

        expect(updatedBillingAccount.id).toEqual(billingAccount.id)
        expect(updatedBillingAccount.dv).toEqual(1)
        expect(updatedBillingAccount.sender).toEqual(attrs.sender)
        expect(updatedBillingAccount.v).toEqual(2)
        expect(updatedBillingAccount.newId).toEqual(null)
        expect(updatedBillingAccount.deletedAt).toEqual(null)
        expect(updatedBillingAccount.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(updatedBillingAccount.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(updatedBillingAccount.createdAt).toMatch(DATETIME_RE)
        expect(updatedBillingAccount.updatedAt).toMatch(DATETIME_RE)
        expect(updatedBillingAccount.updatedAt).not.toEqual(updatedBillingAccount.createdAt)
    })

    test('user: update BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin , context, property)
        const client = await makeLoggedInClient()

        const payload = {}
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingAccount(client, billingAccount.id, payload)
        })
    })

    test('anonymous: update BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin , context, property)
        const client = await makeClient()

        const payload = {}
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingAccount(client, billingAccount.id, payload)
        })
    })

    // access denied deleteBillingAccount
    test.skip('admin: delete BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin , context, property)

        await BillingAccount.delete(admin, billingAccount.id)
        const billingAccounts = await BillingAccount.getAll(admin, { id: billingAccount.id })

        expect(billingAccounts).toHaveLength(0)
    })

    test('user: delete BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin , context, property)
        const user = await makeLoggedInClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingAccount.delete(user, billingAccount.id)
        })
    })

    test('anonymous: delete BillingAccount', async () => {
        const admin = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(admin)
        const [organization] = await createTestOrganization(admin)
        const [context] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin , context, property)
        const client = await makeClient()

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingAccount.delete(client, billingAccount.id)
        })
    })
})
