/**
 * Generated by `createservice billing.RegisterBillingReceiptsService --type mutations`
 */

const { BillingAccount, BillingProperty } = require('@condo/domains/billing/utils/serverSchema')

const access = require('@condo/domains/billing/access/RegisterBillingReceiptsService')
const { find, getById, GQLCustomSchema } = require('@core/keystone/schema')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@core/keystone/errors')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const errors = {
    NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY: {
        mutation: 'registerBillingReceipts',
        variable: ['data', 'someVar'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
        code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@core/keystone/errors'
        type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
        message: 'Describe what happened for developer',
        messageForUser: 'api.user.registerBillingReceipts.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
    },
}


const syncBillingProperties = async (context, properties, billingContextId) => {
    const existingProperties = await find('BillingProperty', {
        address_in: [properties.map(p => p.address)],
        context: { id: billingContextId },
    })
    const propertiesIndex = Object.fromEntries(
        existingProperties.map(({ id, globalId }) => ([globalId, id])))
    const propertiesToAdd = properties.filter(
        (({ globalId }) => !Reflect.has(propertiesIndex, globalId)))
    const newProperties = []
    for (const p of propertiesToAdd) {
        const [newProperty] = await BillingProperty.create(context, p)
        newProperties.push(newProperty)
    }

    return { ...newProperties, ...propertiesIndex }
}


const syncBillingAccounts = async (context, accounts, billingContextId) => {
    // const existingAccounts = await this.loadByChunks({
    //     modelGql: BillingAccountIdGql,
    //     where: {
    //         importId_in: accounts.map(({ importId }) => importId),
    //         context: { id: contextId },
    //     },
    // })
    // await onProgress(existingAccounts.length)
    // const accountsIndex = Object.fromEntries(
    //     existingAccounts.map(({ id, importId }) => ([importId, id])))
    // const accountsToAdd = accounts.filter(
    //     ({ importId }) => !Reflect.has(accountsIndex, importId))
    // if (!accountsToAdd.length) {
    //     return accountsIndex
    // }
    // const billingAccounts = await this.createModels({
    //     modelGql: BillingAccountIdGql,
    //     createInputs: accountsToAdd,
    //     isBatch: false,
    //     onProgress,
    // })
    // return {
    //     ...accountsIndex, ...Object.fromEntries(
    //         billingAccounts.map(({ id, importId }) => ([importId, id])))
    // }
}


const RegisterBillingReceiptsService = new GQLCustomSchema('RegisterBillingReceiptsService', {
    types: [
        {
            access: true,
            type: 'input RegisterBillingReceiptInput ' +
                '{ ' +
                    'importId: String! ' +

                    'address: String! ' +

                    'accountNumber: String! ' +
                    'unitName: String! ' +
                    'unitType: String! ' +
                    'fullName: String ' +

                    'toPay: String! ' +
                    'toPayDetails: BillingReceiptServiceToPayDetailsFieldInput ' +
                    'services: BillingReceiptServiceFieldInput ' +
                    'period: String! ' +

                    'category: BillingCategoryWhereUniqueInput! ' +

                    'tin: String! ' +
                    'iec: String! ' +
                    'bic: String! ' +
                    'bankAccount: String! ' +
                '}',
        },
        {
            access: true,
            type: 'input RegisterBillingReceiptsInput { dv: Int!, sender: SenderFieldInput!, context: BillingIntegrationOrganizationContextWhereUniqueInput, receipts: [RegisterBillingReceiptInput!]! }',
        },
    ],
    
    mutations: [
        {
            access: access.canRegisterBillingReceipts,
            schema: 'registerBillingReceipts(data: RegisterBillingReceiptsInput!): [BillingReceipt]',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { context: billingContextInput, receipts } = args

                // Step 0:
                // Validate context
                const { id: billingContextId } = billingContextInput
                const billingContext = await getById('BillingIntegrationOrganizationContext', billingContextId)
                if (!billingContextId || !billingContext) {
                    throw new Error('No context!')
                }

                const { properties, accounts } = receipts.reduce((index, receipt) => {
                    const { address, accountNumber, unitName, unitType } = receipt

                    const propertyGlobalId = address
                    const accountGlobalId = [propertyGlobalId, accountNumber, unitName, unitType].join('_')

                    if (!index.properties[propertyGlobalId]) {
                        index.properties[propertyGlobalId] = {
                            globalId: propertyGlobalId,
                            address: address,
                            raw: { dv: 1 },
                            importId: propertyGlobalId,
                            context: { connect: { id: billingContext.id } },
                            meta: { dv: 1 },
                        }
                    }
                    if (!index.accounts[accountGlobalId]) {
                        index.accounts[accountGlobalId] = {
                            context: { connect: { id: billingContext.id } },
                            number: accountNumber,
                            importId: accountGlobalId,
                            globalId: accountGlobalId,
                            unitName,
                            unitType,
                            propertyGlobalId,
                            raw: { dv: 1 },
                            meta: { dv: 1 },
                        }
                    }
                    return index
                }, { properties: {}, accounts: {} })

                // Step 2:
                // Sync billing properties
                const syncedProperties = await syncBillingProperties(context, properties, billingContextId)

                console.debug(syncedProperties)

                // Step 3:
                // Sync Billing Accounts
                // const syncedAccounts = await syncBillingAccounts(context, accounts, billingContextId)

                // Step 4:
                // Sync billing receipts

                // TODO: throw errors in a following way
                // throw new GQLError(errors.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY)
                return {
                    id: null,
                }
            },
        },
    ],
    
})

module.exports = {
    RegisterBillingReceiptsService,
}
