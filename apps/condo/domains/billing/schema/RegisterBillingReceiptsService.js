/**
 * Generated by `createservice billing.RegisterBillingReceiptsService --type mutations`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/billing/access/RegisterBillingReceiptsService')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@core/keystone/errors')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const errors = {
    NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY: {
        mutation: 'registerBillingReceipts',
        variable: ['data', 'someVar'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
        code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@core/keystone/errors'
        type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
        message: 'Describe what happened for developer',
        messageForUser: 'api.user.registerBillingReceipts.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
    },
}

const RegisterBillingReceiptsService = new GQLCustomSchema('RegisterBillingReceiptsService', {
    types: [
        {
            access: true,
            type: 'input RegisterBillingReceiptInput ' +
                '{ ' +
                    'integrationContext: BillingIntegrationOrganizationContextWhereUniqueInput! ' +
                    'importId: string!' +

                    'address: string!, ' +

                    'accountNumber: string!, ' +
                    'unitName: string!, ' +
                    'unitType: string!, ' +
                    'fullName: string, ' +

                    'toPay: string!, ' +
                    'toPayDetails: ToPayDetails, ' +
                    'services: Services, ' +
                    'period: string! ' +

                    'category: BillingCategoryWhereUniqueInput! ' +

                    'tin: string! ' +
                    'iec: string! ' +
                    'bic: string! ' +
                    'bankAccount: string!' +
                '}',
        },
        {
            access: true,
            type: 'type RegisterBillingReceiptsOutput { data: [BillingReceipt] }',
        },
    ],
    
    mutations: [
        {
            access: access.canRegisterBillingReceipts,
            schema: 'registerBillingReceipts(data: [RegisterBillingReceiptInput]!): RegisterBillingReceiptsOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args

                // Step 1:
                // Validate data
                for (const item of data) {
                    const { integrationContext, importId, address, accountNumber, unitName, unitType, toPay, period, category, tin, iec, bic, bankAccount } = item


                }





                // TODO: throw errors in a following way
                // throw new GQLError(errors.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY)
                return {
                    id: null,
                }
            },
        },
    ],
    
})

module.exports = {
    RegisterBillingReceiptsService,
}
