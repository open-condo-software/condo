/**
 * Generated by `createschema billing.BillingCurrency 'code:Text; displayInfo:Json;'`
 */

const { expectToThrowAuthenticationErrorToObjects } = require('@condo/domains/common/utils/testSchema')
const { makeLoggedInAdminClient, makeLoggedInClient, makeClient } = require('@core/keystone/test.utils')
const { makeClientWithSupportUser } = require('../../user/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObj } = require('@condo/domains/common/utils/testSchema')
const { BillingCurrency, createTestBillingCurrency, updateTestBillingCurrency } = require('@condo/domains/billing/utils/testSchema')

describe('BillingCurrency', () => {
    describe('Create', async () => {
        test('admin can create BillingCurrency', async () => {
            const admin = await makeLoggedInAdminClient()

            const [obj] = await createTestBillingCurrency(admin)
            expect(obj).toBeDefined()
        })

        test('support can create BillingCurrency', async () => {
            const support = await makeClientWithSupportUser()

            const [obj] = await createTestBillingCurrency(support)
            expect(obj).toBeDefined()
        })

        test('user cant create BillingCurrency', async () => {
            const client = await makeLoggedInClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestBillingCurrency(client)
            })
        })

        test('anonymous cant create BillingCurrency', async () => {
            const client = await makeClient()
            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestBillingCurrency(client)
            })
        })
    })

    describe('Update', async () => {
        test('admin can update BillingCurrency', async () => {
            const admin = await makeLoggedInAdminClient()
            const [obj] = await createTestBillingCurrency(admin)

            const [updatedObj] = await updateTestBillingCurrency(admin, obj.id, { code: 'USD' })
            expect(updatedObj).toBeDefined()
            expect(obj.id).toEqual(updatedObj.id)
            expect(updatedObj.code).toEqual('USD')
        })

        test('support can update BillingCurrency', async () => {
            const admin = await makeLoggedInAdminClient()
            const [obj] = await createTestBillingCurrency(admin)

            const support = await makeClientWithSupportUser()
            const [updatedObj] = await updateTestBillingCurrency(support, obj.id, { code: 'USD' })

            expect(updatedObj).toBeDefined()
            expect(obj.id).toEqual(updatedObj.id)
            expect(updatedObj.code).toEqual('USD')
        })

        test('user cant update BillingCurrency', async () => {
            const admin = await makeLoggedInAdminClient()
            const [obj] = await createTestBillingCurrency(admin)

            const client = await makeLoggedInClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestBillingCurrency(client, obj.id, { code: 'USD' })
            })
        })

        test('anonymous cant update BillingCurrency', async () => {
            const admin = await makeLoggedInAdminClient()
            const [obj] = await createTestBillingCurrency(admin)

            const client = await makeClient()

            await expectToThrowAuthenticationErrorToObj(async () => {
                await updateTestBillingCurrency(client, obj.id, { code: 'USD' })
            })
        })
    })

    describe('Read', async () => {
        test('admin can read BillingCurrency', async () => {
            const admin = await makeLoggedInAdminClient()
            await createTestBillingCurrency(admin)

            const objs = await BillingCurrency.getAll(admin)

            expect(objs.length).toBeGreaterThan(0)
        })

        test('user can read BillingCurrency', async () => {
            const admin = await makeLoggedInAdminClient()
            await createTestBillingCurrency(admin)

            const client = await makeLoggedInClient()
            const objs = await BillingCurrency.getAll(client)

            expect(objs.length).toBeGreaterThan(0)
        })

        test('anonymous cant read BillingCurrency', async () => {
            const admin = await makeLoggedInAdminClient()
            await createTestBillingCurrency(admin)

            const client = await makeClient()
            expectToThrowAuthenticationErrorToObjects(async () => {
                await BillingCurrency.getAll(client)
            })
        })
    })

    describe('Delete', async () => {
        test('admin cant delete BillingCurrency', async () => {
            const admin = await makeLoggedInAdminClient()
            const [obj] = await createTestBillingCurrency(admin)

            expectToThrowAccessDeniedErrorToObj(async () => {
                await BillingCurrency.delete(admin, obj.id)
            })
        })
    })
})
