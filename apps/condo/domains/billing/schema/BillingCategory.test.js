/**
 * Generated by `createschema billing.BillingCategory 'name:Text'`
 */

const faker = require('faker')
const { expectToThrowAuthenticationErrorToObjects } = require('@condo/domains/common/utils/testSchema')

const { makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeLoggedInClient, makeClient } = require('@condo/keystone/test.utils')

const { BillingCategory, createTestBillingCategory, updateTestBillingCategory } = require('@condo/domains/billing/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj } = require('@condo/domains/common/utils/testSchema')

const TEST_CATEGORY_ID = '928c97ef-5289-4daa-b80e-4b9fed50c629'

describe('BillingCategory', () => {
    describe('Create', () => {
        test('cannot be created by Admin', async () => {
            const admin = await makeLoggedInAdminClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestBillingCategory(admin)
            })
        })

        test('cannot be created by support', async () => {
            const support = await makeClientWithSupportUser()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestBillingCategory(support)
            })
        })

        test('cannot be created by user', async () => {
            const user = await makeLoggedInClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestBillingCategory(user)
            })
        })
    })

    describe('Read', () => {
        test('can be read by admin', async () => {
            const admin = await makeLoggedInAdminClient()

            const categories = await BillingCategory.getAll(admin, { id: TEST_CATEGORY_ID })
            expect(categories).toHaveLength(1)
        })

        test('can be read by user', async () => {
            const user = await makeLoggedInClient()

            const categories = await BillingCategory.getAll(user, { id: TEST_CATEGORY_ID })
            expect(categories).toHaveLength(1)
        })

        test('cannot be read by anonymous', async () => {
            const client = await makeClient()
            await expectToThrowAuthenticationErrorToObjects(async () => {
                await BillingCategory.getAll(client, { id: TEST_CATEGORY_ID })
            })
        })
    })

    describe('Update', () => {
        test('cannot be updated by admin', async () => {
            const admin = await makeLoggedInAdminClient()

            const payload = { name: faker.lorem.words() }

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestBillingCategory(admin, TEST_CATEGORY_ID, payload)
            })
        })

        test('cannot be updated by support', async () => {
            const support = await makeClientWithSupportUser()

            const payload = { name: faker.lorem.words() }

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestBillingCategory(support, TEST_CATEGORY_ID, payload)
            })
        })

        test('cannot be updated by user', async () => {
            const user = await makeLoggedInClient()

            const payload = { name: faker.lorem.words() }

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestBillingCategory(user, TEST_CATEGORY_ID, payload)
            })
        })

        test('cannot be updated by anonymous', async () => {
            const anonymous = await makeClient()

            const payload = { name: faker.lorem.words() }

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestBillingCategory(anonymous, TEST_CATEGORY_ID, payload)
            })
        })
    })

    describe('Delete', () => {
        test('cannot be deleted by admin', async () => {
            const admin = await makeLoggedInAdminClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await BillingCategory.delete(admin, TEST_CATEGORY_ID)
            })
        })
    })
})
