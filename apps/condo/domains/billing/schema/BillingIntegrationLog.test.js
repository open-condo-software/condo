/**
 * Generated by `createschema billing.BillingIntegrationLog 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; type:Text; message:Text; meta:Json'`
 */

const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { getRandomString, makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { BillingIntegrationLog, createTestBillingIntegrationLog, updateTestBillingIntegrationLog, makeClientWithIntegrationAccess, createTestBillingIntegrationOrganizationContext, createTestBillingIntegrationAccessRight, createTestBillingIntegration } = require('@condo/domains/billing/utils/testSchema')

const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects } = require('../../common/utils/testSchema')

describe('BillingIntegrationLog', () => {
    test.skip('user: create BillingIntegrationLog', async () => {
        const client = await makeClientWithIntegrationAccess()

        const [obj, attrs] = await createTestBillingIntegrationLog(client)  // TODO(codegen): write 'user: create BillingIntegrationLog' test
        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
    })

    test.skip('anonymous: create BillingIntegrationLog', async () => {
        const client = await makeClient()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingIntegrationLog(client)  // TODO(codegen): check the 'anonymous: create BillingIntegrationLog' test!
        })
    })

    test.skip('user: read BillingIntegrationLog', async () => {
        const admin = await makeLoggedInAdminClient()
        const [obj, attrs] = await createTestBillingIntegrationLog(admin)  // TODO(codegen): check create function!

        const client = await makeClient()  // TODO(codegen): use truly useful client!
        const objs = await BillingIntegrationLog.getAll(client)

        // TODO(codegen): check 'user: read BillingIntegrationLog' test!
        expect(objs).toHaveLength(1)
        expect(objs[0].id).toMatch(obj.id)
        expect(objs[0].dv).toEqual(1)
        expect(objs[0].sender).toEqual(attrs.sender)
        expect(objs[0].v).toEqual(1)
        expect(objs[0].newId).toEqual(null)
        expect(objs[0].deletedAt).toEqual(null)
        expect(objs[0].createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objs[0].updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objs[0].createdAt).toMatch(obj.createdAt)
        expect(objs[0].updatedAt).toMatch(obj.updatedAt)
    })

    test.skip('anonymous: read BillingIntegrationLog', async () => {
        const client = await makeClient()

        await expectToThrowAccessDeniedErrorToObjects(async () => {
            await BillingIntegrationLog.getAll(client)
        })
    })

    test.skip('user: update BillingIntegrationLog', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingIntegrationLog(admin)  // TODO(codegen): check create function!

        const client = await makeClient()  // TODO(codegen): use truly useful client!
        const payload = {}  // TODO(codegen): change the 'user: update BillingIntegrationLog' payload
        const [objUpdated, attrs] = await updateTestBillingIntegrationLog(client, objCreated.id, payload)

        // TODO(codegen): white checks for 'user: update BillingIntegrationLog' test
        expect(objUpdated.id).toEqual(objCreated.id)
        expect(objUpdated.dv).toEqual(1)
        expect(objUpdated.sender).toEqual(attrs.sender)
        expect(objUpdated.v).toEqual(2)
        expect(objUpdated.newId).toEqual(null)
        expect(objUpdated.deletedAt).toEqual(null)
        expect(objUpdated.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objUpdated.createdAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).not.toEqual(objUpdated.createdAt)
    })

    test.skip('anonymous: update BillingIntegrationLog', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingIntegrationLog(admin)  // TODO(codegen): check create function!

        const client = await makeClient()
        const payload = {}  // TODO(codegen): change the 'anonymous: update BillingIntegrationLog' payload
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingIntegrationLog(client, objCreated.id, payload)
        })
    })

    test.skip('user: delete BillingIntegrationLog', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingIntegrationLog(admin)  // TODO(codegen): check create function!

        const client = await makeClient()  // TODO(codegen): use truly useful client!
        try {
            // TODO(codegen): check 'user: delete BillingIntegrationLog' test!
            await BillingIntegrationLog.delete(client, objCreated.id)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test.skip('anonymous: delete BillingIntegrationLog', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingIntegrationLog(admin)  // TODO(codegen): check create function!

        const client = await makeClient()
        try {
            // TODO(codegen): check 'anonymous: delete BillingIntegrationLog' test!
            await BillingIntegrationLog.delete(client, objCreated.id)
        } catch (e) {
            expect(e.errors[0]).toMatchObject({
                'message': 'You do not have access to this resource',
                'name': 'AccessDeniedError',
                'path': ['obj'],
            })
            expect(e.data).toEqual({ 'obj': null })
        }
    })

    test('user: can see the logs', async () => {
        const integrationClient = await makeClientWithNewRegisteredAndLoggedInUser()
        // const hackerClient = await makeClientWithNewRegisteredAndLoggedInUser()
        const adminClient = await makeLoggedInAdminClient()
        const [integration] = await createTestBillingIntegration(adminClient)
        await createTestBillingIntegrationAccessRight(adminClient, integration, integrationClient.user)

        // user setup the Integration for his organization
        const userClient = await makeClientWithProperty()
        const [context] = await createTestBillingIntegrationOrganizationContext(userClient, userClient.organization, integration)

        // integration account create log record
        const message = getRandomString()
        const [logMessage] = await createTestBillingIntegrationLog(integrationClient, context, { message })
        expect(logMessage.id).toBeTruthy()

        // user can see the log record
        const logs = await BillingIntegrationLog.getAll(userClient, { context: { id: context.id } })
        expect(logs).toEqual([expect.objectContaining({ message })])

        // user doesn't have access to change log record
        const { errors } = await BillingIntegrationLog.update(userClient, logMessage.id, { message: 'no message' }, { raw: true })
        expect(errors[0]).toMatchObject({
            'data': { 'target': 'updateBillingIntegrationLog', 'type': 'mutation' },
            'message': 'You do not have access to this resource',
            'name': 'AccessDeniedError',
            'path': ['obj'],
        })

        // hacker client doesn't have access to the integration log record
        // TODO(pahaz): wait https://github.com/keystonejs/keystone/issues/4829
        // const hackerResult = await BillingIntegrationLog.getAll(hackerClient, { context: { id: context.id } })
        // expect(hackerResult).toEqual([])
    })
})
