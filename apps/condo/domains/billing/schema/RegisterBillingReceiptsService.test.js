/**
 * Generated by `createservice billing.RegisterBillingReceiptsService --type mutations`
 */

const faker = require('faker')
const { createTestBillingIntegrationOrganizationContext } = require(
    '@condo/domains/billing/utils/testSchema')
const { createTestOrganization } = require(
    '@condo/domains/organization/utils/testSchema')
const { createTestBillingIntegration } = require(
    '@condo/domains/billing/utils/testSchema')

const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { makeLoggedInClient, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')

const { expectToThrowAuthenticationError, expectToThrowAccessDeniedErrorToResult } = require('@condo/domains/common/utils/testSchema')

const { registerBillingReceiptsByTestClient } = require('@condo/domains/billing/utils/testSchema')
 
describe('RegisterBillingReceiptsService', () => {
    describe('Execute', () => {
        test('Admin can execute mutation', async () => {
            const admin = await makeLoggedInAdminClient()

            const [organization] = await createTestOrganization(admin)
            const [integration] = await createTestBillingIntegration(admin)
            const [billingContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

            const payload = {
                context: { id: billingContext.id },
                receipts: [{
                    importId: faker.random.alphaNumeric(24),

                    address: faker.random.alphaNumeric(12),

                    unitType: FLAT_UNIT_TYPE,
                    accountNumber: faker.random.alphaNumeric(8),
                    unitName: faker.random.alphaNumeric(8),

                    toPay: '200.20',
                    period: '2022-05-01',

                    category: { id: '928c97ef-5289-4daa-b80e-4b9fed50c629' },

                    tin: faker.random.alphaNumeric(8),
                    iec: faker.random.alphaNumeric(8),
                    bic: faker.random.alphaNumeric(8),
                    bankAccount: faker.random.alphaNumeric(8),
                }],
            }
            const [ data ] = await registerBillingReceiptsByTestClient(admin, payload)

            expect(data).toBeDefined()
        })

        test('Support can not execute mutation', async () => {
            const client = await makeClientWithSupportUser()
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            })
        })

        test('User can not execute mutation', async () => {
            const client = await makeLoggedInClient()
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            })
        })

        test('Anonymous can not execute mutation', async () => {
            const client = await makeClient()
            await expectToThrowAuthenticationError(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            }, 'result')
        })
    })
})
