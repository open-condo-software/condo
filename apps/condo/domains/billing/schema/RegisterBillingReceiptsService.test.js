/**
 * Generated by `createservice billing.RegisterBillingReceiptsService --type mutations`
 */

const { makeLoggedInClient, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')

const { expectToThrowAuthenticationError, expectToThrowAccessDeniedErrorToResult } = require('@condo/domains/common/utils/testSchema')

const { registerBillingReceiptsByTestClient } = require('@condo/domains/billing/utils/testSchema')
 
describe('RegisterBillingReceiptsService', () => {
    describe('Execute', () => {


        test('Support can not execute mutation', async () => {
            const client = await makeClientWithSupportUser()
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            })
        })

        test('User can not execute mutation', async () => {
            const client = await makeLoggedInClient()
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            })
        })

        test('Anonymous can not execute mutation', async () => {
            const client = await makeClient()
            await expectToThrowAuthenticationError(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            }, 'result')
        })
    })
})
