/**
 * Generated by `createservice billing.RegisterBillingReceiptsService --type mutations`
 */

const faker = require('faker')
const { createTestBillingReceipt } = require(
    '@condo/domains/billing/utils/testSchema')

const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestBillingIntegration, createTestBillingAccount, createTestBillingIntegrationOrganizationContext, createTestBillingProperty } = require('@condo/domains/billing/utils/testSchema')
const { BillingAccount, BillingProperty, BillingReceipts } = require('@condo/domains/billing/utils/serverSchema')
const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { makeLoggedInClient, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')

const { expectToThrowAuthenticationError, expectToThrowAccessDeniedErrorToResult } = require('@condo/domains/common/utils/testSchema')

const { registerBillingReceiptsByTestClient } = require('@condo/domains/billing/utils/testSchema')
 
describe('RegisterBillingReceiptsService', () => {
    describe('Execute', () => {
        test('Admin can execute mutation', async () => {
            const admin = await makeLoggedInAdminClient()

            const EXISTING_TEST_ADDRESS = 'TEST'
            const EXISTING_TEST_UNIT_NAME = '0'
            const EXISTING_TEST_ACCOUNT_NUMBER = '0'

            const [organization] = await createTestOrganization(admin)
            const [integration] = await createTestBillingIntegration(admin)
            const [billingContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

            const [billingProperty] = await createTestBillingProperty(admin, billingContext, {
                address: EXISTING_TEST_ADDRESS,
            })

            const [billingAccount] = await createTestBillingAccount(admin, billingContext, billingProperty, {
                unitName: EXISTING_TEST_UNIT_NAME,
                unitType: FLAT_UNIT_TYPE,
                number: EXISTING_TEST_ACCOUNT_NUMBER,
            })

            const payload = {
                context: { id: billingContext.id },
                receipts: [
                    {
                        importId: faker.random.alphaNumeric(24),

                        address: EXISTING_TEST_ADDRESS,

                        unitType: FLAT_UNIT_TYPE,
                        accountNumber: EXISTING_TEST_ACCOUNT_NUMBER,
                        unitName: EXISTING_TEST_UNIT_NAME,

                        toPay: '200.20',
                        period: '2022-05-01',

                        category: { id: '928c97ef-5289-4daa-b80e-4b9fed50c629' },

                        tin: faker.random.alphaNumeric(8),
                        iec: faker.random.alphaNumeric(8),
                        bic: faker.random.alphaNumeric(8),
                        bankAccount: faker.random.alphaNumeric(8),
                    },
                    {
                        importId: faker.random.alphaNumeric(24),

                        address: EXISTING_TEST_ADDRESS,

                        unitType: FLAT_UNIT_TYPE,
                        accountNumber: faker.random.alphaNumeric(8),
                        unitName: faker.random.alphaNumeric(8),

                        toPay: '200.20',
                        period: '2022-05-01',

                        category: { id: '928c97ef-5289-4daa-b80e-4b9fed50c629' },

                        tin: faker.random.alphaNumeric(8),
                        iec: faker.random.alphaNumeric(8),
                        bic: faker.random.alphaNumeric(8),
                        bankAccount: faker.random.alphaNumeric(8),
                    },
                    {
                        importId: faker.random.alphaNumeric(24),

                        address: faker.random.alphaNumeric(12),

                        unitType: FLAT_UNIT_TYPE,
                        accountNumber: faker.random.alphaNumeric(8),
                        unitName: faker.random.alphaNumeric(8),

                        toPay: '200.20',
                        period: '2022-05-01',

                        category: { id: '928c97ef-5289-4daa-b80e-4b9fed50c629' },

                        tin: faker.random.alphaNumeric(8),
                        iec: faker.random.alphaNumeric(8),
                        bic: faker.random.alphaNumeric(8),
                        bankAccount: faker.random.alphaNumeric(8),
                    },
                ],
            }

            const [ data ] = await registerBillingReceiptsByTestClient(admin, payload)
            const billingProperties = await BillingProperty.getAll(admin, { context: { id: billingContext.id } })
            const billingAccounts = await BillingAccount.getAll(admin, { context: { id: billingContext.id } })
            const billingReceipts = await BillingReceipts.getAll(admin, { context: { id: billingContext.id } })

            expect(billingProperties).toHaveLength(2)
            expect(billingAccounts).toHaveLength(3)
            expect(billingReceipts).toHaveLength(3)
            expect(data).toHaveLength(3)
        })

        test('Support can not execute mutation', async () => {
            const client = await makeClientWithSupportUser()
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            })
        })

        test('User can not execute mutation', async () => {
            const client = await makeLoggedInClient()
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            })
        })

        test('Anonymous can not execute mutation', async () => {
            const client = await makeClient()
            await expectToThrowAuthenticationError(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            }, 'result')
        })
    })
})
