/**
 * Generated by `createservice billing.RegisterBillingReceiptsService --type mutations`
 */

const faker = require('faker')

const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')

const { expectToThrowAuthenticationError, expectToThrowAccessDeniedErrorToResult } = require('@condo/domains/common/utils/testSchema')

const { registerBillingReceiptsByTestClient } = require('@condo/domains/billing/utils/testSchema')

const {
    makeServiceUserForIntegration,
    makeOrganizationIntegrationManager,
    makeContextWithOrganizationAndIntegrationAsAdmin,
    makeResidentClientWithOwnReceipt,
    createReceiptsReader,
    createTestRecipient,
    createTestBillingProperty,
    createTestBillingAccount,
    updateTestBillingAccount,
    createTestBillingIntegration,
    createTestBillingIntegrationOrganizationContext,
    createTestBillingRecipient,
    BillingReceipt,
    BillingAccount,
    BillingProperty,
    createTestBillingReceipt,
    createTestBillingReceipts,
    updateTestBillingReceipt,
    updateTestBillingReceipts,
    updateTestBillingIntegrationAccessRight,
} = require('@condo/domains/billing/utils/testSchema')

const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
    makeLoggedInClient,
} = require('@condo/domains/user/utils/testSchema')

const { makeClient, makeLoggedInAdminClient } = require('@core/keystone/test.utils')

describe('RegisterBillingReceiptsService', () => {
    let admin
    let support
    let anonymous
    let user

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
        user = await makeLoggedInClient()
    })

    describe('Execute', () => {
        test('Admin can execute mutation', async () => {
            const [organization] = await createTestOrganization(admin)
            const [integration] = await createTestBillingIntegration(admin)
            const [billingContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

            const payload = {
                context: { id: billingContext.id },
                receipts: [],
            }

            const [ data ] = await registerBillingReceiptsByTestClient(admin, payload)

            expect(data).toHaveLength(0)
        })

        test('Billing service account can execute mutation', async () => {
            const [organization] = await createTestOrganization(admin)
            const [integration] = await createTestBillingIntegration(admin)
            const [billingContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

            const integrationUser = await makeServiceUserForIntegration(integration)

            const payload = {
                context: { id: billingContext.id },
                receipts: [],
            }

            const [ data ] = await registerBillingReceiptsByTestClient(integrationUser, payload)

            expect(data).toHaveLength(0)
        })

        test('Billing service account without Access Right cant execute mutation', async () => {
            const [organization] = await createTestOrganization(admin)
            const [integration] = await createTestBillingIntegration(admin)
            const [billingContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

            const integrationUser = await makeServiceUserForIntegration(integration)
            await updateTestBillingIntegrationAccessRight(admin, integrationUser.accessRight.id, { deletedAt: 'true' })

            const payload = {
                context: { id: billingContext.id },
                receipts: [],
            }

            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerBillingReceiptsByTestClient(integrationUser, payload)
            })
        })

        test('Organization employee can not execute mutation', async () => {
            const [organization] = await createTestOrganization(admin)
            const [integration] = await createTestBillingIntegration(admin)
            const [billingContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)
            const { managerUserClient } = await makeOrganizationIntegrationManager(billingContext)
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerBillingReceiptsByTestClient(managerUserClient, { context: { id: '1234' }, receipts: [] })
            })
        })

        test('Support can not execute mutation', async () => {
            const client = await makeClientWithSupportUser()
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            })
        })

        test('User can not execute mutation', async () => {
            const client = await makeLoggedInClient()
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            })
        })

        test('Anonymous can not execute mutation', async () => {
            const client = await makeClient()
            await expectToThrowAuthenticationError(async () => {
                await registerBillingReceiptsByTestClient(client, { context: { id: '1234' }, receipts: [] })
            }, 'result')
        })
    })

    describe('Business Logic', () => {
        test('Simple case works', async () => {
            const EXISTING_TEST_ADDRESS = 'TEST'
            const EXISTING_TEST_UNIT_NAME = '0'
            const EXISTING_TEST_ACCOUNT_NUMBER = '0'

            const [organization] = await createTestOrganization(admin)
            const [integration] = await createTestBillingIntegration(admin)
            const [billingContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

            const [billingProperty] = await createTestBillingProperty(admin, billingContext, {
                address: EXISTING_TEST_ADDRESS,
            })

            const [billingAccount] = await createTestBillingAccount(admin, billingContext, billingProperty, {
                unitName: EXISTING_TEST_UNIT_NAME,
                unitType: FLAT_UNIT_TYPE,
                number: EXISTING_TEST_ACCOUNT_NUMBER,
            })

            const payload = {
                context: { id: billingContext.id },
                receipts: [
                    {
                        importId: faker.random.alphaNumeric(24),

                        address: EXISTING_TEST_ADDRESS,

                        unitType: FLAT_UNIT_TYPE,
                        accountNumber: EXISTING_TEST_ACCOUNT_NUMBER,
                        unitName: EXISTING_TEST_UNIT_NAME,

                        toPay: '200.20',
                        period: '2022-05-01',

                        category: { id: '928c97ef-5289-4daa-b80e-4b9fed50c629' },

                        tin: faker.random.alphaNumeric(8),
                        iec: faker.random.alphaNumeric(8),
                        bic: faker.random.alphaNumeric(8),
                        bankAccount: faker.random.alphaNumeric(8),
                    },
                    {
                        importId: faker.random.alphaNumeric(24),

                        address: EXISTING_TEST_ADDRESS,

                        unitType: FLAT_UNIT_TYPE,
                        accountNumber: faker.random.alphaNumeric(8),
                        unitName: faker.random.alphaNumeric(8),

                        toPay: '200.20',
                        period: '2022-05-01',

                        category: { id: '928c97ef-5289-4daa-b80e-4b9fed50c629' },

                        tin: faker.random.alphaNumeric(8),
                        iec: faker.random.alphaNumeric(8),
                        bic: faker.random.alphaNumeric(8),
                        bankAccount: faker.random.alphaNumeric(8),
                    },
                    {
                        importId: faker.random.alphaNumeric(24),

                        address: faker.random.alphaNumeric(12),

                        unitType: FLAT_UNIT_TYPE,
                        accountNumber: faker.random.alphaNumeric(8),
                        unitName: faker.random.alphaNumeric(8),

                        toPay: '200.20',
                        period: '2022-05-01',

                        category: { id: '928c97ef-5289-4daa-b80e-4b9fed50c629' },

                        tin: faker.random.alphaNumeric(8),
                        iec: faker.random.alphaNumeric(8),
                        bic: faker.random.alphaNumeric(8),
                        bankAccount: faker.random.alphaNumeric(8),
                    },
                ],
            }

            const [ data ] = await registerBillingReceiptsByTestClient(admin, payload)
            const billingProperties = await BillingProperty.getAll(admin, { context: { id: billingContext.id } })
            const billingAccounts = await BillingAccount.getAll(admin, { context: { id: billingContext.id } })
            const billingReceipts = await BillingReceipt.getAll(admin, { context: { id: billingContext.id } })

            expect(billingProperties).toHaveLength(2)
            expect(billingAccounts).toHaveLength(3)
            expect(billingReceipts).toHaveLength(3)
            expect(data).toHaveLength(3)
        })

        test('BillingProperties are handled correctly', async () => {
            /**
             * Existing properties = {p1, p3}
             * Properties from args = {p1, p2}
             * Result: {p1, p2, p3}
             */

            const EXISTING_TEST_ADDRESS_P1 = 'TEST'
            const EXISTING_TEST_ADDRESS_P2 = 'TEST_P2'

            const EXISTING_TEST_UNIT_NAME = '0'
            const EXISTING_TEST_ACCOUNT_NUMBER = '0'

            const [organization] = await createTestOrganization(admin)
            const [integration] = await createTestBillingIntegration(admin)
            const [billingContext] = await createTestBillingIntegrationOrganizationContext(admin, organization, integration)

            const [billingProperty] = await createTestBillingProperty(admin, billingContext, {
                address: EXISTING_TEST_ADDRESS,
            })

            const [billingAccount] = await createTestBillingAccount(admin, billingContext, billingProperty, {
                unitName: EXISTING_TEST_UNIT_NAME,
                unitType: FLAT_UNIT_TYPE,
                number: EXISTING_TEST_ACCOUNT_NUMBER,
            })

            const payload = {
                context: { id: billingContext.id },
                receipts: [
                    {
                        importId: faker.random.alphaNumeric(24),

                        address: EXISTING_TEST_ADDRESS,

                        unitType: FLAT_UNIT_TYPE,
                        accountNumber: EXISTING_TEST_ACCOUNT_NUMBER,
                        unitName: EXISTING_TEST_UNIT_NAME,

                        toPay: '200.20',
                        period: '2022-05-01',

                        category: { id: '928c97ef-5289-4daa-b80e-4b9fed50c629' },

                        tin: faker.random.alphaNumeric(8),
                        iec: faker.random.alphaNumeric(8),
                        bic: faker.random.alphaNumeric(8),
                        bankAccount: faker.random.alphaNumeric(8),
                    },
                    {
                        importId: faker.random.alphaNumeric(24),

                        address: EXISTING_TEST_ADDRESS,

                        unitType: FLAT_UNIT_TYPE,
                        accountNumber: faker.random.alphaNumeric(8),
                        unitName: faker.random.alphaNumeric(8),

                        toPay: '200.20',
                        period: '2022-05-01',

                        category: { id: '928c97ef-5289-4daa-b80e-4b9fed50c629' },

                        tin: faker.random.alphaNumeric(8),
                        iec: faker.random.alphaNumeric(8),
                        bic: faker.random.alphaNumeric(8),
                        bankAccount: faker.random.alphaNumeric(8),
                    },
                    {
                        importId: faker.random.alphaNumeric(24),

                        address: faker.random.alphaNumeric(12),

                        unitType: FLAT_UNIT_TYPE,
                        accountNumber: faker.random.alphaNumeric(8),
                        unitName: faker.random.alphaNumeric(8),

                        toPay: '200.20',
                        period: '2022-05-01',

                        category: { id: '928c97ef-5289-4daa-b80e-4b9fed50c629' },

                        tin: faker.random.alphaNumeric(8),
                        iec: faker.random.alphaNumeric(8),
                        bic: faker.random.alphaNumeric(8),
                        bankAccount: faker.random.alphaNumeric(8),
                    },
                ],
            }

            const [ data ] = await registerBillingReceiptsByTestClient(admin, payload)
            const billingProperties = await BillingProperty.getAll(admin, { context: { id: billingContext.id } })
            const billingAccounts = await BillingAccount.getAll(admin, { context: { id: billingContext.id } })
            const billingReceipts = await BillingReceipt.getAll(admin, { context: { id: billingContext.id } })

            expect(billingProperties).toHaveLength(2)
            expect(billingAccounts).toHaveLength(3)
            expect(billingReceipts).toHaveLength(3)
            expect(data).toHaveLength(3)
        })
    })

    describe('Validations', () => {
        test.skip('Mutation checks wrong context-id', async () => {

        })

        test.skip('Mutation checks wrong category-id', async () => {

        })

        test.skip('Mutation checks wrong period format', async () => {

        })

        test.skip('Mutation checks wrong address', async () => {

        })
    })
})