/**
 * Generated by `createschema billing.BillingAccountMeter 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; importId?:Text; property:Relationship:BillingProperty:CASCADE; account:Relationship:BillingAccount:CASCADE; resource:Relationship:BillingMeterResource:PROTECT; raw:Json; meta:Json'`
 */

const { Relationship, Text } = require('@keystonejs/fields')

const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/billing/access/BillingAccountMeter')
const { UNEQUAL_CONTEXT_ERROR } = require('@condo/domains/common/constants/errors')
const { IMPORT_ID_FIELD } = require('@condo/domains/common/schema/fields')

const { RAW_DATA_FIELD } = require('./fields/common')
const { INTEGRATION_CONTEXT_FIELD, BILLING_PROPERTY_FIELD, BILLING_ACCOUNT_FIELD } = require('./fields/relations')


const BillingAccountMeter = new GQLListSchema('BillingAccountMeter', {
    schemaDoc: 'All `personal meter` (non `whole-building meter`) objects from `billing data source`. In case of the meter can measure several resources we create a separate object for each resource',
    fields: {
        context: INTEGRATION_CONTEXT_FIELD,

        importId: IMPORT_ID_FIELD,

        raw: RAW_DATA_FIELD,

        property: BILLING_PROPERTY_FIELD, // denormalize
        account: BILLING_ACCOUNT_FIELD,

        number: {
            schemaDoc: 'Number of resource meter, such as "А03 9908"',
            type: Text,
        },

        resource: {
            schemaDoc: 'Meter resource types',
            type: Relationship,
            ref: 'BillingMeterResource',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.PROTECT' },
        },

        meta: {
            schemaDoc: 'Structured metadata obtained from the `billing data source`. Some of this data is required for use in the `receipt template`. ' +
                'Examples of data keys: `sealing date`, `install date`, `verification date`, `serial number`, `units of measurement`',
            // TODO(pahaz): research keys!
            type: Json,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBillingAccountMeters,
        create: access.canManageBillingAccountMeters,
        update: access.canManageBillingAccountMeters,
        delete: false,
        auth: true,
    },
    hooks: {
        validateInput: async ({ resolvedData, addValidationError, existingItem }) => {
            const newItem = { ...existingItem, ...resolvedData }
            const { context: contextId, property: propertyId, account: accountId } = newItem

            const account = await getById('BillingAccount', accountId)
            const { context: accountContextId } = account
            const property = await getById('BillingProperty', propertyId)
            const { context: propertyContextId } = property
            if (contextId !== accountContextId) {
                return addValidationError(`${UNEQUAL_CONTEXT_ERROR}:account:context] Context is not equal to account.context`)
            }
            if (contextId !== propertyContextId) {
                return addValidationError(`${UNEQUAL_CONTEXT_ERROR}:property:context] Context is not equal to property.context`)
            }
        },
    },
})

module.exports = {
    BillingAccountMeter,
}
