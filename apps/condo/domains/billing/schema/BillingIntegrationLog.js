/**
 * Generated by `createschema billing.BillingIntegrationLog 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; type:Text; message:Text; meta:Json'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/billing/access/BillingIntegrationLog')


const BillingIntegrationLog = new GQLListSchema('BillingIntegrationLog', {
    // TODO(codegen): write doc for the BillingIntegrationLog domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        context: {
            // TODO(codegen): write doc for BillingIntegrationLog.context field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BillingIntegrationOrganizationContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        type: {
            // TODO(codegen): write doc for BillingIntegrationLog.type field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        message: {
            // TODO(codegen): write doc for BillingIntegrationLog.message field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        meta: {
            // TODO(codegen): write doc for BillingIntegrationLog.meta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: true,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadBillingIntegrationLogs,
        create: access.canManageBillingIntegrationLogs,
        update: access.canManageBillingIntegrationLogs,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BillingIntegrationLog,
}
