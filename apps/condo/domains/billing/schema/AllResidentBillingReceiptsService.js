/**
 * Generated by `createservice billing.BillingReceiptsService --type queries`
 */

const Big = require('big.js')
const dayjs = require('dayjs')
const { pick, get, isNil } = require('lodash')

const { generateQuerySortBy } = require('@open-condo/codegen/generate.gql')
const { generateQueryWhereInput } = require('@open-condo/codegen/generate.gql')
const { GQLCustomSchema, find, getById } = require('@open-condo/keystone/schema')

const { PAYMENT_DONE_STATUS, PAYMENT_WITHDRAWN_STATUS } = require('@condo/domains/acquiring/constants/payment')
const { getAcquiringIntegrationContextFormula, FeeDistribution } = require('@condo/domains/acquiring/utils/serverSchema/feeDistribution')
const access = require('@condo/domains/billing/access/AllResidentBillingReceipts')
const { BILLING_RECEIPT_FILE_FOLDER_NAME } = require('@condo/domains/billing/constants/constants')
const { BillingReceiptAdmin, getPaymentsSum } = require('@condo/domains/billing/utils/serverSchema')
const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { Contact } = require('@condo/domains/contact/utils/serverSchema')

const {
    BILLING_RECEIPT_RECIPIENT_FIELD_NAME,
    BILLING_RECEIPT_TO_PAY_DETAILS_FIELD_NAME,
    BILLING_RECEIPT_SERVICES_FIELD,
} = require('../constants/constants')

const Adapter = new FileAdapter(BILLING_RECEIPT_FILE_FOLDER_NAME)

const ALL_RESIDENT_BILLING_RECEIPTS_FIELDS = {
    id: 'ID',
    period: 'String',
    toPay: 'String',
    printableNumber: 'String',
    serviceConsumer: 'ServiceConsumer',
}

const getFile = (receipt, contacts) => {
    if (isNil(receipt.file)) {
        return receipt.file
    }
    const accountUnitName = get(receipt, ['account', 'unitName'])
    const accountUnitType = get(receipt, ['account', 'unitType'])
    const propertyAddress = get(receipt, ['property', 'address'])

    // let's search for a contact
    // if any exists = user allowed to see sensitive data
    const propertyContacts = contacts.filter(contact => contact.unitName === accountUnitName
        && contact.unitType === accountUnitType
        && contact.property.address === propertyAddress)
    const file = propertyContacts.length > 0
        ? receipt.file.sensitiveDataFile
        : receipt.file.publicDataFile

    // case when file url is omit in BillingReceiptFile
    if (isNil(file)) {
        return null
    }

    const publicUrl = Adapter.publicUrl({ filename: file.filename })

    return {
        file: { ...file, publicUrl },
        controlSum: receipt.file.controlSum,
    }
}

const AllResidentBillingReceiptsService = new GQLCustomSchema('AllResidentBillingReceiptsService', {
    types: [
        {
            access: true,
            type: generateQueryWhereInput('ResidentBillingReceipt', ALL_RESIDENT_BILLING_RECEIPTS_FIELDS),
        },
        {
            access: true,
            type: generateQuerySortBy('ResidentBillingReceipt', Object.keys(ALL_RESIDENT_BILLING_RECEIPTS_FIELDS)),
        },
        {
            access: true,
            type: 'type ResidentBillingReceiptFile { file: File controlSum: String}',
        },
        {
            access: true,
            type: `type ResidentBillingReceiptOutput { dv: String!, recipient: ${BILLING_RECEIPT_RECIPIENT_FIELD_NAME}!, id: ID!, period: String!, toPay: String!, paid: String!, explicitFee: String!, printableNumber: String, toPayDetails: ${BILLING_RECEIPT_TO_PAY_DETAILS_FIELD_NAME}, services: ${BILLING_RECEIPT_SERVICES_FIELD}, serviceConsumer: ServiceConsumer! currencyCode: String! category: BillingCategory! isPayable: Boolean! file: ResidentBillingReceiptFile }`,
        },
    ],

    queries: [
        {
            access: access.canGetAllResidentBillingReceipts,
            schema: 'allResidentBillingReceipts (where: ResidentBillingReceiptWhereInput, first: Int, skip: Int, sortBy: [SortResidentBillingReceiptsBy!]): [ResidentBillingReceiptOutput]',
            resolver: async (parent, args, context = {}) => {
                const { where, first, skip, sortBy } = args

                const serviceConsumerWhere = get(where, 'serviceConsumer', {})
                const receiptsWhere = pick(where, ['id', 'period', 'toPay', 'printableNumber'])

                const userId = get(context, ['authedItem', 'id'])

                // We can't really use getting service consumer with all access here, since we do not show billingAccount to our user
                const GET_ONLY_OWN_SERVICE_CONSUMER_WHERE = { user: { id: userId } }
                if (!serviceConsumerWhere.resident) {
                    serviceConsumerWhere.resident = GET_ONLY_OWN_SERVICE_CONSUMER_WHERE
                    serviceConsumerWhere.deletedAt = null
                } else {
                    serviceConsumerWhere.resident.user = GET_ONLY_OWN_SERVICE_CONSUMER_WHERE.user
                    serviceConsumerWhere.deletedAt = null
                }

                const serviceConsumers = (await find('ServiceConsumer', serviceConsumerWhere))

                const serviceConsumersWithBillingAccount = serviceConsumers.filter(consumer => (
                    get(consumer, 'billingIntegrationContext')
                ))

                if (!Array.isArray(serviceConsumersWithBillingAccount) || !serviceConsumersWithBillingAccount.length) {
                    return []
                }

                const processedReceipts = []
                const receiptsQuery = []
                for (const serviceConsumer of serviceConsumersWithBillingAccount) {
                    const receiptsQueryForConsumer = {
                        ...receiptsWhere,
                        account: {
                            number: serviceConsumer.accountNumber,
                            deletedAt: null,
                        },
                        context: {
                            organization: { id: serviceConsumer.organization },
                            deletedAt: null,
                        },
                        deletedAt: null,
                    }
                    receiptsQuery.push({ 'AND': [receiptsQueryForConsumer] })
                }

                const joinedReceiptsQuery = {
                    'OR': receiptsQuery,
                }

                const receiptsForConsumer = await BillingReceiptAdmin.getAll(
                    context,
                    joinedReceiptsQuery,
                    {
                        sortBy, first, skip,
                    }
                )

                // cache verified contacts for authed user
                // in order to determinate if user can see
                // a sensitive version of primary file
                const contacts = await Contact.getAll(context, {
                    phone: context.authedItem.phone,
                    isVerified: true,
                    deletedAt: null,
                })

                receiptsForConsumer.forEach(receipt => {
                    const file = getFile(receipt, contacts)
                    processedReceipts.push({
                        id: receipt.id,
                        dv: receipt.dv,
                        category: receipt.category,
                        recipient: receipt.recipient,
                        receiver: receipt.receiver,
                        account: receipt.account,
                        period: receipt.period,
                        toPay: receipt.toPay,
                        toPayDetails: receipt.toPayDetails,
                        services: receipt.services,
                        printableNumber: receipt.printableNumber,
                        serviceConsumer: serviceConsumersWithBillingAccount.find(({ accountNumber, organization }) =>
                            get(receipt, ['account', 'number']) === accountNumber &&
                            get(receipt, ['context', 'organization', 'id']) === organization ),
                        currencyCode: get(receipt, ['context', 'integration', 'currencyCode'], null),
                        file,
                        isPayable: receipt.isPayable,
                    })
                })

                //
                // Set receipt.paid field and calculate fees
                //
                const receiptsWithPayments = []
                for (const receipt of processedReceipts) {
                    const organizationId = get(receipt.serviceConsumer, ['organization'])
                    const accountNumber = get(receipt.serviceConsumer, ['accountNumber'])
                    const billingCategory = get(receipt, ['category']) || {}
                    const paid = await getPaymentsSum(
                        context,
                        organizationId,
                        accountNumber,
                        get(receipt, 'period', null),
                        get(receipt, ['recipient', 'bic'], null),
                        get(receipt, ['recipient', 'bankAccount'], null)
                    )
                    const acquiringContextId = get(receipt, ['serviceConsumer', 'acquiringIntegrationContext'], null)
                    const toPay = get(receipt, ['toPay'], 0)
                    let fee = '0'
                    if (acquiringContextId) {
                        const formula = await getAcquiringIntegrationContextFormula(context, acquiringContextId)
                        const feeCalculator = new FeeDistribution(formula, billingCategory.id)
                        const { explicitFee } = feeCalculator.calculate(Big(toPay).minus(Big(paid)).toFixed(2))
                        fee = String(explicitFee)
                    }
                    receiptsWithPayments.push(({
                        ...receipt,
                        paid,
                        explicitFee: fee,
                    }))
                }
                return receiptsWithPayments
            },
        },
    ],
})

module.exports = {
    AllResidentBillingReceiptsService,
}
