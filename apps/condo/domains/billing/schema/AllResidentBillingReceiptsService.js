/**
 * Generated by `createservice billing.BillingReceiptsService --type queries`
 */

const { ServiceConsumer } = require('@condo/domains/resident/utils/serverSchema')
const { BillingReceipt } = require('@condo/domains/billing/utils/serverSchema')
const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('../access/AllResidentBillingReceipts')
const { generateQuerySortBy } = require('@condo/domains/common/utils/codegeneration/generate.gql')
const { generateQueryWhereInput } = require('@condo/domains/common/utils/codegeneration/generate.gql')


const fieldsObj = {
    id: 'ID',
    period: 'String',
    toPay: 'String',
    printableNumber: 'String',
}


const GetAllResidentBillingReceiptsService = new GQLCustomSchema('GetAllResidentBillingReceiptsService', {
    types: [
        {
            access: true,
            type: generateQueryWhereInput('ResidentBillingReceipt', fieldsObj),
        },
        {
            access: true,
            type: generateQuerySortBy('ResidentBillingReceipt', Object.keys(fieldsObj)),
        },
        {
            access: true,
            type: 'type allResidentBillingReceiptsOutput { dv: String!, recipient: JSON!, id: ID!, period: String!, toPay: String!, printableNumber: String, toPayDetails: JSON, services: JSON }',
        },
    ],
    
    queries: [
        {
            access: access.canGetAllResidentBillingReceipts,
            schema: 'allResidentBillingReceipts (where: BillingReceiptWhereInput, first: Int, skip: Int, sortBy: [SortResidentBillingReceiptsBy!]): [allResidentBillingReceiptsOutput]',
            resolver: async (parent, args, context, info, extra = {}) => {

                const { data: { serviceConsumerId } } = args

                const [serviceConsumer] = await ServiceConsumer.getAll(context, { id: serviceConsumerId })
                const billingReceipts = await BillingReceipt.getAll(context, { account: { id: serviceConsumer.billingAccount.id } })

                return billingReceipts.map(receipt => {
                    return {
                        id: receipt.id,
                        dv: receipt.dv,
                        recipient: receipt.recipient,
                        period: receipt.period,
                        toPay: receipt.toPay,
                        toPayDetails: receipt.toPayDetails,
                        services: receipt.services,
                        printableNumber: receipt.printableNumber,
                    }
                })
            },
        },
    ],
    
})

module.exports = {
    GetAllResidentBillingReceiptsService,
}
