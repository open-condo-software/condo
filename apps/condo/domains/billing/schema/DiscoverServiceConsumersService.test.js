/**
 * Generated by `createservice billing.DiscoverServiceConsumersService --type mutations`
 */
const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
} = require('@open-condo/keystone/test.utils')

const { discoverConsumersServiceByTestClient } = require('@condo/domains/billing/utils/testSchema')
const {
    makeContextWithOrganizationAndIntegrationAsAdmin,
    createTestBillingProperty,
    createTestBillingAccount,
} = require('@condo/domains/billing/utils/testSchema')
const { makeClientWithProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestResident, updateTestResident } = require('@condo/domains/resident/utils/testSchema')
const { makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
 
describe('DiscoverServiceConsumersService', () => {
    let admin
    let support
    let anonymous
    let user
    let user2

    const randomPayload = {
        address: faker.random.alphaNumeric(32),
        unitName: faker.random.alphaNumeric(10),
        unitType: faker.random.alphaNumeric(10),
    }

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
        user = await makeClientWithProperty()
        user2 = await makeClientWithProperty()
    })
    describe('admin can:', () => {
        test('discover one service consumer (case without accountNumber or resident passed)', async () => {
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin(
                {}, {}, { status: 'Finished' }
            )

            const [billingProperty] = await createTestBillingProperty(admin, context, { address: user.property.address })
            const [resident] = await createTestResident(admin, user.user, user.property,
                { address: billingProperty.address }
            )
            const [billingAccount] = await createTestBillingAccount(admin, context, billingProperty, 
                { unitName: resident.unitName, unitType: resident.unitType }
            )

            const payload = {
                address: resident.address,
                unitName: resident.unitName,
                unitType: resident.unitType,
            }
            
            const [serviceConsumers] = await discoverConsumersServiceByTestClient(admin, payload)
            expect(serviceConsumers).toHaveLength(1)
            expect(serviceConsumers[0].resident.id).toEqual(resident.id)
            expect(serviceConsumers[0].organization.id).toEqual(user.organization.id)
            expect(serviceConsumers[0].accountNumber).toEqual(billingAccount.number)
        })

        test('discover multiple service consumers (case without accountNumber or resident passed)', async () => {
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin(
                {}, {}, { status: 'Finished' }
            )

            const [billingProperty] = await createTestBillingProperty(admin, context, { address: user.property.address })
            const [resident1] = await createTestResident(admin, user.user, user.property,
                { address: billingProperty.address }
            )
            const [resident2] = await createTestResident(admin, user2.user, user.property,
                { address: billingProperty.address, unitName: resident1.unitName, unitType: resident1.unitType }
            )
            await updateTestResident(admin, resident2.id, { address: resident1.address })
            const [billingAccount1] = await createTestBillingAccount(admin, context, billingProperty,
                { unitName: resident1.unitName, unitType: resident1.unitType }
            )

            const [billingAccount2] = await createTestBillingAccount(admin, context, billingProperty,
                { unitName: resident1.unitName, unitType: resident1.unitType }
            )

            const payload = {
                address: resident1.address,
                unitName: resident1.unitName,
                unitType: resident1.unitType,
            }

            const [serviceConsumers] = await discoverConsumersServiceByTestClient(admin, payload)
            expect(serviceConsumers).toHaveLength(4)
            expect(serviceConsumers[0].resident.id).toEqual(resident1.id)
            expect(serviceConsumers[1].resident.id).toEqual(resident1.id)
            expect(serviceConsumers[2].resident.id).toEqual(resident2.id)
            expect(serviceConsumers[3].resident.id).toEqual(resident2.id)
            expect(serviceConsumers[0].organization.id).toEqual(user.organization.id)
            expect(serviceConsumers[0].accountNumber).toEqual(billingAccount1.number)
            expect(serviceConsumers[1].accountNumber).toEqual(billingAccount2.number)
        })

        test('discover one service consumer for specific resident', async () => {
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin(
                {}, {}, { status: 'Finished' }
            )

            const [billingProperty] = await createTestBillingProperty(admin, context, { address: user.property.address })
            const [resident] = await createTestResident(admin, user.user, user.property,
                { address: billingProperty.address }
            )
            const [billingAccount] = await createTestBillingAccount(admin, context, billingProperty,
                { unitName: resident.unitName, unitType: resident.unitType }
            )

            const payload = {
                address: resident.address,
                unitName: resident.unitName,
                unitType: resident.unitType,
                residentId: resident.id,
            }

            const [serviceConsumers] = await discoverConsumersServiceByTestClient(admin, payload)
            expect(serviceConsumers).toHaveLength(1)
            expect(serviceConsumers[0].resident.id).toEqual(resident.id)
            expect(serviceConsumers[0].organization.id).toEqual(user.organization.id)
            expect(serviceConsumers[0].accountNumber).toEqual(billingAccount.number)
        })

        test('discover multiple service consumers for specific resident', async () => {
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin(
                {}, {}, { status: 'Finished' }
            )

            const [billingProperty] = await createTestBillingProperty(admin, context, { address: user.property.address })
            const [resident] = await createTestResident(admin, user.user, user.property,
                { address: billingProperty.address }
            )
            const [billingAccount1] = await createTestBillingAccount(admin, context, billingProperty,
                { unitName: resident.unitName, unitType: resident.unitType }
            )

            const [billingAccount2] = await createTestBillingAccount(admin, context, billingProperty,
                { unitName: resident.unitName, unitType: resident.unitType }
            )

            const payload = {
                address: resident.address,
                unitName: resident.unitName,
                unitType: resident.unitType,
                residentId: resident.id,
            }

            const [serviceConsumers] = await discoverConsumersServiceByTestClient(admin, payload)
            expect(serviceConsumers).toHaveLength(2)
            expect(serviceConsumers[0].resident.id).toEqual(resident.id)
            expect(serviceConsumers[0].organization.id).toEqual(user.organization.id)
            expect(serviceConsumers[0].accountNumber).toEqual(billingAccount1.number)
            expect(serviceConsumers[1].accountNumber).toEqual(billingAccount2.number)
        })

        test('discover one service consumer for specific accountNumber', async () => {
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin(
                {}, {}, { status: 'Finished' }
            )

            const [billingProperty] = await createTestBillingProperty(admin, context, { address: user.property.address })
            const [resident] = await createTestResident(admin, user.user, user.property,
                { address: billingProperty.address }
            )
            const [billingAccount] = await createTestBillingAccount(admin, context, billingProperty,
                { unitName: resident.unitName, unitType: resident.unitType }
            )
            await createTestBillingAccount(admin, context, billingProperty,
                { unitName: resident.unitName, unitType: resident.unitType }
            )

            const payload = {
                address: resident.address,
                unitName: resident.unitName,
                unitType: resident.unitType,
                billingAccountId: billingAccount.id,
            }

            const [serviceConsumers] = await discoverConsumersServiceByTestClient(admin, payload)
            expect(serviceConsumers).toHaveLength(1)
            expect(serviceConsumers[0].resident.id).toEqual(resident.id)
            expect(serviceConsumers[0].organization.id).toEqual(user.organization.id)
            expect(serviceConsumers[0].accountNumber).toEqual(billingAccount.number)
        })

        test('discover multiple service consumers for specific accountNumber', async () => {
            const { context } = await makeContextWithOrganizationAndIntegrationAsAdmin(
                {}, {}, { status: 'Finished' }
            )

            const [billingProperty] = await createTestBillingProperty(admin, context, { address: user.property.address })
            const [resident] = await createTestResident(admin, user.user, user.property,
                { address: billingProperty.address }
            )
            const [resident2] = await createTestResident(admin, user2.user, user.property,
                { address: billingProperty.address, unitName: resident.unitName, unitType: resident.unitType  }
            )
            const [billingAccount] = await createTestBillingAccount(admin, context, billingProperty,
                { unitName: resident.unitName, unitType: resident.unitType }
            )

            const payload = {
                address: resident.address,
                unitName: resident.unitName,
                unitType: resident.unitType,
                billingAccountId: billingAccount.id,
            }

            const [serviceConsumers] = await discoverConsumersServiceByTestClient(admin, payload)
            expect(serviceConsumers).toHaveLength(2)
            expect(serviceConsumers[0].resident.id).toEqual(resident.id)
            expect(serviceConsumers[1].resident.id).toEqual(resident2.id)
            expect(serviceConsumers[0].organization.id).toEqual(user.organization.id)
            expect(serviceConsumers[0].accountNumber).toEqual(billingAccount.number)
        })

        test('discover no service consumers if there are none', async () => {
            const [serviceConsumers] = await discoverConsumersServiceByTestClient(admin, randomPayload)
            expect(serviceConsumers).toHaveLength(0)
        })
    })

    test('user cannot discover service consumers', async () => {
        await expectToThrowAccessDeniedErrorToResult(async () => {
            await discoverConsumersServiceByTestClient(user, randomPayload)
        })
    })

    test('support cannot discover service consumers', async () => {
        await expectToThrowAccessDeniedErrorToResult(async () => {
            await discoverConsumersServiceByTestClient(support, randomPayload)
        })
    })

    test('anonymous cannot discover service consumers', async () => {
        await expectToThrowAuthenticationErrorToResult(async () => {
            await discoverConsumersServiceByTestClient(anonymous, randomPayload)
        })
    })
})