/**
 * Generated by `createschema billing.BillingReceipt 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; importId?:Text; property:Relationship:BillingProperty:CASCADE; account:Relationship:BillingAccount:CASCADE; period:CalendarDay; raw:Json; toPay:Text; services:Json; meta:Json'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { BillingReceipt, createTestBillingReceipt, updateTestBillingReceipt } = require('@condo/domains/billing/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects } = require('../../common/utils/testSchema')

describe('BillingReceipt', () => {
    test.skip('user: create BillingReceipt', async () => {
        const client = await makeClient()  // TODO(codegen): use truly useful client!

        const [obj, attrs] = await createTestBillingReceipt(client)  // TODO(codegen): write 'user: create BillingReceipt' test
        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
    })

    test.skip('anonymous: create BillingReceipt', async () => {
        const client = await makeClient()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingReceipt(client)  // TODO(codegen): check the 'anonymous: create BillingReceipt' test!
        })
    })

    test.skip('user: read BillingReceipt', async () => {
        const admin = await makeLoggedInAdminClient()
        const [obj, attrs] = await createTestBillingReceipt(admin)  // TODO(codegen): check create function!

        const client = await makeClient()  // TODO(codegen): use truly useful client!
        const objs = await BillingReceipt.getAll(client)

        // TODO(codegen): check 'user: read BillingReceipt' test!
        expect(objs).toHaveLength(1)
        expect(objs[0].id).toMatch(obj.id)
        expect(objs[0].dv).toEqual(1)
        expect(objs[0].sender).toEqual(attrs.sender)
        expect(objs[0].v).toEqual(1)
        expect(objs[0].newId).toEqual(null)
        expect(objs[0].deletedAt).toEqual(null)
        expect(objs[0].createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objs[0].updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objs[0].createdAt).toMatch(obj.createdAt)
        expect(objs[0].updatedAt).toMatch(obj.updatedAt)
    })

    test.skip('anonymous: read BillingReceipt', async () => {
        const client = await makeClient()

        await expectToThrowAccessDeniedErrorToObjects(async () => {
            await BillingReceipt.getAll(client)
        })
    })

    test.skip('user: update BillingReceipt', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingReceipt(admin)  // TODO(codegen): check create function!

        const client = await makeClient()  // TODO(codegen): use truly useful client!
        const payload = {}  // TODO(codegen): change the 'user: update BillingReceipt' payload
        const [objUpdated, attrs] = await updateTestBillingReceipt(client, objCreated.id, payload)

        // TODO(codegen): white checks for 'user: update BillingReceipt' test
        expect(objUpdated.id).toEqual(objCreated.id)
        expect(objUpdated.dv).toEqual(1)
        expect(objUpdated.sender).toEqual(attrs.sender)
        expect(objUpdated.v).toEqual(2)
        expect(objUpdated.newId).toEqual(null)
        expect(objUpdated.deletedAt).toEqual(null)
        expect(objUpdated.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
        expect(objUpdated.createdAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).not.toEqual(objUpdated.createdAt)
    })

    test.skip('anonymous: update BillingReceipt', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingReceipt(admin)  // TODO(codegen): check create function!

        const client = await makeClient()
        const payload = {}  // TODO(codegen): change the 'anonymous: update BillingReceipt' payload
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingReceipt(client, objCreated.id, payload)
        })
    })

    test.skip('user: delete BillingReceipt', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingReceipt(admin)  // TODO(codegen): check create function!

        const client = await makeClient()  // TODO(codegen): use truly useful client!
        await expectToThrowAccessDeniedErrorToObj(async () => {
            // TODO(codegen): check 'user: delete BillingReceipt' test!
            await BillingReceipt.delete(client, objCreated.id)
        })
    })

    test.skip('anonymous: delete BillingReceipt', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingReceipt(admin)  // TODO(codegen): check create function!

        const client = await makeClient()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            // TODO(codegen): check 'anonymous: delete BillingReceipt' test!
            await BillingReceipt.delete(client, objCreated.id)
        })
    })
})
