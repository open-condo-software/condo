/**
 * Generated by `createservice billing.DiscoverServiceConsumersService --type mutations`
 */

const { get } = require('lodash')

const { GQLCustomSchema, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/billing/access/DiscoverServiceConsumersService')
const { BillingAccount } = require('@condo/domains/billing/utils/serverSchema')
const { Resident, ServiceConsumer } = require('@condo/domains/resident/utils/serverSchema')

const DiscoverServiceConsumersService = new GQLCustomSchema('DiscoverServiceConsumersService', {
    types: [
        {
            access: true,
            type: 'input DiscoverConsumersServiceInput { dv: Int!, sender: SenderFieldInput!, address: String!, unitName: String!, unitType: String!, billingAccountId: ID, residentId: ID }',
        },
    ],
    
    mutations: [
        {
            access: access.canDiscoverConsumersService,
            schema: 'discoverConsumersService(data: DiscoverConsumersServiceInput!): [ServiceConsumer]',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { address, unitName, unitType, billingAccountId, residentId } = data

                const residents = residentId ? await Resident.getAll(context, { id: residentId, deletedAt: null }) : await Resident.getAll(context, {
                    address: address,
                    unitName: unitName,
                    unitType: unitType,
                    deletedAt: null,
                })

                const billingAccounts = billingAccountId ? await BillingAccount.getAll(context, { id: billingAccountId, deletedAt: null })
                    : await BillingAccount.getAll(context, {
                        context: { status: 'Finished', deletedAt: null },
                        property: { address: address, deletedAt: null  },
                        unitName: unitName,
                        unitType: unitType,
                        deletedAt: null,
                    })

                const createdServiceConsumers = []

                const getPayload = (accountNumber, resident) => ({
                    dv: 1,
                    sender: { dv: 1, fingerprint: 'discoverServiceConsumersMutation' },
                    resident: { connect: { id: resident.id } },
                    organization: { connect: { id: get(resident, ['organization', 'id']) } },
                    accountNumber: accountNumber,
                })

                for (const resident of residents) {

                    for (const billingAccount of billingAccounts) {

                        const createdServiceConsumer = await ServiceConsumer.create(context, getPayload(billingAccount.number, resident))
                        createdServiceConsumers.push(await getById('ServiceConsumer', createdServiceConsumer.id))
                    }
                }

                return createdServiceConsumers
            },
        },
    ],
})

module.exports = {
    DiscoverServiceConsumersService,
}
