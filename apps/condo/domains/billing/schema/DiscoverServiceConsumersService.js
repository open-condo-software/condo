/**
 * Generated by `createservice billing.DiscoverServiceConsumersService --type mutations`
 */

const { get, _ } = require('lodash')

const { getLogger } = require('@open-condo/keystone/logging')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/billing/access/DiscoverServiceConsumersService')
const { BillingAccount } = require('@condo/domains/billing/utils/serverSchema')
const { Resident, ServiceConsumer } = require('@condo/domains/resident/utils/serverSchema')
const logger = getLogger('DiscoverServiceConsumersService')

const DiscoverServiceConsumersService = new GQLCustomSchema('DiscoverServiceConsumersService', {
    types: [
        {
            access: true,
            type: 'input DiscoverConsumersServiceInput { dv: Int!, sender: SenderFieldInput!, address: String!, unitName: String!, unitType: String!, billingAccountId: ID, residentId: ID }',
        },
        {
            access: true,
            type: 'type DiscoverConsumersServiceOutput { status: String!, createdServiceConsumersTotal: Int! }',
        },
    ],
    
    mutations: [
        {
            access: access.canDiscoverConsumersService,
            schema: 'discoverConsumersService(data: DiscoverConsumersServiceInput!): DiscoverConsumersServiceOutput',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { address, unitName, unitType, billingAccountId, residentId } = data

                const residents = await Resident.getAll(context, 
                    residentId ? { id: residentId, deletedAt: null } : {
                        address: address,
                        unitName: unitName,
                        unitType: unitType,
                        deletedAt: null,
                    })

                const billingAccounts = await BillingAccount.getAll(context,
                    billingAccountId ? { id: billingAccountId, deletedAt: null } : {
                        context: { status: 'Finished', deletedAt: null },
                        property: { address: address, deletedAt: null  },
                        unitName: unitName,
                        unitType: unitType,
                        deletedAt: null,
                    })


                const getPayload = (accountNumber, resident) => ({
                    dv: 1,
                    sender: { dv: 1, fingerprint: 'discoverServiceConsumersMutation' },
                    resident: { connect: { id: resident.id } },
                    organization: { connect: { id: get(resident, ['organization', 'id']) } },
                    accountNumber: accountNumber,
                })

                const combinations = _.flatMap(residents, (resident) =>  billingAccounts.map((account) => [resident, account]))
                const createdServiceConsumers = await Promise.all(combinations.map(([resident, account]) => ServiceConsumer.create(context, getPayload(account.number, resident))))

                logger.info({ msg: `discoverServiceConsumersMutation: created ${createdServiceConsumers.length} service consumers` })
                logger.info({ msg: `discoverServiceConsumersMutation: created service consumers for residentIds: ${residents.map(resident => resident.id).split(', ')}` })
                logger.info({ msg: `discoverServiceConsumersMutation: created service consumers for billingAccountIds: ${billingAccounts.map(account => account.id).split(', ')}` })
                return { status: 'success', createdServiceConsumersTotal: createdServiceConsumers.length }
            },
        },
    ],
})

module.exports = {
    DiscoverServiceConsumersService,
}
