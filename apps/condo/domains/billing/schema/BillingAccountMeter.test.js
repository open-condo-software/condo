/**
 * Generated by `createschema billing.BillingAccountMeter 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; importId?:Text; property:Relationship:BillingProperty:CASCADE; account:Relationship:BillingAccount:CASCADE; resource:Relationship:BillingMeterResource:PROTECT; raw:Json; meta:Json'`
 */

const { makeContextWithOrganizationAndIntegration } = require('@condo/domains/billing/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { createTestBillingMeterResource } = require('@condo/domains/billing/utils/testSchema')
const { createTestBillingAccount } = require('@condo/domains/billing/utils/testSchema')
const { createTestBillingProperty } = require('@condo/domains/billing/utils/testSchema')
const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const { BillingAccountMeter, createTestBillingAccountMeter, updateTestBillingAccountMeter } = require('@condo/domains/billing/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObjects, expectToThrowAccessDeniedErrorToObj } = require('@condo/domains/common/utils/testSchema')

describe('BillingAccountMeter', () => {
    test('admin: create BillingAccountMeter', async () => {
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)
        const [obj, attrs] = await createTestBillingAccountMeter(admin, context, property, billingAccount, resource)

        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
    })

    test('user: create BillingAccountMeter', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingAccountMeter(client, context, property, billingAccount, resource)
        })
    })

    test('anonymous: create BillingAccountMeter', async () => {
        const client = await makeClient()
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingAccountMeter(client, context, property, billingAccount, resource)
        })
    })

    test('admin: read BillingAccountMeter', async () => {
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)
        const [billingAccountMeter] = await createTestBillingAccountMeter(admin, context, property, billingAccount, resource)
        const objs = await BillingAccountMeter.getAll(admin, { id: billingAccountMeter.id })

        expect(objs).toHaveLength(1)
    })

    test('user: read BillingAccountMeter', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)
        const [billingAccountMeter] = await createTestBillingAccountMeter(admin, context, property, billingAccount, resource)

        const objs = await BillingAccountMeter.getAll(client, { id: billingAccountMeter.id })
        expect(objs).toHaveLength(0)
    })

    test('anonymous: read BillingAccountMeter', async () => {
        const client = await makeClient()
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)
        const [billingAccountMeter] = await createTestBillingAccountMeter(admin, context, property, billingAccount, resource)

        await expectToThrowAccessDeniedErrorToObjects(async () => {
            await BillingAccountMeter.getAll(client, { id: billingAccountMeter.id })
        })
    })

    test('admin: update BillingAccountMeter', async () => {
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)
        const [billingAccountMeter] = await createTestBillingAccountMeter(admin, context, property, billingAccount, resource)
        const payload = {
            raw: '123',
        }
        const [objUpdated, attrs] = await updateTestBillingAccountMeter(admin, billingAccountMeter.id, payload)

        expect(objUpdated.id).toEqual(billingAccountMeter.id)
        expect(objUpdated.dv).toEqual(1)
        expect(objUpdated.sender).toEqual(attrs.sender)
        expect(objUpdated.v).toEqual(2)
        expect(objUpdated.newId).toEqual(null)
        expect(objUpdated.deletedAt).toEqual(null)
        expect(objUpdated.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objUpdated.createdAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).not.toEqual(objUpdated.createdAt)
        expect(objUpdated.raw).toEqual('123')
    })

    test('user: update BillingAccountMeter', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)
        const [billingAccountMeter] = await createTestBillingAccountMeter(admin, context, property, billingAccount, resource)

        const payload = {}
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingAccountMeter(client, billingAccountMeter.id, payload)
        })
    })

    test('anonymous: update BillingAccountMeter', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)
        const [billingAccountMeter] = await createTestBillingAccountMeter(admin, context, property, billingAccount, resource)

        const payload = {}
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingAccountMeter(client, billingAccountMeter.id, payload)
        })
    })

    test('admin: delete BillingAccountMeter', async () => {
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)
        const [billingAccountMeter] = await createTestBillingAccountMeter(admin, context, property, billingAccount, resource)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingAccountMeter.delete(admin, billingAccountMeter.id)
        })
    })

    test('user: delete BillingAccountMeter', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)
        const [billingAccountMeter] = await createTestBillingAccountMeter(admin, context, property, billingAccount, resource)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingAccountMeter.delete(client, billingAccountMeter.id)
        })
    })

    test('anonymous: delete BillingAccountMeter', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const admin = await makeLoggedInAdminClient()
        const { context } = await makeContextWithOrganizationAndIntegration(admin)
        const [property] = await createTestBillingProperty(admin, context)
        const [billingAccount] = await createTestBillingAccount(admin, context, property)
        const [resource] = await createTestBillingMeterResource(admin)
        const [billingAccountMeter] = await createTestBillingAccountMeter(admin, context, property, billingAccount, resource)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingAccountMeter.delete(client, billingAccountMeter.id)
        })
    })
})

