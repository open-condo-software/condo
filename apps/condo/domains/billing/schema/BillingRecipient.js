/**
 * Generated by `createschema billing.BillingRecipient 'organization:Relationship:Organization:CASCADE; tin:Text; iec:Text; bic:Text; context?:Relationship:BillingIntegrationOrganizationContext:SET_NULL; bankAccount:Text; name?:Text; approved:Checkbox; meta?:Json;'`
 */

const { Text, Checkbox } = require('@keystonejs/fields')

const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/billing/access/BillingRecipient')
const { INTEGRATION_CONTEXT_FIELD } = require('@condo/domains/billing/schema/fields/relations')
const { IMPORT_ID_FIELD } = require('@condo/domains/common/schema/fields')

const BillingRecipient = new GQLListSchema('BillingRecipient', {
    schemaDoc: 'Organization\' billing information: bank account, bic, and so on',
    labelResolver: item => item.tin,
    fields: {
        importId: IMPORT_ID_FIELD,
        context: INTEGRATION_CONTEXT_FIELD,

        tin: {
            schemaDoc: 'Tax Identification Number',
            type: Text,
            isRequired: true,
        },

        iec: {
            schemaDoc: 'Importer-Exporter Code',
            type: Text,
            isRequired: false,
        },

        bic: {
            schemaDoc: 'Bank Identification Code',
            type: Text,
            isRequired: true,
        },

        bankAccount: {
            schemaDoc: 'Number of bank account of this recipient',
            type: Text,
            isRequired: true,
        },

        bankName: {
            schemaDoc: 'Bank name',
            type: Text,
            isRequired: false,
        },

        offsettingAccount: {
            schemaDoc: 'Bank account',
            type: Text,
            isRequired: false,
        },

        territoryCode: {
            schemaDoc: 'Location code (Classifier of Territories of Municipal Units - OKTMO)',
            type: Text,
            isRequired: false,
        },

        purpose: {
            schemaDoc: 'For what reason is this recipient is able to collect payments.',
            type: Text,
            isRequired: false,
        },

        name: {
            schemaDoc: 'Billing Recipient name. Usually the juristic name of the organization',
            type: Text,
            isRequired: false,
        },

        isApproved: {
            schemaDoc: 'If set to True, then this billing recipient info is considered allowed and users are allowed to pay for receipts with this recipient',
            type: Checkbox,
            defaultValue: false,
            isRequired: true,
            access: {
                read: true,
                create: access.canManageIsApprovedField,
                update: access.canManageIsApprovedField,
            },
        },

        meta: {
            schemaDoc: 'Structured metadata obtained from the `billing data source`. The structure depends on the integration system.',
            type: Json,
            isRequired: false,
        },
    },

    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadBillingRecipients,
        create: access.canManageBillingRecipients,
        update: access.canManageBillingRecipients,
        delete: false,
        auth: true,
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['context', 'tin', 'iec', 'bic', 'bankAccount'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'billingRecipient_unique_context_tin_iec_bic_bankAccount',
            },
        ],
    },
})

module.exports = {
    BillingRecipient,
}
