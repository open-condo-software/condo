/**
 * Generated by `createservice billing.AllResidentBillingVirtualReceiptsService --type queries`
 */

const { get, isNil } = require('lodash')

const { generateQueryWhereInput, generateQuerySortBy } = require('@open-condo/codegen/generate.gql')
const { GQLCustomSchema, find } = require('@open-condo/keystone/schema')

const {
    PAYMENT_INIT_STATUS,
    PAYMENT_PROCESSING_STATUS,
    PAYMENT_WITHDRAWN_STATUS,
    PAYMENT_DONE_STATUS,
} = require('@condo/domains/acquiring/constants/payment')
const {
    AcquiringIntegrationContext,
    Payment,
} = require('@condo/domains/acquiring/utils/serverSchema')
const access = require('@condo/domains/billing/access/AllResidentBillingVirtualReceiptsService')
const { DEFAULT_BILLING_CATEGORY_ID } = require('@condo/domains/billing/constants/constants')
const { 
    BillingCategory,
} = require('@condo/domains/billing/utils/serverSchema')


const ALL_RESIDENT_BILLING_VIRTUAL_RECEIPTS_FIELDS = {
    id: 'ID',
    period: 'String',
    toPay: 'String',
    printableNumber: 'String',
    serviceConsumer: 'ServiceConsumer',
}

const AllResidentBillingVirtualReceiptsService = new GQLCustomSchema('AllResidentBillingVirtualReceiptsService', {
    types: [
        {
            access: true,
            type: generateQueryWhereInput('ResidentBillingVirtualReceipt', ALL_RESIDENT_BILLING_VIRTUAL_RECEIPTS_FIELDS),
        },
        {
            access: true,
            type: generateQuerySortBy('ResidentBillingVirtualReceipt', Object.keys(ALL_RESIDENT_BILLING_VIRTUAL_RECEIPTS_FIELDS)),
        },
    ],
    
    queries: [
        {
            access: access.canAllResidentBillingVirtualReceipts,
            schema: 'allResidentBillingVirtualReceipts (where: ResidentBillingVirtualReceiptWhereInput, first: Int, skip: Int, sortBy: [SortResidentBillingVirtualReceiptsBy!]): [ResidentBillingReceiptOutput]',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { where, first, skip, sortBy } = args
                const userId = get(context, ['authedItem', 'id'])

                const serviceConsumerWhere = get(where, 'serviceConsumer', {})
                
                // We can't really use getting service consumer with all access here, since we do not show billingAccount to our user
                const GET_ONLY_OWN_SERVICE_CONSUMER_WHERE = { user: { id: userId } }
                if (!serviceConsumerWhere.resident) {
                    serviceConsumerWhere.resident = GET_ONLY_OWN_SERVICE_CONSUMER_WHERE
                    serviceConsumerWhere.deletedAt = null
                } else {
                    serviceConsumerWhere.resident.user = GET_ONLY_OWN_SERVICE_CONSUMER_WHERE.user
                    serviceConsumerWhere.deletedAt = null
                }

                const serviceConsumers = (await find('ServiceConsumer', serviceConsumerWhere))

                const serviceConsumersWithBillingAccount = serviceConsumers.filter(consumer => (
                    get(consumer, 'billingIntegrationContext')
                ))

                if (!Array.isArray(serviceConsumersWithBillingAccount) || !serviceConsumersWithBillingAccount.length) {
                    return []
                }

                // search payment conditions:
                // - we would like to retrieve payment with no direct link to invoice && receipt
                const id = get(where, ['id'])
                const period = get(where, ['period'])
                const amount = get(where, ['toPay'])
                const accountNumber = get(where, ['printableNumber'])
                const VIRTUAL_PAYMENT_BASE_WHERE = {
                    ...isNil(id) ? {} : { id },
                    ...isNil(period) ? {} : { period },
                    ...isNil(amount) ? {} : { amount },
                    ...isNil(accountNumber) ? {} : { accountNumber },
                    status_in: [
                        PAYMENT_INIT_STATUS, PAYMENT_PROCESSING_STATUS,
                        PAYMENT_DONE_STATUS, PAYMENT_WITHDRAWN_STATUS,
                    ],
                    receipt_is_null: true,
                    invoice_is_null: true,
                    deletedAt: null,
                }
                
                // get all payment for virtual receipts
                const payments = []
                for (let i = 0 ; i < serviceConsumersWithBillingAccount.length; i++) {
                    const serviceConsumer = serviceConsumersWithBillingAccount[i]
                    const paymentWhere = {
                        accountNumber: serviceConsumer.accountNumber,
                        organization: { id: serviceConsumer.organization },
                        ...VIRTUAL_PAYMENT_BASE_WHERE,
                    }

                    // get required data
                    const serviceConsumerPayments = await Payment.getAll(
                        context,
                        paymentWhere,
                        { sortBy, first, skip }
                    )
                    const acquiringContext = await AcquiringIntegrationContext.getOne(context, {
                        id: serviceConsumer.acquiringIntegrationContext,
                    })

                    // compose it for future mapping
                    payments.push(...serviceConsumerPayments.map(payment => ({
                        ...payment,
                        serviceConsumer,
                        acquiringContext,
                    })))
                }

                // map payment to ResidentBillingReceiptOutput model
                const category = await BillingCategory.getOne(context, { id: DEFAULT_BILLING_CATEGORY_ID })
                return payments.map(payment => ({
                    dv: 1,
                    recipient: get(payment, ['acquiringContext', 'recipient']),
                    id: get(payment, ['id']),
                    period: get(payment, ['period']),
                    toPay: get(payment, ['amount']),
                    paid: true,
                    explicitFee: get(payment, ['explicitFee']),
                    printableNumber: get(payment, ['accountNumber']),
                    services: [],
                    serviceConsumer: get(payment, ['serviceConsumer']),
                    currencyCode: get(payment, ['currencyCode']),
                    category,
                    isPayable: false,
                }))
            },
        },
    ],
    
})

module.exports = {
    AllResidentBillingVirtualReceiptsService,
}
