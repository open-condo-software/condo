/**
 * Generated by `createservice billing.BillingReceiptsService --type queries`
 */

const { Resident, ServiceConsumer } = require('@condo/domains/resident/utils/serverSchema')
const { BillingReceipt } = require('@condo/domains/billing/utils/serverSchema')
const { NOT_FOUND_ERROR } = require('@condo/domains/common/constants/errors')
const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/billing/access/GetBillingReceiptsForServiceConsumerService')


const AllBillingReceiptsForServiceConsumer = new GQLCustomSchema('GetBillingReceiptsForServiceConsumerService', {
    types: [
        {
            access: true,
            type: 'input BillingReceiptsForServiceConsumerInput { dv: Int!, sender: JSON! serviceConsumerId: ID! }',
        },
        {
            access: true,
            type: 'type BillingReceiptsForServiceConsumerOutput { id: String!, dv: String!, recipient: JSON!, period: String!, toPay: String!, printableNumber: String!, toPayDetails: JSON!, services: JSON! }',
        },
    ],
    
    queries: [
        {
            access: access.canGetBillingReceiptsForServiceConsumer,
            schema: 'allBillingReceiptsForServiceConsumer (data: BillingReceiptsForServiceConsumerInput!): BillingReceiptsForServiceConsumerOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { serviceConsumerId } = args

                const [serviceConsumer] = await ServiceConsumer.getAll(context, { id: serviceConsumerId })
                if (!serviceConsumer) {
                    throw new Error(`${NOT_FOUND_ERROR}serviceConsumer] ServiceConsumer not found for this user`)
                }

                const billingReceipts = BillingReceipt.getAll(context, { billingAccount: serviceConsumer.billingAccount.id })

                billingReceipts.map(receipt => {
                    return {
                        dv: receipt.dv,
                        recipient: receipt.recipient,
                        period: receipt.period,
                        toPay: receipt.toPay,
                        printableNumber: receipt.printableNumber,
                        toPayDetails: receipt.toPayDetails,
                        services: receipt.services,
                    }
                })

                return billingReceipts
            },
        },
    ],
    
})

module.exports = {
    AllBillingReceiptsForServiceConsumer,
}
