/**
 * Generated by `createservice billing.SumBillingReceiptsService`
 */

const Big = require('big.js')

const { makeLoggedInAdminClient, makeClient, catchErrorFrom, expectToThrowAuthenticationErrorToResult, expectToThrowAccessDeniedErrorToResult, expectToThrowAuthenticationError } = require('@open-condo/keystone/test.utils')

const { sumBillingReceiptsByTestClient } = require('@condo/domains/billing/utils/testSchema')

const {
    createPaymentsAndGetSum,
    sumPaymentsByTestClient,
    makePayer,
    createTestPayment,
} = require('../../acquiring/utils/testSchema')
const { createTestOrganization } = require('../../organization/utils/testSchema')
const { makeClientWithSupportUser, makeClientWithNewRegisteredAndLoggedInUser } = require('../../user/utils/testSchema')
const { createTestBillingIntegration, createTestBillingIntegrationOrganizationContext, createTestBillingReceipt, createTestBillingProperty, createTestBillingAccount,
} = require('../utils/testSchema')
 
describe('SumBillingReceiptsService', () => {
    let adminClient
    let userClient
    let supportClient
    let anonymousClient

    let payers = {}

    beforeAll(async () => {
        anonymousClient = await makeClient()
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()

        payers.singleReceipt = await makePayer(1)
        payers.zeroReceipts = await makePayer(0)
        payers.multipleReceipts = await makePayer(10)
    })

    describe('business logic', () => {
        test('sum multiple receipts', async () => {
            const { client: admin, organization, sum: manualSum } = await createPaymentsAndGetSum()
            const where = { organization: { id: organization.id } }
            const { sum } = await sumPaymentsByTestClient(admin, where)

            expect(String(sum)).toEqual(manualSum)
        })
        test('sum one receipt', async () => {
            const { client: admin, organization, sum: manualSum } = await createPaymentsAndGetSum(101)
            const where = { organization: { id: organization.id } }
            const { sum } = await sumPaymentsByTestClient(admin, where)

            expect(String(sum)).toEqual(manualSum)
        })
        test('sum zero receipts', async () => {
            const { admin, organization } = await makePayer()

            const where = { context: { organization: { id: payers.singleReceipt.organization.id } } }
            const { sum } = await sumBillingReceiptsByTestClient(adminClient, where)
        })
    })
    describe('access checks', () => {
        test('admin can sum payments', async () => {
            const where = { context: { organization: { id: payers.singleReceipt.organization.id } } }
            const { sum } = await sumBillingReceiptsByTestClient(adminClient, where)

            expect(String(sum)).toEqual(payers.singleReceipt.toPaySum)
        })
        test('support can sum payments', async () => {
            const where = { context: { organization: { id: payers.singleReceipt.organization.id } } }
            const { sum } = await sumBillingReceiptsByTestClient(supportClient, where)

            expect(String(sum)).toEqual(payers.singleReceipt.toPaySum)
        })
        test('user can\'t sum payments', async () => {
            const where = { context: { organization: { id: payers.singleReceipt.organization.id } } }

            await expectToThrowAccessDeniedErrorToResult(async () => {
                await sumBillingReceiptsByTestClient(userClient, where)
            })
        })
        test('anonymous can\'t sum payments', async () => {
            const where = { context: { organization: { id: payers.singleReceipt.organization.id } } }

            await expectToThrowAuthenticationErrorToResult(async () => {
                await sumBillingReceiptsByTestClient(anonymousClient, where)
            })
        })
    })
})