/**
 * Generated by `createservice billing.SumBillingReceiptsService`
 */

const { makeLoggedInAdminClient, makeClient, expectToThrowAuthenticationErrorToResult, expectToThrowAccessDeniedErrorToResult, expectToThrowGQLError, expectToThrowGraphQLRequestError } = require('@open-condo/keystone/test.utils')

const { makePayer } = require('@condo/domains/acquiring/utils/testSchema')
const { sumBillingReceiptsByTestClient } = require('@condo/domains/billing/utils/testSchema')
const { createTestBillingReceipt } = require('@condo/domains/billing/utils/testSchema')
const { makeClientWithSupportUser, makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { createTestUserRightsSet, updateTestUser } = require('@condo/domains/user/utils/testSchema')

const { ERRORS } = require('./SumBillingReceiptsService')


describe('SumBillingReceiptsService', () => {
    let adminClient
    let userClient
    let supportClient
    let anonymousClient

    let payers = {}

    beforeAll(async () => {
        anonymousClient = await makeClient()
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()

        payers.singleReceipt = await makePayer(1)
        payers.zeroReceipts = await makePayer(0)
        payers.multipleReceipts = await makePayer(10)
    })

    describe('business logic', () => {
        test('sum multiple receipts', async () => {
            const period = payers.multipleReceipts.billingReceipts[0].period
            const where = { organizationId: payers.multipleReceipts.organization.id, period: period }
            const { sum } = await sumBillingReceiptsByTestClient(supportClient, where)

            expect(String(sum)).toEqual(payers.multipleReceipts.toPaySum)
        })
        test('sum zero receipts', async () => {
            const where = { organizationId: payers.zeroReceipts.organization.id, period: '2024-01-01' }
            const { sum } = await sumBillingReceiptsByTestClient(supportClient, where)

            expect(String(sum)).toEqual(payers.zeroReceipts.toPaySum)
        })
        test('different where filters work', async () => {
            const { billingAccount, billingContext, billingProperty, organization } = await makePayer(0)

            const PERIOD_01 = '2024-01-01'
            const PERIOD_02 = '2024-02-01'

            await createTestBillingReceipt(adminClient, billingContext, billingProperty, billingAccount, { toPay: '20.00', period: PERIOD_01 })
            await createTestBillingReceipt(adminClient, billingContext, billingProperty, billingAccount, { toPay: '20.00', period: PERIOD_01 })
            await createTestBillingReceipt(adminClient, billingContext, billingProperty, billingAccount, { toPay: '5.00', period: PERIOD_02 })
            await createTestBillingReceipt(adminClient, billingContext, billingProperty, billingAccount, { toPay: '5.00', period: PERIOD_02 })

            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
            const [userRightsSet] = await createTestUserRightsSet(adminClient, { canExecute_allBillingReceiptsSum: true })
            await updateTestUser(adminClient, userClient.user.id, { rightsSet: { connect: { id: userRightsSet.id } } })

            const where1 = { organizationId: organization.id, period: PERIOD_01 }
            const { sum: sum1 } = await sumBillingReceiptsByTestClient(userClient, where1)
            expect(String(sum1)).toEqual('40.00000000')

            const where2 = { organizationId: organization.id, period: PERIOD_02 }
            const { sum: sum2 } = await sumBillingReceiptsByTestClient(userClient, where2)
            expect(String(sum2)).toEqual('10.00000000')
        })
        test('should throw error if period not specified', async () => {
            const where = { organizationId: payers.multipleReceipts.organization.id }

            await expectToThrowGraphQLRequestError(async () => {
                await sumBillingReceiptsByTestClient(adminClient, where)
            }, 'Field "period" of required type "String!" was not provided.')
        })
        test('should throw error if tin and organizationId not specified', async () => {
            const where = { period: '2024-01-01' }

            await expectToThrowGQLError(
                async () => {
                    await sumBillingReceiptsByTestClient(adminClient, where)
                },
                {
                    code: ERRORS.TIN_OR_ORGANIZATION_ID_MUST_BE_SPECIFIED.code,
                    type: ERRORS.TIN_OR_ORGANIZATION_ID_MUST_BE_SPECIFIED.type,
                    message: ERRORS.TIN_OR_ORGANIZATION_ID_MUST_BE_SPECIFIED.message,
                },
                'result'
            )
        })
    })
    describe('access checks', () => {
        test('admin can sum payments', async () => {
            const period = payers.singleReceipt.billingReceipts[0].period
            const where = { organizationId: payers.singleReceipt.organization.id, period: period }
            const { sum } = await sumBillingReceiptsByTestClient(adminClient, where)

            expect(String(sum)).toEqual(payers.singleReceipt.toPaySum)
        })
        test('support can sum payments', async () => {
            const period = payers.singleReceipt.billingReceipts[0].period
            const where = { organizationId: payers.singleReceipt.organization.id, period: period }
            const { sum } = await sumBillingReceiptsByTestClient(supportClient, where)

            expect(String(sum)).toEqual(payers.singleReceipt.toPaySum)
        })
        test('user can\'t sum payments', async () => {
            const period = payers.singleReceipt.billingReceipts[0].period
            const where = { organizationId: payers.singleReceipt.organization.id, period: period }

            await expectToThrowAccessDeniedErrorToResult(async () => {
                await sumBillingReceiptsByTestClient(userClient, where)
            })
        })
        test('anonymous can\'t sum payments', async () => {
            const period = payers.singleReceipt.billingReceipts[0].period
            const where = { organizationId: payers.singleReceipt.organization.id, period: period }

            await expectToThrowAuthenticationErrorToResult(async () => {
                await sumBillingReceiptsByTestClient(anonymousClient, where)
            })
        })
    })
})