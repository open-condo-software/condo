/**
 * Generated by `createservice billing.SumBillingReceiptsService`
 */

const { makeLoggedInAdminClient, makeClient, expectToThrowAuthenticationErrorToResult, expectToThrowAccessDeniedErrorToResult, expectToThrowGQLError } = require('@open-condo/keystone/test.utils')

const { makePayer } = require('@condo/domains/acquiring/utils/testSchema')
const { sumBillingReceiptsByTestClient } = require('@condo/domains/billing/utils/testSchema')
const { createTestBillingReceipt } = require('@condo/domains/billing/utils/testSchema')
const { makeClientWithSupportUser, makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

const { ERRORS } = require('./SumBillingReceiptsService')



describe('SumBillingReceiptsService', () => {
    let adminClient
    let userClient
    let supportClient
    let anonymousClient

    let payers = {}

    beforeAll(async () => {
        anonymousClient = await makeClient()
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()

        payers.singleReceipt = await makePayer(1)
        payers.zeroReceipts = await makePayer(0)
        payers.multipleReceipts = await makePayer(10)
    })

    describe('business logic', () => {
        test('sum multiple receipts', async () => {
            const period = payers.multipleReceipts.billingReceipts[0].period
            const where = { context: { organization: { id: payers.multipleReceipts.organization.id } }, period: period }
            const { sum } = await sumBillingReceiptsByTestClient(supportClient, where)

            expect(String(sum)).toEqual(payers.multipleReceipts.toPaySum)
        })
        test('sum zero receipts', async () => {
            const where = { context: { organization: { id: payers.zeroReceipts.organization.id } }, period: '2024-01-01' }
            const { sum } = await sumBillingReceiptsByTestClient(supportClient, where)

            expect(String(sum)).toEqual(payers.zeroReceipts.toPaySum)
        })
        test('where filtering works', async () => {
            const { billingAccount, billingContext, billingProperty, organization } = await makePayer(0)

            const PERIOD_01 = '2024-01-01'
            const PERIOD_02 = '2024-02-01'

            await createTestBillingReceipt(adminClient, billingContext, billingProperty, billingAccount, { toPay: '20.00', period: PERIOD_01 })
            await createTestBillingReceipt(adminClient, billingContext, billingProperty, billingAccount, { toPay: '20.00', period: PERIOD_01 })
            await createTestBillingReceipt(adminClient, billingContext, billingProperty, billingAccount, { toPay: '5.00', period: PERIOD_02 })
            await createTestBillingReceipt(adminClient, billingContext, billingProperty, billingAccount, { toPay: '5.00', period: PERIOD_02 })
            
            const where1 = { context: { organization: { id: organization.id } }, period: PERIOD_01 }
            const { sum: sum1 } = await sumBillingReceiptsByTestClient(supportClient, where1)
            expect(String(sum1)).toEqual('40.00000000')

            const where2 = { context: { organization: { id: organization.id } }, period: PERIOD_02 }
            const { sum: sum2 } = await sumBillingReceiptsByTestClient(supportClient, where2)
            expect(String(sum2)).toEqual('10.00000000')

            const where3 = { context: { organization: { id: organization.id } }, period: PERIOD_02, period_in: [PERIOD_02, PERIOD_01] }
            const { sum: sum3 } = await sumBillingReceiptsByTestClient(supportClient, where3)
            expect(String(sum3)).toEqual('10.00000000')

            const where4 = { context: { organization: { id: organization.id } }, period_gte: PERIOD_01, period: PERIOD_02 }
            const { sum: sum4 } = await sumBillingReceiptsByTestClient(supportClient, where4)
            expect(String(sum4)).toEqual('10.00000000')
        })
        test('should throw error if period not specified', async () => {
            const where = { context: { organization: { id: payers.multipleReceipts.organization.id } } }

            await expectToThrowGQLError(
                async () => {
                    const { sum } = await sumBillingReceiptsByTestClient(adminClient, where)
                },
                {
                    code: ERRORS.PERIOD_BADLY_SPECIFIED.code,
                    type: ERRORS.PERIOD_BADLY_SPECIFIED.type,
                    message: ERRORS.PERIOD_BADLY_SPECIFIED.message,
                },
                'result'
            )
        })
    })
    describe('access checks', () => {
        test('admin can sum payments', async () => {
            const period = payers.singleReceipt.billingReceipts[0].period
            const where = { context: { organization: { id: payers.singleReceipt.organization.id } }, period: period }
            const { sum } = await sumBillingReceiptsByTestClient(adminClient, where)

            expect(String(sum)).toEqual(payers.singleReceipt.toPaySum)
        })
        test('support can sum payments', async () => {
            const period = payers.singleReceipt.billingReceipts[0].period
            const where = { context: { organization: { id: payers.singleReceipt.organization.id } }, period: period }
            const { sum } = await sumBillingReceiptsByTestClient(supportClient, where)

            expect(String(sum)).toEqual(payers.singleReceipt.toPaySum)
        })
        test('user can\'t sum payments', async () => {
            const period = payers.singleReceipt.billingReceipts[0].period
            const where = { context: { organization: { id: payers.singleReceipt.organization.id } }, period: period }

            await expectToThrowAccessDeniedErrorToResult(async () => {
                await sumBillingReceiptsByTestClient(userClient, where)
            })
        })
        test('anonymous can\'t sum payments', async () => {
            const period = payers.singleReceipt.billingReceipts[0].period
            const where = { context: { organization: { id: payers.singleReceipt.organization.id } }, period: period }

            await expectToThrowAuthenticationErrorToResult(async () => {
                await sumBillingReceiptsByTestClient(anonymousClient, where)
            })
        })
    })
})