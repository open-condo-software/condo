/**
 * Generated by `createschema billing.BillingMeterResource 'name:Text'`
 */

const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')
const { BillingMeterResource, createTestBillingMeterResource, updateTestBillingMeterResource } = require('@condo/domains/billing/utils/testSchema')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects } = require('@condo/domains/common/utils/testSchema')

describe('BillingMeterResource', () => {
    test.skip('admin: create BillingMeterResource', async () => {
        const admin = await makeLoggedInAdminClient()
        const [obj, attrs] = await createTestBillingMeterResource(admin)

        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
    })

    test.skip('user: create BillingMeterResource', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingMeterResource(client)
        })
    })

    test.skip('anonymous: create BillingMeterResource', async () => {
        const client = await makeClient()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestBillingMeterResource(client)
        })
    })

    test.skip('admin: read BillingMeterResource', async () => {
        const admin = await makeLoggedInAdminClient()
        const [obj, attrs] = await createTestBillingMeterResource(admin)

        const objs = await BillingMeterResource.getAll(admin)

        expect(objs).toHaveLength(1)
        expect(objs[0].id).toMatch(obj.id)
        expect(objs[0].dv).toEqual(1)
        expect(objs[0].sender).toEqual(attrs.sender)
        expect(objs[0].v).toEqual(1)
        expect(objs[0].newId).toEqual(null)
        expect(objs[0].deletedAt).toEqual(null)
        expect(objs[0].createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objs[0].updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objs[0].createdAt).toMatch(obj.createdAt)
        expect(objs[0].updatedAt).toMatch(obj.updatedAt)
    })

    // no context in BillingMeterResource
    test.skip('user: read BillingMeterResource', async () => {
        const admin = await makeLoggedInAdminClient()
        await createTestBillingMeterResource(admin)

        const client = await makeClientWithNewRegisteredAndLoggedInUser()

        const billingResources = await BillingMeterResource.getAll(client)
        expect(billingResources).toHaveLength(0)
    })

    test.skip('anonymous: read BillingMeterResource', async () => {
        const client = await makeClient()

        await expectToThrowAccessDeniedErrorToObjects(async () => {
            await BillingMeterResource.getAll(client)
        })
    })

    test.skip('admin: update BillingMeterResource', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingMeterResource(admin)
        const payload = {}
        const [objUpdated, attrs] = await updateTestBillingMeterResource(admin, objCreated.id, payload)

        expect(objUpdated.id).toEqual(objCreated.id)
        expect(objUpdated.dv).toEqual(1)
        expect(objUpdated.sender).toEqual(attrs.sender)
        expect(objUpdated.v).toEqual(2)
        expect(objUpdated.newId).toEqual(null)
        expect(objUpdated.deletedAt).toEqual(null)
        expect(objUpdated.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(objUpdated.createdAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).toMatch(DATETIME_RE)
        expect(objUpdated.updatedAt).not.toEqual(objUpdated.createdAt)
    })

    test.skip('user: update BillingMeterResource', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingMeterResource(admin)

        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const payload = {}
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingMeterResource(client, objCreated.id, payload)
        })
    })

    test.skip('anonymous: update BillingMeterResource', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingMeterResource(admin)
        const client = await makeClient()
        const payload = {}

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestBillingMeterResource(client, objCreated.id, payload)
        })
    })

    test.skip('admin: delete BillingMeterResource', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingMeterResource(admin)
        await BillingMeterResource.delete(admin, objCreated.id)
        const billingMeterResources = await BillingMeterResource.getAll(admin, { id: objCreated.id })

        expect(billingMeterResources).toHaveLength(0)
    })

    test.skip('user: delete BillingMeterResource', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingMeterResource(admin)

        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingMeterResource.delete(client, objCreated.id)
        })
    })

    test.skip('anonymous: delete BillingMeterResource', async () => {
        const admin = await makeLoggedInAdminClient()
        const [objCreated] = await createTestBillingMeterResource(admin)

        const client = await makeClient()
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await BillingMeterResource.delete(client, objCreated.id)
        })
    })
})

