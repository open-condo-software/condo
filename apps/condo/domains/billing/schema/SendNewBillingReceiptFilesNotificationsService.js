/**
 * Generated by `createservice billing.SendNewBillingReceiptFilesNotificationsService '--type=mutations'`
 */
const dayjs = require('dayjs')
const { isNil, isEmpty } = require('lodash')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/billing/access/SendNewBillingReceiptFilesNotificationsService')
const { sendNewBillingReceiptFilesNotifications } = require('@condo/domains/billing/tasks/index')
const { isValidDateValue } = require('@condo/domains/billing/utils/validation.utils')
const { NOT_FOUND, WRONG_VALUE } = require('@condo/domains/common/constants/errors')
const { DATE_FORMAT } = require('@condo/domains/common/utils/date')
const { Organization } = require('@condo/domains/organization/utils/serverSchema')


/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    ORGANIZATION_NOT_FOUND: {
        mutation: 'sendNewBillingReceiptFilesNotifications',
        code: BAD_USER_INPUT,
        type: NOT_FOUND,
        message: 'Could not find Organization by specified search criteria',
    },
    CREATED_AFTER_DATE_ILLEGAL_VALUE: {
        mutation: 'sendNewBillingReceiptFilesNotifications',
        code: BAD_USER_INPUT,
        type: WRONG_VALUE,
        message: 'Wrong value for createdAfter field. Required non null date string, less than current time',
    },
    INVALID_PERIOD_PROVIDED: {
        mutation: 'sendNewBillingReceiptFilesNotifications',
        variable: ['data', 'period'],
        code: BAD_USER_INPUT,
        type: NOT_FOUND,
        message: `Please provide proper period not before start of previous and not later than start of current month, valid format is ${DATE_FORMAT}`,
    },
}

function getWatermark (value) {
    if (isEmpty(value)) {
        return null
    }

    return dayjs(value)
}

const SendNewBillingReceiptFilesNotificationsService = new GQLCustomSchema('SendNewBillingReceiptFilesNotificationsService', {
    types: [
        {
            access: true,
            type: 'input SendNewBillingReceiptFilesNotificationsInput { dv: Int!, sender: SenderFieldInput!, organization: OrganizationWhereUniqueInput!, createdAfter: String!, period: String! }',
        },
        {
            access: true,
            type: 'type SendNewBillingReceiptFilesNotificationsOutput { taskStarted: Boolean! }',
        },
    ],

    mutations: [
        {
            access: access.canSendNewBillingReceiptFilesNotifications,
            schema: 'sendNewBillingReceiptFilesNotifications(data: SendNewBillingReceiptFilesNotificationsInput!): SendNewBillingReceiptFilesNotificationsOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { organization: { id: organizationId }, createdAfter, sender, period } } = args
                const watermark = getWatermark(createdAfter)

                // period is valid
                if (!isValidDateValue(period)) throw new GQLError(ERRORS.INVALID_PERIOD_PROVIDED, context)

                // watermark not null
                if (isNil(watermark)) {
                    throw new GQLError(ERRORS.CREATED_AFTER_DATE_ILLEGAL_VALUE, context)
                }

                // check organization
                const organization = await Organization.getOne(context, {
                    id: organizationId,
                    deletedAt: null,
                })
                if (isNil(organization)) {
                    throw new GQLError(ERRORS.ORGANIZATION_NOT_FOUND, context)
                }

                // run the task
                await sendNewBillingReceiptFilesNotifications.delay({
                    organizationId,
                    organizationName: organization.name,
                    sender,
                    period,
                    watermark: watermark.toISOString(),
                })

                return { taskStarted: true }
            },
        },
    ],
})

module.exports = {
    SendNewBillingReceiptFilesNotificationsService,
}
