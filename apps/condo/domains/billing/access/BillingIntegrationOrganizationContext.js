/**
 * Generated by `createschema billing.BillingIntegrationOrganizationContext 'integration:Relationship:BillingIntegration:PROTECT; organization:Relationship:Organization:CASCADE; settings:Json; state:Json' --force`
 */

const { get } = require('lodash')

const { getById } = require('@core/keystone/schema')
const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const { checkBillingIntegrationAccessRight } = require('@condo/domains/billing/utils/accessSchema')

async function canReadBillingIntegrationOrganizationContexts ({ authentication: { item: user } }) {
    if (!user) return false
    if (user.isAdmin) return true
    return {
        // TODO(pahaz): wait https://github.com/keystonejs/keystone/issues/4829 (no access check!)
        // OR: [
        //     { organization: { employees_some: { user: { id: user.id }, role: { canManageIntegrations: true } } } },
        //     { integration: { accessRights_some: { user: { id: user.id } } } },
        // ],
    }
}

async function canManageBillingIntegrationOrganizationContexts ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return false
    if (user.isAdmin) return true
    if (operation === 'create') {
        // NOTE: can create only by the organization integration manager
        const organizationId = get(originalInput, ['organization', 'connect', 'id'])
        if (!organizationId) return false
        return await checkOrganizationPermission(user.id, organizationId, 'canManageIntegrations')
    } else if (operation === 'update') {
        // NOTE: can update by the organization integration manager OR the integration account
        if (!itemId) return false
        const context = await getById('BillingIntegrationOrganizationContext', itemId)
        if (!context) return false
        const { organization: organizationId, integration: integrationId } = context
        const canManageIntegrations = await checkOrganizationPermission(user.id, organizationId, 'canManageIntegrations')
        if (canManageIntegrations) return true
        return await checkBillingIntegrationAccessRight(user.id, integrationId)
    }
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBillingIntegrationOrganizationContexts,
    canManageBillingIntegrationOrganizationContexts,
}
