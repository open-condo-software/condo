/**
 * Generated by `createschema billing.BillingIntegrationOrganizationContext 'integration:Relationship:BillingIntegration:PROTECT; organization:Relationship:Organization:CASCADE; settings:Json; state:Json' --force`
 */

const { get } = require('lodash')
const isEmpty = require('lodash/isEmpty')
const omit = require('lodash/omit')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById, find } = require('@open-condo/keystone/schema')

const { checkBillingIntegrationsAccessRights } = require('@condo/domains/billing/utils/accessSchema')
const { canManageObjectsAsB2BAppServiceUser } = require('@condo/domains/miniapp/utils/b2bAppServiceUserAccess')
const { canReadObjectsAsB2BAppServiceUser } = require('@condo/domains/miniapp/utils/b2bAppServiceUserAccess/server.utils')
const { getEmployedOrganizationsBySomePermissions } = require('@condo/domains/organization/utils/accessSchema')
const { SERVICE } = require('@condo/domains/user/constants/common')
const { canDirectlyReadSchemaObjects } = require('@condo/domains/user/utils/directAccess')


/**
 * Context could be read either by:
 * 1. Support / Admin
 * 2. Integration service account
 * 3. Integration manager from user's organization
 */
async function canReadBillingIntegrationOrganizationContexts (args) {
    const { authentication: { item: user }, listKey, context } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isSupport || user.isAdmin) return true

    const hasDirectAccess = await canDirectlyReadSchemaObjects(user, listKey)
    if (hasDirectAccess) return {}

    if (user.type === SERVICE) {
        const canReadAsB2BAppServiceUser = await canReadObjectsAsB2BAppServiceUser(args)
        const filterConditions = [ { integration: { accessRights_some: { user: { id: user.id }, deletedAt: null } } } ]
        if (canReadAsB2BAppServiceUser) {
            filterConditions.push({ AND: [{ ...canReadAsB2BAppServiceUser }] })
        }
        return { OR: filterConditions }
    }

    const permittedOrganizations = await getEmployedOrganizationsBySomePermissions(context, user, ['canReadBillingReceipts', 'canManageIntegrations'])

    return { organization: { id_in: permittedOrganizations } }
}

/**
 * Context could be created by:
 * 1. Admin / Support
 * 2. Integration manager from user's organization
 *
 * Context could be updated by:
 * 1. Admin / Support
 * 2. Integration manager from user's organization
 * 3. Integration service
 */
async function canManageBillingIntegrationOrganizationContexts (args) {
    const { authentication: { item: user }, originalInput, operation, itemId } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    
    if (user.isAdmin || user.isSupport) return true

    let organizationId, integrationId

    if (operation === 'create') {
        // NOTE: can only be created by the organization integration manager
        organizationId = get(originalInput, ['organization', 'connect', 'id'])
        integrationId = get(originalInput, ['integration', 'connect', 'id'])
        if (!organizationId || !integrationId) return false
    } else if (operation === 'update') {
        // NOTE: can update by the organization integration manager OR the integration account
        if (!itemId) return false
        const context = await getById('BillingIntegrationOrganizationContext', itemId)
        if (!context) return false
        const { organization, integration } = context
        organizationId = organization
        integrationId = integration
    }

    if (!organizationId || !integrationId) return false

    if (user.type === SERVICE) {
        const canReadAsB2BAppServiceUser = await canManageObjectsAsB2BAppServiceUser(args)
        const integrationAccess = await checkBillingIntegrationsAccessRights(user.id, [integrationId])

        return canReadAsB2BAppServiceUser || integrationAccess
    }

    const [employee] = await find('OrganizationEmployee', {
        organization: { id: organizationId },
        user: { id: user.id },
        deletedAt: null,
        isBlocked: false,
    })

    if (!employee || !employee.role) {
        return false
    }

    const [employeeRole] = await find('OrganizationEmployeeRole', {
        id: employee.role,
        organization: { id: organizationId },
    })

    if (!employeeRole || employeeRole.deletedAt) return false

    const canManageIntegrations = employeeRole['canManageIntegrations'] || false
    const canImportBillingReceipts = employeeRole['canImportBillingReceipts'] || false

    if (canManageIntegrations) return true

    // NOTE: employee with canImportBillingReceipts can update only state and settings fields
    if (operation === 'update' && canImportBillingReceipts) {
        const inaccessibleUpdatedFields = omit(originalInput, ['dv', 'sender', 'state', 'settings'])

        if (isEmpty(inaccessibleUpdatedFields)) return true
    }

    return false
}

async function canManageContextProblem ({ authentication:  { item: user }, originalInput }) {
    // Problem field is automatically set, so you can only resolve issue (set it to null)
    if (get(originalInput, ['currentProblem', 'create']) || get(originalInput, ['currentProblem', 'connect'])) {
        return false
    }

    return (user.isAdmin || user.isSupport || user.type === SERVICE)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBillingIntegrationOrganizationContexts,
    canManageBillingIntegrationOrganizationContexts,
    canManageContextProblem,
}
