/**
 * Generated by `createschema billing.BillingReceiptFile 'file:File;context:Relationship:BillingIntegrationOrganizationContext:CASCADE;receipt:Relationship:BillingReceipt:CASCADE;controlSum:Text'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { canReadBillingEntity, canManageBillingEntityWithContext } = require('@condo/domains/billing/utils/accessSchema')
const { checkPermissionInUserOrganizationOrRelatedOrganization,
    queryOrganizationEmployeeFor,
    queryOrganizationEmployeeFromRelatedOrganizationFor,
} = require('@condo/domains/organization/utils/accessSchema')
const { STAFF } = require('@condo/domains/user/constants/common')


async function canReadBillingReceiptFiles ({ authentication }) {
    const user = authentication.item
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isSupport || user.isAdmin) return {}

    if (user.type === STAFF) {
        return {
            OR: [
                {
                    organization: {
                        OR: [
                            queryOrganizationEmployeeFor(user.id),
                            queryOrganizationEmployeeFromRelatedOrganizationFor(user.id),
                        ],
                    },
                },
                { createdBy: { id: user.id } },
            ],
        }
    }

    return await canReadBillingEntity(authentication)
}

async function canManageBillingReceiptFiles ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (user.type === STAFF) {
        if (operation === 'create') {
            const contextId = get(originalInput, ['context', 'connect', 'id'], null)

            if (contextId) {
                const context = await getById('BillingIntegrationOrganizationContext', contextId)
                const organizationId = get(context, 'organization', null)

                return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organizationId, 'canManageBillingReceiptFiles')
            }

            return true
        }

        const receiptFile = await getById('BillingReceiptFile', itemId)
        if (!receiptFile) return false

        const { createdBy, organization } = receiptFile
        if (!organization) return createdBy === user.id

        return await checkPermissionInUserOrganizationOrRelatedOrganization(user.id, organization, 'canManageBillingReceiptFiles')
    }
    return await canManageBillingEntityWithContext({ authentication: { item: user }, originalInput, operation, itemId })
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBillingReceiptFiles,
    canManageBillingReceiptFiles,
}
