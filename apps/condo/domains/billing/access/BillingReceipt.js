/**
 * Generated by `createschema billing.BillingReceipt 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; importId?:Text; property:Relationship:BillingProperty:CASCADE; account:Relationship:BillingAccount:CASCADE; period:CalendarDay; raw:Json; toPay:Text; services:Json; meta:Json'`
 */

const { canManageBillingEntityWithContext } = require('@condo/domains/billing/utils/accessSchema')

async function canReadBillingReceipts ({ authentication: { item: user } }) {
    if (!user) return false
    if (user.isAdmin) return true

    const resident = {} // find resident by user
    const billingAccount = { id: 'test', unitName: 'test' } // find billing account by resident

    return {
        OR: [
            { context: { organization: { employees_some: { user: { id: user.id }, role: { canManageIntegrations: true }, deletedAt: null, isBlocked: false } } } },
            { context: { integration: { accessRights_some: { user: { id: user.id } } } } },
            { billingAccount: billingAccount },
        ],
    }
}

async function canManageBillingReceipts ({ authentication: { item: user }, operation, originalInput, listKey, itemId, context }) {
    return await canManageBillingEntityWithContext({
        user,
        operation,
        itemId,
        originalInput,
        schemaWithContextName: listKey,
        context,
    })
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBillingReceipts,
    canManageBillingReceipts,
}
