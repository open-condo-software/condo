/**
 * Generated by `createschema billing.BillingProperty 'context:Relationship:BillingIntegrationOrganizationContext:CASCADE; importId?:Text; bindingId:Text; address:Text; raw:Json; meta:Json'`
 */
import { get } from 'lodash'

const { getById } = require('@core/keystone/schema')
const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')
const { checkBillingIntegrationAccessRight } = require('@condo/domains/billing/utils/accessSchema')

async function canReadBillingProperties ({ authentication: { item: user } }) {
    if (!user) return false
    if (user.isAdmin) return true
    return {
        OR: [
            { context: { organization: { employees_some: { user: { id: user.id }, role: { canManageIntegrations: true } } } } },
            { context: { integration: { accessRights_some: { user: { id: user.id } } } } },
        ],
    }
}

async function canManageBillingProperties ({ authentication: { item: user }, operation, originalInput, itemId }) {
    if (!user) return false
    if (user.isAdmin) return true
    let contextId
    if (operation === 'create') {
        // NOTE: can only be created by the organization integration manager
        contextId = get(originalInput, ['context', 'connect', 'id'])
    } else if (operation === 'update') {
        // NOTE: can update by the organization integration manager OR the integration account
        if (!itemId) return false
        const itemWithContext = await getById('BillingProperty', itemId)
        contextId = get(itemWithContext, ['context'])
    }
    const context = await getById('BillingIntegrationOrganizationContext', contextId)
    if (!context) return false
    const { organization: organizationId, integration: integrationId } = context
    const canManageIntegrations = await checkOrganizationPermission(user.id, organizationId, 'canManageIntegrations')
    if (canManageIntegrations) return true
    return await checkBillingIntegrationAccessRight(user.id, integrationId)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBillingProperties,
    canManageBillingProperties,
}


