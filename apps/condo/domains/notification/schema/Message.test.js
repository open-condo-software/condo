/**
 * Generated by `createschema notification.Message 'organization?:Relationship:Organization:CASCADE; property?:Relationship:Property:CASCADE; ticket?:Relationship:Ticket:CASCADE; user:Relationship:User:CASCADE; type:Text; meta:Json; channels:Json; status:Select:sending,planned,sent,canceled; deliveredAt:DateTimeUtc;'`
 */
const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowGraphQLRequestError,
    expectToThrowInternalError,
    expectToThrowAuthenticationErrorToObjects, catchErrorFrom,
} = require('@open-condo/keystone/test.utils')

const { DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE } = require('@condo/domains/common/constants/errors')
const { INVITE_NEW_EMPLOYEE_MESSAGE_TYPE, VOIP_INCOMING_CALL_MESSAGE_TYPE } = require('@condo/domains/notification/constants/constants')
const { Message, createTestMessage, updateTestMessage } = require('@condo/domains/notification/utils/testSchema')
const { makeClientWithRegisteredOrganization, createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    createTestUserRightsSet,
    updateTestUser,
} = require('@condo/domains/user/utils/testSchema')

describe('Message', () => {
    let admin
    let user
    let anonymous
    let permittedClient

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        user = await makeClientWithRegisteredOrganization()
        anonymous = await makeClient()
        permittedClient = await makeClientWithNewRegisteredAndLoggedInUser()

        const [rightsSet] = await createTestUserRightsSet(admin, {
            canReadMessages: true,
        })

        await updateTestUser(admin, permittedClient.user.id, {
            rightsSet: { connect: { id: rightsSet.id } },
        })
    })

    test('admin: create Message', async () => {
        const [obj, attrs] = await createTestMessage(admin)
        expect(obj.id).toMatch(UUID_RE)
        expect(obj.dv).toEqual(1)
        expect(obj.sender).toEqual(attrs.sender)
        expect(obj.v).toEqual(1)
        expect(obj.newId).toEqual(null)
        expect(obj.deletedAt).toEqual(null)
        expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
        expect(obj.createdAt).toMatch(DATETIME_RE)
        expect(obj.updatedAt).toMatch(DATETIME_RE)
        expect(obj.status).toEqual('sending')
        expect(obj.lang).toEqual('en')
        expect(obj.user).toEqual(null)
        expect(obj.email).toEqual(attrs.email)
        expect(obj.phone).toEqual(null)
        expect(obj.processingMeta).toEqual(null)
        expect(obj.deliveredAt).toEqual(null)
        expect(obj.sentAt).toEqual(null)
        expect(obj.readAt).toEqual(null)
    })

    test('cannot connect another organization', async () => {
        const [obj] = await createTestMessage(admin)
        const [newOrganization] = await createTestOrganization(admin)
        const payload = {
            organization: { connect: newOrganization.id },
        }
        await catchErrorFrom(async () => {
            await updateTestMessage(admin, obj.id, payload)
        }, (e) => {
            expect(e.errors[0].message).toContain('Field "organization" is not defined by type "MessageUpdateInput"')
        })
    })


    test('cannot disconnect organization', async () => {
        const [obj] = await createTestMessage(admin)
        await createTestOrganization(admin)
        const payload = {
            organization: { disconnectAll: true },
        }
        await catchErrorFrom(async () => {
            await updateTestMessage(admin, obj.id, payload)
        }, (e) => {
            expect(e.errors[0].message).toContain('Field "organization" is not defined by type "MessageUpdateInput"')
        })
    })

    test('admin: update Message', async () => {
        const [objCreated] = await createTestMessage(admin)
        const [obj] = await updateTestMessage(admin, objCreated.id, { email: 'new.user.mail@example.org' })
        expect(obj.email).toEqual('new.user.mail@example.org')
    })

    test('user: create Message', async () => {
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await createTestMessage(user)
        })
    })

    test('anonymous: create Message', async () => {
        await expectToThrowAuthenticationErrorToObj(async () => {
            await createTestMessage(anonymous)
        })
    })

    test('user: read Message', async () => {
        const [obj, attrs] = await createTestMessage(admin, { user: { connect: { id: user.user.id } } })

        const obj1 = await Message.getOne(user, { id: obj.id })

        expect(obj1.type).toEqual(INVITE_NEW_EMPLOYEE_MESSAGE_TYPE)
        expect(obj1.id).toMatch(obj.id)
        expect(obj1.dv).toEqual(1)
        expect(obj1.sender).toEqual(attrs.sender)
        expect(obj1.v).toEqual(1)
        expect(obj1.newId).toEqual(null)
        expect(obj1.deletedAt).toEqual(null)
        expect(obj1.createdBy.id).toMatch(admin.user.id)
        expect(obj1.updatedBy.id).toMatch(admin.user.id)
        expect(obj1.createdAt).toMatch(obj.createdAt)
        expect(obj1.updatedAt).toMatch(obj.updatedAt)
    })

    test('anonymous: read Message', async () => {
        await expectToThrowAuthenticationErrorToObjects(async () => {
            await Message.getAll(anonymous)
        })
    })

    test('user: update Message', async () => {
        const [objCreated] = await createTestMessage(admin, { user: { connect: { id: user.user.id } } })

        const payload = {}
        await expectToThrowAccessDeniedErrorToObj(async () => {
            await updateTestMessage(user, objCreated.id, payload)
        })
    })

    test('anonymous: update Message', async () => {
        const [objCreated] = await createTestMessage(admin)

        const payload = {}
        await expectToThrowAuthenticationErrorToObj(async () => {
            await updateTestMessage(anonymous, objCreated.id, payload)
        })
    })

    test('user: delete Message', async () => {
        const [objCreated] = await createTestMessage(admin, { user: { connect: { id: user.user.id } } })

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await Message.delete(user, objCreated.id)
        })
    })

    test('anonymous: delete Message', async () => {
        const [objCreated] = await createTestMessage(admin)

        await expectToThrowAccessDeniedErrorToObj(async () => {
            await Message.delete(anonymous, objCreated.id)
        })
    })

    test('admin: create with wrong sender', async () => {
        await expectToThrowGraphQLRequestError(
            async () => await createTestMessage(admin, { sender: 'invalid' }),
            'Variable "$data" got invalid value "invalid" at "data.sender"; Expected type "SenderFieldInput" to be an object.',
        )
    })

    test('User with direct rights set can read specific message types', async () => {
        const [wrongMessage] = await createTestMessage(admin)
        const [correctMessage] = await createTestMessage(admin, {
            type: VOIP_INCOMING_CALL_MESSAGE_TYPE,
        })

        const messages = await Message.getAll(permittedClient, { id_in: [wrongMessage.id, correctMessage.id] })
        expect(messages).toHaveLength(1)
        expect(messages).toEqual([
            expect.objectContaining({ id: correctMessage.id }),
        ])
    })

    describe('Message constraints', () => {
        it('checks Message constraints with non-null uniqKey and user', async () => {
            const uniqKey = faker.datatype.uuid()

            const [obj] = await createTestMessage(admin, { user: { connect: { id: user.user.id } }, uniqKey })

            expect(obj.uniqKey).toMatch(uniqKey)
            expect(obj.user.id).toMatch(user.user.id)

            await expectToThrowInternalError(
                async () => await createTestMessage(admin, { user: { connect: { id: user.user.id } }, uniqKey }),
                DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
            )
        })

        it('checks Message constraints with non-null uniqKey and nullish user', async () => {
            const uniqKey = faker.datatype.uuid()

            const [obj] = await createTestMessage(admin, { user: null, uniqKey })

            expect(obj.uniqKey).toMatch(uniqKey)
            expect(obj.user).toBeNull()

            await expectToThrowInternalError(
                async () => await createTestMessage(admin, { user: null, uniqKey }),
                DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
            )
        })

        it('checks that Message constraints with non-null uniqKey and nullish/non-null user do not interfere', async () => {
            const uniqKey = faker.datatype.uuid()

            const [obj] = await createTestMessage(admin, { user: { connect: { id: user.user.id } }, uniqKey })

            expect(obj.uniqKey).toMatch(uniqKey)
            expect(obj.user.id).toMatch(user.user.id)

            const [obj1] = await createTestMessage(admin, { uniqKey })

            expect(obj1.uniqKey).toMatch(uniqKey)
            expect(obj1.user).toBeNull()

            await expectToThrowInternalError(
                async () => await createTestMessage(admin, { user: { connect: { id: user.user.id } }, uniqKey }),
                DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
            )

            await expectToThrowInternalError(
                async () => await createTestMessage(admin, { uniqKey }),
                DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
            )
        })

        it('checks that there is no Message constraints for both nullish uniqKey and user', async () => {
            const [obj] = await createTestMessage(admin, { user: null, uniqKey: null })

            expect(obj.uniqKey).toBeNull()
            expect(obj.user).toBeNull()

            const [obj1] = await createTestMessage(admin, { user: null, uniqKey: null })

            expect(obj1.uniqKey).toBeNull()
            expect(obj1.user).toBeNull()
            expect(obj1.type).toEqual(obj.type)

        })
    })
})
