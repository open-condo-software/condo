/**
 * Generated by `createschema notification.NotificationUserSetting 'user:Relationship:User:CASCADE; messageType:Text; messageTransport:Text; isEnabled:Checkbox'`
 */
const dayjs = require('dayjs')
const get = require('lodash/get')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/notification/access/NotificationUserSetting')
const { MESSAGE_TRANSPORTS, MESSAGE_TYPES } = require('@condo/domains/notification/constants/constants')
const {
    NO_NEED_TO_ENABLE_NOTIFICATIONS,
} = require('@condo/domains/notification/constants/errors')

const ERRORS = {
    NO_NEED_TO_ENABLE_NOTIFICATIONS: {
        code: BAD_USER_INPUT,
        type: NO_NEED_TO_ENABLE_NOTIFICATIONS,
        message: 'No need to enable notifications. All notifications enabled by default. You may just delete this setting instead.',
    },
}

const NotificationUserSetting = new GQLListSchema('NotificationUserSetting', {
    schemaDoc: 'User controlled notifications settings',
    fields: {

        user: {
            schemaDoc: 'The user the settings will apply for',
            type: 'Relationship',
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        messageType: {
            schemaDoc: `Affected message type. Possible values are: ${MESSAGE_TYPES.join(',')}`,
            type: 'Select',
            options: MESSAGE_TYPES,
            isRequired: false,
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true, max_length: 100 },
        },

        messageTransport: {
            schemaDoc: `Affected message transport. Possible values are: ${MESSAGE_TRANSPORTS.join(',')}`,
            type: 'Select',
            options: MESSAGE_TRANSPORTS,
            isRequired: false,
            knexOptions: { isNotNullable: false },
            kmigratorOptions: { null: true },
        },

        isEnabled: {
            schemaDoc: 'Is notification enabled',
            type: 'Checkbox',
            isRequired: false,
            defaultValue: true,
        },

    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['user', 'messageType', 'messageTransport'],
                name: 'NotificationUserSetting_unique_user_messageType_messageTransport',
            },
            {
                type: 'models.CheckConstraint',
                check: 'Q(messageType__isnull=False) | Q(messageTransport__isnull=False)',
                name: 'has_messageType_or_messageTransport',
            },
        ],
        indexes: [
            {
                type: 'BTreeIndex',
                fields: ['user', 'messageType'],
                name: 'user_messageType_idx',
            },
        ],
    },
    hooks: {
        resolveInput: async (args) => {
            const { resolvedData, operation, existingItem } = args

            if (operation === 'update') {
                const isEnabled = get(resolvedData, 'isEnabled')
                if (isEnabled) {
                    // All notifications enabled by default
                    // So, in the case the user enables some notification, we just delete this setting
                    // !!! This behavior is actual as long we only control if the message enabled
                    resolvedData['deletedAt'] = dayjs().toISOString()
                }
            }

            return resolvedData
        },
        validateInput: async (args) => {
            const { resolvedData, operation, existingItem, context } = args

            const isEnabled = get(resolvedData, 'isEnabled')

            // This is a temporary check.
            // It is actual as long we only control if the message enabled
            // All messages are enabled by default, so there is no needed to create model with isEnabled=true
            if (isEnabled) {
                throw new GQLError(ERRORS.NO_NEED_TO_ENABLE_NOTIFICATIONS, context)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadNotificationUserSettings,
        create: access.canManageNotificationUserSettings,
        update: access.canManageNotificationUserSettings,
        delete: false,
        auth: true,
    },
})

module.exports = {
    NotificationUserSetting,
}
