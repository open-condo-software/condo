/**
 * Generated by `createschema notification.TelegramUserChat 'user:Relationship:User:CASCADE;telegramChatId:Text;'`
 */

const { Text, Relationship } = require('@keystonejs/fields')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/notification/access/TelegramUserChat')


const TelegramUserChat = new GQLListSchema('TelegramUserChat', {
    schemaDoc: 'Link between condo user and user\'s telegram chat with bot',
    fields: {
        user: {
            schemaDoc: 'Condo user',
            type: Relationship,
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
        telegramChatId: {
            schemaDoc: 'Id of user\'s telegram chat with bot',
            type: Text,
            isRequired: true,
            isUnique: true,
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadTelegramUserChats,
        create: access.canManageTelegramUserChats,
        update: access.canManageTelegramUserChats,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TelegramUserChat,
}
