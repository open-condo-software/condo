/**
 * Generated by `createschema notification.TelegramUserChat 'user:Relationship:User:CASCADE;telegramChatId:Text;'`
 */
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/notification/access/TelegramUserChat')


const TelegramUserChat = new GQLListSchema('TelegramUserChat', {
    schemaDoc: 'Links a user to their Telegram chat with the bot.',
    fields: {
        user: {
            schemaDoc: 'User connected to the Telegram chat.',
            type: 'Relationship',
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
        telegramChatId: {
            schemaDoc: 'Identifier of the user\'s Telegram chat with the bot.',
            type: 'Text',
            isRequired: true,
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['user'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'TelegramUserChat_unique_user',
            },
            {
                type: 'models.UniqueConstraint',
                fields: ['telegramChatId'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'TelegramUserChat_unique_telegramChatId',
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadTelegramUserChats,
        create: access.canManageTelegramUserChats,
        update: access.canManageTelegramUserChats,
        delete: false,
        auth: true,
    },
})

module.exports = {
    TelegramUserChat,
}
