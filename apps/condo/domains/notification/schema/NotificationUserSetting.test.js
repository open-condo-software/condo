/**
 * Generated by `createschema notification.NotificationUserSetting 'user:Relationship:User:CASCADE; messageType:Text; messageTransport:Text; isEnabled:Checkbox'`
 */

const { faker } = require('@faker-js/faker')

const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    waitFor,
    expectValuesOfCommonFields, expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const {
    NotificationUserSetting,
    createTestNotificationUserSetting,
    updateTestNotificationUserSetting,
} = require('@condo/domains/notification/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
} = require('@condo/domains/user/utils/testSchema')

let adminClient, supportClient, userClient, anonymousClient

describe('NotificationUserSetting', () => {

    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymousClient = await makeClient()
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestNotificationUserSetting(adminClient)

                expectValuesOfCommonFields(obj, attrs, adminClient)
            })

            test('support can', async () => {
                const [obj, attrs] = await createTestNotificationUserSetting(supportClient)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: supportClient.user.id }))
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [obj, attrs] = await createTestNotificationUserSetting(client)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestNotificationUserSetting(anonymousClient)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [objCreated] = await createTestNotificationUserSetting(adminClient)

                const [obj, attrs] = await updateTestNotificationUserSetting(adminClient, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
            })

            test('support can', async () => {
                const [objCreated] = await createTestNotificationUserSetting(adminClient)

                const [obj, attrs] = await updateTestNotificationUserSetting(supportClient, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: supportClient.user.id }))
            })

            test('user can (own)', async () => {
                const [objCreated] = await createTestNotificationUserSetting(userClient)

                const [obj, attrs] = await updateTestNotificationUserSetting(userClient, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
            })

            test('user can\'t (others)', async () => {
                const [objCreated] = await createTestNotificationUserSetting(userClient)

                const otherUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestNotificationUserSetting(otherUserClient, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestNotificationUserSetting(adminClient)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestNotificationUserSetting(anonymousClient, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [objCreated] = await createTestNotificationUserSetting(adminClient)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NotificationUserSetting.delete(adminClient, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestNotificationUserSetting(adminClient)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NotificationUserSetting.delete(userClient, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestNotificationUserSetting(adminClient)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NotificationUserSetting.delete(anonymousClient, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [obj] = await createTestNotificationUserSetting(adminClient)

                const objs = await NotificationUserSetting.getAll(adminClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('user can', async () => {
                const otherUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const [obj] = await createTestNotificationUserSetting(otherUserClient)

                const objs = await NotificationUserSetting.getAll(otherUserClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                })
            })

            test('user can\'t read other user\'s data', async () => {
                const otherUserClient = await makeClientWithNewRegisteredAndLoggedInUser()

                await createTestNotificationUserSetting(userClient)
                const objs = await NotificationUserSetting.getAll(otherUserClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(0)
            })

            test('anonymous can\'t', async () => {
                await createTestNotificationUserSetting(adminClient)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await NotificationUserSetting.getAll(anonymousClient, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            const otherAdminClient = await makeLoggedInAdminClient()
            await expectToThrowGQLError(
                async () => await createTestNotificationUserSetting(otherAdminClient, { dv: 42 }),
                {
                    code: 'BAD_USER_INPUT',
                    type: 'DV_VERSION_MISMATCH',
                    message: 'Wrong value for data version number',
                    mutation: 'createNotificationUserSetting',
                    variable: ['data', 'dv'],
                },
            )
        })

        test('must throw an error on incorrect message type', async () => {
            await expectToThrowGQLError(
                async () => await createTestNotificationUserSetting(adminClient, { messageType: faker.random.word() }),
                {
                    code: 'BAD_USER_INPUT',
                    type: 'WRONG_MESSAGE_TYPE',
                    message: 'Wrong message type',
                },
            )
        })

        test('must throw an error on incorrect message transport', async () => {
            await expectToThrowGQLError(
                async () => await createTestNotificationUserSetting(adminClient, { messageTransport: faker.random.word() }),
                {
                    code: 'BAD_USER_INPUT',
                    type: 'WRONG_MESSAGE_TRANSPORT',
                    message: 'Wrong message transport',
                },
            )
        })

        test('must throw an error on trying to enable messages', async () => {
            await expectToThrowGQLError(
                async () => await createTestNotificationUserSetting(adminClient, { isEnabled: true }),
                {
                    code: 'BAD_USER_INPUT',
                    type: 'NO_NEED_TO_ENABLE_NOTIFICATIONS',
                    message: 'No need to enable notifications. All notifications enabled by default. You may just delete this setting instead.',
                },
            )
        })
    })

    describe('notifications', () => {
        test.todo('No message sent if disabled by user')
    })
})
