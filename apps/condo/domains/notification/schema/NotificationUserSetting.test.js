/**
 * Generated by `createschema notification.NotificationUserSetting 'user:Relationship:User:CASCADE; messageType:Text; messageTransport:Text; isEnabled:Checkbox'`
 */

const { faker } = require('@faker-js/faker')

const {
    makeClient,
    UUID_RE,
    expectValuesOfCommonFields,
    expectToThrowGQLError,
    makeLoggedInClient,
    expectToThrowGraphQLRequestError,
    expectToThrowInternalError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { NEWS_ITEM_COMMON_MESSAGE_TYPE, PUSH_TRANSPORT } = require('@condo/domains/notification/constants/constants')
const {
    NotificationUserSetting,
    createTestNotificationUserSetting,
    updateTestNotificationUserSetting,
} = require('@condo/domains/notification/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser, registerNewUser, addAdminAccess,
} = require('@condo/domains/user/utils/testSchema')

async function makeOtherLoggedInAdminClient () {
    const [user, userAttrs] = await registerNewUser(await makeClient())
    await addAdminAccess(user)
    const client = await makeLoggedInClient(userAttrs)
    client.user = user

    return client
}

let adminClient, supportClient, userClient, anonymousClient
let dummyAdminModel, dummyUserModel

describe('NotificationUserSetting', () => {

    beforeAll(async () => {
        adminClient = await makeOtherLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymousClient = await makeClient()

        const [adminModel] = await createTestNotificationUserSetting(adminClient)
        dummyAdminModel = adminModel

        const [userModel] = await createTestNotificationUserSetting(userClient)
        dummyUserModel = userModel
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const otherAdminClient = await makeOtherLoggedInAdminClient()
                const [obj, attrs] = await createTestNotificationUserSetting(otherAdminClient)

                expectValuesOfCommonFields(obj, attrs, otherAdminClient)
            })

            test('support can', async () => {
                const otherSupportClient = await makeClientWithSupportUser()
                const [obj, attrs] = await createTestNotificationUserSetting(otherSupportClient)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: otherSupportClient.user.id }))
            })

            test('user can', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()

                const [obj, attrs] = await createTestNotificationUserSetting(client)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestNotificationUserSetting(anonymousClient)
                })
            })

            test('user can\'t create settings for other user', async () => {
                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                const otherClient = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNotificationUserSetting(client, { user: { connect: { id: otherClient.user.id } } })
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [obj, attrs] = await updateTestNotificationUserSetting(adminClient, dummyAdminModel.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
            })

            test('support can', async () => {
                const otherAdminClient = await makeOtherLoggedInAdminClient()
                const [guineaPig] = await createTestNotificationUserSetting(otherAdminClient)

                const [obj, attrs] = await updateTestNotificationUserSetting(supportClient, guineaPig.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: supportClient.user.id }))
            })

            test('user can (own)', async () => {
                const [obj, attrs] = await updateTestNotificationUserSetting(userClient, dummyUserModel.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
            })

            test('user can\'t (others)', async () => {
                const otherUserClient = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestNotificationUserSetting(otherUserClient, dummyUserModel.id)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestNotificationUserSetting(anonymousClient, dummyAdminModel.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NotificationUserSetting.delete(adminClient, dummyAdminModel.id)
                })
            })

            test('user can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NotificationUserSetting.delete(userClient, dummyAdminModel.id)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NotificationUserSetting.delete(anonymousClient, dummyAdminModel.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const objs = await NotificationUserSetting.getAll(adminClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: dummyAdminModel.id,
                    }),
                ]))
            })

            test('user can', async () => {
                const objs = await NotificationUserSetting.getAll(userClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: dummyUserModel.id,
                })
            })

            test('user can\'t read other user\'s data', async () => {
                const otherUserClient = await makeClientWithNewRegisteredAndLoggedInUser()

                const objs = await NotificationUserSetting.getAll(otherUserClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(0)
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await NotificationUserSetting.getAll(anonymousClient, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            await expectToThrowGQLError(
                async () => await createTestNotificationUserSetting(adminClient, { dv: 42 }),
                {
                    code: 'BAD_USER_INPUT',
                    type: 'DV_VERSION_MISMATCH',
                    message: 'Wrong value for data version number',
                    mutation: 'createNotificationUserSetting',
                    variable: ['data', 'dv'],
                },
            )
        })

        test('must throw an error on incorrect message type', async () => {
            const messageType = faker.random.word()
            await expectToThrowGraphQLRequestError(
                async () => await createTestNotificationUserSetting(adminClient, { messageType }),
                `Value "${messageType}" does not exist in "NotificationUserSettingMessageTypeType" enum`,
            )
        })

        test('must throw an error on incorrect message transport', async () => {
            const messageTransport = faker.random.word()
            await expectToThrowGraphQLRequestError(
                async () => await createTestNotificationUserSetting(adminClient, { messageTransport }),
                `Value "${messageTransport}" does not exist in "NotificationUserSettingMessageTransportType" enum`,
            )
        })

        test('must throw an error on trying to enable messages', async () => {
            await expectToThrowGQLError(
                async () => await createTestNotificationUserSetting(adminClient, { isEnabled: true }),
                {
                    code: 'BAD_USER_INPUT',
                    type: 'NO_NEED_TO_ENABLE_NOTIFICATIONS',
                    message: 'No need to enable notifications. All notifications enabled by default. You may just delete this setting instead.',
                },
            )
        })
    })

    describe('Constraints tests', () => {
        test('must throw an error on trying to create setting without type and transport', async () => {
            await expectToThrowInternalError(
                async () => await createTestNotificationUserSetting(adminClient, {
                    messageType: null,
                    messageTransport: null,
                }),
                'violates check constraint "has_messageType_or_messageTransport"',
            )
        })

        test('can\'t create the model with the same user, messageType, messageTransport', async () => {
            const otherAdminClient = await makeOtherLoggedInAdminClient()

            const modelAttrs = { messageType: NEWS_ITEM_COMMON_MESSAGE_TYPE, messageTransport: PUSH_TRANSPORT }
            await createTestNotificationUserSetting(otherAdminClient, modelAttrs)
            await expectToThrowInternalError(
                async () => await createTestNotificationUserSetting(otherAdminClient, modelAttrs),
                'violates unique constraint "NotificationUserSetting_unique_user_messageType_messageTranspor"',
            )
        })

        test('can\'t create the model with the same user, messageType', async () => {
            const otherAdminClient = await makeOtherLoggedInAdminClient()

            const modelAttrs = { messageType: NEWS_ITEM_COMMON_MESSAGE_TYPE, messageTransport: null }
            await createTestNotificationUserSetting(otherAdminClient, modelAttrs)
            await expectToThrowInternalError(
                async () => await createTestNotificationUserSetting(otherAdminClient, modelAttrs),
                'violates unique constraint "NotificationUserSetting_unique_user_messageType"',
            )
        })

        test('can\'t create the model with the same user, messageTransport', async () => {
            const otherAdminClient = await makeOtherLoggedInAdminClient()

            const modelAttrs = { messageType: null, messageTransport: PUSH_TRANSPORT }
            await createTestNotificationUserSetting(otherAdminClient, modelAttrs)
            await expectToThrowInternalError(
                async () => await createTestNotificationUserSetting(otherAdminClient, modelAttrs),
                'violates unique constraint "NotificationUserSetting_unique_user_messageTransport"',
            )
        })

        test('can create the model with the same settings after the previous one was soft-deleted', async () => {
            const otherAdminClient = await makeOtherLoggedInAdminClient()

            const modelAttrs = { messageType: NEWS_ITEM_COMMON_MESSAGE_TYPE, messageTransport: PUSH_TRANSPORT }
            const [obj] = await createTestNotificationUserSetting(otherAdminClient, modelAttrs)
            const [deletedObj] = await updateTestNotificationUserSetting(otherAdminClient, obj.id, { deletedAt: 'true' })
            const [obj2] = await createTestNotificationUserSetting(otherAdminClient, modelAttrs)

            expect(obj2.id).not.toEqual(deletedObj.id)
        })
    })
})
