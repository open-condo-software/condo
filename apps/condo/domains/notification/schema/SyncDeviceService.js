/**
 * Generated by `createservice notification.SyncDeviceService --type mutations`
 */
const get = require('lodash/get')

const { GQLCustomSchema, getById } = require('@core/keystone/schema')

const access = require('@condo/domains/notification/access/SyncDeviceService')
const { Device: DeviceAPI } = require('@condo/domains/notification/utils/serverSchema')

const { PUSH_TRANSPORT_TYPES } = require('../constants/constants')

const SyncDeviceService = new GQLCustomSchema('SyncDeviceService', {
    types: [
        {
            access: true,
            type: `enum PushTransportType { ${PUSH_TRANSPORT_TYPES.join(' ')} }`,
        },
        {
            access: true,
            type: 'input SyncDeviceInput { dv: Int!, sender: SenderFieldInput!, deviceId: String!, pushToken: String, pushTransport: PushTransportType, meta: JSON }',
        },
    ],
    
    mutations: [
        {
            access: access.canSyncDevice,
            schema: 'syncDevice(data: SyncDeviceInput!): Device',
            resolver: async (parent, args, context) => {
                const { data: { dv, sender, deviceId, pushToken, pushTransport, meta } } = args
                const userId = get(context, 'authedItem.id', null)
                const owner = userId ? { disconnectAll: true, connect: { id: userId } } : null
                const attrs = { dv, sender, deviceId, pushToken, pushTransport, meta, owner }
                const where = { deviceId, pushTransport }
                const data = await DeviceAPI.updateOrCreate(context, where, attrs)
                const result = await getById('Device', data.id)

                return result
            },
        },
    ],
    
})

module.exports = {
    SyncDeviceService,
}
