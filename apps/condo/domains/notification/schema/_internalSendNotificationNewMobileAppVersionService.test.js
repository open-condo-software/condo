/**
 * Generated by `createservice notification._internalSendNotificationNewMobileAppVersionService --type mutations`
 */

const { faker } = require('@faker-js/faker')
const { cloneDeep } = require('lodash')

const { makeLoggedInAdminClient, makeClient, expectToThrowAuthenticationErrorToResult } = require('@open-condo/keystone/test.utils')

const { DEVICE_PLATFORM_IOS } = require('@condo/domains/notification/constants/constants')
const { _internalSendNotificationNewMobileAppVersionByTestClient, MessageBatch } = require('@condo/domains/notification/utils/testSchema')
const { createTestRemoteClient } = require('@condo/domains/notification/utils/testSchema')
const { makeClientWithResidentAccessAndProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestResident } = require('@condo/domains/resident/utils/testSchema')
const { makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')
 
describe('_internalSendNotificationNewMobileAppVersionService', () => {
    test('admin: execute', async () => {
        const admin = await makeLoggedInAdminClient()
        const userClient = await makeClientWithResidentAccessAndProperty()

        const [objCreated] = await createTestResident(admin, userClient.user, userClient.property, {
            address: userClient.property.address,
            unitName: faker.random.alphaNumeric(3),
            addressMeta: userClient.property.addressMeta,
        })

        const [obj] = await createTestRemoteClient(admin, { owner: { connect: { id: userClient.user.id } }, devicePlatform: DEVICE_PLATFORM_IOS, meta: { Build: '1.0.0(1)' } })

        const payload = {
            buildVersion: '1.1.0(1)',
        }

        const [data, attrs] = await _internalSendNotificationNewMobileAppVersionByTestClient(admin, payload)
        const batch = await MessageBatch.getOne(admin, {
            id: data.messageBatchId,
        })
        expect(batch).toBeDefined()
    })

    test('execute for organizations', async () => {
        const admin = await makeLoggedInAdminClient()
        const userClient = await makeClientWithResidentAccessAndProperty()
        const userClient2 = await makeClientWithResidentAccessAndProperty()

        const [objCreated] = await createTestResident(admin, userClient.user, userClient.property, {
            address: userClient.property.address,
            unitName: faker.random.alphaNumeric(3),
            addressMeta: userClient.property.addressMeta,
        })

        const [rc1] = await createTestRemoteClient(admin, { owner: { connect: { id: userClient.user.id } }, devicePlatform: DEVICE_PLATFORM_IOS, meta: { Build: '1.0.0(1)' } })
        const [rc2] = await createTestRemoteClient(admin, { owner: { connect: { id: userClient2.user.id } }, devicePlatform: DEVICE_PLATFORM_IOS, meta: { Build: '1.0.0(1)' } })

        const payload = {
            buildVersion: '1.1.0(1)',
            organizationIds: [userClient.organization.id],
        }

        const [data, attrs] = await _internalSendNotificationNewMobileAppVersionByTestClient(admin, payload)
        const batch = await MessageBatch.getOne(admin, {
            id: data.messageBatchId,
        })
        expect(batch).toBeDefined()
        expect(batch.targets).toHaveLength(1)
        expect(batch.targets[0]).toEqual(`rc:${rc1.id}`)
    })
 
    test('anonymous: execute', async () => {
        const client = await makeClient()
        await expectToThrowAuthenticationErrorToResult(async () => {
            await _internalSendNotificationNewMobileAppVersionByTestClient(client)
        })
    })
 
    test('support: execute', async () => {
        const admin = await makeLoggedInAdminClient()
        const userClient = await makeClientWithResidentAccessAndProperty()
        const support = await makeClientWithSupportUser()

        const [objCreated] = await createTestResident(admin, userClient.user, userClient.property, {
            address: userClient.property.address,
            unitName: faker.random.alphaNumeric(3),
            addressMeta: userClient.property.addressMeta,
        })

        const [obj] = await createTestRemoteClient(admin, { owner: { connect: { id: userClient.user.id } }, devicePlatform: DEVICE_PLATFORM_IOS, meta: { Build: '1.0.0(1)' } })

        const payload = {
            buildVersion: '1.1.0(1)',
        }

        const [data, attrs] = await _internalSendNotificationNewMobileAppVersionByTestClient(support, payload)
        const batch = await MessageBatch.getOne(admin, {
            id: data.messageBatchId,
        })
        expect(batch).toBeDefined()
    })
})