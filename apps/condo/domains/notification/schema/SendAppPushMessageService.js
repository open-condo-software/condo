/**
 * Generated by `createservice notification.KekService --type mutations`
 */

const { v4: uuid } = require('uuid')

const conf = require('@open-condo/config')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { WRONG_FORMAT, NOT_FOUND } = require('@condo/domains/common/constants/errors')
const { LOCALES } = require('@condo/domains/common/constants/locale')
const access = require('@condo/domains/notification/access/SendAppPushMessageService')
const { MESSAGE_FORWARDED_TO_SUPPORT_TYPE, MESSAGE_TYPES, VOIP_INCOMING_CALL_MESSAGE_TYPE } = require('@condo/domains/notification/constants/constants')
const { sendMessage } = require('@condo/domains/notification/utils/serverSchema')



// const ERRORS = {
//     WRONG_TYPE: {
//         mutation: 'sendAppPushMessage',
//         variable: ['data', 'type'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
//         code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@open-condo/keystone/errors'
//         type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
//         message: 'Describe what happened for developer',
//         // messageForUser: 'api.user.kek.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
//     },
// }

const SendAppPushMessageService = new GQLCustomSchema('SendAppPushMessageService', {
    types: [
        {
            access: true,
            type: `enum SendAppPushMessageType { ${VOIP_INCOMING_CALL_MESSAGE_TYPE} }`,
        },
        {
            access: true,
            type: 'input SendAppPushMessageData { body: String!, title: String }',
        },
        {
            access: true,
            type: 'input SendAppPushMessageInput { dv: Int!, sender: SenderFieldInput!, app: B2CAppWhereUniqueInput!, user: UserWhereUniqueInput!, type: SendAppPushMessageType!, data: SendAppPushMessageData!, uniqKey: String }',
        },
        {
            access: true,
            type: 'type SendAppPushMessageOutput { id: String!, status: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canSendAppPushMessage,
            schema: 'sendAppPushMessage(data: SendAppPushMessageInput!): SendAppPushMessageOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: argsData } = args
                const { dv, sender, app, user, type, data, uniqKey } = argsData

                //TODO(Kekmus) maybe need add some errors to this file and some body here

                const messageAttrs = {
                    uniqKey,
                    sender,
                    lang: 'ru',
                    type: type,
                    to: {
                        user: user,
                    },
                    meta: {
                        dv,
                        title: data.title,
                        body: data.body,
                        data: {
                            B2CAppId: app,
                            callId: uuid(),
                        },
                    },
                }

                const sendingResult = await sendMessage(context, messageAttrs)

                return {
                    id: sendingResult.id,
                    status: sendingResult.status,
                }
            },
        },
    ],
    
})

module.exports = {
    SendAppPushMessageService,
}
