/**
 * Generated by `createschema notification.MessageUserBlackList 'user?:Relationship:User:CASCADE; phone?:Text; email?:Text; description:Text'`
 */

const faker = require('faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, waitFor } = require('@condo/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects, expectToThrowInternalError, expectToThrowValidationFailureError,
} = require('@condo/domains/common/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser, createTestEmail, createTestPhone } = require('@condo/domains/user/utils/testSchema')
const { MessageUserBlackList, createTestMessageUserBlackList, updateTestMessageUserBlackList, Message } = require('@condo/domains/notification/utils/testSchema')
const { makeClientWithRegisteredOrganization, inviteNewOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema/Organization')
const { DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE, MESSAGE_ERROR_STATUS } = require('@condo/domains/notification/constants/constants')
const { MESSAGE_TYPE_IN_USER_BLACK_LIST, EMPTY_MESSAGE_USER_BLACK_LIST_FIELDS_ERROR } = require('@condo/domains/notification/constants/errors')
const { UNIQUE_CONSTRAINT_ERROR } = require('@condo/domains/common/constants/errors')

describe('MessageUserBlackList', () => {
    describe('accesses', () => {
        describe('create', () => {
            it('support can create MessageUserBlackList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const phone = createTestPhone()

                const [blackList] = await createTestMessageUserBlackList(supportClient, {
                    phone,
                })

                expect(blackList.id).toMatch(UUID_RE)
            })

            it('user cannot create MessageUserBlackList', async () => {
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMessageUserBlackList(userClient)
                })
            })

            it('anonymous cannot create MessageUserBlackList', async () => {
                const anonymousClient = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestMessageUserBlackList(anonymousClient)
                })
            })
        })

        describe('update', () => {
            it('support can update MessageUserBlackList', async () => {
                const supportClient = await makeClientWithSupportUser()

                const phone = createTestPhone()
                const description = faker.random.alphaNumeric(8)

                const [blackList] = await createTestMessageUserBlackList(supportClient, {
                    phone,
                })

                const [updatedBlackList] = await updateTestMessageUserBlackList(supportClient, blackList.id, {
                    description,
                })

                expect(updatedBlackList.description).toEqual(description)
            })

            it('user cannot update MessageUserBlackList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

                const phone = createTestPhone()
                const description = faker.random.alphaNumeric(8)

                const [blackList] = await createTestMessageUserBlackList(supportClient, {
                    phone,
                })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMessageUserBlackList(userClient, blackList.id, {
                        description,
                    })
                })
            })

            it('anonymous cannot update MessageUserBlackList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const anonymousClient = await makeClient()

                const phone = createTestPhone()
                const description = faker.random.alphaNumeric(8)

                const [blackList] = await createTestMessageUserBlackList(supportClient, {
                    phone,
                })

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestMessageUserBlackList(anonymousClient, blackList.id, {
                        description,
                    })
                })
            })
        })

        describe('read', () => {
            it('user cannot read MessageUserBlackList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
                const phone = createTestPhone()

                await createTestMessageUserBlackList(supportClient, {
                    phone,
                })

                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await MessageUserBlackList.getAll(userClient)
                })
            })

            it('anonymous cannot read MessageUserBlackList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const anonymousClient = await makeClient()
                const phone = createTestPhone()

                await createTestMessageUserBlackList(supportClient, {
                    phone,
                })

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await MessageUserBlackList.getAll(anonymousClient)
                })
            })
        })
    })

    describe('logic', () => {
        it('dont send invite notification if message type and email added in MessageUserBlackList', async () => {
            const admin = await makeLoggedInAdminClient()
            const userAttrs = {
                name: faker.name.firstName(),
                email: createTestEmail(),
                phone: createTestPhone(),
            }
            const client = await makeClientWithRegisteredOrganization()

            await createTestMessageUserBlackList(admin, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
                email: userAttrs.email,
            })

            const [employee] = await inviteNewOrganizationEmployee(client, client.organization, userAttrs)

            await waitFor(async () => {
                const messageWhere = { user: { id: employee.user.id }, type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE }
                const messages = await Message.getAll(admin, messageWhere)

                expect(messages[0].status).toEqual(MESSAGE_ERROR_STATUS)
                expect(messages[0].processingMeta.error).toEqual(MESSAGE_TYPE_IN_USER_BLACK_LIST)
            })
        })

        it('dont send any notifications to phone if MessageUserBlackList rule type is empty', async () => {
            const admin = await makeLoggedInAdminClient()
            const userAttrs = {
                name: faker.name.firstName(),
                email: createTestEmail(),
                phone: createTestPhone(),
            }
            const client = await makeClientWithRegisteredOrganization()

            await createTestMessageUserBlackList(admin, {
                email: userAttrs.email,
            })

            const [employee] = await inviteNewOrganizationEmployee(client, client.organization, userAttrs)

            await waitFor(async () => {
                const messageWhere = { user: { id: employee.user.id }, type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE }
                const messages = await Message.getAll(admin, messageWhere)

                expect(messages[0].status).toEqual(MESSAGE_ERROR_STATUS)
                expect(messages[0].processingMeta.error).toEqual(MESSAGE_TYPE_IN_USER_BLACK_LIST)
            })
        })
    })

    describe('constraints', () => {
        it('unique user and type', async () => {
            const admin = await makeLoggedInAdminClient()
            const client = await makeClientWithRegisteredOrganization()

            await createTestMessageUserBlackList(admin, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
                user: { connect: { id: client.user.id } },
            })

            await expectToThrowInternalError(async () => {
                await createTestMessageUserBlackList(admin, {
                    type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
                    user: { connect: { id: client.user.id } },
                })
            }, `${UNIQUE_CONSTRAINT_ERROR} "message_user_black_list_unique_user_and_type"`)
        })

        it('unique phone and type', async () => {
            const admin = await makeLoggedInAdminClient()
            const phone = createTestPhone()

            await createTestMessageUserBlackList(admin, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
                phone,
            })

            await expectToThrowInternalError(async () => {
                await createTestMessageUserBlackList(admin, {
                    type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
                    phone,
                })
            }, `${UNIQUE_CONSTRAINT_ERROR} "message_user_black_list_unique_phone_and_type"`)
        })

        it('unique email and type', async () => {
            const admin = await makeLoggedInAdminClient()
            const email = createTestEmail()

            await createTestMessageUserBlackList(admin, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
                email,
            })

            await expectToThrowInternalError(async () => {
                await createTestMessageUserBlackList(admin, {
                    type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
                    email,
                })
            }, `${UNIQUE_CONSTRAINT_ERROR} "message_user_black_list_unique_email_and_type"`)
        })
    })

    describe('validations', async () => {
        it('throw validation error if create MessageUserBlackList with empty user, phone and email fields', async () => {
            const supportClient = await makeClientWithSupportUser()

            await expectToThrowValidationFailureError(async () => {
                await createTestMessageUserBlackList(supportClient)
            }, EMPTY_MESSAGE_USER_BLACK_LIST_FIELDS_ERROR)
        })
    })
})
