/**
 * Generated by `createschema notification.MessageOrganizationWhiteList 'organization:Relationship:Organization:CASCADE; description:Text'`
 */

const faker = require('faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE, waitFor } = require('@condo/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj, expectToThrowAccessDeniedErrorToObjects, expectToThrowInternalError,
} = require('@condo/domains/common/utils/testSchema')

const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser, createTestEmail, createTestPhone } = require('@condo/domains/user/utils/testSchema')

const { MessageOrganizationWhiteList, createTestMessageOrganizationWhiteList, updateTestMessageOrganizationWhiteList, createTestMessageOrganizationBlackList, Message, MessageOrganizationBlackList, updateTestMessageOrganizationBlackList } = require('@condo/domains/notification/utils/testSchema')
const { createTestOrganization } = require('../../organization/utils/testSchema')
const { makeClientWithRegisteredOrganization, inviteNewOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema/Organization')
const { DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE, MESSAGE_ERROR_STATUS, MESSAGE_SENT_STATUS, EMAIL_TRANSPORT } = require('@condo/domains/notification/constants/constants')
const { MESSAGE_TYPE_IN_ORGANIZATION_BLACK_LIST } = require('@condo/domains/notification/constants/errors')
const { UNIQUE_CONSTRAINT_ERROR } = require('@condo/domains/common/constants/errors')

describe('MessageOrganizationWhiteList', () => {
    afterEach(async () => {
        const supportClient = await makeClientWithSupportUser()
        const allOrganizationsBlackList = await MessageOrganizationBlackList.getAll(supportClient, {
            organization_is_null: true,
        })

        for (const blackListRule of allOrganizationsBlackList) {
            await updateTestMessageOrganizationBlackList(supportClient, blackListRule.id, {
                deletedAt: 'true',
            })
        }
    })

    describe('accesses', () => {
        describe('create', () => {
            it('support can create MessageOrganizationWhiteList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(supportClient)

                const [whiteList] = await createTestMessageOrganizationWhiteList(supportClient, organization)

                expect(whiteList.id).toMatch(UUID_RE)
            })

            it('user cannot create MessageOrganizationWhiteList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(supportClient)
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestMessageOrganizationWhiteList(userClient, organization)
                })
            })

            it('anonymous cannot create MessageOrganizationWhiteList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(supportClient)
                const anonymousClient = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestMessageOrganizationWhiteList(anonymousClient, organization)
                })
            })
        })

        describe('update', () => {
            it('support can update MessageOrganizationWhiteList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(supportClient)

                const [whiteList] = await createTestMessageOrganizationWhiteList(supportClient, organization)
                const description = faker.random.alphaNumeric(8)

                const [updatedWhiteList] = await updateTestMessageOrganizationWhiteList(supportClient, whiteList.id, {
                    description,
                })

                expect(updatedWhiteList.description).toEqual(description)
            })

            it('user cannot update MessageOrganizationWhiteList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(supportClient)
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

                const [whiteList] = await createTestMessageOrganizationWhiteList(supportClient, organization)
                const description = faker.random.alphaNumeric(8)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestMessageOrganizationWhiteList(userClient, whiteList.id, {
                        description,
                    })
                })
            })

            it('anonymous cannot update MessageOrganizationWhiteList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(supportClient)
                const anonymousClient = await makeClient()

                const [whiteList] = await createTestMessageOrganizationWhiteList(supportClient, organization)
                const description = faker.random.alphaNumeric(8)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestMessageOrganizationWhiteList(anonymousClient, whiteList.id, {
                        description,
                    })
                })
            })
        })

        describe('read', () => {
            it('user cannot read MessageOrganizationWhiteList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(supportClient)
                const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

                await createTestMessageOrganizationWhiteList(supportClient, organization)

                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await MessageOrganizationWhiteList.getAll(userClient)
                })
            })

            it('anonymous cannot read MessageOrganizationWhiteList', async () => {
                const supportClient = await makeClientWithSupportUser()
                const [organization] = await createTestOrganization(supportClient)
                const anonymousClient = await makeClient()

                await createTestMessageOrganizationWhiteList(supportClient, organization)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await MessageOrganizationWhiteList.getAll(anonymousClient)
                })
            })
        })
    })

    describe('logic', () => {
        it('send notification if all organizations added in MessageOrganizationBlackList and organization added in MessageOrganizationWhiteList', async () => {
            const admin = await makeLoggedInAdminClient()
            const userAttrs = {
                name: faker.name.firstName(),
                email: createTestEmail(),
                phone: createTestPhone(),
            }
            const client = await makeClientWithRegisteredOrganization()

            await createTestMessageOrganizationBlackList(admin, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
            })

            await createTestMessageOrganizationWhiteList(admin, client.organization, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
            })

            const [employee] = await inviteNewOrganizationEmployee(client, client.organization, userAttrs)

            await waitFor(async () => {
                const messageWhere = { user: { id: employee.user.id }, type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE }
                const messages = await Message.getAll(admin, messageWhere)

                expect(messages[0].status).toEqual(MESSAGE_SENT_STATUS)
                expect(messages[0].processingMeta.transport).toEqual(EMAIL_TRANSPORT)
            })
        })

        it('dont send notification if organization added in MessageOrganizationBlackList and in MessageOrganizationWhiteList', async () => {
            const admin = await makeLoggedInAdminClient()
            const userAttrs = {
                name: faker.name.firstName(),
                email: createTestEmail(),
                phone: createTestPhone(),
            }
            const client = await makeClientWithRegisteredOrganization()

            await createTestMessageOrganizationBlackList(admin, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
                organization: { connect: { id: client.organization.id } },
            })

            await createTestMessageOrganizationWhiteList(admin, client.organization, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
            })

            const [employee] = await inviteNewOrganizationEmployee(client, client.organization, userAttrs)

            await waitFor(async () => {
                const messageWhere = { user: { id: employee.user.id }, type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE }
                const messages = await Message.getAll(admin, messageWhere)

                expect(messages[0].status).toEqual(MESSAGE_ERROR_STATUS)
                expect(messages[0].processingMeta.error).toEqual(MESSAGE_TYPE_IN_ORGANIZATION_BLACK_LIST)
            })
        })

        it('dont send notification if all organizations added in MessageOrganizationBlackList and organization added in deleted MessageOrganizationWhiteList', async () => {
            const admin = await makeLoggedInAdminClient()
            const userAttrs = {
                name: faker.name.firstName(),
                email: createTestEmail(),
                phone: createTestPhone(),
            }
            const client = await makeClientWithRegisteredOrganization()

            await createTestMessageOrganizationBlackList(admin, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
            })

            const [whiteListRule] = await createTestMessageOrganizationWhiteList(admin, client.organization, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
            })

            await updateTestMessageOrganizationWhiteList(admin, whiteListRule.id, {
                deletedAt: 'true',
            })

            const [employee] = await inviteNewOrganizationEmployee(client, client.organization, userAttrs)

            await waitFor(async () => {
                const messageWhere = { user: { id: employee.user.id }, type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE }
                const messages = await Message.getAll(admin, messageWhere)

                expect(messages[0].status).toEqual(MESSAGE_ERROR_STATUS)
                expect(messages[0].processingMeta.error).toEqual(MESSAGE_TYPE_IN_ORGANIZATION_BLACK_LIST)
            })
        })
    })

    describe('constraints', () => {
        it('unique organization and type', async () => {
            const admin = await makeLoggedInAdminClient()
            const client = await makeClientWithRegisteredOrganization()

            await createTestMessageOrganizationWhiteList(admin, client.organization, {
                type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
            })

            await expectToThrowInternalError(async () => {
                await createTestMessageOrganizationWhiteList(admin, client.organization, {
                    type: DIRTY_INVITE_NEW_EMPLOYEE_MESSAGE_TYPE,
                })
            }, `${UNIQUE_CONSTRAINT_ERROR} "message_organization_white_list_unique_organization_and_type"`)
        })
    })

})
