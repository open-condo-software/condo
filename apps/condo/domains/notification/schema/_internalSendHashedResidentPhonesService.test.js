/**
 * Generated by `createservice notification._internalSendHashedResidentPhonesService '--type=mutations'`
 */

const {
    makeClient,
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
    makeLoggedInAdminClient,
} = require('@open-condo/keystone/test.utils')

const { _internalSendHashedResidentPhonesByTestClient } = require('@condo/domains/notification/utils/testSchema')
const { createTestUserRightsSet, updateTestUser, makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

const TASK_NUMBER_REGEXP = /^\d+$/

 
describe('_internalSendHashedResidentPhonesService', () => {
    let admin
    let support
    let anonymous

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
    })

    test('anonymous: can not execute', async () => {
        await expectToThrowAuthenticationErrorToResult(async () => {
            await _internalSendHashedResidentPhonesByTestClient(anonymous)
        })
    })

    test('user without access right set: can not execute', async () => {
        const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

        await expectToThrowAccessDeniedErrorToResult(async () => {
            await _internalSendHashedResidentPhonesByTestClient(userClient)
        })
    })

    test('user with access right set: can execute', async () => {
        const userClient = await makeClientWithNewRegisteredAndLoggedInUser()

        const [userRightsSet] = await createTestUserRightsSet(support, { canExecute_internalSendHashedResidentPhones: true })
        await updateTestUser(admin, userClient.user.id, { rightsSet: { connect: { id: userRightsSet.id } } })

        const [data] = await _internalSendHashedResidentPhonesByTestClient(userClient)

        expect(data.taskId).toMatch(TASK_NUMBER_REGEXP)
    })
})