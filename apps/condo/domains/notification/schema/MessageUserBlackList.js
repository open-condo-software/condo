/**
 * Generated by `createschema notification.MessageUserBlackList 'user?:Relationship:User:CASCADE; phone?:Text; email?:Text; description:Text'`
 */
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/notification/access/MessageUserBlackList')
const { MESSAGE_TYPES } = require('@condo/domains/notification/constants/constants')
const { EMPTY_MESSAGE_USER_BLACK_LIST_FIELDS_ERROR } = require('@condo/domains/notification/constants/errors')
const { getMessageTypeField } = require('@condo/domains/notification/schema/fields/MessageType')

const MessageUserBlackList = new GQLListSchema('MessageUserBlackList', {
    schemaDoc: 'Rule for blocking messages (specific type or all) for user, phone or email',
    fields: {
        user: {
            schemaDoc: 'The user to whom we want to block sending messages',
            type: 'Relationship',
            ref: 'User',
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
        },

        phone: {
            schemaDoc: 'The phone number to which we want to block sending messages',
            type: 'Text',
        },

        email: {
            schemaDoc: 'Email to which we want to block the sending of messages',
            type: 'Text',
        },

        type: getMessageTypeField({
            schemaDoc: 'The type of message we want to block (null means all types)',
            isRequired: false,
        }),

        description: {
            schemaDoc: 'The reason why the entry was added to the MessageUserBlackList',
            type: 'Text',
            isRequired: true,
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['user', 'type'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'message_user_black_list_unique_user_and_type',
            },
            {
                type: 'models.UniqueConstraint',
                fields: ['phone', 'type'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'message_user_black_list_unique_phone_and_type',
            },
            {
                type: 'models.UniqueConstraint',
                fields: ['email', 'type'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'message_user_black_list_unique_email_and_type',
            },
        ],
    },
    hooks: {
        validateInput: ({ resolvedData, operation, addValidationError }) => {
            if (operation === 'create' && !resolvedData['phone'] && !resolvedData['email'] && !resolvedData['user']) {
                return addValidationError(EMPTY_MESSAGE_USER_BLACK_LIST_FIELDS_ERROR)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMessageUserBlackLists,
        create: access.canManageMessageUserBlackLists,
        update: access.canManageMessageUserBlackLists,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MessageUserBlackList,
}
