/**
 * Generated by `createservice notification.DisconnectUserFromRemoteClientService --type mutations`
 */
const { makeLoggedInAdminClient, makeClient, makeLoggedInClient } = require('@open-condo/keystone/test.utils')

const { expectToThrowGraphQLRequestError } = require('@open-condo/keystone/test.utils')

const {
    disconnectUserFromRemoteClientByTestClient,
    syncRemoteClientByTestClient,
    RemoteClient,
} = require('@condo/domains/notification/utils/testSchema')

const { getRandomTokenData } = require('../utils/testSchema/helpers')

describe('DisconnectUserFromRemoteClientService', () => {
    describe('anonymous', () => {
        it('can disconnect user from device', async () => {
            const user = await makeLoggedInClient()
            const client = await makeClient()
            const admin = await makeLoggedInAdminClient()
            const payload = getRandomTokenData({ pushToken: undefined, meta: undefined })
            const [device] = await syncRemoteClientByTestClient(user, payload)

            expect(device.id).toBeDefined()
            expect(device.owner.id).toEqual(user.user.id)

            const { deviceId, appId } = payload
            const [result] = await disconnectUserFromRemoteClientByTestClient(client, { deviceId, appId })

            expect(result.status).toEqual('ok')

            const device2 = await RemoteClient.getOne(admin, { id: device.id })
            expect(device2.owner).toBeNull()
        })

        it('ignores disconnect request for missing record with provided deviceId, appId', async () => {
            const user = await makeLoggedInClient()
            const client = await makeClient()
            const admin = await makeLoggedInAdminClient()
            const payload = getRandomTokenData({ pushToken: undefined, meta: undefined })
            const [device] = await syncRemoteClientByTestClient(user, payload)

            expect(device.id).toBeDefined()
            expect(device.owner.id).toEqual(user.user.id)

            const { deviceId, appId } = payload
            const [result] = await disconnectUserFromRemoteClientByTestClient(client, { deviceId: deviceId + 'X', appId })

            expect(result.status).toEqual('ok')

            const device2 = await RemoteClient.getOne(admin, { id: device.id })
            expect(device2.owner.id).toEqual(user.user.id)
        })

        it('fails disconnect request with missing deviceId', async () => {
            const user = await makeLoggedInClient()
            const client = await makeClient()
            const payload = getRandomTokenData({ pushToken: undefined, meta: undefined })
            const [device] = await syncRemoteClientByTestClient(user, payload)

            expect(device.id).toBeDefined()
            expect(device.owner.id).toEqual(user.user.id)

            await expectToThrowGraphQLRequestError(
                async () => await disconnectUserFromRemoteClientByTestClient(client, { deviceId: undefined, appId: 'xxxx-xxxx-xxxx-xxxxx' }),
                'Field "deviceId" of required type "String!" was not provided.',
            )
        })

        it('fails disconnect request with missing appId', async () => {
            const user = await makeLoggedInClient()
            const client = await makeClient()
            const payload = getRandomTokenData({ pushToken: undefined, meta: undefined })
            const [device] = await syncRemoteClientByTestClient(user, payload)

            expect(device.id).toBeDefined()
            expect(device.owner.id).toEqual(user.user.id)

            await expectToThrowGraphQLRequestError(
                async () => await disconnectUserFromRemoteClientByTestClient(client, { appId: undefined, deviceId: 'xxxx-xxxx-xxxx-xxxxx' }),
                'Field "appId" of required type "String!" was not provided.',
            )
        })
    })

    describe('user', () => {
        it('can disconnect user from device', async () => {
            const user = await makeLoggedInClient()
            const user1 = await makeLoggedInClient()
            const admin = await makeLoggedInAdminClient()
            const payload = getRandomTokenData({ pushToken: undefined, meta: undefined })
            const [device] = await syncRemoteClientByTestClient(user, payload)

            expect(device.id).toBeDefined()
            expect(device.owner.id).toEqual(user.user.id)

            const { deviceId, appId } = payload
            const [result] = await disconnectUserFromRemoteClientByTestClient(user1, { deviceId, appId })

            expect(result.status).toEqual('ok')

            const device2 = await RemoteClient.getOne(admin, { id: device.id })

            expect(device2.owner).toBeNull()
        })

        it('ignores disconnect request for missing record with provided deviceId', async () => {
            const user = await makeLoggedInClient()
            const user1 = await makeLoggedInClient()
            const admin = await makeLoggedInAdminClient()
            const payload = getRandomTokenData({ pushToken: undefined, meta: undefined })
            const [device] = await syncRemoteClientByTestClient(user, payload)

            expect(device.id).toBeDefined()
            expect(device.owner.id).toEqual(user.user.id)

            const { deviceId, appId } = payload
            const [result] = await disconnectUserFromRemoteClientByTestClient(user1, { deviceId: deviceId + 'X', appId })

            expect(result.status).toEqual('ok')

            const device2 = await RemoteClient.getOne(admin, { id: device.id })
            expect(device2.owner.id).toEqual(user.user.id)
        })

        it('fails disconnect request with missing deviceId', async () => {
            const user = await makeLoggedInClient()
            const user1 = await makeLoggedInClient()
            const payload = getRandomTokenData({ pushToken: undefined, meta: undefined })
            const [device] = await syncRemoteClientByTestClient(user, payload)

            expect(device.id).toBeDefined()
            expect(device.owner.id).toEqual(user.user.id)

            await expectToThrowGraphQLRequestError(
                async () => await disconnectUserFromRemoteClientByTestClient(user1, { deviceId: undefined, appId: 'xxxx-xxxx-xxxx-xxxxx' }),
                'Field "deviceId" of required type "String!" was not provided.',
            )
        })

        it('fails disconnect request with missing appId', async () => {
            const user = await makeLoggedInClient()
            const user1 = await makeLoggedInClient()
            const payload = getRandomTokenData({ pushToken: undefined, meta: undefined })
            const [device] = await syncRemoteClientByTestClient(user, payload)

            expect(device.id).toBeDefined()
            expect(device.owner.id).toEqual(user.user.id)

            await expectToThrowGraphQLRequestError(
                async () => await disconnectUserFromRemoteClientByTestClient(user1, { appId: undefined, deviceId: 'xxxx-xxxx-xxxx-xxxxx' }),
                'Field "appId" of required type "String!" was not provided.',
            )
        })
    })
})