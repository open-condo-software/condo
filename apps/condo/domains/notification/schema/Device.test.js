/**
 * Generated by `createschema notification.Device 'deviceId:Text; pushToken?:Text; pushTransport?:Select:firebase,apple,huawei; owner?:Relationship:User:SET_NULL; meta?:Json'`
 */
const faker = require('faker')
const sample = require('lodash/sample')

const { makeLoggedInAdminClient, makeClient, makeLoggedInClient, UUID_RE, DATETIME_RE } = require('@core/keystone/test.utils')

const {
    expectToThrowValidationFailureError,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowMutationError,
    expectToThrowGraphQLRequestError,
} = require('@condo/domains/common/utils/testSchema')

const { Device, createTestDevice, updateTestDevice } = require('@condo/domains/notification/utils/testSchema')

const { getRandomTokenData } = require('../utils/testSchema/helpers')
const { PUSH_TRANSPORT_TYPES } = require('../constants/constants')

const DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE = 'duplicate key value violates unique constraint'

describe('Device', () => {
    describe('Anonymous', () => {
        it('disallows to create Device directly with access denied error', async () => {
            const client = await makeClient()

            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestDevice(client)
            })
        })

        it('fails to read other`s Device', async () => {
            const admin = await makeLoggedInAdminClient()
            const [pushToken] = await createTestDevice(admin)
            const client1 = await makeClient()

            await expectToThrowAuthenticationErrorToObjects(async () => {
                await Device.getOne(client1, { id: pushToken.id })
            })
        })

        it('fails to read Devices', async () => {
            const client = await makeClient()

            await expectToThrowAuthenticationErrorToObjects(async () => {
                await Device.getAll(client)
            })
        })

        it('fails to update Device', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestDevice(admin)
            const client = await makeClient()
            const payload = {
                owner: { disconnectAll: true },
                deviceId: objCreated.deviceId,
            }

            await expectToThrowAuthenticationErrorToObj(async () => {
                await updateTestDevice(client, objCreated.id, payload)
            })
        })

        it('fails to delete Device', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestDevice(admin)
            const client = await makeClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await Device.delete(client, objCreated.id)
            })
        })
    })

    describe('User', () => {
        it('disallows to create Device directly with access denied error', async () => {
            const client = await makeLoggedInClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestDevice(client)
            })
        })

        it('fails to read other`s Device', async () => {
            const admin = await makeLoggedInAdminClient()
            const client = await makeLoggedInClient()
            const [pushToken] = await createTestDevice(admin)
            const othersDevice = await Device.getOne(client, { id: pushToken.id })

            expect(othersDevice).toBeUndefined()
        })

        it('allows to read own Device', async () => {
            const admin = await makeLoggedInAdminClient()
            const [pushToken] = await createTestDevice(admin)
            const lastDevice = await Device.getOne(admin, { id: pushToken.id })

            expect(lastDevice).toBeDefined()
            expect(lastDevice.id).toEqual(pushToken.id)
            expect(lastDevice.owner.id).toEqual(admin.user.id)
        })

        it('fails to update Device', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestDevice(admin)
            const client = await makeLoggedInClient()
            const payload = {
                owner: { disconnectAll: true },
                deviceId: objCreated.deviceId,
            }

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestDevice(client, objCreated.id, payload)
            })
        })

        it('fails to delete Device', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestDevice(admin)
            const client = await makeLoggedInClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await Device.delete(client, objCreated.id)
            })
        })
    })

    describe('Admin', () => {
        it('allows to create Device directly', async () => {
            const admin = await makeLoggedInAdminClient()

            const [obj, attrs] = await createTestDevice(admin)

            expect(obj.id).toMatch(UUID_RE)
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(1)
            expect(obj.newId).toEqual(null)
            expect(obj.deletedAt).toEqual(null)
            expect(obj.createdAt).toMatch(DATETIME_RE)
            expect(obj.updatedAt).toMatch(DATETIME_RE)
            expect(obj.owner.id).toEqual(admin.user.id)
        })

        it('checks that deviceId is required', async () => {
            const admin = await makeLoggedInAdminClient()

            await expectToThrowValidationFailureError(async () => {
                await createTestDevice(admin, { deviceId: null })
            })
        })

        it('checks that pushToken is not required', async () => {
            const admin = await makeLoggedInAdminClient()

            const [obj, attrs] = await createTestDevice(admin, { pushToken: null })

            expect(obj.id).toMatch(UUID_RE)
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(1)
            expect(obj.newId).toEqual(null)
            expect(obj.deletedAt).toEqual(null)
            expect(obj.createdAt).toMatch(DATETIME_RE)
            expect(obj.updatedAt).toMatch(DATETIME_RE)
            expect(obj.owner.id).toEqual(admin.user.id)
            expect(obj.pushToken).toBeNull()
        })

        it('checks that pushTransport is not required by itself', async () => {
            const admin = await makeLoggedInAdminClient()

            const [obj, attrs] = await createTestDevice(admin, { pushTransport: undefined })

            expect(obj.id).toMatch(UUID_RE)
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(1)
            expect(obj.newId).toEqual(null)
            expect(obj.deletedAt).toEqual(null)
            expect(obj.createdAt).toMatch(DATETIME_RE)
            expect(obj.updatedAt).toMatch(DATETIME_RE)
            expect(obj.owner.id).toEqual(admin.user.id)
            expect(obj.pushTransport).toBeNull()
        })

        it('checks that pushTransport is required if token provided', async () => {
            const admin = await makeLoggedInAdminClient()
            const extraAttrs = { ...getRandomTokenData(), pushTransport: undefined }

            await expectToThrowValidationFailureError(
                async () => await createTestDevice(admin, extraAttrs),
                '[required:noValue:pushTransport] Value is required',
            )
        })

        it('fails on invalid pushTransport value', async () => {
            const admin = await makeLoggedInAdminClient()
            const extraAttrs = { pushTransport: 'xxxxxxx' }

            await expectToThrowGraphQLRequestError(
                async () => await createTestDevice(admin, extraAttrs),
                `got invalid value "${extraAttrs.pushTransport}" at "data.pushTransport";`,
            )
        })

        it('allows to read other`s Devices', async () => {
            const admin = await makeLoggedInAdminClient()
            const admin2 = await makeLoggedInAdminClient()
            const [pushToken] = await createTestDevice(admin)
            const obj = await Device.getOne(admin2, { id: pushToken.id })

            expect(obj).toBeDefined()
            expect(obj).not.toBeNull()
            expect(obj.id).toEqual(pushToken.id)
            expect(obj.deviceId).toEqual(pushToken.deviceId)
            expect(obj.pushTransport).toEqual(pushToken.pushTransport)
            expect(obj.pushToken).toEqual(pushToken.pushToken)
            expect(obj.owner.id).toEqual(admin.user.id)
        })

        it('checks that deviceId is unique', async () => {
            const admin = await makeLoggedInAdminClient()
            const admin1 = await makeLoggedInAdminClient()
            const [objCreated] = await createTestDevice(admin)
            const extraAttrs = { deviceId: objCreated.deviceId }

            await expectToThrowMutationError(
                async () => await createTestDevice(admin1, extraAttrs),
                DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
                ['obj']
            )
        })

        it('checks that pushToken is unique', async () => {
            const admin = await makeLoggedInAdminClient()
            const admin1 = await makeLoggedInAdminClient()
            const extraAttrs = { pushToken: faker.datatype.uuid(), pushTransport: sample(PUSH_TRANSPORT_TYPES) }

            await createTestDevice(admin, extraAttrs)

            await expectToThrowMutationError(
                async () => await createTestDevice(admin1, extraAttrs),
                DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
                ['obj']
            )
        })

        it('allows to update Device', async () => {
            const admin = await makeLoggedInAdminClient()
            const admin1 = await makeLoggedInAdminClient()
            const [objCreated] = await createTestDevice(admin)
            const payload = {
                owner: { disconnectAll: true, connect: { id: admin1.user.id } },
                deviceId: objCreated.deviceId,
            }
            const [objUpdated] = await updateTestDevice(admin1, objCreated.id, payload)

            expect(objUpdated.id).toEqual(objCreated.id)
            expect(objUpdated.owner.id).toEqual(admin1.user.id)
        })
    })
})
