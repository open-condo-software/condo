/**
 * Generated by `createschema notification.MessageOrganizationWhiteList 'organization:Relationship:Organization:CASCADE; description:Text'`
 */

const { Text, Relationship, Select } = require('@keystonejs/fields')
const { GQLListSchema } = require('@condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@condo/keystone/plugins')
const { dvAndSender } = require('@condo/domains/common/schema/plugins/dvAndSender')
const access = require('@condo/domains/notification/access/MessageOrganizationWhiteList')
const { MESSAGE_TYPES } = require('@condo/domains/notification/constants/constants')


const MessageOrganizationWhiteList = new GQLListSchema('MessageOrganizationWhiteList', {
    schemaDoc: 'Rule for allowing the sending of a message by type for an organization, if there is a rule in the MessageOrganizationBlackList prohibiting the sending of messages for all organizations',
    fields: {
        organization: {
            schemaDoc: 'The organization we want to allow from sending messages',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        type: {
            schemaDoc: 'The type of message we want to allow',
            type: Select,
            options: MESSAGE_TYPES,
            dataType: 'string',
            isRequired: true,
        },

        description: {
            schemaDoc: 'The reason why the entry was added to the MessageOrganizationWhiteList',
            type: Text,
            isRequired: true,
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['organization', 'type'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'message_organization_white_list_unique_organization_and_type',
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadMessageOrganizationWhiteLists,
        create: access.canManageMessageOrganizationWhiteLists,
        update: access.canManageMessageOrganizationWhiteLists,
        delete: false,
        auth: true,
    },
})

module.exports = {
    MessageOrganizationWhiteList,
}
