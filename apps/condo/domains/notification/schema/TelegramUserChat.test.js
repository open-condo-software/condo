/**
 * Generated by `createschema notification.TelegramUserChat 'user:Relationship:User:CASCADE;telegramChatId:Text;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, catchErrorFrom } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { TelegramUserChat, createTestTelegramUserChat, updateTestTelegramUserChat } = require('@condo/domains/notification/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


describe('TelegramUserChat', () => {
    let admin, support, firstUser, secondUser, anonymous
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
    })

    describe('Create', () => {
        it('Admin can create TelegramUserChat for any user', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(admin, firstUser.user, { telegramChatId })

            expect(telegramUserChat).toBeDefined()
            expect(telegramUserChat.telegramChatId).toEqual(telegramChatId)
            expect(telegramUserChat.user.id).toEqual(firstUser.user.id)
        })

        it('User can create TelegramUserChat only for himself', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const secondUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(firstUser, firstUser.user, { telegramChatId })

            expect(telegramUserChat).toBeDefined()
            expect(telegramUserChat.telegramChatId).toEqual(telegramChatId)
            expect(telegramUserChat.user.id).toEqual(firstUser.user.id)

            await expectToThrowAccessDeniedErrorToObj(
                async () => await createTestTelegramUserChat(firstUser, secondUser.user, { telegramChatId })
            )
        })

        it('Anonymous can not create TelegramUserChat', async () => {
            const secondUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)

            await expectToThrowAuthenticationErrorToObj(
                async () => await createTestTelegramUserChat(anonymous, secondUser.user, { telegramChatId })
            )
        })
    })

    describe('Update', () => {
        it('Admin can update TelegramUserChat for any user', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(admin, firstUser.user, { telegramChatId })
            const newTelegramChatId = faker.random.alphaNumeric(8)
            const [updatedTelegramUserChat] = await updateTestTelegramUserChat(admin, telegramUserChat.id, { telegramChatId: newTelegramChatId })

            expect(updatedTelegramUserChat).toBeDefined()
            expect(updatedTelegramUserChat.telegramChatId).toEqual(newTelegramChatId)
        })

        it('User can update only TelegramUserChat with same user', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const secondUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(firstUser, firstUser.user, { telegramChatId })
            const newTelegramChatId = faker.random.alphaNumeric(8)
            const [updatedTelegramUserChat] = await updateTestTelegramUserChat(firstUser, telegramUserChat.id, { telegramChatId: newTelegramChatId })

            expect(updatedTelegramUserChat).toBeDefined()
            expect(updatedTelegramUserChat.telegramChatId).toEqual(newTelegramChatId)

            const otherTelegramChatId = faker.random.alphaNumeric(8)
            await expectToThrowAccessDeniedErrorToObj(
                async () => await updateTestTelegramUserChat(secondUser, telegramUserChat.id, { telegramChatId: otherTelegramChatId })
            )
        })

        it('Anonymous can not update TelegramUserChat', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(firstUser, firstUser.user, { telegramChatId })
            const otherTelegramChatId = faker.random.alphaNumeric(8)

            await expectToThrowAuthenticationErrorToObj(
                async () => await updateTestTelegramUserChat(anonymous, telegramUserChat.id, { telegramChatId: otherTelegramChatId })
            )
        })
    })

    describe('Soft delete', () => {
        it('Admin can soft delete TelegramUserChat for any user', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(admin, firstUser.user, { telegramChatId })
            const [deletedUserChat] = await updateTestTelegramUserChat(admin, telegramUserChat.id, { deletedAt: 'true' })

            expect(deletedUserChat).toBeDefined()
            expect(deletedUserChat.deletedAt).toBeDefined()
        })

        it('User can soft delete only TelegramUserChat with same user', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const secondUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(firstUser, firstUser.user, { telegramChatId })
            const [deletedUserChat] = await updateTestTelegramUserChat(firstUser, telegramUserChat.id, { deletedAt: 'true' })

            expect(deletedUserChat).toBeDefined()
            expect(deletedUserChat.deletedAt).toBeDefined()

            const otherTelegramChatId = faker.random.alphaNumeric(8)
            const [otherTelegramUserChat] = await createTestTelegramUserChat(secondUser, secondUser.user, { telegramChatId: otherTelegramChatId })
            await expectToThrowAccessDeniedErrorToObj(
                async () => await updateTestTelegramUserChat(firstUser, otherTelegramUserChat.id, { deletedAt: 'true' })
            )
        })

        it('Anonymous can not soft delete TelegramUserChat', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(firstUser, firstUser.user, { telegramChatId })

            await expectToThrowAuthenticationErrorToObj(
                async () => await updateTestTelegramUserChat(anonymous, telegramUserChat.id, { deletedAt: 'true' })
            )
        })
    })

    describe('Read', () => {
        it('Admin can read all TelegramUserChats', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(firstUser, firstUser.user, { telegramChatId })

            const readTelegramUserChat = await TelegramUserChat.getOne(admin, { id: telegramUserChat.id })

            expect(readTelegramUserChat).toBeDefined()
        })

        it('Support can read all TelegramUserChats', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(firstUser, firstUser.user, { telegramChatId })

            const readTelegramUserChat = await TelegramUserChat.getOne(support, { id: telegramUserChat.id })

            expect(readTelegramUserChat).toBeDefined()
        })

        it('User can read only TelegramUserChats with same user', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const secondUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(firstUser, firstUser.user, { telegramChatId })
            const otherTelegramChatId = faker.random.alphaNumeric(8)
            const [otherTelegramUserChat] = await createTestTelegramUserChat(secondUser, secondUser.user, { telegramChatId: otherTelegramChatId })

            const readTelegramUserChats = await TelegramUserChat.getAll(firstUser, { id_in: [telegramUserChat.id, otherTelegramUserChat.id] })

            expect(readTelegramUserChats).toBeDefined()
            expect(readTelegramUserChats).toHaveLength(1)
            expect(readTelegramUserChats[0].id).toEqual(telegramUserChat.id)
        })

        it('Anonymous can not read TelegramUserChats', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            const [telegramUserChat] = await createTestTelegramUserChat(firstUser, firstUser.user, { telegramChatId })

            await expectToThrowAuthenticationErrorToObjects(
                async () => await TelegramUserChat.getOne(anonymous, { id: telegramUserChat.id })
            )
        })
    })

    describe('Constraints', () => {
        it('Unique telegramChatId field', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const secondUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId = faker.random.alphaNumeric(8)
            await createTestTelegramUserChat(admin, firstUser.user, { telegramChatId })

            await catchErrorFrom(async () => {
                await createTestTelegramUserChat(admin, secondUser.user, { telegramChatId })
            }, (caught) => {
                expect(caught.errors[0].message).toContain('duplicate key value violates unique constraint "TelegramUserChat_unique_telegramChatId"')
            })
        })

        it('Unique user field', async () => {
            const firstUser = await makeClientWithNewRegisteredAndLoggedInUser()
            const telegramChatId1 = faker.random.alphaNumeric(8)
            const telegramChatId2 = faker.random.alphaNumeric(8)
            await createTestTelegramUserChat(admin, firstUser.user, { telegramChatId: telegramChatId1 })

            await catchErrorFrom(async () => {
                await createTestTelegramUserChat(admin, firstUser.user, { telegramChatId: telegramChatId2 })
            }, (caught) => {
                expect(caught.errors[0].message).toContain('duplicate key value violates unique constraint "TelegramUserChat_unique_user"')
            })
        })
    })
})
