// noinspection DuplicatedCode
/**
 * Generated by `createservice notification.SyncDeviceService --type mutations`
 */
const faker = require('faker')

const { makeClient, makeLoggedInClient, makeLoggedInAdminClient } = require('@core/keystone/test.utils')

const { Device, syncDeviceByTestClient } = require('@condo/domains/notification/utils/testSchema')

const { getRandomTokenData } = require('../utils/testSchema/helpers')

describe('SyncDeviceService', () => {
    describe('Anonymous', () => {
        it('registers deviceId + pushTransport (no pushToken/meta | pushToken | meta | pushToken + meta)', async () => {
            const client = await makeClient()
            const payload = getRandomTokenData({ pushToken: null, meta: null }) // no meta or pushToken
            const payload1 = getRandomTokenData({ meta: null }) // no meta, with pushToken
            const payload2 = getRandomTokenData({ pushToken: null }) // no pushToken, with meta
            const payload3 = getRandomTokenData() // with meta & pushToken

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).toBeNull()

            const [device1] = await syncDeviceByTestClient(client, payload1)

            expect(device1.id).not.toBeFalsy()
            expect(device1.deviceId).toEqual(payload1.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toEqual(payload1.pushToken)
            expect(device1.meta).toBeNull()
            expect(device1.owner).toBeNull()

            const [device2] = await syncDeviceByTestClient(client, payload2)

            expect(device2.id).not.toBeFalsy()
            expect(device2.deviceId).toEqual(payload2.deviceId)
            expect(device2.pushTransport).toEqual(payload2.pushTransport)
            expect(device2.pushToken).toBeNull()
            expect(device2.meta).toEqual(payload2.meta)
            expect(device2.owner).toBeNull()

            const [device3] = await syncDeviceByTestClient(client, payload3)

            expect(device3.id).not.toBeFalsy()
            expect(device3.deviceId).toEqual(payload3.deviceId)
            expect(device3.pushTransport).toEqual(payload3.pushTransport)
            expect(device3.pushToken).toEqual(payload3.pushToken)
            expect(device3.meta).toEqual(payload3.meta)
            expect(device3.owner).toBeNull()
        })

        it('registers deviceId + pushTransport & updates pushToken', async () => {
            const client = await makeClient()
            const payload = getRandomTokenData({ pushToken: null, meta: null })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).toBeNull()

            const payload1 = {
                deviceId: payload.deviceId,
                pushTransport: payload.pushTransport,
                pushToken: faker.datatype.uuid(),
            }
            const [device1] = await syncDeviceByTestClient(client, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(device.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toEqual(payload1.pushToken)
            expect(device1.meta).toBeNull()
            expect(device1.owner).toBeNull()
        })

        it('registers deviceId + pushTransport & updates meta', async () => {
            const client = await makeClient()
            const payload = getRandomTokenData({ pushToken: null, meta: null })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).toBeNull()

            const payload1 = {
                deviceId: payload.deviceId,
                pushTransport: payload.pushTransport,
                meta: { pushTransport: payload.pushTransport },
            }
            const [device1] = await syncDeviceByTestClient(client, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(device.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toBeNull()
            expect(device1.meta).toEqual(payload1.meta)
            expect(device1.owner).toBeNull()
        })

        it('registers deviceId + pushTransport & updates pushToken + meta', async () => {
            const client = await makeClient()
            const payload = getRandomTokenData({ pushToken: null, meta: null })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).toBeNull()

            const pushToken = faker.datatype.uuid()
            const payload1 = {
                deviceId: payload.deviceId,
                pushTransport: payload.pushTransport,
                pushToken,
                meta: { pushTransport: payload.pushTransport, pushToken },
            }
            const [device1] = await syncDeviceByTestClient(client, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(device.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toEqual(payload1.pushToken)
            expect(device1.meta).toEqual(payload1.meta)
            expect(device1.owner).toBeNull()
        })

        it('registers deviceId + pushTransport & connects to user', async () => {
            const client = await makeClient()
            const user = await makeLoggedInClient()
            const payload = getRandomTokenData({ pushToken: null, meta: null })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).toBeNull()

            const payload1 = {
                deviceId: payload.deviceId,
                pushTransport: payload.pushTransport,
            }
            const [device1] = await syncDeviceByTestClient(user, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(device.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toBeNull()
            expect(device1.meta).toBeNull()
            expect(device1.owner).not.toBeNull()
            expect(device1.owner.id).toEqual(user.user.id)
        })

        it('registers deviceId + pushTransport & updates pushToken + connects to user', async () => {
            const client = await makeClient()
            const user = await makeLoggedInClient()
            const payload = getRandomTokenData({ meta: null, pushToken: null })
            const payload1 = getRandomTokenData({
                deviceId: payload.deviceId,
                pushTransport: payload.pushTransport,
                meta: null,
            })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).toBeNull()

            const [device1] = await syncDeviceByTestClient(user, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(payload1.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toEqual(payload1.pushToken)
            expect(device1.meta).toBeNull()
            expect(device1.owner).not.toBeNull()
            expect(device1.owner.id).toEqual(user.user.id)
        })

        it('registers deviceId + pushTransport & updates meta + connects to user', async () => {
            const client = await makeClient()
            const user = await makeLoggedInClient()
            const payload = getRandomTokenData({ meta: null, pushToken: null })
            const payload1 = getRandomTokenData({
                deviceId: payload.deviceId,
                pushTransport: payload.pushTransport,
                pushToken: null,
            })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).toBeNull()

            const [device1] = await syncDeviceByTestClient(user, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(payload1.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toBeNull()
            expect(device1.meta).toEqual(payload1.meta)
            expect(device1.owner).not.toBeNull()
            expect(device1.owner.id).toEqual(user.user.id)
        })

        it('registers deviceId + pushTransport & updates pushToken + meta + connects to user', async () => {
            const client = await makeClient()
            const user = await makeLoggedInClient()
            const payload = getRandomTokenData({ meta: null, pushToken: null })
            const payload1 = getRandomTokenData({
                deviceId: payload.deviceId,
                pushTransport: payload.pushTransport,
            })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).toBeNull()

            const [device1] = await syncDeviceByTestClient(user, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(payload1.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toEqual(payload1.pushToken)
            expect(device1.meta).toEqual(payload1.meta)
            expect(device1.owner).not.toBeNull()
            expect(device1.owner.id).toEqual(user.user.id)
        })

        it('registers two devices and clears previously registered pushToken that is being reused for second device', async () => {
            const client = await makeClient()
            const client1 = await makeClient()
            const admin = await makeLoggedInAdminClient()
            const payload = getRandomTokenData({ meta: null })
            const payload1 = getRandomTokenData({ pushToken: payload.pushToken, meta: null })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toEqual(payload.pushToken)
            expect(device.meta).toBeNull()
            expect(device.owner).toBeNull()

            const [device1] = await syncDeviceByTestClient(client1, payload1)

            expect(device1.deviceId).toEqual(payload1.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toEqual(payload1.pushToken)
            expect(device1.meta).toBeNull()
            expect(device1.owner).toBeNull()

            const device2 = Device.getOne(admin, { id: device.id })

            expect(device2.pushToken).toBeFalsy()

        })

    })

    describe('Authorized', () => {
        it('registers deviceId + pushTransport & connects to user', async () => {
            const user = await makeLoggedInClient()
            const payload = getRandomTokenData({ pushToken: null, meta: null })

            const [device] = await syncDeviceByTestClient(user, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).not.toBeNull()
            expect(device.owner.id).toEqual(user.user.id)
        })

        it('registers deviceId + pushTransport & reconnects to different user', async () => {
            const user = await makeLoggedInClient()
            const user1 = await makeLoggedInClient()
            const payload = getRandomTokenData({ pushToken: null, meta: null })

            const [device] = await syncDeviceByTestClient(user, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).not.toBeNull()
            expect(device.owner.id).toEqual(user.user.id)

            const payload1 = { deviceId: payload.deviceId, pushTransport: payload.pushTransport }
            const [device1] = await syncDeviceByTestClient(user1, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(device.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toBeNull()
            expect(device1.meta).toBeNull()
            expect(device1.owner).not.toBeNull()
            expect(device1.owner.id).toEqual(user1.user.id)
        })

        it('registers deviceId + pushTransport + (pushToken | meta | pushToken + meta) & connects to user', async () => {
            const user = await makeLoggedInClient()
            const payload = getRandomTokenData({ meta: null })
            const payload1 = getRandomTokenData({ pushToken: null })
            const payload2 = getRandomTokenData()

            const [device] = await syncDeviceByTestClient(user, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toEqual(payload.pushToken)
            expect(device.meta).toBeNull()
            expect(device.owner).not.toBeNull()
            expect(device.owner.id).toEqual(user.user.id)

            const [device1] = await syncDeviceByTestClient(user, payload1)

            expect(device1.id).not.toBeFalsy()
            expect(device1.deviceId).toEqual(payload1.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toBeNull()
            expect(device1.meta).toEqual(payload1.meta)
            expect(device1.owner).not.toBeNull()
            expect(device1.owner.id).toEqual(user.user.id)

            const [device2] = await syncDeviceByTestClient(user, payload2)

            expect(device2.id).not.toBeFalsy()
            expect(device2.deviceId).toEqual(payload2.deviceId)
            expect(device2.pushTransport).toEqual(payload2.pushTransport)
            expect(device2.pushToken).toEqual(payload2.pushToken)
            expect(device2.meta).toEqual(payload2.meta)
            expect(device2.owner).not.toBeNull()
            expect(device2.owner.id).toEqual(user.user.id)
        })

        it('registers deviceId + pushTransport & updates pushToken + reconnects to different user', async () => {
            const client = await makeLoggedInClient()
            const user = await makeLoggedInClient()
            const payload = getRandomTokenData({ meta: null, pushToken: null })
            const payload1 = getRandomTokenData({ deviceId: payload.deviceId, pushTransport: payload.pushTransport, meta: null })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).not.toBeNull()
            expect(device.owner.id).toEqual(client.user.id)

            const [device1] = await syncDeviceByTestClient(user, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(payload1.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toEqual(payload1.pushToken)
            expect(device1.meta).toBeNull()
            expect(device1.owner).not.toBeNull()
            expect(device1.owner.id).toEqual(user.user.id)
        })

        it('register deviceId + pushTransport & update meta + reconnect to different user', async () => {
            const client = await makeLoggedInClient()
            const user = await makeLoggedInClient()
            const payload = getRandomTokenData({ meta: null, pushToken: null })
            const payload1 = getRandomTokenData({ deviceId: payload.deviceId, pushTransport: payload.pushTransport, pushToken: null })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).not.toBeNull()
            expect(device.owner.id).toEqual(client.user.id)

            const [device1] = await syncDeviceByTestClient(user, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(payload1.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toBeNull()
            expect(device1.meta).toEqual(payload1.meta)
            expect(device1.owner).not.toBeNull()
            expect(device1.owner.id).toEqual(user.user.id)
        })


        it('registers deviceId + pushTransport & updates pushToken + meta + reconnects to different user', async () => {
            const client = await makeLoggedInClient()
            const user = await makeLoggedInClient()
            const payload = getRandomTokenData({ meta: null, pushToken: null })
            const payload1 = getRandomTokenData({ deviceId: payload.deviceId, pushTransport: payload.pushTransport })

            const [device] = await syncDeviceByTestClient(client, payload)

            expect(device.id).not.toBeFalsy()
            expect(device.deviceId).toEqual(payload.deviceId)
            expect(device.pushTransport).toEqual(payload.pushTransport)
            expect(device.pushToken).toBeNull()
            expect(device.meta).toBeNull()
            expect(device.owner).not.toBeNull()
            expect(device.owner.id).toEqual(client.user.id)

            const [device1] = await syncDeviceByTestClient(user, payload1)

            expect(device1.id).toEqual(device.id)
            expect(device1.deviceId).toEqual(payload1.deviceId)
            expect(device1.pushTransport).toEqual(payload1.pushTransport)
            expect(device1.pushToken).toEqual(payload1.pushToken)
            expect(device1.meta).toEqual(payload1.meta)
            expect(device1.owner).not.toBeNull()
            expect(device1.owner.id).toEqual(user.user.id)
        })
    })
})