/**
 * Generated by `createschema notification.RemoteClient 'deviceId:Text; pushToken?:Text; pushTransport?:Select:firebase,apple,huawei; owner?:Relationship:User:SET_NULL; meta?:Json'`
 */
const faker = require('faker')

const { makeLoggedInAdminClient, makeClient, makeLoggedInClient, UUID_RE, DATETIME_RE } = require('@condo/keystone/test.utils')

const { DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE } = require('@condo/domains/common/constants/errors')

const {
    expectToThrowValidationFailureError,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowGraphQLRequestError,
    expectToThrowInternalError,
} = require('@condo/keystone/test.utils')

const { RemoteClient, createTestRemoteClient, updateTestRemoteClient } = require('@condo/domains/notification/utils/testSchema')
const { getRandomTokenData } = require('@condo/domains/notification/utils/testSchema/helpers')

describe('RemoteClient', () => {
    describe('Anonymous', () => {
        it('disallows to create RemoteClient directly with access denied error', async () => {
            const client = await makeClient()

            await expectToThrowAuthenticationErrorToObj(async () => {
                await createTestRemoteClient(client)
            })
        })

        it('fails to read other`s RemoteClient', async () => {
            const admin = await makeLoggedInAdminClient()
            const [pushToken] = await createTestRemoteClient(admin)
            const client1 = await makeClient()

            await expectToThrowAuthenticationErrorToObjects(async () => {
                await RemoteClient.getOne(client1, { id: pushToken.id })
            })
        })

        it('fails to read RemoteClients', async () => {
            const client = await makeClient()

            await expectToThrowAuthenticationErrorToObjects(async () => {
                await RemoteClient.getAll(client)
            })
        })

        it('fails to update RemoteClient', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestRemoteClient(admin)
            const client = await makeClient()
            const payload = {
                owner: { disconnectAll: true },
                deviceId: objCreated.deviceId,
            }

            await expectToThrowAuthenticationErrorToObj(async () => {
                await updateTestRemoteClient(client, objCreated.id, payload)
            })
        })

        it('fails to delete RemoteClient', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestRemoteClient(admin)
            const client = await makeClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await RemoteClient.delete(client, objCreated.id)
            })
        })
    })

    describe('User', () => {
        it('disallows to create RemoteClient directly with access denied error', async () => {
            const client = await makeLoggedInClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await createTestRemoteClient(client)
            })
        })

        it('fails to read other`s RemoteClient', async () => {
            const admin = await makeLoggedInAdminClient()
            const client = await makeLoggedInClient()
            const [pushToken] = await createTestRemoteClient(admin)
            const othersRemoteClient = await RemoteClient.getOne(client, { id: pushToken.id })

            expect(othersRemoteClient).toBeUndefined()
        })

        it('allows to read own RemoteClient', async () => {
            const admin = await makeLoggedInAdminClient()
            const [pushToken] = await createTestRemoteClient(admin)
            const lastRemoteClient = await RemoteClient.getOne(admin, { id: pushToken.id })

            expect(lastRemoteClient).toBeDefined()
            expect(lastRemoteClient.id).toEqual(pushToken.id)
            expect(lastRemoteClient.owner.id).toEqual(admin.user.id)
        })

        it('fails to update RemoteClient', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestRemoteClient(admin)
            const client = await makeLoggedInClient()
            const payload = {
                owner: { disconnectAll: true },
                deviceId: objCreated.deviceId,
            }

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await updateTestRemoteClient(client, objCreated.id, payload)
            })
        })

        it('fails to delete RemoteClient', async () => {
            const admin = await makeLoggedInAdminClient()
            const [objCreated] = await createTestRemoteClient(admin)
            const client = await makeLoggedInClient()

            await expectToThrowAccessDeniedErrorToObj(async () => {
                await RemoteClient.delete(client, objCreated.id)
            })
        })
    })

    describe('Admin', () => {
        it('allows to create RemoteClient directly', async () => {
            const admin = await makeLoggedInAdminClient()
            const [obj, attrs] = await createTestRemoteClient(admin)

            expect(obj.id).toMatch(UUID_RE)
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(1)
            expect(obj.newId).toEqual(null)
            expect(obj.deletedAt).toEqual(null)
            expect(obj.createdAt).toMatch(DATETIME_RE)
            expect(obj.updatedAt).toMatch(DATETIME_RE)
            expect(obj.owner.id).toEqual(admin.user.id)
        })

        it('checks that deviceId is required', async () => {
            const admin = await makeLoggedInAdminClient()

            await expectToThrowValidationFailureError(
                async () => await createTestRemoteClient(admin, { deviceId: null }),
                'Required field "deviceId" is null or undefined.',
            )
        })

        it('checks that appId is required', async () => {
            const admin = await makeLoggedInAdminClient()

            await expectToThrowValidationFailureError(
                async () => await createTestRemoteClient(admin, { appId: null }),
                'Required field "appId" is null or undefined.',
            )
        })

        it('validates appId length', async () => {
            const admin = await makeLoggedInAdminClient()

            await expectToThrowValidationFailureError(
                async () => await createTestRemoteClient(admin, { appId: faker.datatype.uuid().substring(0, 5) }),
                '[value:tooShort:appId] Value is too short',
            )
        })

        it('checks that pushToken is not required', async () => {
            const admin = await makeLoggedInAdminClient()

            const [obj, attrs] = await createTestRemoteClient(admin, { pushToken: null })

            expect(obj.id).toMatch(UUID_RE)
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(1)
            expect(obj.newId).toEqual(null)
            expect(obj.deletedAt).toEqual(null)
            expect(obj.createdAt).toMatch(DATETIME_RE)
            expect(obj.updatedAt).toMatch(DATETIME_RE)
            expect(obj.owner.id).toEqual(admin.user.id)
            expect(obj.pushToken).toBeNull()
        })

        it('checks that pushTransport or devicePlatform is not required by itself', async () => {
            const admin = await makeLoggedInAdminClient()

            const [obj, attrs] = await createTestRemoteClient(admin, { pushTransport: undefined, devicePlatform: undefined })

            expect(obj.id).toMatch(UUID_RE)
            expect(obj.dv).toEqual(1)
            expect(obj.sender).toEqual(attrs.sender)
            expect(obj.v).toEqual(1)
            expect(obj.newId).toEqual(null)
            expect(obj.deletedAt).toEqual(null)
            expect(obj.createdAt).toMatch(DATETIME_RE)
            expect(obj.updatedAt).toMatch(DATETIME_RE)
            expect(obj.owner.id).toEqual(admin.user.id)
            expect(obj.pushTransport).toBeNull()
            expect(obj.devicePlatform).toBeNull()
        })

        it('checks that pushTransport is required if token provided', async () => {
            const admin = await makeLoggedInAdminClient()
            const extraAttrs = { ...getRandomTokenData(), pushTransport: undefined }

            await expectToThrowValidationFailureError(
                async () => await createTestRemoteClient(admin, extraAttrs),
                '[required:noValue:pushTransport] Value is required',
            )
        })

        it('checks that devicePlatform is required if token provided', async () => {
            const admin = await makeLoggedInAdminClient()
            const extraAttrs = { ...getRandomTokenData(), devicePlatform: undefined }

            await expectToThrowValidationFailureError(
                async () => await createTestRemoteClient(admin, extraAttrs),
                '[required:noValue:devicePlatform] Value is required',
            )
        })

        it('fails on invalid pushTransport value', async () => {
            const admin = await makeLoggedInAdminClient()
            const extraAttrs = { pushTransport: 'xxxxxxx' }

            await expectToThrowGraphQLRequestError(
                async () => await createTestRemoteClient(admin, extraAttrs),
                `got invalid value "${extraAttrs.pushTransport}" at "data.pushTransport";`,
            )
        })

        it('fails on invalid devicePlatform value', async () => {
            const admin = await makeLoggedInAdminClient()
            const extraAttrs = { devicePlatform: 'xxxxxxx' }

            await expectToThrowGraphQLRequestError(
                async () => await createTestRemoteClient(admin, extraAttrs),
                `got invalid value "${extraAttrs.devicePlatform}" at "data.devicePlatform";`,
            )
        })

        it('allows to read other`s RemoteClients', async () => {
            const admin = await makeLoggedInAdminClient()
            const admin2 = await makeLoggedInAdminClient()
            const [pushToken] = await createTestRemoteClient(admin)
            const obj = await RemoteClient.getOne(admin2, { id: pushToken.id })

            expect(obj).toBeDefined()
            expect(obj).not.toBeNull()
            expect(obj.id).toEqual(pushToken.id)
            expect(obj.deviceId).toEqual(pushToken.deviceId)
            expect(obj.pushTransport).toEqual(pushToken.pushTransport)
            expect(obj.devicePlatform).toEqual(pushToken.devicePlatform)
            expect(obj.pushToken).toEqual(pushToken.pushToken)
            expect(obj.owner.id).toEqual(admin.user.id)
        })

        it('checks that deviceId+appId is unique', async () => {
            const admin = await makeLoggedInAdminClient()
            const admin1 = await makeLoggedInAdminClient()
            const [objCreated] = await createTestRemoteClient(admin)
            const extraAttrs = { deviceId: objCreated.deviceId, appId: objCreated.appId }

            await expectToThrowInternalError(
                async () => await createTestRemoteClient(admin1, extraAttrs),
                DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
            )
        })

        it('checks that pushToken is unique', async () => {
            const admin = await makeLoggedInAdminClient()
            const admin1 = await makeLoggedInAdminClient()
            const extraAttrs = { pushToken: faker.datatype.uuid() }

            await createTestRemoteClient(admin, extraAttrs)

            await expectToThrowInternalError(
                async () => await createTestRemoteClient(admin1, extraAttrs),
                DUPLICATE_CONSTRAINT_VIOLATION_ERROR_MESSAGE,
            )
        })

        it('allows to update RemoteClient', async () => {
            const admin = await makeLoggedInAdminClient()
            const admin1 = await makeLoggedInAdminClient()
            const [objCreated] = await createTestRemoteClient(admin)
            const payload = {
                owner: { disconnectAll: true, connect: { id: admin1.user.id } },
                deviceId: objCreated.deviceId,
            }
            const [objUpdated] = await updateTestRemoteClient(admin1, objCreated.id, payload)

            expect(objUpdated.id).toEqual(objCreated.id)
            expect(objUpdated.owner.id).toEqual(admin1.user.id)
        })
    })
})
