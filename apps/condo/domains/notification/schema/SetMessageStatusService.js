/**
 * Generated by `createservice notification.SetMessageStatusService --type mutations`
 */
const get = require('lodash/get')

const { GQLCustomSchema, getByCondition } = require('@condo/keystone/schema')

const access = require('@condo/domains/notification/access/SetMessageStatusService')
const { Message: MessageAPI } = require('@condo/domains/notification/utils/serverSchema')
const {
    MESSAGE_DELIVERED_STATUS,
    MESSAGE_READ_STATUS,
    MESSAGE_SENT_STATUS,
} = require('@condo/domains/notification/constants/constants')

const READ_AT_FIELD_NAME = 'readAt'
const DELIVERED_AT_FIELD_NAME = 'deliveredAt'

const MESSAGE_STATUSES = {
    [READ_AT_FIELD_NAME]: MESSAGE_READ_STATUS,
    [DELIVERED_AT_FIELD_NAME]: MESSAGE_DELIVERED_STATUS,
}

const ALLOWED_STATUSES_FOR_READ_AT = {
    [MESSAGE_SENT_STATUS]: true,
    [MESSAGE_DELIVERED_STATUS]: true,
}

const SetMessageStatusService = new GQLCustomSchema('SetMessageStatusService', {
    types: [
        {
            access: true,
            type: 'input SetMessageStatusInput { dv: Int!, sender: SenderFieldInput!, message: MessageWhereUniqueInput!, deliveredAt: String, readAt: String }',
        },
        {
            access: true,
            type: 'type SetMessageStatusOutput { id: ID!, status: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canSetMessageStatus,
            schema: 'setMessageStatus(data: SetMessageStatusInput!): SetMessageStatusOutput',
            resolver: async (parent, args, context) => {
                const { data: { dv, sender, message: messageInput, deliveredAt, readAt } } = args
                const existingItem = await getByCondition('Message', { id: messageInput.id, deletedAt: null })
                const currentStatus = get(existingItem, 'status', null)
                let nextStatusType

                /**
                 * if both statuses set, we choose readAt as final one over deliveredAt
                 * We also shouldn't degrade status from readAt to deliveredAt
                 * We can transit status to readAt only from MESSAGE_SENT_STATUS or MESSAGE_DELIVERED_STATUS statuses
                 */
                if (readAt && ALLOWED_STATUSES_FOR_READ_AT[currentStatus]) nextStatusType = READ_AT_FIELD_NAME

                /**
                 * If only deliveredAt value provided, we check if we can change status
                 * We can transit status to deliveredAt only from MESSAGE_SENT_STATUS status
                 */
                if (!nextStatusType && deliveredAt && currentStatus === MESSAGE_SENT_STATUS) nextStatusType = DELIVERED_AT_FIELD_NAME

                /**
                 * Change message status only if message is present and requested status transition passed all checks
                 */
                if (existingItem && nextStatusType) {
                    const attrs = {
                        dv,
                        sender,
                        [nextStatusType]: 'now()',
                        status: MESSAGE_STATUSES[nextStatusType],
                    }

                    await MessageAPI.update(context, existingItem.id, attrs)
                }

                return { id: messageInput.id, status: 'ok' }
            },
        },
    ],
    
})

module.exports = {
    SetMessageStatusService,
}
