/**
 * Generated by `createservice notification._internalSendNotificationNewMobileAppVersionService --type mutations`
 */

const get = require('lodash/get')
const isEmpty = require('lodash/isEmpty')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, getSchemaCtx } = require('@open-condo/keystone/schema')

const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const { loadListByChunks } = require('@condo/domains/common/utils/serverSchema')
const access = require('@condo/domains/notification/access/_internalSendNotificationNewMobileAppVersionService')
const { DEVICE_PLATFORM_IOS, DEVICE_PLATFORM_ANDROID, APP_MASTER_KEY, APP_RESIDENT_KEY } = require('@condo/domains/notification/constants/constants')
const { MessageBatch, RemoteClient } = require('@condo/domains/notification/utils/serverSchema')
const { Resident } = require('@condo/domains/resident/utils/serverSchema')
const { RESIDENT, STAFF } = require('@condo/domains/user/constants/common')

const _internalSendNotificationNewMobileAppVersionService = new GQLCustomSchema('_internalSendNotificationNewMobileAppVersionService', {
    types: [
        {
            access: true,
            type: `enum App { ${APP_RESIDENT_KEY}, ${APP_MASTER_KEY} }`,
        },
        {
            access: true,
            type: `enum Platform { ${DEVICE_PLATFORM_ANDROID}, ${DEVICE_PLATFORM_IOS} }`,
        },
        {
            access: true,
            type: 'input _internalSendNotificationNewMobileAppVersionInput { dv: Int!, sender: SenderFieldInput! platform: Platform!, app: App!, buildVersion: String!, title: String!, body: String, organizationIds: [ID!] }',
        },
        {
            access: true,
            type: 'type _internalSendNotificationNewMobileAppVersionOutput { messageBatchId: ID! }',
        },
    ],
    
    mutations: [
        {
            access: access.can_internalSendNotificationNewMobileAppVersion,
            schemaDoc: 'The mutation is necessary to send push notifications directly to a specific user device with an outdated version of the mobile application build.',
            schema: '_internalSendNotificationNewMobileAppVersion(data: _internalSendNotificationNewMobileAppVersionInput!): _internalSendNotificationNewMobileAppVersionOutput',
            resolver: async (parent, args, context, info, extra = {}) => {

                const { data: { dv, sender, platform, app, buildVersion, title, body, organizationIds } } = args

                const { keystone } = await getSchemaCtx('MessageBatch')
                const adminContext = await keystone.createContext({ skipAccessControl: true })

                const userType = app === RESIDENT ? RESIDENT : STAFF
                let remoteClientKeys

                //The case when a push is sent to all suitable devices, regardless of organization
                if (isEmpty(organizationIds)) {
                    remoteClientKeys = await loadListByChunks({
                        context: adminContext,
                        list: RemoteClient,
                        where: {
                            devicePlatform: platform,
                            deletedAt: null,
                            owner: {
                                type: userType,
                            },
                        },
                        chunkSize: 50,
                        chunkProcessor: (/** @type {RemoteClient[]} */ chunk) => {
                            const rcWithLowerBuild = []

                            if (buildVersion) {
                                for (const rc of chunk) {
                                    if (get(rc, 'meta.Build', buildVersion) < buildVersion) rcWithLowerBuild.push(`rc:${rc.id}`)
                                }
                            }

                            return rcWithLowerBuild
                        },
                    })
                } else {    //The case when a push is sent to suitable devices of a specific or several organizations
                    const userIds = await loadListByChunks({
                        context: adminContext,
                        list: Resident,
                        where: {
                            organization: {
                                id_in: organizationIds,
                            },
                        },
                        chunkSize: 50,
                        chunkProcessor: (/** @type {Resident[]} */ chunk) => {
                            const userIds = []
                            chunk.map(resident => {
                                const userId = get(resident, 'user.id')
                                if (userId) userIds.push(userId)
                            })
                            return userIds
                        },
                    })

                    remoteClientKeys = await loadListByChunks({
                        context: adminContext,
                        list: RemoteClient,
                        where: {
                            devicePlatform: platform,
                            deletedAt: null,
                            owner: {
                                type: userType,
                                id_in: userIds,
                            },
                        },
                        chunkSize: 50,
                        chunkProcessor: (/** @type {RemoteClient[]} */ chunk) => {
                            const rcWithLowerBuild = []

                            if (buildVersion) {
                                for (const rc of chunk) {
                                    if (get(rc, 'meta.Build', buildVersion) < buildVersion) rcWithLowerBuild.push(`rc:${rc.id}`)
                                }
                            }

                            return rcWithLowerBuild
                        },
                    })
                }

                const messageBatch = await MessageBatch.create(adminContext, {
                    dv,
                    sender,
                    targets: remoteClientKeys,
                    title: title || 'title',
                    message: body || 'body',
                })
                return {
                    messageBatchId: messageBatch.id,
                }
            },
        },
    ],
    
})

module.exports = {
    _internalSendNotificationNewMobileAppVersionService,
}
