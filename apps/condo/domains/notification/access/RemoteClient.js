/**
 * Generated by `createschema notification.RemoteClient 'deviceId:Text; pushToken?:Text; pushTransport?:Select:firebase,apple,huawei; owner?:Relationship:User:SET_NULL; meta?:Json'`
 */

const { throwAuthenticationError } = require('@condo/keystone/apolloErrorFormatter')

/**
 * Manages native readability of schema. Is readable by admin and and authorized owner user.
 * @param user
 * @returns {Promise<{}|boolean|{owner: {id}}>}
 */
async function canReadRemoteClients ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    // User allowed to read own device info
    return { owner: { id: user.id } }}

/**
 * Manages create/update/delete access rights. Natively available only for admin users.
 * All other cases are managed within SyncRemoteClientService and DisconnectUserFromRemoteClientService
 * @param user
 * @returns {Promise<boolean>}
 */
async function canManageRemoteClients ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    return !!user.isAdmin
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadRemoteClients,
    canManageRemoteClients,
}
