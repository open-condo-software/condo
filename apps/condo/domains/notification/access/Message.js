/**
 * Generated by `createschema notification.Message 'organization?:Relationship:Organization:CASCADE; property?:Relationship:Property:CASCADE; ticket?:Relationship:Ticket:CASCADE; user:Relationship:User:CASCADE; type:Text; meta:Json; channels:Json; status:Select:sending,planned,sent,canceled; deliveredAt:DateTimeUtc;'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { DIRECTLY_AVAILABLE_TYPES } = require('@condo/domains/notification/constants/constants')
const { canDirectlyReadSchemaObjects } = require('@condo/domains/user/utils/directAccess')

async function canReadMessages ({ authentication: { item: user }, listKey }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    
    if (user.isAdmin) return {}

    const haveDirectRight = await canDirectlyReadSchemaObjects(user, listKey)

    if (haveDirectRight) {
        return { type_in: DIRECTLY_AVAILABLE_TYPES }
    }

    return { user: { id: user.id } }
}

async function canManageMessages ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    
    return !!user.isAdmin
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadMessages,
    canManageMessages,
}
