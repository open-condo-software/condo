const { faker } = require('@faker-js/faker')

const { getCurrTimeStamp } = require('@condo/domains/common/utils/date')

const { AppleJSONWebToken, JWT_EXPIRES_IN_SEC } = require('./AppleJSONWebToken')

const APPLE_CONFIG = {
    kid: faker.random.alphaNumeric(10),
    iss: faker.random.alphaNumeric(10),
    // ES256 key generated by https://8gwifi.org/jwsgen.jsp
    privateKey: '-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIERzC9YnAZv6dTmLPY72gQqLvihwlesD5odf5mx/NNQLoAoGCCqGSM49 AwEHoUQDQgAEvX/e71XLG847HzKpTozogE5pwgaxVN29UkZoNmjP9ZnHcRs7gsBeTGuKwLv0um/C65mb73oy2QeDQCe8R20JAA==\n-----END EC PRIVATE KEY-----', //NOSONAR
}

const getFutureTimeStamp = (timeout) => () => getCurrTimeStamp() + timeout

describe('AppleJSONWebToken', () => {
    it('Checks proper token expiry and regeneration', async () => {
        const token = new AppleJSONWebToken(APPLE_CONFIG)
        const tokenValue1 = token.value

        token.setCurrTimeStampGetter(getFutureTimeStamp(JWT_EXPIRES_IN_SEC - 10))

        const tokenValue2 = token.value

        token.setCurrTimeStampGetter(getFutureTimeStamp(JWT_EXPIRES_IN_SEC + 10))

        const tokenValue3 = token.value

        expect(tokenValue1).toEqual(tokenValue2)
        expect(tokenValue1).not.toEqual(tokenValue3)
    })
})