/**
 * Generated by `createschema news.NewsItemUserRead 'newsItem:Relationship:NewsItem:CASCADE; user:Relationship:User:CASCADE'`
 */

const { get, isEmpty, uniq, compact } = require('lodash')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById, find } = require('@open-condo/keystone/schema')

const { queryFindNewsItemsScopesByResidents } = require('@condo/domains/news/utils/accessSchema')
const { RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadNewsItemUserReads ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return {
        user: { id: user.id },
    }
}

async function canManageNewsItemUserReads ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (user.type === RESIDENT && operation === 'create') {
        const newsItem = await getById('NewsItem', get(originalInput, ['newsItem', 'connect', 'id']))
        if (!newsItem) return false

        const residents = await find('Resident', { user: { id: user.id }, deletedAt: null })
        if (isEmpty(residents)) return false

        const organizationsIds = uniq(compact(residents.map(resident => get(resident, 'organization'))))

        const scopesConditions = queryFindNewsItemsScopesByResidents(residents)

        /**
         * @type {NewsItemScope[]}
         */
        const scopes = await find('NewsItemScope', scopesConditions)

        return scopes.length > 0 && organizationsIds.includes(newsItem.organization)
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadNewsItemUserReads,
    canManageNewsItemUserReads,
}
