/**
 * Generated by `createschema news.NewsItemScope 'newsItem:Relationship:NewsItem:CASCADE; property:Relationship:Property:CASCADE; unitType:Select:get,from,constant,unit_types; unitName:Text'`
 */

const { uniq, get } = require('lodash')

const { isSoftDelete } = require('@open-condo/keystone/access')
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById, find } = require('@open-condo/keystone/schema')

const { checkPermissionsInUserOrganizationsOrRelatedOrganizations } = require('@condo/domains/organization/utils/accessSchema')
const {
    queryOrganizationEmployeeFor,
    queryOrganizationEmployeeFromRelatedOrganizationFor,
} = require('@condo/domains/organization/utils/accessSchema')
const { STAFF, RESIDENT } = require('@condo/domains/user/constants/common')

async function canReadNewsItemScopes (attrs) {
    const { authentication: { item: user } } = attrs
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return {}
    if (user.type === RESIDENT) return false

    // access for stuff
    return {
        newsItem: {
            organization: {
                OR: [
                    queryOrganizationEmployeeFor(user.id, 'canReadNewsItems'),
                    queryOrganizationEmployeeFromRelatedOrganizationFor(user.id, 'canReadNewsItems'),
                ],
                deletedAt: null,
            },
        },
    }
}

async function canManageNewsItemScopes ({ authentication: { item: user }, originalInput, operation, itemId, itemIds }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    const isBulkRequest = Array.isArray(originalInput)
    const isSoftDeleteOperation = operation === 'update'
        && (
            isBulkRequest
                ? (Array.isArray(itemIds) && originalInput.every(item => isSoftDelete(get(item, 'data'))))
                : (itemId && isSoftDelete(originalInput))
        )

    if (operation !== 'create' && !isSoftDeleteOperation) return false
    if (user.isAdmin) return true

    if (user.type === STAFF) {
        let organizationIds

        if (operation === 'create') {
            if (isBulkRequest) {
                const newsItemIds = uniq(originalInput.map(item => get(item, 'data.newsItem.connect.id')))
                const newsItems = await find('NewsItem', {
                    id_in: newsItemIds,
                    deletedAt: null,
                })
                if (newsItemIds.length !== newsItems.length) return false
                organizationIds = uniq(newsItems.map(item => get(item, 'organization')))
            } else {
                const newsItemId = get(originalInput, 'newsItem.connect.id')
                const newsItem = await getById('NewsItem', newsItemId)
                if (!newsItem) return false
                organizationIds = [get(newsItem, 'organization')]
            }
        } else if (isSoftDeleteOperation) {
            if (isBulkRequest) {
                if (!itemIds || !Array.isArray(itemIds)) return false
                if (itemIds.length !== uniq(itemIds).length) return false

                const scopes = await find('NewsItemScope', {
                    id_in: itemIds,
                    deletedAt: null,
                })
                if (scopes.length !== itemIds.length) return false
                organizationIds = uniq(scopes.map(scope => scope.organization))
            } else {
                if (!itemId) return false
                const scope = await getById('NewsItemScope', itemId)
                organizationIds = [scope.organization]
            }
        }

        return await checkPermissionsInUserOrganizationsOrRelatedOrganizations(user.id, organizationIds, 'canManageNewsItems')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadNewsItemScopes,
    canManageNewsItemScopes,
}
