/**
 * Generated by `createschema news.NewsItemRecipientsExportTask 'user:Relationship:User:CASCADE; status:Select:processing,completed,error; file?:File'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { checkOrganizationPermission } = require('@condo/domains/organization/utils/accessSchema')


async function canReadNewsItemRecipientsExportTasks ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    return { user: { id: user.id } }
}

async function canManageNewsItemRecipientsExportTasks ({
    authentication: { item: user },
    originalInput,
    operation,
    itemId,
}) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create') {
        const organizationId = get(originalInput, ['organization', 'connect', 'id'])
        if (!organizationId) return false

        return await checkOrganizationPermission(user.id, organizationId, 'canManageNewsItems')
    } else if (operation === 'update' && itemId) {
        const task = await getById('NewsItemRecipientsExportTask', itemId)
        if (!task) return false
        const { organization: organizationId } = task

        return await checkOrganizationPermission(user.id, organizationId, 'canManageNewsItems')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadNewsItemRecipientsExportTasks,
    canManageNewsItemRecipientsExportTasks,
}
