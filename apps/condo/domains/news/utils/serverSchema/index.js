/**
 * Generated by `createschema news.OrganizationNewsItem 'organization:Relationship:Organization:CASCADE; title:Text; body:Text; type:Select:common,emergency'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */

const { generateServerUtils, execGqlWithoutAccess } = require('@open-condo/codegen/generate.server.utils')

const { EXPORT_NEWS_RECIPIENTS_MUTATION } = require('@condo/domains/news/gql')
const { GET_NEWS_ITEMS_RECIPIENTS_COUNTERS_MUTATION } = require('@condo/domains/news/gql')
const { GET_NEWS_SHARING_RECIPIENTS_MUTATION, GET_NEWS_SHARING_RECIPIENTS_COUNTERS_QUERY } = require('@condo/domains/news/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const NewsItem = generateServerUtils('NewsItem')
const NewsItemScope = generateServerUtils('NewsItemScope')
const NewsItemTemplate = generateServerUtils('NewsItemTemplate')
const NewsItemUserRead = generateServerUtils('NewsItemUserRead')
async function exportNewsRecipients (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: EXPORT_NEWS_RECIPIENTS_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to exportNewsRecipients',
        dataPath: 'obj',
    })
}

async function getNewsItemsRecipientsCounters (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: GET_NEWS_ITEMS_RECIPIENTS_COUNTERS_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to getNewsItemsRecipientsCounters',
        dataPath: 'obj',
    })
}

const NewsItemRecipientsExportTask = generateServerUtils('NewsItemRecipientsExportTask')

const NewsItemSharing = generateServerUtils('NewsItemSharing')

async function getNewsItemSharingRecipients (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: GET_NEWS_SHARING_RECIPIENTS_MUTATION,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to getNewsSharingRecipients',
        dataPath: 'obj',
    })
}

async function getNewsSharingRecipientsCounters (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: GET_NEWS_SHARING_RECIPIENTS_COUNTERS_QUERY,
        variables: { data: { dv: 1, ...data } },
        errorMessage: '[error] Unable to getNewsSharingRecipientsCounters',
        dataPath: 'obj',
    })
}

/* AUTOGENERATE MARKER <CONST> */

module.exports = {
    NewsItem,
    NewsItemScope,
    NewsItemTemplate,
    NewsItemUserRead,
    exportNewsRecipients,
    getNewsItemsRecipientsCounters,
    NewsItemRecipientsExportTask,
    NewsItemSharing,
    getNewsItemSharingRecipients,
    getNewsSharingRecipientsCounters,
/* AUTOGENERATE MARKER <EXPORTS> */
}
