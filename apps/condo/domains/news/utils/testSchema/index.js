/**
 * Generated by `createschema news.OrganizationNewsItem 'organization:Relationship:Organization:CASCADE; title:Text; body:Text; type:Select:common,emergency'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const faker = require('faker')

const { generateGQLTestUtils, throwIfError } = require('@open-condo/codegen/generate.test.utils')

const { NewsItem: NewsItemGQL } = require('@condo/domains/news/gql')
const { NEWS_TYPE_COMMON } = require('@condo/domains/news/constants/newsTypes')
const { NewsItemScope: NewsItemScopeGQL } = require('@condo/domains/news/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const NewsItem = generateGQLTestUtils(NewsItemGQL)
const NewsItemScope = generateGQLTestUtils(NewsItemScopeGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createTestNewsItem (client, organization, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const title = faker.lorem.words(3)
    const body = faker.lorem.words(13)
    const type = NEWS_TYPE_COMMON

    const attrs = {
        dv: 1,
        sender,
        title,
        body,
        type,
        organization: { connect: { id: organization.id } },
        ...extraAttrs,
    }
    const obj = await NewsItem.create(client, attrs)
    return [obj, attrs]
}

async function updateTestNewsItem (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await NewsItem.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestNewsItemScope (client, newsItem, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!newsItem || !newsItem.id) throw new Error('no newsItem.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        newsItem: { connect: { id: newsItem.id } },
        ...extraAttrs,
    }
    const obj = await NewsItemScope.create(client, attrs)
    return [obj, attrs]
}

async function updateTestNewsItemScope (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await NewsItemScope.update(client, id, attrs)
    return [obj, attrs]
}

/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    NewsItem, createTestNewsItem, updateTestNewsItem,
    NewsItemScope, createTestNewsItemScope, updateTestNewsItemScope,
/* AUTOGENERATE MARKER <EXPORTS> */
}
