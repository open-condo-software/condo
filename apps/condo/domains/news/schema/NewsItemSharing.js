/**
 * Generated by `createschema news.NewsItemSharing 'b2bApp:Relationship:B2BApp:CASCADE; newsItem:Relationship:NewsItem:CASCADE; sharingParams:Json; status:Select:processing,published,moderation,declined,archive; statusMessage:Text; lastGetRecipientsRequest:Json; lastPostRequest:Json; lastGetStatusRequest:Json; publicationViewsCount:Integer;'`
 */

const Ajv = require('ajv')
const dayjs = require('dayjs')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById } = require('@open-condo/keystone/schema')

const { getGQLErrorValidator } = require('@condo/domains/common/schema/json.utils')
const access = require('@condo/domains/news/access/NewsItemSharing')
const {
    BAD_STATUS_TRANSITION,
    NOT_NEWS_SHARING_CONTEXT,
    BAD_RECIPIENTS_JSON,
    BAD_RECIPIENTS_COUNT_JSON,
    BAD_PREVIEW_JSON,
    BAD_SHARING_PARAMS_JSON,
} = require('@condo/domains/news/constants/errors')
const { STATUSES, ALLOWED_TRANSITIONS } = require('@condo/domains/news/constants/newsItemSharingStatuses')
const publishNewsItemSharing = require('@condo/domains/news/tasks/publishNewsItemSharing')


const ajv = new Ajv()

const SHARING_PARAMS_FIELD_SCHEMA = {
    type: 'object',
    properties: {
        dv: { type: 'integer' },
        customFormValues: { type: 'object' },
    },
    required: ['dv'],
    additionalProperties: false,
}

const RECIPIENTS_COUNT_FIELD_SCHEMA = {
    type: 'object',
    properties: {
        receiversCount: { type: 'integer' },
    },
    required: ['receiversCount'],
    additionalProperties: false,
}

const SCOPES_FIELD_SCHEMA = {
    type: 'object',
    properties: {
        organizationId: { type: 'string' },
        propertyId: { type: 'string' },
        unitName: { type: 'string' },
        unitType: { type: 'string' },
    },
    required: ['organizationId', 'propertyId', 'unitName', 'unitType'],
    additionalProperties: false,
}

const RECIPIENTS_FIELD_SCHEMA = {
    type: 'object',
    properties: {
        dv: { type: 'integer' },
        // condo or getRecipients
        source: { type: 'string' },
        receiversCount: { type: 'integer' },
        scopes: { type: 'object' },
    },
    required: ['source', 'receiversCount', 'dv'],
    additionalProperties: false,
}

const ERRORS = {
    B2B_APP_CONTEXT_DOES_NOT_SUPPORT_NEWS_SHARING: {
        code: BAD_USER_INPUT,
        type: NOT_NEWS_SHARING_CONTEXT,
        message: 'Provided b2bAppContext does not support news sharing',
        mutation: 'createNewsItemSharing',
    },
    BAD_STATUS_TRANSITION: {
        code: BAD_USER_INPUT,
        type: BAD_STATUS_TRANSITION,
        message: 'Cannot do this status transition',
        mutation: 'updateNewsItemSharing',
    },
    BAD_RECIPIENTS_JSON: {
        code: BAD_USER_INPUT,
        type: BAD_RECIPIENTS_JSON,
        message: 'Recipients field is in incorrect format',
        mutation: 'createNewsItemSharing',
    },
    BAD_RECIPIENTS_COUNT_JSON: {
        code: BAD_USER_INPUT,
        type: BAD_RECIPIENTS_JSON,
        message: 'Recipients Count field is in incorrect format',
        mutation: 'createNewsItemSharing',
    },
    BAD_SHARING_PARAMS_JSON: {
        code: BAD_USER_INPUT,
        type: BAD_SHARING_PARAMS_JSON,
        message: 'SharingParams field is in incorrect format',
        mutation: 'createNewsItemSharing',
    },
    BAD_SCOPES_JSON: {
        code: BAD_USER_INPUT,
        type: 'BAD_SCOPES_JSON',
        message: 'Scopes field is in incorrect format',
        mutation: 'createNewsItemSharing',
    },
}

const validateRecipientsCountField = getGQLErrorValidator(ajv.compile(RECIPIENTS_COUNT_FIELD_SCHEMA), BAD_RECIPIENTS_COUNT_JSON)
const validateRecipientsField = getGQLErrorValidator(ajv.compile(RECIPIENTS_FIELD_SCHEMA), BAD_RECIPIENTS_JSON)
const validateSharingParamsField = getGQLErrorValidator(ajv.compile(SHARING_PARAMS_FIELD_SCHEMA), BAD_SHARING_PARAMS_JSON)
const validateScopesField = getGQLErrorValidator(ajv.compile(SCOPES_FIELD_SCHEMA), 'BAD_SCOPES_JSON')

const NewsItemSharing = new GQLListSchema('NewsItemSharing', {
    schemaDoc: 'Existence of this models means that certain NewsItem should published in certain B2BApp that implements NewsSharing API.',
    fields: {
        b2bAppContext: {
            schemaDoc: 'Connection to the miniapp that is responsible for publishing this news item',
            type: 'Relationship',
            ref: 'B2BAppContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            access: {
                create: true,
                read: true,
                update: false,
            },
        },

        newsItem: {
            schemaDoc: 'Connection to the news item',
            type: 'Relationship',
            ref: 'NewsItem',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            access: {
                create: true,
                read: true,
                update: false,
            },
        },

        status: {
            schemaDoc: 'Publication status of the news: updated automatically',
            type: 'Select',
            options: Object.values(STATUSES),
            isRequired: true,
            defaultValue: STATUSES.SCHEDULED,
        },

        previewTitle: {
            schemaDoc: 'Rendered preview title',
            type: 'Text',
            isRequired: true,
            access: {
                create: true,
                read: true,
                update: false,
            },
        },

        previewBody: {
            schemaDoc: 'Rendered preview title',
            type: 'Text',
            isRequired: true,
            access: {
                create: true,
                read: true,
                update: false,
            },
        },

        recipients: {
            schemaDoc: 'Recipients from getRecipients for this shared news item. This or scopes should be filled',
            type: 'Json',
            isRequired: false,
            hooks: {
                validateInput: validateRecipientsField,
            },
            access: {
                create: true,
                read: true,
                update: false,
            },
        },

        scopes: {
            schemaDoc: 'Recipients for this shared news item. This or recipients should be filled',
            type: 'Json',
            isRequired: false,
            hooks: {
                validateInput: validateScopesField,
            },
            access: {
                create: true,
                read: true,
                update: false,
            },
        },

        sharingParams: {
            schemaDoc: 'Sending parameters are specific to a particular mini-app. If they exist, they will be sent with on publish',
            type: 'Json',
            isRequired: false,
            hooks: {
                validateInput: validateSharingParamsField,
            },
            access: {
                create: true,
                read: true,
                update: false,
            },
        },

        statusMessage: {
            schemaDoc: 'Explanations regarding the publication status. If exists, will be shown to user',
            type: 'Text',
            isRequired: false,
        },

        lastPublishResponse: {
            schemaDoc: 'Typed outcome from the most recent invocation of the publish method of the miniapp',
            type: 'Json',
            hooks: {
                validateInput: () => {},  
            },
            isRequired: false,
        },

        recipientsCount: {
            schemaDoc: 'Recipients count for this shared news item',
            type: 'Json',
            isRequired: false,
            hooks: {
                validateInput: validateRecipientsCountField,
            },
            access: {
                create: true,
                read: true,
                update: false,
            },
        },
    },

    hooks: {
        validateInput: async (args) => {
            const { resolvedData, existingItem, operation } = args
            const resultItemData = { ...existingItem, ...resolvedData }

            // Check if b2bAppContext support NewsSharing
            if (operation === 'create') {
                const b2bAppContext = await getById('B2BAppContext', resultItemData.b2bAppContext)
                const b2bApp = await getById('B2BApp', b2bAppContext.app)
                if (!b2bApp.newsSharingConfig) {
                    throw new GQLError(ERRORS.B2B_APP_CONTEXT_DOES_NOT_SUPPORT_NEWS_SHARING)
                }
            }

            // Check if status transition is correct:
            if (operation === 'update') {
                const oldStatus = existingItem.status
                const newStatus = resolvedData.status
                if (newStatus && !ALLOWED_TRANSITIONS[oldStatus].includes(newStatus)) {
                    throw new GQLError(ERRORS.BAD_STATUS_TRANSITION)
                }
            }
        },

        /**
         * It is not guaranteed that NewsItemSharing will be created before NewsItem is published,
         * Condo explicitly checks whether the related NewsItem had been sent and publishes NewsItemSharing if it true
         */
        afterChange: async ({ updatedItem }) => {
            if (updatedItem.status === STATUSES.SCHEDULED) {
                const newsItem = await getById('NewsItem', updatedItem.newsItem)

                let newsItemWasSent = false
                if (newsItem.sentAt && dayjs(newsItem.sentAt) > dayjs()) {
                    newsItemWasSent = true
                }

                if (newsItem.isPublished && !newsItem.deletedAt && newsItemWasSent) {
                    await publishNewsItemSharing.delay(updatedItem.id)
                }
            }
        },
    },

    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadNewsItemSharings,
        create: access.canManageNewsItemSharings,
        update: access.canManageNewsItemSharings,
        delete: false,
        auth: true,
    },
})

module.exports = {
    NewsItemSharing,
    ERRORS,
    RECIPIENTS_COUNT_FIELD_SCHEMA,
}
