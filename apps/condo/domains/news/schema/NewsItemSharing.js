/**
 * Generated by `createschema news.NewsItemSharing 'b2bApp:Relationship:B2BApp:CASCADE; newsItem:Relationship:NewsItem:CASCADE; sharingParams:Json; status:Select:processing,published,moderation,declined,archive; statusMessage:Text; lastGetRecipientsRequest:Json; lastPostRequest:Json; lastGetStatusRequest:Json; publicationViewsCount:Integer;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')
const get = require('lodash/get')

const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, find, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/news/access/NewsItemSharing')

const { normalizeText } = require('../../common/utils/text')


const NewsItemSharing = new GQLListSchema('NewsItemSharing', {
    // TODO(codegen): write doc for the NewsItemSharing domain model!
    schemaDoc: 'TODO DOC!',
    fields: {

        b2bAppContext: {
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'B2BAppContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        // b2bApp: {
        //     // TODO(codegen): write doc for NewsItemSharing.b2bApp field!
        //     schemaDoc: 'TODO DOC!',
        //     type: Relationship,
        //     ref: 'B2BApp',
        //     isRequired: true,
        //     knexOptions: { isNotNullable: true }, // Required relationship only!
        //     kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        // },

        newsItem: {
            // TODO(codegen): write doc for NewsItemSharing.newsItem field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'NewsItem',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        sharingParams: {
            // TODO(codegen): write doc for NewsItemSharing.sharingParams field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: false,
        },

        status: {
            // TODO(codegen): write doc for NewsItemSharing.status field!
            schemaDoc: 'TODO DOC!',
            type: Select,
            options: 'processing,published,moderation,declined,archive',
            isRequired: true,
            defaultValue: 'processing',
        },

        statusMessage: {
            // TODO(codegen): write doc for NewsItemSharing.statusMessage field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: false,
        },

        lastGetRecipientsRequest: {
            // TODO(codegen): write doc for NewsItemSharing.lastGetRecipientsRequest field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: false,
        },

        lastPostRequest: {
            // TODO(codegen): write doc for NewsItemSharing.lastPostRequest field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: false,
        },

        lastGetStatusRequest: {
            // TODO(codegen): write doc for NewsItemSharing.lastGetStatusRequest field!
            schemaDoc: 'TODO DOC!',
            type: Json,
            isRequired: false,
        },

        publicationViewsCount: {
            // TODO(codegen): write doc for NewsItemSharing.publicationViewsCount field!
            schemaDoc: 'TODO DOC!',
            type: Integer,
            isRequired: true,
            defaultValue: 0,
        },
    },

    hooks: {
        afterChange: async ({ operation, updatedItem, existingData }) => {
            const b2bAppContextId = get( updatedItem, ['b2bAppContext'])
            const b2bAppContext = await getById('B2BAppContext', b2bAppContextId)

            const newsItemId = get( updatedItem, ['newsItem'])
            const newsItem = await getById('NewsItem', newsItemId)

            const postUrl = get(b2bAppContext, ['settings', 'postUrl'])
            const chatId = get(b2bAppContext, ['settings', 'chatId'])

            try {
                const response = await fetch(postUrl, {
                    method: 'POST',
                    body: {
                        title: get(newsItem, 'title'),
                        message: get(newsItem, 'body'),
                        chatId: chatId,
                    },
                })
                console.log(response)
            } catch (err) {
                console.log(err)
            }
        },
    },

    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadNewsItemSharings,
        create: access.canManageNewsItemSharings,
        update: access.canManageNewsItemSharings,
        delete: false,
        auth: true,
    },
})

module.exports = {
    NewsItemSharing,
}
