/**
 * Generated by `createschema news.OrganizationNewsItem 'organization:Relationship:Organization:CASCADE; title:Text; body:Text; type:Select:common,emergency'`
 */

const get = require('lodash/get')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/news/access/NewsItem')
const { EMPTY_VALID_BEFORE_DATE } = require('@condo/domains/news/constants/errors')
const { NEWS_TYPES, NEWS_TYPE_EMERGENCY, NEWS_TYPE_COMMON } = require('@condo/domains/news/constants/newsTypes')

const ERRORS = {
    FIELD_MUST_BE_NOT_EMPTY: {
        code: BAD_USER_INPUT,
        type: EMPTY_VALID_BEFORE_DATE,
        message: 'The date the news item valid before is empty',
        messageForUser: 'api.newsItem.EMPTY_VALID_BEFORE_DATE',
        mutation: 'createNewsItem',
        variable: ['data', 'validBefore'],
    },
}

const NewsItem = new GQLListSchema('NewsItem', {
    schemaDoc: 'The news item created by the organization to show on resident\'s mobile devices',
    fields: {

        organization: {
            schemaDoc: 'The organization the news item created by',
            type: 'Relationship',
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        title: {
            schemaDoc: 'The news item title',
            type: 'Text',
            isRequired: true,
        },

        body: {
            schemaDoc: 'The news item main body',
            type: 'Text',
            isRequired: true,
        },

        type: {
            schemaDoc: 'The news item type',
            type: 'Select',
            options: NEWS_TYPES,
            isRequired: true,
        },

        validBefore: {
            schemaDoc: 'Date before which the news item makes sense',
            type: 'DateTimeUtc',
        },

        sendAt: {
            schemaDoc: 'Date to publish the news item and to send notifications',
            type: 'DateTimeUtc',
        },

    },
    hooks: {
        resolveInput: async (args) => {
            const { resolvedData } = args
            if (!get(resolvedData, 'type')) {
                resolvedData['type'] = NEWS_TYPE_COMMON
            }

            return resolvedData
        },
        validateInput: async (args) => {
            const { resolvedData, existingItem, context } = args
            const resultItemData = { ...existingItem, ...resolvedData }
            if (get(resultItemData, 'type') === NEWS_TYPE_EMERGENCY && !get(resultItemData, 'validBefore')) {
                throw new GQLError(ERRORS.FIELD_MUST_BE_NOT_EMPTY, context)
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadNewsItems,
        create: access.canManageNewsItems,
        update: access.canManageNewsItems,
        delete: false,
        auth: true,
    },
})

module.exports = {
    NewsItem,
}
