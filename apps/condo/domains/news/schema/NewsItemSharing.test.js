/**
 * Generated by `createschema news.NewsItemSharing 'b2bApp:Relationship:B2BApp:CASCADE; newsItem:Relationship:NewsItem:CASCADE; sharingParams:Json; status:Select:processing,published,moderation,declined,archive; statusMessage:Text; lastGetRecipientsRequest:Json; lastPostRequest:Json; lastGetStatusRequest:Json; publicationViewsCount:Integer;'`
 */

const { makeLoggedInAdminClient, makeClient, expectValuesOfCommonFields, catchErrorFrom, expectToThrowValidationFailureError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { createTestB2BAppNewsSharingConfig, createTestB2BApp, createTestB2BAppContext } = require('@condo/domains/miniapp/utils/testSchema')
const { NewsItemSharing, createTestNewsItemSharing, updateTestNewsItemSharing } = require('@condo/domains/news/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

const { ALLOWED_TRANSITIONS } = require('../constants/newsItemSharingStatuses')
const { createTestNewsItem, createTestNewsItemScope, publishTestNewsItem } = require('../utils/testSchema')

describe('NewsItemSharing', () => {

    let admin
    let support
    let anonymous
    let user
    let staffWithPermissions
    let staffWOPermissions

    let dummyO10n

    let dummyB2BApp
    let dummyB2BContext
    let dummyB2BAppNewsSharingConfig

    let dummyNewsItem
    let dummyPublishedNewsItem
    let dummyNewsItemSharing

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
        user = await makeClientWithNewRegisteredAndLoggedInUser()
        staffWOPermissions = await makeClientWithNewRegisteredAndLoggedInUser()
        staffWithPermissions = await makeClientWithNewRegisteredAndLoggedInUser()

        const [o10n] = await createTestOrganization(admin)

        const [canManageNewsItemsRole] = await createTestOrganizationEmployeeRole(admin, o10n, { canManageNewsItems: true, canReadNewsItems: true })
        await createTestOrganizationEmployee(admin, o10n, staffWithPermissions.user, canManageNewsItemsRole)

        const [emptyRole] = await createTestOrganizationEmployeeRole(admin, o10n)
        await createTestOrganizationEmployee(admin, o10n, staffWOPermissions.user, emptyRole)

        const [B2BAppNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(admin)
        const [B2BApp] = await createTestB2BApp(admin, { newsSharingConfig: { connect: { id: B2BAppNewsSharingConfig.id } } })
        const [B2BContext] = await createTestB2BAppContext(admin, B2BApp, o10n)

        const [newsItem] = await createTestNewsItem(admin, o10n, {
            title: 'ðŸš§ Planned Water Outage Notification ðŸš§',
            body: 'We are conducting a planned water outage on September 25 2023 The outage will last approximately 4 hours',
        })
        await createTestNewsItemScope(admin, newsItem)

        const [publishedNewsItem] = await createTestNewsItem(admin, o10n, {
            title: 'ðŸš§ Planned Water Outage Notification ðŸš§',
            body: 'We are conducting a planned water outage on September 25 2023 The outage will last approximately 4 hours',
        })
        await createTestNewsItemScope(admin, publishedNewsItem)
        await publishTestNewsItem(admin, publishedNewsItem.id)

        const [newsItemSharing] = await createTestNewsItemSharing(admin, B2BContext, newsItem)

        dummyO10n = o10n
        dummyB2BAppNewsSharingConfig = B2BAppNewsSharingConfig
        dummyB2BApp = B2BApp
        dummyB2BContext = B2BContext
        dummyNewsItem = newsItem
        dummyPublishedNewsItem = publishedNewsItem
        dummyNewsItemSharing = newsItemSharing
    })

    describe('CRUD tests', () => {

        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestNewsItemSharing(admin, dummyB2BContext, dummyNewsItem)

                expectValuesOfCommonFields(obj, attrs, admin)
                expect(obj.newsItem.id).toEqual(dummyNewsItem.id)
                expect(obj.b2bAppContext.id).toEqual(dummyB2BContext.id)
            })

            test('support can', async () => {
                const [obj, attrs] = await createTestNewsItemSharing(support, dummyB2BContext, dummyNewsItem)

                expectValuesOfCommonFields(obj, attrs, support)
                expect(obj.newsItem.id).toEqual(dummyNewsItem.id)
                expect(obj.b2bAppContext.id).toEqual(dummyB2BContext.id)
            })

            test('staff with permissions can', async () => {
                const [obj, attrs] = await createTestNewsItemSharing(staffWithPermissions, dummyB2BContext, dummyNewsItem)

                expectValuesOfCommonFields(obj, attrs, staffWithPermissions)
                expect(obj.newsItem.id).toEqual(dummyNewsItem.id)
                expect(obj.b2bAppContext.id).toEqual(dummyB2BContext.id)
            })

            test('staff w\\o permissions can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemSharing(staffWOPermissions, dummyB2BContext, dummyNewsItem)
                })
            })

            test('user can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemSharing(user, dummyB2BContext, dummyNewsItem)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestNewsItemSharing(anonymous, dummyB2BContext, dummyNewsItem)
                })
            })
        })

        describe('update', () => {

            const payload = { statusMessage: 'test' }

            test('admin can', async () => {
                const [objCreated] = await createTestNewsItemSharing(admin, dummyB2BContext, dummyNewsItem)

                const [obj, attrs] = await updateTestNewsItemSharing(admin, objCreated.id, payload)

                expect(obj.newsItem.id).toEqual(dummyNewsItem.id)
                expect(obj.b2bAppContext.id).toEqual(dummyB2BContext.id)
                expect(obj.statusMessage).toEqual('test')
            })

            test('newsItem can not be updated', async () => {
                const [objCreated] = await createTestNewsItemSharing(admin, dummyB2BContext, dummyNewsItem)

                await catchErrorFrom(
                    async () => await updateTestNewsItemSharing(admin, objCreated.id, { newsItem: { connect: { id: dummyPublishedNewsItem } } }),
                    (error) => {
                        expect(error.errors[0].name).toEqual('UserInputError')
                        expect(error.errors[0].message).toContain('Field "newsItem" is not defined by type "NewsItemSharingUpdateInput"')
                    }
                )
            })

            test('b2bAppContext can not be updated', async () => {
                const [objCreated] = await createTestNewsItemSharing(admin, dummyB2BContext, dummyNewsItem)

                await catchErrorFrom(
                    async () => await updateTestNewsItemSharing(admin, objCreated.id, { b2bAppContext: { connect: { id: dummyB2BContext } } }),
                    (error) => {
                        expect(error.errors[0].name).toEqual('UserInputError')
                        expect(error.errors[0].message).toContain('Field "b2bAppContext" is not defined by type "NewsItemSharingUpdateInput"')
                    }
                )
            })

            test('support can', async () => {
                const [objCreated] = await createTestNewsItemSharing(support, dummyB2BContext, dummyNewsItem)

                const [obj, attrs] = await updateTestNewsItemSharing(support, objCreated.id, payload)

                expect(obj.newsItem.id).toEqual(dummyNewsItem.id)
                expect(obj.b2bAppContext.id).toEqual(dummyB2BContext.id)
                expect(obj.statusMessage).toEqual('test')
            })

            test('staff with permissions can', async () => {
                const [objCreated] = await createTestNewsItemSharing(staffWithPermissions, dummyB2BContext, dummyNewsItem)

                const [obj, attrs] = await updateTestNewsItemSharing(staffWithPermissions, objCreated.id, payload)

                expect(obj.newsItem.id).toEqual(dummyNewsItem.id)
                expect(obj.b2bAppContext.id).toEqual(dummyB2BContext.id)
                expect(obj.statusMessage).toEqual('test')
            })

            test('staff w\\o permissions can\'t', async () => {
                const [objCreated] = await createTestNewsItemSharing(staffWithPermissions, dummyB2BContext, dummyNewsItem)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestNewsItemSharing(staffWOPermissions, objCreated.id, payload)
                })
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestNewsItemSharing(staffWithPermissions, dummyB2BContext, dummyNewsItem)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestNewsItemSharing(user, objCreated.id, payload)
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestNewsItemSharing(staffWithPermissions, dummyB2BContext, dummyNewsItem)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestNewsItemSharing(anonymous, objCreated.id, payload)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemSharing(admin, dummyB2BContext, dummyNewsItem)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemSharing.delete(admin, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const objs = await NewsItemSharing.getAll(admin, { id: dummyNewsItemSharing.id })

                expect(objs).toHaveLength(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining(dummyNewsItemSharing),
                ]))
            })

            test('support can', async () => {
                const objs = await NewsItemSharing.getAll(support, { id: dummyNewsItemSharing.id })

                expect(objs).toHaveLength(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining(dummyNewsItemSharing),
                ]))
            })

            test('staff with permissions can', async () => {
                const objs =    await NewsItemSharing.getAll(staffWithPermissions, { id: dummyNewsItemSharing.id })

                expect(objs).toHaveLength(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining(dummyNewsItemSharing),
                ]))
            })

            test('staff w\\o permissions can\'t', async () => {
                const objs = await NewsItemSharing.getAll(staffWOPermissions, { id: dummyNewsItemSharing.id })

                expect(objs).toHaveLength(0)
            })

            test('user can\'t', async () => {
                const objs = await NewsItemSharing.getAll(user, { id: dummyNewsItemSharing.id })

                expect(objs).toHaveLength(0)
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await NewsItemSharing.getAll(anonymous, { id: dummyNewsItemSharing.id })  // TODO(codegen): write 'anonymous: read NewsItemSharing' test
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('should not allow to create NewsItemSharing if b2bAppContext do not support news sharing', async () => {
            const [B2BApp] = await createTestB2BApp(admin)
            const [B2BContext] = await createTestB2BAppContext(admin, B2BApp, dummyO10n)

            await catchErrorFrom(
                async () => await createTestNewsItemSharing(admin, B2BContext, dummyPublishedNewsItem),
                (error) => {
                    expect('todo').toEqual('todo')
                }
            )
        })

        describe('should allow to make correct status transitions', () => {
            // Get all allowed transitions: *[ SCHEDULED -> PROCESSING ]
            const cases = Object.entries(ALLOWED_TRANSITIONS).flatMap(([fromStatus, allowedTransitions]) =>
                allowedTransitions.map(toStatus => [fromStatus, toStatus])
            )
            
            test.each(cases)('%p -> %p', async (fromStatus, toStatus) => {
                const [newsItemSharing] = await createTestNewsItemSharing(staffWithPermissions, dummyB2BContext, dummyNewsItem, {
                    status: fromStatus,
                })

                const [upd] = await updateTestNewsItemSharing(admin, newsItemSharing.id, {
                    status: toStatus,
                })

                expect(upd.status).toEqual(toStatus)
            })
        })

        describe('should not allow to make wrong status transitions', () => {
            // Get all non allowed transitions: *[ SCHEDULED -> PUBLISHED ]  
            const cases = Object.entries(ALLOWED_TRANSITIONS).flatMap(([fromStatus, allowedTransitions]) => {
                return Object.keys(ALLOWED_TRANSITIONS).map(toStatus => {
                    if (fromStatus !== toStatus && !allowedTransitions.includes(toStatus)) {
                        return [fromStatus, toStatus]
                    }
                    return null
                }).filter(Boolean)
            })
            
            test.each(cases)('%p -> %p', async (fromStatus, toStatus) => {
                const [newsItemSharing] = await createTestNewsItemSharing(staffWithPermissions, dummyB2BContext, dummyNewsItem, {
                    status: fromStatus,
                })
                
                await catchErrorFrom(
                    async () => await updateTestNewsItemSharing(admin, newsItemSharing.id, { 
                        status: toStatus,
                    }),
                    (error) => {
                        expect('todo').toEqual('todo')
                    }
                )
            })
        })
    })
})
