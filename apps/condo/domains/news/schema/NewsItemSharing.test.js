/**
 * Generated by `createschema news.NewsItemSharing 'b2bApp:Relationship:B2BApp:CASCADE; newsItem:Relationship:NewsItem:CASCADE; sharingParams:Json; status:Select:processing,published,moderation,declined,archive; statusMessage:Text; lastGetRecipientsRequest:Json; lastPostRequest:Json; lastGetStatusRequest:Json; publicationViewsCount:Integer;'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, expectValuesOfCommonFields } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { createTestB2BAppNewsSharingConfig, createTestB2BApp, createTestB2BAppContext } = require('@condo/domains/miniapp/utils/testSchema')
const { NewsItemSharing, createTestNewsItemSharing, updateTestNewsItemSharing } = require('@condo/domains/news/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')

const { createTestNewsItem, createTestNewsItemScope, publishTestNewsItem } = require('../utils/testSchema')


describe('NewsItemSharing', () => {

    describe('CRUD tests', () => {

        let admin
        let support
        let anonymous
        let user

        let dummyO10n

        let dummyB2BApp
        let dummyB2BContext
        let dummyB2BAppNewsSharingConfig

        let dummyNewsItem
        let dummyPublishedNewsItem

        beforeAll(async () => {
            admin = await makeLoggedInAdminClient()
            support = await makeClientWithSupportUser()
            anonymous = await makeClient()

            const [o10n] = await createTestOrganization(admin)
            const [B2BAppNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(admin)
            const [B2BApp] = await createTestB2BApp(admin, { newsSharingConfig: { connect: { id: B2BAppNewsSharingConfig.id } } })
            const [B2BContext] = await createTestB2BAppContext(admin, B2BApp, o10n)

            const [newsItem] = await createTestNewsItem(admin, o10n, {
                title: 'ðŸš§ Planned Water Outage Notification ðŸš§',
                body: 'We are conducting a planned water outage on September 25 2023 The outage will last approximately 4 hours',
            })
            await createTestNewsItemScope(admin, newsItem)

            const [publishedNewsItem] = await createTestNewsItem(admin, o10n, {
                title: 'ðŸš§ Planned Water Outage Notification ðŸš§',
                body: 'We are conducting a planned water outage on September 25 2023 The outage will last approximately 4 hours',
            })
            await createTestNewsItemScope(admin, publishedNewsItem)
            await publishTestNewsItem(admin, publishedNewsItem.id)

            dummyO10n = o10n
            dummyB2BAppNewsSharingConfig = B2BAppNewsSharingConfig
            dummyB2BApp = B2BApp
            dummyB2BContext = B2BContext
            dummyNewsItem = newsItem
            dummyPublishedNewsItem = publishedNewsItem
        })

        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestNewsItemSharing(admin, dummyB2BContext, dummyNewsItem)

                expectValuesOfCommonFields(obj, attrs, admin)
            })

            // TODO(codegen): if you do not have any SUPPORT specific tests just remove this block!
            test('support can', async () => {

            })

            test('user can', async () => {

            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestNewsItemSharing(client)  // TODO(codegen): write 'anonymous: create NewsItemSharing' test
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemSharing(admin)

                const [obj, attrs] = await updateTestNewsItemSharing(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
            })

            // TODO(codegen): if you do not have any SUPPORT specific tests just remove this block!
            test('support can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemSharing(admin)

                const client = await makeClientWithSupportUser()  // TODO(codegen): update SUPPORT client!
                const [obj, attrs] = await updateTestNewsItemSharing(client, objCreated.id)  // TODO(codegen): write 'support: update NewsItemSharing' test

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('user can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemSharing(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()  // TODO(codegen): create USER client!
                const [obj, attrs] = await updateTestNewsItemSharing(client, objCreated.id)  // TODO(codegen): write 'user: update NewsItemSharing' test

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemSharing(admin)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestNewsItemSharing(client, objCreated.id)  // TODO(codegen): write 'anonymous: update NewsItemSharing' test
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemSharing(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemSharing.delete(admin, objCreated.id)  // TODO(codegen): write 'admin: delete NewsItemSharing' test
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemSharing(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()  // TODO(codegen): create USER client!
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemSharing.delete(client, objCreated.id)  // TODO(codegen): write 'user: delete NewsItemSharing' test
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemSharing(admin)

                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemSharing.delete(client, objCreated.id)  // TODO(codegen): write 'anonymous: delete NewsItemSharing' test
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestNewsItemSharing(admin)

                const objs = await NewsItemSharing.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                        // TODO(codegen): write fields which important to ADMIN access check
                    }),
                ]))
            })

            test('user can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestNewsItemSharing(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()  // TODO(codegen): create USER client!
                const objs = await NewsItemSharing.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                    // TODO(codegen): write fields which important to USER access check
                })
            })

            // TODO(codegen): write test for user1 doesn't have access to user2 data if it's applicable

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj, attrs] = await createTestNewsItemSharing(admin)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await NewsItemSharing.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })  // TODO(codegen): write 'anonymous: read NewsItemSharing' test
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            // TODO(codegen): check it!
        })
    })

    describe('notifications', () => {
        // TODO(codegen): write notifications tests if you have any sendMessage calls or drop this block!
    })
})
