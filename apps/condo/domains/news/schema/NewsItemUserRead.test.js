/**
 * Generated by `createschema news.NewsItemUserRead 'newsItem:Relationship:NewsItem:CASCADE; user:Relationship:User:CASCADE'`
 */

const { faker } = require('@faker-js/faker')

const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    DATETIME_RE,
    expectToThrowGQLError,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const {
    createTestNewsItemScope,
    createTestNewsItem,
    NewsItemUserRead,
    createTestNewsItemUserRead,
    updateTestNewsItemUserRead,
} = require('@condo/domains/news/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestResident } = require('@condo/domains/resident/utils/testSchema')
const {
    makeClientWithSupportUser,
    makeClientWithResidentUser,
    makeClientWithStaffUser,
} = require('@condo/domains/user/utils/testSchema')

let adminClient, supportClient, anonymousClient, residentClient, staffClient,
    dummyO10n, dummyNewsItem, dummyProperty

describe('NewsItemUserRead', () => {
    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        const [o10n] = await createTestOrganization(adminClient)
        dummyO10n = o10n
        const [property] = await createTestProperty(adminClient, o10n)
        dummyProperty = property
    })

    describe('CRUD tests', () => {
        beforeAll(async () => {
            supportClient = await makeClientWithSupportUser()
            anonymousClient = await makeClient()
            residentClient = await makeClientWithResidentUser()
            staffClient = await makeClientWithStaffUser()

            const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
            dummyNewsItem = newsItem
        })

        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestNewsItemUserRead(adminClient, dummyNewsItem, adminClient.user)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.user).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.newsItem).toEqual(expect.objectContaining({ id: dummyNewsItem.id }))
            })

            test('support can', async () => {
                const [obj, attrs] = await createTestNewsItemUserRead(supportClient, dummyNewsItem, supportClient.user)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: supportClient.user.id }))
            })

            test('stuff can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemUserRead(staffClient, dummyNewsItem, staffClient.user)
                })
            })

            test('Eligible resident can, non-eligible can\'t', async () => {
                const resident = await makeClientWithResidentUser()

                const unitType1 = FLAT_UNIT_TYPE
                const unitName1 = faker.lorem.word()
                await createTestResident(adminClient, resident.user, dummyProperty, {
                    unitType: unitType1,
                    unitName: unitName1,
                })

                const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
                await createTestNewsItemScope(adminClient, newsItem, {
                    property: { connect: { id: dummyProperty.id } },
                    unitType: unitType1,
                    unitName: unitName1,
                })

                const [obj, attrs] = await createTestNewsItemUserRead(resident, newsItem, resident.user)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: resident.user.id }))

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemUserRead(residentClient, newsItem, residentClient.user)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestNewsItemUserRead(anonymousClient, dummyNewsItem, residentClient.user)
                })
            })

            test('can\'t read same news item twice by the same user', async () => {
                const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
                await createTestNewsItemUserRead(adminClient, newsItem, adminClient.user)

                await expectToThrowGQLError(async () => {
                    await createTestNewsItemUserRead(adminClient, newsItem, adminClient.user)
                }, {
                    code: 'BAD_USER_INPUT',
                    type: 'NEWS_ITEM_ALREADY_READ',
                    message: 'News item already read by this user',
                    mutation: 'createNewsItemUserRead',
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
                const [objCreated] = await createTestNewsItemUserRead(adminClient, newsItem, adminClient.user)
                const [obj, attrs] = await updateTestNewsItemUserRead(adminClient, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
            })

            test('support can', async () => {
                const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
                const [objCreated] = await createTestNewsItemUserRead(adminClient, newsItem, supportClient.user)
                const [obj, attrs] = await updateTestNewsItemUserRead(supportClient, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: supportClient.user.id }))
            })

            test('stuff can\'t', async () => {
                const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
                const [objCreated] = await createTestNewsItemUserRead(adminClient, newsItem, adminClient.user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    const [obj, attrs] = await updateTestNewsItemUserRead(staffClient, objCreated.id)
                })
            })

            test('resident can\'t', async () => {
                const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
                const [objCreated] = await createTestNewsItemUserRead(adminClient, newsItem, residentClient.user)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestNewsItemUserRead(residentClient, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
                const [objCreated] = await createTestNewsItemUserRead(adminClient, newsItem, adminClient.user)
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestNewsItemUserRead(anonymousClient, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemUserRead.delete(adminClient, dummyNewsItem.id)
                })
            })

            test('staff can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemUserRead.delete(staffClient, dummyNewsItem.id)
                })
            })

            test('resident can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemUserRead.delete(residentClient, dummyNewsItem.id)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemUserRead.delete(anonymousClient, dummyNewsItem.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
                const [obj, attrs] = await createTestNewsItemUserRead(adminClient, newsItem, adminClient.user)

                const objs = await NewsItemUserRead.getAll(adminClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('Eligible resident can, non-eligible can\'t', async () => {
                const resident = await makeClientWithResidentUser()
                const nonEligibleResident = await makeClientWithResidentUser()

                const unitType1 = FLAT_UNIT_TYPE
                const unitName1 = faker.lorem.word()
                await createTestResident(adminClient, resident.user, dummyProperty, {
                    unitType: unitType1,
                    unitName: unitName1,
                })

                const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
                await createTestNewsItemScope(adminClient, newsItem, {
                    property: { connect: { id: dummyProperty.id } },
                    unitType: unitType1,
                    unitName: unitName1,
                })

                const [obj, attrs] = await createTestNewsItemUserRead(resident, newsItem, resident.user)
                const objs = await NewsItemUserRead.getAll(resident, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).toHaveLength(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                })

                const objs2 = await NewsItemUserRead.getAll(nonEligibleResident, {}, { sortBy: ['updatedAt_DESC'] })
                expect(objs2).toHaveLength(0)
            })

            test('anonymous can\'t', async () => {
                const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
                await createTestNewsItemUserRead(adminClient, newsItem, adminClient.user)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await NewsItemUserRead.getAll(anonymousClient, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            const [newsItem] = await createTestNewsItem(adminClient, dummyO10n)
            await expectToThrowGQLError(
                async () => await createTestNewsItemUserRead(adminClient, newsItem, adminClient.user, {
                    dv: 42,
                }),
                {
                    code: 'BAD_USER_INPUT',
                    type: 'DV_VERSION_MISMATCH',
                    message: 'Wrong value for data version number',
                    mutation: 'createNewsItemUserRead',
                    variable: ['data', 'dv'],
                },
            )
        })
    })


})
