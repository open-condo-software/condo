/**
 * Generated by `createschema news.NewsItemUserRead 'newsItem:Relationship:NewsItem:CASCADE; user:Relationship:User:CASCADE'`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/news/access/NewsItemUserRead')
const { NEWS_ITEM_ALREADY_READ } = require('@condo/domains/news/constants/errors')
const { NewsItemUserRead: NewsItemUserReadApi } = require('@condo/domains/news/utils/serverSchema')

const ERRORS = {
    ALREADY_READ: {
        mutation: 'createNewsItemUserRead',
        code: BAD_USER_INPUT,
        message: 'News item already read by this user',
        type: NEWS_ITEM_ALREADY_READ,
    },
}

const NewsItemUserRead = new GQLListSchema('NewsItemUserRead', {
    schemaDoc: 'The fact the user has read the particular news item',
    fields: {

        newsItem: {
            schemaDoc: 'The news item the user has read',
            type: 'Relationship',
            ref: 'NewsItem',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        user: {
            schemaDoc: 'The user who has read the particular news item',
            type: 'Relationship',
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

    },
    hooks: {
        validateInput: async ({ resolvedData, operation, context }) => {
            const { newsItem: newsItemId, user: userId } = resolvedData
            if (operation === 'create') {
                const count = await NewsItemUserReadApi.count(context, {
                    newsItem: { id: newsItemId },
                    user: { id: userId },
                })

                if (count > 0) {
                    throw new GQLError(ERRORS.ALREADY_READ, context)
                }
            }
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['user', 'newsItem'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'NewsItemUserRead_unique_user_and_newsItem',
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadNewsItemUserReads,
        create: access.canManageNewsItemUserReads,
        update: access.canManageNewsItemUserReads,
        delete: false,
        auth: true,
    },
})

module.exports = {
    NewsItemUserRead,
}
