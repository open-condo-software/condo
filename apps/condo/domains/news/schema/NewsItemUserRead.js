/**
 * Generated by `createschema news.NewsItemUserRead 'newsItem:Relationship:NewsItem:CASCADE; user:Relationship:User:CASCADE'`
 */

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/news/access/NewsItemUserRead')

const NewsItemUserRead = new GQLListSchema('NewsItemUserRead', {
    schemaDoc: 'The fact the user has read the particular news item',
    fields: {

        newsItem: {
            schemaDoc: 'The news item the user has read',
            type: 'Relationship',
            ref: 'NewsItem',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        user: {
            schemaDoc: 'The user who has read the particular news item',
            type: 'Relationship',
            ref: 'User',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadNewsItemUserReads,
        create: access.canManageNewsItemUserReads,
        update: access.canManageNewsItemUserReads,
        delete: false,
        auth: true,
    },
})

module.exports = {
    NewsItemUserRead,
}
