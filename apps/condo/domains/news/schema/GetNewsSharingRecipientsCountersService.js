/**
 * Generated by `createservice news.GetNewsItemSharingsRecipientsCountersService --type queries`
 */

const Ajv = require('ajv')
const get = require('lodash/get')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { fetch } = require('@open-condo/keystone/fetch')
const { checkDvAndSender } = require('@open-condo/keystone/plugins/dvAndSender')
const { GQLCustomSchema, getById, find } = require('@open-condo/keystone/schema')

const { WRONG_VALUE, NETWORK_ERROR } = require('@condo/domains/common/constants/errors')
const { DV_VERSION_MISMATCH, WRONG_FORMAT } = require('@condo/domains/common/constants/errors')
const { CONTEXT_FINISHED_STATUS } = require('@condo/domains/miniapp/constants')
const access = require('@condo/domains/news/access/GetNewsSharingRecipientsCountersService')
const { GET_CUSTOM_RECIPIENTS_COUNTERS_REQUEST_SCHEMA, GET_CUSTOM_RECIPIENTS_COUNTERS_RESPONSE_SCHEMA } = require('@condo/domains/news/constants/newsSharingApi')

const ajv = new Ajv()
const validateRequestSchema = ajv.compile(GET_CUSTOM_RECIPIENTS_COUNTERS_REQUEST_SCHEMA)
const validateResponseSchema = ajv.compile(GET_CUSTOM_RECIPIENTS_COUNTERS_RESPONSE_SCHEMA)

const ERRORS = {
    ORGANIZATION_IS_DELETED: {
        query: 'getNewsSharingRecipientsCounters',
        variable: ['data', 'b2bAppContext'],
        code: BAD_USER_INPUT,
        type: WRONG_VALUE,
        message: 'Provided b2bApp is deleted',
    },
    B2B_APP_CONTEXT_IS_DELETED: {
        query: 'getNewsSharingRecipientsCounters',
        variable: ['data', 'b2bAppContext'],
        code: BAD_USER_INPUT,
        type: WRONG_VALUE,
        message: 'Provided b2bAppContext is deleted',
    },
    B2B_APP_CONTEXT_IS_NOT_IN_FINISHED_STATUS: {
        query: 'getNewsSharingRecipientsCounters',
        variable: ['data', 'b2bAppContext'],
        code: BAD_USER_INPUT,
        type: WRONG_VALUE,
        message: 'Provided b2bAppContext is not yet ready',
    },
    B2B_APP_IS_DELETED: {
        query: 'getNewsSharingRecipientsCounters',
        variable: ['data', 'b2bAppContext'],
        code: BAD_USER_INPUT,
        type: WRONG_VALUE,
        message: 'Provided b2bApp is connected to deleted organization',
    },
    NOT_NEWS_SHARING_APP: {
        query: 'getNewsSharingRecipientsCounters',
        variable: ['data', 'b2bAppContext'],
        code: BAD_USER_INPUT,
        type: WRONG_VALUE,
        message: 'Provided b2bApp does not support NewsItemSharing',
    },
    NOT_CUSTOM_RECIPIENTS_QUERY_APP: {
        query: 'getNewsSharingRecipientsCounters',
        variable: ['data', 'b2bAppContext'],
        code: BAD_USER_INPUT,
        type: WRONG_VALUE,
        message: 'Provided b2bApp does not have getRecipientsCountersUrl',
    },
    NEWS_SHARING_APP_REQUEST_FAILED: {
        query: 'getNewsSharingRecipientsCounters',
        variable: ['data'],
        code: INTERNAL_ERROR,
        type: NETWORK_ERROR,
        message: 'Could not get a successful response from NewsSharing miniapp',
    },
    NEWS_SHARING_APP_REQUEST_BAD_RESPONSE: {
        query: 'getNewsSharingRecipientsCounters',
        variable: ['data'],
        code: INTERNAL_ERROR,
        type: WRONG_VALUE,
        message: 'Response from NewsSharing miniapp was successful, but the data format was incorrect',
    },
    NEWS_SHARING_APP_REQUEST_INTERNAL_ERROR: {
        query: 'getNewsSharingRecipientsCounters',
        variable: ['data'],
        code: INTERNAL_ERROR,
        type: WRONG_VALUE,
        message: 'Could not create request data payload',
    },
    BAD_ORGANIZATION: {
        query: 'getNewsSharingRecipientsCounters',
        variable: ['data'],
        code: INTERNAL_ERROR,
        type: WRONG_VALUE,
        message: 'Bad organization in one of the scopes. Organization in scopes should equal organization in context',
    },
}

const GetNewsSharingRecipientsCountersService = new GQLCustomSchema('GetNewsSharingRecipientsCountersService', {
    types: [
        {
            access: true,
            type: 'input GetNewsSharingRecipientsCountersInput { dv: Int!, sender: JSON! b2bAppContext: B2BAppContextWhereUniqueInput!, newsItemScopes: [NewsItemScopeWhereInput!]! }',
        },
        {
            access: true,
            type: 'type GetNewsSharingRecipientsCountersOutput { receiversCount: Int! }',
        },
    ],
    
    queries: [
        {
            access: access.canGetNewsSharingRecipientsCounters,
            schema: 'getNewsSharingRecipientsCounters (data: GetNewsSharingRecipientsCountersInput!): GetNewsSharingRecipientsCountersOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args

                const { b2bAppContext, newsItemScopes } = data

                checkDvAndSender(data, { DV_VERSION_MISMATCH, mutation: 'getNewsSharingRecipientsCounters' }, { WRONG_FORMAT, mutation: 'getNewsSharingRecipientsCounters' }, context)
                
                const b2bAppContextData = await getById('B2BAppContext', b2bAppContext.id)
                if (!b2bAppContextData || b2bAppContextData.deletedAt) {
                    throw new GQLError(ERRORS.B2B_APP_CONTEXT_IS_DELETED)
                }
                if (b2bAppContextData.status  !== CONTEXT_FINISHED_STATUS) {
                    throw new GQLError(ERRORS.B2B_APP_CONTEXT_IS_NOT_IN_FINISHED_STATUS)
                }

                const b2bApp = await getById('B2BApp', b2bAppContextData.app)
                if (!b2bApp || b2bApp.deletedAt) {
                    throw new GQLError(ERRORS.B2B_APP_IS_DELETED)
                }
                if (!b2bApp.newsSharingConfig) {
                    throw new GQLError(ERRORS.NOT_NEWS_SHARING_APP)
                }

                const newsSharingConfig = await getById('B2BAppNewsSharingConfig', b2bApp.newsSharingConfig)
                if (!newsSharingConfig || newsSharingConfig.deletedAt) {
                    throw new GQLError(ERRORS.NOT_NEWS_SHARING_APP)
                }

                const getRecipientsCountersUrl = newsSharingConfig.getRecipientsCountersUrl
                if (!getRecipientsCountersUrl) {
                    throw new GQLError(ERRORS.NOT_CUSTOM_RECIPIENTS_QUERY_APP)
                }

                const organizationId = b2bAppContextData.organization
                const organization = await getById('Organization', organizationId)

                const properties = await find('Property', { organization: { id: organizationId }, deletedAt: null })

                const getCustomRecipientsCountersRequestData = {
                    dv: 1,

                    organization: {
                        tin: organization.tin,
                        id: organizationId,
                        name: organization.name,
                    },

                    // Preprocess scopes, { property: { id } -> property: id }
                    scopes: newsItemScopes.map(scope => ({
                        organization: organizationId,
                        property: get(scope, ['property', 'id'], null),
                        unitName: scope.unitName || null,
                        unitType: scope.unitType || null,
                    })),

                    properties: properties.map(property => ({
                        id: property.id,
                        address: property.address,
                        addressMeta: property.addressMeta,
                    })),
                }

                // This check guarantees that data sent to server complies with news sharing api contract.
                if (!validateRequestSchema(getCustomRecipientsCountersRequestData)) {
                    throw new GQLError(ERRORS.NEWS_SHARING_APP_REQUEST_INTERNAL_ERROR)
                }

                let customGetRecipientsCountResult

                // Check that we can obtain result data
                try {
                    customGetRecipientsCountResult = await fetch(`${getRecipientsCountersUrl}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(getCustomRecipientsCountersRequestData),
                        abortRequestTimeout: 5000,
                    })
                }
                catch (err) {
                    throw new GQLError(ERRORS.NEWS_SHARING_APP_REQUEST_FAILED)
                }

                // If status code of response is not 200, we need to raise an error
                if (customGetRecipientsCountResult.status !== 200) {
                    throw new GQLError(ERRORS.NEWS_SHARING_APP_REQUEST_FAILED)
                }

                // Check that result data is in good shape
                let getCustomRecipientsCountResultData

                try {
                    getCustomRecipientsCountResultData = await customGetRecipientsCountResult.json()
                } catch (err) {
                    throw new GQLError(ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE)
                }

                if (!validateResponseSchema(getCustomRecipientsCountResultData)) {
                    throw new GQLError(ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE)
                }

                return getCustomRecipientsCountResultData
            },
        },
    ],
    
})

module.exports = {
    GetNewsSharingRecipientsCountersService,
    ERRORS,
}
