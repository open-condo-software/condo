/**
 * Generated by `createservice news.ExportNewsRecipientsService --type mutations`
 */
const { createHash } = require('crypto')

const dayjs = require('dayjs')

const conf = require('@open-condo/config')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')
const { extractReqLocale } = require('@open-condo/locales/extractReqLocale')
const { i18n } = require('@open-condo/locales/loader')

const { createExportFile } = require('@condo/domains/common/utils/createExportFile')
const { getHeadersTranslations, EXPORT_TYPE_NEWS_RECIPIENTS } = require('@condo/domains/common/utils/exportToExcel')
const access = require('@condo/domains/news/access/ExportNewsRecipientsService')
const { getUnitsData } = require('@condo/domains/news/utils/serverSchema/recipientsCounterUtils')

const buildExportFile = async ({ rows, locale }) => {
    const YesMessage = i18n('Yes', { locale })
    const NoMessage = i18n('No', { locale })
    const HeaderMessage = i18n('excelExport.sheetNames.newsRecipients', { locale })

    const processedRows = rows.reduce((acc, row) => {
        row.hasResident = row.hasResident ? YesMessage : NoMessage
        return [...acc, row]
    }, [])
    const { url: linkToFile } = await createExportFile({
        fileName: `news_recipients_${dayjs().format('DD_MM')}.xlsx`,
        templatePath: './domains/news/templates/NewsRecipientsExportTemplate.xlsx',
        replaces: {
            header: HeaderMessage,
            newsRecipients: processedRows,
            i18n: {
                ...getHeadersTranslations(EXPORT_TYPE_NEWS_RECIPIENTS, locale),
                sheetName: i18n('excelExport.sheetNames.newsRecipients', { locale }),
            },
        },
        meta: {
            listkey: 'NewsRecipients',
            id: createHash('md5').update(JSON.stringify(rows)).digest('hex'),
        },
    })

    return linkToFile
}

const ExportNewsRecipientsService = new GQLCustomSchema('ExportNewsRecipientsService', {
    types: [
        {
            access: true,
            type: 'input ExportNewsRecipientsInput { dv: Int!, sender: JSON!, organizationId: ID!, newsItemScopes: [NewsItemScopeWhereInput] }',
        },
        {
            access: true,
            type: 'type ExportNewsRecipientsOutput { status: String!, linkToFile: String! }',
        },
    ],

    mutations: [
        {
            access: access.canExportNewsRecipients,
            schema: 'exportNewsRecipients(data: ExportNewsRecipientsInput!): ExportNewsRecipientsOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { newsItemScopes, organizationId } } = args
                const locale = extractReqLocale(context.req) || conf.DEFAULT_LOCALE

                const { unitsData } = await getUnitsData(context, organizationId, newsItemScopes)

                const linkToFile = await buildExportFile({ rows: unitsData, locale })

                return { linkToFile, status: 'OK' }
            },
        },
    ],

})

module.exports = {
    ExportNewsRecipientsService,
}
