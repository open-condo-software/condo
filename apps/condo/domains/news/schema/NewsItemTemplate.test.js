/**
 * Generated by `createschema news.NewsItemTemplate 'organization?:Relationship:Organization:CASCADE; title:Text; body:Text;'`
 */

const { faker } = require('@faker-js/faker')

const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    DATETIME_RE,
    expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAccessDeniedErrorToObjects,
} = require('@open-condo/keystone/test.utils')

const {
    NewsItemTemplate,
    createTestNewsItemTemplate,
    updateTestNewsItemTemplate,
} = require('@condo/domains/news/utils/testSchema')
const {
    createTestOrganization,
    makeClientWithRegisteredOrganization,
    createTestOrganizationEmployeeRole,
    createTestOrganizationEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
    makeClientWithStaffUser,
    makeClientWithResidentUser,
} = require('@condo/domains/user/utils/testSchema')

let adminClient, supportClient, userClient, residentClient, anonymousClient, staffClient, staffClientNoPermission,
    dummyO10n, dummyNewsItemTemplate

describe('NewsItemTemplate', () => {
    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
    })

    describe('CRUD tests', () => {
        beforeAll(async () => {
            supportClient = await makeClientWithSupportUser()
            userClient = await makeClientWithNewRegisteredAndLoggedInUser()
            await makeClientWithRegisteredOrganization()
            residentClient = await makeClientWithResidentUser()
            anonymousClient = await makeClient()
            staffClient = await makeClientWithStaffUser()
            staffClientNoPermission = await makeClientWithStaffUser()

            const [templateCreated] = await createTestNewsItemTemplate(adminClient)
            dummyNewsItemTemplate = templateCreated

            const [o10n] = await createTestOrganization(adminClient)
            dummyO10n = o10n

            let [roleAllow] = await createTestOrganizationEmployeeRole(adminClient, o10n, {
                canManageNewsItemTemplates: true,
            })
            await createTestOrganizationEmployee(adminClient, o10n, staffClient.user, roleAllow)

            let [roleDisallow] = await createTestOrganizationEmployeeRole(adminClient, o10n, {
                canManageNewsItemTemplates: false,
            })
            await createTestOrganizationEmployee(adminClient, o10n, staffClientNoPermission.user, roleDisallow)
        })
        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestNewsItemTemplate(adminClient)

                // 3) check
                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.organization).toBeNull()
                expect(obj.title).toEqual(attrs.title)
                expect(obj.body).toEqual(attrs.body)
                expect(obj.type).toEqual(attrs.type)
            })

            test('support can', async () => {
                const [obj, attrs] = await createTestNewsItemTemplate(supportClient)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: supportClient.user.id }))
            })

            test('stuff with permission can', async () => {
                const [obj, attrs] = await createTestNewsItemTemplate(staffClient, { organization: { connect: { id: dummyO10n.id } } })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: staffClient.user.id }))
            })

            test('stuff with permission can\'t without organization', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemTemplate(staffClient)
                })
            })

            test('stuff without permission can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemTemplate(staffClientNoPermission, { organization: { connect: { id: dummyO10n.id } } })
                })
            })

            test('resident can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemTemplate(residentClient)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestNewsItemTemplate(anonymousClient)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [objCreated] = await createTestNewsItemTemplate(adminClient, { organization: { connect: { id: dummyO10n.id } } })
                const [obj, attrs] = await updateTestNewsItemTemplate(adminClient, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
            })

            test('support can', async () => {
                const [objCreated] = await createTestNewsItemTemplate(adminClient, { organization: { connect: { id: dummyO10n.id } } })
                const [obj, attrs] = await updateTestNewsItemTemplate(supportClient, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: supportClient.user.id }))
            })

            test('stuff with permission can', async () => {
                const [objCreated] = await createTestNewsItemTemplate(adminClient, { organization: { connect: { id: dummyO10n.id } } })
                const [obj, attrs] = await updateTestNewsItemTemplate(staffClient, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: staffClient.user.id }))
            })

            test('stuff without permission can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestNewsItemTemplate(staffClientNoPermission, dummyNewsItemTemplate.id)
                })
            })

            test('resident can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestNewsItemTemplate(residentClient, dummyNewsItemTemplate.id)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestNewsItemTemplate(anonymousClient, dummyNewsItemTemplate.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemTemplate(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemTemplate.delete(admin, objCreated.id)  // TODO(codegen): write 'admin: delete NewsItemTemplate' test
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemTemplate(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()  // TODO(codegen): create USER client!
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemTemplate.delete(client, objCreated.id)  // TODO(codegen): write 'user: delete NewsItemTemplate' test
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestNewsItemTemplate(admin)

                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemTemplate.delete(client, objCreated.id)  // TODO(codegen): write 'anonymous: delete NewsItemTemplate' test
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestNewsItemTemplate(adminClient)

                const objs = await NewsItemTemplate.getAll(adminClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('staff with permission can', async () => {
                const [obj] = await createTestNewsItemTemplate(adminClient, { organization: { connect: { id: dummyO10n.id } } })

                const objs = await NewsItemTemplate.getAll(staffClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                })
            })

            test('staff without permission can', async () => {
                const [obj] = await createTestNewsItemTemplate(adminClient, { organization: { connect: { id: dummyO10n.id } } })

                const objs = await NewsItemTemplate.getAll(staffClientNoPermission, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                })
            })

            test('resident can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObjects(async () => {
                    await NewsItemTemplate.getAll(residentClient, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await NewsItemTemplate.getAll(anonymousClient, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            await expectToThrowGQLError(
                async () => await createTestNewsItemTemplate(adminClient, { dv: 42 }),
                {
                    'code': 'BAD_USER_INPUT',
                    'type': 'DV_VERSION_MISMATCH',
                    'message': 'Wrong value for data version number',
                    'mutation': 'createNewsItemTemplate',
                    'variable': ['data', 'dv'],
                },
            )
        })
    })
})
