/**
 * Generated by `createschema news.NewsItemSharingContext 'b2bAppContext:Relationship:B2BAppContext:CASCADE; newsItemSharingApp:Relationship:NewsItemSharingApp:CASCADE;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File, Url } = require('@keystonejs/fields')

const { Json } = require('@open-condo/keystone/fields')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/news/access/NewsItemSharingContext')


const NewsItemSharingContext = new GQLListSchema('NewsItemSharingContext', {
    // TODO(codegen): write doc for the NewsItemSharingContext domain model!
    schemaDoc: 'TODO DOC!',
    fields: {

        b2bAppContext: {
            // TODO(codegen): write doc for NewsItemSharingContext.b2bAppContext field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'B2BAppContext',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        b2bApp: {
            // TODO(codegen): write doc for NewsItemSharingContext.b2bApp field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'B2BApp',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        newsItemSharingApp: {
            // TODO(codegen): write doc for NewsItemSharingContext.newsItemSharingApp field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'NewsItemSharingApp',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadNewsItemSharingContexts,
        create: access.canManageNewsItemSharingContexts,
        update: access.canManageNewsItemSharingContexts,
        delete: false,
        auth: true,
    },
})

module.exports = {
    NewsItemSharingContext,
}
