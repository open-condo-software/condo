/**
 * Generated by `createservice news.ExportNewsRecipientsService --type mutations`
 */
const { makeLoggedInAdminClient, makeClient, expectToThrowAuthenticationErrorToResult, expectToThrowAccessDeniedErrorToResult } = require('@open-condo/keystone/test.utils')

const { exportNewsRecipientsByTestClient } = require('@condo/domains/news/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { createTestOrganizationEmployeeRole, createTestOrganizationEmployee } = require('@condo/domains/organization/utils/testSchema')
const { buildingMapJson } = require('@condo/domains/property/constants/property')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { Property } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')


describe('ExportNewsRecipientsService', () => {
    let admin
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
    })
    test('user: execute', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const [organization] = await createTestOrganization(admin)
        const [emptyProperty, attrs] = await createTestProperty(admin, organization)
        const buildingMap = { ...buildingMapJson }
        const property = await Property.update(admin, emptyProperty.id, { dv: 1, sender: attrs.sender, map: buildingMap })
        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageNewsItems: true,
        })
        await createTestOrganizationEmployee(admin, organization, client.user, role)

        const payload = {
            newsItemScopes: [{
                property: { id: property.id },
            }],
        }
        const [response] = await exportNewsRecipientsByTestClient(admin, organization, payload)
        expect(response.status).toEqual('OK')
    })

    test('user cannot execute if no canManageNewsItems', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const [organization] = await createTestOrganization(admin)
        const [role] = await createTestOrganizationEmployeeRole(admin, organization, {
            canManageNewsItems: false,
        })
        await createTestOrganizationEmployee(admin, organization, client.user, role)

        await expectToThrowAccessDeniedErrorToResult(async () => {
            await exportNewsRecipientsByTestClient(client, organization)
        })
    })

    test('user cannot be executed if there is no canManageNewsItems in the organization', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const [anotherOrganization] = await createTestOrganization(admin)
        const [organization] = await createTestOrganization(admin)

        const [role] = await createTestOrganizationEmployeeRole(admin, anotherOrganization, {
            canManageNewsItems: true,
        })

        await createTestOrganizationEmployee(admin, anotherOrganization, client.user, role)

        await expectToThrowAccessDeniedErrorToResult(async () => {
            await exportNewsRecipientsByTestClient(client, organization)
        })
    })

    test('anonymous cannot execute', async () => {
        const client = await makeClient()
        await expectToThrowAuthenticationErrorToResult(async () => {
            await exportNewsRecipientsByTestClient(client, { id: 'id' })
        })
    })
 
    test('admin: execute', async () => {
        const [organization] = await createTestOrganization(admin)
        const [emptyProperty, attrs] = await createTestProperty(admin, organization)
        const buildingMap = { ...buildingMapJson }
        const property = await Property.update(admin, emptyProperty.id, { dv: 1, sender: attrs.sender, map: buildingMap })

        const payload = {
            newsItemScopes: [{
                property: { id: property.id },
            }],
        }
        const [response] = await exportNewsRecipientsByTestClient(admin, organization, payload)
        expect(response.status).toEqual('OK')
    })
})