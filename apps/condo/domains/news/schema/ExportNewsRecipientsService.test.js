/**
 * Generated by `createservice news.ExportNewsRecipientsService --type mutations`
 */

const { makeLoggedInAdminClient, makeClient } = require('@open-condo/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToObj, expectToThrowAuthenticationErrorToObjects } = require('@open-condo/keystone/test.utils')

const { exportNewsRecipientsByTestClient } = require('@condo/domains/news/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const { buildingMapJson } = require('@condo/domains/property/constants/property')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { Property } = require('@condo/domains/property/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { makeClientWithProperty } = require('../../property/utils/testSchema')
const { cloneDeep } = require('lodash')
const { faker } = require('@faker-js/faker')
const { createTestResident } = require('../../resident/utils/testSchema')
 
describe('ExportNewsRecipientsService', () => {
    let admin
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
    })
    test('user: execute', async () => {
        const client = await makeClientWithNewRegisteredAndLoggedInUser()
        const [organization] = await createTestOrganization(admin)
        const [emptyProperty, attrs] = await createTestProperty(admin, organization)
        const buildingMap = { ...buildingMapJson }
        const property = await Property.update(admin, emptyProperty.id, { dv: 1, sender: attrs.sender, map: buildingMap })

        const addressMetaWithFlat = cloneDeep(property.addressMeta)
        addressMetaWithFlat.data.flat = '3'
        addressMetaWithFlat.data.flat_type = 'кв.'
        addressMetaWithFlat.value = addressMetaWithFlat.value + ', кв. 3'

        const residentAttrs = {
            address: addressMetaWithFlat.value,
            unitName: '3',
            addressMeta: addressMetaWithFlat,
        }

        await createTestResident(admin, client.user, property, residentAttrs)
        const payload = {
            newsItemScopes: [{
                property: { id: property.id },
            }],
        }
        const [response] = await exportNewsRecipientsByTestClient(admin, organization, payload)
        expect(response.status).toEqual('OK')
    })
 
    test('anonymous: execute', async () => {
        const client = await makeClient()
        await expectToThrowAuthenticationErrorToObjects(async () => {
            await exportNewsRecipientsByTestClient(client)
        })
    })
 
    test('admin: execute', async () => {
        const admin = await makeLoggedInAdminClient()
        const payload = {}  // TODO(codegen): change the 'user: update ExportNewsRecipientsService' payload
        const [data, attrs] = await exportNewsRecipientsByTestClient(admin, payload)
        // TODO(codegen): write admin expect logic
        throw new Error('Not implemented yet')
    })
})