/**
 * Generated by `createservice news.GetNewsItemsRecipientsCountersService --type mutations`
 */
const { filter, pick, uniq, uniqBy } = require('lodash')

const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { loadListByChunks } = require('@condo/domains/common/utils/serverSchema')
const access = require('@condo/domains/news/access/GetNewsItemsRecipientsCountersService')
const { queryFindResidentsByOrganizationAndScopes } = require('@condo/domains/news/utils/accessSchema')
const {
    countUniqueUnitsFromResidents,
    getUnitsFromProperty,
    queryConditionsByUnits,
} = require('@condo/domains/news/utils/serverSchema/recipientsCounterUtils')
const { Property } = require('@condo/domains/property/utils/serverSchema')


const GetNewsItemsRecipientsCountersService = new GQLCustomSchema('GetNewsItemsRecipientsCountersService', {
    types: [
        {
            access: true,
            type: 'input GetNewsItemsRecipientsCountersInput { dv: Int!, sender: JSON!, organization: OrganizationWhereUniqueInput!, newsItemScopes: [NewsItemScopeWhereInput!]! }',
        },
        {
            access: true,
            type: 'type GetNewsItemsRecipientsCountersOutput { propertiesCount: Int!, unitsCount: Int!, receiversCount: Int! }',
        },
    ],

    queries: [
        {
            access: access.canGetNewsItemsRecipientsCounters,
            schema: 'getNewsItemsRecipientsCounters(data: GetNewsItemsRecipientsCountersInput!): GetNewsItemsRecipientsCountersOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { newsItemScopes, organization: { id: organizationId } } } = args

                const isAllOrganization = filter(newsItemScopes, {
                    property: null,
                    unitType: null,
                    unitName: null,
                }).length > 0

                let propertiesCount = 0, unitsCount = 0, receiversCount = 0
                const orConditions = []

                if (isAllOrganization) {
                    await loadListByChunks({
                        context,
                        list: Property,
                        chunkSize: 50,
                        where: { organization: { id: organizationId }, deletedAt: null },
                        /**
                         * @param {Property[]} chunk
                         * @returns {Property[]}
                         */
                        chunkProcessor: (chunk) => {
                            propertiesCount += chunk.length
                            for (const property of chunk) {
                                unitsCount += property.unitsCount
                                orConditions.push(...queryConditionsByUnits(property))
                            }

                            return []
                        },
                    })
                    receiversCount = await countUniqueUnitsFromResidents(context, {
                        organization: { id: organizationId },
                        OR: orConditions,
                    })
                } else {
                    const propertiesIds = uniq(newsItemScopes.map(({ property: { id } }) => id))
                    propertiesCount = propertiesIds.length

                    /**
                     * @type {Object<string, {unitType: string?, unitName: string?}[]>}
                     */
                    const unitsByProperties = newsItemScopes.reduce((acc, scope) => {
                        return {
                            ...acc,
                            [scope.property.id]: uniqBy([
                                ...(acc[scope.property.id] || []),
                                pick(scope, ['unitName', 'unitType']),
                            ]),
                        }
                    }, {})

                    const orConditions = []

                    await loadListByChunks({
                        context,
                        list: Property,
                        chunkSize: 50,
                        where: { id_in: propertiesIds, deletedAt: null },
                        /**
                         * @param {Property[]} chunk
                         * @returns {Property[]}
                         */
                        chunkProcessor: (chunk) => {
                            for (const property of chunk) {
                                const propertyUnitsFromScope = unitsByProperties[property.id]
                                const isAllProperty = filter(propertyUnitsFromScope, {
                                    unitType: null,
                                    unitName: null,
                                }).length > 0

                                if (isAllProperty) {
                                    unitsCount += (property.unitsCount + property.uninhabitedUnitsCount)
                                } else {
                                    const unitsFromProperty = getUnitsFromProperty(property)
                                    for (const unitFilter of propertyUnitsFromScope) {
                                        if (unitFilter.unitName) {
                                            unitsCount += filter(unitsFromProperty, unitFilter).length
                                        } else {
                                            unitsCount += filter(unitsFromProperty, { unitType: unitFilter.unitType }).length
                                        }
                                    }
                                }

                                orConditions.push(...queryConditionsByUnits(property))
                            }

                            return []
                        },
                    })

                    receiversCount = await countUniqueUnitsFromResidents(context, {
                        ...queryFindResidentsByOrganizationAndScopes(organizationId, newsItemScopes),
                        OR: orConditions,
                    })
                }

                return { propertiesCount, unitsCount, receiversCount }
            },
        },
    ],

})

module.exports = {
    GetNewsItemsRecipientsCountersService,
}
