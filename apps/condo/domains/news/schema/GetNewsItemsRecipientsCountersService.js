/**
 * Generated by `createservice news.GetNewsItemsRecipientsCountersService --type mutations`
 */
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/news/access/GetNewsItemsRecipientsCountersService')
const { getUnitsData } = require('@condo/domains/news/utils/serverSchema/recipientsCounterUtils')

const GetNewsItemsRecipientsCountersService = new GQLCustomSchema('GetNewsItemsRecipientsCountersService', {
    types: [
        {
            access: true,
            type: 'input GetNewsItemsRecipientsCountersInput { dv: Int!, sender: JSON!, organization: OrganizationWhereUniqueInput!, newsItemScopes: [NewsItemScopeWhereInput!]! }',
        },
        {
            access: true,
            type: 'type GetNewsItemsRecipientsCountersOutput { propertiesCount: Int!, unitsCount: Int!, receiversCount: Int! }',
        },
    ],

    queries: [
        {
            access: access.canGetNewsItemsRecipientsCounters,
            schema: 'getNewsItemsRecipientsCounters(data: GetNewsItemsRecipientsCountersInput!): GetNewsItemsRecipientsCountersOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { newsItemScopes, organization: { id: organizationId } } } = args
                const { propertiesCount, unitsData } = await getUnitsData(context, organizationId, newsItemScopes)

                const unitsCount = unitsData.length
                const receiversCount = unitsData.filter(({ hasResident }) => !!hasResident).length

                return { propertiesCount, unitsCount, receiversCount }
            },
        },
    ],

})

module.exports = {
    GetNewsItemsRecipientsCountersService,
}
