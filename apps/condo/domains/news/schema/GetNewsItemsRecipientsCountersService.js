/**
 * Generated by `createservice news.GetNewsItemsRecipientsCountersService --type mutations`
 */
const { filter, pick, uniq, uniqBy } = require('lodash')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, allItemsQueryByChunks, getById } = require('@open-condo/keystone/schema')

const access = require('@condo/domains/news/access/GetNewsItemsRecipientsCountersService')
const {
    countUniqueUnitsFromResidentsByPropertyIds,
    countUniqueUnitsFromResidentsByProperty,
    getUnitsFromProperty,
} = require('@condo/domains/news/utils/serverSchema/recipientsCounterUtils')



const CHUNK_SIZE = 50

const ERRORS = {
    SCOPE_NOT_SUPPORTED: {
        code: BAD_USER_INPUT,
        type: 'SCOPE_NOT_SUPPORTED',
        message: 'Cannot count recipients on these scopes. Only: Organization-level scope, Property-level scope, or UnitName/UnitType level scope for single property is supported',
    },
}


const GetNewsItemsRecipientsCountersService = new GQLCustomSchema('GetNewsItemsRecipientsCountersService', {
    types: [
        {
            access: true,
            type: 'input GetNewsItemsRecipientsCountersInput { dv: Int!, sender: JSON!, organization: OrganizationWhereUniqueInput!, newsItemScopes: [NewsItemScopeWhereInput!]! }',
        },
        {
            access: true,
            type: 'type GetNewsItemsRecipientsCountersOutput { propertiesCount: Int!, unitsCount: Int!, receiversCount: Int! }',
        },
    ],

    queries: [
        {
            access: access.canGetNewsItemsRecipientsCounters,
            schema: 'getNewsItemsRecipientsCounters(data: GetNewsItemsRecipientsCountersInput!): GetNewsItemsRecipientsCountersOutput',
            resolver: async (parent, args) => {
                const { data: { newsItemScopes, organization: { id: organizationId } } } = args

                // todo (DOMA-10129) move to addressKey in scopes + finish rebuilding this query
                let propertiesCount = 0, unitsCount = 0, receiversCount = 0


                // Organization level scope
                const isAllOrganization = filter(newsItemScopes, {
                    property: null,
                    unitType: null,
                    unitName: null,
                }).length > 0

                if (isAllOrganization) {
                    const propertyIds = []

                    await allItemsQueryByChunks({
                        schemaName: 'Property',
                        chunkSize: CHUNK_SIZE,
                        where: { organization: { id: organizationId }, deletedAt: null },
                        /**
                         * @param {Property[]} chunk
                         * @returns {Property[]}
                         */
                        chunkProcessor: (chunk) => {
                            propertiesCount += chunk.length
                            for (const property of chunk) {
                                unitsCount += (property.unitsCount + property.uninhabitedUnitsCount)
                                propertyIds.push(property.id)
                            }

                            return []
                        },
                    })

                    receiversCount = await countUniqueUnitsFromResidentsByPropertyIds(organizationId, propertyIds)

                    return { propertiesCount, unitsCount, receiversCount }
                }


                // Property level scopes only
                const isByProperties = filter(newsItemScopes, {
                    unitType: null,
                    unitName: null,
                }).length >= newsItemScopes.length

                if (isByProperties) {
                    const scopesByProperty = filter(newsItemScopes, {
                        unitType: null,
                        unitName: null,
                    })

                    const scopesByPropertyPropertyIds = uniq(scopesByProperty.map(({ property: { id } }) => id))

                    await allItemsQueryByChunks({
                        schemaName: 'Property',
                        chunkSize: CHUNK_SIZE,
                        where: { id_in: scopesByPropertyPropertyIds, deletedAt: null },
                        /**
                         * @param {Property[]} chunk
                         * @returns {Property[]}
                         */
                        chunkProcessor: (chunk) => {
                            propertiesCount += chunk.length
                            for (const property of chunk) {
                                unitsCount += (property.unitsCount + property.uninhabitedUnitsCount)
                            }

                            return []
                        },
                    })

                    receiversCount = await countUniqueUnitsFromResidentsByPropertyIds(organizationId, scopesByPropertyPropertyIds)

                    return { propertiesCount, unitsCount, receiversCount }
                }

                // If any scope has unitName or unitType â€“ this scope is considered complex
                // Sending complex scopes by multiple properties is not supported
                const isBySingleProperty = new Set(newsItemScopes.map(x => x.property.id)).size === 1

                if (isBySingleProperty) {
                    propertiesCount = 1
                    const propertyId = newsItemScopes[0].property.id
                    
                    const scopesUnitNamesByUnitType = {}

                    /**
                     * @type {Object<string, {unitType: string?, unitName: string?}[]>}
                     */
                    const scopesUnitsByProperties = newsItemScopes.reduce((acc, scope) => {
                        return {
                            ...acc,
                            [scope.property.id]: uniqBy([
                                ...(acc[scope.property.id] || []),
                                pick(scope, ['unitName', 'unitType']),
                            ]),
                        }
                    }, {})

                    const property = await getById('Property', propertyId)

                    const propertyUnitsFromScope = scopesUnitsByProperties[property.id]

                    const unitsFromProperty = getUnitsFromProperty(property)
                    for (const unitFilter of propertyUnitsFromScope) {
                        if (!scopesUnitNamesByUnitType[unitFilter.unitType]) { scopesUnitNamesByUnitType[unitFilter.unitType] = [] }
                        scopesUnitNamesByUnitType[unitFilter.unitType].push(unitFilter.unitName)

                        if (unitFilter.unitName) {
                            const filteredUnits = filter(unitsFromProperty, unitFilter)
                            unitsCount += filteredUnits.length
                        } else {
                            const filteredUnits = filter(unitsFromProperty, { unitType: unitFilter.unitType })
                            unitsCount += filteredUnits.length
                        }
                    }

                    const receiversCount = countUniqueUnitsFromResidentsByProperty(organizationId, propertyId, scopesUnitNamesByUnitType)

                    return { propertiesCount, unitsCount, receiversCount }
                }

                throw new GQLError(ERRORS.SCOPE_NOT_SUPPORTED)
            },
        },
    ],

})

module.exports = {
    GetNewsItemsRecipientsCountersService,
}
