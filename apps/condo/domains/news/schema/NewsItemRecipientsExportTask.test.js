/**
 * Generated by `createschema news.NewsItemRecipientsExportTask 'user:Relationship:User:CASCADE; status:Select:processing,completed,error; file?:File'`
 */
const { faker } = require('@faker-js/faker')

const conf = require('@open-condo/config')
const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    waitFor,
    expectToThrowGQLError, expectToThrowValidationFailureError,
} = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')
const { i18n } = require('@open-condo/locales/loader')

const { PROCESSING, COMPLETED, CANCELLED } = require('@condo/domains/common/constants/export')
const { downloadFile, readXlsx, expectDataFormat, getTmpFile } = require('@condo/domains/common/utils/testSchema/file')
const {
    propertyMap1x9x4,
    NewsItemRecipientsExportTask,
    createTestNewsItemRecipientsExportTask,
    updateTestNewsItemRecipientsExportTask,
} = require('@condo/domains/news/utils/testSchema')
const {
    createTestOrganizationEmployeeRole,
    createTestOrganizationEmployee,
    createTestOrganization,
} = require('@condo/domains/organization/utils/testSchema')
const { FLAT_UNIT_TYPE } = require('@condo/domains/property/constants/common')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const { createTestResident } = require('@condo/domains/resident/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')
const { createTestUser } = require('@condo/domains/user/utils/testSchema')

describe('NewsItemRecipientsExportTask', () => {
    let adminClient, userClient, anotherUserClient, anonymousClient
    let dummyO10n

    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()
        anotherUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymousClient = await makeClient()
        const [o10n] = await createTestOrganization(adminClient)
        dummyO10n = o10n
        await createTestProperty(adminClient, o10n, { map: propertyMap1x9x4 })
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin: can', async () => {
                const [obj] = await createTestNewsItemRecipientsExportTask(adminClient, adminClient.user, dummyO10n)

                expect(obj).toBeDefined()
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
            })

            test('user can only for himself', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, { canManageNewsItems: true })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

                const [obj, attrs] = await createTestNewsItemRecipientsExportTask(userClient, userClient.user, organization)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(obj).toHaveProperty('user.id', userClient.user.id)
                expect(obj).toHaveProperty('organization.id', organization.id)
                expect(obj).toHaveProperty('status', PROCESSING)
            })

            test('user cannot creat if him does not belongs to requested organization', async () => {
                const [organization] = await createTestOrganization(adminClient)
                const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                    canManageNewsItems: true,
                })
                await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
                const [forbiddenOrganization] = await createTestOrganization(adminClient)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemRecipientsExportTask(userClient, userClient.user, forbiddenOrganization)
                })
            })

            test('cannot be created without specifying concrete task author', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemRecipientsExportTask(userClient, userClient.user, dummyO10n, {
                        user: null,
                    })
                })
            })

            test('cannot be created by user for another user', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemRecipientsExportTask(userClient, anotherUserClient.user, dummyO10n)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestNewsItemRecipientsExportTask(anonymousClient, userClient.user, dummyO10n)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [objCreated] = await createTestNewsItemRecipientsExportTask(adminClient, adminClient.user, dummyO10n)

                const [obj, attrs] = await updateTestNewsItemRecipientsExportTask(adminClient, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestNewsItemRecipientsExportTask(adminClient, adminClient.user, dummyO10n)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestNewsItemRecipientsExportTask(anonymousClient, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [objCreated] = await createTestNewsItemRecipientsExportTask(adminClient, adminClient.user, dummyO10n)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemRecipientsExportTask.delete(adminClient, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestNewsItemRecipientsExportTask(adminClient, userClient.user, dummyO10n)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemRecipientsExportTask.delete(userClient, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestNewsItemRecipientsExportTask(adminClient, adminClient.user, dummyO10n)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemRecipientsExportTask.delete(anonymousClient, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                await createTestNewsItemRecipientsExportTask(adminClient, adminClient.user, dummyO10n)
                await createTestNewsItemRecipientsExportTask(adminClient, userClient.user, dummyO10n)

                const objs = await NewsItemRecipientsExportTask.getAll(adminClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(2)
            })

            test('user can only his own task', async () => {
                const userClient1 = await makeClientWithNewRegisteredAndLoggedInUser()
                const userClient2 = await makeClientWithNewRegisteredAndLoggedInUser()
                const userClient3 = await makeClientWithNewRegisteredAndLoggedInUser()

                const [obj1] = await createTestNewsItemRecipientsExportTask(adminClient, userClient1.user, dummyO10n)
                const [obj2] = await createTestNewsItemRecipientsExportTask(adminClient, userClient2.user, dummyO10n)

                const objs1 = await NewsItemRecipientsExportTask.getAll(userClient1, {})
                const objs2 = await NewsItemRecipientsExportTask.getAll(userClient2, {})
                const objs3 = await NewsItemRecipientsExportTask.getAll(userClient3, {})

                expect(objs1).toHaveLength(1)
                expect(objs1[0]).toMatchObject({
                    id: obj1.id,
                })
                expect(objs2).toHaveLength(1)
                expect(objs2[0]).toMatchObject({
                    id: obj2.id,
                })
                expect(objs3).toHaveLength(0)
            })

            test('anonymous can\'t', async () => {
                await createTestNewsItemRecipientsExportTask(adminClient, adminClient.user, dummyO10n)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await NewsItemRecipientsExportTask.getAll(anonymousClient, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('validations', () => {
        it('should throw validation error if you trying to change status of already completed task', async () => {
            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
            const [organization] = await createTestOrganization(adminClient)
            const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                canManageNewsItems: true,
            })
            await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)
            const [createdObj] = await createTestNewsItemRecipientsExportTask(userClient, userClient.user, organization)

            await waitFor(async () => {
                const updatedObj = await NewsItemRecipientsExportTask.getOne(userClient, { id: createdObj.id })

                expect(updatedObj).toHaveProperty('status', COMPLETED)
            })

            await expectToThrowGQLError(
                async () => await updateTestNewsItemRecipientsExportTask(userClient, createdObj.id, { status: CANCELLED }),
                {
                    code: 'BAD_USER_INPUT',
                    type: 'WRONG_VALUE',
                    message: 'Status is already completed',
                    variable: ['data', 'status'],
                    messageForUser: 'api.newsItemRecipientsExportTask.STATUS_IS_ALREADY_COMPLETED',
                })
        })

        describe('JSON schema for "scopes" field', () => {
            const cases = [
                {
                    scopes: [{ additionalField: 1 }],
                    error: 'scopes field validation error. JSON not in the correct format - path:/0 msg:must NOT have additional properties',
                },
                {
                    scopes: [{ property: 'some string' }],
                    error: 'scopes field validation error. JSON not in the correct format - path:/0/property msg:must be object',
                },
                {
                    scopes: [{ property: { a: 1 } }],
                    error: 'scopes field validation error. JSON not in the correct format - path:/0/property msg:must have required property \'id\'',
                },
                {
                    scopes: [{ property: { id: 0 } }],
                    error: 'scopes field validation error. JSON not in the correct format - path:/0/property/id msg:must be string',
                },
                {
                    scopes: [{ property: { id: 'some string' } }],
                    error: 'scopes field validation error. JSON not in the correct format - path:/0/property/id msg:must match format "uuid"',
                },
                {
                    scopes: [{ property: { id: faker.datatype.uuid(), a: 1 } }],
                    error: 'scopes field validation error. JSON not in the correct format - path:/0/property msg:must NOT have additional properties',
                },
                {
                    scopes: [{ property: { id: faker.datatype.uuid() }, unitType: 1 }],
                    error: 'scopes field validation error. JSON not in the correct format - path:/0/unitType msg:must be equal to one of the allowed values',
                },
                {
                    scopes: [{ property: { id: faker.datatype.uuid() }, unitType: 'flat', unitName: 1 }],
                    error: 'scopes field validation error. JSON not in the correct format - path:/0/unitName msg:must be string',
                },
            ]

            test.each(cases)('$i returns $error', async ({ scopes, error }) => {
                await expectToThrowValidationFailureError(async () => {
                    await createTestNewsItemRecipientsExportTask(adminClient, adminClient.user, dummyO10n, {
                        scopes,
                    })
                }, error)
            })
        })
    })

    describe('exportRecipients', () => {
        it('should create `NewsItemRecipientsExportTask` and create xlsx file', async () => {
            const locale = 'ru'
            const adminClient = await makeLoggedInAdminClient()
            const userClient = await makeClientWithNewRegisteredAndLoggedInUser()
            const [organization] = await createTestOrganization(adminClient)
            const [property] = await createTestProperty(adminClient, organization, { map: propertyMap1x9x4 })
            const [role] = await createTestOrganizationEmployeeRole(adminClient, organization, {
                canManageNewsItems: true,
            })
            await createTestOrganizationEmployee(adminClient, organization, userClient.user, role)

            const testResidentsData = [
                { unitType: FLAT_UNIT_TYPE, unitName: '1' },
                { unitType: FLAT_UNIT_TYPE, unitName: '2' },
                { unitType: FLAT_UNIT_TYPE, unitName: '3' },
                { unitType: FLAT_UNIT_TYPE, unitName: '4' },
                { unitType: FLAT_UNIT_TYPE, unitName: '5' },
            ]
            const residentsData = []

            for (const testResidentData of testResidentsData) {
                const [user] = await createTestUser(adminClient)
                const [resident] = await createTestResident(adminClient, user, property, testResidentData)
                residentsData.push({ user, resident })
            }

            const [task] = await createTestNewsItemRecipientsExportTask(userClient, userClient.user, organization)

            await waitFor(async () => {
                const updatedTask = await NewsItemRecipientsExportTask.getOne(userClient, { id: task.id })

                expect(updatedTask.file).toBeDefined()
                expect(updatedTask.file.publicUrl.length).toBeGreaterThan(1)
                expect(updatedTask).toHaveProperty('v', 2)
                expect(updatedTask).toHaveProperty('status', COMPLETED)
            })

            const updatedTask = await NewsItemRecipientsExportTask.getOne(userClient, { id: task.id })
            const url = updatedTask.file.publicUrl.replace(conf.SERVER_URL, userClient.serverUrl)
            const filename = getTmpFile('xlsx')
            await downloadFile(url, filename)
            const data = await readXlsx(filename)

            expectDataFormat(data, [
                [i18n('excelExport.sheetNames.newsRecipients', { locale }), '', ''],
                ['Адрес', 'Квартира', 'Установлено мобильное приложение жителя'],
                ...(residentsData.map(residentData => [
                    property.address,
                    residentData.resident.unitName,
                    i18n('Yes', { locale }),
                ])),
                ...Array(36 - residentsData.length).fill(null).map((v, i) => [
                    property.address,
                    String(residentsData.length + i + 1),
                    i18n('No', { locale }),
                ]),
            ])
        })
    })
})
