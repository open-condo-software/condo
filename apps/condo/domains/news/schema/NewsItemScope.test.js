/**
 * Generated by `createschema news.NewsItemScope 'newsItem:Relationship:NewsItem:CASCADE; property:Relationship:Property:CASCADE; unitType:Select:get,from,constant,unit_types; unitName:Text'`
 */

const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    DATETIME_RE,
    expectToThrowGQLError,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const {
    NewsItemScope,
    createTestNewsItemScope,
    updateTestNewsItemScope,
    createTestNewsItem,
} = require('@condo/domains/news/utils/testSchema')
const {
    createTestOrganizationEmployeeRole,
    createTestOrganizationEmployee,
    createTestOrganization,
} = require('@condo/domains/organization/utils/testSchema')
const { createTestProperty } = require('@condo/domains/property/utils/testSchema')
const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
    makeClientWithResidentUser,
    makeClientWithStaffUser,
} = require('@condo/domains/user/utils/testSchema')

let adminClient, supportClient, anonymousClient, dummyO10n, dummyProperty, dummyNewsItem,
    residentClient, staffClient, staffClientNoPermission, dummyRoleAllow, dummyRoleDisallow

describe('NewsItemScope', () => {
    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
    })

    describe('CRUD tests', () => {
        beforeAll(async () => {
            supportClient = await makeClientWithSupportUser()
            anonymousClient = await makeClient()
            const [o10n] = await createTestOrganization(adminClient)
            dummyO10n = o10n
            const [property] = await createTestProperty(adminClient, o10n)
            dummyProperty = property
            const [newsItem] = await createTestNewsItem(adminClient, o10n)
            dummyNewsItem = newsItem
            residentClient = await makeClientWithResidentUser()

            staffClient = await makeClientWithStaffUser()
            staffClientNoPermission = await makeClientWithStaffUser()

            let [roleAllow] = await createTestOrganizationEmployeeRole(adminClient, o10n, {
                canManageNewsItems: true,
            })
            dummyRoleAllow = roleAllow
            await createTestOrganizationEmployee(adminClient, dummyO10n, staffClient.user, dummyRoleAllow)

            let [roleDisallow] = await createTestOrganizationEmployeeRole(adminClient, o10n, {
                canManageNewsItems: false,
            })
            dummyRoleDisallow = roleDisallow
            await createTestOrganizationEmployee(adminClient, dummyO10n, staffClientNoPermission.user, dummyRoleDisallow)
        })

        describe('create', () => {
            test('admin can', async () => {
                const [obj, attrs] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
                expect(obj.newsItem.id).toEqual(dummyNewsItem.id)
                expect(obj.property.id).toEqual(dummyProperty.id)
            })

            test('support can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemScope(supportClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })
                })
            })

            test('stuff with permission can', async () => {
                const [obj, attrs] = await createTestNewsItemScope(staffClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: staffClient.user.id }))
            })

            test('stuff without permission can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemScope(staffClientNoPermission, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })
                })
            })

            test('resident can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestNewsItemScope(residentClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestNewsItemScope(anonymousClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [objCreated] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                const [obj, attrs] = await updateTestNewsItemScope(adminClient, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
            })

            test('support can\'t', async () => {
                const [objCreated] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestNewsItemScope(supportClient, objCreated.id)
                })
            })

            test('stuff with permission can', async () => {
                const [objCreated] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })
                const [obj, attrs] = await updateTestNewsItemScope(staffClient, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: staffClient.user.id }))
            })

            test('stuff without permission can\'t', async () => {
                const [objCreated] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestNewsItemScope(staffClientNoPermission, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestNewsItemScope(anonymousClient, objCreated.id)
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [objCreated] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemScope.delete(adminClient, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemScope.delete(client, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await NewsItemScope.delete(anonymousClient, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const [obj] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                const objs = await NewsItemScope.getAll(adminClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('staff with permission can', async () => {
                const [obj] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                const objs = await NewsItemScope.getAll(staffClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                })
            })

            test('staff without permission can', async () => {
                const [obj] = await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                const objs = await NewsItemScope.getAll(staffClientNoPermission, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs[0]).toMatchObject({
                    id: obj.id,
                })
            })

            test('anonymous can\'t', async () => {
                await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } } })

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await NewsItemScope.getAll(anonymousClient, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            await expectToThrowGQLError(
                async () => await createTestNewsItemScope(adminClient, dummyNewsItem, { property: { connect: { id: dummyProperty.id } }, dv: 42 }),
                {
                    'code': 'BAD_USER_INPUT',
                    'type': 'DV_VERSION_MISMATCH',
                    'message': 'Wrong value for data version number',
                    'mutation': 'createNewsItemScope',
                    'variable': ['data', 'dv'],
                },
            )
        })
    })
})
