/**
 * Generated by `createservice news.GetNewsItemSharingRecipientsService --type queries`
 */

const { makeLoggedInAdminClient, makeClient, expectToThrowAuthenticationError, expectToThrowAccessDeniedErrorToResult, expectToThrowGQLError, initTestExpressApp, getTestExpressApp } = require('@open-condo/keystone/test.utils')

const {
    createTestB2BAppNewsSharingConfig,
    createTestB2BApp,
    createTestB2BAppContext,
} = require('@condo/domains/miniapp/utils/testSchema')
const { ERRORS } = require('@condo/domains/news/schema/GetNewsSharingRecipientsService')
const { getNewsSharingRecipientsByTestClient } = require('@condo/domains/news/utils/testSchema')
const { createTestOrganization } = require('@condo/domains/organization/utils/testSchema')
const {
    createTestOrganizationEmployeeRole,
    createTestOrganizationEmployee,
} = require('@condo/domains/organization/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

const { 
    SUCCESS_GET_RECIPIENTS_URL,
    FAULTY_GET_RECIPIENTS_URL_404,
    FAULTY_GET_RECIPIENTS_URL_500,

    INCORRECT_GET_RECIPIENTS_RESULT_URL_WRONG_RETURN_TYPE,
    INCORRECT_GET_RECIPIENTS_URL_BAD_ID,
    INCORRECT_GET_RECIPIENTS_URL_BAD_NAME,
    INCORRECT_GET_RECIPIENTS_URL_OTHER_FIELDS,

    SUCCESS_PREVIEW_URL,
    SUCCESS_PUBLISH_URL,
    SUCCESS_GET_RECIPIENTS_RESULT,
    NewsSharingTestingApp,
} = require('../utils/testSchema/NewsSharingTestingApp')

let adminClient, dummyO10n, staffClientWithPermissions, dummyB2BContextWithNewsSharingConfig, testExpressAppBaseUrl


describe('GetNewsSharingRecipientsService', () => {

    initTestExpressApp('NewsSharing', new NewsSharingTestingApp().prepareMiddleware())

    beforeAll(async () => {
        const testExpressApp = getTestExpressApp('NewsSharing')
        testExpressAppBaseUrl = testExpressApp.baseUrl

        adminClient = await makeLoggedInAdminClient()

        const [o10n] = await createTestOrganization(adminClient)
        dummyO10n = o10n

        staffClientWithPermissions = await makeClientWithNewRegisteredAndLoggedInUser()
        const [roleYes] = await createTestOrganizationEmployeeRole(adminClient, o10n, { canManageNewsItems: true })
        await createTestOrganizationEmployee(adminClient, o10n, staffClientWithPermissions.user, roleYes)

        const [B2BAppNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(adminClient, {
            getRecipientsUrl: `${testExpressAppBaseUrl}${SUCCESS_GET_RECIPIENTS_URL}`,
            previewUrl: `${testExpressAppBaseUrl}${SUCCESS_PREVIEW_URL}`,
            publishUrl: `${testExpressAppBaseUrl}${SUCCESS_PUBLISH_URL}`,
        })
        const [B2BAppWithNewsSharing] = await createTestB2BApp(adminClient, { newsSharingConfig: { connect: { id: B2BAppNewsSharingConfig.id } } })
        const [B2BContextWithNewsSharingConfig] = await createTestB2BAppContext(adminClient, B2BAppWithNewsSharing, o10n)
        dummyB2BContextWithNewsSharingConfig = B2BContextWithNewsSharingConfig
    })

    test('Admin can execute query', async () => {
        const [data, attrs] = await getNewsSharingRecipientsByTestClient(adminClient, dummyB2BContextWithNewsSharingConfig)

        // If you are changing this test, that means you have changed schema of getRecipients.
        // You need to make sure our integrations sustain this change!
        expect(data[0]).toHaveProperty('id')
        expect(data[0]).toHaveProperty('name')
        expect(data[0]).toHaveProperty('receiversCount')

        expect(data).toMatchObject(SUCCESS_GET_RECIPIENTS_RESULT)
    })

    test('staff with permission can execute', async () => {
        const [data, attrs] = await getNewsSharingRecipientsByTestClient(staffClientWithPermissions, dummyB2BContextWithNewsSharingConfig)

        expect(data).toMatchObject(SUCCESS_GET_RECIPIENTS_RESULT)
    })

    test('fails if B2BContext doesnt have NewsSharingConfig', async () => {
        const [B2BApp] = await createTestB2BApp(adminClient)
        const [B2BContext] = await createTestB2BAppContext(adminClient, B2BApp, dummyO10n)

        await expectToThrowGQLError(async () => {
            await getNewsSharingRecipientsByTestClient(staffClientWithPermissions, B2BContext)
        }, {
            type: ERRORS.NOT_NEWS_SHARING_APP.type,
            code: ERRORS.NOT_NEWS_SHARING_APP.code,
            message: ERRORS.NOT_NEWS_SHARING_APP.message,
        }, 'result')
    })

    test('fails if remote server return bad response code: 404', async () => {
        const [B2BAppFailingNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(adminClient, {
            getRecipientsUrl: `${testExpressAppBaseUrl}${FAULTY_GET_RECIPIENTS_URL_404}`,
            previewUrl: `${testExpressAppBaseUrl}${SUCCESS_PREVIEW_URL}`,
            publishUrl: `${testExpressAppBaseUrl}${SUCCESS_PUBLISH_URL}`,
        })
        const [B2BApp] = await createTestB2BApp(adminClient, { newsSharingConfig: { connect: { id: B2BAppFailingNewsSharingConfig.id } } })
        const [B2BContext] = await createTestB2BAppContext(adminClient, B2BApp, dummyO10n)

        await expectToThrowGQLError(async () => {
            await getNewsSharingRecipientsByTestClient(staffClientWithPermissions, B2BContext)
        }, {
            type: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.type,
            code: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.code,
            message: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.message,
        }, 'result')
    })

    test('fails if remote server return bad response code: 500', async () => {
        const [B2BAppFailingNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(adminClient, {
            getRecipientsUrl: `${testExpressAppBaseUrl}${FAULTY_GET_RECIPIENTS_URL_500}`,
            previewUrl: `${testExpressAppBaseUrl}${SUCCESS_PREVIEW_URL}`,
            publishUrl: `${testExpressAppBaseUrl}${SUCCESS_PUBLISH_URL}`,
        })
        const [B2BApp] = await createTestB2BApp(adminClient, { newsSharingConfig: { connect: { id: B2BAppFailingNewsSharingConfig.id } } })
        const [B2BContext] = await createTestB2BAppContext(adminClient, B2BApp, dummyO10n)

        await expectToThrowGQLError(async () => {
            await getNewsSharingRecipientsByTestClient(staffClientWithPermissions, B2BContext)
        }, {
            type: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.type,
            code: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.code,
            message: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.message,
        }, 'result')
    })

    test('fails if remote server returns wrong data (bad type of id field)', async () => {
        const [B2BAppFailingNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(adminClient, {
            getRecipientsUrl: `${testExpressAppBaseUrl}${INCORRECT_GET_RECIPIENTS_URL_BAD_ID}`,
            previewUrl: `${testExpressAppBaseUrl}${SUCCESS_PREVIEW_URL}`,
            publishUrl: `${testExpressAppBaseUrl}${SUCCESS_PUBLISH_URL}`,
        })
        const [B2BApp] = await createTestB2BApp(adminClient, { newsSharingConfig: { connect: { id: B2BAppFailingNewsSharingConfig.id } } })
        const [B2BContext] = await createTestB2BAppContext(adminClient, B2BApp, dummyO10n)

        await expectToThrowGQLError(async () => {
            await getNewsSharingRecipientsByTestClient(staffClientWithPermissions, B2BContext)
        }, {
            type: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.type,
            code: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.code,
            message: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.message,
        }, 'result')
    })

    test('fails if remote server returns wrong data (bad type of name field)', async () => {
        const [B2BAppFailingNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(adminClient, {
            getRecipientsUrl: `${testExpressAppBaseUrl}${INCORRECT_GET_RECIPIENTS_URL_BAD_NAME}`,
            previewUrl: `${testExpressAppBaseUrl}${SUCCESS_PREVIEW_URL}`,
            publishUrl: `${testExpressAppBaseUrl}${SUCCESS_PUBLISH_URL}`,
        })
        const [B2BApp] = await createTestB2BApp(adminClient, { newsSharingConfig: { connect: { id: B2BAppFailingNewsSharingConfig.id } } })
        const [B2BContext] = await createTestB2BAppContext(adminClient, B2BApp, dummyO10n)

        await expectToThrowGQLError(async () => {
            await getNewsSharingRecipientsByTestClient(staffClientWithPermissions, B2BContext)
        }, {
            type: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.type,
            code: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.code,
            message: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.message,
        }, 'result')
    })

    test('fails if remote server returns wrong data (wrong data type)', async () => {
        const [B2BAppFailingNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(adminClient, {
            getRecipientsUrl: `${testExpressAppBaseUrl}${INCORRECT_GET_RECIPIENTS_RESULT_URL_WRONG_RETURN_TYPE}`,
            previewUrl: `${testExpressAppBaseUrl}${SUCCESS_PREVIEW_URL}`,
            publishUrl: `${testExpressAppBaseUrl}${SUCCESS_PUBLISH_URL}`,
        })
        const [B2BApp] = await createTestB2BApp(adminClient, { newsSharingConfig: { connect: { id: B2BAppFailingNewsSharingConfig.id } } })
        const [B2BContext] = await createTestB2BAppContext(adminClient, B2BApp, dummyO10n)

        await expectToThrowGQLError(async () => {
            await getNewsSharingRecipientsByTestClient(staffClientWithPermissions, B2BContext)
        }, {
            type: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.type,
            code: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.code,
            message: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.message,
        }, 'result')
    })

    test('fails if remote server returns wrong data (additional fields)', async () => {
        const [B2BAppFailingNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(adminClient, {
            getRecipientsUrl: `${testExpressAppBaseUrl}${INCORRECT_GET_RECIPIENTS_URL_OTHER_FIELDS}`,
            previewUrl: `${testExpressAppBaseUrl}${SUCCESS_PREVIEW_URL}`,
            publishUrl: `${testExpressAppBaseUrl}${SUCCESS_PUBLISH_URL}`,
        })
        const [B2BApp] = await createTestB2BApp(adminClient, { newsSharingConfig: { connect: { id: B2BAppFailingNewsSharingConfig.id } } })
        const [B2BContext] = await createTestB2BAppContext(adminClient, B2BApp, dummyO10n)

        await expectToThrowGQLError(async () => {
            await getNewsSharingRecipientsByTestClient(staffClientWithPermissions, B2BContext)
        }, {
            type: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.type,
            code: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.code,
            message: ERRORS.NEWS_SHARING_APP_REQUEST_BAD_RESPONSE.message,
        }, 'result')
    })

    test('fails if url is wrong', async () => {
        const [B2BAppFailingNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(adminClient, {
            getRecipientsUrl: 'ssh://192.168.255.255',
            previewUrl: `${testExpressAppBaseUrl}${SUCCESS_PREVIEW_URL}`,
            publishUrl: `${testExpressAppBaseUrl}${SUCCESS_PUBLISH_URL}`,
        })
        const [B2BApp] = await createTestB2BApp(adminClient, { newsSharingConfig: { connect: { id: B2BAppFailingNewsSharingConfig.id } } })
        const [B2BContext] = await createTestB2BAppContext(adminClient, B2BApp, dummyO10n)

        await expectToThrowGQLError(async () => {
            await getNewsSharingRecipientsByTestClient(staffClientWithPermissions, B2BContext)
        }, {
            type: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.type,
            code: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.code,
            message: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.message,
        }, 'result')
    })

    test('fails if remote server is inaccessible', async () => {
        const [B2BAppFailingNewsSharingConfig] = await createTestB2BAppNewsSharingConfig(adminClient, {
            getRecipientsUrl: 'https://192.168.255.255',
            previewUrl: `${testExpressAppBaseUrl}${SUCCESS_PREVIEW_URL}`,
            publishUrl: `${testExpressAppBaseUrl}${SUCCESS_PUBLISH_URL}`,
        })
        const [B2BApp] = await createTestB2BApp(adminClient, { newsSharingConfig: { connect: { id: B2BAppFailingNewsSharingConfig.id } } })
        const [B2BContext] = await createTestB2BAppContext(adminClient, B2BApp, dummyO10n)

        await expectToThrowGQLError(async () => {
            await getNewsSharingRecipientsByTestClient(staffClientWithPermissions, B2BContext)
        }, {
            type: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.type,
            code: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.code,
            message: ERRORS.NEWS_SHARING_APP_REQUEST_FAILED.message,
        }, 'result')
    })

    test('anonymous can\'t execute', async () => {
        const anonymousClient = await makeClient()
        await expectToThrowAuthenticationError(async () => {
            await getNewsSharingRecipientsByTestClient(anonymousClient, dummyB2BContextWithNewsSharingConfig)
        }, 'result')
    })

    test('staff without permission can\'t execute', async () => {
        const staffClientWithoutPermissions = await makeClientWithNewRegisteredAndLoggedInUser()
        const [roleNo] = await createTestOrganizationEmployeeRole(adminClient, dummyO10n, { canReadNewsItems: false })
        await createTestOrganizationEmployee(adminClient, dummyO10n, staffClientWithoutPermissions.user, roleNo)

        await expectToThrowAccessDeniedErrorToResult(async () => {
            await getNewsSharingRecipientsByTestClient(staffClientWithoutPermissions, dummyB2BContextWithNewsSharingConfig)
        })
    })
})