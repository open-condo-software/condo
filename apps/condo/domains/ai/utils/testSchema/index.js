/**
 * Generated by `createschema ai.ExecutionAIFlowTask 'flowType:Text; context:Json; status:Select:processing,completed,error,canceled; result?:Json; errorMessage?:Text; error?:Json; meta?:Json; locale:Text; generationId?:Text; user:Relationship:User:SET_NULL;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const { faker } = require('@faker-js/faker')

const { generateServerUtils, execGqlWithoutAccess } = require('@open-condo/codegen/generate.server.utils')

const { generateGQLTestUtils, throwIfError } = require('@open-condo/codegen/generate.test.utils')

const { ExecutionAIFlowTask: ExecutionAIFlowTaskGQL, ExecutionAIFlowTaskForUser: ExecutionAIFlowTaskForUserGQL } = require('@condo/domains/ai/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const ExecutionAIFlowTask = generateGQLTestUtils(ExecutionAIFlowTaskGQL)
const ExecutionAIFlowTaskForUser = generateGQLTestUtils(ExecutionAIFlowTaskForUserGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createTestExecutionAIFlowTask (client, user, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!user || !user.id) throw new Error('no user.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        user: { connect: { id: user.id } },
        ...extraAttrs,
    }
    const obj = await ExecutionAIFlowTask.create(client, attrs)
    return [obj, attrs]
}

async function updateTestExecutionAIFlowTask (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await ExecutionAIFlowTask.update(client, id, attrs)
    return [obj, attrs]
}

/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    ExecutionAIFlowTask, createTestExecutionAIFlowTask, updateTestExecutionAIFlowTask,
    ExecutionAIFlowTaskForUser,
/* AUTOGENERATE MARKER <EXPORTS> */
}
