/**
 * Generated by `createschema ai.ExecutionAIFlowTask 'flowType:Text; context:Json; status:Select:processing,completed,error,canceled; result?:Json; errorMessage?:Text; error?:Json; meta?:Json; locale:Text; generationId?:Text; user:Relationship:User:SET_NULL;'`
 */

const conf = require('@open-condo/config')
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const { TASK_STATUSES } = require('@condo/domains/ai/constants')


async function canReadExecutionAIFlowTasks ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return { user: { id: user.id } }
}

async function canManageExecutionAIFlowTasks ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (conf.AI_ENABLED !== 'true' && operation === 'create') return false

    if (user.isAdmin) return true

    if (operation === 'create') {
        return originalInput?.user?.connect?.id === user.id
    } else if (operation === 'update') {
        const task = await getById('ExecutionAIFlowTask', itemId)
        if (!task || task.deletedAt) return false

        return task.user === user.id && originalInput?.status === TASK_STATUSES.CANCELLED
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadExecutionAIFlowTasks,
    canManageExecutionAIFlowTasks,
}
