/**
 * Generated by `createservice contact._internalSyncContactsWithResidentsForOrganizationService --type mutations`
 */

const pick = require('lodash/pick')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, find, getById } = require('@open-condo/keystone/schema')

const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const access = require('@condo/domains/contact/access/_internalSyncContactsWithResidentsForOrganizationService')
const { Contact } = require('@condo/domains/contact/utils/serverSchema')
const { Organization } = require('@condo/domains/organization/utils/serverSchema')


const ERRORS = {
    ORGANIZATION_NOT_FOUND: {
        mutation: '_internalSyncContactsWithResidentsForOrganization',
        code: BAD_USER_INPUT,
        type: NOT_FOUND,
        message: 'Could not find Organization by specified search criteria',
    },
}

const _internalSyncContactsWithResidentsForOrganizationService = new GQLCustomSchema('_internalSyncContactsWithResidentsForOrganizationService', {
    schemaDoc: 'Mutation to sync organization contacts with organization residents. ' +
        'It takes all organization residents and create contact for each one (if contact with same phone number not exist). ' +
        'Returns array of created contacts',
    types: [
        {
            access: true,
            type: 'type _internalSyncContactsWithResidentsForOrganizationOutputRow { name: String!, unitType: String, unitName: String, phone: String!, email: String, address: String!, isVerified: Boolean }',
        },
        {
            access: true,
            type: 'input _internalSyncContactsWithResidentsForOrganizationInput { dv: Int!, sender: SenderFieldInput!, organization: OrganizationWhereUniqueInput! }',
        },
    ],

    mutations: [
        {
            access: access.can_internalSyncContactsWithResidentsForOrganization,
            schema: '_internalSyncContactsWithResidentsForOrganization(data: _internalSyncContactsWithResidentsForOrganizationInput!): [_internalSyncContactsWithResidentsForOrganizationOutputRow!]',
            resolver: async (parent, args, context) => {
                const { data } = args
                const { dv, sender, organization } = data

                const org = await Organization.getOne(context, { id: organization.id, deletedAt: null })
                if (!org) {
                    throw new GQLError(ERRORS.ORGANIZATION_NOT_FOUND, context)
                }

                const residents = await find('Resident', {
                    organization: { id: organization.id },
                    property: { organization: { id: organization.id }, deletedAt: null },
                    deletedAt: null,
                })

                const createdContacts = []

                for (const resident of residents) {
                    const user = await getById('User', resident.user)

                    if (user.deletedAt) {
                        continue
                    }

                    const { unitType, unitName, property } = resident
                    const { phone, email, name } = user

                    if (phone) {
                        const existedContacts = await find('Contact', {
                            phone: phone,
                            organization: { id: organization.id },
                            deletedAt: null,
                        })
                        if (existedContacts.length > 0) continue

                        const contactProps = {
                            dv,
                            sender,
                            organization: { connect: { id: organization.id } },
                            property: { connect: { id: property } },
                            unitName,
                            unitType,
                            email,
                            phone,
                            name,
                        }

                        const contact = await Contact.create(
                            context,
                            contactProps,
                            'name unitType unitName phone email isVerified property { address }'
                        )
                        createdContacts.push({
                            ...pick(contact, ['name', 'unitType', 'unitName', 'phone', 'email', 'isVerified']),
                            address: contact.property.address,
                        })
                    }
                }

                return createdContacts
            },
        },
    ],

})

module.exports = {
    _internalSyncContactsWithResidentsForOrganizationService,
    ERRORS,
}
