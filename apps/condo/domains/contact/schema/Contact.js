/**
 * Generated by `createschema contact.Contact 'property:Relationship:Property:SET_NULL; name:Text; phone:Text; unitName?:Text; email?:Text;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/contact/access/Contact')


const Contact = new GQLListSchema('Contact', {
    // TODO(codegen): write doc for the Contact domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        property: {
            // TODO(codegen): write doc for Contact.property field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Property',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.SET_NULL' },
        },

        name: {
            // TODO(codegen): write doc for Contact.name field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        phone: {
            // TODO(codegen): write doc for Contact.phone field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        unitName: {
            // TODO(codegen): write doc for Contact.unitName field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        email: {
            // TODO(codegen): write doc for Contact.email field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadContacts,
        create: access.canManageContacts,
        update: access.canManageContacts,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Contact,
}
