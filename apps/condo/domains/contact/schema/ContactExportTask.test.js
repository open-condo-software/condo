/**
 * Generated by `createschema contact.ContactExportTask 'status:Select:processing,completed,error; format:Select:excel;exportedRecordsCount:Integer; totalRecordsCount:Integer; file?:File; meta?:Json'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, waitFor } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { PROCESSING, COMPLETED, CANCELLED, EXCEL } = require('@condo/domains/common/constants/export')
const { ContactExportTask, createTestContactExportTask, updateTestContactExportTask } = require('@condo/domains/contact/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser } = require('@condo/domains/user/utils/testSchema')

describe('ContactExportTask', () => {
    let adminClient
    let userClient
    let anotherUserClient
    let anonymousClient

    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()
        anotherUserClient = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymousClient = await makeClient()
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin: can', async () => {
                const [obj] = await createTestContactExportTask(adminClient, adminClient.user)

                expect(obj).toBeDefined()
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
            })

            test('user can only for himself', async () => {

                const [obj, attrs] = await createTestContactExportTask(userClient, userClient.user)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(obj).toHaveProperty('user.id', userClient.user.id)
                expect(obj).toHaveProperty('format', EXCEL)
                expect(obj).toHaveProperty('status', PROCESSING)
            })

            test('cannot be created by user for another user', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestContactExportTask(userClient, anotherUserClient.user)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestContactExportTask(anonymousClient, userClient.user)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [objCreated] = await createTestContactExportTask(adminClient, adminClient.user)

                const [obj, attrs] = await updateTestContactExportTask(adminClient, objCreated.id, {
                    status: COMPLETED,
                })

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(obj).toHaveProperty('status', COMPLETED)
            })

            test('user can with providing "cancelled" value for "status" field', async () => {
                const [objCreated] = await createTestContactExportTask(userClient, userClient.user)

                const [obj, attrs] = await updateTestContactExportTask(userClient, objCreated.id, {
                    status: CANCELLED,
                })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: userClient.user.id }))
                expect(obj).toHaveProperty('status', CANCELLED)
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestContactExportTask(adminClient, adminClient.user)

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestContactExportTask(anonymousClient, objCreated.id, {
                        status: COMPLETED,
                    })
                })
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [objCreated] = await createTestContactExportTask(adminClient, adminClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ContactExportTask.delete(adminClient, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const [objCreated] = await createTestContactExportTask(userClient, userClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ContactExportTask.delete(userClient, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [objCreated] = await createTestContactExportTask(adminClient, adminClient.user)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ContactExportTask.delete(anonymousClient, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                await createTestContactExportTask(adminClient, adminClient.user)
                await createTestContactExportTask(adminClient, userClient.user)

                const objs = await ContactExportTask.getAll(adminClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(2)
            })

            test('user can only his own task', async () => {
                const userClient1 = await makeClientWithNewRegisteredAndLoggedInUser()
                const userClient2 = await makeClientWithNewRegisteredAndLoggedInUser()
                const userClient3 = await makeClientWithNewRegisteredAndLoggedInUser()

                const [obj1] = await createTestContactExportTask(userClient1, userClient1.user)
                const [obj2] = await createTestContactExportTask(userClient2, userClient2.user)

                const objs1 = await ContactExportTask.getAll(userClient1, {})
                const objs2 = await ContactExportTask.getAll(userClient2, {})
                const objs3 = await ContactExportTask.getAll(userClient3, {})

                expect(objs1).toHaveLength(1)
                expect(objs1[0]).toMatchObject({
                    id: obj1.id,
                })
                expect(objs2).toHaveLength(1)
                expect(objs2[0]).toMatchObject({
                    id: obj2.id,
                })
                expect(objs3).toHaveLength(0)
            })

            test('anonymous can\'t', async () => {
                await createTestContactExportTask(adminClient, adminClient.user)

                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await ContactExportTask.getAll(anonymousClient, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            // TODO(codegen): check it!
        })
    })

    describe('notifications', () => {
        // TODO(codegen): write notifications tests if you have any sendMessage calls or drop this block!
    })
})
