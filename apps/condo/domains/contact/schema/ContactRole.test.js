/**
 * Generated by `createschema contact.ContactRole 'name:Text'`
 */

const { makeLoggedInAdminClient, makeClient, UUID_RE, DATETIME_RE } = require('@open-condo/keystone/test.utils')

const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowGraphQLRequestError,
} = require('@open-condo/keystone/test.utils')

const {
    makeClientWithNewRegisteredAndLoggedInUser,
    makeClientWithSupportUser,
} = require('@condo/domains/user/utils/testSchema')

const { ContactRole, createTestContactRole, updateTestContactRole } = require('@condo/domains/contact/utils/testSchema')
const { makeClientWithRegisteredOrganization } = require('@condo/domains/organization/utils/testSchema')

describe('ContactRole', () => {
    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                // 1) prepare data
                const admin = await makeLoggedInAdminClient()

                // 2) action
                const [obj, attrs] = await createTestContactRole(admin)

                // 3) check
                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(1)
                expect(obj.newId).toEqual(null)
                expect(obj.deletedAt).toEqual(null)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: admin.user.id }))
                expect(obj.createdAt).toMatch(DATETIME_RE)
                expect(obj.updatedAt).toMatch(DATETIME_RE)
            })

            test('support can', async () => {
                const client = await makeClientWithSupportUser()

                const [obj, attrs] = await createTestContactRole(client)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('staff can', async () => {
                const client = await makeClientWithRegisteredOrganization()

                const [obj, attrs] = await createTestContactRole(client, { organization: { connect: { id: client.organization.id } } })

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.createdBy).toEqual(expect.objectContaining({ id: client.user.id }))
                expect(obj.organization).toEqual(expect.objectContaining({
                    id: client.organization.id,
                    name: client.organization.name,
                }))
            })

            test('anonymous can\'t', async () => {
                const client = await makeClient()

                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestContactRole(client)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestContactRole(admin)

                const [obj, attrs] = await updateTestContactRole(admin, objCreated.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
            })

            test('support can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestContactRole(admin)

                const client = await makeClientWithSupportUser()
                const [obj, attrs] = await updateTestContactRole(client, objCreated.id)

                expect(obj.id).toMatch(UUID_RE)
                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('staff can', async () => {
                const client = await makeClientWithRegisteredOrganization()
                const [objCreated] = await createTestContactRole(client, { organization: { connect: { id: client.organization.id } } })

                const [objUpdated, attrs] = await updateTestContactRole(client, objCreated.id)

                expect(objUpdated.id).toMatch(UUID_RE)
                expect(objUpdated.dv).toEqual(1)
                expect(objUpdated.sender).toEqual(attrs.sender)
                expect(objUpdated.updatedBy).toEqual(expect.objectContaining({ id: client.user.id }))
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestContactRole(admin)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestContactRole(client, objCreated.id)
                })
            })

            test('admin can\'t set organization=null to existing role', async () => {
                const admin = await makeLoggedInAdminClient()
                const client = await makeClientWithRegisteredOrganization()
                const [roleCreated] = await createTestContactRole(client, { organization: { connect: { id: client.organization.id } } })

                await expectToThrowGraphQLRequestError(async () => {
                    await updateTestContactRole(admin, roleCreated.id, { organization: { disconnectAll: true } })
                }, 'Field "organization" is not defined')
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestContactRole(admin)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ContactRole.delete(admin, objCreated.id)
                })
            })

            test('user can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestContactRole(admin)

                const client = await makeClientWithNewRegisteredAndLoggedInUser()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ContactRole.delete(client, objCreated.id)
                })
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                const [objCreated] = await createTestContactRole(admin)

                const client = await makeClient()
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await ContactRole.delete(client, objCreated.id)
                })
            })
        })

        describe('read', () => {
            test('admin can', async () => {
                const admin = await makeLoggedInAdminClient()
                const [obj] = await createTestContactRole(admin)

                const objs = await ContactRole.getAll(admin, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs.length).toBeGreaterThanOrEqual(1)
                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                    }),
                ]))
            })

            test('staff can', async () => {
                const client = await makeClientWithRegisteredOrganization()

                const [obj] = await createTestContactRole(client, { organization: { connect: { id: client.organization.id } } })
                const objs = await ContactRole.getAll(client, {})

                expect(objs).toEqual(expect.arrayContaining([
                    expect.objectContaining({
                        id: obj.id,
                        name: obj.name,
                    }),
                ]))
            })

            test('User can\'t see roles of third organizations', async () => {
                const client = await makeClientWithRegisteredOrganization()
                const thirdClient = await makeClientWithRegisteredOrganization()

                await createTestContactRole(client, { organization: { connect: { id: client.organization.id } } })
                const objs = await ContactRole.getAll(thirdClient, {}, { sortBy: ['updatedAt_DESC'] })

                expect(objs).not.toEqual(expect.arrayContaining([
                    expect.objectContaining({ organization: client.organization.id }),
                ]))
            })

            test('anonymous can\'t', async () => {
                const admin = await makeLoggedInAdminClient()
                await createTestContactRole(admin)

                const client = await makeClient()
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await ContactRole.getAll(client, {}, { sortBy: ['updatedAt_DESC'] })
                })
            })
        })
    })
})
