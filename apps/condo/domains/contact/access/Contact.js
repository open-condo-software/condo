/**
 * Generated by `createschema contact.Contact 'property:Relationship:Property:SET_NULL; name:Text; phone:Text; unitName?:Text; email?:Text;'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getById } = require('@open-condo/keystone/schema')

const {
    canReadObjectsAsB2BAppServiceUser,
    canManageObjectsAsB2BAppServiceUser,
} = require('@condo/domains/miniapp/utils/b2bAppServiceUserAccess')
const {
    checkPermissionsInEmployedOrRelatedOrganizations,
    getEmployedOrRelatedOrganizationsByPermissions,
} = require('@condo/domains/organization/utils/accessSchema')
const { SERVICE } = require('@condo/domains/user/constants/common')


async function canReadContacts (args) {
    const { authentication: { item: user }, context } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    
    if (user.isAdmin) return {}

    if (user.type === SERVICE) {
        return await canReadObjectsAsB2BAppServiceUser(args)
    }

    const permittedOrganizations = await getEmployedOrRelatedOrganizationsByPermissions(context, user, 'canReadContacts')

    return {
        organization: {
            id_in: permittedOrganizations,
        },
    }
}

async function canManageContacts (args) {
    const { authentication: { item: user }, originalInput, operation, itemId, context } = args

    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return true

    if (user.type === SERVICE) {
        return await canManageObjectsAsB2BAppServiceUser(args)
    }
    
    if (operation === 'create') {
        const organizationId = get(originalInput, ['organization', 'connect', 'id'])

        if (!organizationId) return false

        return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organizationId, 'canManageContacts')
    }

    if (operation === 'update' && itemId) {
        const contact = await getById('Contact', itemId)
        if (!contact) return false
        const contactOrganization = contact.organization

        if (!contactOrganization) return false

        return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, contactOrganization, 'canManageContacts')
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadContacts,
    canManageContacts,
}
