/**
 * Generated by `createschema contact.ContactRole 'name:Text'`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { ContactRole as ContactRoleGQL } from '@condo/domains/contact/gql'
import { ContactRole, ContactRoleUpdateInput, QueryAllContactRolesArgs } from '@app/condo/schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy', 'name', 'organization']
const RELATIONS = []

export interface IContactRoleUIState extends ContactRole {
    id: string
    // TODO(codegen): write IContactRoleUIState or extends it from
}

function convertToUIState (item: ContactRole): IContactRoleUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IContactRoleUIState
}

export interface IContactRoleFormState {
    id?: undefined
    // TODO(codegen): write IContactRoleUIFormState or extends it from
}

function convertToUIFormState (state: IContactRoleUIState): IContactRoleFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as IContactRoleFormState
}

function convertToGQLInput (state: IContactRoleFormState): ContactRoleUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<ContactRole, ContactRoleUpdateInput, IContactRoleFormState, IContactRoleUIState, QueryAllContactRolesArgs>(ContactRoleGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
