/**
 * Generated by `createschema document.Document 'organization:Relationship:Organization:CASCADE; property?:Relationship:Property:CASCADE; category:Relationship:DocumentCategory:CASCADE; file:File;'`
 */
const get = require('lodash/get')

const { GQLError } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema, getById } = require('@open-condo/keystone/schema')

const FileAdapter = require('@condo/domains/common/utils/fileAdapter')
const { getFileMetaAfterChange } = require('@condo/domains/common/utils/fileAdapter')
const access = require('@condo/domains/document/access/Document')
const { ERRORS } = require('@condo/domains/document/constants')


const DOCUMENT_FOLDER_NAME = 'document'
const Adapter = new FileAdapter(DOCUMENT_FOLDER_NAME)
const fileMetaAfterChange = getFileMetaAfterChange(Adapter)

const Document = new GQLListSchema('Document', {
    schemaDoc: 'Document with file attached to organization or property. It could be some kind of property documentation, inspection reports or other documents',
    fields: {
        organization: {
            schemaDoc: 'Organization to which the document is attached',
            type: 'Relationship',
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
        property: {
            schemaDoc: 'Property to which the document is attached',
            type: 'Relationship',
            ref: 'Property',
            kmigratorOptions: { null: true, on_delete: 'models.CASCADE' },
        },
        category: {
            schemaDoc: 'Document type',
            type: 'Relationship',
            ref: 'DocumentCategory',
            isRequired: true,
            knexOptions: { isNotNullable: true },
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
        file: {
            schemaDoc: 'File attached to document',
            type: 'File',
            adapter: Adapter,
            isRequired: true,
        },
    },
    hooks: {
        validateInput: async ({ resolvedData, existingItem, context }) => {
            const newItem = { ...existingItem, ...resolvedData }

            const resolvedPropertyId = resolvedData['property']
            if (resolvedPropertyId) {
                const property = await getById('Property', resolvedPropertyId)
                
                if (get(property, 'organization') !== newItem.organization) {
                    throw new GQLError(ERRORS.WRONG_PROPERTY_ORGANIZATION, context)
                }
            }
        },

        afterChange: fileMetaAfterChange,
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadDocuments,
        create: access.canManageDocuments,
        update: access.canManageDocuments,
        delete: false,
        auth: true,
    },
})

module.exports = {
    Document,
}
