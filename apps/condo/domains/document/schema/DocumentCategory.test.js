/**
 * Generated by `createschema document.DocumentCategory 'name:Text; order:Integer;'`
 */

const { faker } = require('@faker-js/faker')

const { makeLoggedInAdminClient, makeClient, UUID_RE } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj, expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { DocumentCategory, createTestDocumentCategory, updateTestDocumentCategory, softDeleteTestDocumentCategory } = require('@condo/domains/document/utils/testSchema')
const { makeClientWithNewRegisteredAndLoggedInUser, makeClientWithSupportUser } = require('@condo/domains/user/utils/testSchema')


describe('DocumentCategory', () => {
    let admin, support, anonymous, userClient, propertyFileCategory

    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeClientWithSupportUser()
        anonymous = await makeClient()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()

        const [testDocumentCategory] = await createTestDocumentCategory(admin)
        propertyFileCategory = testDocumentCategory
    })

    describe('Access', () => {
        describe('Create', () => {
            it('admin can', async () => {
                const [testDocumentCategory] = await createTestDocumentCategory(admin)

                expect(testDocumentCategory).toBeDefined()
                expect(testDocumentCategory.id).toMatch(UUID_RE)
            })

            it('support can', async () => {
                const [testDocumentCategory] = await createTestDocumentCategory(support)

                expect(testDocumentCategory).toBeDefined()
                expect(testDocumentCategory.id).toMatch(UUID_RE)
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestDocumentCategory(anonymous)
                })
            })

            it('user can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestDocumentCategory(userClient)
                })
            })
        })

        describe('Read', () => {
            it('admin can', async () => {
                const readDocumentCategory = await DocumentCategory.getOne(admin, { id: propertyFileCategory.id })

                expect(readDocumentCategory).toBeDefined()
                expect(readDocumentCategory.id).toEqual(propertyFileCategory.id)
            })

            it('support can', async () => {
                const readDocumentCategory = await DocumentCategory.getOne(support, { id: propertyFileCategory.id })

                expect(readDocumentCategory).toBeDefined()
                expect(readDocumentCategory.id).toEqual(propertyFileCategory.id)
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await DocumentCategory.getOne(anonymous, { id: propertyFileCategory.id })
                })
            })

            it('user can', async () => {
                const readDocumentCategory = await DocumentCategory.getOne(userClient, { id: propertyFileCategory.id })

                expect(readDocumentCategory).toBeDefined()
                expect(readDocumentCategory.id).toEqual(propertyFileCategory.id)
            })
        })

        describe('Update', () => {
            it('admin can', async () => {
                const [testDocumentCategory] = await createTestDocumentCategory(admin)
                const newName = faker.random.alphaNumeric(8)

                const [updatedDocumentCategory] = await updateTestDocumentCategory(admin, testDocumentCategory.id, {
                    name: newName,
                })

                expect(updatedDocumentCategory.id).toEqual(testDocumentCategory.id)
                expect(updatedDocumentCategory.name).toEqual(newName)
            })

            it('support can', async () => {
                const [testDocumentCategory] = await createTestDocumentCategory(support)
                const newName = faker.random.alphaNumeric(8)

                const [updatedDocumentCategory] = await updateTestDocumentCategory(support, testDocumentCategory.id, {
                    name: newName,
                })

                expect(updatedDocumentCategory.id).toEqual(testDocumentCategory.id)
                expect(updatedDocumentCategory.name).toEqual(newName)
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestDocumentCategory(anonymous, propertyFileCategory.id, {})
                })
            })

            it('user can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestDocumentCategory(userClient, propertyFileCategory.id, {})
                })
            })
        })

        describe('Soft delete', () => {
            it('admin can', async () => {
                const [testDocumentCategory] = await createTestDocumentCategory(admin)
                const [deletedDocumentCategory] = await softDeleteTestDocumentCategory(admin, testDocumentCategory.id)

                expect(deletedDocumentCategory.id).toEqual(testDocumentCategory.id)
                expect(deletedDocumentCategory.deletedAt).toBeDefined()
            })

            it('support can', async () => {
                const [testDocumentCategory] = await createTestDocumentCategory(support)
                const [deletedDocumentCategory] = await softDeleteTestDocumentCategory(support, testDocumentCategory.id)

                expect(deletedDocumentCategory.id).toEqual(testDocumentCategory.id)
                expect(deletedDocumentCategory.deletedAt).toBeDefined()
            })

            it('anonymous can not', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await softDeleteTestDocumentCategory(anonymous, propertyFileCategory.id)
                })
            })

            it('user can not', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await softDeleteTestDocumentCategory(userClient, propertyFileCategory.id)
                })
            })
        })
    })
})
