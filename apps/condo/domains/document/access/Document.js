/**
 * Generated by `createschema document.Document 'organization:Relationship:Organization:CASCADE; property?:Relationship:Property:CASCADE; category:Relationship:DocumentCategory:CASCADE; file:File;'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const {
    checkPermissionsInEmployedOrRelatedOrganizations,
    getEmployedOrganizationsByPermissions,
} = require('@condo/domains/organization/utils/accessSchema')


async function canReadDocuments ({ authentication: { item: user }, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    const permittedOrganizations = await getEmployedOrganizationsByPermissions(context, user, 'canReadDocuments')

    return { organization: { id_in: permittedOrganizations } }
}

async function canManageDocuments ({ authentication: { item: user }, originalInput, operation, itemId, itemIds, context }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    const isBulkRequest = Array.isArray(originalInput)

    let organizationIds

    if (operation === 'create') {
        if (isBulkRequest) {
            organizationIds = originalInput
                .map(item => get(item, 'data.organization.connect.id'))
            if (organizationIds.some(item => !item)) {
                return false
            }
        } else {
            const organizationId = get(originalInput, ['organization', 'connect', 'id'])
            if (!organizationId) {
                return false
            }
            organizationIds = [organizationId]
        }
    } else if (operation === 'update') {
        const ids = itemIds || [itemId]
        const documents = await find('Document', {
            id_in: ids,
            deletedAt: null,
        })
        organizationIds = documents.map(document => get(document, 'organization')).filter(Boolean)
        if (organizationIds.length !== ids.length) return false
    }

    return await checkPermissionsInEmployedOrRelatedOrganizations(context, user, organizationIds, 'canManageDocuments')
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadDocuments,
    canManageDocuments,
}
