/**
 * Generated by `createschema document.DocumentCategory 'name:Text; order:Integer;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const { faker } = require('@faker-js/faker')

const { generateGQLTestUtils } = require('@open-condo/codegen/generate.test.utils')

const { DocumentCategory: DocumentCategoryGQL } = require('@condo/domains/document/gql')
const { Document: DocumentGQL } = require('@condo/domains/document/gql')
const { UploadingFile } = require('@open-condo/keystone/test.utils')
const path = require('path')
const conf = require('@open-condo/config')
/* AUTOGENERATE MARKER <IMPORT> */


const DocumentCategory = generateGQLTestUtils(DocumentCategoryGQL)
const Document = generateGQLTestUtils(DocumentGQL)
/* AUTOGENERATE MARKER <CONST> */

const TEST_FILE = path.resolve(conf.PROJECT_ROOT, 'apps/condo/domains/common/test-assets/dino.png')

async function createTestDocumentCategory (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    if (!extraAttrs.name) {
        extraAttrs.name = faker.random.alphaNumeric(8)
    }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await DocumentCategory.create(client, attrs)
    return [obj, attrs]
}

async function updateTestDocumentCategory (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await DocumentCategory.update(client, id, attrs)
    return [obj, attrs]
}

async function softDeleteTestDocumentCategory (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
        deletedAt: new Date().toISOString()
    }
    const obj = await DocumentCategory.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestDocument (client, organization, category, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!organization || !organization.id) throw new Error('no organization.id')
    if (!category || !category.id) throw new Error('no category.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        organization: { connect: { id: organization.id } },
        category: { connect: { id: category.id } },
        file: new UploadingFile(TEST_FILE),
        ...extraAttrs,
    }
    const obj = await Document.create(client, attrs)
    return [obj, attrs]
}

async function updateTestDocument (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await Document.update(client, id, attrs)
    return [obj, attrs]
}

async function softDeleteTestDocument (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
        deletedAt: new Date().toISOString()
    }
    const obj = await Document.update(client, id, attrs)
    return [obj, attrs]
}


/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    DocumentCategory, createTestDocumentCategory, updateTestDocumentCategory, softDeleteTestDocumentCategory,
    Document, createTestDocument, updateTestDocument, softDeleteTestDocument,
/* AUTOGENERATE MARKER <EXPORTS> */
}
