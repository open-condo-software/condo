/**
 * Generated by `createschema test.Model 'name:Text; someRelation:Relationship:RelationModel:SET_NULL; manyRelations:Relationship:RelationModel:SET_NULL'`
 */

const { GQLListSchema } = require('@open-condo/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const access = require('@condo/domains/test/access/Model')


const Model = new GQLListSchema('Model', {
    // TODO(codegen): write doc for the Model domain model!
    schemaDoc: 'TODO DOC!',
    fields: {

        name: {
            // TODO(codegen): write doc for Model.name field!
            schemaDoc: 'TODO DOC!',
            type: 'Text',
            isRequired: true,
        },

        someRelation: {
            // TODO(codegen): write doc for Model.someRelation field!
            schemaDoc: 'TODO DOC!',
            type: 'Relationship',
            ref: 'RelationModel',
            isRequired: false,
            knexOptions: { isNotNullable: false }, // Required relationship only!
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        manyRelations: {
            // TODO(codegen): write doc for Model.manyRelations field!
            schemaDoc: 'TODO DOC!',
            type: 'Relationship',
            ref: 'RelationModel',
            many: true,
            isRequired: true
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadModels,
        create: access.canManageModels,
        update: access.canManageModels,
        delete: access.canManageModels,
        auth: true,
    },
})

module.exports = {
    Model,
}
