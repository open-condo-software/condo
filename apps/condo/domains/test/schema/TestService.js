/**
 * Generated by `createservice test.TestService`
 */

const { GQLCustomSchema, find } = require('@open-condo/keystone/schema')
const access = require('@condo/domains/test/access/TestService')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { NOT_FOUND } = require('@condo/domains/common/constants/errors')
const { Model } = require('../utils/serverSchema')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY: {mutation: 'test',
        variable: ['data', 'someVar'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
        code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@open-condo/keystone/errors'
        type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
        message: 'Describe what happened for developer',
        messageForUser: 'api.user.test.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
    },
}

const TestService = new GQLCustomSchema('TestService', {
    types: [
        {
            access: true,
            // TODO(codegen): write TestService input !
            type: 'input TestInput { dv: Int!, sender: JSON! }',
        },
        {
            access: true,
            // TODO(codegen): write TestService output !
            type: 'type TestOutput { id: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canTest,
            schema: 'test(data: String!): TestOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const a = 3
                const models = await Model.getAll(context, {}, { first: 100 })

                const models2 = await find('Model', {})

                return {
                    id: 'null',
                }
            },
        },
    ],
    
})


module.exports = {
    TestService,
}
