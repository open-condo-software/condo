/**
 * Generated by `createschema test.RelationModel 'name:Text;'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const { faker } = require('@faker-js/faker')

const { generateServerUtils, execGqlWithoutAccess } = require('@open-condo/codegen/generate.server.utils')

const { generateGQLTestUtils, throwIfError } = require('@open-condo/codegen/generate.test.utils')

const { RelationModel: RelationModelGQL } = require('@condo/domains/test/gql')
const { Model: ModelGQL } = require('@condo/domains/test/gql')
const { TEST_MUTATION } = require('@condo/domains/test/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const RelationModel = generateGQLTestUtils(RelationModelGQL)
const Model = generateGQLTestUtils(ModelGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createTestRelationModel (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    // TODO(codegen): write createTestRelationModel logic for generate fields

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await RelationModel.create(client, attrs)
    return [obj, attrs]
}

async function updateTestRelationModel (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    // TODO(codegen): check the updateTestRelationModel logic for generate fields

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await RelationModel.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestModel (client, someRelation, manyRelations, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!someRelation || !someRelation.id) throw new Error('no someRelation.id')
    if (!manyRelations || !manyRelations.id) throw new Error('no manyRelations.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    // TODO(codegen): write createTestModel logic for generate fields

    const attrs = {
        dv: 1,
        sender,
        someRelation: { connect: { id: someRelation.id } },
        manyRelations: { connect: { id: manyRelations.id } },
        ...extraAttrs,
    }
    const obj = await Model.create(client, attrs)
    return [obj, attrs]
}

async function updateTestModel (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    // TODO(codegen): check the updateTestModel logic for generate fields

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await Model.update(client, id, attrs)
    return [obj, attrs]
}


async function testByTestClient(client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const { data, errors } = await client.mutate(TEST_MUTATION, { data: attrs })
    throwIfError(data, errors)
    return [data.result, attrs]
}
/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    RelationModel, createTestRelationModel, updateTestRelationModel,
    Model, createTestModel, updateTestModel,
    testByTestClient,
/* AUTOGENERATE MARKER <EXPORTS> */
}
