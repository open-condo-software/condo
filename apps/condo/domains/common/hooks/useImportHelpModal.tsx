import styled from '@emotion/styled'
import { Col, Form, notification, Row, Space } from 'antd'
import get from 'lodash/get'
import React, { Dispatch, SetStateAction, useCallback, useMemo, useState } from 'react'

import { ArrowLeft, Phone } from '@open-condo/icons'
import { useAuth } from '@open-condo/next/auth'
import { useOrganization } from '@open-condo/next/organization'
import { Alert, Button, Card, Modal, Typography } from '@open-condo/ui'

import { FormWithAction } from '@condo/domains/common/components/containers/FormList'
import { LinkWithIcon } from '@condo/domains/common/components/LinkWithIcon'
import { useMultipleFileUploadHook } from '@condo/domains/common/components/MultipleFileUpload'
import { PhoneInput } from '@condo/domains/common/components/PhoneInput'

import { useValidations } from './useValidations'

import { UserHelpRequest, UserHelpRequestFile } from '../../onboarding/utils/clientSchema'


const CardsWrapper = styled.div`
  display: flex;
  flex-direction: row;
  gap: 8px;

  & .condo-card {
    width: 240px;
    display: flex;
    flex-direction: column;

    .condo-card-body {
      flex-grow: 1;
    }
  }
`
const CallModal = styled(Modal)`
  &.condo-modal .condo-modal-header {
    padding: 40px 40px 20px 40px;
  }
`

type ActiveModalType = 'choose' | 'call' | 'upload'
type ImportHelpModalProps = {
    domainName: string
    activeModal: ActiveModalType
    setActiveModal: Dispatch<SetStateAction<ActiveModalType>>
}

export const ImportHelpModal: React.FC<ImportHelpModalProps> = ({ domainName, activeModal, setActiveModal }) => {
    const { user } = useAuth()
    const { organization } = useOrganization()
    const phone = useMemo(() => get(user, 'phone'), [user])
    const initialValues = useMemo(() => ({ phone }), [phone])
    const createHelpRequestAction = UserHelpRequest.useCreate({
        organization: { connect: { id: get(organization, 'id', null) } },
        meta: { importType: domainName },
    })
    const updateHelpRequestAction = UserHelpRequest.useUpdate({})

    const { requiredValidator, phoneValidator } = useValidations()

    const [callForm] = Form.useForm()
    const [uploadForm] = Form.useForm()

    const { UploadComponent, syncModifiedFiles } = useMultipleFileUploadHook({
        Model: UserHelpRequestFile,
        relationField: 'userHelpRequest',
        initialFileList: [],
    })

    const callFormAction = useCallback(async values => {
        await createHelpRequestAction({
            type: 'callback',
            phone: get(values, 'phone'),
        })

        setActiveModal(null)
    }, [createHelpRequestAction, setActiveModal])

    const uploadFormAction = useCallback(async values => {
        const helpRequest = await createHelpRequestAction({
            type: 'importFile',
            phone: get(values, 'phone'),
            isReadyToSend: false,
        })

        await syncModifiedFiles(helpRequest.id)

        await updateHelpRequestAction({
            isReadyToSend: true,
        }, helpRequest)
        setActiveModal(null)
    }, [createHelpRequestAction, setActiveModal, syncModifiedFiles, updateHelpRequestAction])

    return (
        <>
            <Modal
                open={activeModal === 'choose'}
                onCancel={() => setActiveModal(null)}
                title={(
                    <Space size={8} direction='vertical'>
                        <Typography.Title level={3}>
                            –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º
                        </Typography.Title>
                        <Typography.Text size='medium' type='secondary'>
                            –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
                        </Typography.Text>
                    </Space>
                )}
            >
                <Space size={20} direction='vertical' align='end'>
                    <CardsWrapper>
                        <Card.CardButton
                            header={{
                                emoji: [{ symbol: 'üìÑ' }],
                                headingTitle: '–ò–∑—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é',
                            }}
                            body={{
                                description: '–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏',
                            }}
                        />
                        <Card.CardButton
                            onClick={() => setActiveModal('upload')}
                            header={{
                                emoji: [{ symbol: 'üôÄ' }],
                                headingTitle: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ',
                            }}
                            body={{
                                description: '–û–±—ä–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äì –æ–Ω –¥–æ–±–∞–≤–∏—Ç –∏—Ö –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.',
                            }}
                        />
                    </CardsWrapper>
                    <LinkWithIcon
                        title='–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫'
                        size='large'
                        PostfixIcon={Phone}
                        onClick={() => setActiveModal('call')}
                    />
                </Space>
            </Modal>
            <CallModal
                open={activeModal === 'call'}
                onCancel={() => setActiveModal(null)}
                title={(
                    <Space size={8} direction='vertical'>
                        <Typography.Title level={3}>
                            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        </Typography.Title>
                        <Typography.Text size='medium' type='secondary'>

                            –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–≤–æ–Ω–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 40 –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è
                        </Typography.Text>
                    </Space>
                )}
                footer={(
                    <Space size={16} direction='horizontal'>
                        <LinkWithIcon
                            title='–ù–∞–∑–∞–¥'
                            size='large'
                            onClick={() => setActiveModal('choose')}
                            PrefixIcon={ArrowLeft}
                        />
                        <Button
                            type='primary'
                            onClick={() => callForm.submit()}
                        >
                            –ù–æ–º–µ—Ä –≤–µ—Ä–Ω—ã–π ‚Äî –∑–≤–æ–Ω–∏—Ç–µ
                        </Button>
                    </Space>
                )}
            >
                <FormWithAction
                    action={callFormAction}
                    initialValues={initialValues}
                    layout='vertical'
                    validateTrigger={['onBlur', 'onSubmit']}
                    formInstance={callForm}
                    OnCompletedMsg='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
                >
                    <Form.Item
                        name='phone'
                        label='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                        required
                        rules={[phoneValidator, requiredValidator]}
                    >
                        <PhoneInput block/>
                    </Form.Item>
                </FormWithAction>
            </CallModal>
            <Modal
                open={activeModal === 'upload'}
                onCancel={() => setActiveModal(null)}
                title='–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ'
                footer={(
                    <Space size={16} direction='horizontal'>
                        <LinkWithIcon
                            title='–ù–∞–∑–∞–¥'
                            size='large'
                            onClick={() => setActiveModal('choose')}
                            PrefixIcon={ArrowLeft}
                        />
                        <Button
                            type='primary'
                            onClick={() => uploadForm.submit()}
                        >
                            –ó–∞–≥—Ä—É–∑–∏—Ç—å
                        </Button>
                    </Space>
                )}
            >
                <Space size={40} direction='vertical'>
                    <Typography.Text size='large' type='secondary'>
                        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: Excel-—Ç–∞–±–ª–∏—Ü—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—è–º–∏, —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤—ã–≥—Ä—É–∑–∫–∏ –∏–∑ CRM –∏ —Ç. –¥.
                    </Typography.Text>
                    <Alert
                        type='info'
                        message='–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–π–º–µ—Ç –æ—Ç 1 –¥–æ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π'
                        description='–ú–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é. –ú—ã –ø–æ–∑–≤–æ–Ω–∏–º –∏ —Å–æ–æ–±—â–∏–º, –∫–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.'
                    />
                    <FormWithAction
                        action={uploadFormAction}
                        initialValues={initialValues}
                        layout='vertical'
                        validateTrigger={['onBlur', 'onSubmit']}
                        formInstance={uploadForm}
                        OnCompletedMsg='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
                    >
                        <Row gutter={[0, 24]}>
                            <Col span={24}>
                                <Form.Item
                                    name='phone'
                                    label='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                                    required
                                    rules={[phoneValidator, requiredValidator]}
                                >
                                    <PhoneInput block/>
                                </Form.Item>
                            </Col>
                            <Col span={24}>
                                <Form.Item name='file' valuePropName='fileList'>
                                    <UploadComponent initialFileList={[]} />
                                </Form.Item>
                            </Col>
                        </Row>
                    </FormWithAction>
                </Space>
            </Modal>
        </>
    )
}

export const useImportHelpModal = ({ domainName }) => {
    const [activeModal, setActiveModal] = useState<ActiveModalType>()
    const openImportHelpModal = useCallback(() => setActiveModal('choose'), [])

    const Modal = useCallback(() => (
        <ImportHelpModal
            domainName={domainName}
            activeModal={activeModal}
            setActiveModal={setActiveModal}
        />
    ), [activeModal])

    return useMemo(() => ({ Modal, openImportHelpModal }), [Modal, openImportHelpModal])
}
