export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
  /** The `Upload` scalar type represents a file upload. */
  Upload: any;
};


export type AcceptOrRejectOrganizationInviteInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  isRejected?: Maybe<Scalars['Boolean']>;
  isAccepted?: Maybe<Scalars['Boolean']>;
};

/**  Information about `acquiring component` which will generate `billing receipts` and `payments`  */
export type AcquiringIntegration = {
  __typename?: 'AcquiringIntegration';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the AcquiringIntegration List config, or
   *  2. As an alias to the field set on 'labelField' in the AcquiringIntegration List config, or
   *  3. As an alias to a 'name' field on the AcquiringIntegration List (if one exists), or
   *  4. As an alias to the 'id' field on the AcquiringIntegration List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Name of `acquiring component`, which is set up by developer  */
  name?: Maybe<Scalars['String']>;
  /**  Logo of app's company or app itself  */
  logo?: Maybe<File>;
  /**  Short description / catch phrase providing information about integration functionality. Will be shown on App's card  */
  shortDescription?: Maybe<Scalars['String']>;
  /**  Developer company name  */
  developer?: Maybe<Scalars['String']>;
  /**  Link to the website of the developer company, where the user can find out detailed information about the partner  */
  partnerUrl?: Maybe<Scalars['String']>;
  /**  Text describing app functionality, connection process and pricing in full detail. Written in markdown without html tags. Will be shown on app's page  */
  detailedDescription?: Maybe<Scalars['String']>;
  /**  Url to app page, which is the app starting point and will be opened in iframe  */
  appUrl?: Maybe<Scalars['String']>;
  /**  Indicates whether the integration or app is hidden inside the CRM. Used if integration is active by default or not ready to appear inside CRM  */
  isHidden?: Maybe<Scalars['Boolean']>;
  accessRights: Array<AcquiringIntegrationAccessRight>;
  _accessRightsMeta?: Maybe<_QueryMeta>;
  /**  Can multiple receipts be united through this acquiring  */
  canGroupReceipts?: Maybe<Scalars['Boolean']>;
  /**  Url to acquiring integration service. Mobile devices will use it communicate with external acquiring. List of endpoints is the same for all of them.  */
  hostUrl?: Maybe<Scalars['String']>;
  /**  Supported billing integrations group. Useful when you need to restrict this acquiring to accept payment only from certain billing.  */
  supportedBillingIntegrationsGroup?: Maybe<Scalars['String']>;
  /**  Contains information about the default distribution of explicit fee. Each part is paid by the user on top of original amount if there is no part with the same name in the integration context. Otherwise, the part is ignored as it is paid by recipient  */
  explicitFeeDistributionSchema?: Maybe<Array<FeeDistributionField>>;
  /**  The number used to determine the position of the app among the others. App with higher priority appear earlier in "All" category, as well as in it's own category. Apps with the same priority are sorted from newest to oldest. The default value is 1.  */
  displayPriority?: Maybe<Scalars['Int']>;
  /**  App can be marked with one of the following labels in order to visually stand out from other applications: [FREE, DISCOUNT, POPULAR, NEW]  */
  label?: Maybe<Scalars['String']>;
  /**  Array containing links to promotional images, which will be shown to user on app's page  */
  gallery?: Maybe<Array<Scalars['String']>>;
  /**  String representing a base price of app. Usually it's something like "Free", "Individual", "$50 / year"  */
  price?: Maybe<Scalars['String']>;
  /**  Status, which context will have by default after creation if no overwriting option provided  */
  contextDefaultStatus?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};


/**  Information about `acquiring component` which will generate `billing receipts` and `payments`  */
export type AcquiringIntegrationAccessRightsArgs = {
  where?: Maybe<AcquiringIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


/**  Information about `acquiring component` which will generate `billing receipts` and `payments`  */
export type AcquiringIntegration_AccessRightsMetaArgs = {
  where?: Maybe<AcquiringIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

/**  Link between Acquiring integration and user, the existence of this connection means that this user has the rights to perform actions on behalf of the integration  */
export type AcquiringIntegrationAccessRight = {
  __typename?: 'AcquiringIntegrationAccessRight';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the AcquiringIntegrationAccessRight List config, or
   *  2. As an alias to the field set on 'labelField' in the AcquiringIntegrationAccessRight List config, or
   *  3. As an alias to a 'name' field on the AcquiringIntegrationAccessRight List (if one exists), or
   *  4. As an alias to the 'id' field on the AcquiringIntegrationAccessRight List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Acquiring integration. Determines way of user's payment  */
  integration?: Maybe<AcquiringIntegration>;
  /**  Link to user. Note, that user must be of "service" type  */
  user?: Maybe<User>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type AcquiringIntegrationAccessRightCreateInput = {
  integration?: Maybe<AcquiringIntegrationRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type AcquiringIntegrationAccessRightHistoryRecord = {
  __typename?: 'AcquiringIntegrationAccessRightHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the AcquiringIntegrationAccessRightHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the AcquiringIntegrationAccessRightHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the AcquiringIntegrationAccessRightHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the AcquiringIntegrationAccessRightHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AcquiringIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type AcquiringIntegrationAccessRightHistoryRecordCreateInput = {
  integration?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AcquiringIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum AcquiringIntegrationAccessRightHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type AcquiringIntegrationAccessRightHistoryRecordUpdateInput = {
  integration?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AcquiringIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type AcquiringIntegrationAccessRightHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightHistoryRecordWhereInput>>>;
  integration?: Maybe<Scalars['String']>;
  integration_not?: Maybe<Scalars['String']>;
  integration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<AcquiringIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<AcquiringIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AcquiringIntegrationAccessRightHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type AcquiringIntegrationAccessRightHistoryRecordsCreateInput = {
  data?: Maybe<AcquiringIntegrationAccessRightHistoryRecordCreateInput>;
};

export type AcquiringIntegrationAccessRightHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationAccessRightHistoryRecordUpdateInput>;
};

export type AcquiringIntegrationAccessRightRelateToManyInput = {
  create?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightCreateInput>>>;
  connect?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightWhereUniqueInput>>>;
  disconnect?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightWhereUniqueInput>>>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type AcquiringIntegrationAccessRightUpdateInput = {
  integration?: Maybe<AcquiringIntegrationRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type AcquiringIntegrationAccessRightWhereInput = {
  AND?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightWhereInput>>>;
  OR?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightWhereInput>>>;
  integration?: Maybe<AcquiringIntegrationWhereInput>;
  integration_is_null?: Maybe<Scalars['Boolean']>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type AcquiringIntegrationAccessRightWhereUniqueInput = {
  id: Scalars['ID'];
};

export type AcquiringIntegrationAccessRightsCreateInput = {
  data?: Maybe<AcquiringIntegrationAccessRightCreateInput>;
};

export type AcquiringIntegrationAccessRightsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationAccessRightUpdateInput>;
};

/**  Object, which links `acquiring integration` with `service provider`, and stores additional data for it's proper work  */
export type AcquiringIntegrationContext = {
  __typename?: 'AcquiringIntegrationContext';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the AcquiringIntegrationContext List config, or
   *  2. As an alias to the field set on 'labelField' in the AcquiringIntegrationContext List config, or
   *  3. As an alias to a 'name' field on the AcquiringIntegrationContext List (if one exists), or
   *  4. As an alias to the 'id' field on the AcquiringIntegrationContext List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Acquiring integration. Determines way of user's payment  */
  integration?: Maybe<AcquiringIntegration>;
  /**  Service provider (organization)  */
  organization?: Maybe<Organization>;
  /**  Settings that are required for acquiring to work properly. The data structure depends on the integration and defined here  */
  settings?: Maybe<Scalars['JSON']>;
  /**  The current state of the integration process. Some integration need to store past state here, additional data and etc.  */
  state?: Maybe<Scalars['JSON']>;
  /**  Contract number and date. Basis for invoicing  */
  reason?: Maybe<Scalars['String']>;
  /**  Acquiring payments report will be sent to this email  */
  email?: Maybe<Scalars['String']>;
  /**  Requisites from agreement. Are used for invoicing in case of not confirmed billing recipient in receipt  */
  recipient?: Maybe<RecipientField>;
  /**  Contains information about the default distribution of implicit fee. Each part is paid by the recipient organization on deducted from payment amount. If part exists then explicit part with the same name from AcquiringIntegration.explicitFeeDistributionSchema is ignored  */
  implicitFeeDistributionSchema?: Maybe<Array<FeeDistributionField>>;
  /**  Status of AcquiringIntegration connection, Can be one of the following: ["InProgress", "Error", "Finished"]. If not specified explicitly on creation, uses default value from related AcquiringIntegration model  */
  status?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type AcquiringIntegrationContextCreateInput = {
  integration?: Maybe<AcquiringIntegrationRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  settings?: Maybe<Scalars['JSON']>;
  state?: Maybe<Scalars['JSON']>;
  reason?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  recipient?: Maybe<RecipientFieldInput>;
  implicitFeeDistributionSchema?: Maybe<Array<FeeDistributionFieldInput>>;
  status?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type AcquiringIntegrationContextHistoryRecord = {
  __typename?: 'AcquiringIntegrationContextHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the AcquiringIntegrationContextHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the AcquiringIntegrationContextHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the AcquiringIntegrationContextHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the AcquiringIntegrationContextHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['JSON']>;
  state?: Maybe<Scalars['JSON']>;
  reason?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  recipient?: Maybe<Scalars['JSON']>;
  implicitFeeDistributionSchema?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AcquiringIntegrationContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type AcquiringIntegrationContextHistoryRecordCreateInput = {
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['JSON']>;
  state?: Maybe<Scalars['JSON']>;
  reason?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  recipient?: Maybe<Scalars['JSON']>;
  implicitFeeDistributionSchema?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AcquiringIntegrationContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum AcquiringIntegrationContextHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type AcquiringIntegrationContextHistoryRecordUpdateInput = {
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['JSON']>;
  state?: Maybe<Scalars['JSON']>;
  reason?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  recipient?: Maybe<Scalars['JSON']>;
  implicitFeeDistributionSchema?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AcquiringIntegrationContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type AcquiringIntegrationContextHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<AcquiringIntegrationContextHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<AcquiringIntegrationContextHistoryRecordWhereInput>>>;
  integration?: Maybe<Scalars['String']>;
  integration_not?: Maybe<Scalars['String']>;
  integration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  settings?: Maybe<Scalars['JSON']>;
  settings_not?: Maybe<Scalars['JSON']>;
  settings_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  settings_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state?: Maybe<Scalars['JSON']>;
  state_not?: Maybe<Scalars['JSON']>;
  state_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  reason?: Maybe<Scalars['String']>;
  reason_not?: Maybe<Scalars['String']>;
  reason_contains?: Maybe<Scalars['String']>;
  reason_not_contains?: Maybe<Scalars['String']>;
  reason_starts_with?: Maybe<Scalars['String']>;
  reason_not_starts_with?: Maybe<Scalars['String']>;
  reason_ends_with?: Maybe<Scalars['String']>;
  reason_not_ends_with?: Maybe<Scalars['String']>;
  reason_i?: Maybe<Scalars['String']>;
  reason_not_i?: Maybe<Scalars['String']>;
  reason_contains_i?: Maybe<Scalars['String']>;
  reason_not_contains_i?: Maybe<Scalars['String']>;
  reason_starts_with_i?: Maybe<Scalars['String']>;
  reason_not_starts_with_i?: Maybe<Scalars['String']>;
  reason_ends_with_i?: Maybe<Scalars['String']>;
  reason_not_ends_with_i?: Maybe<Scalars['String']>;
  reason_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reason_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipient?: Maybe<Scalars['JSON']>;
  recipient_not?: Maybe<Scalars['JSON']>;
  recipient_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  recipient_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  implicitFeeDistributionSchema?: Maybe<Scalars['JSON']>;
  implicitFeeDistributionSchema_not?: Maybe<Scalars['JSON']>;
  implicitFeeDistributionSchema_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  implicitFeeDistributionSchema_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<AcquiringIntegrationContextHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<AcquiringIntegrationContextHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<AcquiringIntegrationContextHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<AcquiringIntegrationContextHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AcquiringIntegrationContextHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type AcquiringIntegrationContextHistoryRecordsCreateInput = {
  data?: Maybe<AcquiringIntegrationContextHistoryRecordCreateInput>;
};

export type AcquiringIntegrationContextHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationContextHistoryRecordUpdateInput>;
};

export type AcquiringIntegrationContextRelateToOneInput = {
  create?: Maybe<AcquiringIntegrationContextCreateInput>;
  connect?: Maybe<AcquiringIntegrationContextWhereUniqueInput>;
  disconnect?: Maybe<AcquiringIntegrationContextWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type AcquiringIntegrationContextUpdateInput = {
  integration?: Maybe<AcquiringIntegrationRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  settings?: Maybe<Scalars['JSON']>;
  state?: Maybe<Scalars['JSON']>;
  reason?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  recipient?: Maybe<RecipientFieldInput>;
  implicitFeeDistributionSchema?: Maybe<Array<FeeDistributionFieldInput>>;
  status?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type AcquiringIntegrationContextWhereInput = {
  AND?: Maybe<Array<Maybe<AcquiringIntegrationContextWhereInput>>>;
  OR?: Maybe<Array<Maybe<AcquiringIntegrationContextWhereInput>>>;
  integration?: Maybe<AcquiringIntegrationWhereInput>;
  integration_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  settings?: Maybe<Scalars['JSON']>;
  settings_not?: Maybe<Scalars['JSON']>;
  settings_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  settings_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state?: Maybe<Scalars['JSON']>;
  state_not?: Maybe<Scalars['JSON']>;
  state_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  reason?: Maybe<Scalars['String']>;
  reason_not?: Maybe<Scalars['String']>;
  reason_contains?: Maybe<Scalars['String']>;
  reason_not_contains?: Maybe<Scalars['String']>;
  reason_starts_with?: Maybe<Scalars['String']>;
  reason_not_starts_with?: Maybe<Scalars['String']>;
  reason_ends_with?: Maybe<Scalars['String']>;
  reason_not_ends_with?: Maybe<Scalars['String']>;
  reason_i?: Maybe<Scalars['String']>;
  reason_not_i?: Maybe<Scalars['String']>;
  reason_contains_i?: Maybe<Scalars['String']>;
  reason_not_contains_i?: Maybe<Scalars['String']>;
  reason_starts_with_i?: Maybe<Scalars['String']>;
  reason_not_starts_with_i?: Maybe<Scalars['String']>;
  reason_ends_with_i?: Maybe<Scalars['String']>;
  reason_not_ends_with_i?: Maybe<Scalars['String']>;
  reason_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reason_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipient?: Maybe<RecipientFieldInput>;
  recipient_not?: Maybe<RecipientFieldInput>;
  recipient_in?: Maybe<Array<Maybe<RecipientFieldInput>>>;
  recipient_not_in?: Maybe<Array<Maybe<RecipientFieldInput>>>;
  implicitFeeDistributionSchema?: Maybe<Array<FeeDistributionFieldInput>>;
  implicitFeeDistributionSchema_not?: Maybe<Array<FeeDistributionFieldInput>>;
  implicitFeeDistributionSchema_in?: Maybe<Array<Maybe<Array<FeeDistributionFieldInput>>>>;
  implicitFeeDistributionSchema_not_in?: Maybe<Array<Maybe<Array<FeeDistributionFieldInput>>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type AcquiringIntegrationContextWhereUniqueInput = {
  id: Scalars['ID'];
};

export type AcquiringIntegrationContextsCreateInput = {
  data?: Maybe<AcquiringIntegrationContextCreateInput>;
};

export type AcquiringIntegrationContextsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationContextUpdateInput>;
};

export type AcquiringIntegrationCreateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['Upload']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['String']>;
  appUrl?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  accessRights?: Maybe<AcquiringIntegrationAccessRightRelateToManyInput>;
  canGroupReceipts?: Maybe<Scalars['Boolean']>;
  hostUrl?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup?: Maybe<Scalars['String']>;
  explicitFeeDistributionSchema?: Maybe<Array<FeeDistributionFieldInput>>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Array<Scalars['String']>>;
  price?: Maybe<Scalars['String']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type AcquiringIntegrationHistoryRecord = {
  __typename?: 'AcquiringIntegrationHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the AcquiringIntegrationHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the AcquiringIntegrationHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the AcquiringIntegrationHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the AcquiringIntegrationHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  appUrl?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  canGroupReceipts?: Maybe<Scalars['Boolean']>;
  hostUrl?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup?: Maybe<Scalars['String']>;
  explicitFeeDistributionSchema?: Maybe<Scalars['JSON']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AcquiringIntegrationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type AcquiringIntegrationHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  appUrl?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  canGroupReceipts?: Maybe<Scalars['Boolean']>;
  hostUrl?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup?: Maybe<Scalars['String']>;
  explicitFeeDistributionSchema?: Maybe<Scalars['JSON']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AcquiringIntegrationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum AcquiringIntegrationHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type AcquiringIntegrationHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  appUrl?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  canGroupReceipts?: Maybe<Scalars['Boolean']>;
  hostUrl?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup?: Maybe<Scalars['String']>;
  explicitFeeDistributionSchema?: Maybe<Scalars['JSON']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AcquiringIntegrationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type AcquiringIntegrationHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<AcquiringIntegrationHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<AcquiringIntegrationHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo?: Maybe<Scalars['JSON']>;
  logo_not?: Maybe<Scalars['JSON']>;
  logo_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  logo_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  shortDescription_starts_with?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with?: Maybe<Scalars['String']>;
  shortDescription_ends_with?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with?: Maybe<Scalars['String']>;
  shortDescription_i?: Maybe<Scalars['String']>;
  shortDescription_not_i?: Maybe<Scalars['String']>;
  shortDescription_contains_i?: Maybe<Scalars['String']>;
  shortDescription_not_contains_i?: Maybe<Scalars['String']>;
  shortDescription_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer?: Maybe<Scalars['String']>;
  developer_not?: Maybe<Scalars['String']>;
  developer_contains?: Maybe<Scalars['String']>;
  developer_not_contains?: Maybe<Scalars['String']>;
  developer_starts_with?: Maybe<Scalars['String']>;
  developer_not_starts_with?: Maybe<Scalars['String']>;
  developer_ends_with?: Maybe<Scalars['String']>;
  developer_not_ends_with?: Maybe<Scalars['String']>;
  developer_i?: Maybe<Scalars['String']>;
  developer_not_i?: Maybe<Scalars['String']>;
  developer_contains_i?: Maybe<Scalars['String']>;
  developer_not_contains_i?: Maybe<Scalars['String']>;
  developer_starts_with_i?: Maybe<Scalars['String']>;
  developer_not_starts_with_i?: Maybe<Scalars['String']>;
  developer_ends_with_i?: Maybe<Scalars['String']>;
  developer_not_ends_with_i?: Maybe<Scalars['String']>;
  developer_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl?: Maybe<Scalars['String']>;
  partnerUrl_not?: Maybe<Scalars['String']>;
  partnerUrl_contains?: Maybe<Scalars['String']>;
  partnerUrl_not_contains?: Maybe<Scalars['String']>;
  partnerUrl_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_i?: Maybe<Scalars['String']>;
  partnerUrl_not_i?: Maybe<Scalars['String']>;
  partnerUrl_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_not_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  detailedDescription_not?: Maybe<Scalars['JSON']>;
  detailedDescription_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  detailedDescription_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  appUrl?: Maybe<Scalars['String']>;
  appUrl_not?: Maybe<Scalars['String']>;
  appUrl_contains?: Maybe<Scalars['String']>;
  appUrl_not_contains?: Maybe<Scalars['String']>;
  appUrl_starts_with?: Maybe<Scalars['String']>;
  appUrl_not_starts_with?: Maybe<Scalars['String']>;
  appUrl_ends_with?: Maybe<Scalars['String']>;
  appUrl_not_ends_with?: Maybe<Scalars['String']>;
  appUrl_i?: Maybe<Scalars['String']>;
  appUrl_not_i?: Maybe<Scalars['String']>;
  appUrl_contains_i?: Maybe<Scalars['String']>;
  appUrl_not_contains_i?: Maybe<Scalars['String']>;
  appUrl_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isHidden_not?: Maybe<Scalars['Boolean']>;
  canGroupReceipts?: Maybe<Scalars['Boolean']>;
  canGroupReceipts_not?: Maybe<Scalars['Boolean']>;
  hostUrl?: Maybe<Scalars['String']>;
  hostUrl_not?: Maybe<Scalars['String']>;
  hostUrl_contains?: Maybe<Scalars['String']>;
  hostUrl_not_contains?: Maybe<Scalars['String']>;
  hostUrl_starts_with?: Maybe<Scalars['String']>;
  hostUrl_not_starts_with?: Maybe<Scalars['String']>;
  hostUrl_ends_with?: Maybe<Scalars['String']>;
  hostUrl_not_ends_with?: Maybe<Scalars['String']>;
  hostUrl_i?: Maybe<Scalars['String']>;
  hostUrl_not_i?: Maybe<Scalars['String']>;
  hostUrl_contains_i?: Maybe<Scalars['String']>;
  hostUrl_not_contains_i?: Maybe<Scalars['String']>;
  hostUrl_starts_with_i?: Maybe<Scalars['String']>;
  hostUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  hostUrl_ends_with_i?: Maybe<Scalars['String']>;
  hostUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  hostUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  hostUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportedBillingIntegrationsGroup?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_contains?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_contains?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_starts_with?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_starts_with?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_ends_with?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_ends_with?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_contains_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_contains_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_starts_with_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_starts_with_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_ends_with_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_ends_with_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportedBillingIntegrationsGroup_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitFeeDistributionSchema?: Maybe<Scalars['JSON']>;
  explicitFeeDistributionSchema_not?: Maybe<Scalars['JSON']>;
  explicitFeeDistributionSchema_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  explicitFeeDistributionSchema_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  displayPriority?: Maybe<Scalars['Int']>;
  displayPriority_not?: Maybe<Scalars['Int']>;
  displayPriority_lt?: Maybe<Scalars['Int']>;
  displayPriority_lte?: Maybe<Scalars['Int']>;
  displayPriority_gt?: Maybe<Scalars['Int']>;
  displayPriority_gte?: Maybe<Scalars['Int']>;
  displayPriority_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  displayPriority_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  label?: Maybe<Scalars['String']>;
  label_not?: Maybe<Scalars['String']>;
  label_contains?: Maybe<Scalars['String']>;
  label_not_contains?: Maybe<Scalars['String']>;
  label_starts_with?: Maybe<Scalars['String']>;
  label_not_starts_with?: Maybe<Scalars['String']>;
  label_ends_with?: Maybe<Scalars['String']>;
  label_not_ends_with?: Maybe<Scalars['String']>;
  label_i?: Maybe<Scalars['String']>;
  label_not_i?: Maybe<Scalars['String']>;
  label_contains_i?: Maybe<Scalars['String']>;
  label_not_contains_i?: Maybe<Scalars['String']>;
  label_starts_with_i?: Maybe<Scalars['String']>;
  label_not_starts_with_i?: Maybe<Scalars['String']>;
  label_ends_with_i?: Maybe<Scalars['String']>;
  label_not_ends_with_i?: Maybe<Scalars['String']>;
  label_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  label_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  gallery?: Maybe<Scalars['JSON']>;
  gallery_not?: Maybe<Scalars['JSON']>;
  gallery_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  gallery_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  price?: Maybe<Scalars['String']>;
  price_not?: Maybe<Scalars['String']>;
  price_contains?: Maybe<Scalars['String']>;
  price_not_contains?: Maybe<Scalars['String']>;
  price_starts_with?: Maybe<Scalars['String']>;
  price_not_starts_with?: Maybe<Scalars['String']>;
  price_ends_with?: Maybe<Scalars['String']>;
  price_not_ends_with?: Maybe<Scalars['String']>;
  price_i?: Maybe<Scalars['String']>;
  price_not_i?: Maybe<Scalars['String']>;
  price_contains_i?: Maybe<Scalars['String']>;
  price_not_contains_i?: Maybe<Scalars['String']>;
  price_starts_with_i?: Maybe<Scalars['String']>;
  price_not_starts_with_i?: Maybe<Scalars['String']>;
  price_ends_with_i?: Maybe<Scalars['String']>;
  price_not_ends_with_i?: Maybe<Scalars['String']>;
  price_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  price_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  contextDefaultStatus_not?: Maybe<Scalars['String']>;
  contextDefaultStatus_contains?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_contains?: Maybe<Scalars['String']>;
  contextDefaultStatus_starts_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_starts_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_ends_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_ends_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_contains_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_contains_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_starts_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_starts_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_ends_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_ends_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contextDefaultStatus_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<AcquiringIntegrationHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<AcquiringIntegrationHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<AcquiringIntegrationHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<AcquiringIntegrationHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AcquiringIntegrationHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type AcquiringIntegrationHistoryRecordsCreateInput = {
  data?: Maybe<AcquiringIntegrationHistoryRecordCreateInput>;
};

export type AcquiringIntegrationHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationHistoryRecordUpdateInput>;
};

export type AcquiringIntegrationRelateToOneInput = {
  create?: Maybe<AcquiringIntegrationCreateInput>;
  connect?: Maybe<AcquiringIntegrationWhereUniqueInput>;
  disconnect?: Maybe<AcquiringIntegrationWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type AcquiringIntegrationUpdateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['Upload']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['String']>;
  appUrl?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  accessRights?: Maybe<AcquiringIntegrationAccessRightRelateToManyInput>;
  canGroupReceipts?: Maybe<Scalars['Boolean']>;
  hostUrl?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup?: Maybe<Scalars['String']>;
  explicitFeeDistributionSchema?: Maybe<Array<FeeDistributionFieldInput>>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Array<Scalars['String']>>;
  price?: Maybe<Scalars['String']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type AcquiringIntegrationWhereInput = {
  AND?: Maybe<Array<Maybe<AcquiringIntegrationWhereInput>>>;
  OR?: Maybe<Array<Maybe<AcquiringIntegrationWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo?: Maybe<Scalars['String']>;
  logo_not?: Maybe<Scalars['String']>;
  logo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  shortDescription_starts_with?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with?: Maybe<Scalars['String']>;
  shortDescription_ends_with?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with?: Maybe<Scalars['String']>;
  shortDescription_i?: Maybe<Scalars['String']>;
  shortDescription_not_i?: Maybe<Scalars['String']>;
  shortDescription_contains_i?: Maybe<Scalars['String']>;
  shortDescription_not_contains_i?: Maybe<Scalars['String']>;
  shortDescription_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer?: Maybe<Scalars['String']>;
  developer_not?: Maybe<Scalars['String']>;
  developer_contains?: Maybe<Scalars['String']>;
  developer_not_contains?: Maybe<Scalars['String']>;
  developer_starts_with?: Maybe<Scalars['String']>;
  developer_not_starts_with?: Maybe<Scalars['String']>;
  developer_ends_with?: Maybe<Scalars['String']>;
  developer_not_ends_with?: Maybe<Scalars['String']>;
  developer_i?: Maybe<Scalars['String']>;
  developer_not_i?: Maybe<Scalars['String']>;
  developer_contains_i?: Maybe<Scalars['String']>;
  developer_not_contains_i?: Maybe<Scalars['String']>;
  developer_starts_with_i?: Maybe<Scalars['String']>;
  developer_not_starts_with_i?: Maybe<Scalars['String']>;
  developer_ends_with_i?: Maybe<Scalars['String']>;
  developer_not_ends_with_i?: Maybe<Scalars['String']>;
  developer_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl?: Maybe<Scalars['String']>;
  partnerUrl_not?: Maybe<Scalars['String']>;
  partnerUrl_contains?: Maybe<Scalars['String']>;
  partnerUrl_not_contains?: Maybe<Scalars['String']>;
  partnerUrl_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_i?: Maybe<Scalars['String']>;
  partnerUrl_not_i?: Maybe<Scalars['String']>;
  partnerUrl_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_not_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailedDescription?: Maybe<Scalars['String']>;
  detailedDescription_not?: Maybe<Scalars['String']>;
  detailedDescription_contains?: Maybe<Scalars['String']>;
  detailedDescription_not_contains?: Maybe<Scalars['String']>;
  detailedDescription_starts_with?: Maybe<Scalars['String']>;
  detailedDescription_not_starts_with?: Maybe<Scalars['String']>;
  detailedDescription_ends_with?: Maybe<Scalars['String']>;
  detailedDescription_not_ends_with?: Maybe<Scalars['String']>;
  detailedDescription_i?: Maybe<Scalars['String']>;
  detailedDescription_not_i?: Maybe<Scalars['String']>;
  detailedDescription_contains_i?: Maybe<Scalars['String']>;
  detailedDescription_not_contains_i?: Maybe<Scalars['String']>;
  detailedDescription_starts_with_i?: Maybe<Scalars['String']>;
  detailedDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  detailedDescription_ends_with_i?: Maybe<Scalars['String']>;
  detailedDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  detailedDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailedDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appUrl?: Maybe<Scalars['String']>;
  appUrl_not?: Maybe<Scalars['String']>;
  appUrl_contains?: Maybe<Scalars['String']>;
  appUrl_not_contains?: Maybe<Scalars['String']>;
  appUrl_starts_with?: Maybe<Scalars['String']>;
  appUrl_not_starts_with?: Maybe<Scalars['String']>;
  appUrl_ends_with?: Maybe<Scalars['String']>;
  appUrl_not_ends_with?: Maybe<Scalars['String']>;
  appUrl_i?: Maybe<Scalars['String']>;
  appUrl_not_i?: Maybe<Scalars['String']>;
  appUrl_contains_i?: Maybe<Scalars['String']>;
  appUrl_not_contains_i?: Maybe<Scalars['String']>;
  appUrl_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isHidden_not?: Maybe<Scalars['Boolean']>;
  /**  condition must be true for all nodes  */
  accessRights_every?: Maybe<AcquiringIntegrationAccessRightWhereInput>;
  /**  condition must be true for at least 1 node  */
  accessRights_some?: Maybe<AcquiringIntegrationAccessRightWhereInput>;
  /**  condition must be false for all nodes  */
  accessRights_none?: Maybe<AcquiringIntegrationAccessRightWhereInput>;
  canGroupReceipts?: Maybe<Scalars['Boolean']>;
  canGroupReceipts_not?: Maybe<Scalars['Boolean']>;
  hostUrl?: Maybe<Scalars['String']>;
  hostUrl_not?: Maybe<Scalars['String']>;
  hostUrl_contains?: Maybe<Scalars['String']>;
  hostUrl_not_contains?: Maybe<Scalars['String']>;
  hostUrl_starts_with?: Maybe<Scalars['String']>;
  hostUrl_not_starts_with?: Maybe<Scalars['String']>;
  hostUrl_ends_with?: Maybe<Scalars['String']>;
  hostUrl_not_ends_with?: Maybe<Scalars['String']>;
  hostUrl_i?: Maybe<Scalars['String']>;
  hostUrl_not_i?: Maybe<Scalars['String']>;
  hostUrl_contains_i?: Maybe<Scalars['String']>;
  hostUrl_not_contains_i?: Maybe<Scalars['String']>;
  hostUrl_starts_with_i?: Maybe<Scalars['String']>;
  hostUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  hostUrl_ends_with_i?: Maybe<Scalars['String']>;
  hostUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  hostUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  hostUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportedBillingIntegrationsGroup?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_contains?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_contains?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_starts_with?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_starts_with?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_ends_with?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_ends_with?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_contains_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_contains_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_starts_with_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_starts_with_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_ends_with_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_not_ends_with_i?: Maybe<Scalars['String']>;
  supportedBillingIntegrationsGroup_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportedBillingIntegrationsGroup_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitFeeDistributionSchema?: Maybe<Array<FeeDistributionFieldInput>>;
  explicitFeeDistributionSchema_not?: Maybe<Array<FeeDistributionFieldInput>>;
  explicitFeeDistributionSchema_in?: Maybe<Array<Maybe<Array<FeeDistributionFieldInput>>>>;
  explicitFeeDistributionSchema_not_in?: Maybe<Array<Maybe<Array<FeeDistributionFieldInput>>>>;
  displayPriority?: Maybe<Scalars['Int']>;
  displayPriority_not?: Maybe<Scalars['Int']>;
  displayPriority_lt?: Maybe<Scalars['Int']>;
  displayPriority_lte?: Maybe<Scalars['Int']>;
  displayPriority_gt?: Maybe<Scalars['Int']>;
  displayPriority_gte?: Maybe<Scalars['Int']>;
  displayPriority_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  displayPriority_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  label?: Maybe<Scalars['String']>;
  label_not?: Maybe<Scalars['String']>;
  label_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  label_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  gallery?: Maybe<Array<Scalars['String']>>;
  gallery_not?: Maybe<Array<Scalars['String']>>;
  gallery_in?: Maybe<Array<Maybe<Array<Scalars['String']>>>>;
  gallery_not_in?: Maybe<Array<Maybe<Array<Scalars['String']>>>>;
  price?: Maybe<Scalars['String']>;
  price_not?: Maybe<Scalars['String']>;
  price_contains?: Maybe<Scalars['String']>;
  price_not_contains?: Maybe<Scalars['String']>;
  price_starts_with?: Maybe<Scalars['String']>;
  price_not_starts_with?: Maybe<Scalars['String']>;
  price_ends_with?: Maybe<Scalars['String']>;
  price_not_ends_with?: Maybe<Scalars['String']>;
  price_i?: Maybe<Scalars['String']>;
  price_not_i?: Maybe<Scalars['String']>;
  price_contains_i?: Maybe<Scalars['String']>;
  price_not_contains_i?: Maybe<Scalars['String']>;
  price_starts_with_i?: Maybe<Scalars['String']>;
  price_not_starts_with_i?: Maybe<Scalars['String']>;
  price_ends_with_i?: Maybe<Scalars['String']>;
  price_not_ends_with_i?: Maybe<Scalars['String']>;
  price_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  price_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  contextDefaultStatus_not?: Maybe<Scalars['String']>;
  contextDefaultStatus_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contextDefaultStatus_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type AcquiringIntegrationWhereUniqueInput = {
  id: Scalars['ID'];
};

export type AcquiringIntegrationsCreateInput = {
  data?: Maybe<AcquiringIntegrationCreateInput>;
};

export type AcquiringIntegrationsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationUpdateInput>;
};

export type AddressMetaDataField = {
  __typename?: 'AddressMetaDataField';
  postal_code?: Maybe<Scalars['String']>;
  country: Scalars['String'];
  country_iso_code?: Maybe<Scalars['String']>;
  federal_district?: Maybe<Scalars['String']>;
  region_fias_id?: Maybe<Scalars['String']>;
  region_kladr_id?: Maybe<Scalars['String']>;
  region_iso_code?: Maybe<Scalars['String']>;
  region_with_type?: Maybe<Scalars['String']>;
  region_type?: Maybe<Scalars['String']>;
  region_type_full?: Maybe<Scalars['String']>;
  region: Scalars['String'];
  area_fias_id?: Maybe<Scalars['String']>;
  area_kladr_id?: Maybe<Scalars['String']>;
  area_with_type?: Maybe<Scalars['String']>;
  area_type?: Maybe<Scalars['String']>;
  area_type_full?: Maybe<Scalars['String']>;
  area?: Maybe<Scalars['String']>;
  city_fias_id?: Maybe<Scalars['String']>;
  city_kladr_id?: Maybe<Scalars['String']>;
  city_with_type?: Maybe<Scalars['String']>;
  city_type?: Maybe<Scalars['String']>;
  city_type_full?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  city_area?: Maybe<Scalars['String']>;
  city_district_fias_id?: Maybe<Scalars['String']>;
  city_district_kladr_id?: Maybe<Scalars['String']>;
  city_district_with_type?: Maybe<Scalars['String']>;
  city_district_type?: Maybe<Scalars['String']>;
  city_district_type_full?: Maybe<Scalars['String']>;
  city_district?: Maybe<Scalars['String']>;
  settlement_fias_id?: Maybe<Scalars['String']>;
  settlement_kladr_id?: Maybe<Scalars['String']>;
  settlement_with_type?: Maybe<Scalars['String']>;
  settlement_type?: Maybe<Scalars['String']>;
  settlement_type_full?: Maybe<Scalars['String']>;
  settlement?: Maybe<Scalars['String']>;
  street_fias_id?: Maybe<Scalars['String']>;
  street_kladr_id?: Maybe<Scalars['String']>;
  street_with_type?: Maybe<Scalars['String']>;
  street_type?: Maybe<Scalars['String']>;
  street_type_full?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  house_fias_id?: Maybe<Scalars['String']>;
  house_kladr_id?: Maybe<Scalars['String']>;
  house_type?: Maybe<Scalars['String']>;
  house_type_full?: Maybe<Scalars['String']>;
  house?: Maybe<Scalars['String']>;
  block_type?: Maybe<Scalars['String']>;
  block_type_full?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  entrance?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  flat_fias_id?: Maybe<Scalars['String']>;
  flat_type?: Maybe<Scalars['String']>;
  flat_type_full?: Maybe<Scalars['String']>;
  flat?: Maybe<Scalars['String']>;
  flat_area?: Maybe<Scalars['String']>;
  square_meter_price?: Maybe<Scalars['String']>;
  flat_price?: Maybe<Scalars['String']>;
  postal_box?: Maybe<Scalars['String']>;
  fias_id?: Maybe<Scalars['String']>;
  fias_code?: Maybe<Scalars['String']>;
  fias_level?: Maybe<Scalars['String']>;
  fias_actuality_state?: Maybe<Scalars['String']>;
  kladr_id?: Maybe<Scalars['String']>;
  geoname_id?: Maybe<Scalars['String']>;
  capital_marker?: Maybe<Scalars['String']>;
  okato?: Maybe<Scalars['String']>;
  oktmo?: Maybe<Scalars['String']>;
  tax_office?: Maybe<Scalars['String']>;
  tax_office_legal?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  geo_lat?: Maybe<Scalars['String']>;
  geo_lon?: Maybe<Scalars['String']>;
  beltway_hit?: Maybe<Scalars['String']>;
  beltway_distance?: Maybe<Scalars['String']>;
  metro?: Maybe<Array<Maybe<AddressMetaDataMetroField>>>;
  qc_geo?: Maybe<Scalars['String']>;
  qc_complete?: Maybe<Scalars['String']>;
  qc_house?: Maybe<Scalars['String']>;
  history_values?: Maybe<Array<Maybe<Scalars['String']>>>;
  unparsed_parts?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  qc?: Maybe<Scalars['String']>;
};

export type AddressMetaDataFieldInput = {
  postal_code?: Maybe<Scalars['String']>;
  country: Scalars['String'];
  country_iso_code?: Maybe<Scalars['String']>;
  federal_district?: Maybe<Scalars['String']>;
  region_fias_id?: Maybe<Scalars['String']>;
  region_kladr_id?: Maybe<Scalars['String']>;
  region_iso_code?: Maybe<Scalars['String']>;
  region_with_type?: Maybe<Scalars['String']>;
  region_type?: Maybe<Scalars['String']>;
  region_type_full?: Maybe<Scalars['String']>;
  region: Scalars['String'];
  area_fias_id?: Maybe<Scalars['String']>;
  area_kladr_id?: Maybe<Scalars['String']>;
  area_with_type?: Maybe<Scalars['String']>;
  area_type?: Maybe<Scalars['String']>;
  area_type_full?: Maybe<Scalars['String']>;
  area?: Maybe<Scalars['String']>;
  city_fias_id?: Maybe<Scalars['String']>;
  city_kladr_id?: Maybe<Scalars['String']>;
  city_with_type?: Maybe<Scalars['String']>;
  city_type?: Maybe<Scalars['String']>;
  city_type_full?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  city_area?: Maybe<Scalars['String']>;
  city_district_fias_id?: Maybe<Scalars['String']>;
  city_district_kladr_id?: Maybe<Scalars['String']>;
  city_district_with_type?: Maybe<Scalars['String']>;
  city_district_type?: Maybe<Scalars['String']>;
  city_district_type_full?: Maybe<Scalars['String']>;
  city_district?: Maybe<Scalars['String']>;
  settlement_fias_id?: Maybe<Scalars['String']>;
  settlement_kladr_id?: Maybe<Scalars['String']>;
  settlement_with_type?: Maybe<Scalars['String']>;
  settlement_type?: Maybe<Scalars['String']>;
  settlement_type_full?: Maybe<Scalars['String']>;
  settlement?: Maybe<Scalars['String']>;
  street_fias_id?: Maybe<Scalars['String']>;
  street_kladr_id?: Maybe<Scalars['String']>;
  street_with_type?: Maybe<Scalars['String']>;
  street_type?: Maybe<Scalars['String']>;
  street_type_full?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  house_fias_id?: Maybe<Scalars['String']>;
  house_kladr_id?: Maybe<Scalars['String']>;
  house_type?: Maybe<Scalars['String']>;
  house_type_full?: Maybe<Scalars['String']>;
  house?: Maybe<Scalars['String']>;
  block_type?: Maybe<Scalars['String']>;
  block_type_full?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  entrance?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  flat_fias_id?: Maybe<Scalars['String']>;
  flat_type?: Maybe<Scalars['String']>;
  flat_type_full?: Maybe<Scalars['String']>;
  flat?: Maybe<Scalars['String']>;
  flat_area?: Maybe<Scalars['String']>;
  square_meter_price?: Maybe<Scalars['String']>;
  flat_price?: Maybe<Scalars['String']>;
  postal_box?: Maybe<Scalars['String']>;
  fias_id?: Maybe<Scalars['String']>;
  fias_code?: Maybe<Scalars['String']>;
  fias_level?: Maybe<Scalars['String']>;
  fias_actuality_state?: Maybe<Scalars['String']>;
  kladr_id?: Maybe<Scalars['String']>;
  geoname_id?: Maybe<Scalars['String']>;
  capital_marker?: Maybe<Scalars['String']>;
  okato?: Maybe<Scalars['String']>;
  oktmo?: Maybe<Scalars['String']>;
  tax_office?: Maybe<Scalars['String']>;
  tax_office_legal?: Maybe<Scalars['String']>;
  timezone?: Maybe<Scalars['String']>;
  geo_lat?: Maybe<Scalars['String']>;
  geo_lon?: Maybe<Scalars['String']>;
  beltway_hit?: Maybe<Scalars['String']>;
  beltway_distance?: Maybe<Scalars['String']>;
  metro?: Maybe<Array<Maybe<AddressMetaDataMetroFieldInput>>>;
  qc_geo?: Maybe<Scalars['String']>;
  qc_complete?: Maybe<Scalars['String']>;
  qc_house?: Maybe<Scalars['String']>;
  history_values?: Maybe<Array<Maybe<Scalars['String']>>>;
  unparsed_parts?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  qc?: Maybe<Scalars['String']>;
};

export type AddressMetaDataMetroField = {
  __typename?: 'AddressMetaDataMetroField';
  name?: Maybe<Scalars['String']>;
  line?: Maybe<Scalars['String']>;
  distance?: Maybe<Scalars['String']>;
};

export type AddressMetaDataMetroFieldInput = {
  name?: Maybe<Scalars['String']>;
  line?: Maybe<Scalars['String']>;
  distance?: Maybe<Scalars['String']>;
};

export type AddressMetaField = {
  __typename?: 'AddressMetaField';
  dv?: Maybe<Scalars['Int']>;
  value: Scalars['String'];
  unrestricted_value: Scalars['String'];
  data: AddressMetaDataField;
};

export type AddressMetaFieldInput = {
  dv: Scalars['Int'];
  value: Scalars['String'];
  unrestricted_value: Scalars['String'];
  data: AddressMetaDataFieldInput;
};

export type AllMiniAppsInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  organization: OrganizationWhereUniqueInput;
  search?: Maybe<Scalars['String']>;
  where?: Maybe<AllMiniAppsWhereInput>;
};

export type AllMiniAppsWhereInput = {
  connected?: Maybe<Scalars['Boolean']>;
  id_not?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

export enum AppCategory {
  AccrualsAndPayments = 'ACCRUALS_AND_PAYMENTS',
  Dispatching = 'DISPATCHING',
  Gis = 'GIS',
  SmartHome = 'SMART_HOME',
  BusinessDevelopment = 'BUSINESS_DEVELOPMENT',
  Other = 'OTHER'
}

export type AppColorSchemaField = {
  __typename?: 'AppColorSchemaField';
  main: Scalars['String'];
  secondary: Scalars['String'];
};

export type AppColorSchemaFieldInput = {
  main: Scalars['String'];
  secondary: Scalars['String'];
};

export enum AppType {
  Billing = 'BILLING',
  Acquiring = 'ACQUIRING',
  B2B = 'B2B'
}

/**
 *  Ticket where user is assignee or executor.
 * Records are updated automatically: if the user has been assigned to the ticket, an entry appears.
 * If the user was removed from the assignment to the ticket, the record is marked deletedAt.
 * It is used to track the availability of the ticket for viewing in the technician mobile application.
 */
export type AssigneeScope = {
  __typename?: 'AssigneeScope';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the AssigneeScope List config, or
   *  2. As an alias to the field set on 'labelField' in the AssigneeScope List config, or
   *  3. As an alias to a 'name' field on the AssigneeScope List (if one exists), or
   *  4. As an alias to the 'id' field on the AssigneeScope List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  The user who is assigned to the ticket  */
  user?: Maybe<User>;
  /**  The ticket in which the user is assigned as executor or assignee  */
  ticket?: Maybe<Ticket>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type AssigneeScopeCreateInput = {
  user?: Maybe<UserRelateToOneInput>;
  ticket?: Maybe<TicketRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type AssigneeScopeHistoryRecord = {
  __typename?: 'AssigneeScopeHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the AssigneeScopeHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the AssigneeScopeHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the AssigneeScopeHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the AssigneeScopeHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AssigneeScopeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type AssigneeScopeHistoryRecordCreateInput = {
  user?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AssigneeScopeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum AssigneeScopeHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type AssigneeScopeHistoryRecordUpdateInput = {
  user?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<AssigneeScopeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type AssigneeScopeHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<AssigneeScopeHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<AssigneeScopeHistoryRecordWhereInput>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket?: Maybe<Scalars['String']>;
  ticket_not?: Maybe<Scalars['String']>;
  ticket_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<AssigneeScopeHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<AssigneeScopeHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<AssigneeScopeHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<AssigneeScopeHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AssigneeScopeHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type AssigneeScopeHistoryRecordsCreateInput = {
  data?: Maybe<AssigneeScopeHistoryRecordCreateInput>;
};

export type AssigneeScopeHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<AssigneeScopeHistoryRecordUpdateInput>;
};

export type AssigneeScopeUpdateInput = {
  user?: Maybe<UserRelateToOneInput>;
  ticket?: Maybe<TicketRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type AssigneeScopeWhereInput = {
  AND?: Maybe<Array<Maybe<AssigneeScopeWhereInput>>>;
  OR?: Maybe<Array<Maybe<AssigneeScopeWhereInput>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  ticket?: Maybe<TicketWhereInput>;
  ticket_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type AssigneeScopeWhereUniqueInput = {
  id: Scalars['ID'];
};

export type AssigneeScopesCreateInput = {
  data?: Maybe<AssigneeScopeCreateInput>;
};

export type AssigneeScopesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<AssigneeScopeUpdateInput>;
};

export type AuthenticateUserWithPhoneAndPasswordInput = {
  phone: Scalars['String'];
  password: Scalars['String'];
};

export type AuthenticateUserWithPhoneAndPasswordOutput = {
  __typename?: 'AuthenticateUserWithPhoneAndPasswordOutput';
  item?: Maybe<User>;
  token: Scalars['String'];
};

/**  B2B app  */
export type B2BApp = {
  __typename?: 'B2BApp';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2BApp List config, or
   *  2. As an alias to the field set on 'labelField' in the B2BApp List config, or
   *  3. As an alias to a 'name' field on the B2BApp List (if one exists), or
   *  4. As an alias to the 'id' field on the B2BApp List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Name of B2B App  */
  name?: Maybe<Scalars['String']>;
  /**  Logo of app's company or app itself  */
  logo?: Maybe<File>;
  /**  Short description / catch phrase providing information about integration functionality. Will be shown on App's card  */
  shortDescription?: Maybe<Scalars['String']>;
  /**  Developer company name  */
  developer?: Maybe<Scalars['String']>;
  /**  Link to the website of the developer company, where the user can find out detailed information about the partner  */
  partnerUrl?: Maybe<Scalars['String']>;
  /**  Text describing app functionality, connection process and pricing in full detail. Written in markdown without html tags. Will be shown on app's page  */
  detailedDescription?: Maybe<Scalars['String']>;
  /**  Url to app page, which is the app starting point and will be opened in iframe  */
  appUrl?: Maybe<Scalars['String']>;
  /**  Indicates whether the integration or app is hidden inside the CRM. Used if integration is active by default or not ready to appear inside CRM  */
  isHidden?: Maybe<Scalars['Boolean']>;
  /**  Indicates whether the app is global or not. If so, then the application will be opened in hidden mode and receive various notifications from the condo. It's also possible to trigger some condo IFrame methods via global app outside of miniapps CRM section  */
  isGlobal?: Maybe<Scalars['Boolean']>;
  /**  Status, which context will have by default after creation if no overwriting option provided  */
  contextDefaultStatus?: Maybe<Scalars['String']>;
  /**  Category of app. Can be one of the following: ["DISPATCHING", "GIS", "SMART_HOME", "BUSINESS_DEVELOPMENT", "OTHER"] By default set to "OTHER"  */
  category?: Maybe<Scalars['String']>;
  /**  Specifies set of service users, who can access app's contexts related as well as perform actions on behalf of the application  */
  accessRights: Array<B2BAppAccessRight>;
  _accessRightsMeta?: Maybe<_QueryMeta>;
  /**  List of features that this global mini-app implements. Can be one or more of the following: [PropertyMapGeneration]  */
  features?: Maybe<Array<B2BAppGlobalFeature>>;
  /**  The number used to determine the position of the app among the others. App with higher priority appear earlier in "All" category, as well as in it's own category. Apps with the same priority are sorted from newest to oldest. The default value is 1.  */
  displayPriority?: Maybe<Scalars['Int']>;
  /**  App can be marked with one of the following labels in order to visually stand out from other applications: [FREE, DISCOUNT, POPULAR, NEW]  */
  label?: Maybe<Scalars['String']>;
  /**  Array containing links to promotional images, which will be shown to user on app's page  */
  gallery?: Maybe<Array<Scalars['String']>>;
  /**  String representing a base price of app. Usually it's something like "Free", "Individual", "$50 / year"  */
  price?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};


/**  B2B app  */
export type B2BAppAccessRightsArgs = {
  where?: Maybe<B2BAppAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


/**  B2B app  */
export type B2BApp_AccessRightsMetaArgs = {
  where?: Maybe<B2BAppAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

/**  Link between service user and B2B App. The existence of this connection means that this user has the rights to perform actions on behalf of the integration  */
export type B2BAppAccessRight = {
  __typename?: 'B2BAppAccessRight';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2BAppAccessRight List config, or
   *  2. As an alias to the field set on 'labelField' in the B2BAppAccessRight List config, or
   *  3. As an alias to a 'name' field on the B2BAppAccessRight List (if one exists), or
   *  4. As an alias to the 'id' field on the B2BAppAccessRight List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Link to user. Note, that user must be of "service" type  */
  user?: Maybe<User>;
  /**  Link to B2BApp.accessRights  */
  app?: Maybe<B2BApp>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type B2BAppAccessRightCreateInput = {
  user?: Maybe<UserRelateToOneInput>;
  app?: Maybe<B2BAppRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type B2BAppAccessRightHistoryRecord = {
  __typename?: 'B2BAppAccessRightHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2BAppAccessRightHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the B2BAppAccessRightHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the B2BAppAccessRightHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the B2BAppAccessRightHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  app?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2BAppAccessRightHistoryRecordCreateInput = {
  user?: Maybe<Scalars['String']>;
  app?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum B2BAppAccessRightHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type B2BAppAccessRightHistoryRecordUpdateInput = {
  user?: Maybe<Scalars['String']>;
  app?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2BAppAccessRightHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<B2BAppAccessRightHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2BAppAccessRightHistoryRecordWhereInput>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  app?: Maybe<Scalars['String']>;
  app_not?: Maybe<Scalars['String']>;
  app_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  app_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<B2BAppAccessRightHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<B2BAppAccessRightHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<B2BAppAccessRightHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<B2BAppAccessRightHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type B2BAppAccessRightHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2BAppAccessRightHistoryRecordsCreateInput = {
  data?: Maybe<B2BAppAccessRightHistoryRecordCreateInput>;
};

export type B2BAppAccessRightHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppAccessRightHistoryRecordUpdateInput>;
};

export type B2BAppAccessRightRelateToManyInput = {
  create?: Maybe<Array<Maybe<B2BAppAccessRightCreateInput>>>;
  connect?: Maybe<Array<Maybe<B2BAppAccessRightWhereUniqueInput>>>;
  disconnect?: Maybe<Array<Maybe<B2BAppAccessRightWhereUniqueInput>>>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type B2BAppAccessRightUpdateInput = {
  user?: Maybe<UserRelateToOneInput>;
  app?: Maybe<B2BAppRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type B2BAppAccessRightWhereInput = {
  AND?: Maybe<Array<Maybe<B2BAppAccessRightWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2BAppAccessRightWhereInput>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  app?: Maybe<B2BAppWhereInput>;
  app_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type B2BAppAccessRightWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2BAppAccessRightsCreateInput = {
  data?: Maybe<B2BAppAccessRightCreateInput>;
};

export type B2BAppAccessRightsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppAccessRightUpdateInput>;
};

/**  Object which connects B2B App and Organization. Used to determine if app is connected or not, and store settings / state of app for specific organization  */
export type B2BAppContext = {
  __typename?: 'B2BAppContext';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2BAppContext List config, or
   *  2. As an alias to the field set on 'labelField' in the B2BAppContext List config, or
   *  3. As an alias to a 'name' field on the B2BAppContext List (if one exists), or
   *  4. As an alias to the 'id' field on the B2BAppContext List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  B2B App  */
  app?: Maybe<B2BApp>;
  /**  Organization  */
  organization?: Maybe<Organization>;
  /**  Settings that are required for specified app to work with specified organization. Filled by app's service account / support and can have any JSON structure  */
  settings?: Maybe<Scalars['JSON']>;
  /**  State of B2B working progress with specified organization. Filled by app's service account and can have any JSON structure  */
  state?: Maybe<Scalars['JSON']>;
  /**  Status of B2BApp connection, Can be one of the following: ["InProgress", "Error", "Finished"]. If not specified explicitly on creation, uses default value from related B2BApp model  */
  status?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type B2BAppContextCreateInput = {
  app?: Maybe<B2BAppRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  settings?: Maybe<Scalars['JSON']>;
  state?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type B2BAppContextHistoryRecord = {
  __typename?: 'B2BAppContextHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2BAppContextHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the B2BAppContextHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the B2BAppContextHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the B2BAppContextHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  app?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['JSON']>;
  state?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2BAppContextHistoryRecordCreateInput = {
  app?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['JSON']>;
  state?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum B2BAppContextHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type B2BAppContextHistoryRecordUpdateInput = {
  app?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['JSON']>;
  state?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2BAppContextHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<B2BAppContextHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2BAppContextHistoryRecordWhereInput>>>;
  app?: Maybe<Scalars['String']>;
  app_not?: Maybe<Scalars['String']>;
  app_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  app_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  settings?: Maybe<Scalars['JSON']>;
  settings_not?: Maybe<Scalars['JSON']>;
  settings_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  settings_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state?: Maybe<Scalars['JSON']>;
  state_not?: Maybe<Scalars['JSON']>;
  state_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<B2BAppContextHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<B2BAppContextHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<B2BAppContextHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<B2BAppContextHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type B2BAppContextHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2BAppContextHistoryRecordsCreateInput = {
  data?: Maybe<B2BAppContextHistoryRecordCreateInput>;
};

export type B2BAppContextHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppContextHistoryRecordUpdateInput>;
};

export type B2BAppContextUpdateInput = {
  app?: Maybe<B2BAppRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  settings?: Maybe<Scalars['JSON']>;
  state?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type B2BAppContextWhereInput = {
  AND?: Maybe<Array<Maybe<B2BAppContextWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2BAppContextWhereInput>>>;
  app?: Maybe<B2BAppWhereInput>;
  app_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  settings?: Maybe<Scalars['JSON']>;
  settings_not?: Maybe<Scalars['JSON']>;
  settings_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  settings_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state?: Maybe<Scalars['JSON']>;
  state_not?: Maybe<Scalars['JSON']>;
  state_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type B2BAppContextWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2BAppContextsCreateInput = {
  data?: Maybe<B2BAppContextCreateInput>;
};

export type B2BAppContextsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppContextUpdateInput>;
};

export type B2BAppCreateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['Upload']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['String']>;
  appUrl?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isGlobal?: Maybe<Scalars['Boolean']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  accessRights?: Maybe<B2BAppAccessRightRelateToManyInput>;
  features?: Maybe<Array<B2BAppGlobalFeature>>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Array<Scalars['String']>>;
  price?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export enum B2BAppGlobalFeature {
  PropertyMapGeneration = 'PropertyMapGeneration'
}

/**  A keystone list  */
export type B2BAppHistoryRecord = {
  __typename?: 'B2BAppHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2BAppHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the B2BAppHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the B2BAppHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the B2BAppHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  appUrl?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isGlobal?: Maybe<Scalars['Boolean']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  features?: Maybe<Scalars['JSON']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2BAppHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  appUrl?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isGlobal?: Maybe<Scalars['Boolean']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  features?: Maybe<Scalars['JSON']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum B2BAppHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type B2BAppHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  appUrl?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isGlobal?: Maybe<Scalars['Boolean']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  features?: Maybe<Scalars['JSON']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2BAppHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<B2BAppHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2BAppHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo?: Maybe<Scalars['JSON']>;
  logo_not?: Maybe<Scalars['JSON']>;
  logo_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  logo_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  shortDescription_starts_with?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with?: Maybe<Scalars['String']>;
  shortDescription_ends_with?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with?: Maybe<Scalars['String']>;
  shortDescription_i?: Maybe<Scalars['String']>;
  shortDescription_not_i?: Maybe<Scalars['String']>;
  shortDescription_contains_i?: Maybe<Scalars['String']>;
  shortDescription_not_contains_i?: Maybe<Scalars['String']>;
  shortDescription_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer?: Maybe<Scalars['String']>;
  developer_not?: Maybe<Scalars['String']>;
  developer_contains?: Maybe<Scalars['String']>;
  developer_not_contains?: Maybe<Scalars['String']>;
  developer_starts_with?: Maybe<Scalars['String']>;
  developer_not_starts_with?: Maybe<Scalars['String']>;
  developer_ends_with?: Maybe<Scalars['String']>;
  developer_not_ends_with?: Maybe<Scalars['String']>;
  developer_i?: Maybe<Scalars['String']>;
  developer_not_i?: Maybe<Scalars['String']>;
  developer_contains_i?: Maybe<Scalars['String']>;
  developer_not_contains_i?: Maybe<Scalars['String']>;
  developer_starts_with_i?: Maybe<Scalars['String']>;
  developer_not_starts_with_i?: Maybe<Scalars['String']>;
  developer_ends_with_i?: Maybe<Scalars['String']>;
  developer_not_ends_with_i?: Maybe<Scalars['String']>;
  developer_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl?: Maybe<Scalars['String']>;
  partnerUrl_not?: Maybe<Scalars['String']>;
  partnerUrl_contains?: Maybe<Scalars['String']>;
  partnerUrl_not_contains?: Maybe<Scalars['String']>;
  partnerUrl_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_i?: Maybe<Scalars['String']>;
  partnerUrl_not_i?: Maybe<Scalars['String']>;
  partnerUrl_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_not_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  detailedDescription_not?: Maybe<Scalars['JSON']>;
  detailedDescription_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  detailedDescription_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  appUrl?: Maybe<Scalars['String']>;
  appUrl_not?: Maybe<Scalars['String']>;
  appUrl_contains?: Maybe<Scalars['String']>;
  appUrl_not_contains?: Maybe<Scalars['String']>;
  appUrl_starts_with?: Maybe<Scalars['String']>;
  appUrl_not_starts_with?: Maybe<Scalars['String']>;
  appUrl_ends_with?: Maybe<Scalars['String']>;
  appUrl_not_ends_with?: Maybe<Scalars['String']>;
  appUrl_i?: Maybe<Scalars['String']>;
  appUrl_not_i?: Maybe<Scalars['String']>;
  appUrl_contains_i?: Maybe<Scalars['String']>;
  appUrl_not_contains_i?: Maybe<Scalars['String']>;
  appUrl_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isHidden_not?: Maybe<Scalars['Boolean']>;
  isGlobal?: Maybe<Scalars['Boolean']>;
  isGlobal_not?: Maybe<Scalars['Boolean']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  contextDefaultStatus_not?: Maybe<Scalars['String']>;
  contextDefaultStatus_contains?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_contains?: Maybe<Scalars['String']>;
  contextDefaultStatus_starts_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_starts_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_ends_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_ends_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_contains_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_contains_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_starts_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_starts_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_ends_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_ends_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contextDefaultStatus_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  category_not?: Maybe<Scalars['String']>;
  category_contains?: Maybe<Scalars['String']>;
  category_not_contains?: Maybe<Scalars['String']>;
  category_starts_with?: Maybe<Scalars['String']>;
  category_not_starts_with?: Maybe<Scalars['String']>;
  category_ends_with?: Maybe<Scalars['String']>;
  category_not_ends_with?: Maybe<Scalars['String']>;
  category_i?: Maybe<Scalars['String']>;
  category_not_i?: Maybe<Scalars['String']>;
  category_contains_i?: Maybe<Scalars['String']>;
  category_not_contains_i?: Maybe<Scalars['String']>;
  category_starts_with_i?: Maybe<Scalars['String']>;
  category_not_starts_with_i?: Maybe<Scalars['String']>;
  category_ends_with_i?: Maybe<Scalars['String']>;
  category_not_ends_with_i?: Maybe<Scalars['String']>;
  category_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  features?: Maybe<Scalars['JSON']>;
  features_not?: Maybe<Scalars['JSON']>;
  features_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  features_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  displayPriority?: Maybe<Scalars['Int']>;
  displayPriority_not?: Maybe<Scalars['Int']>;
  displayPriority_lt?: Maybe<Scalars['Int']>;
  displayPriority_lte?: Maybe<Scalars['Int']>;
  displayPriority_gt?: Maybe<Scalars['Int']>;
  displayPriority_gte?: Maybe<Scalars['Int']>;
  displayPriority_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  displayPriority_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  label?: Maybe<Scalars['String']>;
  label_not?: Maybe<Scalars['String']>;
  label_contains?: Maybe<Scalars['String']>;
  label_not_contains?: Maybe<Scalars['String']>;
  label_starts_with?: Maybe<Scalars['String']>;
  label_not_starts_with?: Maybe<Scalars['String']>;
  label_ends_with?: Maybe<Scalars['String']>;
  label_not_ends_with?: Maybe<Scalars['String']>;
  label_i?: Maybe<Scalars['String']>;
  label_not_i?: Maybe<Scalars['String']>;
  label_contains_i?: Maybe<Scalars['String']>;
  label_not_contains_i?: Maybe<Scalars['String']>;
  label_starts_with_i?: Maybe<Scalars['String']>;
  label_not_starts_with_i?: Maybe<Scalars['String']>;
  label_ends_with_i?: Maybe<Scalars['String']>;
  label_not_ends_with_i?: Maybe<Scalars['String']>;
  label_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  label_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  gallery?: Maybe<Scalars['JSON']>;
  gallery_not?: Maybe<Scalars['JSON']>;
  gallery_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  gallery_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  price?: Maybe<Scalars['String']>;
  price_not?: Maybe<Scalars['String']>;
  price_contains?: Maybe<Scalars['String']>;
  price_not_contains?: Maybe<Scalars['String']>;
  price_starts_with?: Maybe<Scalars['String']>;
  price_not_starts_with?: Maybe<Scalars['String']>;
  price_ends_with?: Maybe<Scalars['String']>;
  price_not_ends_with?: Maybe<Scalars['String']>;
  price_i?: Maybe<Scalars['String']>;
  price_not_i?: Maybe<Scalars['String']>;
  price_contains_i?: Maybe<Scalars['String']>;
  price_not_contains_i?: Maybe<Scalars['String']>;
  price_starts_with_i?: Maybe<Scalars['String']>;
  price_not_starts_with_i?: Maybe<Scalars['String']>;
  price_ends_with_i?: Maybe<Scalars['String']>;
  price_not_ends_with_i?: Maybe<Scalars['String']>;
  price_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  price_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<B2BAppHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<B2BAppHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<B2BAppHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<B2BAppHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type B2BAppHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2BAppHistoryRecordsCreateInput = {
  data?: Maybe<B2BAppHistoryRecordCreateInput>;
};

export type B2BAppHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppHistoryRecordUpdateInput>;
};

/**  Promotion banner which appears in "Miniapps" section of CRM. Used to promote B2BApps, discounts, collaborations and so on  */
export type B2BAppPromoBlock = {
  __typename?: 'B2BAppPromoBlock';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2BAppPromoBlock List config, or
   *  2. As an alias to the field set on 'labelField' in the B2BAppPromoBlock List config, or
   *  3. As an alias to a 'name' field on the B2BAppPromoBlock List (if one exists), or
   *  4. As an alias to the 'id' field on the B2BAppPromoBlock List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Title of promotion banner. Main catch phrase is placed here. Must contain no more than 27 characters per line (including spaces) and no more than 2 lines in total.  */
  title?: Maybe<Scalars['String']>;
  /**  Secondary text of promotion banner. Some additional info goes here. Must contain no more than 40 characters per line (including spaces) and no more than 2 lines in total.  */
  subtitle?: Maybe<Scalars['String']>;
  /**  Variant of texts inside block. Can be one of the following: [BLACK, WHITE]  */
  textVariant?: Maybe<B2BAppPromoBlockTextVariantType>;
  /**  Background color of promo block. Can be hex code or linear gradient.  */
  backgroundColor?: Maybe<Scalars['String']>;
  /**  PNG image which appears next to text on large devices  */
  backgroundImage?: Maybe<File>;
  /**  Link to the resource that this B2BAppPromoBlock promotes  */
  targetUrl?: Maybe<Scalars['String']>;
  /**  Determines whether the banner leads to an external resource or not. If external, interaction with block will lead to new tab. Otherwise user will stay in current tab  */
  external?: Maybe<Scalars['Boolean']>;
  /**  The number used to determine the position of the block among the others. Blocks with higher priority appear earlier. Blocks with the same priority are sorted from newest to oldest. The default value is 1.  */
  priority?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type B2BAppPromoBlockCreateInput = {
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  textVariant?: Maybe<B2BAppPromoBlockTextVariantType>;
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundImage?: Maybe<Scalars['Upload']>;
  targetUrl?: Maybe<Scalars['String']>;
  external?: Maybe<Scalars['Boolean']>;
  priority?: Maybe<Scalars['Int']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type B2BAppPromoBlockHistoryRecord = {
  __typename?: 'B2BAppPromoBlockHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2BAppPromoBlockHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the B2BAppPromoBlockHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the B2BAppPromoBlockHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the B2BAppPromoBlockHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  textVariant?: Maybe<Scalars['String']>;
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundImage?: Maybe<Scalars['JSON']>;
  targetUrl?: Maybe<Scalars['String']>;
  external?: Maybe<Scalars['Boolean']>;
  priority?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppPromoBlockHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2BAppPromoBlockHistoryRecordCreateInput = {
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  textVariant?: Maybe<Scalars['String']>;
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundImage?: Maybe<Scalars['JSON']>;
  targetUrl?: Maybe<Scalars['String']>;
  external?: Maybe<Scalars['Boolean']>;
  priority?: Maybe<Scalars['Int']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppPromoBlockHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum B2BAppPromoBlockHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type B2BAppPromoBlockHistoryRecordUpdateInput = {
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  textVariant?: Maybe<Scalars['String']>;
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundImage?: Maybe<Scalars['JSON']>;
  targetUrl?: Maybe<Scalars['String']>;
  external?: Maybe<Scalars['Boolean']>;
  priority?: Maybe<Scalars['Int']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2BAppPromoBlockHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2BAppPromoBlockHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<B2BAppPromoBlockHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2BAppPromoBlockHistoryRecordWhereInput>>>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subtitle?: Maybe<Scalars['String']>;
  subtitle_not?: Maybe<Scalars['String']>;
  subtitle_contains?: Maybe<Scalars['String']>;
  subtitle_not_contains?: Maybe<Scalars['String']>;
  subtitle_starts_with?: Maybe<Scalars['String']>;
  subtitle_not_starts_with?: Maybe<Scalars['String']>;
  subtitle_ends_with?: Maybe<Scalars['String']>;
  subtitle_not_ends_with?: Maybe<Scalars['String']>;
  subtitle_i?: Maybe<Scalars['String']>;
  subtitle_not_i?: Maybe<Scalars['String']>;
  subtitle_contains_i?: Maybe<Scalars['String']>;
  subtitle_not_contains_i?: Maybe<Scalars['String']>;
  subtitle_starts_with_i?: Maybe<Scalars['String']>;
  subtitle_not_starts_with_i?: Maybe<Scalars['String']>;
  subtitle_ends_with_i?: Maybe<Scalars['String']>;
  subtitle_not_ends_with_i?: Maybe<Scalars['String']>;
  subtitle_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subtitle_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  textVariant?: Maybe<Scalars['String']>;
  textVariant_not?: Maybe<Scalars['String']>;
  textVariant_contains?: Maybe<Scalars['String']>;
  textVariant_not_contains?: Maybe<Scalars['String']>;
  textVariant_starts_with?: Maybe<Scalars['String']>;
  textVariant_not_starts_with?: Maybe<Scalars['String']>;
  textVariant_ends_with?: Maybe<Scalars['String']>;
  textVariant_not_ends_with?: Maybe<Scalars['String']>;
  textVariant_i?: Maybe<Scalars['String']>;
  textVariant_not_i?: Maybe<Scalars['String']>;
  textVariant_contains_i?: Maybe<Scalars['String']>;
  textVariant_not_contains_i?: Maybe<Scalars['String']>;
  textVariant_starts_with_i?: Maybe<Scalars['String']>;
  textVariant_not_starts_with_i?: Maybe<Scalars['String']>;
  textVariant_ends_with_i?: Maybe<Scalars['String']>;
  textVariant_not_ends_with_i?: Maybe<Scalars['String']>;
  textVariant_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  textVariant_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundColor_not?: Maybe<Scalars['String']>;
  backgroundColor_contains?: Maybe<Scalars['String']>;
  backgroundColor_not_contains?: Maybe<Scalars['String']>;
  backgroundColor_starts_with?: Maybe<Scalars['String']>;
  backgroundColor_not_starts_with?: Maybe<Scalars['String']>;
  backgroundColor_ends_with?: Maybe<Scalars['String']>;
  backgroundColor_not_ends_with?: Maybe<Scalars['String']>;
  backgroundColor_i?: Maybe<Scalars['String']>;
  backgroundColor_not_i?: Maybe<Scalars['String']>;
  backgroundColor_contains_i?: Maybe<Scalars['String']>;
  backgroundColor_not_contains_i?: Maybe<Scalars['String']>;
  backgroundColor_starts_with_i?: Maybe<Scalars['String']>;
  backgroundColor_not_starts_with_i?: Maybe<Scalars['String']>;
  backgroundColor_ends_with_i?: Maybe<Scalars['String']>;
  backgroundColor_not_ends_with_i?: Maybe<Scalars['String']>;
  backgroundColor_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  backgroundColor_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  backgroundImage?: Maybe<Scalars['JSON']>;
  backgroundImage_not?: Maybe<Scalars['JSON']>;
  backgroundImage_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  backgroundImage_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  targetUrl?: Maybe<Scalars['String']>;
  targetUrl_not?: Maybe<Scalars['String']>;
  targetUrl_contains?: Maybe<Scalars['String']>;
  targetUrl_not_contains?: Maybe<Scalars['String']>;
  targetUrl_starts_with?: Maybe<Scalars['String']>;
  targetUrl_not_starts_with?: Maybe<Scalars['String']>;
  targetUrl_ends_with?: Maybe<Scalars['String']>;
  targetUrl_not_ends_with?: Maybe<Scalars['String']>;
  targetUrl_i?: Maybe<Scalars['String']>;
  targetUrl_not_i?: Maybe<Scalars['String']>;
  targetUrl_contains_i?: Maybe<Scalars['String']>;
  targetUrl_not_contains_i?: Maybe<Scalars['String']>;
  targetUrl_starts_with_i?: Maybe<Scalars['String']>;
  targetUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  targetUrl_ends_with_i?: Maybe<Scalars['String']>;
  targetUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  targetUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  external?: Maybe<Scalars['Boolean']>;
  external_not?: Maybe<Scalars['Boolean']>;
  priority?: Maybe<Scalars['Int']>;
  priority_not?: Maybe<Scalars['Int']>;
  priority_lt?: Maybe<Scalars['Int']>;
  priority_lte?: Maybe<Scalars['Int']>;
  priority_gt?: Maybe<Scalars['Int']>;
  priority_gte?: Maybe<Scalars['Int']>;
  priority_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  priority_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<B2BAppPromoBlockHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<B2BAppPromoBlockHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<B2BAppPromoBlockHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<B2BAppPromoBlockHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type B2BAppPromoBlockHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2BAppPromoBlockHistoryRecordsCreateInput = {
  data?: Maybe<B2BAppPromoBlockHistoryRecordCreateInput>;
};

export type B2BAppPromoBlockHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppPromoBlockHistoryRecordUpdateInput>;
};

export enum B2BAppPromoBlockTextVariantType {
  Black = 'BLACK',
  White = 'WHITE'
}

export type B2BAppPromoBlockUpdateInput = {
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  textVariant?: Maybe<B2BAppPromoBlockTextVariantType>;
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundImage?: Maybe<Scalars['Upload']>;
  targetUrl?: Maybe<Scalars['String']>;
  external?: Maybe<Scalars['Boolean']>;
  priority?: Maybe<Scalars['Int']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type B2BAppPromoBlockWhereInput = {
  AND?: Maybe<Array<Maybe<B2BAppPromoBlockWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2BAppPromoBlockWhereInput>>>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subtitle?: Maybe<Scalars['String']>;
  subtitle_not?: Maybe<Scalars['String']>;
  subtitle_contains?: Maybe<Scalars['String']>;
  subtitle_not_contains?: Maybe<Scalars['String']>;
  subtitle_starts_with?: Maybe<Scalars['String']>;
  subtitle_not_starts_with?: Maybe<Scalars['String']>;
  subtitle_ends_with?: Maybe<Scalars['String']>;
  subtitle_not_ends_with?: Maybe<Scalars['String']>;
  subtitle_i?: Maybe<Scalars['String']>;
  subtitle_not_i?: Maybe<Scalars['String']>;
  subtitle_contains_i?: Maybe<Scalars['String']>;
  subtitle_not_contains_i?: Maybe<Scalars['String']>;
  subtitle_starts_with_i?: Maybe<Scalars['String']>;
  subtitle_not_starts_with_i?: Maybe<Scalars['String']>;
  subtitle_ends_with_i?: Maybe<Scalars['String']>;
  subtitle_not_ends_with_i?: Maybe<Scalars['String']>;
  subtitle_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subtitle_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  textVariant?: Maybe<B2BAppPromoBlockTextVariantType>;
  textVariant_not?: Maybe<B2BAppPromoBlockTextVariantType>;
  textVariant_in?: Maybe<Array<Maybe<B2BAppPromoBlockTextVariantType>>>;
  textVariant_not_in?: Maybe<Array<Maybe<B2BAppPromoBlockTextVariantType>>>;
  backgroundColor?: Maybe<Scalars['String']>;
  backgroundColor_not?: Maybe<Scalars['String']>;
  backgroundColor_contains?: Maybe<Scalars['String']>;
  backgroundColor_not_contains?: Maybe<Scalars['String']>;
  backgroundColor_starts_with?: Maybe<Scalars['String']>;
  backgroundColor_not_starts_with?: Maybe<Scalars['String']>;
  backgroundColor_ends_with?: Maybe<Scalars['String']>;
  backgroundColor_not_ends_with?: Maybe<Scalars['String']>;
  backgroundColor_i?: Maybe<Scalars['String']>;
  backgroundColor_not_i?: Maybe<Scalars['String']>;
  backgroundColor_contains_i?: Maybe<Scalars['String']>;
  backgroundColor_not_contains_i?: Maybe<Scalars['String']>;
  backgroundColor_starts_with_i?: Maybe<Scalars['String']>;
  backgroundColor_not_starts_with_i?: Maybe<Scalars['String']>;
  backgroundColor_ends_with_i?: Maybe<Scalars['String']>;
  backgroundColor_not_ends_with_i?: Maybe<Scalars['String']>;
  backgroundColor_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  backgroundColor_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  backgroundImage?: Maybe<Scalars['String']>;
  backgroundImage_not?: Maybe<Scalars['String']>;
  backgroundImage_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  backgroundImage_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetUrl?: Maybe<Scalars['String']>;
  targetUrl_not?: Maybe<Scalars['String']>;
  targetUrl_contains?: Maybe<Scalars['String']>;
  targetUrl_not_contains?: Maybe<Scalars['String']>;
  targetUrl_starts_with?: Maybe<Scalars['String']>;
  targetUrl_not_starts_with?: Maybe<Scalars['String']>;
  targetUrl_ends_with?: Maybe<Scalars['String']>;
  targetUrl_not_ends_with?: Maybe<Scalars['String']>;
  targetUrl_i?: Maybe<Scalars['String']>;
  targetUrl_not_i?: Maybe<Scalars['String']>;
  targetUrl_contains_i?: Maybe<Scalars['String']>;
  targetUrl_not_contains_i?: Maybe<Scalars['String']>;
  targetUrl_starts_with_i?: Maybe<Scalars['String']>;
  targetUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  targetUrl_ends_with_i?: Maybe<Scalars['String']>;
  targetUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  targetUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  external?: Maybe<Scalars['Boolean']>;
  external_not?: Maybe<Scalars['Boolean']>;
  priority?: Maybe<Scalars['Int']>;
  priority_not?: Maybe<Scalars['Int']>;
  priority_lt?: Maybe<Scalars['Int']>;
  priority_lte?: Maybe<Scalars['Int']>;
  priority_gt?: Maybe<Scalars['Int']>;
  priority_gte?: Maybe<Scalars['Int']>;
  priority_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  priority_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type B2BAppPromoBlockWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2BAppPromoBlocksCreateInput = {
  data?: Maybe<B2BAppPromoBlockCreateInput>;
};

export type B2BAppPromoBlocksUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppPromoBlockUpdateInput>;
};

export type B2BAppRelateToOneInput = {
  create?: Maybe<B2BAppCreateInput>;
  connect?: Maybe<B2BAppWhereUniqueInput>;
  disconnect?: Maybe<B2BAppWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type B2BAppUpdateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['Upload']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['String']>;
  appUrl?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isGlobal?: Maybe<Scalars['Boolean']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  accessRights?: Maybe<B2BAppAccessRightRelateToManyInput>;
  features?: Maybe<Array<B2BAppGlobalFeature>>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Array<Scalars['String']>>;
  price?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type B2BAppWhereInput = {
  AND?: Maybe<Array<Maybe<B2BAppWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2BAppWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo?: Maybe<Scalars['String']>;
  logo_not?: Maybe<Scalars['String']>;
  logo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  shortDescription_starts_with?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with?: Maybe<Scalars['String']>;
  shortDescription_ends_with?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with?: Maybe<Scalars['String']>;
  shortDescription_i?: Maybe<Scalars['String']>;
  shortDescription_not_i?: Maybe<Scalars['String']>;
  shortDescription_contains_i?: Maybe<Scalars['String']>;
  shortDescription_not_contains_i?: Maybe<Scalars['String']>;
  shortDescription_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer?: Maybe<Scalars['String']>;
  developer_not?: Maybe<Scalars['String']>;
  developer_contains?: Maybe<Scalars['String']>;
  developer_not_contains?: Maybe<Scalars['String']>;
  developer_starts_with?: Maybe<Scalars['String']>;
  developer_not_starts_with?: Maybe<Scalars['String']>;
  developer_ends_with?: Maybe<Scalars['String']>;
  developer_not_ends_with?: Maybe<Scalars['String']>;
  developer_i?: Maybe<Scalars['String']>;
  developer_not_i?: Maybe<Scalars['String']>;
  developer_contains_i?: Maybe<Scalars['String']>;
  developer_not_contains_i?: Maybe<Scalars['String']>;
  developer_starts_with_i?: Maybe<Scalars['String']>;
  developer_not_starts_with_i?: Maybe<Scalars['String']>;
  developer_ends_with_i?: Maybe<Scalars['String']>;
  developer_not_ends_with_i?: Maybe<Scalars['String']>;
  developer_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl?: Maybe<Scalars['String']>;
  partnerUrl_not?: Maybe<Scalars['String']>;
  partnerUrl_contains?: Maybe<Scalars['String']>;
  partnerUrl_not_contains?: Maybe<Scalars['String']>;
  partnerUrl_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_i?: Maybe<Scalars['String']>;
  partnerUrl_not_i?: Maybe<Scalars['String']>;
  partnerUrl_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_not_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailedDescription?: Maybe<Scalars['String']>;
  detailedDescription_not?: Maybe<Scalars['String']>;
  detailedDescription_contains?: Maybe<Scalars['String']>;
  detailedDescription_not_contains?: Maybe<Scalars['String']>;
  detailedDescription_starts_with?: Maybe<Scalars['String']>;
  detailedDescription_not_starts_with?: Maybe<Scalars['String']>;
  detailedDescription_ends_with?: Maybe<Scalars['String']>;
  detailedDescription_not_ends_with?: Maybe<Scalars['String']>;
  detailedDescription_i?: Maybe<Scalars['String']>;
  detailedDescription_not_i?: Maybe<Scalars['String']>;
  detailedDescription_contains_i?: Maybe<Scalars['String']>;
  detailedDescription_not_contains_i?: Maybe<Scalars['String']>;
  detailedDescription_starts_with_i?: Maybe<Scalars['String']>;
  detailedDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  detailedDescription_ends_with_i?: Maybe<Scalars['String']>;
  detailedDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  detailedDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailedDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appUrl?: Maybe<Scalars['String']>;
  appUrl_not?: Maybe<Scalars['String']>;
  appUrl_contains?: Maybe<Scalars['String']>;
  appUrl_not_contains?: Maybe<Scalars['String']>;
  appUrl_starts_with?: Maybe<Scalars['String']>;
  appUrl_not_starts_with?: Maybe<Scalars['String']>;
  appUrl_ends_with?: Maybe<Scalars['String']>;
  appUrl_not_ends_with?: Maybe<Scalars['String']>;
  appUrl_i?: Maybe<Scalars['String']>;
  appUrl_not_i?: Maybe<Scalars['String']>;
  appUrl_contains_i?: Maybe<Scalars['String']>;
  appUrl_not_contains_i?: Maybe<Scalars['String']>;
  appUrl_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isHidden_not?: Maybe<Scalars['Boolean']>;
  isGlobal?: Maybe<Scalars['Boolean']>;
  isGlobal_not?: Maybe<Scalars['Boolean']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  contextDefaultStatus_not?: Maybe<Scalars['String']>;
  contextDefaultStatus_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contextDefaultStatus_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  category_not?: Maybe<Scalars['String']>;
  category_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  condition must be true for all nodes  */
  accessRights_every?: Maybe<B2BAppAccessRightWhereInput>;
  /**  condition must be true for at least 1 node  */
  accessRights_some?: Maybe<B2BAppAccessRightWhereInput>;
  /**  condition must be false for all nodes  */
  accessRights_none?: Maybe<B2BAppAccessRightWhereInput>;
  features?: Maybe<Array<B2BAppGlobalFeature>>;
  features_not?: Maybe<Array<B2BAppGlobalFeature>>;
  features_in?: Maybe<Array<Maybe<Array<B2BAppGlobalFeature>>>>;
  features_not_in?: Maybe<Array<Maybe<Array<B2BAppGlobalFeature>>>>;
  displayPriority?: Maybe<Scalars['Int']>;
  displayPriority_not?: Maybe<Scalars['Int']>;
  displayPriority_lt?: Maybe<Scalars['Int']>;
  displayPriority_lte?: Maybe<Scalars['Int']>;
  displayPriority_gt?: Maybe<Scalars['Int']>;
  displayPriority_gte?: Maybe<Scalars['Int']>;
  displayPriority_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  displayPriority_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  label?: Maybe<Scalars['String']>;
  label_not?: Maybe<Scalars['String']>;
  label_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  label_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  gallery?: Maybe<Array<Scalars['String']>>;
  gallery_not?: Maybe<Array<Scalars['String']>>;
  gallery_in?: Maybe<Array<Maybe<Array<Scalars['String']>>>>;
  gallery_not_in?: Maybe<Array<Maybe<Array<Scalars['String']>>>>;
  price?: Maybe<Scalars['String']>;
  price_not?: Maybe<Scalars['String']>;
  price_contains?: Maybe<Scalars['String']>;
  price_not_contains?: Maybe<Scalars['String']>;
  price_starts_with?: Maybe<Scalars['String']>;
  price_not_starts_with?: Maybe<Scalars['String']>;
  price_ends_with?: Maybe<Scalars['String']>;
  price_not_ends_with?: Maybe<Scalars['String']>;
  price_i?: Maybe<Scalars['String']>;
  price_not_i?: Maybe<Scalars['String']>;
  price_contains_i?: Maybe<Scalars['String']>;
  price_not_contains_i?: Maybe<Scalars['String']>;
  price_starts_with_i?: Maybe<Scalars['String']>;
  price_not_starts_with_i?: Maybe<Scalars['String']>;
  price_ends_with_i?: Maybe<Scalars['String']>;
  price_not_ends_with_i?: Maybe<Scalars['String']>;
  price_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  price_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type B2BAppWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2BAppsCreateInput = {
  data?: Maybe<B2BAppCreateInput>;
};

export type B2BAppsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppUpdateInput>;
};

/**  B2C App  */
export type B2CApp = {
  __typename?: 'B2CApp';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2CApp List config, or
   *  2. As an alias to the field set on 'labelField' in the B2CApp List config, or
   *  3. As an alias to a 'name' field on the B2CApp List (if one exists), or
   *  4. As an alias to the 'id' field on the B2CApp List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Name of B2C App  */
  name?: Maybe<Scalars['String']>;
  /**  Logo of app's company or app itself  */
  logo?: Maybe<File>;
  /**  Short description / catch phrase providing information about integration functionality. Will be shown on App's card  */
  shortDescription?: Maybe<Scalars['String']>;
  /**  Developer company name  */
  developer?: Maybe<Scalars['String']>;
  /**  Indicates whether the integration or app is hidden inside the CRM. Used if integration is active by default or not ready to appear inside CRM  */
  isHidden?: Maybe<Scalars['Boolean']>;
  /**  The color schema of the B2C application used to display it correctly. The main color is used for texts, icons etc. The secondary color is used for the background  */
  colorSchema?: Maybe<AppColorSchemaField>;
  /**  Link to current active app build  */
  currentBuild?: Maybe<B2CAppBuild>;
  /**  Specifies set of service users, who can modify B2CAppProperties of the app as well as perform actions on behalf of the application  */
  accessRights: Array<B2CAppAccessRight>;
  _accessRightsMeta?: Maybe<_QueryMeta>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};


/**  B2C App  */
export type B2CAppAccessRightsArgs = {
  where?: Maybe<B2CAppAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


/**  B2C App  */
export type B2CApp_AccessRightsMetaArgs = {
  where?: Maybe<B2CAppAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

/**  Link between service user and B2C App. The existence of this connection means that this user has the rights to perform actions on behalf of the integration and modify some B2CApp-related models  */
export type B2CAppAccessRight = {
  __typename?: 'B2CAppAccessRight';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2CAppAccessRight List config, or
   *  2. As an alias to the field set on 'labelField' in the B2CAppAccessRight List config, or
   *  3. As an alias to a 'name' field on the B2CAppAccessRight List (if one exists), or
   *  4. As an alias to the 'id' field on the B2CAppAccessRight List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Link to user. Note, that user must be of "service" type  */
  user?: Maybe<User>;
  /**  Link to B2BApp.accessRights  */
  app?: Maybe<B2CApp>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type B2CAppAccessRightCreateInput = {
  user?: Maybe<UserRelateToOneInput>;
  app?: Maybe<B2CAppRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type B2CAppAccessRightHistoryRecord = {
  __typename?: 'B2CAppAccessRightHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2CAppAccessRightHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the B2CAppAccessRightHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the B2CAppAccessRightHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the B2CAppAccessRightHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  app?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2CAppAccessRightHistoryRecordCreateInput = {
  user?: Maybe<Scalars['String']>;
  app?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum B2CAppAccessRightHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type B2CAppAccessRightHistoryRecordUpdateInput = {
  user?: Maybe<Scalars['String']>;
  app?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2CAppAccessRightHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<B2CAppAccessRightHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2CAppAccessRightHistoryRecordWhereInput>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  app?: Maybe<Scalars['String']>;
  app_not?: Maybe<Scalars['String']>;
  app_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  app_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<B2CAppAccessRightHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<B2CAppAccessRightHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<B2CAppAccessRightHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<B2CAppAccessRightHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type B2CAppAccessRightHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2CAppAccessRightHistoryRecordsCreateInput = {
  data?: Maybe<B2CAppAccessRightHistoryRecordCreateInput>;
};

export type B2CAppAccessRightHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppAccessRightHistoryRecordUpdateInput>;
};

export type B2CAppAccessRightRelateToManyInput = {
  create?: Maybe<Array<Maybe<B2CAppAccessRightCreateInput>>>;
  connect?: Maybe<Array<Maybe<B2CAppAccessRightWhereUniqueInput>>>;
  disconnect?: Maybe<Array<Maybe<B2CAppAccessRightWhereUniqueInput>>>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type B2CAppAccessRightUpdateInput = {
  user?: Maybe<UserRelateToOneInput>;
  app?: Maybe<B2CAppRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type B2CAppAccessRightWhereInput = {
  AND?: Maybe<Array<Maybe<B2CAppAccessRightWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2CAppAccessRightWhereInput>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  app?: Maybe<B2CAppWhereInput>;
  app_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type B2CAppAccessRightWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2CAppAccessRightsCreateInput = {
  data?: Maybe<B2CAppAccessRightCreateInput>;
};

export type B2CAppAccessRightsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppAccessRightUpdateInput>;
};

/**  Cordova build of B2C Application  */
export type B2CAppBuild = {
  __typename?: 'B2CAppBuild';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2CAppBuild List config, or
   *  2. As an alias to the field set on 'labelField' in the B2CAppBuild List config, or
   *  3. As an alias to a 'name' field on the B2CAppBuild List (if one exists), or
   *  4. As an alias to the 'id' field on the B2CAppBuild List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Link to B2C application  */
  app?: Maybe<B2CApp>;
  /**  Version of build which used to control builds inside B2CApp model  */
  version?: Maybe<Scalars['String']>;
  /**  B2C app cordova build compressed to single .zip file  */
  data?: Maybe<File>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type B2CAppBuildCreateInput = {
  app?: Maybe<B2CAppRelateToOneInput>;
  version?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['Upload']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type B2CAppBuildHistoryRecord = {
  __typename?: 'B2CAppBuildHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2CAppBuildHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the B2CAppBuildHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the B2CAppBuildHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the B2CAppBuildHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  app?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppBuildHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2CAppBuildHistoryRecordCreateInput = {
  app?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppBuildHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum B2CAppBuildHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type B2CAppBuildHistoryRecordUpdateInput = {
  app?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppBuildHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2CAppBuildHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<B2CAppBuildHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2CAppBuildHistoryRecordWhereInput>>>;
  app?: Maybe<Scalars['String']>;
  app_not?: Maybe<Scalars['String']>;
  app_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  app_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  version?: Maybe<Scalars['String']>;
  version_not?: Maybe<Scalars['String']>;
  version_contains?: Maybe<Scalars['String']>;
  version_not_contains?: Maybe<Scalars['String']>;
  version_starts_with?: Maybe<Scalars['String']>;
  version_not_starts_with?: Maybe<Scalars['String']>;
  version_ends_with?: Maybe<Scalars['String']>;
  version_not_ends_with?: Maybe<Scalars['String']>;
  version_i?: Maybe<Scalars['String']>;
  version_not_i?: Maybe<Scalars['String']>;
  version_contains_i?: Maybe<Scalars['String']>;
  version_not_contains_i?: Maybe<Scalars['String']>;
  version_starts_with_i?: Maybe<Scalars['String']>;
  version_not_starts_with_i?: Maybe<Scalars['String']>;
  version_ends_with_i?: Maybe<Scalars['String']>;
  version_not_ends_with_i?: Maybe<Scalars['String']>;
  version_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  version_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  data?: Maybe<Scalars['JSON']>;
  data_not?: Maybe<Scalars['JSON']>;
  data_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  data_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<B2CAppBuildHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<B2CAppBuildHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<B2CAppBuildHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<B2CAppBuildHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type B2CAppBuildHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2CAppBuildHistoryRecordsCreateInput = {
  data?: Maybe<B2CAppBuildHistoryRecordCreateInput>;
};

export type B2CAppBuildHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppBuildHistoryRecordUpdateInput>;
};

export type B2CAppBuildRelateToOneInput = {
  create?: Maybe<B2CAppBuildCreateInput>;
  connect?: Maybe<B2CAppBuildWhereUniqueInput>;
  disconnect?: Maybe<B2CAppBuildWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type B2CAppBuildUpdateInput = {
  app?: Maybe<B2CAppRelateToOneInput>;
  version?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['Upload']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type B2CAppBuildWhereInput = {
  AND?: Maybe<Array<Maybe<B2CAppBuildWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2CAppBuildWhereInput>>>;
  app?: Maybe<B2CAppWhereInput>;
  app_is_null?: Maybe<Scalars['Boolean']>;
  version?: Maybe<Scalars['String']>;
  version_not?: Maybe<Scalars['String']>;
  version_contains?: Maybe<Scalars['String']>;
  version_not_contains?: Maybe<Scalars['String']>;
  version_starts_with?: Maybe<Scalars['String']>;
  version_not_starts_with?: Maybe<Scalars['String']>;
  version_ends_with?: Maybe<Scalars['String']>;
  version_not_ends_with?: Maybe<Scalars['String']>;
  version_i?: Maybe<Scalars['String']>;
  version_not_i?: Maybe<Scalars['String']>;
  version_contains_i?: Maybe<Scalars['String']>;
  version_not_contains_i?: Maybe<Scalars['String']>;
  version_starts_with_i?: Maybe<Scalars['String']>;
  version_not_starts_with_i?: Maybe<Scalars['String']>;
  version_ends_with_i?: Maybe<Scalars['String']>;
  version_not_ends_with_i?: Maybe<Scalars['String']>;
  version_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  version_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  data?: Maybe<Scalars['String']>;
  data_not?: Maybe<Scalars['String']>;
  data_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  data_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type B2CAppBuildWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2CAppBuildsCreateInput = {
  data?: Maybe<B2CAppBuildCreateInput>;
};

export type B2CAppBuildsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppBuildUpdateInput>;
};

export type B2CAppCreateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['Upload']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  colorSchema?: Maybe<AppColorSchemaFieldInput>;
  currentBuild?: Maybe<B2CAppBuildRelateToOneInput>;
  accessRights?: Maybe<B2CAppAccessRightRelateToManyInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type B2CAppHistoryRecord = {
  __typename?: 'B2CAppHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2CAppHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the B2CAppHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the B2CAppHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the B2CAppHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  colorSchema?: Maybe<Scalars['JSON']>;
  currentBuild?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2CAppHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  colorSchema?: Maybe<Scalars['JSON']>;
  currentBuild?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum B2CAppHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type B2CAppHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  colorSchema?: Maybe<Scalars['JSON']>;
  currentBuild?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2CAppHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<B2CAppHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2CAppHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo?: Maybe<Scalars['JSON']>;
  logo_not?: Maybe<Scalars['JSON']>;
  logo_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  logo_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  shortDescription_starts_with?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with?: Maybe<Scalars['String']>;
  shortDescription_ends_with?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with?: Maybe<Scalars['String']>;
  shortDescription_i?: Maybe<Scalars['String']>;
  shortDescription_not_i?: Maybe<Scalars['String']>;
  shortDescription_contains_i?: Maybe<Scalars['String']>;
  shortDescription_not_contains_i?: Maybe<Scalars['String']>;
  shortDescription_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer?: Maybe<Scalars['String']>;
  developer_not?: Maybe<Scalars['String']>;
  developer_contains?: Maybe<Scalars['String']>;
  developer_not_contains?: Maybe<Scalars['String']>;
  developer_starts_with?: Maybe<Scalars['String']>;
  developer_not_starts_with?: Maybe<Scalars['String']>;
  developer_ends_with?: Maybe<Scalars['String']>;
  developer_not_ends_with?: Maybe<Scalars['String']>;
  developer_i?: Maybe<Scalars['String']>;
  developer_not_i?: Maybe<Scalars['String']>;
  developer_contains_i?: Maybe<Scalars['String']>;
  developer_not_contains_i?: Maybe<Scalars['String']>;
  developer_starts_with_i?: Maybe<Scalars['String']>;
  developer_not_starts_with_i?: Maybe<Scalars['String']>;
  developer_ends_with_i?: Maybe<Scalars['String']>;
  developer_not_ends_with_i?: Maybe<Scalars['String']>;
  developer_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isHidden_not?: Maybe<Scalars['Boolean']>;
  colorSchema?: Maybe<Scalars['JSON']>;
  colorSchema_not?: Maybe<Scalars['JSON']>;
  colorSchema_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  colorSchema_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  currentBuild?: Maybe<Scalars['String']>;
  currentBuild_not?: Maybe<Scalars['String']>;
  currentBuild_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currentBuild_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<B2CAppHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<B2CAppHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<B2CAppHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<B2CAppHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type B2CAppHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2CAppHistoryRecordsCreateInput = {
  data?: Maybe<B2CAppHistoryRecordCreateInput>;
};

export type B2CAppHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppHistoryRecordUpdateInput>;
};

export type B2CAppPropertiesCreateInput = {
  data?: Maybe<B2CAppPropertyCreateInput>;
};

export type B2CAppPropertiesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppPropertyUpdateInput>;
};

/**  Link between specific home address and B2C App. used to filter B2C applications that can be run on a specific address  */
export type B2CAppProperty = {
  __typename?: 'B2CAppProperty';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2CAppProperty List config, or
   *  2. As an alias to the field set on 'labelField' in the B2CAppProperty List config, or
   *  3. As an alias to a 'name' field on the B2CAppProperty List (if one exists), or
   *  4. As an alias to the 'id' field on the B2CAppProperty List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Link to B2C App  */
  app?: Maybe<B2CApp>;
  /**  Property address. Must match the address lookup service with case accuracy  */
  address?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type B2CAppPropertyCreateInput = {
  app?: Maybe<B2CAppRelateToOneInput>;
  address?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type B2CAppPropertyHistoryRecord = {
  __typename?: 'B2CAppPropertyHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the B2CAppPropertyHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the B2CAppPropertyHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the B2CAppPropertyHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the B2CAppPropertyHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  app?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2CAppPropertyHistoryRecordCreateInput = {
  app?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum B2CAppPropertyHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type B2CAppPropertyHistoryRecordUpdateInput = {
  app?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<B2CAppPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type B2CAppPropertyHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<B2CAppPropertyHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2CAppPropertyHistoryRecordWhereInput>>>;
  app?: Maybe<Scalars['String']>;
  app_not?: Maybe<Scalars['String']>;
  app_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  app_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  address?: Maybe<Scalars['String']>;
  address_not?: Maybe<Scalars['String']>;
  address_contains?: Maybe<Scalars['String']>;
  address_not_contains?: Maybe<Scalars['String']>;
  address_starts_with?: Maybe<Scalars['String']>;
  address_not_starts_with?: Maybe<Scalars['String']>;
  address_ends_with?: Maybe<Scalars['String']>;
  address_not_ends_with?: Maybe<Scalars['String']>;
  address_i?: Maybe<Scalars['String']>;
  address_not_i?: Maybe<Scalars['String']>;
  address_contains_i?: Maybe<Scalars['String']>;
  address_not_contains_i?: Maybe<Scalars['String']>;
  address_starts_with_i?: Maybe<Scalars['String']>;
  address_not_starts_with_i?: Maybe<Scalars['String']>;
  address_ends_with_i?: Maybe<Scalars['String']>;
  address_not_ends_with_i?: Maybe<Scalars['String']>;
  address_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  address_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<B2CAppPropertyHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<B2CAppPropertyHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<B2CAppPropertyHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<B2CAppPropertyHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type B2CAppPropertyHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2CAppPropertyHistoryRecordsCreateInput = {
  data?: Maybe<B2CAppPropertyHistoryRecordCreateInput>;
};

export type B2CAppPropertyHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppPropertyHistoryRecordUpdateInput>;
};

export type B2CAppPropertyUpdateInput = {
  app?: Maybe<B2CAppRelateToOneInput>;
  address?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type B2CAppPropertyWhereInput = {
  AND?: Maybe<Array<Maybe<B2CAppPropertyWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2CAppPropertyWhereInput>>>;
  app?: Maybe<B2CAppWhereInput>;
  app_is_null?: Maybe<Scalars['Boolean']>;
  address?: Maybe<Scalars['String']>;
  address_not?: Maybe<Scalars['String']>;
  address_contains?: Maybe<Scalars['String']>;
  address_not_contains?: Maybe<Scalars['String']>;
  address_starts_with?: Maybe<Scalars['String']>;
  address_not_starts_with?: Maybe<Scalars['String']>;
  address_ends_with?: Maybe<Scalars['String']>;
  address_not_ends_with?: Maybe<Scalars['String']>;
  address_i?: Maybe<Scalars['String']>;
  address_not_i?: Maybe<Scalars['String']>;
  address_contains_i?: Maybe<Scalars['String']>;
  address_not_contains_i?: Maybe<Scalars['String']>;
  address_starts_with_i?: Maybe<Scalars['String']>;
  address_not_starts_with_i?: Maybe<Scalars['String']>;
  address_ends_with_i?: Maybe<Scalars['String']>;
  address_not_ends_with_i?: Maybe<Scalars['String']>;
  address_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  address_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type B2CAppPropertyWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2CAppRelateToOneInput = {
  create?: Maybe<B2CAppCreateInput>;
  connect?: Maybe<B2CAppWhereUniqueInput>;
  disconnect?: Maybe<B2CAppWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type B2CAppUpdateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['Upload']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  colorSchema?: Maybe<AppColorSchemaFieldInput>;
  currentBuild?: Maybe<B2CAppBuildRelateToOneInput>;
  accessRights?: Maybe<B2CAppAccessRightRelateToManyInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type B2CAppWhereInput = {
  AND?: Maybe<Array<Maybe<B2CAppWhereInput>>>;
  OR?: Maybe<Array<Maybe<B2CAppWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo?: Maybe<Scalars['String']>;
  logo_not?: Maybe<Scalars['String']>;
  logo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  shortDescription_starts_with?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with?: Maybe<Scalars['String']>;
  shortDescription_ends_with?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with?: Maybe<Scalars['String']>;
  shortDescription_i?: Maybe<Scalars['String']>;
  shortDescription_not_i?: Maybe<Scalars['String']>;
  shortDescription_contains_i?: Maybe<Scalars['String']>;
  shortDescription_not_contains_i?: Maybe<Scalars['String']>;
  shortDescription_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer?: Maybe<Scalars['String']>;
  developer_not?: Maybe<Scalars['String']>;
  developer_contains?: Maybe<Scalars['String']>;
  developer_not_contains?: Maybe<Scalars['String']>;
  developer_starts_with?: Maybe<Scalars['String']>;
  developer_not_starts_with?: Maybe<Scalars['String']>;
  developer_ends_with?: Maybe<Scalars['String']>;
  developer_not_ends_with?: Maybe<Scalars['String']>;
  developer_i?: Maybe<Scalars['String']>;
  developer_not_i?: Maybe<Scalars['String']>;
  developer_contains_i?: Maybe<Scalars['String']>;
  developer_not_contains_i?: Maybe<Scalars['String']>;
  developer_starts_with_i?: Maybe<Scalars['String']>;
  developer_not_starts_with_i?: Maybe<Scalars['String']>;
  developer_ends_with_i?: Maybe<Scalars['String']>;
  developer_not_ends_with_i?: Maybe<Scalars['String']>;
  developer_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isHidden_not?: Maybe<Scalars['Boolean']>;
  colorSchema?: Maybe<AppColorSchemaFieldInput>;
  colorSchema_not?: Maybe<AppColorSchemaFieldInput>;
  colorSchema_in?: Maybe<Array<Maybe<AppColorSchemaFieldInput>>>;
  colorSchema_not_in?: Maybe<Array<Maybe<AppColorSchemaFieldInput>>>;
  currentBuild?: Maybe<B2CAppBuildWhereInput>;
  currentBuild_is_null?: Maybe<Scalars['Boolean']>;
  /**  condition must be true for all nodes  */
  accessRights_every?: Maybe<B2CAppAccessRightWhereInput>;
  /**  condition must be true for at least 1 node  */
  accessRights_some?: Maybe<B2CAppAccessRightWhereInput>;
  /**  condition must be false for all nodes  */
  accessRights_none?: Maybe<B2CAppAccessRightWhereInput>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type B2CAppWhereUniqueInput = {
  id: Scalars['ID'];
};

export type B2CAppsCreateInput = {
  data?: Maybe<B2CAppCreateInput>;
};

export type B2CAppsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppUpdateInput>;
};

/**  Bank account, that will have transactions, pulled from various integrated data sources  */
export type BankAccount = {
  __typename?: 'BankAccount';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankAccount List config, or
   *  2. As an alias to the field set on 'labelField' in the BankAccount List config, or
   *  3. As an alias to a 'name' field on the BankAccount List (if one exists), or
   *  4. As an alias to the 'id' field on the BankAccount List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Used data source to obtain transactions from  */
  integrationContext?: Maybe<BankIntegrationAccountContext>;
  /**  Property to which this bank account is connected  */
  property?: Maybe<Property>;
  /**  Tax Identification Number  */
  tin?: Maybe<Scalars['String']>;
  /**  Structured metadata found by tin  */
  tinMeta?: Maybe<Scalars['JSON']>;
  /**  Country where the bank is located  */
  country?: Maybe<BankAccountCountryType>;
  /**  The routing transit number for the bank account.  */
  routingNumber?: Maybe<Scalars['String']>;
  /**  Structured metadata found by routing number  */
  routingNumberMeta?: Maybe<Scalars['JSON']>;
  /**  Bank account number  */
  number?: Maybe<Scalars['String']>;
  /**  Code of currency in ISO-4217 format  */
  currencyCode?: Maybe<Scalars['String']>;
  /**  When the bank account received the status of approved  */
  approvedAt?: Maybe<Scalars['String']>;
  /**  Who set the approved status for the bank account  */
  approvedBy?: Maybe<User>;
  /**  Id of object in external service which represents current item. Mostly used for internal needs of integration services for matching our objects with theirs  */
  importId?: Maybe<Scalars['String']>;
  /**  Location of the holder of this bank account. It depends on a country. In Russia it is OKTMO  */
  territoryCode?: Maybe<Scalars['String']>;
  /**  Bank name  */
  bankName?: Maybe<Scalars['String']>;
  /**  Structured non-typed metadata, can be used by mini-apps or external services to store information  */
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export enum BankAccountCountryType {
  En = 'en',
  Ru = 'ru'
}

export type BankAccountCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  integrationContext?: Maybe<BankIntegrationAccountContextRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  tin?: Maybe<Scalars['String']>;
  tinMeta?: Maybe<Scalars['JSON']>;
  country?: Maybe<BankAccountCountryType>;
  routingNumber?: Maybe<Scalars['String']>;
  routingNumberMeta?: Maybe<Scalars['JSON']>;
  number?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  approvedAt?: Maybe<Scalars['String']>;
  approvedBy?: Maybe<UserRelateToOneInput>;
  importId?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankAccountHistoryRecord = {
  __typename?: 'BankAccountHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankAccountHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankAccountHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankAccountHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankAccountHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  integrationContext?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  tinMeta?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  routingNumberMeta?: Maybe<Scalars['JSON']>;
  number?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  approvedAt?: Maybe<Scalars['String']>;
  approvedBy?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankAccountHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankAccountHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  integrationContext?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  tinMeta?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  routingNumberMeta?: Maybe<Scalars['JSON']>;
  number?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  approvedAt?: Maybe<Scalars['String']>;
  approvedBy?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankAccountHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankAccountHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankAccountHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  integrationContext?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  tinMeta?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  routingNumberMeta?: Maybe<Scalars['JSON']>;
  number?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  approvedAt?: Maybe<Scalars['String']>;
  approvedBy?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankAccountHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankAccountHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankAccountHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankAccountHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integrationContext?: Maybe<Scalars['String']>;
  integrationContext_not?: Maybe<Scalars['String']>;
  integrationContext_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integrationContext_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin?: Maybe<Scalars['String']>;
  tin_not?: Maybe<Scalars['String']>;
  tin_contains?: Maybe<Scalars['String']>;
  tin_not_contains?: Maybe<Scalars['String']>;
  tin_starts_with?: Maybe<Scalars['String']>;
  tin_not_starts_with?: Maybe<Scalars['String']>;
  tin_ends_with?: Maybe<Scalars['String']>;
  tin_not_ends_with?: Maybe<Scalars['String']>;
  tin_i?: Maybe<Scalars['String']>;
  tin_not_i?: Maybe<Scalars['String']>;
  tin_contains_i?: Maybe<Scalars['String']>;
  tin_not_contains_i?: Maybe<Scalars['String']>;
  tin_starts_with_i?: Maybe<Scalars['String']>;
  tin_not_starts_with_i?: Maybe<Scalars['String']>;
  tin_ends_with_i?: Maybe<Scalars['String']>;
  tin_not_ends_with_i?: Maybe<Scalars['String']>;
  tin_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tinMeta?: Maybe<Scalars['JSON']>;
  tinMeta_not?: Maybe<Scalars['JSON']>;
  tinMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  tinMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  country?: Maybe<Scalars['String']>;
  country_not?: Maybe<Scalars['String']>;
  country_contains?: Maybe<Scalars['String']>;
  country_not_contains?: Maybe<Scalars['String']>;
  country_starts_with?: Maybe<Scalars['String']>;
  country_not_starts_with?: Maybe<Scalars['String']>;
  country_ends_with?: Maybe<Scalars['String']>;
  country_not_ends_with?: Maybe<Scalars['String']>;
  country_i?: Maybe<Scalars['String']>;
  country_not_i?: Maybe<Scalars['String']>;
  country_contains_i?: Maybe<Scalars['String']>;
  country_not_contains_i?: Maybe<Scalars['String']>;
  country_starts_with_i?: Maybe<Scalars['String']>;
  country_not_starts_with_i?: Maybe<Scalars['String']>;
  country_ends_with_i?: Maybe<Scalars['String']>;
  country_not_ends_with_i?: Maybe<Scalars['String']>;
  country_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  country_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  routingNumber?: Maybe<Scalars['String']>;
  routingNumber_not?: Maybe<Scalars['String']>;
  routingNumber_contains?: Maybe<Scalars['String']>;
  routingNumber_not_contains?: Maybe<Scalars['String']>;
  routingNumber_starts_with?: Maybe<Scalars['String']>;
  routingNumber_not_starts_with?: Maybe<Scalars['String']>;
  routingNumber_ends_with?: Maybe<Scalars['String']>;
  routingNumber_not_ends_with?: Maybe<Scalars['String']>;
  routingNumber_i?: Maybe<Scalars['String']>;
  routingNumber_not_i?: Maybe<Scalars['String']>;
  routingNumber_contains_i?: Maybe<Scalars['String']>;
  routingNumber_not_contains_i?: Maybe<Scalars['String']>;
  routingNumber_starts_with_i?: Maybe<Scalars['String']>;
  routingNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  routingNumber_ends_with_i?: Maybe<Scalars['String']>;
  routingNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  routingNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  routingNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  routingNumberMeta?: Maybe<Scalars['JSON']>;
  routingNumberMeta_not?: Maybe<Scalars['JSON']>;
  routingNumberMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  routingNumberMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  number?: Maybe<Scalars['String']>;
  number_not?: Maybe<Scalars['String']>;
  number_contains?: Maybe<Scalars['String']>;
  number_not_contains?: Maybe<Scalars['String']>;
  number_starts_with?: Maybe<Scalars['String']>;
  number_not_starts_with?: Maybe<Scalars['String']>;
  number_ends_with?: Maybe<Scalars['String']>;
  number_not_ends_with?: Maybe<Scalars['String']>;
  number_i?: Maybe<Scalars['String']>;
  number_not_i?: Maybe<Scalars['String']>;
  number_contains_i?: Maybe<Scalars['String']>;
  number_not_contains_i?: Maybe<Scalars['String']>;
  number_starts_with_i?: Maybe<Scalars['String']>;
  number_not_starts_with_i?: Maybe<Scalars['String']>;
  number_ends_with_i?: Maybe<Scalars['String']>;
  number_not_ends_with_i?: Maybe<Scalars['String']>;
  number_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_contains?: Maybe<Scalars['String']>;
  currencyCode_not_contains?: Maybe<Scalars['String']>;
  currencyCode_starts_with?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with?: Maybe<Scalars['String']>;
  currencyCode_ends_with?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with?: Maybe<Scalars['String']>;
  currencyCode_i?: Maybe<Scalars['String']>;
  currencyCode_not_i?: Maybe<Scalars['String']>;
  currencyCode_contains_i?: Maybe<Scalars['String']>;
  currencyCode_not_contains_i?: Maybe<Scalars['String']>;
  currencyCode_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedAt?: Maybe<Scalars['String']>;
  approvedAt_not?: Maybe<Scalars['String']>;
  approvedAt_lt?: Maybe<Scalars['String']>;
  approvedAt_lte?: Maybe<Scalars['String']>;
  approvedAt_gt?: Maybe<Scalars['String']>;
  approvedAt_gte?: Maybe<Scalars['String']>;
  approvedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedBy?: Maybe<Scalars['String']>;
  approvedBy_not?: Maybe<Scalars['String']>;
  approvedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode?: Maybe<Scalars['String']>;
  territoryCode_not?: Maybe<Scalars['String']>;
  territoryCode_contains?: Maybe<Scalars['String']>;
  territoryCode_not_contains?: Maybe<Scalars['String']>;
  territoryCode_starts_with?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with?: Maybe<Scalars['String']>;
  territoryCode_ends_with?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with?: Maybe<Scalars['String']>;
  territoryCode_i?: Maybe<Scalars['String']>;
  territoryCode_not_i?: Maybe<Scalars['String']>;
  territoryCode_contains_i?: Maybe<Scalars['String']>;
  territoryCode_not_contains_i?: Maybe<Scalars['String']>;
  territoryCode_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName?: Maybe<Scalars['String']>;
  bankName_not?: Maybe<Scalars['String']>;
  bankName_contains?: Maybe<Scalars['String']>;
  bankName_not_contains?: Maybe<Scalars['String']>;
  bankName_starts_with?: Maybe<Scalars['String']>;
  bankName_not_starts_with?: Maybe<Scalars['String']>;
  bankName_ends_with?: Maybe<Scalars['String']>;
  bankName_not_ends_with?: Maybe<Scalars['String']>;
  bankName_i?: Maybe<Scalars['String']>;
  bankName_not_i?: Maybe<Scalars['String']>;
  bankName_contains_i?: Maybe<Scalars['String']>;
  bankName_not_contains_i?: Maybe<Scalars['String']>;
  bankName_starts_with_i?: Maybe<Scalars['String']>;
  bankName_not_starts_with_i?: Maybe<Scalars['String']>;
  bankName_ends_with_i?: Maybe<Scalars['String']>;
  bankName_not_ends_with_i?: Maybe<Scalars['String']>;
  bankName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankAccountHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankAccountHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankAccountHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankAccountHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankAccountHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankAccountHistoryRecordsCreateInput = {
  data?: Maybe<BankAccountHistoryRecordCreateInput>;
};

export type BankAccountHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountHistoryRecordUpdateInput>;
};

export type BankAccountRelateToOneInput = {
  create?: Maybe<BankAccountCreateInput>;
  connect?: Maybe<BankAccountWhereUniqueInput>;
  disconnect?: Maybe<BankAccountWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

/**  Calculated data for financial report of specified form, period and version.  */
export type BankAccountReport = {
  __typename?: 'BankAccountReport';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankAccountReport List config, or
   *  2. As an alias to the field set on 'labelField' in the BankAccountReport List config, or
   *  3. As an alias to a 'name' field on the BankAccountReport List (if one exists), or
   *  4. As an alias to the 'id' field on the BankAccountReport List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Transactions of specified bank account will be used to calculate this report  */
  account?: Maybe<BankAccount>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  When manual changes in transactions covers specified period,   */
  version?: Maybe<Scalars['Int']>;
  /**  Form of this report  */
  template?: Maybe<BankAccountReportTemplateType>;
  /**  Specified time frame to calculate this report. Can be month, quarter, year. Has specified format  */
  period?: Maybe<Scalars['String']>;
  /**  Total amount for BankAccount on end of specified period of this report  */
  amount?: Maybe<Scalars['String']>;
  /**  Date on that the specified amount is actual  */
  amountAt?: Maybe<Scalars['String']>;
  /**  Report will be available for public view if this field will have a value, otherwise in case of null value this report will not be available for public view  */
  publishedAt?: Maybe<Scalars['String']>;
  /**  Total income amount over period of this report  */
  totalIncome?: Maybe<Scalars['String']>;
  /**  Total outcome amount over period of this report  */
  totalOutcome?: Maybe<Scalars['String']>;
  /**  Whether the report version is the latest  */
  isLatest?: Maybe<Scalars['Boolean']>;
  /**  Calculated data of this report, that will be used to display  */
  data?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BankAccountReportCreateInput = {
  account?: Maybe<BankAccountRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  version?: Maybe<Scalars['Int']>;
  template?: Maybe<BankAccountReportTemplateType>;
  period?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  amountAt?: Maybe<Scalars['String']>;
  publishedAt?: Maybe<Scalars['String']>;
  totalIncome?: Maybe<Scalars['String']>;
  totalOutcome?: Maybe<Scalars['String']>;
  isLatest?: Maybe<Scalars['Boolean']>;
  data?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankAccountReportHistoryRecord = {
  __typename?: 'BankAccountReportHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankAccountReportHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankAccountReportHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankAccountReportHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankAccountReportHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  account?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  amountAt?: Maybe<Scalars['String']>;
  publishedAt?: Maybe<Scalars['String']>;
  totalIncome?: Maybe<Scalars['String']>;
  totalOutcome?: Maybe<Scalars['String']>;
  isLatest?: Maybe<Scalars['Boolean']>;
  data?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankAccountReportHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankAccountReportHistoryRecordCreateInput = {
  account?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  amountAt?: Maybe<Scalars['String']>;
  publishedAt?: Maybe<Scalars['String']>;
  totalIncome?: Maybe<Scalars['String']>;
  totalOutcome?: Maybe<Scalars['String']>;
  isLatest?: Maybe<Scalars['Boolean']>;
  data?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankAccountReportHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankAccountReportHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankAccountReportHistoryRecordUpdateInput = {
  account?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  amountAt?: Maybe<Scalars['String']>;
  publishedAt?: Maybe<Scalars['String']>;
  totalIncome?: Maybe<Scalars['String']>;
  totalOutcome?: Maybe<Scalars['String']>;
  isLatest?: Maybe<Scalars['Boolean']>;
  data?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankAccountReportHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankAccountReportHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankAccountReportHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankAccountReportHistoryRecordWhereInput>>>;
  account?: Maybe<Scalars['String']>;
  account_not?: Maybe<Scalars['String']>;
  account_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  account_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  version?: Maybe<Scalars['Int']>;
  version_not?: Maybe<Scalars['Int']>;
  version_lt?: Maybe<Scalars['Int']>;
  version_lte?: Maybe<Scalars['Int']>;
  version_gt?: Maybe<Scalars['Int']>;
  version_gte?: Maybe<Scalars['Int']>;
  version_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  version_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  template?: Maybe<Scalars['String']>;
  template_not?: Maybe<Scalars['String']>;
  template_contains?: Maybe<Scalars['String']>;
  template_not_contains?: Maybe<Scalars['String']>;
  template_starts_with?: Maybe<Scalars['String']>;
  template_not_starts_with?: Maybe<Scalars['String']>;
  template_ends_with?: Maybe<Scalars['String']>;
  template_not_ends_with?: Maybe<Scalars['String']>;
  template_i?: Maybe<Scalars['String']>;
  template_not_i?: Maybe<Scalars['String']>;
  template_contains_i?: Maybe<Scalars['String']>;
  template_not_contains_i?: Maybe<Scalars['String']>;
  template_starts_with_i?: Maybe<Scalars['String']>;
  template_not_starts_with_i?: Maybe<Scalars['String']>;
  template_ends_with_i?: Maybe<Scalars['String']>;
  template_not_ends_with_i?: Maybe<Scalars['String']>;
  template_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  template_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  period?: Maybe<Scalars['String']>;
  period_not?: Maybe<Scalars['String']>;
  period_contains?: Maybe<Scalars['String']>;
  period_not_contains?: Maybe<Scalars['String']>;
  period_starts_with?: Maybe<Scalars['String']>;
  period_not_starts_with?: Maybe<Scalars['String']>;
  period_ends_with?: Maybe<Scalars['String']>;
  period_not_ends_with?: Maybe<Scalars['String']>;
  period_i?: Maybe<Scalars['String']>;
  period_not_i?: Maybe<Scalars['String']>;
  period_contains_i?: Maybe<Scalars['String']>;
  period_not_contains_i?: Maybe<Scalars['String']>;
  period_starts_with_i?: Maybe<Scalars['String']>;
  period_not_starts_with_i?: Maybe<Scalars['String']>;
  period_ends_with_i?: Maybe<Scalars['String']>;
  period_not_ends_with_i?: Maybe<Scalars['String']>;
  period_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  period_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amount?: Maybe<Scalars['String']>;
  amount_not?: Maybe<Scalars['String']>;
  amount_lt?: Maybe<Scalars['String']>;
  amount_lte?: Maybe<Scalars['String']>;
  amount_gt?: Maybe<Scalars['String']>;
  amount_gte?: Maybe<Scalars['String']>;
  amount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amountAt?: Maybe<Scalars['String']>;
  amountAt_not?: Maybe<Scalars['String']>;
  amountAt_lt?: Maybe<Scalars['String']>;
  amountAt_lte?: Maybe<Scalars['String']>;
  amountAt_gt?: Maybe<Scalars['String']>;
  amountAt_gte?: Maybe<Scalars['String']>;
  amountAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amountAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  publishedAt?: Maybe<Scalars['String']>;
  publishedAt_not?: Maybe<Scalars['String']>;
  publishedAt_lt?: Maybe<Scalars['String']>;
  publishedAt_lte?: Maybe<Scalars['String']>;
  publishedAt_gt?: Maybe<Scalars['String']>;
  publishedAt_gte?: Maybe<Scalars['String']>;
  publishedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  publishedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalIncome?: Maybe<Scalars['String']>;
  totalIncome_not?: Maybe<Scalars['String']>;
  totalIncome_lt?: Maybe<Scalars['String']>;
  totalIncome_lte?: Maybe<Scalars['String']>;
  totalIncome_gt?: Maybe<Scalars['String']>;
  totalIncome_gte?: Maybe<Scalars['String']>;
  totalIncome_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalIncome_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalOutcome?: Maybe<Scalars['String']>;
  totalOutcome_not?: Maybe<Scalars['String']>;
  totalOutcome_lt?: Maybe<Scalars['String']>;
  totalOutcome_lte?: Maybe<Scalars['String']>;
  totalOutcome_gt?: Maybe<Scalars['String']>;
  totalOutcome_gte?: Maybe<Scalars['String']>;
  totalOutcome_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalOutcome_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isLatest?: Maybe<Scalars['Boolean']>;
  isLatest_not?: Maybe<Scalars['Boolean']>;
  data?: Maybe<Scalars['JSON']>;
  data_not?: Maybe<Scalars['JSON']>;
  data_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  data_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankAccountReportHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankAccountReportHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankAccountReportHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankAccountReportHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankAccountReportHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankAccountReportHistoryRecordsCreateInput = {
  data?: Maybe<BankAccountReportHistoryRecordCreateInput>;
};

export type BankAccountReportHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountReportHistoryRecordUpdateInput>;
};

/**  Information about the report generation process  */
export type BankAccountReportTask = {
  __typename?: 'BankAccountReportTask';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankAccountReportTask List config, or
   *  2. As an alias to the field set on 'labelField' in the BankAccountReportTask List config, or
   *  3. As an alias to a 'name' field on the BankAccountReportTask List (if one exists), or
   *  4. As an alias to the 'id' field on the BankAccountReportTask List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Bank account for which the current report generation operation is running.  */
  account?: Maybe<BankAccount>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Status of current generation operation  */
  status?: Maybe<BankAccountReportTaskStatusType>;
  /**  Progress of current generation operation  */
  progress?: Maybe<Scalars['Int']>;
  /**  User that requested this operation. Will be used for read access checks to display all tasks somewhere and to display progress indicator of ongoing generating task for current user  */
  user?: Maybe<User>;
  /**  Additional data, specific to used integration  */
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BankAccountReportTaskCreateInput = {
  account?: Maybe<BankAccountRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  status?: Maybe<BankAccountReportTaskStatusType>;
  progress?: Maybe<Scalars['Int']>;
  user?: Maybe<UserRelateToOneInput>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankAccountReportTaskHistoryRecord = {
  __typename?: 'BankAccountReportTaskHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankAccountReportTaskHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankAccountReportTaskHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankAccountReportTaskHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankAccountReportTaskHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  account?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  progress?: Maybe<Scalars['Int']>;
  user?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankAccountReportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankAccountReportTaskHistoryRecordCreateInput = {
  account?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  progress?: Maybe<Scalars['Int']>;
  user?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankAccountReportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankAccountReportTaskHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankAccountReportTaskHistoryRecordUpdateInput = {
  account?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  progress?: Maybe<Scalars['Int']>;
  user?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankAccountReportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankAccountReportTaskHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankAccountReportTaskHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankAccountReportTaskHistoryRecordWhereInput>>>;
  account?: Maybe<Scalars['String']>;
  account_not?: Maybe<Scalars['String']>;
  account_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  account_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  progress?: Maybe<Scalars['Int']>;
  progress_not?: Maybe<Scalars['Int']>;
  progress_lt?: Maybe<Scalars['Int']>;
  progress_lte?: Maybe<Scalars['Int']>;
  progress_gt?: Maybe<Scalars['Int']>;
  progress_gte?: Maybe<Scalars['Int']>;
  progress_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  progress_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankAccountReportTaskHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankAccountReportTaskHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankAccountReportTaskHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankAccountReportTaskHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankAccountReportTaskHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankAccountReportTaskHistoryRecordsCreateInput = {
  data?: Maybe<BankAccountReportTaskHistoryRecordCreateInput>;
};

export type BankAccountReportTaskHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountReportTaskHistoryRecordUpdateInput>;
};

export enum BankAccountReportTaskStatusType {
  Processing = 'processing',
  Completed = 'completed',
  Error = 'error',
  Cancelled = 'cancelled'
}

export type BankAccountReportTaskUpdateInput = {
  account?: Maybe<BankAccountRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  status?: Maybe<BankAccountReportTaskStatusType>;
  progress?: Maybe<Scalars['Int']>;
  user?: Maybe<UserRelateToOneInput>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankAccountReportTaskWhereInput = {
  AND?: Maybe<Array<Maybe<BankAccountReportTaskWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankAccountReportTaskWhereInput>>>;
  account?: Maybe<BankAccountWhereInput>;
  account_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  status?: Maybe<BankAccountReportTaskStatusType>;
  status_not?: Maybe<BankAccountReportTaskStatusType>;
  status_in?: Maybe<Array<Maybe<BankAccountReportTaskStatusType>>>;
  status_not_in?: Maybe<Array<Maybe<BankAccountReportTaskStatusType>>>;
  progress?: Maybe<Scalars['Int']>;
  progress_not?: Maybe<Scalars['Int']>;
  progress_lt?: Maybe<Scalars['Int']>;
  progress_lte?: Maybe<Scalars['Int']>;
  progress_gt?: Maybe<Scalars['Int']>;
  progress_gte?: Maybe<Scalars['Int']>;
  progress_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  progress_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankAccountReportTaskWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankAccountReportTasksCreateInput = {
  data?: Maybe<BankAccountReportTaskCreateInput>;
};

export type BankAccountReportTasksUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountReportTaskUpdateInput>;
};

export enum BankAccountReportTemplateType {
  ExpensesGroupedByCategoryAndCostItem = 'expenses_grouped_by_category_and_cost_item'
}

export type BankAccountReportUpdateInput = {
  account?: Maybe<BankAccountRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  version?: Maybe<Scalars['Int']>;
  template?: Maybe<BankAccountReportTemplateType>;
  period?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  amountAt?: Maybe<Scalars['String']>;
  publishedAt?: Maybe<Scalars['String']>;
  totalIncome?: Maybe<Scalars['String']>;
  totalOutcome?: Maybe<Scalars['String']>;
  isLatest?: Maybe<Scalars['Boolean']>;
  data?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankAccountReportWhereInput = {
  AND?: Maybe<Array<Maybe<BankAccountReportWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankAccountReportWhereInput>>>;
  account?: Maybe<BankAccountWhereInput>;
  account_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  version?: Maybe<Scalars['Int']>;
  version_not?: Maybe<Scalars['Int']>;
  version_lt?: Maybe<Scalars['Int']>;
  version_lte?: Maybe<Scalars['Int']>;
  version_gt?: Maybe<Scalars['Int']>;
  version_gte?: Maybe<Scalars['Int']>;
  version_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  version_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  template?: Maybe<BankAccountReportTemplateType>;
  template_not?: Maybe<BankAccountReportTemplateType>;
  template_in?: Maybe<Array<Maybe<BankAccountReportTemplateType>>>;
  template_not_in?: Maybe<Array<Maybe<BankAccountReportTemplateType>>>;
  period?: Maybe<Scalars['String']>;
  period_not?: Maybe<Scalars['String']>;
  period_contains?: Maybe<Scalars['String']>;
  period_not_contains?: Maybe<Scalars['String']>;
  period_starts_with?: Maybe<Scalars['String']>;
  period_not_starts_with?: Maybe<Scalars['String']>;
  period_ends_with?: Maybe<Scalars['String']>;
  period_not_ends_with?: Maybe<Scalars['String']>;
  period_i?: Maybe<Scalars['String']>;
  period_not_i?: Maybe<Scalars['String']>;
  period_contains_i?: Maybe<Scalars['String']>;
  period_not_contains_i?: Maybe<Scalars['String']>;
  period_starts_with_i?: Maybe<Scalars['String']>;
  period_not_starts_with_i?: Maybe<Scalars['String']>;
  period_ends_with_i?: Maybe<Scalars['String']>;
  period_not_ends_with_i?: Maybe<Scalars['String']>;
  period_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  period_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amount?: Maybe<Scalars['String']>;
  amount_not?: Maybe<Scalars['String']>;
  amount_lt?: Maybe<Scalars['String']>;
  amount_lte?: Maybe<Scalars['String']>;
  amount_gt?: Maybe<Scalars['String']>;
  amount_gte?: Maybe<Scalars['String']>;
  amount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amountAt?: Maybe<Scalars['String']>;
  amountAt_not?: Maybe<Scalars['String']>;
  amountAt_lt?: Maybe<Scalars['String']>;
  amountAt_lte?: Maybe<Scalars['String']>;
  amountAt_gt?: Maybe<Scalars['String']>;
  amountAt_gte?: Maybe<Scalars['String']>;
  amountAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amountAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  publishedAt?: Maybe<Scalars['String']>;
  publishedAt_not?: Maybe<Scalars['String']>;
  publishedAt_lt?: Maybe<Scalars['String']>;
  publishedAt_lte?: Maybe<Scalars['String']>;
  publishedAt_gt?: Maybe<Scalars['String']>;
  publishedAt_gte?: Maybe<Scalars['String']>;
  publishedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  publishedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalIncome?: Maybe<Scalars['String']>;
  totalIncome_not?: Maybe<Scalars['String']>;
  totalIncome_lt?: Maybe<Scalars['String']>;
  totalIncome_lte?: Maybe<Scalars['String']>;
  totalIncome_gt?: Maybe<Scalars['String']>;
  totalIncome_gte?: Maybe<Scalars['String']>;
  totalIncome_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalIncome_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalOutcome?: Maybe<Scalars['String']>;
  totalOutcome_not?: Maybe<Scalars['String']>;
  totalOutcome_lt?: Maybe<Scalars['String']>;
  totalOutcome_lte?: Maybe<Scalars['String']>;
  totalOutcome_gt?: Maybe<Scalars['String']>;
  totalOutcome_gte?: Maybe<Scalars['String']>;
  totalOutcome_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalOutcome_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isLatest?: Maybe<Scalars['Boolean']>;
  isLatest_not?: Maybe<Scalars['Boolean']>;
  data?: Maybe<Scalars['JSON']>;
  data_not?: Maybe<Scalars['JSON']>;
  data_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  data_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankAccountReportWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankAccountReportsCreateInput = {
  data?: Maybe<BankAccountReportCreateInput>;
};

export type BankAccountReportsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountReportUpdateInput>;
};

export type BankAccountUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  integrationContext?: Maybe<BankIntegrationAccountContextRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  tin?: Maybe<Scalars['String']>;
  tinMeta?: Maybe<Scalars['JSON']>;
  country?: Maybe<BankAccountCountryType>;
  routingNumber?: Maybe<Scalars['String']>;
  routingNumberMeta?: Maybe<Scalars['JSON']>;
  number?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  approvedAt?: Maybe<Scalars['String']>;
  approvedBy?: Maybe<UserRelateToOneInput>;
  importId?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankAccountWhereInput = {
  AND?: Maybe<Array<Maybe<BankAccountWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankAccountWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  integrationContext?: Maybe<BankIntegrationAccountContextWhereInput>;
  integrationContext_is_null?: Maybe<Scalars['Boolean']>;
  property?: Maybe<PropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  tin?: Maybe<Scalars['String']>;
  tin_not?: Maybe<Scalars['String']>;
  tin_contains?: Maybe<Scalars['String']>;
  tin_not_contains?: Maybe<Scalars['String']>;
  tin_starts_with?: Maybe<Scalars['String']>;
  tin_not_starts_with?: Maybe<Scalars['String']>;
  tin_ends_with?: Maybe<Scalars['String']>;
  tin_not_ends_with?: Maybe<Scalars['String']>;
  tin_i?: Maybe<Scalars['String']>;
  tin_not_i?: Maybe<Scalars['String']>;
  tin_contains_i?: Maybe<Scalars['String']>;
  tin_not_contains_i?: Maybe<Scalars['String']>;
  tin_starts_with_i?: Maybe<Scalars['String']>;
  tin_not_starts_with_i?: Maybe<Scalars['String']>;
  tin_ends_with_i?: Maybe<Scalars['String']>;
  tin_not_ends_with_i?: Maybe<Scalars['String']>;
  tin_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tinMeta?: Maybe<Scalars['JSON']>;
  tinMeta_not?: Maybe<Scalars['JSON']>;
  tinMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  tinMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  country?: Maybe<BankAccountCountryType>;
  country_not?: Maybe<BankAccountCountryType>;
  country_in?: Maybe<Array<Maybe<BankAccountCountryType>>>;
  country_not_in?: Maybe<Array<Maybe<BankAccountCountryType>>>;
  routingNumber?: Maybe<Scalars['String']>;
  routingNumber_not?: Maybe<Scalars['String']>;
  routingNumber_contains?: Maybe<Scalars['String']>;
  routingNumber_not_contains?: Maybe<Scalars['String']>;
  routingNumber_starts_with?: Maybe<Scalars['String']>;
  routingNumber_not_starts_with?: Maybe<Scalars['String']>;
  routingNumber_ends_with?: Maybe<Scalars['String']>;
  routingNumber_not_ends_with?: Maybe<Scalars['String']>;
  routingNumber_i?: Maybe<Scalars['String']>;
  routingNumber_not_i?: Maybe<Scalars['String']>;
  routingNumber_contains_i?: Maybe<Scalars['String']>;
  routingNumber_not_contains_i?: Maybe<Scalars['String']>;
  routingNumber_starts_with_i?: Maybe<Scalars['String']>;
  routingNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  routingNumber_ends_with_i?: Maybe<Scalars['String']>;
  routingNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  routingNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  routingNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  routingNumberMeta?: Maybe<Scalars['JSON']>;
  routingNumberMeta_not?: Maybe<Scalars['JSON']>;
  routingNumberMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  routingNumberMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  number?: Maybe<Scalars['String']>;
  number_not?: Maybe<Scalars['String']>;
  number_contains?: Maybe<Scalars['String']>;
  number_not_contains?: Maybe<Scalars['String']>;
  number_starts_with?: Maybe<Scalars['String']>;
  number_not_starts_with?: Maybe<Scalars['String']>;
  number_ends_with?: Maybe<Scalars['String']>;
  number_not_ends_with?: Maybe<Scalars['String']>;
  number_i?: Maybe<Scalars['String']>;
  number_not_i?: Maybe<Scalars['String']>;
  number_contains_i?: Maybe<Scalars['String']>;
  number_not_contains_i?: Maybe<Scalars['String']>;
  number_starts_with_i?: Maybe<Scalars['String']>;
  number_not_starts_with_i?: Maybe<Scalars['String']>;
  number_ends_with_i?: Maybe<Scalars['String']>;
  number_not_ends_with_i?: Maybe<Scalars['String']>;
  number_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedAt?: Maybe<Scalars['String']>;
  approvedAt_not?: Maybe<Scalars['String']>;
  approvedAt_lt?: Maybe<Scalars['String']>;
  approvedAt_lte?: Maybe<Scalars['String']>;
  approvedAt_gt?: Maybe<Scalars['String']>;
  approvedAt_gte?: Maybe<Scalars['String']>;
  approvedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedBy?: Maybe<UserWhereInput>;
  approvedBy_is_null?: Maybe<Scalars['Boolean']>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode?: Maybe<Scalars['String']>;
  territoryCode_not?: Maybe<Scalars['String']>;
  territoryCode_contains?: Maybe<Scalars['String']>;
  territoryCode_not_contains?: Maybe<Scalars['String']>;
  territoryCode_starts_with?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with?: Maybe<Scalars['String']>;
  territoryCode_ends_with?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with?: Maybe<Scalars['String']>;
  territoryCode_i?: Maybe<Scalars['String']>;
  territoryCode_not_i?: Maybe<Scalars['String']>;
  territoryCode_contains_i?: Maybe<Scalars['String']>;
  territoryCode_not_contains_i?: Maybe<Scalars['String']>;
  territoryCode_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName?: Maybe<Scalars['String']>;
  bankName_not?: Maybe<Scalars['String']>;
  bankName_contains?: Maybe<Scalars['String']>;
  bankName_not_contains?: Maybe<Scalars['String']>;
  bankName_starts_with?: Maybe<Scalars['String']>;
  bankName_not_starts_with?: Maybe<Scalars['String']>;
  bankName_ends_with?: Maybe<Scalars['String']>;
  bankName_not_ends_with?: Maybe<Scalars['String']>;
  bankName_i?: Maybe<Scalars['String']>;
  bankName_not_i?: Maybe<Scalars['String']>;
  bankName_contains_i?: Maybe<Scalars['String']>;
  bankName_not_contains_i?: Maybe<Scalars['String']>;
  bankName_starts_with_i?: Maybe<Scalars['String']>;
  bankName_not_starts_with_i?: Maybe<Scalars['String']>;
  bankName_ends_with_i?: Maybe<Scalars['String']>;
  bankName_not_ends_with_i?: Maybe<Scalars['String']>;
  bankName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankAccountWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankAccountsCreateInput = {
  data?: Maybe<BankAccountCreateInput>;
};

export type BankAccountsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountUpdateInput>;
};

export type BankCategoriesCreateInput = {
  data?: Maybe<BankCategoryCreateInput>;
};

export type BankCategoriesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankCategoryUpdateInput>;
};

/**  Expenses category, that will be associated with transactions and contractors  */
export type BankCategory = {
  __typename?: 'BankCategory';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankCategory List config, or
   *  2. As an alias to the field set on 'labelField' in the BankCategory List config, or
   *  3. As an alias to a 'name' field on the BankCategory List (if one exists), or
   *  4. As an alias to the 'id' field on the BankCategory List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Key for i18n  */
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BankCategoryCreateInput = {
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankCategoryHistoryRecord = {
  __typename?: 'BankCategoryHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankCategoryHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankCategoryHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankCategoryHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankCategoryHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankCategoryHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankCategoryHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankCategoryHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankCategoryHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankCategoryHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankCategoryHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankCategoryHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankCategoryHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankCategoryHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankCategoryHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankCategoryHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankCategoryHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankCategoryHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankCategoryHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankCategoryHistoryRecordsCreateInput = {
  data?: Maybe<BankCategoryHistoryRecordCreateInput>;
};

export type BankCategoryHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankCategoryHistoryRecordUpdateInput>;
};

export type BankCategoryRelateToOneInput = {
  create?: Maybe<BankCategoryCreateInput>;
  connect?: Maybe<BankCategoryWhereUniqueInput>;
  disconnect?: Maybe<BankCategoryWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BankCategoryUpdateInput = {
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankCategoryWhereInput = {
  AND?: Maybe<Array<Maybe<BankCategoryWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankCategoryWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankCategoryWhereUniqueInput = {
  id: Scalars['ID'];
};

/**  Account for external contractor, which organization is not stored in condo. Contractor is related to expenses transactions of an Organization. Will be obtained from export files with bank transactions or from banking API  */
export type BankContractorAccount = {
  __typename?: 'BankContractorAccount';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankContractorAccount List config, or
   *  2. As an alias to the field set on 'labelField' in the BankContractorAccount List config, or
   *  3. As an alias to a 'name' field on the BankContractorAccount List (if one exists), or
   *  4. As an alias to the 'id' field on the BankContractorAccount List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Name of contractor organization  */
  name?: Maybe<Scalars['String']>;
  /**  Technical link to property management organization, that has expenses transactions with this contractor. Used for access rights and cascade behaviour of data. Contractor organization is not stored in condo. The object will be deleted if the related organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Related cost item, that will determine cost items for transactions belonging to this contractor  */
  costItem?: Maybe<BankCostItem>;
  /**  Tax Identification Number  */
  tin?: Maybe<Scalars['String']>;
  /**  Country where the bank is located  */
  country?: Maybe<Scalars['String']>;
  /**  The routing transit number for the bank account.  */
  routingNumber?: Maybe<Scalars['String']>;
  /**  Bank account number  */
  number?: Maybe<Scalars['String']>;
  /**  Code of currency in ISO-4217 format  */
  currencyCode?: Maybe<Scalars['String']>;
  /**  Id of object in external service which represents current item. Mostly used for internal needs of integration services for matching our objects with theirs  */
  importId?: Maybe<Scalars['String']>;
  /**  Location of the holder of this bank account. It depends on a country. In Russia it is OKTMO  */
  territoryCode?: Maybe<Scalars['String']>;
  /**  Name of bank  */
  bankName?: Maybe<Scalars['String']>;
  /**  Structured non-typed metadata, can be used by mini-apps or external services to store information  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Number of related transactions without costItem for this contractor account  */
  relatedTransactions?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BankContractorAccountCreateInput = {
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  costItem?: Maybe<BankCostItemRelateToOneInput>;
  tin?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankContractorAccountHistoryRecord = {
  __typename?: 'BankContractorAccountHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankContractorAccountHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankContractorAccountHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankContractorAccountHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankContractorAccountHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  costItem?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  relatedTransactions?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankContractorAccountHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankContractorAccountHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  costItem?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  relatedTransactions?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankContractorAccountHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankContractorAccountHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankContractorAccountHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  costItem?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  relatedTransactions?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankContractorAccountHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankContractorAccountHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankContractorAccountHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankContractorAccountHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  costItem?: Maybe<Scalars['String']>;
  costItem_not?: Maybe<Scalars['String']>;
  costItem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  costItem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin?: Maybe<Scalars['String']>;
  tin_not?: Maybe<Scalars['String']>;
  tin_contains?: Maybe<Scalars['String']>;
  tin_not_contains?: Maybe<Scalars['String']>;
  tin_starts_with?: Maybe<Scalars['String']>;
  tin_not_starts_with?: Maybe<Scalars['String']>;
  tin_ends_with?: Maybe<Scalars['String']>;
  tin_not_ends_with?: Maybe<Scalars['String']>;
  tin_i?: Maybe<Scalars['String']>;
  tin_not_i?: Maybe<Scalars['String']>;
  tin_contains_i?: Maybe<Scalars['String']>;
  tin_not_contains_i?: Maybe<Scalars['String']>;
  tin_starts_with_i?: Maybe<Scalars['String']>;
  tin_not_starts_with_i?: Maybe<Scalars['String']>;
  tin_ends_with_i?: Maybe<Scalars['String']>;
  tin_not_ends_with_i?: Maybe<Scalars['String']>;
  tin_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  country?: Maybe<Scalars['String']>;
  country_not?: Maybe<Scalars['String']>;
  country_contains?: Maybe<Scalars['String']>;
  country_not_contains?: Maybe<Scalars['String']>;
  country_starts_with?: Maybe<Scalars['String']>;
  country_not_starts_with?: Maybe<Scalars['String']>;
  country_ends_with?: Maybe<Scalars['String']>;
  country_not_ends_with?: Maybe<Scalars['String']>;
  country_i?: Maybe<Scalars['String']>;
  country_not_i?: Maybe<Scalars['String']>;
  country_contains_i?: Maybe<Scalars['String']>;
  country_not_contains_i?: Maybe<Scalars['String']>;
  country_starts_with_i?: Maybe<Scalars['String']>;
  country_not_starts_with_i?: Maybe<Scalars['String']>;
  country_ends_with_i?: Maybe<Scalars['String']>;
  country_not_ends_with_i?: Maybe<Scalars['String']>;
  country_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  country_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  routingNumber?: Maybe<Scalars['String']>;
  routingNumber_not?: Maybe<Scalars['String']>;
  routingNumber_contains?: Maybe<Scalars['String']>;
  routingNumber_not_contains?: Maybe<Scalars['String']>;
  routingNumber_starts_with?: Maybe<Scalars['String']>;
  routingNumber_not_starts_with?: Maybe<Scalars['String']>;
  routingNumber_ends_with?: Maybe<Scalars['String']>;
  routingNumber_not_ends_with?: Maybe<Scalars['String']>;
  routingNumber_i?: Maybe<Scalars['String']>;
  routingNumber_not_i?: Maybe<Scalars['String']>;
  routingNumber_contains_i?: Maybe<Scalars['String']>;
  routingNumber_not_contains_i?: Maybe<Scalars['String']>;
  routingNumber_starts_with_i?: Maybe<Scalars['String']>;
  routingNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  routingNumber_ends_with_i?: Maybe<Scalars['String']>;
  routingNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  routingNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  routingNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number?: Maybe<Scalars['String']>;
  number_not?: Maybe<Scalars['String']>;
  number_contains?: Maybe<Scalars['String']>;
  number_not_contains?: Maybe<Scalars['String']>;
  number_starts_with?: Maybe<Scalars['String']>;
  number_not_starts_with?: Maybe<Scalars['String']>;
  number_ends_with?: Maybe<Scalars['String']>;
  number_not_ends_with?: Maybe<Scalars['String']>;
  number_i?: Maybe<Scalars['String']>;
  number_not_i?: Maybe<Scalars['String']>;
  number_contains_i?: Maybe<Scalars['String']>;
  number_not_contains_i?: Maybe<Scalars['String']>;
  number_starts_with_i?: Maybe<Scalars['String']>;
  number_not_starts_with_i?: Maybe<Scalars['String']>;
  number_ends_with_i?: Maybe<Scalars['String']>;
  number_not_ends_with_i?: Maybe<Scalars['String']>;
  number_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_contains?: Maybe<Scalars['String']>;
  currencyCode_not_contains?: Maybe<Scalars['String']>;
  currencyCode_starts_with?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with?: Maybe<Scalars['String']>;
  currencyCode_ends_with?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with?: Maybe<Scalars['String']>;
  currencyCode_i?: Maybe<Scalars['String']>;
  currencyCode_not_i?: Maybe<Scalars['String']>;
  currencyCode_contains_i?: Maybe<Scalars['String']>;
  currencyCode_not_contains_i?: Maybe<Scalars['String']>;
  currencyCode_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode?: Maybe<Scalars['String']>;
  territoryCode_not?: Maybe<Scalars['String']>;
  territoryCode_contains?: Maybe<Scalars['String']>;
  territoryCode_not_contains?: Maybe<Scalars['String']>;
  territoryCode_starts_with?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with?: Maybe<Scalars['String']>;
  territoryCode_ends_with?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with?: Maybe<Scalars['String']>;
  territoryCode_i?: Maybe<Scalars['String']>;
  territoryCode_not_i?: Maybe<Scalars['String']>;
  territoryCode_contains_i?: Maybe<Scalars['String']>;
  territoryCode_not_contains_i?: Maybe<Scalars['String']>;
  territoryCode_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName?: Maybe<Scalars['String']>;
  bankName_not?: Maybe<Scalars['String']>;
  bankName_contains?: Maybe<Scalars['String']>;
  bankName_not_contains?: Maybe<Scalars['String']>;
  bankName_starts_with?: Maybe<Scalars['String']>;
  bankName_not_starts_with?: Maybe<Scalars['String']>;
  bankName_ends_with?: Maybe<Scalars['String']>;
  bankName_not_ends_with?: Maybe<Scalars['String']>;
  bankName_i?: Maybe<Scalars['String']>;
  bankName_not_i?: Maybe<Scalars['String']>;
  bankName_contains_i?: Maybe<Scalars['String']>;
  bankName_not_contains_i?: Maybe<Scalars['String']>;
  bankName_starts_with_i?: Maybe<Scalars['String']>;
  bankName_not_starts_with_i?: Maybe<Scalars['String']>;
  bankName_ends_with_i?: Maybe<Scalars['String']>;
  bankName_not_ends_with_i?: Maybe<Scalars['String']>;
  bankName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  relatedTransactions?: Maybe<Scalars['JSON']>;
  relatedTransactions_not?: Maybe<Scalars['JSON']>;
  relatedTransactions_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  relatedTransactions_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankContractorAccountHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankContractorAccountHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankContractorAccountHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankContractorAccountHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankContractorAccountHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankContractorAccountHistoryRecordsCreateInput = {
  data?: Maybe<BankContractorAccountHistoryRecordCreateInput>;
};

export type BankContractorAccountHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankContractorAccountHistoryRecordUpdateInput>;
};

export type BankContractorAccountRelateToOneInput = {
  create?: Maybe<BankContractorAccountCreateInput>;
  connect?: Maybe<BankContractorAccountWhereUniqueInput>;
  disconnect?: Maybe<BankContractorAccountWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BankContractorAccountUpdateInput = {
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  costItem?: Maybe<BankCostItemRelateToOneInput>;
  tin?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankContractorAccountWhereInput = {
  AND?: Maybe<Array<Maybe<BankContractorAccountWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankContractorAccountWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  costItem?: Maybe<BankCostItemWhereInput>;
  costItem_is_null?: Maybe<Scalars['Boolean']>;
  tin?: Maybe<Scalars['String']>;
  tin_not?: Maybe<Scalars['String']>;
  tin_contains?: Maybe<Scalars['String']>;
  tin_not_contains?: Maybe<Scalars['String']>;
  tin_starts_with?: Maybe<Scalars['String']>;
  tin_not_starts_with?: Maybe<Scalars['String']>;
  tin_ends_with?: Maybe<Scalars['String']>;
  tin_not_ends_with?: Maybe<Scalars['String']>;
  tin_i?: Maybe<Scalars['String']>;
  tin_not_i?: Maybe<Scalars['String']>;
  tin_contains_i?: Maybe<Scalars['String']>;
  tin_not_contains_i?: Maybe<Scalars['String']>;
  tin_starts_with_i?: Maybe<Scalars['String']>;
  tin_not_starts_with_i?: Maybe<Scalars['String']>;
  tin_ends_with_i?: Maybe<Scalars['String']>;
  tin_not_ends_with_i?: Maybe<Scalars['String']>;
  tin_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  country?: Maybe<Scalars['String']>;
  country_not?: Maybe<Scalars['String']>;
  country_contains?: Maybe<Scalars['String']>;
  country_not_contains?: Maybe<Scalars['String']>;
  country_starts_with?: Maybe<Scalars['String']>;
  country_not_starts_with?: Maybe<Scalars['String']>;
  country_ends_with?: Maybe<Scalars['String']>;
  country_not_ends_with?: Maybe<Scalars['String']>;
  country_i?: Maybe<Scalars['String']>;
  country_not_i?: Maybe<Scalars['String']>;
  country_contains_i?: Maybe<Scalars['String']>;
  country_not_contains_i?: Maybe<Scalars['String']>;
  country_starts_with_i?: Maybe<Scalars['String']>;
  country_not_starts_with_i?: Maybe<Scalars['String']>;
  country_ends_with_i?: Maybe<Scalars['String']>;
  country_not_ends_with_i?: Maybe<Scalars['String']>;
  country_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  country_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  routingNumber?: Maybe<Scalars['String']>;
  routingNumber_not?: Maybe<Scalars['String']>;
  routingNumber_contains?: Maybe<Scalars['String']>;
  routingNumber_not_contains?: Maybe<Scalars['String']>;
  routingNumber_starts_with?: Maybe<Scalars['String']>;
  routingNumber_not_starts_with?: Maybe<Scalars['String']>;
  routingNumber_ends_with?: Maybe<Scalars['String']>;
  routingNumber_not_ends_with?: Maybe<Scalars['String']>;
  routingNumber_i?: Maybe<Scalars['String']>;
  routingNumber_not_i?: Maybe<Scalars['String']>;
  routingNumber_contains_i?: Maybe<Scalars['String']>;
  routingNumber_not_contains_i?: Maybe<Scalars['String']>;
  routingNumber_starts_with_i?: Maybe<Scalars['String']>;
  routingNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  routingNumber_ends_with_i?: Maybe<Scalars['String']>;
  routingNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  routingNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  routingNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number?: Maybe<Scalars['String']>;
  number_not?: Maybe<Scalars['String']>;
  number_contains?: Maybe<Scalars['String']>;
  number_not_contains?: Maybe<Scalars['String']>;
  number_starts_with?: Maybe<Scalars['String']>;
  number_not_starts_with?: Maybe<Scalars['String']>;
  number_ends_with?: Maybe<Scalars['String']>;
  number_not_ends_with?: Maybe<Scalars['String']>;
  number_i?: Maybe<Scalars['String']>;
  number_not_i?: Maybe<Scalars['String']>;
  number_contains_i?: Maybe<Scalars['String']>;
  number_not_contains_i?: Maybe<Scalars['String']>;
  number_starts_with_i?: Maybe<Scalars['String']>;
  number_not_starts_with_i?: Maybe<Scalars['String']>;
  number_ends_with_i?: Maybe<Scalars['String']>;
  number_not_ends_with_i?: Maybe<Scalars['String']>;
  number_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode?: Maybe<Scalars['String']>;
  territoryCode_not?: Maybe<Scalars['String']>;
  territoryCode_contains?: Maybe<Scalars['String']>;
  territoryCode_not_contains?: Maybe<Scalars['String']>;
  territoryCode_starts_with?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with?: Maybe<Scalars['String']>;
  territoryCode_ends_with?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with?: Maybe<Scalars['String']>;
  territoryCode_i?: Maybe<Scalars['String']>;
  territoryCode_not_i?: Maybe<Scalars['String']>;
  territoryCode_contains_i?: Maybe<Scalars['String']>;
  territoryCode_not_contains_i?: Maybe<Scalars['String']>;
  territoryCode_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName?: Maybe<Scalars['String']>;
  bankName_not?: Maybe<Scalars['String']>;
  bankName_contains?: Maybe<Scalars['String']>;
  bankName_not_contains?: Maybe<Scalars['String']>;
  bankName_starts_with?: Maybe<Scalars['String']>;
  bankName_not_starts_with?: Maybe<Scalars['String']>;
  bankName_ends_with?: Maybe<Scalars['String']>;
  bankName_not_ends_with?: Maybe<Scalars['String']>;
  bankName_i?: Maybe<Scalars['String']>;
  bankName_not_i?: Maybe<Scalars['String']>;
  bankName_contains_i?: Maybe<Scalars['String']>;
  bankName_not_contains_i?: Maybe<Scalars['String']>;
  bankName_starts_with_i?: Maybe<Scalars['String']>;
  bankName_not_starts_with_i?: Maybe<Scalars['String']>;
  bankName_ends_with_i?: Maybe<Scalars['String']>;
  bankName_not_ends_with_i?: Maybe<Scalars['String']>;
  bankName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankContractorAccountWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankContractorAccountsCreateInput = {
  data?: Maybe<BankContractorAccountCreateInput>;
};

export type BankContractorAccountsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankContractorAccountUpdateInput>;
};

/**  Expenses classification item for BankTransaction. Will be determined by automatic classification feature for each transaction  */
export type BankCostItem = {
  __typename?: 'BankCostItem';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankCostItem List config, or
   *  2. As an alias to the field set on 'labelField' in the BankCostItem List config, or
   *  3. As an alias to a 'name' field on the BankCostItem List (if one exists), or
   *  4. As an alias to the 'id' field on the BankCostItem List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Name of expenses item as key for i18n  */
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  /**  Indicator of cost item, corresponding to outcome transactions. Outcome-related cost item cannot be assigned to income-transaction  */
  isOutcome?: Maybe<Scalars['Boolean']>;
  /**  Used only for grouping to display in UI. Does not used in automatic classification feature  */
  category?: Maybe<BankCategory>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BankCostItemCreateInput = {
  name?: Maybe<Scalars['String']>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BankCategoryRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankCostItemHistoryRecord = {
  __typename?: 'BankCostItemHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankCostItemHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankCostItemHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankCostItemHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankCostItemHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  category?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankCostItemHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankCostItemHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  category?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankCostItemHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankCostItemHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankCostItemHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  category?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankCostItemHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankCostItemHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankCostItemHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankCostItemHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  isOutcome_not?: Maybe<Scalars['Boolean']>;
  category?: Maybe<Scalars['String']>;
  category_not?: Maybe<Scalars['String']>;
  category_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankCostItemHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankCostItemHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankCostItemHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankCostItemHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankCostItemHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankCostItemHistoryRecordsCreateInput = {
  data?: Maybe<BankCostItemHistoryRecordCreateInput>;
};

export type BankCostItemHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankCostItemHistoryRecordUpdateInput>;
};

export type BankCostItemRelateToOneInput = {
  create?: Maybe<BankCostItemCreateInput>;
  connect?: Maybe<BankCostItemWhereUniqueInput>;
  disconnect?: Maybe<BankCostItemWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BankCostItemUpdateInput = {
  name?: Maybe<Scalars['String']>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BankCategoryRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankCostItemWhereInput = {
  AND?: Maybe<Array<Maybe<BankCostItemWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankCostItemWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  isOutcome_not?: Maybe<Scalars['Boolean']>;
  category?: Maybe<BankCategoryWhereInput>;
  category_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankCostItemWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankCostItemsCreateInput = {
  data?: Maybe<BankCostItemCreateInput>;
};

export type BankCostItemsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankCostItemUpdateInput>;
};

/**  Determines way of obtaining banking data  */
export type BankIntegration = {
  __typename?: 'BankIntegration';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankIntegration List config, or
   *  2. As an alias to the field set on 'labelField' in the BankIntegration List config, or
   *  3. As an alias to a 'name' field on the BankIntegration List (if one exists), or
   *  4. As an alias to the 'id' field on the BankIntegration List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Name of integration  */
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  accessRights: Array<BankIntegrationAccessRight>;
  _accessRightsMeta?: Maybe<_QueryMeta>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};


/**  Determines way of obtaining banking data  */
export type BankIntegrationAccessRightsArgs = {
  where?: Maybe<BankIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


/**  Determines way of obtaining banking data  */
export type BankIntegration_AccessRightsMetaArgs = {
  where?: Maybe<BankIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

/**  Gives ability to service-user to access all schema records, connected to specified integration  */
export type BankIntegrationAccessRight = {
  __typename?: 'BankIntegrationAccessRight';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankIntegrationAccessRight List config, or
   *  2. As an alias to the field set on 'labelField' in the BankIntegrationAccessRight List config, or
   *  3. As an alias to a 'name' field on the BankIntegrationAccessRight List (if one exists), or
   *  4. As an alias to the 'id' field on the BankIntegrationAccessRight List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Specified integration, whose connected entities will be available for specified service user  */
  integration?: Maybe<BankIntegration>;
  /**  Link to user. Note, that user must be of "service" type  */
  user?: Maybe<User>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BankIntegrationAccessRightCreateInput = {
  integration?: Maybe<BankIntegrationRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankIntegrationAccessRightHistoryRecord = {
  __typename?: 'BankIntegrationAccessRightHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankIntegrationAccessRightHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankIntegrationAccessRightHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankIntegrationAccessRightHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankIntegrationAccessRightHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankIntegrationAccessRightHistoryRecordCreateInput = {
  integration?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankIntegrationAccessRightHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankIntegrationAccessRightHistoryRecordUpdateInput = {
  integration?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankIntegrationAccessRightHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankIntegrationAccessRightHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankIntegrationAccessRightHistoryRecordWhereInput>>>;
  integration?: Maybe<Scalars['String']>;
  integration_not?: Maybe<Scalars['String']>;
  integration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankIntegrationAccessRightHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankIntegrationAccessRightHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankIntegrationAccessRightHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankIntegrationAccessRightHistoryRecordsCreateInput = {
  data?: Maybe<BankIntegrationAccessRightHistoryRecordCreateInput>;
};

export type BankIntegrationAccessRightHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationAccessRightHistoryRecordUpdateInput>;
};

export type BankIntegrationAccessRightRelateToManyInput = {
  create?: Maybe<Array<Maybe<BankIntegrationAccessRightCreateInput>>>;
  connect?: Maybe<Array<Maybe<BankIntegrationAccessRightWhereUniqueInput>>>;
  disconnect?: Maybe<Array<Maybe<BankIntegrationAccessRightWhereUniqueInput>>>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BankIntegrationAccessRightUpdateInput = {
  integration?: Maybe<BankIntegrationRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankIntegrationAccessRightWhereInput = {
  AND?: Maybe<Array<Maybe<BankIntegrationAccessRightWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankIntegrationAccessRightWhereInput>>>;
  integration?: Maybe<BankIntegrationWhereInput>;
  integration_is_null?: Maybe<Scalars['Boolean']>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankIntegrationAccessRightWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankIntegrationAccessRightsCreateInput = {
  data?: Maybe<BankIntegrationAccessRightCreateInput>;
};

export type BankIntegrationAccessRightsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationAccessRightUpdateInput>;
};

/**  Usage of specific integration by specific organization. Contains summary information about last synchronization with data source (integration)  */
export type BankIntegrationAccountContext = {
  __typename?: 'BankIntegrationAccountContext';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankIntegrationAccountContext List config, or
   *  2. As an alias to the field set on 'labelField' in the BankIntegrationAccountContext List config, or
   *  3. As an alias to a 'name' field on the BankIntegrationAccountContext List (if one exists), or
   *  4. As an alias to the 'id' field on the BankIntegrationAccountContext List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Data source, used for this integration.  */
  integration?: Maybe<BankIntegration>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Controls availability of sync operation for this integration. Can be disabled by support in some cases, when client dont wants to have automatic synchronization via API, for example  */
  enabled?: Maybe<Scalars['Boolean']>;
  /**  Structured non-typed metadata, can be used by mini-apps or external services to store information  */
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BankIntegrationAccountContextCreateInput = {
  integration?: Maybe<BankIntegrationRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  enabled?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankIntegrationAccountContextHistoryRecord = {
  __typename?: 'BankIntegrationAccountContextHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankIntegrationAccountContextHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankIntegrationAccountContextHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankIntegrationAccountContextHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankIntegrationAccountContextHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationAccountContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankIntegrationAccountContextHistoryRecordCreateInput = {
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationAccountContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankIntegrationAccountContextHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankIntegrationAccountContextHistoryRecordUpdateInput = {
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationAccountContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankIntegrationAccountContextHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankIntegrationAccountContextHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankIntegrationAccountContextHistoryRecordWhereInput>>>;
  integration?: Maybe<Scalars['String']>;
  integration_not?: Maybe<Scalars['String']>;
  integration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  enabled?: Maybe<Scalars['Boolean']>;
  enabled_not?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankIntegrationAccountContextHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankIntegrationAccountContextHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankIntegrationAccountContextHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankIntegrationAccountContextHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankIntegrationAccountContextHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankIntegrationAccountContextHistoryRecordsCreateInput = {
  data?: Maybe<BankIntegrationAccountContextHistoryRecordCreateInput>;
};

export type BankIntegrationAccountContextHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationAccountContextHistoryRecordUpdateInput>;
};

export type BankIntegrationAccountContextRelateToOneInput = {
  create?: Maybe<BankIntegrationAccountContextCreateInput>;
  connect?: Maybe<BankIntegrationAccountContextWhereUniqueInput>;
  disconnect?: Maybe<BankIntegrationAccountContextWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BankIntegrationAccountContextUpdateInput = {
  integration?: Maybe<BankIntegrationRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  enabled?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankIntegrationAccountContextWhereInput = {
  AND?: Maybe<Array<Maybe<BankIntegrationAccountContextWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankIntegrationAccountContextWhereInput>>>;
  integration?: Maybe<BankIntegrationWhereInput>;
  integration_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  enabled?: Maybe<Scalars['Boolean']>;
  enabled_not?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankIntegrationAccountContextWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankIntegrationAccountContextsCreateInput = {
  data?: Maybe<BankIntegrationAccountContextCreateInput>;
};

export type BankIntegrationAccountContextsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationAccountContextUpdateInput>;
};

export type BankIntegrationCreateInput = {
  name?: Maybe<Scalars['String']>;
  accessRights?: Maybe<BankIntegrationAccessRightRelateToManyInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankIntegrationHistoryRecord = {
  __typename?: 'BankIntegrationHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankIntegrationHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankIntegrationHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankIntegrationHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankIntegrationHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankIntegrationHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankIntegrationHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankIntegrationHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankIntegrationHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankIntegrationHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankIntegrationHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankIntegrationHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankIntegrationHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankIntegrationHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankIntegrationHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankIntegrationHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankIntegrationHistoryRecordsCreateInput = {
  data?: Maybe<BankIntegrationHistoryRecordCreateInput>;
};

export type BankIntegrationHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationHistoryRecordUpdateInput>;
};

/**  Stores the integrations connected to the organization  */
export type BankIntegrationOrganizationContext = {
  __typename?: 'BankIntegrationOrganizationContext';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankIntegrationOrganizationContext List config, or
   *  2. As an alias to the field set on 'labelField' in the BankIntegrationOrganizationContext List config, or
   *  3. As an alias to a 'name' field on the BankIntegrationOrganizationContext List (if one exists), or
   *  4. As an alias to the 'id' field on the BankIntegrationOrganizationContext List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Data source, used for this integration.  */
  integration?: Maybe<BankIntegration>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Controls availability of sync operation for this integration in scope of organization. Can be disabled by support in some cases, when client dont wants to have automatic synchronization via API, for example  */
  enabled?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BankIntegrationOrganizationContextCreateInput = {
  integration?: Maybe<BankIntegrationRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  enabled?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankIntegrationOrganizationContextHistoryRecord = {
  __typename?: 'BankIntegrationOrganizationContextHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankIntegrationOrganizationContextHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankIntegrationOrganizationContextHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankIntegrationOrganizationContextHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankIntegrationOrganizationContextHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationOrganizationContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankIntegrationOrganizationContextHistoryRecordCreateInput = {
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationOrganizationContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankIntegrationOrganizationContextHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankIntegrationOrganizationContextHistoryRecordUpdateInput = {
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankIntegrationOrganizationContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankIntegrationOrganizationContextHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankIntegrationOrganizationContextHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankIntegrationOrganizationContextHistoryRecordWhereInput>>>;
  integration?: Maybe<Scalars['String']>;
  integration_not?: Maybe<Scalars['String']>;
  integration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  enabled?: Maybe<Scalars['Boolean']>;
  enabled_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankIntegrationOrganizationContextHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankIntegrationOrganizationContextHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankIntegrationOrganizationContextHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankIntegrationOrganizationContextHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankIntegrationOrganizationContextHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankIntegrationOrganizationContextHistoryRecordsCreateInput = {
  data?: Maybe<BankIntegrationOrganizationContextHistoryRecordCreateInput>;
};

export type BankIntegrationOrganizationContextHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationOrganizationContextHistoryRecordUpdateInput>;
};

export type BankIntegrationOrganizationContextUpdateInput = {
  integration?: Maybe<BankIntegrationRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  enabled?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankIntegrationOrganizationContextWhereInput = {
  AND?: Maybe<Array<Maybe<BankIntegrationOrganizationContextWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankIntegrationOrganizationContextWhereInput>>>;
  integration?: Maybe<BankIntegrationWhereInput>;
  integration_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  enabled?: Maybe<Scalars['Boolean']>;
  enabled_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankIntegrationOrganizationContextWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankIntegrationOrganizationContextsCreateInput = {
  data?: Maybe<BankIntegrationOrganizationContextCreateInput>;
};

export type BankIntegrationOrganizationContextsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationOrganizationContextUpdateInput>;
};

export type BankIntegrationRelateToOneInput = {
  create?: Maybe<BankIntegrationCreateInput>;
  connect?: Maybe<BankIntegrationWhereUniqueInput>;
  disconnect?: Maybe<BankIntegrationWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BankIntegrationUpdateInput = {
  name?: Maybe<Scalars['String']>;
  accessRights?: Maybe<BankIntegrationAccessRightRelateToManyInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankIntegrationWhereInput = {
  AND?: Maybe<Array<Maybe<BankIntegrationWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankIntegrationWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  condition must be true for all nodes  */
  accessRights_every?: Maybe<BankIntegrationAccessRightWhereInput>;
  /**  condition must be true for at least 1 node  */
  accessRights_some?: Maybe<BankIntegrationAccessRightWhereInput>;
  /**  condition must be false for all nodes  */
  accessRights_none?: Maybe<BankIntegrationAccessRightWhereInput>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankIntegrationWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankIntegrationsCreateInput = {
  data?: Maybe<BankIntegrationCreateInput>;
};

export type BankIntegrationsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationUpdateInput>;
};

/**  information about synchronization process of transactions with external source of from uploaded file  */
export type BankSyncTask = {
  __typename?: 'BankSyncTask';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankSyncTask List config, or
   *  2. As an alias to the field set on 'labelField' in the BankSyncTask List config, or
   *  3. As an alias to a 'name' field on the BankSyncTask List (if one exists), or
   *  4. As an alias to the 'id' field on the BankSyncTask List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Bank account for which current synchronization operation is performed. Can be unknown when account does not exist before import  */
  account?: Maybe<BankAccount>;
  /**  Integration context of account for which current synchronization operation is performed. Can be unknown when account and integration does not exist before import  */
  integrationContext?: Maybe<BankIntegrationAccountContext>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Property to which sync operation in this task should be related. When property is specified, new BankAccount will be connected to it if it does not exists  */
  property?: Maybe<Property>;
  /**  Status of current synchronization operation  */
  status?: Maybe<BankSyncTaskStatusType>;
  /**  File from which transactions should be imported. Currently only 1CClientBankExchange format is supported  */
  file?: Maybe<File>;
  /**  Count of transactions to import. Can be unknown in advance  */
  totalCount?: Maybe<Scalars['Int']>;
  /**  Count of transactions, that has been actually created in our database based in data from external source, determined by integration context  */
  processedCount?: Maybe<Scalars['Int']>;
  /**  User that requested this operation. Will be used for read access checks to display all tasks somewhere and to display progress indicator of ongoing exporting task for current user  */
  user?: Maybe<User>;
  /**  Options for launching tasks for banking domain  */
  options?: Maybe<BankSyncTaskOptions>;
  /**  Additional data, specific to used integration  */
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BankSyncTaskCreateInput = {
  account?: Maybe<BankAccountRelateToOneInput>;
  integrationContext?: Maybe<BankIntegrationAccountContextRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  status?: Maybe<BankSyncTaskStatusType>;
  file?: Maybe<Scalars['Upload']>;
  totalCount?: Maybe<Scalars['Int']>;
  processedCount?: Maybe<Scalars['Int']>;
  user?: Maybe<UserRelateToOneInput>;
  options?: Maybe<BankSyncTaskOptionsInput>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankSyncTaskHistoryRecord = {
  __typename?: 'BankSyncTaskHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankSyncTaskHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankSyncTaskHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankSyncTaskHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankSyncTaskHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  account?: Maybe<Scalars['String']>;
  integrationContext?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  file?: Maybe<Scalars['JSON']>;
  totalCount?: Maybe<Scalars['Int']>;
  processedCount?: Maybe<Scalars['Int']>;
  user?: Maybe<Scalars['String']>;
  options?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankSyncTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankSyncTaskHistoryRecordCreateInput = {
  account?: Maybe<Scalars['String']>;
  integrationContext?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  file?: Maybe<Scalars['JSON']>;
  totalCount?: Maybe<Scalars['Int']>;
  processedCount?: Maybe<Scalars['Int']>;
  user?: Maybe<Scalars['String']>;
  options?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankSyncTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankSyncTaskHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankSyncTaskHistoryRecordUpdateInput = {
  account?: Maybe<Scalars['String']>;
  integrationContext?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  file?: Maybe<Scalars['JSON']>;
  totalCount?: Maybe<Scalars['Int']>;
  processedCount?: Maybe<Scalars['Int']>;
  user?: Maybe<Scalars['String']>;
  options?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankSyncTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankSyncTaskHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankSyncTaskHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankSyncTaskHistoryRecordWhereInput>>>;
  account?: Maybe<Scalars['String']>;
  account_not?: Maybe<Scalars['String']>;
  account_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  account_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integrationContext?: Maybe<Scalars['String']>;
  integrationContext_not?: Maybe<Scalars['String']>;
  integrationContext_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integrationContext_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  file?: Maybe<Scalars['JSON']>;
  file_not?: Maybe<Scalars['JSON']>;
  file_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  totalCount?: Maybe<Scalars['Int']>;
  totalCount_not?: Maybe<Scalars['Int']>;
  totalCount_lt?: Maybe<Scalars['Int']>;
  totalCount_lte?: Maybe<Scalars['Int']>;
  totalCount_gt?: Maybe<Scalars['Int']>;
  totalCount_gte?: Maybe<Scalars['Int']>;
  totalCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  processedCount?: Maybe<Scalars['Int']>;
  processedCount_not?: Maybe<Scalars['Int']>;
  processedCount_lt?: Maybe<Scalars['Int']>;
  processedCount_lte?: Maybe<Scalars['Int']>;
  processedCount_gt?: Maybe<Scalars['Int']>;
  processedCount_gte?: Maybe<Scalars['Int']>;
  processedCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  processedCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  options?: Maybe<Scalars['JSON']>;
  options_not?: Maybe<Scalars['JSON']>;
  options_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  options_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankSyncTaskHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankSyncTaskHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankSyncTaskHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankSyncTaskHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankSyncTaskHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankSyncTaskHistoryRecordsCreateInput = {
  data?: Maybe<BankSyncTaskHistoryRecordCreateInput>;
};

export type BankSyncTaskHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankSyncTaskHistoryRecordUpdateInput>;
};

export type BankSyncTaskOptions = {
  __typename?: 'BankSyncTaskOptions';
  type?: Maybe<Scalars['String']>;
  dateFrom?: Maybe<Scalars['String']>;
  dateTo?: Maybe<Scalars['String']>;
};

export type BankSyncTaskOptionsInput = {
  type?: Maybe<Scalars['String']>;
  dateFrom?: Maybe<Scalars['String']>;
  dateTo?: Maybe<Scalars['String']>;
};

export enum BankSyncTaskStatusType {
  Processing = 'processing',
  Completed = 'completed',
  Error = 'error',
  Cancelled = 'cancelled'
}

export type BankSyncTaskUpdateInput = {
  account?: Maybe<BankAccountRelateToOneInput>;
  integrationContext?: Maybe<BankIntegrationAccountContextRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  status?: Maybe<BankSyncTaskStatusType>;
  file?: Maybe<Scalars['Upload']>;
  totalCount?: Maybe<Scalars['Int']>;
  processedCount?: Maybe<Scalars['Int']>;
  user?: Maybe<UserRelateToOneInput>;
  options?: Maybe<BankSyncTaskOptionsInput>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankSyncTaskWhereInput = {
  AND?: Maybe<Array<Maybe<BankSyncTaskWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankSyncTaskWhereInput>>>;
  account?: Maybe<BankAccountWhereInput>;
  account_is_null?: Maybe<Scalars['Boolean']>;
  integrationContext?: Maybe<BankIntegrationAccountContextWhereInput>;
  integrationContext_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  property?: Maybe<PropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  status?: Maybe<BankSyncTaskStatusType>;
  status_not?: Maybe<BankSyncTaskStatusType>;
  status_in?: Maybe<Array<Maybe<BankSyncTaskStatusType>>>;
  status_not_in?: Maybe<Array<Maybe<BankSyncTaskStatusType>>>;
  file?: Maybe<Scalars['String']>;
  file_not?: Maybe<Scalars['String']>;
  file_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalCount?: Maybe<Scalars['Int']>;
  totalCount_not?: Maybe<Scalars['Int']>;
  totalCount_lt?: Maybe<Scalars['Int']>;
  totalCount_lte?: Maybe<Scalars['Int']>;
  totalCount_gt?: Maybe<Scalars['Int']>;
  totalCount_gte?: Maybe<Scalars['Int']>;
  totalCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  processedCount?: Maybe<Scalars['Int']>;
  processedCount_not?: Maybe<Scalars['Int']>;
  processedCount_lt?: Maybe<Scalars['Int']>;
  processedCount_lte?: Maybe<Scalars['Int']>;
  processedCount_gt?: Maybe<Scalars['Int']>;
  processedCount_gte?: Maybe<Scalars['Int']>;
  processedCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  processedCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  options?: Maybe<BankSyncTaskOptionsInput>;
  options_not?: Maybe<BankSyncTaskOptionsInput>;
  options_in?: Maybe<Array<Maybe<BankSyncTaskOptionsInput>>>;
  options_not_in?: Maybe<Array<Maybe<BankSyncTaskOptionsInput>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankSyncTaskWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankSyncTasksCreateInput = {
  data?: Maybe<BankSyncTaskCreateInput>;
};

export type BankSyncTasksUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankSyncTaskUpdateInput>;
};

/**  Transaction related to costs of Organization with BankAccount. Full fields set from data import will be stored in "meta"  */
export type BankTransaction = {
  __typename?: 'BankTransaction';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankTransaction List config, or
   *  2. As an alias to the field set on 'labelField' in the BankTransaction List config, or
   *  3. As an alias to a 'name' field on the BankTransaction List (if one exists), or
   *  4. As an alias to the 'id' field on the BankTransaction List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Related BankAccount of Organization which payed  */
  account?: Maybe<BankAccount>;
  /**  Data source from which this transaction was created  */
  integrationContext?: Maybe<BankIntegrationAccountContext>;
  /**  Related account of contractor, which has received the payment via this transaction  */
  contractorAccount?: Maybe<BankContractorAccount>;
  /**  Related costs class  */
  costItem?: Maybe<BankCostItem>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Number of transaction, obtained from external system  */
  number?: Maybe<Scalars['String']>;
  /**  When payment order was created  */
  date?: Maybe<Scalars['String']>;
  /**  Amount of transaction in specified currency. Always positive number. Look at "isOutcome" field to determine whether this transaction commits negative or positive change to balance  */
  amount?: Maybe<Scalars['String']>;
  /**  Indicator of outcome transaction which commits negative change to balance  */
  isOutcome?: Maybe<Scalars['Boolean']>;
  /**  Code of currency in ISO-4217 format  */
  currencyCode?: Maybe<Scalars['String']>;
  /**  Textual description of payment purpose in free form  */
  purpose?: Maybe<Scalars['String']>;
  /**  Stores data, obtained from external source  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Identifier of corresponding record in external system, from that this record was copied  */
  importId?: Maybe<Scalars['String']>;
  /**  Name of external system, from that this record was copied  */
  importRemoteSystem?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BankTransactionCreateInput = {
  account?: Maybe<BankAccountRelateToOneInput>;
  integrationContext?: Maybe<BankIntegrationAccountContextRelateToOneInput>;
  contractorAccount?: Maybe<BankContractorAccountRelateToOneInput>;
  costItem?: Maybe<BankCostItemRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  number?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  currencyCode?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  importId?: Maybe<Scalars['String']>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BankTransactionHistoryRecord = {
  __typename?: 'BankTransactionHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BankTransactionHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BankTransactionHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BankTransactionHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BankTransactionHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  account?: Maybe<Scalars['String']>;
  integrationContext?: Maybe<Scalars['String']>;
  contractorAccount?: Maybe<Scalars['String']>;
  costItem?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  currencyCode?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  importId?: Maybe<Scalars['String']>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankTransactionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankTransactionHistoryRecordCreateInput = {
  account?: Maybe<Scalars['String']>;
  integrationContext?: Maybe<Scalars['String']>;
  contractorAccount?: Maybe<Scalars['String']>;
  costItem?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  currencyCode?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  importId?: Maybe<Scalars['String']>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankTransactionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BankTransactionHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BankTransactionHistoryRecordUpdateInput = {
  account?: Maybe<Scalars['String']>;
  integrationContext?: Maybe<Scalars['String']>;
  contractorAccount?: Maybe<Scalars['String']>;
  costItem?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  currencyCode?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  importId?: Maybe<Scalars['String']>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BankTransactionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BankTransactionHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BankTransactionHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankTransactionHistoryRecordWhereInput>>>;
  account?: Maybe<Scalars['String']>;
  account_not?: Maybe<Scalars['String']>;
  account_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  account_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integrationContext?: Maybe<Scalars['String']>;
  integrationContext_not?: Maybe<Scalars['String']>;
  integrationContext_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integrationContext_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contractorAccount?: Maybe<Scalars['String']>;
  contractorAccount_not?: Maybe<Scalars['String']>;
  contractorAccount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contractorAccount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  costItem?: Maybe<Scalars['String']>;
  costItem_not?: Maybe<Scalars['String']>;
  costItem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  costItem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number?: Maybe<Scalars['String']>;
  number_not?: Maybe<Scalars['String']>;
  number_contains?: Maybe<Scalars['String']>;
  number_not_contains?: Maybe<Scalars['String']>;
  number_starts_with?: Maybe<Scalars['String']>;
  number_not_starts_with?: Maybe<Scalars['String']>;
  number_ends_with?: Maybe<Scalars['String']>;
  number_not_ends_with?: Maybe<Scalars['String']>;
  number_i?: Maybe<Scalars['String']>;
  number_not_i?: Maybe<Scalars['String']>;
  number_contains_i?: Maybe<Scalars['String']>;
  number_not_contains_i?: Maybe<Scalars['String']>;
  number_starts_with_i?: Maybe<Scalars['String']>;
  number_not_starts_with_i?: Maybe<Scalars['String']>;
  number_ends_with_i?: Maybe<Scalars['String']>;
  number_not_ends_with_i?: Maybe<Scalars['String']>;
  number_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  date?: Maybe<Scalars['String']>;
  date_not?: Maybe<Scalars['String']>;
  date_lt?: Maybe<Scalars['String']>;
  date_lte?: Maybe<Scalars['String']>;
  date_gt?: Maybe<Scalars['String']>;
  date_gte?: Maybe<Scalars['String']>;
  date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amount?: Maybe<Scalars['String']>;
  amount_not?: Maybe<Scalars['String']>;
  amount_lt?: Maybe<Scalars['String']>;
  amount_lte?: Maybe<Scalars['String']>;
  amount_gt?: Maybe<Scalars['String']>;
  amount_gte?: Maybe<Scalars['String']>;
  amount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  isOutcome_not?: Maybe<Scalars['Boolean']>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_contains?: Maybe<Scalars['String']>;
  currencyCode_not_contains?: Maybe<Scalars['String']>;
  currencyCode_starts_with?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with?: Maybe<Scalars['String']>;
  currencyCode_ends_with?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with?: Maybe<Scalars['String']>;
  currencyCode_i?: Maybe<Scalars['String']>;
  currencyCode_not_i?: Maybe<Scalars['String']>;
  currencyCode_contains_i?: Maybe<Scalars['String']>;
  currencyCode_not_contains_i?: Maybe<Scalars['String']>;
  currencyCode_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose?: Maybe<Scalars['String']>;
  purpose_not?: Maybe<Scalars['String']>;
  purpose_contains?: Maybe<Scalars['String']>;
  purpose_not_contains?: Maybe<Scalars['String']>;
  purpose_starts_with?: Maybe<Scalars['String']>;
  purpose_not_starts_with?: Maybe<Scalars['String']>;
  purpose_ends_with?: Maybe<Scalars['String']>;
  purpose_not_ends_with?: Maybe<Scalars['String']>;
  purpose_i?: Maybe<Scalars['String']>;
  purpose_not_i?: Maybe<Scalars['String']>;
  purpose_contains_i?: Maybe<Scalars['String']>;
  purpose_not_contains_i?: Maybe<Scalars['String']>;
  purpose_starts_with_i?: Maybe<Scalars['String']>;
  purpose_not_starts_with_i?: Maybe<Scalars['String']>;
  purpose_ends_with_i?: Maybe<Scalars['String']>;
  purpose_not_ends_with_i?: Maybe<Scalars['String']>;
  purpose_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  importRemoteSystem_not?: Maybe<Scalars['String']>;
  importRemoteSystem_contains?: Maybe<Scalars['String']>;
  importRemoteSystem_not_contains?: Maybe<Scalars['String']>;
  importRemoteSystem_starts_with?: Maybe<Scalars['String']>;
  importRemoteSystem_not_starts_with?: Maybe<Scalars['String']>;
  importRemoteSystem_ends_with?: Maybe<Scalars['String']>;
  importRemoteSystem_not_ends_with?: Maybe<Scalars['String']>;
  importRemoteSystem_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_i?: Maybe<Scalars['String']>;
  importRemoteSystem_contains_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_contains_i?: Maybe<Scalars['String']>;
  importRemoteSystem_starts_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_starts_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_ends_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_ends_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importRemoteSystem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BankTransactionHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BankTransactionHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BankTransactionHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BankTransactionHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BankTransactionHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankTransactionHistoryRecordsCreateInput = {
  data?: Maybe<BankTransactionHistoryRecordCreateInput>;
};

export type BankTransactionHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankTransactionHistoryRecordUpdateInput>;
};

export type BankTransactionUpdateInput = {
  account?: Maybe<BankAccountRelateToOneInput>;
  integrationContext?: Maybe<BankIntegrationAccountContextRelateToOneInput>;
  contractorAccount?: Maybe<BankContractorAccountRelateToOneInput>;
  costItem?: Maybe<BankCostItemRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  number?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  currencyCode?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  importId?: Maybe<Scalars['String']>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BankTransactionWhereInput = {
  AND?: Maybe<Array<Maybe<BankTransactionWhereInput>>>;
  OR?: Maybe<Array<Maybe<BankTransactionWhereInput>>>;
  account?: Maybe<BankAccountWhereInput>;
  account_is_null?: Maybe<Scalars['Boolean']>;
  integrationContext?: Maybe<BankIntegrationAccountContextWhereInput>;
  integrationContext_is_null?: Maybe<Scalars['Boolean']>;
  contractorAccount?: Maybe<BankContractorAccountWhereInput>;
  contractorAccount_is_null?: Maybe<Scalars['Boolean']>;
  costItem?: Maybe<BankCostItemWhereInput>;
  costItem_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  number?: Maybe<Scalars['String']>;
  number_not?: Maybe<Scalars['String']>;
  number_contains?: Maybe<Scalars['String']>;
  number_not_contains?: Maybe<Scalars['String']>;
  number_starts_with?: Maybe<Scalars['String']>;
  number_not_starts_with?: Maybe<Scalars['String']>;
  number_ends_with?: Maybe<Scalars['String']>;
  number_not_ends_with?: Maybe<Scalars['String']>;
  number_i?: Maybe<Scalars['String']>;
  number_not_i?: Maybe<Scalars['String']>;
  number_contains_i?: Maybe<Scalars['String']>;
  number_not_contains_i?: Maybe<Scalars['String']>;
  number_starts_with_i?: Maybe<Scalars['String']>;
  number_not_starts_with_i?: Maybe<Scalars['String']>;
  number_ends_with_i?: Maybe<Scalars['String']>;
  number_not_ends_with_i?: Maybe<Scalars['String']>;
  number_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  date?: Maybe<Scalars['String']>;
  date_not?: Maybe<Scalars['String']>;
  date_lt?: Maybe<Scalars['String']>;
  date_lte?: Maybe<Scalars['String']>;
  date_gt?: Maybe<Scalars['String']>;
  date_gte?: Maybe<Scalars['String']>;
  date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amount?: Maybe<Scalars['String']>;
  amount_not?: Maybe<Scalars['String']>;
  amount_lt?: Maybe<Scalars['String']>;
  amount_lte?: Maybe<Scalars['String']>;
  amount_gt?: Maybe<Scalars['String']>;
  amount_gte?: Maybe<Scalars['String']>;
  amount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isOutcome?: Maybe<Scalars['Boolean']>;
  isOutcome_not?: Maybe<Scalars['Boolean']>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose?: Maybe<Scalars['String']>;
  purpose_not?: Maybe<Scalars['String']>;
  purpose_contains?: Maybe<Scalars['String']>;
  purpose_not_contains?: Maybe<Scalars['String']>;
  purpose_starts_with?: Maybe<Scalars['String']>;
  purpose_not_starts_with?: Maybe<Scalars['String']>;
  purpose_ends_with?: Maybe<Scalars['String']>;
  purpose_not_ends_with?: Maybe<Scalars['String']>;
  purpose_i?: Maybe<Scalars['String']>;
  purpose_not_i?: Maybe<Scalars['String']>;
  purpose_contains_i?: Maybe<Scalars['String']>;
  purpose_not_contains_i?: Maybe<Scalars['String']>;
  purpose_starts_with_i?: Maybe<Scalars['String']>;
  purpose_not_starts_with_i?: Maybe<Scalars['String']>;
  purpose_ends_with_i?: Maybe<Scalars['String']>;
  purpose_not_ends_with_i?: Maybe<Scalars['String']>;
  purpose_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  importRemoteSystem_not?: Maybe<Scalars['String']>;
  importRemoteSystem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importRemoteSystem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BankTransactionWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BankTransactionsCreateInput = {
  data?: Maybe<BankTransactionCreateInput>;
};

export type BankTransactionsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BankTransactionUpdateInput>;
};

/**  All `account` objects from `billing data source`. In close account cases, these objects should be soft deleted  */
export type BillingAccount = {
  __typename?: 'BillingAccount';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingAccount List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingAccount List config, or
   *  3. As an alias to a 'name' field on the BillingAccount List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingAccount List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Integration context  */
  context?: Maybe<BillingIntegrationOrganizationContext>;
  /**  Id of object in external service which represents current item. Mostly used for internal needs of integration services for matching our objects with theirs  */
  importId?: Maybe<Scalars['String']>;
  /**  Raw non-structured data obtained from the `billing data source`. Used only for the internal needs of the `integration component`.  */
  raw?: Maybe<Scalars['JSON']>;
  /**  Billing property  */
  property?: Maybe<BillingProperty>;
  /**  A well-known universal identifier that allows you to identify the same objects in different systems. It may differ in different countries. Example: for Russia, the dom.gosuslugi.ru account number is used  */
  globalId?: Maybe<Scalars['String']>;
  /**  Account number  */
  number?: Maybe<Scalars['String']>;
  /**  Flat number / door number of an apartment building (property)  */
  unitName?: Maybe<Scalars['String']>;
  /**  Type of unit, such as parking lot or flat  */
  unitType?: Maybe<Scalars['String']>;
  /**  Full name of the account holder  */
  fullName?: Maybe<Scalars['String']>;
  /**  Structured metadata obtained from the `billing data source`. Some of this data is required for use in the `receipt template`. Examples of data keys: `property unit number`, `floor`, `entrance`, `is parking`  */
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BillingAccountCreateInput = {
  context?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  importId?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  property?: Maybe<BillingPropertyRelateToOneInput>;
  globalId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BillingAccountHistoryRecord = {
  __typename?: 'BillingAccountHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingAccountHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingAccountHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BillingAccountHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingAccountHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['String']>;
  globalId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingAccountHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingAccountHistoryRecordCreateInput = {
  context?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['String']>;
  globalId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingAccountHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BillingAccountHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BillingAccountHistoryRecordUpdateInput = {
  context?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['String']>;
  globalId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingAccountHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingAccountHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BillingAccountHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingAccountHistoryRecordWhereInput>>>;
  context?: Maybe<Scalars['String']>;
  context_not?: Maybe<Scalars['String']>;
  context_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  context_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  raw?: Maybe<Scalars['JSON']>;
  raw_not?: Maybe<Scalars['JSON']>;
  raw_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  raw_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  globalId?: Maybe<Scalars['String']>;
  globalId_not?: Maybe<Scalars['String']>;
  globalId_contains?: Maybe<Scalars['String']>;
  globalId_not_contains?: Maybe<Scalars['String']>;
  globalId_starts_with?: Maybe<Scalars['String']>;
  globalId_not_starts_with?: Maybe<Scalars['String']>;
  globalId_ends_with?: Maybe<Scalars['String']>;
  globalId_not_ends_with?: Maybe<Scalars['String']>;
  globalId_i?: Maybe<Scalars['String']>;
  globalId_not_i?: Maybe<Scalars['String']>;
  globalId_contains_i?: Maybe<Scalars['String']>;
  globalId_not_contains_i?: Maybe<Scalars['String']>;
  globalId_starts_with_i?: Maybe<Scalars['String']>;
  globalId_not_starts_with_i?: Maybe<Scalars['String']>;
  globalId_ends_with_i?: Maybe<Scalars['String']>;
  globalId_not_ends_with_i?: Maybe<Scalars['String']>;
  globalId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  globalId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number?: Maybe<Scalars['String']>;
  number_not?: Maybe<Scalars['String']>;
  number_contains?: Maybe<Scalars['String']>;
  number_not_contains?: Maybe<Scalars['String']>;
  number_starts_with?: Maybe<Scalars['String']>;
  number_not_starts_with?: Maybe<Scalars['String']>;
  number_ends_with?: Maybe<Scalars['String']>;
  number_not_ends_with?: Maybe<Scalars['String']>;
  number_i?: Maybe<Scalars['String']>;
  number_not_i?: Maybe<Scalars['String']>;
  number_contains_i?: Maybe<Scalars['String']>;
  number_not_contains_i?: Maybe<Scalars['String']>;
  number_starts_with_i?: Maybe<Scalars['String']>;
  number_not_starts_with_i?: Maybe<Scalars['String']>;
  number_ends_with_i?: Maybe<Scalars['String']>;
  number_not_ends_with_i?: Maybe<Scalars['String']>;
  number_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_contains?: Maybe<Scalars['String']>;
  unitType_not_contains?: Maybe<Scalars['String']>;
  unitType_starts_with?: Maybe<Scalars['String']>;
  unitType_not_starts_with?: Maybe<Scalars['String']>;
  unitType_ends_with?: Maybe<Scalars['String']>;
  unitType_not_ends_with?: Maybe<Scalars['String']>;
  unitType_i?: Maybe<Scalars['String']>;
  unitType_not_i?: Maybe<Scalars['String']>;
  unitType_contains_i?: Maybe<Scalars['String']>;
  unitType_not_contains_i?: Maybe<Scalars['String']>;
  unitType_starts_with_i?: Maybe<Scalars['String']>;
  unitType_not_starts_with_i?: Maybe<Scalars['String']>;
  unitType_ends_with_i?: Maybe<Scalars['String']>;
  unitType_not_ends_with_i?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName?: Maybe<Scalars['String']>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_i?: Maybe<Scalars['String']>;
  fullName_not_i?: Maybe<Scalars['String']>;
  fullName_contains_i?: Maybe<Scalars['String']>;
  fullName_not_contains_i?: Maybe<Scalars['String']>;
  fullName_starts_with_i?: Maybe<Scalars['String']>;
  fullName_not_starts_with_i?: Maybe<Scalars['String']>;
  fullName_ends_with_i?: Maybe<Scalars['String']>;
  fullName_not_ends_with_i?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BillingAccountHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BillingAccountHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BillingAccountHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BillingAccountHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BillingAccountHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingAccountHistoryRecordsCreateInput = {
  data?: Maybe<BillingAccountHistoryRecordCreateInput>;
};

export type BillingAccountHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingAccountHistoryRecordUpdateInput>;
};

export type BillingAccountRelateToOneInput = {
  create?: Maybe<BillingAccountCreateInput>;
  connect?: Maybe<BillingAccountWhereUniqueInput>;
  disconnect?: Maybe<BillingAccountWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BillingAccountUpdateInput = {
  context?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  importId?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  property?: Maybe<BillingPropertyRelateToOneInput>;
  globalId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BillingAccountWhereInput = {
  AND?: Maybe<Array<Maybe<BillingAccountWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingAccountWhereInput>>>;
  context?: Maybe<BillingIntegrationOrganizationContextWhereInput>;
  context_is_null?: Maybe<Scalars['Boolean']>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  raw?: Maybe<Scalars['JSON']>;
  raw_not?: Maybe<Scalars['JSON']>;
  raw_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  raw_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  property?: Maybe<BillingPropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  globalId?: Maybe<Scalars['String']>;
  globalId_not?: Maybe<Scalars['String']>;
  globalId_contains?: Maybe<Scalars['String']>;
  globalId_not_contains?: Maybe<Scalars['String']>;
  globalId_starts_with?: Maybe<Scalars['String']>;
  globalId_not_starts_with?: Maybe<Scalars['String']>;
  globalId_ends_with?: Maybe<Scalars['String']>;
  globalId_not_ends_with?: Maybe<Scalars['String']>;
  globalId_i?: Maybe<Scalars['String']>;
  globalId_not_i?: Maybe<Scalars['String']>;
  globalId_contains_i?: Maybe<Scalars['String']>;
  globalId_not_contains_i?: Maybe<Scalars['String']>;
  globalId_starts_with_i?: Maybe<Scalars['String']>;
  globalId_not_starts_with_i?: Maybe<Scalars['String']>;
  globalId_ends_with_i?: Maybe<Scalars['String']>;
  globalId_not_ends_with_i?: Maybe<Scalars['String']>;
  globalId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  globalId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number?: Maybe<Scalars['String']>;
  number_not?: Maybe<Scalars['String']>;
  number_contains?: Maybe<Scalars['String']>;
  number_not_contains?: Maybe<Scalars['String']>;
  number_starts_with?: Maybe<Scalars['String']>;
  number_not_starts_with?: Maybe<Scalars['String']>;
  number_ends_with?: Maybe<Scalars['String']>;
  number_not_ends_with?: Maybe<Scalars['String']>;
  number_i?: Maybe<Scalars['String']>;
  number_not_i?: Maybe<Scalars['String']>;
  number_contains_i?: Maybe<Scalars['String']>;
  number_not_contains_i?: Maybe<Scalars['String']>;
  number_starts_with_i?: Maybe<Scalars['String']>;
  number_not_starts_with_i?: Maybe<Scalars['String']>;
  number_ends_with_i?: Maybe<Scalars['String']>;
  number_not_ends_with_i?: Maybe<Scalars['String']>;
  number_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName?: Maybe<Scalars['String']>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_i?: Maybe<Scalars['String']>;
  fullName_not_i?: Maybe<Scalars['String']>;
  fullName_contains_i?: Maybe<Scalars['String']>;
  fullName_not_contains_i?: Maybe<Scalars['String']>;
  fullName_starts_with_i?: Maybe<Scalars['String']>;
  fullName_not_starts_with_i?: Maybe<Scalars['String']>;
  fullName_ends_with_i?: Maybe<Scalars['String']>;
  fullName_not_ends_with_i?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BillingAccountWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingAccountsCreateInput = {
  data?: Maybe<BillingAccountCreateInput>;
};

export type BillingAccountsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingAccountUpdateInput>;
};

export type BillingCategoriesCreateInput = {
  data?: Maybe<BillingCategoryCreateInput>;
};

export type BillingCategoriesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingCategoryUpdateInput>;
};

/**  Payment category - used primarily in display purposes  */
export type BillingCategory = {
  __typename?: 'BillingCategory';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingCategory List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingCategory List config, or
   *  3. As an alias to a 'name' field on the BillingCategory List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingCategory List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Localized name of billing category: Hot water, Cold water, Housing Services  */
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BillingCategoryCreateInput = {
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BillingCategoryHistoryRecord = {
  __typename?: 'BillingCategoryHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingCategoryHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingCategoryHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BillingCategoryHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingCategoryHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingCategoryHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingCategoryHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingCategoryHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BillingCategoryHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BillingCategoryHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingCategoryHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingCategoryHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BillingCategoryHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingCategoryHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BillingCategoryHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BillingCategoryHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BillingCategoryHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BillingCategoryHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BillingCategoryHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingCategoryHistoryRecordsCreateInput = {
  data?: Maybe<BillingCategoryHistoryRecordCreateInput>;
};

export type BillingCategoryHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingCategoryHistoryRecordUpdateInput>;
};

export type BillingCategoryRelateToOneInput = {
  create?: Maybe<BillingCategoryCreateInput>;
  connect?: Maybe<BillingCategoryWhereUniqueInput>;
  disconnect?: Maybe<BillingCategoryWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BillingCategoryUpdateInput = {
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BillingCategoryWhereInput = {
  AND?: Maybe<Array<Maybe<BillingCategoryWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingCategoryWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BillingCategoryWhereUniqueInput = {
  id: Scalars['ID'];
};

/**  Identification of the `integration component` which responsible for getting data from the `billing data source` and delivering the data to `this API`. Examples: tap-1c, ...   */
export type BillingIntegration = {
  __typename?: 'BillingIntegration';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingIntegration List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingIntegration List config, or
   *  3. As an alias to a 'name' field on the BillingIntegration List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingIntegration List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  The name of the `integration component` that the developer remembers  */
  name?: Maybe<Scalars['String']>;
  /**  Logo of app's company or app itself  */
  logo?: Maybe<File>;
  /**  Short description / catch phrase providing information about integration functionality. Will be shown on App's card  */
  shortDescription?: Maybe<Scalars['String']>;
  /**  Developer company name  */
  developer?: Maybe<Scalars['String']>;
  /**  Link to the website of the developer company, where the user can find out detailed information about the partner  */
  partnerUrl?: Maybe<Scalars['String']>;
  /**  Text describing app functionality, connection process and pricing in full detail. Written in markdown without html tags. Will be shown on app's page  */
  detailedDescription?: Maybe<Scalars['String']>;
  /**  Url to app page, which is the app starting point and will be opened in iframe  */
  appUrl?: Maybe<Scalars['String']>;
  /**  This title is shown on /billing page, usually contains word "Billing"  */
  billingPageTitle?: Maybe<Scalars['String']>;
  /**  Billing group which this billing is part of. Used to restrict certain billings from certain acquirings"  */
  group?: Maybe<Scalars['String']>;
  /**  Status, which context will have by default after creation if no overwriting option provided  */
  contextDefaultStatus?: Maybe<Scalars['String']>;
  /**  Format of the data, that is output of this integration. This field specifies the detail and size of columns. If not specified we can only show first level of detail (address, account, toPay)  */
  dataFormat?: Maybe<BillingIntegrationDataFormatField>;
  /**  Currency which this billing uses  */
  currencyCode?: Maybe<Scalars['String']>;
  accessRights: Array<BillingIntegrationAccessRight>;
  _accessRightsMeta?: Maybe<_QueryMeta>;
  /**  If checked, then bank account objects created by this billing are automatically approved. E.g government-controlled billing  */
  isTrustedBankAccountSource?: Maybe<Scalars['Boolean']>;
  /**  Indicates whether the integration or app is hidden inside the CRM. Used if integration is active by default or not ready to appear inside CRM  */
  isHidden?: Maybe<Scalars['Boolean']>;
  /**  The number used to determine the position of the app among the others. App with higher priority appear earlier in "All" category, as well as in it's own category. Apps with the same priority are sorted from newest to oldest. The default value is 1.  */
  displayPriority?: Maybe<Scalars['Int']>;
  /**  App can be marked with one of the following labels in order to visually stand out from other applications: [FREE, DISCOUNT, POPULAR, NEW]  */
  label?: Maybe<Scalars['String']>;
  /**  Array containing links to promotional images, which will be shown to user on app's page  */
  gallery?: Maybe<Array<Scalars['String']>>;
  /**  String representing a base price of app. Usually it's something like "Free", "Individual", "$50 / year"  */
  price?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};


/**  Identification of the `integration component` which responsible for getting data from the `billing data source` and delivering the data to `this API`. Examples: tap-1c, ...   */
export type BillingIntegrationAccessRightsArgs = {
  where?: Maybe<BillingIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


/**  Identification of the `integration component` which responsible for getting data from the `billing data source` and delivering the data to `this API`. Examples: tap-1c, ...   */
export type BillingIntegration_AccessRightsMetaArgs = {
  where?: Maybe<BillingIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

/**  Link between billing integrations and users. The existence of the object means that there is user has access to integration  */
export type BillingIntegrationAccessRight = {
  __typename?: 'BillingIntegrationAccessRight';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingIntegrationAccessRight List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingIntegrationAccessRight List config, or
   *  3. As an alias to a 'name' field on the BillingIntegrationAccessRight List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingIntegrationAccessRight List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Integration  */
  integration?: Maybe<BillingIntegration>;
  /**  Link to user. Note, that user must be of "service" type  */
  user?: Maybe<User>;
  id: Scalars['ID'];
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
  v?: Maybe<Scalars['Int']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
};

export type BillingIntegrationAccessRightCreateInput = {
  integration?: Maybe<BillingIntegrationRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
  v?: Maybe<Scalars['Int']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
};

/**  A keystone list  */
export type BillingIntegrationAccessRightHistoryRecord = {
  __typename?: 'BillingIntegrationAccessRightHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingIntegrationAccessRightHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingIntegrationAccessRightHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BillingIntegrationAccessRightHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingIntegrationAccessRightHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingIntegrationAccessRightHistoryRecordCreateInput = {
  integration?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BillingIntegrationAccessRightHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BillingIntegrationAccessRightHistoryRecordUpdateInput = {
  integration?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingIntegrationAccessRightHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BillingIntegrationAccessRightHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingIntegrationAccessRightHistoryRecordWhereInput>>>;
  integration?: Maybe<Scalars['String']>;
  integration_not?: Maybe<Scalars['String']>;
  integration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BillingIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BillingIntegrationAccessRightHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BillingIntegrationAccessRightHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BillingIntegrationAccessRightHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BillingIntegrationAccessRightHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingIntegrationAccessRightHistoryRecordsCreateInput = {
  data?: Maybe<BillingIntegrationAccessRightHistoryRecordCreateInput>;
};

export type BillingIntegrationAccessRightHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationAccessRightHistoryRecordUpdateInput>;
};

export type BillingIntegrationAccessRightRelateToManyInput = {
  create?: Maybe<Array<Maybe<BillingIntegrationAccessRightCreateInput>>>;
  connect?: Maybe<Array<Maybe<BillingIntegrationAccessRightWhereUniqueInput>>>;
  disconnect?: Maybe<Array<Maybe<BillingIntegrationAccessRightWhereUniqueInput>>>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BillingIntegrationAccessRightUpdateInput = {
  integration?: Maybe<BillingIntegrationRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
  v?: Maybe<Scalars['Int']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
};

export type BillingIntegrationAccessRightWhereInput = {
  AND?: Maybe<Array<Maybe<BillingIntegrationAccessRightWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingIntegrationAccessRightWhereInput>>>;
  integration?: Maybe<BillingIntegrationWhereInput>;
  integration_is_null?: Maybe<Scalars['Boolean']>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BillingIntegrationAccessRightWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingIntegrationAccessRightsCreateInput = {
  data?: Maybe<BillingIntegrationAccessRightCreateInput>;
};

export type BillingIntegrationAccessRightsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationAccessRightUpdateInput>;
};

export type BillingIntegrationCreateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['Upload']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['String']>;
  appUrl?: Maybe<Scalars['String']>;
  billingPageTitle?: Maybe<Scalars['String']>;
  group?: Maybe<Scalars['String']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  dataFormat?: Maybe<BillingIntegrationDataFormatFieldInput>;
  currencyCode?: Maybe<Scalars['String']>;
  accessRights?: Maybe<BillingIntegrationAccessRightRelateToManyInput>;
  isTrustedBankAccountSource?: Maybe<Scalars['Boolean']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Array<Scalars['String']>>;
  price?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BillingIntegrationDataFormatField = {
  __typename?: 'BillingIntegrationDataFormatField';
  hasToPayDetails: Scalars['Boolean'];
  hasServices: Scalars['Boolean'];
  hasServicesDetails: Scalars['Boolean'];
};

export type BillingIntegrationDataFormatFieldInput = {
  hasToPayDetails: Scalars['Boolean'];
  hasServices: Scalars['Boolean'];
  hasServicesDetails: Scalars['Boolean'];
};

/**  A keystone list  */
export type BillingIntegrationHistoryRecord = {
  __typename?: 'BillingIntegrationHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingIntegrationHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingIntegrationHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BillingIntegrationHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingIntegrationHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  appUrl?: Maybe<Scalars['String']>;
  billingPageTitle?: Maybe<Scalars['String']>;
  group?: Maybe<Scalars['String']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  dataFormat?: Maybe<Scalars['JSON']>;
  currencyCode?: Maybe<Scalars['String']>;
  isTrustedBankAccountSource?: Maybe<Scalars['Boolean']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingIntegrationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingIntegrationHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  appUrl?: Maybe<Scalars['String']>;
  billingPageTitle?: Maybe<Scalars['String']>;
  group?: Maybe<Scalars['String']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  dataFormat?: Maybe<Scalars['JSON']>;
  currencyCode?: Maybe<Scalars['String']>;
  isTrustedBankAccountSource?: Maybe<Scalars['Boolean']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingIntegrationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BillingIntegrationHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BillingIntegrationHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['JSON']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  appUrl?: Maybe<Scalars['String']>;
  billingPageTitle?: Maybe<Scalars['String']>;
  group?: Maybe<Scalars['String']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  dataFormat?: Maybe<Scalars['JSON']>;
  currencyCode?: Maybe<Scalars['String']>;
  isTrustedBankAccountSource?: Maybe<Scalars['Boolean']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingIntegrationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingIntegrationHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BillingIntegrationHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingIntegrationHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo?: Maybe<Scalars['JSON']>;
  logo_not?: Maybe<Scalars['JSON']>;
  logo_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  logo_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  shortDescription_starts_with?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with?: Maybe<Scalars['String']>;
  shortDescription_ends_with?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with?: Maybe<Scalars['String']>;
  shortDescription_i?: Maybe<Scalars['String']>;
  shortDescription_not_i?: Maybe<Scalars['String']>;
  shortDescription_contains_i?: Maybe<Scalars['String']>;
  shortDescription_not_contains_i?: Maybe<Scalars['String']>;
  shortDescription_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer?: Maybe<Scalars['String']>;
  developer_not?: Maybe<Scalars['String']>;
  developer_contains?: Maybe<Scalars['String']>;
  developer_not_contains?: Maybe<Scalars['String']>;
  developer_starts_with?: Maybe<Scalars['String']>;
  developer_not_starts_with?: Maybe<Scalars['String']>;
  developer_ends_with?: Maybe<Scalars['String']>;
  developer_not_ends_with?: Maybe<Scalars['String']>;
  developer_i?: Maybe<Scalars['String']>;
  developer_not_i?: Maybe<Scalars['String']>;
  developer_contains_i?: Maybe<Scalars['String']>;
  developer_not_contains_i?: Maybe<Scalars['String']>;
  developer_starts_with_i?: Maybe<Scalars['String']>;
  developer_not_starts_with_i?: Maybe<Scalars['String']>;
  developer_ends_with_i?: Maybe<Scalars['String']>;
  developer_not_ends_with_i?: Maybe<Scalars['String']>;
  developer_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl?: Maybe<Scalars['String']>;
  partnerUrl_not?: Maybe<Scalars['String']>;
  partnerUrl_contains?: Maybe<Scalars['String']>;
  partnerUrl_not_contains?: Maybe<Scalars['String']>;
  partnerUrl_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_i?: Maybe<Scalars['String']>;
  partnerUrl_not_i?: Maybe<Scalars['String']>;
  partnerUrl_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_not_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailedDescription?: Maybe<Scalars['JSON']>;
  detailedDescription_not?: Maybe<Scalars['JSON']>;
  detailedDescription_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  detailedDescription_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  appUrl?: Maybe<Scalars['String']>;
  appUrl_not?: Maybe<Scalars['String']>;
  appUrl_contains?: Maybe<Scalars['String']>;
  appUrl_not_contains?: Maybe<Scalars['String']>;
  appUrl_starts_with?: Maybe<Scalars['String']>;
  appUrl_not_starts_with?: Maybe<Scalars['String']>;
  appUrl_ends_with?: Maybe<Scalars['String']>;
  appUrl_not_ends_with?: Maybe<Scalars['String']>;
  appUrl_i?: Maybe<Scalars['String']>;
  appUrl_not_i?: Maybe<Scalars['String']>;
  appUrl_contains_i?: Maybe<Scalars['String']>;
  appUrl_not_contains_i?: Maybe<Scalars['String']>;
  appUrl_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  billingPageTitle?: Maybe<Scalars['String']>;
  billingPageTitle_not?: Maybe<Scalars['String']>;
  billingPageTitle_contains?: Maybe<Scalars['String']>;
  billingPageTitle_not_contains?: Maybe<Scalars['String']>;
  billingPageTitle_starts_with?: Maybe<Scalars['String']>;
  billingPageTitle_not_starts_with?: Maybe<Scalars['String']>;
  billingPageTitle_ends_with?: Maybe<Scalars['String']>;
  billingPageTitle_not_ends_with?: Maybe<Scalars['String']>;
  billingPageTitle_i?: Maybe<Scalars['String']>;
  billingPageTitle_not_i?: Maybe<Scalars['String']>;
  billingPageTitle_contains_i?: Maybe<Scalars['String']>;
  billingPageTitle_not_contains_i?: Maybe<Scalars['String']>;
  billingPageTitle_starts_with_i?: Maybe<Scalars['String']>;
  billingPageTitle_not_starts_with_i?: Maybe<Scalars['String']>;
  billingPageTitle_ends_with_i?: Maybe<Scalars['String']>;
  billingPageTitle_not_ends_with_i?: Maybe<Scalars['String']>;
  billingPageTitle_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  billingPageTitle_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  group?: Maybe<Scalars['String']>;
  group_not?: Maybe<Scalars['String']>;
  group_contains?: Maybe<Scalars['String']>;
  group_not_contains?: Maybe<Scalars['String']>;
  group_starts_with?: Maybe<Scalars['String']>;
  group_not_starts_with?: Maybe<Scalars['String']>;
  group_ends_with?: Maybe<Scalars['String']>;
  group_not_ends_with?: Maybe<Scalars['String']>;
  group_i?: Maybe<Scalars['String']>;
  group_not_i?: Maybe<Scalars['String']>;
  group_contains_i?: Maybe<Scalars['String']>;
  group_not_contains_i?: Maybe<Scalars['String']>;
  group_starts_with_i?: Maybe<Scalars['String']>;
  group_not_starts_with_i?: Maybe<Scalars['String']>;
  group_ends_with_i?: Maybe<Scalars['String']>;
  group_not_ends_with_i?: Maybe<Scalars['String']>;
  group_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  group_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  contextDefaultStatus_not?: Maybe<Scalars['String']>;
  contextDefaultStatus_contains?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_contains?: Maybe<Scalars['String']>;
  contextDefaultStatus_starts_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_starts_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_ends_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_ends_with?: Maybe<Scalars['String']>;
  contextDefaultStatus_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_contains_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_contains_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_starts_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_starts_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_ends_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_not_ends_with_i?: Maybe<Scalars['String']>;
  contextDefaultStatus_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contextDefaultStatus_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dataFormat?: Maybe<Scalars['JSON']>;
  dataFormat_not?: Maybe<Scalars['JSON']>;
  dataFormat_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dataFormat_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_contains?: Maybe<Scalars['String']>;
  currencyCode_not_contains?: Maybe<Scalars['String']>;
  currencyCode_starts_with?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with?: Maybe<Scalars['String']>;
  currencyCode_ends_with?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with?: Maybe<Scalars['String']>;
  currencyCode_i?: Maybe<Scalars['String']>;
  currencyCode_not_i?: Maybe<Scalars['String']>;
  currencyCode_contains_i?: Maybe<Scalars['String']>;
  currencyCode_not_contains_i?: Maybe<Scalars['String']>;
  currencyCode_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isTrustedBankAccountSource?: Maybe<Scalars['Boolean']>;
  isTrustedBankAccountSource_not?: Maybe<Scalars['Boolean']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isHidden_not?: Maybe<Scalars['Boolean']>;
  displayPriority?: Maybe<Scalars['Int']>;
  displayPriority_not?: Maybe<Scalars['Int']>;
  displayPriority_lt?: Maybe<Scalars['Int']>;
  displayPriority_lte?: Maybe<Scalars['Int']>;
  displayPriority_gt?: Maybe<Scalars['Int']>;
  displayPriority_gte?: Maybe<Scalars['Int']>;
  displayPriority_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  displayPriority_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  label?: Maybe<Scalars['String']>;
  label_not?: Maybe<Scalars['String']>;
  label_contains?: Maybe<Scalars['String']>;
  label_not_contains?: Maybe<Scalars['String']>;
  label_starts_with?: Maybe<Scalars['String']>;
  label_not_starts_with?: Maybe<Scalars['String']>;
  label_ends_with?: Maybe<Scalars['String']>;
  label_not_ends_with?: Maybe<Scalars['String']>;
  label_i?: Maybe<Scalars['String']>;
  label_not_i?: Maybe<Scalars['String']>;
  label_contains_i?: Maybe<Scalars['String']>;
  label_not_contains_i?: Maybe<Scalars['String']>;
  label_starts_with_i?: Maybe<Scalars['String']>;
  label_not_starts_with_i?: Maybe<Scalars['String']>;
  label_ends_with_i?: Maybe<Scalars['String']>;
  label_not_ends_with_i?: Maybe<Scalars['String']>;
  label_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  label_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  gallery?: Maybe<Scalars['JSON']>;
  gallery_not?: Maybe<Scalars['JSON']>;
  gallery_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  gallery_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  price?: Maybe<Scalars['String']>;
  price_not?: Maybe<Scalars['String']>;
  price_contains?: Maybe<Scalars['String']>;
  price_not_contains?: Maybe<Scalars['String']>;
  price_starts_with?: Maybe<Scalars['String']>;
  price_not_starts_with?: Maybe<Scalars['String']>;
  price_ends_with?: Maybe<Scalars['String']>;
  price_not_ends_with?: Maybe<Scalars['String']>;
  price_i?: Maybe<Scalars['String']>;
  price_not_i?: Maybe<Scalars['String']>;
  price_contains_i?: Maybe<Scalars['String']>;
  price_not_contains_i?: Maybe<Scalars['String']>;
  price_starts_with_i?: Maybe<Scalars['String']>;
  price_not_starts_with_i?: Maybe<Scalars['String']>;
  price_ends_with_i?: Maybe<Scalars['String']>;
  price_not_ends_with_i?: Maybe<Scalars['String']>;
  price_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  price_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BillingIntegrationHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BillingIntegrationHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BillingIntegrationHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BillingIntegrationHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BillingIntegrationHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingIntegrationHistoryRecordsCreateInput = {
  data?: Maybe<BillingIntegrationHistoryRecordCreateInput>;
};

export type BillingIntegrationHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationHistoryRecordUpdateInput>;
};

/**  Integration state and settings for all organizations. The existence of this object means that there is a configured integration between the `billing data source` and `this API`  */
export type BillingIntegrationOrganizationContext = {
  __typename?: 'BillingIntegrationOrganizationContext';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingIntegrationOrganizationContext List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingIntegrationOrganizationContext List config, or
   *  3. As an alias to a 'name' field on the BillingIntegrationOrganizationContext List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingIntegrationOrganizationContext List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  ID of the integration that is configured to receive data for the organization  */
  integration?: Maybe<BillingIntegration>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Settings that are required to get data from the `billing data source`. It can also contain fine-tuning optional integration settings. The data structure depends on the integration and defined there  */
  settings?: Maybe<Scalars['JSON']>;
  /**  Status of BillingIntegration connection, Can be one of the following: ["InProgress", "Error", "Finished"]. If not specified explicitly on creation, uses default value from related BillingIntegration model  */
  status?: Maybe<Scalars['String']>;
  /**  The current state of the integration process. Some integration need to store past state or data related to cache files/folders for past state. The data structure depends on the integration and defined there  */
  state?: Maybe<Scalars['JSON']>;
  /**  Information about last report, such as time of report, period of report, amount of loaded data and etc  */
  lastReport?: Maybe<Scalars['JSON']>;
  /**  Link to a problem occurred during last integration process. Filled automatically, can only be resolved to null manually.  */
  currentProblem?: Maybe<BillingIntegrationProblem>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BillingIntegrationOrganizationContextCreateInput = {
  integration?: Maybe<BillingIntegrationRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  settings?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['JSON']>;
  lastReport?: Maybe<Scalars['JSON']>;
  currentProblem?: Maybe<BillingIntegrationProblemRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BillingIntegrationOrganizationContextHistoryRecord = {
  __typename?: 'BillingIntegrationOrganizationContextHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingIntegrationOrganizationContextHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingIntegrationOrganizationContextHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BillingIntegrationOrganizationContextHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingIntegrationOrganizationContextHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['JSON']>;
  lastReport?: Maybe<Scalars['JSON']>;
  currentProblem?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingIntegrationOrganizationContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingIntegrationOrganizationContextHistoryRecordCreateInput = {
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['JSON']>;
  lastReport?: Maybe<Scalars['JSON']>;
  currentProblem?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingIntegrationOrganizationContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BillingIntegrationOrganizationContextHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BillingIntegrationOrganizationContextHistoryRecordUpdateInput = {
  integration?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['JSON']>;
  lastReport?: Maybe<Scalars['JSON']>;
  currentProblem?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingIntegrationOrganizationContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingIntegrationOrganizationContextHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextHistoryRecordWhereInput>>>;
  integration?: Maybe<Scalars['String']>;
  integration_not?: Maybe<Scalars['String']>;
  integration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  settings?: Maybe<Scalars['JSON']>;
  settings_not?: Maybe<Scalars['JSON']>;
  settings_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  settings_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Scalars['JSON']>;
  state_not?: Maybe<Scalars['JSON']>;
  state_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  lastReport?: Maybe<Scalars['JSON']>;
  lastReport_not?: Maybe<Scalars['JSON']>;
  lastReport_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  lastReport_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  currentProblem?: Maybe<Scalars['String']>;
  currentProblem_not?: Maybe<Scalars['String']>;
  currentProblem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currentProblem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BillingIntegrationOrganizationContextHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BillingIntegrationOrganizationContextHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BillingIntegrationOrganizationContextHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingIntegrationOrganizationContextHistoryRecordsCreateInput = {
  data?: Maybe<BillingIntegrationOrganizationContextHistoryRecordCreateInput>;
};

export type BillingIntegrationOrganizationContextHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationOrganizationContextHistoryRecordUpdateInput>;
};

export type BillingIntegrationOrganizationContextRelateToOneInput = {
  create?: Maybe<BillingIntegrationOrganizationContextCreateInput>;
  connect?: Maybe<BillingIntegrationOrganizationContextWhereUniqueInput>;
  disconnect?: Maybe<BillingIntegrationOrganizationContextWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BillingIntegrationOrganizationContextUpdateInput = {
  integration?: Maybe<BillingIntegrationRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  settings?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['JSON']>;
  lastReport?: Maybe<Scalars['JSON']>;
  currentProblem?: Maybe<BillingIntegrationProblemRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BillingIntegrationOrganizationContextWhereInput = {
  AND?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextWhereInput>>>;
  integration?: Maybe<BillingIntegrationWhereInput>;
  integration_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  settings?: Maybe<Scalars['JSON']>;
  settings_not?: Maybe<Scalars['JSON']>;
  settings_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  settings_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Scalars['JSON']>;
  state_not?: Maybe<Scalars['JSON']>;
  state_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  lastReport?: Maybe<Scalars['JSON']>;
  lastReport_not?: Maybe<Scalars['JSON']>;
  lastReport_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  lastReport_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  currentProblem?: Maybe<BillingIntegrationProblemWhereInput>;
  currentProblem_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BillingIntegrationOrganizationContextWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingIntegrationOrganizationContextsCreateInput = {
  data?: Maybe<BillingIntegrationOrganizationContextCreateInput>;
};

export type BillingIntegrationOrganizationContextsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationOrganizationContextUpdateInput>;
};

/**  Report about an error that occurred during integration process. There's 2 target groups for it: Organization employees will see title and message of last problem, so they can be notified, that something went wrong. Support can also read problem messages as well as metadata, which helps them to resolve an issue.  */
export type BillingIntegrationProblem = {
  __typename?: 'BillingIntegrationProblem';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingIntegrationProblem List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingIntegrationProblem List config, or
   *  3. As an alias to a 'name' field on the BillingIntegrationProblem List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingIntegrationProblem List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Integration context  */
  context?: Maybe<BillingIntegrationOrganizationContext>;
  /**  Problem summary, like "Wrong requisites", "No access provided" and so on  */
  title?: Maybe<Scalars['String']>;
  /**  Client understandable message, describing what should client do to fix a problem  */
  message?: Maybe<Scalars['String']>;
  /**  The message metadata, which can help support to resolve an issue  */
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BillingIntegrationProblemCreateInput = {
  context?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  title?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BillingIntegrationProblemRelateToOneInput = {
  create?: Maybe<BillingIntegrationProblemCreateInput>;
  connect?: Maybe<BillingIntegrationProblemWhereUniqueInput>;
  disconnect?: Maybe<BillingIntegrationProblemWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BillingIntegrationProblemUpdateInput = {
  context?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  title?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BillingIntegrationProblemWhereInput = {
  AND?: Maybe<Array<Maybe<BillingIntegrationProblemWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingIntegrationProblemWhereInput>>>;
  context?: Maybe<BillingIntegrationOrganizationContextWhereInput>;
  context_is_null?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  message?: Maybe<Scalars['String']>;
  message_not?: Maybe<Scalars['String']>;
  message_contains?: Maybe<Scalars['String']>;
  message_not_contains?: Maybe<Scalars['String']>;
  message_starts_with?: Maybe<Scalars['String']>;
  message_not_starts_with?: Maybe<Scalars['String']>;
  message_ends_with?: Maybe<Scalars['String']>;
  message_not_ends_with?: Maybe<Scalars['String']>;
  message_i?: Maybe<Scalars['String']>;
  message_not_i?: Maybe<Scalars['String']>;
  message_contains_i?: Maybe<Scalars['String']>;
  message_not_contains_i?: Maybe<Scalars['String']>;
  message_starts_with_i?: Maybe<Scalars['String']>;
  message_not_starts_with_i?: Maybe<Scalars['String']>;
  message_ends_with_i?: Maybe<Scalars['String']>;
  message_not_ends_with_i?: Maybe<Scalars['String']>;
  message_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  message_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BillingIntegrationProblemWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingIntegrationProblemsCreateInput = {
  data?: Maybe<BillingIntegrationProblemCreateInput>;
};

export type BillingIntegrationProblemsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationProblemUpdateInput>;
};

export type BillingIntegrationRelateToOneInput = {
  create?: Maybe<BillingIntegrationCreateInput>;
  connect?: Maybe<BillingIntegrationWhereUniqueInput>;
  disconnect?: Maybe<BillingIntegrationWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BillingIntegrationUpdateInput = {
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['Upload']>;
  shortDescription?: Maybe<Scalars['String']>;
  developer?: Maybe<Scalars['String']>;
  partnerUrl?: Maybe<Scalars['String']>;
  detailedDescription?: Maybe<Scalars['String']>;
  appUrl?: Maybe<Scalars['String']>;
  billingPageTitle?: Maybe<Scalars['String']>;
  group?: Maybe<Scalars['String']>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  dataFormat?: Maybe<BillingIntegrationDataFormatFieldInput>;
  currencyCode?: Maybe<Scalars['String']>;
  accessRights?: Maybe<BillingIntegrationAccessRightRelateToManyInput>;
  isTrustedBankAccountSource?: Maybe<Scalars['Boolean']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  displayPriority?: Maybe<Scalars['Int']>;
  label?: Maybe<Scalars['String']>;
  gallery?: Maybe<Array<Scalars['String']>>;
  price?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BillingIntegrationWhereInput = {
  AND?: Maybe<Array<Maybe<BillingIntegrationWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingIntegrationWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo?: Maybe<Scalars['String']>;
  logo_not?: Maybe<Scalars['String']>;
  logo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  logo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  shortDescription_starts_with?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with?: Maybe<Scalars['String']>;
  shortDescription_ends_with?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with?: Maybe<Scalars['String']>;
  shortDescription_i?: Maybe<Scalars['String']>;
  shortDescription_not_i?: Maybe<Scalars['String']>;
  shortDescription_contains_i?: Maybe<Scalars['String']>;
  shortDescription_not_contains_i?: Maybe<Scalars['String']>;
  shortDescription_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  shortDescription_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer?: Maybe<Scalars['String']>;
  developer_not?: Maybe<Scalars['String']>;
  developer_contains?: Maybe<Scalars['String']>;
  developer_not_contains?: Maybe<Scalars['String']>;
  developer_starts_with?: Maybe<Scalars['String']>;
  developer_not_starts_with?: Maybe<Scalars['String']>;
  developer_ends_with?: Maybe<Scalars['String']>;
  developer_not_ends_with?: Maybe<Scalars['String']>;
  developer_i?: Maybe<Scalars['String']>;
  developer_not_i?: Maybe<Scalars['String']>;
  developer_contains_i?: Maybe<Scalars['String']>;
  developer_not_contains_i?: Maybe<Scalars['String']>;
  developer_starts_with_i?: Maybe<Scalars['String']>;
  developer_not_starts_with_i?: Maybe<Scalars['String']>;
  developer_ends_with_i?: Maybe<Scalars['String']>;
  developer_not_ends_with_i?: Maybe<Scalars['String']>;
  developer_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  developer_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl?: Maybe<Scalars['String']>;
  partnerUrl_not?: Maybe<Scalars['String']>;
  partnerUrl_contains?: Maybe<Scalars['String']>;
  partnerUrl_not_contains?: Maybe<Scalars['String']>;
  partnerUrl_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with?: Maybe<Scalars['String']>;
  partnerUrl_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with?: Maybe<Scalars['String']>;
  partnerUrl_i?: Maybe<Scalars['String']>;
  partnerUrl_not_i?: Maybe<Scalars['String']>;
  partnerUrl_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_not_contains_i?: Maybe<Scalars['String']>;
  partnerUrl_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  partnerUrl_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  partnerUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  partnerUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailedDescription?: Maybe<Scalars['String']>;
  detailedDescription_not?: Maybe<Scalars['String']>;
  detailedDescription_contains?: Maybe<Scalars['String']>;
  detailedDescription_not_contains?: Maybe<Scalars['String']>;
  detailedDescription_starts_with?: Maybe<Scalars['String']>;
  detailedDescription_not_starts_with?: Maybe<Scalars['String']>;
  detailedDescription_ends_with?: Maybe<Scalars['String']>;
  detailedDescription_not_ends_with?: Maybe<Scalars['String']>;
  detailedDescription_i?: Maybe<Scalars['String']>;
  detailedDescription_not_i?: Maybe<Scalars['String']>;
  detailedDescription_contains_i?: Maybe<Scalars['String']>;
  detailedDescription_not_contains_i?: Maybe<Scalars['String']>;
  detailedDescription_starts_with_i?: Maybe<Scalars['String']>;
  detailedDescription_not_starts_with_i?: Maybe<Scalars['String']>;
  detailedDescription_ends_with_i?: Maybe<Scalars['String']>;
  detailedDescription_not_ends_with_i?: Maybe<Scalars['String']>;
  detailedDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailedDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appUrl?: Maybe<Scalars['String']>;
  appUrl_not?: Maybe<Scalars['String']>;
  appUrl_contains?: Maybe<Scalars['String']>;
  appUrl_not_contains?: Maybe<Scalars['String']>;
  appUrl_starts_with?: Maybe<Scalars['String']>;
  appUrl_not_starts_with?: Maybe<Scalars['String']>;
  appUrl_ends_with?: Maybe<Scalars['String']>;
  appUrl_not_ends_with?: Maybe<Scalars['String']>;
  appUrl_i?: Maybe<Scalars['String']>;
  appUrl_not_i?: Maybe<Scalars['String']>;
  appUrl_contains_i?: Maybe<Scalars['String']>;
  appUrl_not_contains_i?: Maybe<Scalars['String']>;
  appUrl_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_not_starts_with_i?: Maybe<Scalars['String']>;
  appUrl_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_not_ends_with_i?: Maybe<Scalars['String']>;
  appUrl_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appUrl_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  billingPageTitle?: Maybe<Scalars['String']>;
  billingPageTitle_not?: Maybe<Scalars['String']>;
  billingPageTitle_contains?: Maybe<Scalars['String']>;
  billingPageTitle_not_contains?: Maybe<Scalars['String']>;
  billingPageTitle_starts_with?: Maybe<Scalars['String']>;
  billingPageTitle_not_starts_with?: Maybe<Scalars['String']>;
  billingPageTitle_ends_with?: Maybe<Scalars['String']>;
  billingPageTitle_not_ends_with?: Maybe<Scalars['String']>;
  billingPageTitle_i?: Maybe<Scalars['String']>;
  billingPageTitle_not_i?: Maybe<Scalars['String']>;
  billingPageTitle_contains_i?: Maybe<Scalars['String']>;
  billingPageTitle_not_contains_i?: Maybe<Scalars['String']>;
  billingPageTitle_starts_with_i?: Maybe<Scalars['String']>;
  billingPageTitle_not_starts_with_i?: Maybe<Scalars['String']>;
  billingPageTitle_ends_with_i?: Maybe<Scalars['String']>;
  billingPageTitle_not_ends_with_i?: Maybe<Scalars['String']>;
  billingPageTitle_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  billingPageTitle_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  group?: Maybe<Scalars['String']>;
  group_not?: Maybe<Scalars['String']>;
  group_contains?: Maybe<Scalars['String']>;
  group_not_contains?: Maybe<Scalars['String']>;
  group_starts_with?: Maybe<Scalars['String']>;
  group_not_starts_with?: Maybe<Scalars['String']>;
  group_ends_with?: Maybe<Scalars['String']>;
  group_not_ends_with?: Maybe<Scalars['String']>;
  group_i?: Maybe<Scalars['String']>;
  group_not_i?: Maybe<Scalars['String']>;
  group_contains_i?: Maybe<Scalars['String']>;
  group_not_contains_i?: Maybe<Scalars['String']>;
  group_starts_with_i?: Maybe<Scalars['String']>;
  group_not_starts_with_i?: Maybe<Scalars['String']>;
  group_ends_with_i?: Maybe<Scalars['String']>;
  group_not_ends_with_i?: Maybe<Scalars['String']>;
  group_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  group_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contextDefaultStatus?: Maybe<Scalars['String']>;
  contextDefaultStatus_not?: Maybe<Scalars['String']>;
  contextDefaultStatus_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contextDefaultStatus_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dataFormat?: Maybe<BillingIntegrationDataFormatFieldInput>;
  dataFormat_not?: Maybe<BillingIntegrationDataFormatFieldInput>;
  dataFormat_in?: Maybe<Array<Maybe<BillingIntegrationDataFormatFieldInput>>>;
  dataFormat_not_in?: Maybe<Array<Maybe<BillingIntegrationDataFormatFieldInput>>>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  condition must be true for all nodes  */
  accessRights_every?: Maybe<BillingIntegrationAccessRightWhereInput>;
  /**  condition must be true for at least 1 node  */
  accessRights_some?: Maybe<BillingIntegrationAccessRightWhereInput>;
  /**  condition must be false for all nodes  */
  accessRights_none?: Maybe<BillingIntegrationAccessRightWhereInput>;
  isTrustedBankAccountSource?: Maybe<Scalars['Boolean']>;
  isTrustedBankAccountSource_not?: Maybe<Scalars['Boolean']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isHidden_not?: Maybe<Scalars['Boolean']>;
  displayPriority?: Maybe<Scalars['Int']>;
  displayPriority_not?: Maybe<Scalars['Int']>;
  displayPriority_lt?: Maybe<Scalars['Int']>;
  displayPriority_lte?: Maybe<Scalars['Int']>;
  displayPriority_gt?: Maybe<Scalars['Int']>;
  displayPriority_gte?: Maybe<Scalars['Int']>;
  displayPriority_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  displayPriority_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  label?: Maybe<Scalars['String']>;
  label_not?: Maybe<Scalars['String']>;
  label_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  label_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  gallery?: Maybe<Array<Scalars['String']>>;
  gallery_not?: Maybe<Array<Scalars['String']>>;
  gallery_in?: Maybe<Array<Maybe<Array<Scalars['String']>>>>;
  gallery_not_in?: Maybe<Array<Maybe<Array<Scalars['String']>>>>;
  price?: Maybe<Scalars['String']>;
  price_not?: Maybe<Scalars['String']>;
  price_contains?: Maybe<Scalars['String']>;
  price_not_contains?: Maybe<Scalars['String']>;
  price_starts_with?: Maybe<Scalars['String']>;
  price_not_starts_with?: Maybe<Scalars['String']>;
  price_ends_with?: Maybe<Scalars['String']>;
  price_not_ends_with?: Maybe<Scalars['String']>;
  price_i?: Maybe<Scalars['String']>;
  price_not_i?: Maybe<Scalars['String']>;
  price_contains_i?: Maybe<Scalars['String']>;
  price_not_contains_i?: Maybe<Scalars['String']>;
  price_starts_with_i?: Maybe<Scalars['String']>;
  price_not_starts_with_i?: Maybe<Scalars['String']>;
  price_ends_with_i?: Maybe<Scalars['String']>;
  price_not_ends_with_i?: Maybe<Scalars['String']>;
  price_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  price_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BillingIntegrationWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingIntegrationsCreateInput = {
  data?: Maybe<BillingIntegrationCreateInput>;
};

export type BillingIntegrationsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationUpdateInput>;
};

export type BillingPropertiesCreateInput = {
  data?: Maybe<BillingPropertyCreateInput>;
};

export type BillingPropertiesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingPropertyUpdateInput>;
};

/**  All `property` objects from `billing data source`  */
export type BillingProperty = {
  __typename?: 'BillingProperty';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingProperty List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingProperty List config, or
   *  3. As an alias to a 'name' field on the BillingProperty List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingProperty List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Integration context  */
  context?: Maybe<BillingIntegrationOrganizationContext>;
  /**  Id of object in external service which represents current item. Mostly used for internal needs of integration services for matching our objects with theirs  */
  importId?: Maybe<Scalars['String']>;
  /**  Raw non-structured data obtained from the `billing data source`. Used only for the internal needs of the `integration component`.  */
  raw?: Maybe<Scalars['JSON']>;
  /**  A well-known universal identifier that allows you to identify the same objects in different systems. It may differ in different countries. Example: for Russia, the FIAS ID is used  */
  globalId?: Maybe<Scalars['String']>;
  /**  [DEPRECATED] Normalized address from `billing data source`. Used to map Properties to BillingProperties  */
  normalizedAddress?: Maybe<Scalars['String']>;
  /**  Structured metadata obtained from the `billing data source`. Some of this data is required for use in the `receipt template`. Examples of data keys: `total space of building`, `property beginning of exploitation year`, `has cultural heritage status`, `number of underground floors`, `number of above-ground floors`  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Link to the property model  */
  property?: Maybe<Property>;
  id: Scalars['ID'];
  /**  Normalized address  */
  address?: Maybe<Scalars['String']>;
  /**  The unique key of the address  */
  addressKey?: Maybe<Scalars['String']>;
  /**  Property address components  */
  addressMeta?: Maybe<AddressMetaField>;
  /**  The origins of the address (some strings which may looks like real address or some id)  */
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BillingPropertyCreateInput = {
  context?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  importId?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  globalId?: Maybe<Scalars['String']>;
  normalizedAddress?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BillingPropertyHistoryRecord = {
  __typename?: 'BillingPropertyHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingPropertyHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingPropertyHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BillingPropertyHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingPropertyHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  globalId?: Maybe<Scalars['String']>;
  normalizedAddress?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingPropertyHistoryRecordCreateInput = {
  context?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  globalId?: Maybe<Scalars['String']>;
  normalizedAddress?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['JSON']>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BillingPropertyHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BillingPropertyHistoryRecordUpdateInput = {
  context?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  globalId?: Maybe<Scalars['String']>;
  normalizedAddress?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['JSON']>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingPropertyHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BillingPropertyHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingPropertyHistoryRecordWhereInput>>>;
  context?: Maybe<Scalars['String']>;
  context_not?: Maybe<Scalars['String']>;
  context_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  context_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  raw?: Maybe<Scalars['JSON']>;
  raw_not?: Maybe<Scalars['JSON']>;
  raw_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  raw_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  globalId?: Maybe<Scalars['String']>;
  globalId_not?: Maybe<Scalars['String']>;
  globalId_contains?: Maybe<Scalars['String']>;
  globalId_not_contains?: Maybe<Scalars['String']>;
  globalId_starts_with?: Maybe<Scalars['String']>;
  globalId_not_starts_with?: Maybe<Scalars['String']>;
  globalId_ends_with?: Maybe<Scalars['String']>;
  globalId_not_ends_with?: Maybe<Scalars['String']>;
  globalId_i?: Maybe<Scalars['String']>;
  globalId_not_i?: Maybe<Scalars['String']>;
  globalId_contains_i?: Maybe<Scalars['String']>;
  globalId_not_contains_i?: Maybe<Scalars['String']>;
  globalId_starts_with_i?: Maybe<Scalars['String']>;
  globalId_not_starts_with_i?: Maybe<Scalars['String']>;
  globalId_ends_with_i?: Maybe<Scalars['String']>;
  globalId_not_ends_with_i?: Maybe<Scalars['String']>;
  globalId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  globalId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  normalizedAddress?: Maybe<Scalars['String']>;
  normalizedAddress_not?: Maybe<Scalars['String']>;
  normalizedAddress_contains?: Maybe<Scalars['String']>;
  normalizedAddress_not_contains?: Maybe<Scalars['String']>;
  normalizedAddress_starts_with?: Maybe<Scalars['String']>;
  normalizedAddress_not_starts_with?: Maybe<Scalars['String']>;
  normalizedAddress_ends_with?: Maybe<Scalars['String']>;
  normalizedAddress_not_ends_with?: Maybe<Scalars['String']>;
  normalizedAddress_i?: Maybe<Scalars['String']>;
  normalizedAddress_not_i?: Maybe<Scalars['String']>;
  normalizedAddress_contains_i?: Maybe<Scalars['String']>;
  normalizedAddress_not_contains_i?: Maybe<Scalars['String']>;
  normalizedAddress_starts_with_i?: Maybe<Scalars['String']>;
  normalizedAddress_not_starts_with_i?: Maybe<Scalars['String']>;
  normalizedAddress_ends_with_i?: Maybe<Scalars['String']>;
  normalizedAddress_not_ends_with_i?: Maybe<Scalars['String']>;
  normalizedAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  normalizedAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  property?: Maybe<Scalars['JSON']>;
  property_not?: Maybe<Scalars['JSON']>;
  property_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  address?: Maybe<Scalars['String']>;
  address_not?: Maybe<Scalars['String']>;
  address_contains?: Maybe<Scalars['String']>;
  address_not_contains?: Maybe<Scalars['String']>;
  address_starts_with?: Maybe<Scalars['String']>;
  address_not_starts_with?: Maybe<Scalars['String']>;
  address_ends_with?: Maybe<Scalars['String']>;
  address_not_ends_with?: Maybe<Scalars['String']>;
  address_i?: Maybe<Scalars['String']>;
  address_not_i?: Maybe<Scalars['String']>;
  address_contains_i?: Maybe<Scalars['String']>;
  address_not_contains_i?: Maybe<Scalars['String']>;
  address_starts_with_i?: Maybe<Scalars['String']>;
  address_not_starts_with_i?: Maybe<Scalars['String']>;
  address_ends_with_i?: Maybe<Scalars['String']>;
  address_not_ends_with_i?: Maybe<Scalars['String']>;
  address_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  address_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey?: Maybe<Scalars['String']>;
  addressKey_not?: Maybe<Scalars['String']>;
  addressKey_contains?: Maybe<Scalars['String']>;
  addressKey_not_contains?: Maybe<Scalars['String']>;
  addressKey_starts_with?: Maybe<Scalars['String']>;
  addressKey_not_starts_with?: Maybe<Scalars['String']>;
  addressKey_ends_with?: Maybe<Scalars['String']>;
  addressKey_not_ends_with?: Maybe<Scalars['String']>;
  addressKey_i?: Maybe<Scalars['String']>;
  addressKey_not_i?: Maybe<Scalars['String']>;
  addressKey_contains_i?: Maybe<Scalars['String']>;
  addressKey_not_contains_i?: Maybe<Scalars['String']>;
  addressKey_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_not_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_not_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressMeta_not?: Maybe<Scalars['JSON']>;
  addressMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources?: Maybe<Scalars['JSON']>;
  addressSources_not?: Maybe<Scalars['JSON']>;
  addressSources_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BillingPropertyHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BillingPropertyHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BillingPropertyHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BillingPropertyHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BillingPropertyHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingPropertyHistoryRecordsCreateInput = {
  data?: Maybe<BillingPropertyHistoryRecordCreateInput>;
};

export type BillingPropertyHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingPropertyHistoryRecordUpdateInput>;
};

export type BillingPropertyRelateToOneInput = {
  create?: Maybe<BillingPropertyCreateInput>;
  connect?: Maybe<BillingPropertyWhereUniqueInput>;
  disconnect?: Maybe<BillingPropertyWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BillingPropertyUpdateInput = {
  context?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  importId?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  globalId?: Maybe<Scalars['String']>;
  normalizedAddress?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BillingPropertyWhereInput = {
  AND?: Maybe<Array<Maybe<BillingPropertyWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingPropertyWhereInput>>>;
  context?: Maybe<BillingIntegrationOrganizationContextWhereInput>;
  context_is_null?: Maybe<Scalars['Boolean']>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  raw?: Maybe<Scalars['JSON']>;
  raw_not?: Maybe<Scalars['JSON']>;
  raw_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  raw_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  globalId?: Maybe<Scalars['String']>;
  globalId_not?: Maybe<Scalars['String']>;
  globalId_contains?: Maybe<Scalars['String']>;
  globalId_not_contains?: Maybe<Scalars['String']>;
  globalId_starts_with?: Maybe<Scalars['String']>;
  globalId_not_starts_with?: Maybe<Scalars['String']>;
  globalId_ends_with?: Maybe<Scalars['String']>;
  globalId_not_ends_with?: Maybe<Scalars['String']>;
  globalId_i?: Maybe<Scalars['String']>;
  globalId_not_i?: Maybe<Scalars['String']>;
  globalId_contains_i?: Maybe<Scalars['String']>;
  globalId_not_contains_i?: Maybe<Scalars['String']>;
  globalId_starts_with_i?: Maybe<Scalars['String']>;
  globalId_not_starts_with_i?: Maybe<Scalars['String']>;
  globalId_ends_with_i?: Maybe<Scalars['String']>;
  globalId_not_ends_with_i?: Maybe<Scalars['String']>;
  globalId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  globalId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  normalizedAddress?: Maybe<Scalars['String']>;
  normalizedAddress_not?: Maybe<Scalars['String']>;
  normalizedAddress_contains?: Maybe<Scalars['String']>;
  normalizedAddress_not_contains?: Maybe<Scalars['String']>;
  normalizedAddress_starts_with?: Maybe<Scalars['String']>;
  normalizedAddress_not_starts_with?: Maybe<Scalars['String']>;
  normalizedAddress_ends_with?: Maybe<Scalars['String']>;
  normalizedAddress_not_ends_with?: Maybe<Scalars['String']>;
  normalizedAddress_i?: Maybe<Scalars['String']>;
  normalizedAddress_not_i?: Maybe<Scalars['String']>;
  normalizedAddress_contains_i?: Maybe<Scalars['String']>;
  normalizedAddress_not_contains_i?: Maybe<Scalars['String']>;
  normalizedAddress_starts_with_i?: Maybe<Scalars['String']>;
  normalizedAddress_not_starts_with_i?: Maybe<Scalars['String']>;
  normalizedAddress_ends_with_i?: Maybe<Scalars['String']>;
  normalizedAddress_not_ends_with_i?: Maybe<Scalars['String']>;
  normalizedAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  normalizedAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  address?: Maybe<Scalars['String']>;
  address_not?: Maybe<Scalars['String']>;
  address_contains?: Maybe<Scalars['String']>;
  address_not_contains?: Maybe<Scalars['String']>;
  address_starts_with?: Maybe<Scalars['String']>;
  address_not_starts_with?: Maybe<Scalars['String']>;
  address_ends_with?: Maybe<Scalars['String']>;
  address_not_ends_with?: Maybe<Scalars['String']>;
  address_i?: Maybe<Scalars['String']>;
  address_not_i?: Maybe<Scalars['String']>;
  address_contains_i?: Maybe<Scalars['String']>;
  address_not_contains_i?: Maybe<Scalars['String']>;
  address_starts_with_i?: Maybe<Scalars['String']>;
  address_not_starts_with_i?: Maybe<Scalars['String']>;
  address_ends_with_i?: Maybe<Scalars['String']>;
  address_not_ends_with_i?: Maybe<Scalars['String']>;
  address_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  address_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey?: Maybe<Scalars['String']>;
  addressKey_not?: Maybe<Scalars['String']>;
  addressKey_contains?: Maybe<Scalars['String']>;
  addressKey_not_contains?: Maybe<Scalars['String']>;
  addressKey_starts_with?: Maybe<Scalars['String']>;
  addressKey_not_starts_with?: Maybe<Scalars['String']>;
  addressKey_ends_with?: Maybe<Scalars['String']>;
  addressKey_not_ends_with?: Maybe<Scalars['String']>;
  addressKey_i?: Maybe<Scalars['String']>;
  addressKey_not_i?: Maybe<Scalars['String']>;
  addressKey_contains_i?: Maybe<Scalars['String']>;
  addressKey_not_contains_i?: Maybe<Scalars['String']>;
  addressKey_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_not_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_not_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressMeta_not?: Maybe<Scalars['JSON']>;
  addressMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources?: Maybe<Scalars['JSON']>;
  addressSources_not?: Maybe<Scalars['JSON']>;
  addressSources_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BillingPropertyWhereUniqueInput = {
  id: Scalars['ID'];
};

/**  Account monthly invoice document  */
export type BillingReceipt = {
  __typename?: 'BillingReceipt';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingReceipt List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingReceipt List config, or
   *  3. As an alias to a 'name' field on the BillingReceipt List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingReceipt List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Integration context  */
  context?: Maybe<BillingIntegrationOrganizationContext>;
  /**  Billing property  */
  property?: Maybe<BillingProperty>;
  /**  Billing account  */
  account?: Maybe<BillingAccount>;
  /**  Period date: Generated on template <year>-<month>-01  */
  period?: Maybe<Scalars['String']>;
  /**  `billing receipt` local object ID. Unique up to billing context. It is unique up to the context. The constrain is a combination of contextId and importId.  */
  importId?: Maybe<Scalars['String']>;
  /**  A category to print on display on the payment document.  */
  category?: Maybe<BillingCategory>;
  /**  A number to print on the payment document.  */
  printableNumber?: Maybe<Scalars['String']>;
  /**  Raw non-structured data obtained from the `billing data source`. Used only for the internal needs of the `integration component`.  */
  raw?: Maybe<Scalars['JSON']>;
  /**  Total sum to pay. Usually counts as the sum of all services.  */
  toPay?: Maybe<Scalars['String']>;
  /**  Sum to pay details. Detail level 2  */
  toPayDetails?: Maybe<BillingReceiptToPayDetailsField>;
  /**  Services to pay for. Every service has id, name and toPay. Service may or may not have toPay detail. Detail level 3 and 4  */
  services?: Maybe<Array<BillingReceiptServiceField>>;
  /**  Recipient. Should contain all meta information to identify the organization  */
  recipient?: Maybe<BillingReceiptsRecipientField>;
  /**  Relation to the BillingRecipient. Going to override recipient field, has the same meaning  */
  receiver?: Maybe<BillingRecipient>;
  /**  Indicates if services are valid and add up to total sum toPay.  */
  invalidServicesError?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BillingReceiptCreateInput = {
  context?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  property?: Maybe<BillingPropertyRelateToOneInput>;
  account?: Maybe<BillingAccountRelateToOneInput>;
  period?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  category?: Maybe<BillingCategoryRelateToOneInput>;
  printableNumber?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  toPay?: Maybe<Scalars['String']>;
  toPayDetails?: Maybe<BillingReceiptToPayDetailsFieldInput>;
  services?: Maybe<Array<BillingReceiptServiceFieldInput>>;
  recipient?: Maybe<BillingReceiptsRecipientFieldInput>;
  receiver?: Maybe<BillingRecipientRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BillingReceiptHistoryRecord = {
  __typename?: 'BillingReceiptHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingReceiptHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingReceiptHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BillingReceiptHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingReceiptHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  account?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  printableNumber?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  toPay?: Maybe<Scalars['String']>;
  toPayDetails?: Maybe<Scalars['JSON']>;
  services?: Maybe<Scalars['JSON']>;
  recipient?: Maybe<Scalars['JSON']>;
  receiver?: Maybe<Scalars['String']>;
  invalidServicesError?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingReceiptHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingReceiptHistoryRecordCreateInput = {
  context?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  account?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  printableNumber?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  toPay?: Maybe<Scalars['String']>;
  toPayDetails?: Maybe<Scalars['JSON']>;
  services?: Maybe<Scalars['JSON']>;
  recipient?: Maybe<Scalars['JSON']>;
  receiver?: Maybe<Scalars['String']>;
  invalidServicesError?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingReceiptHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BillingReceiptHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BillingReceiptHistoryRecordUpdateInput = {
  context?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  account?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  printableNumber?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  toPay?: Maybe<Scalars['String']>;
  toPayDetails?: Maybe<Scalars['JSON']>;
  services?: Maybe<Scalars['JSON']>;
  recipient?: Maybe<Scalars['JSON']>;
  receiver?: Maybe<Scalars['String']>;
  invalidServicesError?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingReceiptHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingReceiptHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BillingReceiptHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingReceiptHistoryRecordWhereInput>>>;
  context?: Maybe<Scalars['String']>;
  context_not?: Maybe<Scalars['String']>;
  context_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  context_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  account?: Maybe<Scalars['String']>;
  account_not?: Maybe<Scalars['String']>;
  account_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  account_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  period?: Maybe<Scalars['String']>;
  period_not?: Maybe<Scalars['String']>;
  period_lt?: Maybe<Scalars['String']>;
  period_lte?: Maybe<Scalars['String']>;
  period_gt?: Maybe<Scalars['String']>;
  period_gte?: Maybe<Scalars['String']>;
  period_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  period_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  category_not?: Maybe<Scalars['String']>;
  category_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  printableNumber?: Maybe<Scalars['String']>;
  printableNumber_not?: Maybe<Scalars['String']>;
  printableNumber_contains?: Maybe<Scalars['String']>;
  printableNumber_not_contains?: Maybe<Scalars['String']>;
  printableNumber_starts_with?: Maybe<Scalars['String']>;
  printableNumber_not_starts_with?: Maybe<Scalars['String']>;
  printableNumber_ends_with?: Maybe<Scalars['String']>;
  printableNumber_not_ends_with?: Maybe<Scalars['String']>;
  printableNumber_i?: Maybe<Scalars['String']>;
  printableNumber_not_i?: Maybe<Scalars['String']>;
  printableNumber_contains_i?: Maybe<Scalars['String']>;
  printableNumber_not_contains_i?: Maybe<Scalars['String']>;
  printableNumber_starts_with_i?: Maybe<Scalars['String']>;
  printableNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  printableNumber_ends_with_i?: Maybe<Scalars['String']>;
  printableNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  printableNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  printableNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  raw?: Maybe<Scalars['JSON']>;
  raw_not?: Maybe<Scalars['JSON']>;
  raw_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  raw_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  toPay?: Maybe<Scalars['String']>;
  toPay_not?: Maybe<Scalars['String']>;
  toPay_lt?: Maybe<Scalars['String']>;
  toPay_lte?: Maybe<Scalars['String']>;
  toPay_gt?: Maybe<Scalars['String']>;
  toPay_gte?: Maybe<Scalars['String']>;
  toPay_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  toPay_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  toPayDetails?: Maybe<Scalars['JSON']>;
  toPayDetails_not?: Maybe<Scalars['JSON']>;
  toPayDetails_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  toPayDetails_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  services?: Maybe<Scalars['JSON']>;
  services_not?: Maybe<Scalars['JSON']>;
  services_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  services_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  recipient?: Maybe<Scalars['JSON']>;
  recipient_not?: Maybe<Scalars['JSON']>;
  recipient_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  recipient_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  receiver?: Maybe<Scalars['String']>;
  receiver_not?: Maybe<Scalars['String']>;
  receiver_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  receiver_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  invalidServicesError?: Maybe<Scalars['JSON']>;
  invalidServicesError_not?: Maybe<Scalars['JSON']>;
  invalidServicesError_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  invalidServicesError_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BillingReceiptHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BillingReceiptHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BillingReceiptHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BillingReceiptHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BillingReceiptHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingReceiptHistoryRecordsCreateInput = {
  data?: Maybe<BillingReceiptHistoryRecordCreateInput>;
};

export type BillingReceiptHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingReceiptHistoryRecordUpdateInput>;
};

export type BillingReceiptRelateToOneInput = {
  create?: Maybe<BillingReceiptCreateInput>;
  connect?: Maybe<BillingReceiptWhereUniqueInput>;
  disconnect?: Maybe<BillingReceiptWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BillingReceiptServiceField = {
  __typename?: 'BillingReceiptServiceField';
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  toPay: Scalars['String'];
  toPayDetails?: Maybe<BillingReceiptServiceToPayDetailsField>;
};

export type BillingReceiptServiceFieldInput = {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  toPay: Scalars['String'];
  toPayDetails?: Maybe<BillingReceiptServiceToPayDetailsFieldInput>;
};

export type BillingReceiptServiceToPayDetailsField = {
  __typename?: 'BillingReceiptServiceToPayDetailsField';
  formula?: Maybe<Scalars['String']>;
  charge?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  recalculation?: Maybe<Scalars['String']>;
  privilege?: Maybe<Scalars['String']>;
  penalty?: Maybe<Scalars['String']>;
  paid?: Maybe<Scalars['String']>;
  volume?: Maybe<Scalars['String']>;
  tariff?: Maybe<Scalars['String']>;
  measure?: Maybe<Scalars['String']>;
};

export type BillingReceiptServiceToPayDetailsFieldInput = {
  formula?: Maybe<Scalars['String']>;
  charge?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  recalculation?: Maybe<Scalars['String']>;
  privilege?: Maybe<Scalars['String']>;
  penalty?: Maybe<Scalars['String']>;
  paid?: Maybe<Scalars['String']>;
  volume?: Maybe<Scalars['String']>;
  tariff?: Maybe<Scalars['String']>;
  measure?: Maybe<Scalars['String']>;
};

export type BillingReceiptToPayDetailsField = {
  __typename?: 'BillingReceiptToPayDetailsField';
  formula?: Maybe<Scalars['String']>;
  charge?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  recalculation?: Maybe<Scalars['String']>;
  privilege?: Maybe<Scalars['String']>;
  penalty?: Maybe<Scalars['String']>;
  paid?: Maybe<Scalars['String']>;
};

export type BillingReceiptToPayDetailsFieldInput = {
  formula?: Maybe<Scalars['String']>;
  charge?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['String']>;
  recalculation?: Maybe<Scalars['String']>;
  privilege?: Maybe<Scalars['String']>;
  penalty?: Maybe<Scalars['String']>;
  paid?: Maybe<Scalars['String']>;
};

export type BillingReceiptUpdateInput = {
  context?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  property?: Maybe<BillingPropertyRelateToOneInput>;
  account?: Maybe<BillingAccountRelateToOneInput>;
  period?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  category?: Maybe<BillingCategoryRelateToOneInput>;
  printableNumber?: Maybe<Scalars['String']>;
  raw?: Maybe<Scalars['JSON']>;
  toPay?: Maybe<Scalars['String']>;
  toPayDetails?: Maybe<BillingReceiptToPayDetailsFieldInput>;
  services?: Maybe<Array<BillingReceiptServiceFieldInput>>;
  recipient?: Maybe<BillingReceiptsRecipientFieldInput>;
  receiver?: Maybe<BillingRecipientRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BillingReceiptWhereInput = {
  AND?: Maybe<Array<Maybe<BillingReceiptWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingReceiptWhereInput>>>;
  context?: Maybe<BillingIntegrationOrganizationContextWhereInput>;
  context_is_null?: Maybe<Scalars['Boolean']>;
  property?: Maybe<BillingPropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  account?: Maybe<BillingAccountWhereInput>;
  account_is_null?: Maybe<Scalars['Boolean']>;
  period?: Maybe<Scalars['String']>;
  period_not?: Maybe<Scalars['String']>;
  period_lt?: Maybe<Scalars['String']>;
  period_lte?: Maybe<Scalars['String']>;
  period_gt?: Maybe<Scalars['String']>;
  period_gte?: Maybe<Scalars['String']>;
  period_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  period_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<BillingCategoryWhereInput>;
  category_is_null?: Maybe<Scalars['Boolean']>;
  printableNumber?: Maybe<Scalars['String']>;
  printableNumber_not?: Maybe<Scalars['String']>;
  printableNumber_contains?: Maybe<Scalars['String']>;
  printableNumber_not_contains?: Maybe<Scalars['String']>;
  printableNumber_starts_with?: Maybe<Scalars['String']>;
  printableNumber_not_starts_with?: Maybe<Scalars['String']>;
  printableNumber_ends_with?: Maybe<Scalars['String']>;
  printableNumber_not_ends_with?: Maybe<Scalars['String']>;
  printableNumber_i?: Maybe<Scalars['String']>;
  printableNumber_not_i?: Maybe<Scalars['String']>;
  printableNumber_contains_i?: Maybe<Scalars['String']>;
  printableNumber_not_contains_i?: Maybe<Scalars['String']>;
  printableNumber_starts_with_i?: Maybe<Scalars['String']>;
  printableNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  printableNumber_ends_with_i?: Maybe<Scalars['String']>;
  printableNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  printableNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  printableNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  raw?: Maybe<Scalars['JSON']>;
  raw_not?: Maybe<Scalars['JSON']>;
  raw_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  raw_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  toPay?: Maybe<Scalars['String']>;
  toPay_not?: Maybe<Scalars['String']>;
  toPay_lt?: Maybe<Scalars['String']>;
  toPay_lte?: Maybe<Scalars['String']>;
  toPay_gt?: Maybe<Scalars['String']>;
  toPay_gte?: Maybe<Scalars['String']>;
  toPay_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  toPay_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  toPayDetails?: Maybe<BillingReceiptToPayDetailsFieldInput>;
  toPayDetails_not?: Maybe<BillingReceiptToPayDetailsFieldInput>;
  toPayDetails_in?: Maybe<Array<Maybe<BillingReceiptToPayDetailsFieldInput>>>;
  toPayDetails_not_in?: Maybe<Array<Maybe<BillingReceiptToPayDetailsFieldInput>>>;
  services?: Maybe<Array<BillingReceiptServiceFieldInput>>;
  services_not?: Maybe<Array<BillingReceiptServiceFieldInput>>;
  services_in?: Maybe<Array<Maybe<Array<BillingReceiptServiceFieldInput>>>>;
  services_not_in?: Maybe<Array<Maybe<Array<BillingReceiptServiceFieldInput>>>>;
  recipient?: Maybe<BillingReceiptsRecipientFieldInput>;
  recipient_not?: Maybe<BillingReceiptsRecipientFieldInput>;
  recipient_in?: Maybe<Array<Maybe<BillingReceiptsRecipientFieldInput>>>;
  recipient_not_in?: Maybe<Array<Maybe<BillingReceiptsRecipientFieldInput>>>;
  receiver?: Maybe<BillingRecipientWhereInput>;
  receiver_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BillingReceiptWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingReceiptsCreateInput = {
  data?: Maybe<BillingReceiptCreateInput>;
};

export type BillingReceiptsField = {
  __typename?: 'BillingReceiptsField';
  id: Scalars['String'];
};

export type BillingReceiptsFieldInput = {
  id: Scalars['String'];
};

export type BillingReceiptsRecipientField = {
  __typename?: 'BillingReceiptsRecipientField';
  name?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  offsettingAccount?: Maybe<Scalars['String']>;
  tin: Scalars['String'];
  iec?: Maybe<Scalars['String']>;
  bic: Scalars['String'];
  bankAccount: Scalars['String'];
};

export type BillingReceiptsRecipientFieldInput = {
  name?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  offsettingAccount?: Maybe<Scalars['String']>;
  tin: Scalars['String'];
  iec?: Maybe<Scalars['String']>;
  bic: Scalars['String'];
  bankAccount: Scalars['String'];
};

export type BillingReceiptsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingReceiptUpdateInput>;
};

/**  Organization' billing information: bank account, bic, and so on  */
export type BillingRecipient = {
  __typename?: 'BillingRecipient';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingRecipient List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingRecipient List config, or
   *  3. As an alias to a 'name' field on the BillingRecipient List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingRecipient List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Id of object in external service which represents current item. Mostly used for internal needs of integration services for matching our objects with theirs  */
  importId?: Maybe<Scalars['String']>;
  /**  Integration context  */
  context?: Maybe<BillingIntegrationOrganizationContext>;
  /**  Tax Identification Number  */
  tin?: Maybe<Scalars['String']>;
  /**  Importer-Exporter Code  */
  iec?: Maybe<Scalars['String']>;
  /**  Bank Identification Code  */
  bic?: Maybe<Scalars['String']>;
  /**  Number of bank account of this recipient  */
  bankAccount?: Maybe<Scalars['String']>;
  /**  Bank name  */
  bankName?: Maybe<Scalars['String']>;
  /**  Bank account  */
  offsettingAccount?: Maybe<Scalars['String']>;
  /**  Location code (Classifier of Territories of Municipal Units - OKTMO)  */
  territoryCode?: Maybe<Scalars['String']>;
  /**  For what reason is this recipient is able to collect payments.  */
  purpose?: Maybe<Scalars['String']>;
  /**  Billing Recipient name. Usually the juristic name of the organization  */
  name?: Maybe<Scalars['String']>;
  /**  If set to True, then this billing recipient info is considered allowed and users are allowed to pay for receipts with this recipient  */
  isApproved?: Maybe<Scalars['Boolean']>;
  /**  Structured metadata obtained from the `billing data source`. The structure depends on the integration system.  */
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type BillingRecipientCreateInput = {
  importId?: Maybe<Scalars['String']>;
  context?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  tin?: Maybe<Scalars['String']>;
  iec?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  bankAccount?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  offsettingAccount?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type BillingRecipientHistoryRecord = {
  __typename?: 'BillingRecipientHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the BillingRecipientHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the BillingRecipientHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the BillingRecipientHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the BillingRecipientHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  iec?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  bankAccount?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  offsettingAccount?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingRecipientHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingRecipientHistoryRecordCreateInput = {
  importId?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  iec?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  bankAccount?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  offsettingAccount?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingRecipientHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum BillingRecipientHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type BillingRecipientHistoryRecordUpdateInput = {
  importId?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  iec?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  bankAccount?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  offsettingAccount?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<BillingRecipientHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type BillingRecipientHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<BillingRecipientHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingRecipientHistoryRecordWhereInput>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  context?: Maybe<Scalars['String']>;
  context_not?: Maybe<Scalars['String']>;
  context_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  context_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin?: Maybe<Scalars['String']>;
  tin_not?: Maybe<Scalars['String']>;
  tin_contains?: Maybe<Scalars['String']>;
  tin_not_contains?: Maybe<Scalars['String']>;
  tin_starts_with?: Maybe<Scalars['String']>;
  tin_not_starts_with?: Maybe<Scalars['String']>;
  tin_ends_with?: Maybe<Scalars['String']>;
  tin_not_ends_with?: Maybe<Scalars['String']>;
  tin_i?: Maybe<Scalars['String']>;
  tin_not_i?: Maybe<Scalars['String']>;
  tin_contains_i?: Maybe<Scalars['String']>;
  tin_not_contains_i?: Maybe<Scalars['String']>;
  tin_starts_with_i?: Maybe<Scalars['String']>;
  tin_not_starts_with_i?: Maybe<Scalars['String']>;
  tin_ends_with_i?: Maybe<Scalars['String']>;
  tin_not_ends_with_i?: Maybe<Scalars['String']>;
  tin_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  iec?: Maybe<Scalars['String']>;
  iec_not?: Maybe<Scalars['String']>;
  iec_contains?: Maybe<Scalars['String']>;
  iec_not_contains?: Maybe<Scalars['String']>;
  iec_starts_with?: Maybe<Scalars['String']>;
  iec_not_starts_with?: Maybe<Scalars['String']>;
  iec_ends_with?: Maybe<Scalars['String']>;
  iec_not_ends_with?: Maybe<Scalars['String']>;
  iec_i?: Maybe<Scalars['String']>;
  iec_not_i?: Maybe<Scalars['String']>;
  iec_contains_i?: Maybe<Scalars['String']>;
  iec_not_contains_i?: Maybe<Scalars['String']>;
  iec_starts_with_i?: Maybe<Scalars['String']>;
  iec_not_starts_with_i?: Maybe<Scalars['String']>;
  iec_ends_with_i?: Maybe<Scalars['String']>;
  iec_not_ends_with_i?: Maybe<Scalars['String']>;
  iec_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  iec_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bic?: Maybe<Scalars['String']>;
  bic_not?: Maybe<Scalars['String']>;
  bic_contains?: Maybe<Scalars['String']>;
  bic_not_contains?: Maybe<Scalars['String']>;
  bic_starts_with?: Maybe<Scalars['String']>;
  bic_not_starts_with?: Maybe<Scalars['String']>;
  bic_ends_with?: Maybe<Scalars['String']>;
  bic_not_ends_with?: Maybe<Scalars['String']>;
  bic_i?: Maybe<Scalars['String']>;
  bic_not_i?: Maybe<Scalars['String']>;
  bic_contains_i?: Maybe<Scalars['String']>;
  bic_not_contains_i?: Maybe<Scalars['String']>;
  bic_starts_with_i?: Maybe<Scalars['String']>;
  bic_not_starts_with_i?: Maybe<Scalars['String']>;
  bic_ends_with_i?: Maybe<Scalars['String']>;
  bic_not_ends_with_i?: Maybe<Scalars['String']>;
  bic_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bic_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankAccount?: Maybe<Scalars['String']>;
  bankAccount_not?: Maybe<Scalars['String']>;
  bankAccount_contains?: Maybe<Scalars['String']>;
  bankAccount_not_contains?: Maybe<Scalars['String']>;
  bankAccount_starts_with?: Maybe<Scalars['String']>;
  bankAccount_not_starts_with?: Maybe<Scalars['String']>;
  bankAccount_ends_with?: Maybe<Scalars['String']>;
  bankAccount_not_ends_with?: Maybe<Scalars['String']>;
  bankAccount_i?: Maybe<Scalars['String']>;
  bankAccount_not_i?: Maybe<Scalars['String']>;
  bankAccount_contains_i?: Maybe<Scalars['String']>;
  bankAccount_not_contains_i?: Maybe<Scalars['String']>;
  bankAccount_starts_with_i?: Maybe<Scalars['String']>;
  bankAccount_not_starts_with_i?: Maybe<Scalars['String']>;
  bankAccount_ends_with_i?: Maybe<Scalars['String']>;
  bankAccount_not_ends_with_i?: Maybe<Scalars['String']>;
  bankAccount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankAccount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName?: Maybe<Scalars['String']>;
  bankName_not?: Maybe<Scalars['String']>;
  bankName_contains?: Maybe<Scalars['String']>;
  bankName_not_contains?: Maybe<Scalars['String']>;
  bankName_starts_with?: Maybe<Scalars['String']>;
  bankName_not_starts_with?: Maybe<Scalars['String']>;
  bankName_ends_with?: Maybe<Scalars['String']>;
  bankName_not_ends_with?: Maybe<Scalars['String']>;
  bankName_i?: Maybe<Scalars['String']>;
  bankName_not_i?: Maybe<Scalars['String']>;
  bankName_contains_i?: Maybe<Scalars['String']>;
  bankName_not_contains_i?: Maybe<Scalars['String']>;
  bankName_starts_with_i?: Maybe<Scalars['String']>;
  bankName_not_starts_with_i?: Maybe<Scalars['String']>;
  bankName_ends_with_i?: Maybe<Scalars['String']>;
  bankName_not_ends_with_i?: Maybe<Scalars['String']>;
  bankName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  offsettingAccount?: Maybe<Scalars['String']>;
  offsettingAccount_not?: Maybe<Scalars['String']>;
  offsettingAccount_contains?: Maybe<Scalars['String']>;
  offsettingAccount_not_contains?: Maybe<Scalars['String']>;
  offsettingAccount_starts_with?: Maybe<Scalars['String']>;
  offsettingAccount_not_starts_with?: Maybe<Scalars['String']>;
  offsettingAccount_ends_with?: Maybe<Scalars['String']>;
  offsettingAccount_not_ends_with?: Maybe<Scalars['String']>;
  offsettingAccount_i?: Maybe<Scalars['String']>;
  offsettingAccount_not_i?: Maybe<Scalars['String']>;
  offsettingAccount_contains_i?: Maybe<Scalars['String']>;
  offsettingAccount_not_contains_i?: Maybe<Scalars['String']>;
  offsettingAccount_starts_with_i?: Maybe<Scalars['String']>;
  offsettingAccount_not_starts_with_i?: Maybe<Scalars['String']>;
  offsettingAccount_ends_with_i?: Maybe<Scalars['String']>;
  offsettingAccount_not_ends_with_i?: Maybe<Scalars['String']>;
  offsettingAccount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  offsettingAccount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode?: Maybe<Scalars['String']>;
  territoryCode_not?: Maybe<Scalars['String']>;
  territoryCode_contains?: Maybe<Scalars['String']>;
  territoryCode_not_contains?: Maybe<Scalars['String']>;
  territoryCode_starts_with?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with?: Maybe<Scalars['String']>;
  territoryCode_ends_with?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with?: Maybe<Scalars['String']>;
  territoryCode_i?: Maybe<Scalars['String']>;
  territoryCode_not_i?: Maybe<Scalars['String']>;
  territoryCode_contains_i?: Maybe<Scalars['String']>;
  territoryCode_not_contains_i?: Maybe<Scalars['String']>;
  territoryCode_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose?: Maybe<Scalars['String']>;
  purpose_not?: Maybe<Scalars['String']>;
  purpose_contains?: Maybe<Scalars['String']>;
  purpose_not_contains?: Maybe<Scalars['String']>;
  purpose_starts_with?: Maybe<Scalars['String']>;
  purpose_not_starts_with?: Maybe<Scalars['String']>;
  purpose_ends_with?: Maybe<Scalars['String']>;
  purpose_not_ends_with?: Maybe<Scalars['String']>;
  purpose_i?: Maybe<Scalars['String']>;
  purpose_not_i?: Maybe<Scalars['String']>;
  purpose_contains_i?: Maybe<Scalars['String']>;
  purpose_not_contains_i?: Maybe<Scalars['String']>;
  purpose_starts_with_i?: Maybe<Scalars['String']>;
  purpose_not_starts_with_i?: Maybe<Scalars['String']>;
  purpose_ends_with_i?: Maybe<Scalars['String']>;
  purpose_not_ends_with_i?: Maybe<Scalars['String']>;
  purpose_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isApproved?: Maybe<Scalars['Boolean']>;
  isApproved_not?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<BillingRecipientHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<BillingRecipientHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<BillingRecipientHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<BillingRecipientHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type BillingRecipientHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingRecipientHistoryRecordsCreateInput = {
  data?: Maybe<BillingRecipientHistoryRecordCreateInput>;
};

export type BillingRecipientHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingRecipientHistoryRecordUpdateInput>;
};

export type BillingRecipientRelateToOneInput = {
  create?: Maybe<BillingRecipientCreateInput>;
  connect?: Maybe<BillingRecipientWhereUniqueInput>;
  disconnect?: Maybe<BillingRecipientWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type BillingRecipientUpdateInput = {
  importId?: Maybe<Scalars['String']>;
  context?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  tin?: Maybe<Scalars['String']>;
  iec?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  bankAccount?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  offsettingAccount?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type BillingRecipientWhereInput = {
  AND?: Maybe<Array<Maybe<BillingRecipientWhereInput>>>;
  OR?: Maybe<Array<Maybe<BillingRecipientWhereInput>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  context?: Maybe<BillingIntegrationOrganizationContextWhereInput>;
  context_is_null?: Maybe<Scalars['Boolean']>;
  tin?: Maybe<Scalars['String']>;
  tin_not?: Maybe<Scalars['String']>;
  tin_contains?: Maybe<Scalars['String']>;
  tin_not_contains?: Maybe<Scalars['String']>;
  tin_starts_with?: Maybe<Scalars['String']>;
  tin_not_starts_with?: Maybe<Scalars['String']>;
  tin_ends_with?: Maybe<Scalars['String']>;
  tin_not_ends_with?: Maybe<Scalars['String']>;
  tin_i?: Maybe<Scalars['String']>;
  tin_not_i?: Maybe<Scalars['String']>;
  tin_contains_i?: Maybe<Scalars['String']>;
  tin_not_contains_i?: Maybe<Scalars['String']>;
  tin_starts_with_i?: Maybe<Scalars['String']>;
  tin_not_starts_with_i?: Maybe<Scalars['String']>;
  tin_ends_with_i?: Maybe<Scalars['String']>;
  tin_not_ends_with_i?: Maybe<Scalars['String']>;
  tin_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  iec?: Maybe<Scalars['String']>;
  iec_not?: Maybe<Scalars['String']>;
  iec_contains?: Maybe<Scalars['String']>;
  iec_not_contains?: Maybe<Scalars['String']>;
  iec_starts_with?: Maybe<Scalars['String']>;
  iec_not_starts_with?: Maybe<Scalars['String']>;
  iec_ends_with?: Maybe<Scalars['String']>;
  iec_not_ends_with?: Maybe<Scalars['String']>;
  iec_i?: Maybe<Scalars['String']>;
  iec_not_i?: Maybe<Scalars['String']>;
  iec_contains_i?: Maybe<Scalars['String']>;
  iec_not_contains_i?: Maybe<Scalars['String']>;
  iec_starts_with_i?: Maybe<Scalars['String']>;
  iec_not_starts_with_i?: Maybe<Scalars['String']>;
  iec_ends_with_i?: Maybe<Scalars['String']>;
  iec_not_ends_with_i?: Maybe<Scalars['String']>;
  iec_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  iec_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bic?: Maybe<Scalars['String']>;
  bic_not?: Maybe<Scalars['String']>;
  bic_contains?: Maybe<Scalars['String']>;
  bic_not_contains?: Maybe<Scalars['String']>;
  bic_starts_with?: Maybe<Scalars['String']>;
  bic_not_starts_with?: Maybe<Scalars['String']>;
  bic_ends_with?: Maybe<Scalars['String']>;
  bic_not_ends_with?: Maybe<Scalars['String']>;
  bic_i?: Maybe<Scalars['String']>;
  bic_not_i?: Maybe<Scalars['String']>;
  bic_contains_i?: Maybe<Scalars['String']>;
  bic_not_contains_i?: Maybe<Scalars['String']>;
  bic_starts_with_i?: Maybe<Scalars['String']>;
  bic_not_starts_with_i?: Maybe<Scalars['String']>;
  bic_ends_with_i?: Maybe<Scalars['String']>;
  bic_not_ends_with_i?: Maybe<Scalars['String']>;
  bic_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bic_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankAccount?: Maybe<Scalars['String']>;
  bankAccount_not?: Maybe<Scalars['String']>;
  bankAccount_contains?: Maybe<Scalars['String']>;
  bankAccount_not_contains?: Maybe<Scalars['String']>;
  bankAccount_starts_with?: Maybe<Scalars['String']>;
  bankAccount_not_starts_with?: Maybe<Scalars['String']>;
  bankAccount_ends_with?: Maybe<Scalars['String']>;
  bankAccount_not_ends_with?: Maybe<Scalars['String']>;
  bankAccount_i?: Maybe<Scalars['String']>;
  bankAccount_not_i?: Maybe<Scalars['String']>;
  bankAccount_contains_i?: Maybe<Scalars['String']>;
  bankAccount_not_contains_i?: Maybe<Scalars['String']>;
  bankAccount_starts_with_i?: Maybe<Scalars['String']>;
  bankAccount_not_starts_with_i?: Maybe<Scalars['String']>;
  bankAccount_ends_with_i?: Maybe<Scalars['String']>;
  bankAccount_not_ends_with_i?: Maybe<Scalars['String']>;
  bankAccount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankAccount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName?: Maybe<Scalars['String']>;
  bankName_not?: Maybe<Scalars['String']>;
  bankName_contains?: Maybe<Scalars['String']>;
  bankName_not_contains?: Maybe<Scalars['String']>;
  bankName_starts_with?: Maybe<Scalars['String']>;
  bankName_not_starts_with?: Maybe<Scalars['String']>;
  bankName_ends_with?: Maybe<Scalars['String']>;
  bankName_not_ends_with?: Maybe<Scalars['String']>;
  bankName_i?: Maybe<Scalars['String']>;
  bankName_not_i?: Maybe<Scalars['String']>;
  bankName_contains_i?: Maybe<Scalars['String']>;
  bankName_not_contains_i?: Maybe<Scalars['String']>;
  bankName_starts_with_i?: Maybe<Scalars['String']>;
  bankName_not_starts_with_i?: Maybe<Scalars['String']>;
  bankName_ends_with_i?: Maybe<Scalars['String']>;
  bankName_not_ends_with_i?: Maybe<Scalars['String']>;
  bankName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  offsettingAccount?: Maybe<Scalars['String']>;
  offsettingAccount_not?: Maybe<Scalars['String']>;
  offsettingAccount_contains?: Maybe<Scalars['String']>;
  offsettingAccount_not_contains?: Maybe<Scalars['String']>;
  offsettingAccount_starts_with?: Maybe<Scalars['String']>;
  offsettingAccount_not_starts_with?: Maybe<Scalars['String']>;
  offsettingAccount_ends_with?: Maybe<Scalars['String']>;
  offsettingAccount_not_ends_with?: Maybe<Scalars['String']>;
  offsettingAccount_i?: Maybe<Scalars['String']>;
  offsettingAccount_not_i?: Maybe<Scalars['String']>;
  offsettingAccount_contains_i?: Maybe<Scalars['String']>;
  offsettingAccount_not_contains_i?: Maybe<Scalars['String']>;
  offsettingAccount_starts_with_i?: Maybe<Scalars['String']>;
  offsettingAccount_not_starts_with_i?: Maybe<Scalars['String']>;
  offsettingAccount_ends_with_i?: Maybe<Scalars['String']>;
  offsettingAccount_not_ends_with_i?: Maybe<Scalars['String']>;
  offsettingAccount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  offsettingAccount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode?: Maybe<Scalars['String']>;
  territoryCode_not?: Maybe<Scalars['String']>;
  territoryCode_contains?: Maybe<Scalars['String']>;
  territoryCode_not_contains?: Maybe<Scalars['String']>;
  territoryCode_starts_with?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with?: Maybe<Scalars['String']>;
  territoryCode_ends_with?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with?: Maybe<Scalars['String']>;
  territoryCode_i?: Maybe<Scalars['String']>;
  territoryCode_not_i?: Maybe<Scalars['String']>;
  territoryCode_contains_i?: Maybe<Scalars['String']>;
  territoryCode_not_contains_i?: Maybe<Scalars['String']>;
  territoryCode_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_starts_with_i?: Maybe<Scalars['String']>;
  territoryCode_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_not_ends_with_i?: Maybe<Scalars['String']>;
  territoryCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  territoryCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose?: Maybe<Scalars['String']>;
  purpose_not?: Maybe<Scalars['String']>;
  purpose_contains?: Maybe<Scalars['String']>;
  purpose_not_contains?: Maybe<Scalars['String']>;
  purpose_starts_with?: Maybe<Scalars['String']>;
  purpose_not_starts_with?: Maybe<Scalars['String']>;
  purpose_ends_with?: Maybe<Scalars['String']>;
  purpose_not_ends_with?: Maybe<Scalars['String']>;
  purpose_i?: Maybe<Scalars['String']>;
  purpose_not_i?: Maybe<Scalars['String']>;
  purpose_contains_i?: Maybe<Scalars['String']>;
  purpose_not_contains_i?: Maybe<Scalars['String']>;
  purpose_starts_with_i?: Maybe<Scalars['String']>;
  purpose_not_starts_with_i?: Maybe<Scalars['String']>;
  purpose_ends_with_i?: Maybe<Scalars['String']>;
  purpose_not_ends_with_i?: Maybe<Scalars['String']>;
  purpose_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isApproved?: Maybe<Scalars['Boolean']>;
  isApproved_not?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type BillingRecipientWhereUniqueInput = {
  id: Scalars['ID'];
};

export type BillingRecipientsCreateInput = {
  data?: Maybe<BillingRecipientCreateInput>;
};

export type BillingRecipientsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<BillingRecipientUpdateInput>;
};

export type BuildingFloor = {
  __typename?: 'BuildingFloor';
  id: Scalars['String'];
  type: BuildingFloorType;
  index: Scalars['Int'];
  name: Scalars['String'];
  units: Array<Maybe<BuildingUnit>>;
};

export enum BuildingFloorType {
  Floor = 'floor'
}

/** Technical map of the 'building' type Property object. We assume that there will be different maps for different property types.  */
export type BuildingMap = {
  __typename?: 'BuildingMap';
  dv: Scalars['Int'];
  sections?: Maybe<Array<Maybe<BuildingSection>>>;
  parking?: Maybe<Array<Maybe<BuildingSection>>>;
  type?: Maybe<BuildingMapType>;
};

export enum BuildingMapEntityType {
  Building = 'building',
  Section = 'section',
  Floor = 'floor',
  Unit = 'unit',
  Village = 'village'
}

export enum BuildingMapType {
  Building = 'building'
}

export type BuildingSection = {
  __typename?: 'BuildingSection';
  id: Scalars['String'];
  type: BuildingSectionType;
  index: Scalars['Int'];
  name: Scalars['String'];
  floors: Array<Maybe<BuildingFloor>>;
  preview?: Maybe<Scalars['Boolean']>;
};

export enum BuildingSectionType {
  Section = 'section'
}

export type BuildingUnit = {
  __typename?: 'BuildingUnit';
  id: Scalars['String'];
  type: BuildingUnitType;
  unitType?: Maybe<BuildingUnitSubType>;
  name?: Maybe<Scalars['String']>;
  label: Scalars['String'];
  preview?: Maybe<Scalars['Boolean']>;
};

export enum BuildingUnitSubType {
  Parking = 'parking',
  Flat = 'flat',
  Apartment = 'apartment',
  Commercial = 'commercial',
  Warehouse = 'warehouse'
}

export enum BuildingUnitType {
  Unit = 'unit'
}

export enum CacheControlScope {
  Public = 'PUBLIC',
  Private = 'PRIVATE'
}

export type ChangePasswordWithTokenInput = {
  token: Scalars['String'];
  password: Scalars['String'];
  sender: SenderFieldInput;
  dv: Scalars['Int'];
};

export type ChangePasswordWithTokenOutput = {
  __typename?: 'ChangePasswordWithTokenOutput';
  status: Scalars['String'];
  phone: Scalars['String'];
};

export type ChangePhoneNumberResidentUserInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  token: Scalars['String'];
  removeUserExternalIdentitiesIfPhoneDifferent?: Maybe<Scalars['Boolean']>;
};

export type ChangePhoneNumberResidentUserOutput = {
  __typename?: 'ChangePhoneNumberResidentUserOutput';
  status: Scalars['String'];
};

export type CheckPasswordRecoveryTokenInput = {
  token: Scalars['String'];
};

export type CheckPasswordRecoveryTokenOutput = {
  __typename?: 'CheckPasswordRecoveryTokenOutput';
  status: Scalars['String'];
};

export type CheckPropertyWithAddressExistInput = {
  address: Scalars['String'];
  addressMeta: AddressMetaFieldInput;
};

export type CheckPropertyWithAddressExistOutput = {
  __typename?: 'CheckPropertyWithAddressExistOutput';
  isFound: Scalars['Boolean'];
};

export type CompleteConfirmPhoneActionInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  captcha: Scalars['String'];
  token: Scalars['String'];
  smsCode: Scalars['Int'];
};

export type CompleteConfirmPhoneActionOutput = {
  __typename?: 'CompleteConfirmPhoneActionOutput';
  status: Scalars['String'];
};

/**  User confirm phone actions is used before registration starts  */
export type ConfirmPhoneAction = {
  __typename?: 'ConfirmPhoneAction';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ConfirmPhoneAction List config, or
   *  2. As an alias to the field set on 'labelField' in the ConfirmPhoneAction List config, or
   *  3. As an alias to a 'name' field on the ConfirmPhoneAction List (if one exists), or
   *  4. As an alias to the 'id' field on the ConfirmPhoneAction List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Phone. In international E.164 format without spaces  */
  phone?: Maybe<Scalars['String']>;
  /**  Unique token to complete confirmation  */
  token?: Maybe<Scalars['String']>;
  /**  Last sms code sent to user  */
  smsCode?: Maybe<Scalars['Int']>;
  /**  Time when sms code was requested  */
  smsCodeRequestedAt?: Maybe<Scalars['String']>;
  /**  Time when sms code becomes not valid  */
  smsCodeExpiresAt?: Maybe<Scalars['String']>;
  /**  Number of times sms code input from user failed  */
  retries?: Maybe<Scalars['Int']>;
  /**  Phone verification flag. User verify phone by access to secret sms message  */
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  /**  DateTime when confirm phone action was started  */
  requestedAt?: Maybe<Scalars['String']>;
  /**  When confirm phone action becomes invalid  */
  expiresAt?: Maybe<Scalars['String']>;
  /**  When confirm phone action was completed  */
  completedAt?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type ConfirmPhoneActionCreateInput = {
  phone?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  smsCode?: Maybe<Scalars['Int']>;
  smsCodeRequestedAt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt?: Maybe<Scalars['String']>;
  retries?: Maybe<Scalars['Int']>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  requestedAt?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type ConfirmPhoneActionHistoryRecord = {
  __typename?: 'ConfirmPhoneActionHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ConfirmPhoneActionHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the ConfirmPhoneActionHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the ConfirmPhoneActionHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the ConfirmPhoneActionHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  smsCode?: Maybe<Scalars['Int']>;
  smsCodeRequestedAt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt?: Maybe<Scalars['String']>;
  retries?: Maybe<Scalars['Int']>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  requestedAt?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ConfirmPhoneActionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ConfirmPhoneActionHistoryRecordCreateInput = {
  phone?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  smsCode?: Maybe<Scalars['Int']>;
  smsCodeRequestedAt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt?: Maybe<Scalars['String']>;
  retries?: Maybe<Scalars['Int']>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  requestedAt?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ConfirmPhoneActionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum ConfirmPhoneActionHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type ConfirmPhoneActionHistoryRecordUpdateInput = {
  phone?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  smsCode?: Maybe<Scalars['Int']>;
  smsCodeRequestedAt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt?: Maybe<Scalars['String']>;
  retries?: Maybe<Scalars['Int']>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  requestedAt?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ConfirmPhoneActionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ConfirmPhoneActionHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<ConfirmPhoneActionHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<ConfirmPhoneActionHistoryRecordWhereInput>>>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  token?: Maybe<Scalars['String']>;
  token_not?: Maybe<Scalars['String']>;
  token_contains?: Maybe<Scalars['String']>;
  token_not_contains?: Maybe<Scalars['String']>;
  token_starts_with?: Maybe<Scalars['String']>;
  token_not_starts_with?: Maybe<Scalars['String']>;
  token_ends_with?: Maybe<Scalars['String']>;
  token_not_ends_with?: Maybe<Scalars['String']>;
  token_i?: Maybe<Scalars['String']>;
  token_not_i?: Maybe<Scalars['String']>;
  token_contains_i?: Maybe<Scalars['String']>;
  token_not_contains_i?: Maybe<Scalars['String']>;
  token_starts_with_i?: Maybe<Scalars['String']>;
  token_not_starts_with_i?: Maybe<Scalars['String']>;
  token_ends_with_i?: Maybe<Scalars['String']>;
  token_not_ends_with_i?: Maybe<Scalars['String']>;
  token_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  token_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  smsCode?: Maybe<Scalars['Int']>;
  smsCode_not?: Maybe<Scalars['Int']>;
  smsCode_lt?: Maybe<Scalars['Int']>;
  smsCode_lte?: Maybe<Scalars['Int']>;
  smsCode_gt?: Maybe<Scalars['Int']>;
  smsCode_gte?: Maybe<Scalars['Int']>;
  smsCode_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  smsCode_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  smsCodeRequestedAt?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_not?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_lt?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_lte?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_gt?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_gte?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  smsCodeRequestedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  smsCodeExpiresAt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_not?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_lt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_lte?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_gt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_gte?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  smsCodeExpiresAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  retries?: Maybe<Scalars['Int']>;
  retries_not?: Maybe<Scalars['Int']>;
  retries_lt?: Maybe<Scalars['Int']>;
  retries_lte?: Maybe<Scalars['Int']>;
  retries_gt?: Maybe<Scalars['Int']>;
  retries_gte?: Maybe<Scalars['Int']>;
  retries_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  retries_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  isPhoneVerified_not?: Maybe<Scalars['Boolean']>;
  requestedAt?: Maybe<Scalars['String']>;
  requestedAt_not?: Maybe<Scalars['String']>;
  requestedAt_lt?: Maybe<Scalars['String']>;
  requestedAt_lte?: Maybe<Scalars['String']>;
  requestedAt_gt?: Maybe<Scalars['String']>;
  requestedAt_gte?: Maybe<Scalars['String']>;
  requestedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  expiresAt?: Maybe<Scalars['String']>;
  expiresAt_not?: Maybe<Scalars['String']>;
  expiresAt_lt?: Maybe<Scalars['String']>;
  expiresAt_lte?: Maybe<Scalars['String']>;
  expiresAt_gt?: Maybe<Scalars['String']>;
  expiresAt_gte?: Maybe<Scalars['String']>;
  expiresAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  expiresAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  completedAt?: Maybe<Scalars['String']>;
  completedAt_not?: Maybe<Scalars['String']>;
  completedAt_lt?: Maybe<Scalars['String']>;
  completedAt_lte?: Maybe<Scalars['String']>;
  completedAt_gt?: Maybe<Scalars['String']>;
  completedAt_gte?: Maybe<Scalars['String']>;
  completedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  completedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<ConfirmPhoneActionHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<ConfirmPhoneActionHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<ConfirmPhoneActionHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<ConfirmPhoneActionHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ConfirmPhoneActionHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ConfirmPhoneActionHistoryRecordsCreateInput = {
  data?: Maybe<ConfirmPhoneActionHistoryRecordCreateInput>;
};

export type ConfirmPhoneActionHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ConfirmPhoneActionHistoryRecordUpdateInput>;
};

export type ConfirmPhoneActionUpdateInput = {
  phone?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  smsCode?: Maybe<Scalars['Int']>;
  smsCodeRequestedAt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt?: Maybe<Scalars['String']>;
  retries?: Maybe<Scalars['Int']>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  requestedAt?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type ConfirmPhoneActionWhereInput = {
  AND?: Maybe<Array<Maybe<ConfirmPhoneActionWhereInput>>>;
  OR?: Maybe<Array<Maybe<ConfirmPhoneActionWhereInput>>>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  token?: Maybe<Scalars['String']>;
  token_not?: Maybe<Scalars['String']>;
  token_contains?: Maybe<Scalars['String']>;
  token_not_contains?: Maybe<Scalars['String']>;
  token_starts_with?: Maybe<Scalars['String']>;
  token_not_starts_with?: Maybe<Scalars['String']>;
  token_ends_with?: Maybe<Scalars['String']>;
  token_not_ends_with?: Maybe<Scalars['String']>;
  token_i?: Maybe<Scalars['String']>;
  token_not_i?: Maybe<Scalars['String']>;
  token_contains_i?: Maybe<Scalars['String']>;
  token_not_contains_i?: Maybe<Scalars['String']>;
  token_starts_with_i?: Maybe<Scalars['String']>;
  token_not_starts_with_i?: Maybe<Scalars['String']>;
  token_ends_with_i?: Maybe<Scalars['String']>;
  token_not_ends_with_i?: Maybe<Scalars['String']>;
  token_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  token_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  smsCode?: Maybe<Scalars['Int']>;
  smsCode_not?: Maybe<Scalars['Int']>;
  smsCode_lt?: Maybe<Scalars['Int']>;
  smsCode_lte?: Maybe<Scalars['Int']>;
  smsCode_gt?: Maybe<Scalars['Int']>;
  smsCode_gte?: Maybe<Scalars['Int']>;
  smsCode_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  smsCode_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  smsCodeRequestedAt?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_not?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_lt?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_lte?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_gt?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_gte?: Maybe<Scalars['String']>;
  smsCodeRequestedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  smsCodeRequestedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  smsCodeExpiresAt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_not?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_lt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_lte?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_gt?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_gte?: Maybe<Scalars['String']>;
  smsCodeExpiresAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  smsCodeExpiresAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  retries?: Maybe<Scalars['Int']>;
  retries_not?: Maybe<Scalars['Int']>;
  retries_lt?: Maybe<Scalars['Int']>;
  retries_lte?: Maybe<Scalars['Int']>;
  retries_gt?: Maybe<Scalars['Int']>;
  retries_gte?: Maybe<Scalars['Int']>;
  retries_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  retries_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  isPhoneVerified_not?: Maybe<Scalars['Boolean']>;
  requestedAt?: Maybe<Scalars['String']>;
  requestedAt_not?: Maybe<Scalars['String']>;
  requestedAt_lt?: Maybe<Scalars['String']>;
  requestedAt_lte?: Maybe<Scalars['String']>;
  requestedAt_gt?: Maybe<Scalars['String']>;
  requestedAt_gte?: Maybe<Scalars['String']>;
  requestedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  expiresAt?: Maybe<Scalars['String']>;
  expiresAt_not?: Maybe<Scalars['String']>;
  expiresAt_lt?: Maybe<Scalars['String']>;
  expiresAt_lte?: Maybe<Scalars['String']>;
  expiresAt_gt?: Maybe<Scalars['String']>;
  expiresAt_gte?: Maybe<Scalars['String']>;
  expiresAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  expiresAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  completedAt?: Maybe<Scalars['String']>;
  completedAt_not?: Maybe<Scalars['String']>;
  completedAt_lt?: Maybe<Scalars['String']>;
  completedAt_lte?: Maybe<Scalars['String']>;
  completedAt_gt?: Maybe<Scalars['String']>;
  completedAt_gte?: Maybe<Scalars['String']>;
  completedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  completedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type ConfirmPhoneActionWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ConfirmPhoneActionsCreateInput = {
  data?: Maybe<ConfirmPhoneActionCreateInput>;
};

export type ConfirmPhoneActionsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ConfirmPhoneActionUpdateInput>;
};

/**  Contact information of a person. Currently it will be related to a ticket, but in the future, it will be associated with more things  */
export type Contact = {
  __typename?: 'Contact';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the Contact List config, or
   *  2. As an alias to the field set on 'labelField' in the Contact List config, or
   *  3. As an alias to a 'name' field on the Contact List (if one exists), or
   *  4. As an alias to the 'id' field on the Contact List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Property, that is a subject of an issue, reported by this person in first ticket. Meaning of this field will be revised in the future  */
  property?: Maybe<Property>;
  /**  Property unit, that is a subject of an issue, reported by this person in first ticket. Meaning of this field will be revised in the future  */
  unitName?: Maybe<Scalars['String']>;
  /**  Type of unit, such as parking lot or flat  */
  unitType?: Maybe<Scalars['String']>;
  /**  Normalized contact email of this person  */
  email?: Maybe<Scalars['String']>;
  /**  Normalized contact phone of this person in E.164 format without spaces  */
  phone?: Maybe<Scalars['String']>;
  /**  Name or full name of this person  */
  name?: Maybe<Scalars['String']>;
  /**  The contact's role  */
  role?: Maybe<ContactRole>;
  /**  Contact verification flag.  */
  isVerified?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type ContactCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  role?: Maybe<ContactRoleRelateToOneInput>;
  isVerified?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  Stores requested export format, status of export job, link to exported file and information about progress of export job  */
export type ContactExportTask = {
  __typename?: 'ContactExportTask';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ContactExportTask List config, or
   *  2. As an alias to the field set on 'labelField' in the ContactExportTask List config, or
   *  3. As an alias to a 'name' field on the ContactExportTask List (if one exists), or
   *  4. As an alias to the 'id' field on the ContactExportTask List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Status of the job. Used at client side progress information component  */
  status?: Maybe<ContactExportTaskStatusType>;
  /**  Requested export file format  */
  format?: Maybe<ContactExportTaskFormatType>;
  /**  How many records at the moment are exported  */
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  /**  Total records to export that will be determined at server side in export operation  */
  totalRecordsCount?: Maybe<Scalars['Int']>;
  /**  Meta information about file, saved outside of database somewhere. Shape of meta information JSON object is specific to file adapter, used by saving a file.  */
  file?: Maybe<File>;
  /**  Stores information about query and ids of exported and failed records  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Filtering conditions for records to export  */
  where?: Maybe<Scalars['JSON']>;
  /**  Sorting parameters for records to export  */
  sortBy?: Maybe<Scalars['JSON']>;
  /**  Requested export locale, in that the resulting file will be rendered  */
  locale?: Maybe<Scalars['String']>;
  /**  To requested timeZone all datetime fields will be converted  */
  timeZone?: Maybe<Scalars['String']>;
  /**  User that requested this exporting operation. Will be used for read access checks to display all exported tasks somewhere and to display progress indicator of ongoing exporting task for current user  */
  user?: Maybe<User>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type ContactExportTaskCreateInput = {
  status?: Maybe<ContactExportTaskStatusType>;
  format?: Maybe<ContactExportTaskFormatType>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['Upload']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export enum ContactExportTaskFormatType {
  Excel = 'excel'
}

/**  A keystone list  */
export type ContactExportTaskHistoryRecord = {
  __typename?: 'ContactExportTaskHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ContactExportTaskHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the ContactExportTaskHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the ContactExportTaskHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the ContactExportTaskHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ContactExportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ContactExportTaskHistoryRecordCreateInput = {
  status?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ContactExportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum ContactExportTaskHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type ContactExportTaskHistoryRecordUpdateInput = {
  status?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ContactExportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ContactExportTaskHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<ContactExportTaskHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<ContactExportTaskHistoryRecordWhereInput>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  format?: Maybe<Scalars['String']>;
  format_not?: Maybe<Scalars['String']>;
  format_contains?: Maybe<Scalars['String']>;
  format_not_contains?: Maybe<Scalars['String']>;
  format_starts_with?: Maybe<Scalars['String']>;
  format_not_starts_with?: Maybe<Scalars['String']>;
  format_ends_with?: Maybe<Scalars['String']>;
  format_not_ends_with?: Maybe<Scalars['String']>;
  format_i?: Maybe<Scalars['String']>;
  format_not_i?: Maybe<Scalars['String']>;
  format_contains_i?: Maybe<Scalars['String']>;
  format_not_contains_i?: Maybe<Scalars['String']>;
  format_starts_with_i?: Maybe<Scalars['String']>;
  format_not_starts_with_i?: Maybe<Scalars['String']>;
  format_ends_with_i?: Maybe<Scalars['String']>;
  format_not_ends_with_i?: Maybe<Scalars['String']>;
  format_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  format_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  exportedRecordsCount_not?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  exportedRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount_not?: Maybe<Scalars['Int']>;
  totalRecordsCount_lt?: Maybe<Scalars['Int']>;
  totalRecordsCount_lte?: Maybe<Scalars['Int']>;
  totalRecordsCount_gt?: Maybe<Scalars['Int']>;
  totalRecordsCount_gte?: Maybe<Scalars['Int']>;
  totalRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  file?: Maybe<Scalars['JSON']>;
  file_not?: Maybe<Scalars['JSON']>;
  file_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where?: Maybe<Scalars['JSON']>;
  where_not?: Maybe<Scalars['JSON']>;
  where_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy?: Maybe<Scalars['JSON']>;
  sortBy_not?: Maybe<Scalars['JSON']>;
  sortBy_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  locale?: Maybe<Scalars['String']>;
  locale_not?: Maybe<Scalars['String']>;
  locale_contains?: Maybe<Scalars['String']>;
  locale_not_contains?: Maybe<Scalars['String']>;
  locale_starts_with?: Maybe<Scalars['String']>;
  locale_not_starts_with?: Maybe<Scalars['String']>;
  locale_ends_with?: Maybe<Scalars['String']>;
  locale_not_ends_with?: Maybe<Scalars['String']>;
  locale_i?: Maybe<Scalars['String']>;
  locale_not_i?: Maybe<Scalars['String']>;
  locale_contains_i?: Maybe<Scalars['String']>;
  locale_not_contains_i?: Maybe<Scalars['String']>;
  locale_starts_with_i?: Maybe<Scalars['String']>;
  locale_not_starts_with_i?: Maybe<Scalars['String']>;
  locale_ends_with_i?: Maybe<Scalars['String']>;
  locale_not_ends_with_i?: Maybe<Scalars['String']>;
  locale_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  locale_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone?: Maybe<Scalars['String']>;
  timeZone_not?: Maybe<Scalars['String']>;
  timeZone_contains?: Maybe<Scalars['String']>;
  timeZone_not_contains?: Maybe<Scalars['String']>;
  timeZone_starts_with?: Maybe<Scalars['String']>;
  timeZone_not_starts_with?: Maybe<Scalars['String']>;
  timeZone_ends_with?: Maybe<Scalars['String']>;
  timeZone_not_ends_with?: Maybe<Scalars['String']>;
  timeZone_i?: Maybe<Scalars['String']>;
  timeZone_not_i?: Maybe<Scalars['String']>;
  timeZone_contains_i?: Maybe<Scalars['String']>;
  timeZone_not_contains_i?: Maybe<Scalars['String']>;
  timeZone_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_not_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_not_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<ContactExportTaskHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<ContactExportTaskHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<ContactExportTaskHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<ContactExportTaskHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ContactExportTaskHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ContactExportTaskHistoryRecordsCreateInput = {
  data?: Maybe<ContactExportTaskHistoryRecordCreateInput>;
};

export type ContactExportTaskHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ContactExportTaskHistoryRecordUpdateInput>;
};

export enum ContactExportTaskStatusType {
  Processing = 'processing',
  Completed = 'completed',
  Error = 'error',
  Cancelled = 'cancelled'
}

export type ContactExportTaskUpdateInput = {
  status?: Maybe<ContactExportTaskStatusType>;
  format?: Maybe<ContactExportTaskFormatType>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['Upload']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type ContactExportTaskWhereInput = {
  AND?: Maybe<Array<Maybe<ContactExportTaskWhereInput>>>;
  OR?: Maybe<Array<Maybe<ContactExportTaskWhereInput>>>;
  status?: Maybe<ContactExportTaskStatusType>;
  status_not?: Maybe<ContactExportTaskStatusType>;
  status_in?: Maybe<Array<Maybe<ContactExportTaskStatusType>>>;
  status_not_in?: Maybe<Array<Maybe<ContactExportTaskStatusType>>>;
  format?: Maybe<ContactExportTaskFormatType>;
  format_not?: Maybe<ContactExportTaskFormatType>;
  format_in?: Maybe<Array<Maybe<ContactExportTaskFormatType>>>;
  format_not_in?: Maybe<Array<Maybe<ContactExportTaskFormatType>>>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  exportedRecordsCount_not?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  exportedRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount_not?: Maybe<Scalars['Int']>;
  totalRecordsCount_lt?: Maybe<Scalars['Int']>;
  totalRecordsCount_lte?: Maybe<Scalars['Int']>;
  totalRecordsCount_gt?: Maybe<Scalars['Int']>;
  totalRecordsCount_gte?: Maybe<Scalars['Int']>;
  totalRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  file?: Maybe<Scalars['String']>;
  file_not?: Maybe<Scalars['String']>;
  file_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where?: Maybe<Scalars['JSON']>;
  where_not?: Maybe<Scalars['JSON']>;
  where_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy?: Maybe<Scalars['JSON']>;
  sortBy_not?: Maybe<Scalars['JSON']>;
  sortBy_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  locale?: Maybe<Scalars['String']>;
  locale_not?: Maybe<Scalars['String']>;
  locale_contains?: Maybe<Scalars['String']>;
  locale_not_contains?: Maybe<Scalars['String']>;
  locale_starts_with?: Maybe<Scalars['String']>;
  locale_not_starts_with?: Maybe<Scalars['String']>;
  locale_ends_with?: Maybe<Scalars['String']>;
  locale_not_ends_with?: Maybe<Scalars['String']>;
  locale_i?: Maybe<Scalars['String']>;
  locale_not_i?: Maybe<Scalars['String']>;
  locale_contains_i?: Maybe<Scalars['String']>;
  locale_not_contains_i?: Maybe<Scalars['String']>;
  locale_starts_with_i?: Maybe<Scalars['String']>;
  locale_not_starts_with_i?: Maybe<Scalars['String']>;
  locale_ends_with_i?: Maybe<Scalars['String']>;
  locale_not_ends_with_i?: Maybe<Scalars['String']>;
  locale_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  locale_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone?: Maybe<Scalars['String']>;
  timeZone_not?: Maybe<Scalars['String']>;
  timeZone_contains?: Maybe<Scalars['String']>;
  timeZone_not_contains?: Maybe<Scalars['String']>;
  timeZone_starts_with?: Maybe<Scalars['String']>;
  timeZone_not_starts_with?: Maybe<Scalars['String']>;
  timeZone_ends_with?: Maybe<Scalars['String']>;
  timeZone_not_ends_with?: Maybe<Scalars['String']>;
  timeZone_i?: Maybe<Scalars['String']>;
  timeZone_not_i?: Maybe<Scalars['String']>;
  timeZone_contains_i?: Maybe<Scalars['String']>;
  timeZone_not_contains_i?: Maybe<Scalars['String']>;
  timeZone_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_not_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_not_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type ContactExportTaskWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ContactExportTasksCreateInput = {
  data?: Maybe<ContactExportTaskCreateInput>;
};

export type ContactExportTasksUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ContactExportTaskUpdateInput>;
};

/**  A keystone list  */
export type ContactHistoryRecord = {
  __typename?: 'ContactHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ContactHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the ContactHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the ContactHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the ContactHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ContactHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ContactHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ContactHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum ContactHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type ContactHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ContactHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ContactHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<ContactHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<ContactHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_contains?: Maybe<Scalars['String']>;
  unitType_not_contains?: Maybe<Scalars['String']>;
  unitType_starts_with?: Maybe<Scalars['String']>;
  unitType_not_starts_with?: Maybe<Scalars['String']>;
  unitType_ends_with?: Maybe<Scalars['String']>;
  unitType_not_ends_with?: Maybe<Scalars['String']>;
  unitType_i?: Maybe<Scalars['String']>;
  unitType_not_i?: Maybe<Scalars['String']>;
  unitType_contains_i?: Maybe<Scalars['String']>;
  unitType_not_contains_i?: Maybe<Scalars['String']>;
  unitType_starts_with_i?: Maybe<Scalars['String']>;
  unitType_not_starts_with_i?: Maybe<Scalars['String']>;
  unitType_ends_with_i?: Maybe<Scalars['String']>;
  unitType_not_ends_with_i?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  role?: Maybe<Scalars['String']>;
  role_not?: Maybe<Scalars['String']>;
  role_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  role_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isVerified?: Maybe<Scalars['Boolean']>;
  isVerified_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<ContactHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<ContactHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<ContactHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<ContactHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ContactHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ContactHistoryRecordsCreateInput = {
  data?: Maybe<ContactHistoryRecordCreateInput>;
};

export type ContactHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ContactHistoryRecordUpdateInput>;
};

export type ContactRelateToOneInput = {
  create?: Maybe<ContactCreateInput>;
  connect?: Maybe<ContactWhereUniqueInput>;
  disconnect?: Maybe<ContactWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

/**  Role for contact  */
export type ContactRole = {
  __typename?: 'ContactRole';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ContactRole List config, or
   *  2. As an alias to the field set on 'labelField' in the ContactRole List config, or
   *  3. As an alias to a 'name' field on the ContactRole List (if one exists), or
   *  4. As an alias to the 'id' field on the ContactRole List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. If this ref is null the object is common for all organizations  */
  organization?: Maybe<Organization>;
  /**  The role's name  */
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type ContactRoleCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type ContactRoleHistoryRecord = {
  __typename?: 'ContactRoleHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ContactRoleHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the ContactRoleHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the ContactRoleHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the ContactRoleHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ContactRoleHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ContactRoleHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ContactRoleHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum ContactRoleHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type ContactRoleHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ContactRoleHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ContactRoleHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<ContactRoleHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<ContactRoleHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<ContactRoleHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<ContactRoleHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<ContactRoleHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<ContactRoleHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ContactRoleHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ContactRoleHistoryRecordsCreateInput = {
  data?: Maybe<ContactRoleHistoryRecordCreateInput>;
};

export type ContactRoleHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ContactRoleHistoryRecordUpdateInput>;
};

export type ContactRoleRelateToOneInput = {
  create?: Maybe<ContactRoleCreateInput>;
  connect?: Maybe<ContactRoleWhereUniqueInput>;
  disconnect?: Maybe<ContactRoleWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type ContactRoleUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type ContactRoleWhereInput = {
  AND?: Maybe<Array<Maybe<ContactRoleWhereInput>>>;
  OR?: Maybe<Array<Maybe<ContactRoleWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type ContactRoleWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ContactRolesCreateInput = {
  data?: Maybe<ContactRoleCreateInput>;
};

export type ContactRolesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ContactRoleUpdateInput>;
};

export type ContactUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  role?: Maybe<ContactRoleRelateToOneInput>;
  isVerified?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type ContactWhereInput = {
  AND?: Maybe<Array<Maybe<ContactWhereInput>>>;
  OR?: Maybe<Array<Maybe<ContactWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  property?: Maybe<PropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  role?: Maybe<ContactRoleWhereInput>;
  role_is_null?: Maybe<Scalars['Boolean']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  isVerified_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type ContactWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ContactsCreateInput = {
  data?: Maybe<ContactCreateInput>;
};

export type ContactsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ContactUpdateInput>;
};

export type CreateBankAccountRequestInput = {
  dv: Scalars['Int'];
  sender: Scalars['JSON'];
  organizationId: Scalars['ID'];
  propertyId: Scalars['ID'];
};

export type CreateBankAccountRequestOutput = {
  __typename?: 'CreateBankAccountRequestOutput';
  status: Scalars['String'];
  id: Scalars['ID'];
};

export type CreateOnBoardingInput = {
  dv: Scalars['Int'];
  sender: Scalars['JSON'];
  type?: Maybe<OnBoardingType>;
  userId: Scalars['ID'];
};

export type CustomAccess = {
  __typename?: 'CustomAccess';
  accessRules?: Maybe<Array<Maybe<CustomAccessListRule>>>;
};

export type CustomAccessFieldRule = {
  __typename?: 'CustomAccessFieldRule';
  field: Scalars['String'];
  create?: Maybe<Scalars['Boolean']>;
  read?: Maybe<Scalars['Boolean']>;
  update?: Maybe<Scalars['Boolean']>;
};

export type CustomAccessFieldRuleInput = {
  field: Scalars['String'];
  create?: Maybe<Scalars['Boolean']>;
  read?: Maybe<Scalars['Boolean']>;
  update?: Maybe<Scalars['Boolean']>;
};

export type CustomAccessInput = {
  accessRules?: Maybe<Array<Maybe<CustomAccessListRuleInput>>>;
};

export type CustomAccessListRule = {
  __typename?: 'CustomAccessListRule';
  list: Scalars['String'];
  create?: Maybe<Scalars['Boolean']>;
  read?: Maybe<Scalars['Boolean']>;
  update?: Maybe<Scalars['Boolean']>;
  fields?: Maybe<Array<Maybe<CustomAccessFieldRule>>>;
};

export type CustomAccessListRuleInput = {
  list: Scalars['String'];
  create?: Maybe<Scalars['Boolean']>;
  read?: Maybe<Scalars['Boolean']>;
  update?: Maybe<Scalars['Boolean']>;
  fields?: Maybe<Array<Maybe<CustomAccessFieldRuleInput>>>;
};

export enum DevicePlatformType {
  Android = 'android',
  Ios = 'ios',
  Web = 'web'
}

export type DisconnectUserFromRemoteClientInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  deviceId: Scalars['String'];
  appId: Scalars['String'];
};

export type DisconnectUserFromRemoteClientOutput = {
  __typename?: 'DisconnectUserFromRemoteClientOutput';
  status: Scalars['String'];
};

export type ExportMeterReadingsInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  where: MeterReadingWhereInput;
  sortBy?: Maybe<Array<SortMeterReadingsBy>>;
  timeZone: Scalars['String'];
};

export type ExportMeterReadingsOutput = {
  __typename?: 'ExportMeterReadingsOutput';
  status: Scalars['String'];
  linkToFile: Scalars['String'];
};

export type ExportPaymentsToExcelInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  where: PaymentWhereInput;
  sortBy?: Maybe<Array<SortPaymentsBy>>;
  timeZone: Scalars['String'];
};

export type ExportPaymentsToExcelOutput = {
  __typename?: 'ExportPaymentsToExcelOutput';
  status: Scalars['String'];
  linkToFile: Scalars['String'];
};

export type ExportPropertiesToExcelInput = {
  where: PropertyWhereInput;
  sortBy?: Maybe<Array<SortPropertiesBy>>;
};

export type ExportPropertiesToExcelOutput = {
  __typename?: 'ExportPropertiesToExcelOutput';
  status: Scalars['String'];
  linkToFile: Scalars['String'];
};

export type ExportPropertyScopeToExcelInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  where: PropertyScopeWhereInput;
  sortBy?: Maybe<Array<SortPropertyScopesBy>>;
};

export type ExportPropertyScopeToExcelOutput = {
  __typename?: 'ExportPropertyScopeToExcelOutput';
  status: Scalars['String'];
  linkToFile: Scalars['String'];
};

export type ExportTicketAnalyticsToExcelInput = {
  where: TicketWhereInput;
  groupBy?: Maybe<Array<TicketAnalyticsGroupBy>>;
  translates: ExportTicketAnalyticsToExcelTranslates;
  nullReplaces: TicketAnalyticsNullReplaces;
};

export type ExportTicketAnalyticsToExcelOutput = {
  __typename?: 'ExportTicketAnalyticsToExcelOutput';
  link: Scalars['String'];
};

export type ExportTicketAnalyticsToExcelTranslates = {
  property?: Maybe<Scalars['String']>;
  assignee?: Maybe<Scalars['String']>;
  executor?: Maybe<Scalars['String']>;
  categoryClassifier?: Maybe<Scalars['String']>;
};

/**  External report for analytics section that could be displayed with iframe  */
export type ExternalReport = {
  __typename?: 'ExternalReport';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ExternalReport List config, or
   *  2. As an alias to the field set on 'labelField' in the ExternalReport List config, or
   *  3. As an alias to a 'name' field on the ExternalReport List (if one exists), or
   *  4. As an alias to the 'id' field on the ExternalReport List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Type of external report. Way to determine logic of url building process  */
  type?: Maybe<ExternalReportTypeType>;
  /**  Report card title text  */
  title?: Maybe<Scalars['String']>;
  /**  Report card description  */
  description?: Maybe<Scalars['String']>;
  /**  Meta data for building iframe link. For example, external id or custom options that required at specified type of report  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Ref to the organization. If this ref is null the object is common for all organizations  */
  organization?: Maybe<Organization>;
  /**  Indicates visibility of concrete external report at ui  */
  isHidden?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type ExternalReportCreateInput = {
  type?: Maybe<ExternalReportTypeType>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  isHidden?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type ExternalReportHistoryRecord = {
  __typename?: 'ExternalReportHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ExternalReportHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the ExternalReportHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the ExternalReportHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the ExternalReportHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  organization?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ExternalReportHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ExternalReportHistoryRecordCreateInput = {
  type?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  organization?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ExternalReportHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum ExternalReportHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type ExternalReportHistoryRecordUpdateInput = {
  type?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  organization?: Maybe<Scalars['String']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ExternalReportHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ExternalReportHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<ExternalReportHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<ExternalReportHistoryRecordWhereInput>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isHidden_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<ExternalReportHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<ExternalReportHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<ExternalReportHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<ExternalReportHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ExternalReportHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ExternalReportHistoryRecordsCreateInput = {
  data?: Maybe<ExternalReportHistoryRecordCreateInput>;
};

export type ExternalReportHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ExternalReportHistoryRecordUpdateInput>;
};

export enum ExternalReportTypeType {
  Metabase = 'metabase'
}

export type ExternalReportUpdateInput = {
  type?: Maybe<ExternalReportTypeType>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  isHidden?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type ExternalReportWhereInput = {
  AND?: Maybe<Array<Maybe<ExternalReportWhereInput>>>;
  OR?: Maybe<Array<Maybe<ExternalReportWhereInput>>>;
  type?: Maybe<ExternalReportTypeType>;
  type_not?: Maybe<ExternalReportTypeType>;
  type_in?: Maybe<Array<Maybe<ExternalReportTypeType>>>;
  type_not_in?: Maybe<Array<Maybe<ExternalReportTypeType>>>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  isHidden?: Maybe<Scalars['Boolean']>;
  isHidden_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type ExternalReportWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ExternalReportsCreateInput = {
  data?: Maybe<ExternalReportCreateInput>;
};

export type ExternalReportsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ExternalReportUpdateInput>;
};

/**  The scheme regulates the access of the service user to the access tokens stored in the redis  */
export type ExternalTokenAccessRight = {
  __typename?: 'ExternalTokenAccessRight';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ExternalTokenAccessRight List config, or
   *  2. As an alias to the field set on 'labelField' in the ExternalTokenAccessRight List config, or
   *  3. As an alias to a 'name' field on the ExternalTokenAccessRight List (if one exists), or
   *  4. As an alias to the 'id' field on the ExternalTokenAccessRight List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Which service token the user has access to  */
  type?: Maybe<ExternalTokenAccessRightTypeType>;
  /**  Link to user. Note, that user must be of "service" type  */
  user?: Maybe<User>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type ExternalTokenAccessRightCreateInput = {
  type?: Maybe<ExternalTokenAccessRightTypeType>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type ExternalTokenAccessRightHistoryRecord = {
  __typename?: 'ExternalTokenAccessRightHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ExternalTokenAccessRightHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the ExternalTokenAccessRightHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the ExternalTokenAccessRightHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the ExternalTokenAccessRightHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ExternalTokenAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ExternalTokenAccessRightHistoryRecordCreateInput = {
  type?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ExternalTokenAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum ExternalTokenAccessRightHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type ExternalTokenAccessRightHistoryRecordUpdateInput = {
  type?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ExternalTokenAccessRightHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ExternalTokenAccessRightHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<ExternalTokenAccessRightHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<ExternalTokenAccessRightHistoryRecordWhereInput>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<ExternalTokenAccessRightHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<ExternalTokenAccessRightHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<ExternalTokenAccessRightHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<ExternalTokenAccessRightHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ExternalTokenAccessRightHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ExternalTokenAccessRightHistoryRecordsCreateInput = {
  data?: Maybe<ExternalTokenAccessRightHistoryRecordCreateInput>;
};

export type ExternalTokenAccessRightHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ExternalTokenAccessRightHistoryRecordUpdateInput>;
};

export enum ExternalTokenAccessRightTypeType {
  Sbbol = 'sbbol'
}

export type ExternalTokenAccessRightUpdateInput = {
  type?: Maybe<ExternalTokenAccessRightTypeType>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type ExternalTokenAccessRightWhereInput = {
  AND?: Maybe<Array<Maybe<ExternalTokenAccessRightWhereInput>>>;
  OR?: Maybe<Array<Maybe<ExternalTokenAccessRightWhereInput>>>;
  type?: Maybe<ExternalTokenAccessRightTypeType>;
  type_not?: Maybe<ExternalTokenAccessRightTypeType>;
  type_in?: Maybe<Array<Maybe<ExternalTokenAccessRightTypeType>>>;
  type_not_in?: Maybe<Array<Maybe<ExternalTokenAccessRightTypeType>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type ExternalTokenAccessRightWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ExternalTokenAccessRightsCreateInput = {
  data?: Maybe<ExternalTokenAccessRightCreateInput>;
};

export type ExternalTokenAccessRightsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ExternalTokenAccessRightUpdateInput>;
};

export type FeeDistributionField = {
  __typename?: 'FeeDistributionField';
  recipient: Scalars['String'];
  percent: Scalars['String'];
  minAmount?: Maybe<Scalars['String']>;
  maxAmount?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

export type FeeDistributionFieldInput = {
  recipient: Scalars['String'];
  percent: Scalars['String'];
  minAmount?: Maybe<Scalars['String']>;
  maxAmount?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

export type File = {
  __typename?: 'File';
  id?: Maybe<Scalars['ID']>;
  path?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  originalFilename?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  encoding?: Maybe<Scalars['String']>;
  publicUrl?: Maybe<Scalars['String']>;
};

/**  Forgot password actions is used for anonymous user password recovery procedure  */
export type ForgotPasswordAction = {
  __typename?: 'ForgotPasswordAction';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ForgotPasswordAction List config, or
   *  2. As an alias to the field set on 'labelField' in the ForgotPasswordAction List config, or
   *  3. As an alias to a 'name' field on the ForgotPasswordAction List (if one exists), or
   *  4. As an alias to the 'id' field on the ForgotPasswordAction List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the user. The object will be deleted if the user ceases to exist  */
  user?: Maybe<User>;
  /**  Unique token to complete confirmation  */
  token?: Maybe<Scalars['String']>;
  /**  DateTime when confirm phone action was started  */
  requestedAt?: Maybe<Scalars['String']>;
  /**  When password recovery action becomes invalid  */
  expiresAt?: Maybe<Scalars['String']>;
  /**  When password recovery action was completed  */
  usedAt?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type ForgotPasswordActionCreateInput = {
  user?: Maybe<UserRelateToOneInput>;
  token?: Maybe<Scalars['String']>;
  requestedAt?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  usedAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type ForgotPasswordActionHistoryRecord = {
  __typename?: 'ForgotPasswordActionHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ForgotPasswordActionHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the ForgotPasswordActionHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the ForgotPasswordActionHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the ForgotPasswordActionHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  requestedAt?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  usedAt?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ForgotPasswordActionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ForgotPasswordActionHistoryRecordCreateInput = {
  user?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  requestedAt?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  usedAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ForgotPasswordActionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum ForgotPasswordActionHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type ForgotPasswordActionHistoryRecordUpdateInput = {
  user?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  requestedAt?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  usedAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ForgotPasswordActionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ForgotPasswordActionHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<ForgotPasswordActionHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<ForgotPasswordActionHistoryRecordWhereInput>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  token?: Maybe<Scalars['String']>;
  token_not?: Maybe<Scalars['String']>;
  token_contains?: Maybe<Scalars['String']>;
  token_not_contains?: Maybe<Scalars['String']>;
  token_starts_with?: Maybe<Scalars['String']>;
  token_not_starts_with?: Maybe<Scalars['String']>;
  token_ends_with?: Maybe<Scalars['String']>;
  token_not_ends_with?: Maybe<Scalars['String']>;
  token_i?: Maybe<Scalars['String']>;
  token_not_i?: Maybe<Scalars['String']>;
  token_contains_i?: Maybe<Scalars['String']>;
  token_not_contains_i?: Maybe<Scalars['String']>;
  token_starts_with_i?: Maybe<Scalars['String']>;
  token_not_starts_with_i?: Maybe<Scalars['String']>;
  token_ends_with_i?: Maybe<Scalars['String']>;
  token_not_ends_with_i?: Maybe<Scalars['String']>;
  token_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  token_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestedAt?: Maybe<Scalars['String']>;
  requestedAt_not?: Maybe<Scalars['String']>;
  requestedAt_lt?: Maybe<Scalars['String']>;
  requestedAt_lte?: Maybe<Scalars['String']>;
  requestedAt_gt?: Maybe<Scalars['String']>;
  requestedAt_gte?: Maybe<Scalars['String']>;
  requestedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  expiresAt?: Maybe<Scalars['String']>;
  expiresAt_not?: Maybe<Scalars['String']>;
  expiresAt_lt?: Maybe<Scalars['String']>;
  expiresAt_lte?: Maybe<Scalars['String']>;
  expiresAt_gt?: Maybe<Scalars['String']>;
  expiresAt_gte?: Maybe<Scalars['String']>;
  expiresAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  expiresAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  usedAt?: Maybe<Scalars['String']>;
  usedAt_not?: Maybe<Scalars['String']>;
  usedAt_lt?: Maybe<Scalars['String']>;
  usedAt_lte?: Maybe<Scalars['String']>;
  usedAt_gt?: Maybe<Scalars['String']>;
  usedAt_gte?: Maybe<Scalars['String']>;
  usedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  usedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<ForgotPasswordActionHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<ForgotPasswordActionHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<ForgotPasswordActionHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<ForgotPasswordActionHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ForgotPasswordActionHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ForgotPasswordActionHistoryRecordsCreateInput = {
  data?: Maybe<ForgotPasswordActionHistoryRecordCreateInput>;
};

export type ForgotPasswordActionHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ForgotPasswordActionHistoryRecordUpdateInput>;
};

export type ForgotPasswordActionUpdateInput = {
  user?: Maybe<UserRelateToOneInput>;
  token?: Maybe<Scalars['String']>;
  requestedAt?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  usedAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type ForgotPasswordActionWhereInput = {
  AND?: Maybe<Array<Maybe<ForgotPasswordActionWhereInput>>>;
  OR?: Maybe<Array<Maybe<ForgotPasswordActionWhereInput>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  token?: Maybe<Scalars['String']>;
  token_not?: Maybe<Scalars['String']>;
  token_contains?: Maybe<Scalars['String']>;
  token_not_contains?: Maybe<Scalars['String']>;
  token_starts_with?: Maybe<Scalars['String']>;
  token_not_starts_with?: Maybe<Scalars['String']>;
  token_ends_with?: Maybe<Scalars['String']>;
  token_not_ends_with?: Maybe<Scalars['String']>;
  token_i?: Maybe<Scalars['String']>;
  token_not_i?: Maybe<Scalars['String']>;
  token_contains_i?: Maybe<Scalars['String']>;
  token_not_contains_i?: Maybe<Scalars['String']>;
  token_starts_with_i?: Maybe<Scalars['String']>;
  token_not_starts_with_i?: Maybe<Scalars['String']>;
  token_ends_with_i?: Maybe<Scalars['String']>;
  token_not_ends_with_i?: Maybe<Scalars['String']>;
  token_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  token_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestedAt?: Maybe<Scalars['String']>;
  requestedAt_not?: Maybe<Scalars['String']>;
  requestedAt_lt?: Maybe<Scalars['String']>;
  requestedAt_lte?: Maybe<Scalars['String']>;
  requestedAt_gt?: Maybe<Scalars['String']>;
  requestedAt_gte?: Maybe<Scalars['String']>;
  requestedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  expiresAt?: Maybe<Scalars['String']>;
  expiresAt_not?: Maybe<Scalars['String']>;
  expiresAt_lt?: Maybe<Scalars['String']>;
  expiresAt_lte?: Maybe<Scalars['String']>;
  expiresAt_gt?: Maybe<Scalars['String']>;
  expiresAt_gte?: Maybe<Scalars['String']>;
  expiresAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  expiresAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  usedAt?: Maybe<Scalars['String']>;
  usedAt_not?: Maybe<Scalars['String']>;
  usedAt_lt?: Maybe<Scalars['String']>;
  usedAt_lte?: Maybe<Scalars['String']>;
  usedAt_gt?: Maybe<Scalars['String']>;
  usedAt_gte?: Maybe<Scalars['String']>;
  usedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  usedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type ForgotPasswordActionWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ForgotPasswordActionsCreateInput = {
  data?: Maybe<ForgotPasswordActionCreateInput>;
};

export type ForgotPasswordActionsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ForgotPasswordActionUpdateInput>;
};

export type GeneratePaymentLinkCallbacksInput = {
  successUrl: Scalars['String'];
  failureUrl: Scalars['String'];
};

export type GeneratePaymentLinkInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  receipt?: Maybe<BillingReceiptWhereUniqueInput>;
  receiptData?: Maybe<GeneratePaymentLinkReceiptDataInput>;
  acquiringIntegrationContext: AcquiringIntegrationContextWhereUniqueInput;
  callbacks: GeneratePaymentLinkCallbacksInput;
};

export type GeneratePaymentLinkOutput = {
  __typename?: 'GeneratePaymentLinkOutput';
  dv: Scalars['Int'];
  paymentUrl: Scalars['String'];
};

export type GeneratePaymentLinkReceiptDataInput = {
  currencyCode: Scalars['String'];
  amount: Scalars['String'];
  periodYear: Scalars['Int'];
  periodMonth: Scalars['Int'];
  accountNumber: Scalars['String'];
};

export type GetAccessTokenByUserIdInput = {
  userId: Scalars['ID'];
  type: Scalars['String'];
};

export type GetAccessTokenByUserIdOutput = {
  __typename?: 'GetAccessTokenByUserIdOutput';
  accessToken: Scalars['ID'];
  ttl: Scalars['Int'];
};

export type GetExternalReportIframeUrlInput = {
  dv: Scalars['Int'];
  sender: Scalars['JSON'];
  id: Scalars['ID'];
  organizationId: Scalars['ID'];
};

export type GetExternalReportIframeUrlOutput = {
  __typename?: 'GetExternalReportIframeUrlOutput';
  title: Scalars['String'];
  iframeUrl?: Maybe<Scalars['String']>;
};

export type GetPhoneByConfirmPhoneActionTokenInput = {
  token: Scalars['String'];
  captcha: Scalars['String'];
};

export type GetPhoneByConfirmPhoneActionTokenOutput = {
  __typename?: 'GetPhoneByConfirmPhoneActionTokenOutput';
  phone: Scalars['String'];
  isPhoneVerified: Scalars['Boolean'];
};

/**  Entries of mass planned and emergency incidents with water, electricity, etc.  */
export type Incident = {
  __typename?: 'Incident';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the Incident List config, or
   *  2. As an alias to the field set on 'labelField' in the Incident List config, or
   *  3. As an alias to a 'name' field on the Incident List (if one exists), or
   *  4. As an alias to the 'id' field on the Incident List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Autogenerated incident human readable ID  */
  number?: Maybe<Scalars['Int']>;
  /**  Text description of the incident  */
  details?: Maybe<Scalars['String']>;
  /**  Incident status indicates the actuality of the incident  */
  status?: Maybe<IncidentStatusType>;
  /**  Text that employees should say to residents  */
  textForResident?: Maybe<Scalars['String']>;
  /**  Start date of work related to the incident (seconds and milliseconds are forced to zero)  */
  workStart?: Maybe<Scalars['String']>;
  /**  Finish date of work related to the incident (seconds and milliseconds are forced to zero)  */
  workFinish?: Maybe<Scalars['String']>;
  /**  Type of work that is carried out during the incident: emergency or scheduled  */
  workType?: Maybe<IncidentWorkTypeType>;
  /**  True if incident includes all properties in organization  */
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

/**  Incremental changes of Incident  */
export type IncidentChange = {
  __typename?: 'IncidentChange';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the IncidentChange List config, or
   *  2. As an alias to the field set on 'labelField' in the IncidentChange List config, or
   *  3. As an alias to a 'name' field on the IncidentChange List (if one exists), or
   *  4. As an alias to the 'id' field on the IncidentChange List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Related incident, whose change is logged in this entity  */
  incident?: Maybe<Incident>;
  /**  Text description of the incident  */
  detailsFrom?: Maybe<Scalars['String']>;
  /**  Text description of the incident  */
  detailsTo?: Maybe<Scalars['String']>;
  /**  Incident status indicates the actuality of the incident  */
  statusFrom?: Maybe<IncidentChangeStatusFromType>;
  /**  Incident status indicates the actuality of the incident  */
  statusTo?: Maybe<IncidentChangeStatusToType>;
  /**  Text that employees should say to residents  */
  textForResidentFrom?: Maybe<Scalars['String']>;
  /**  Text that employees should say to residents  */
  textForResidentTo?: Maybe<Scalars['String']>;
  /**  Start date of work related to the incident (seconds and milliseconds are forced to zero)  */
  workStartFrom?: Maybe<Scalars['String']>;
  /**  Start date of work related to the incident (seconds and milliseconds are forced to zero)  */
  workStartTo?: Maybe<Scalars['String']>;
  /**  Finish date of work related to the incident (seconds and milliseconds are forced to zero)  */
  workFinishFrom?: Maybe<Scalars['String']>;
  /**  Finish date of work related to the incident (seconds and milliseconds are forced to zero)  */
  workFinishTo?: Maybe<Scalars['String']>;
  /**  Type of work that is carried out during the incident: emergency or scheduled  */
  workTypeFrom?: Maybe<IncidentChangeWorkTypeFromType>;
  /**  Type of work that is carried out during the incident: emergency or scheduled  */
  workTypeTo?: Maybe<IncidentChangeWorkTypeToType>;
  /**  Old id of related entity. Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organizationIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organizationIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organizationDisplayNameFrom?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organizationDisplayNameTo?: Maybe<Scalars['String']>;
  /**  Type of user who changed the incident, can be employee role from same organization or related, resident or deleted employee  */
  changedByRole?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type IncidentChangeCreateInput = {
  incident?: Maybe<IncidentRelateToOneInput>;
  detailsFrom?: Maybe<Scalars['String']>;
  detailsTo?: Maybe<Scalars['String']>;
  statusFrom?: Maybe<IncidentChangeStatusFromType>;
  statusTo?: Maybe<IncidentChangeStatusToType>;
  textForResidentFrom?: Maybe<Scalars['String']>;
  textForResidentTo?: Maybe<Scalars['String']>;
  workStartFrom?: Maybe<Scalars['String']>;
  workStartTo?: Maybe<Scalars['String']>;
  workFinishFrom?: Maybe<Scalars['String']>;
  workFinishTo?: Maybe<Scalars['String']>;
  workTypeFrom?: Maybe<IncidentChangeWorkTypeFromType>;
  workTypeTo?: Maybe<IncidentChangeWorkTypeToType>;
  organizationIdFrom?: Maybe<Scalars['ID']>;
  organizationIdTo?: Maybe<Scalars['ID']>;
  organizationDisplayNameFrom?: Maybe<Scalars['String']>;
  organizationDisplayNameTo?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export enum IncidentChangeStatusFromType {
  Actual = 'actual',
  NotActual = 'not_actual'
}

export enum IncidentChangeStatusToType {
  Actual = 'actual',
  NotActual = 'not_actual'
}

export type IncidentChangeUpdateInput = {
  incident?: Maybe<IncidentRelateToOneInput>;
  detailsFrom?: Maybe<Scalars['String']>;
  detailsTo?: Maybe<Scalars['String']>;
  statusFrom?: Maybe<IncidentChangeStatusFromType>;
  statusTo?: Maybe<IncidentChangeStatusToType>;
  textForResidentFrom?: Maybe<Scalars['String']>;
  textForResidentTo?: Maybe<Scalars['String']>;
  workStartFrom?: Maybe<Scalars['String']>;
  workStartTo?: Maybe<Scalars['String']>;
  workFinishFrom?: Maybe<Scalars['String']>;
  workFinishTo?: Maybe<Scalars['String']>;
  workTypeFrom?: Maybe<IncidentChangeWorkTypeFromType>;
  workTypeTo?: Maybe<IncidentChangeWorkTypeToType>;
  organizationIdFrom?: Maybe<Scalars['ID']>;
  organizationIdTo?: Maybe<Scalars['ID']>;
  organizationDisplayNameFrom?: Maybe<Scalars['String']>;
  organizationDisplayNameTo?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type IncidentChangeWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentChangeWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentChangeWhereInput>>>;
  incident?: Maybe<IncidentWhereInput>;
  incident_is_null?: Maybe<Scalars['Boolean']>;
  detailsFrom?: Maybe<Scalars['String']>;
  detailsFrom_not?: Maybe<Scalars['String']>;
  detailsFrom_contains?: Maybe<Scalars['String']>;
  detailsFrom_not_contains?: Maybe<Scalars['String']>;
  detailsFrom_starts_with?: Maybe<Scalars['String']>;
  detailsFrom_not_starts_with?: Maybe<Scalars['String']>;
  detailsFrom_ends_with?: Maybe<Scalars['String']>;
  detailsFrom_not_ends_with?: Maybe<Scalars['String']>;
  detailsFrom_i?: Maybe<Scalars['String']>;
  detailsFrom_not_i?: Maybe<Scalars['String']>;
  detailsFrom_contains_i?: Maybe<Scalars['String']>;
  detailsFrom_not_contains_i?: Maybe<Scalars['String']>;
  detailsFrom_starts_with_i?: Maybe<Scalars['String']>;
  detailsFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  detailsFrom_ends_with_i?: Maybe<Scalars['String']>;
  detailsFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  detailsFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailsFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailsTo?: Maybe<Scalars['String']>;
  detailsTo_not?: Maybe<Scalars['String']>;
  detailsTo_contains?: Maybe<Scalars['String']>;
  detailsTo_not_contains?: Maybe<Scalars['String']>;
  detailsTo_starts_with?: Maybe<Scalars['String']>;
  detailsTo_not_starts_with?: Maybe<Scalars['String']>;
  detailsTo_ends_with?: Maybe<Scalars['String']>;
  detailsTo_not_ends_with?: Maybe<Scalars['String']>;
  detailsTo_i?: Maybe<Scalars['String']>;
  detailsTo_not_i?: Maybe<Scalars['String']>;
  detailsTo_contains_i?: Maybe<Scalars['String']>;
  detailsTo_not_contains_i?: Maybe<Scalars['String']>;
  detailsTo_starts_with_i?: Maybe<Scalars['String']>;
  detailsTo_not_starts_with_i?: Maybe<Scalars['String']>;
  detailsTo_ends_with_i?: Maybe<Scalars['String']>;
  detailsTo_not_ends_with_i?: Maybe<Scalars['String']>;
  detailsTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailsTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusFrom?: Maybe<IncidentChangeStatusFromType>;
  statusFrom_not?: Maybe<IncidentChangeStatusFromType>;
  statusFrom_in?: Maybe<Array<Maybe<IncidentChangeStatusFromType>>>;
  statusFrom_not_in?: Maybe<Array<Maybe<IncidentChangeStatusFromType>>>;
  statusTo?: Maybe<IncidentChangeStatusToType>;
  statusTo_not?: Maybe<IncidentChangeStatusToType>;
  statusTo_in?: Maybe<Array<Maybe<IncidentChangeStatusToType>>>;
  statusTo_not_in?: Maybe<Array<Maybe<IncidentChangeStatusToType>>>;
  textForResidentFrom?: Maybe<Scalars['String']>;
  textForResidentFrom_not?: Maybe<Scalars['String']>;
  textForResidentFrom_contains?: Maybe<Scalars['String']>;
  textForResidentFrom_not_contains?: Maybe<Scalars['String']>;
  textForResidentFrom_starts_with?: Maybe<Scalars['String']>;
  textForResidentFrom_not_starts_with?: Maybe<Scalars['String']>;
  textForResidentFrom_ends_with?: Maybe<Scalars['String']>;
  textForResidentFrom_not_ends_with?: Maybe<Scalars['String']>;
  textForResidentFrom_i?: Maybe<Scalars['String']>;
  textForResidentFrom_not_i?: Maybe<Scalars['String']>;
  textForResidentFrom_contains_i?: Maybe<Scalars['String']>;
  textForResidentFrom_not_contains_i?: Maybe<Scalars['String']>;
  textForResidentFrom_starts_with_i?: Maybe<Scalars['String']>;
  textForResidentFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  textForResidentFrom_ends_with_i?: Maybe<Scalars['String']>;
  textForResidentFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  textForResidentFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  textForResidentFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  textForResidentTo?: Maybe<Scalars['String']>;
  textForResidentTo_not?: Maybe<Scalars['String']>;
  textForResidentTo_contains?: Maybe<Scalars['String']>;
  textForResidentTo_not_contains?: Maybe<Scalars['String']>;
  textForResidentTo_starts_with?: Maybe<Scalars['String']>;
  textForResidentTo_not_starts_with?: Maybe<Scalars['String']>;
  textForResidentTo_ends_with?: Maybe<Scalars['String']>;
  textForResidentTo_not_ends_with?: Maybe<Scalars['String']>;
  textForResidentTo_i?: Maybe<Scalars['String']>;
  textForResidentTo_not_i?: Maybe<Scalars['String']>;
  textForResidentTo_contains_i?: Maybe<Scalars['String']>;
  textForResidentTo_not_contains_i?: Maybe<Scalars['String']>;
  textForResidentTo_starts_with_i?: Maybe<Scalars['String']>;
  textForResidentTo_not_starts_with_i?: Maybe<Scalars['String']>;
  textForResidentTo_ends_with_i?: Maybe<Scalars['String']>;
  textForResidentTo_not_ends_with_i?: Maybe<Scalars['String']>;
  textForResidentTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  textForResidentTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workStartFrom?: Maybe<Scalars['String']>;
  workStartFrom_not?: Maybe<Scalars['String']>;
  workStartFrom_lt?: Maybe<Scalars['String']>;
  workStartFrom_lte?: Maybe<Scalars['String']>;
  workStartFrom_gt?: Maybe<Scalars['String']>;
  workStartFrom_gte?: Maybe<Scalars['String']>;
  workStartFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workStartFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workStartTo?: Maybe<Scalars['String']>;
  workStartTo_not?: Maybe<Scalars['String']>;
  workStartTo_lt?: Maybe<Scalars['String']>;
  workStartTo_lte?: Maybe<Scalars['String']>;
  workStartTo_gt?: Maybe<Scalars['String']>;
  workStartTo_gte?: Maybe<Scalars['String']>;
  workStartTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workStartTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workFinishFrom?: Maybe<Scalars['String']>;
  workFinishFrom_not?: Maybe<Scalars['String']>;
  workFinishFrom_lt?: Maybe<Scalars['String']>;
  workFinishFrom_lte?: Maybe<Scalars['String']>;
  workFinishFrom_gt?: Maybe<Scalars['String']>;
  workFinishFrom_gte?: Maybe<Scalars['String']>;
  workFinishFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workFinishFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workFinishTo?: Maybe<Scalars['String']>;
  workFinishTo_not?: Maybe<Scalars['String']>;
  workFinishTo_lt?: Maybe<Scalars['String']>;
  workFinishTo_lte?: Maybe<Scalars['String']>;
  workFinishTo_gt?: Maybe<Scalars['String']>;
  workFinishTo_gte?: Maybe<Scalars['String']>;
  workFinishTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workFinishTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workTypeFrom?: Maybe<IncidentChangeWorkTypeFromType>;
  workTypeFrom_not?: Maybe<IncidentChangeWorkTypeFromType>;
  workTypeFrom_in?: Maybe<Array<Maybe<IncidentChangeWorkTypeFromType>>>;
  workTypeFrom_not_in?: Maybe<Array<Maybe<IncidentChangeWorkTypeFromType>>>;
  workTypeTo?: Maybe<IncidentChangeWorkTypeToType>;
  workTypeTo_not?: Maybe<IncidentChangeWorkTypeToType>;
  workTypeTo_in?: Maybe<Array<Maybe<IncidentChangeWorkTypeToType>>>;
  workTypeTo_not_in?: Maybe<Array<Maybe<IncidentChangeWorkTypeToType>>>;
  organizationIdFrom?: Maybe<Scalars['ID']>;
  organizationIdFrom_not?: Maybe<Scalars['ID']>;
  organizationIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  organizationIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  organizationIdTo?: Maybe<Scalars['ID']>;
  organizationIdTo_not?: Maybe<Scalars['ID']>;
  organizationIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  organizationIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  organizationDisplayNameFrom?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationDisplayNameTo?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_contains?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type IncidentChangeWhereUniqueInput = {
  id: Scalars['ID'];
};

export enum IncidentChangeWorkTypeFromType {
  Scheduled = 'scheduled',
  Emergency = 'emergency'
}

export enum IncidentChangeWorkTypeToType {
  Scheduled = 'scheduled',
  Emergency = 'emergency'
}

export type IncidentChangesCreateInput = {
  data?: Maybe<IncidentChangeCreateInput>;
};

export type IncidentChangesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentChangeUpdateInput>;
};

/**  Rules for all possible valid combinations of classifiers for incidents  */
export type IncidentClassifier = {
  __typename?: 'IncidentClassifier';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the IncidentClassifier List config, or
   *  2. As an alias to the field set on 'labelField' in the IncidentClassifier List config, or
   *  3. As an alias to a 'name' field on the IncidentClassifier List (if one exists), or
   *  4. As an alias to the 'id' field on the IncidentClassifier List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. If this ref is null the object is common for all organizations  */
  organization?: Maybe<Organization>;
  /**  Type of work to fix incident  */
  category?: Maybe<TicketCategoryClassifier>;
  /**  What needs to be done  */
  problem?: Maybe<TicketProblemClassifier>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type IncidentClassifierCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  category?: Maybe<TicketCategoryClassifierRelateToOneInput>;
  problem?: Maybe<TicketProblemClassifierRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type IncidentClassifierHistoryRecord = {
  __typename?: 'IncidentClassifierHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the IncidentClassifierHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the IncidentClassifierHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the IncidentClassifierHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the IncidentClassifierHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  problem?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type IncidentClassifierHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  problem?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum IncidentClassifierHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type IncidentClassifierHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  problem?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type IncidentClassifierHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentClassifierHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentClassifierHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  category_not?: Maybe<Scalars['String']>;
  category_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  problem?: Maybe<Scalars['String']>;
  problem_not?: Maybe<Scalars['String']>;
  problem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  problem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<IncidentClassifierHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<IncidentClassifierHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<IncidentClassifierHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<IncidentClassifierHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type IncidentClassifierHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type IncidentClassifierHistoryRecordsCreateInput = {
  data?: Maybe<IncidentClassifierHistoryRecordCreateInput>;
};

export type IncidentClassifierHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentClassifierHistoryRecordUpdateInput>;
};

/**  Many-to-many relationship between Incident and IncidentClassifier  */
export type IncidentClassifierIncident = {
  __typename?: 'IncidentClassifierIncident';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the IncidentClassifierIncident List config, or
   *  2. As an alias to the field set on 'labelField' in the IncidentClassifierIncident List config, or
   *  3. As an alias to a 'name' field on the IncidentClassifierIncident List (if one exists), or
   *  4. As an alias to the 'id' field on the IncidentClassifierIncident List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Incident which has a classifier  */
  incident?: Maybe<Incident>;
  /**  A classifier which is in the incident entry  */
  classifier?: Maybe<IncidentClassifier>;
  /**  Ref to the organization. It is filled in on the server and is read-only  */
  organization?: Maybe<Organization>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type IncidentClassifierIncidentCreateInput = {
  incident?: Maybe<IncidentRelateToOneInput>;
  classifier?: Maybe<IncidentClassifierRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type IncidentClassifierIncidentHistoryRecord = {
  __typename?: 'IncidentClassifierIncidentHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the IncidentClassifierIncidentHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the IncidentClassifierIncidentHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the IncidentClassifierIncidentHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the IncidentClassifierIncidentHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  incident?: Maybe<Scalars['String']>;
  classifier?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentClassifierIncidentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type IncidentClassifierIncidentHistoryRecordCreateInput = {
  incident?: Maybe<Scalars['String']>;
  classifier?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentClassifierIncidentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum IncidentClassifierIncidentHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type IncidentClassifierIncidentHistoryRecordUpdateInput = {
  incident?: Maybe<Scalars['String']>;
  classifier?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentClassifierIncidentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type IncidentClassifierIncidentHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentClassifierIncidentHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentClassifierIncidentHistoryRecordWhereInput>>>;
  incident?: Maybe<Scalars['String']>;
  incident_not?: Maybe<Scalars['String']>;
  incident_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  incident_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  classifier?: Maybe<Scalars['String']>;
  classifier_not?: Maybe<Scalars['String']>;
  classifier_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  classifier_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<IncidentClassifierIncidentHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<IncidentClassifierIncidentHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<IncidentClassifierIncidentHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<IncidentClassifierIncidentHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type IncidentClassifierIncidentHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type IncidentClassifierIncidentHistoryRecordsCreateInput = {
  data?: Maybe<IncidentClassifierIncidentHistoryRecordCreateInput>;
};

export type IncidentClassifierIncidentHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentClassifierIncidentHistoryRecordUpdateInput>;
};

export type IncidentClassifierIncidentUpdateInput = {
  incident?: Maybe<IncidentRelateToOneInput>;
  classifier?: Maybe<IncidentClassifierRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type IncidentClassifierIncidentWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentClassifierIncidentWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentClassifierIncidentWhereInput>>>;
  incident?: Maybe<IncidentWhereInput>;
  incident_is_null?: Maybe<Scalars['Boolean']>;
  classifier?: Maybe<IncidentClassifierWhereInput>;
  classifier_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type IncidentClassifierIncidentWhereUniqueInput = {
  id: Scalars['ID'];
};

export type IncidentClassifierIncidentsCreateInput = {
  data?: Maybe<IncidentClassifierIncidentCreateInput>;
};

export type IncidentClassifierIncidentsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentClassifierIncidentUpdateInput>;
};

export type IncidentClassifierRelateToOneInput = {
  create?: Maybe<IncidentClassifierCreateInput>;
  connect?: Maybe<IncidentClassifierWhereUniqueInput>;
  disconnect?: Maybe<IncidentClassifierWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type IncidentClassifierUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  category?: Maybe<TicketCategoryClassifierRelateToOneInput>;
  problem?: Maybe<TicketProblemClassifierRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type IncidentClassifierWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentClassifierWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentClassifierWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  category?: Maybe<TicketCategoryClassifierWhereInput>;
  category_is_null?: Maybe<Scalars['Boolean']>;
  problem?: Maybe<TicketProblemClassifierWhereInput>;
  problem_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type IncidentClassifierWhereUniqueInput = {
  id: Scalars['ID'];
};

export type IncidentClassifiersCreateInput = {
  data?: Maybe<IncidentClassifierCreateInput>;
};

export type IncidentClassifiersUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentClassifierUpdateInput>;
};

export type IncidentCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  number?: Maybe<Scalars['Int']>;
  details?: Maybe<Scalars['String']>;
  status?: Maybe<IncidentStatusType>;
  textForResident?: Maybe<Scalars['String']>;
  workStart?: Maybe<Scalars['String']>;
  workFinish?: Maybe<Scalars['String']>;
  workType?: Maybe<IncidentWorkTypeType>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  Stores requested export format, status of export job, link to exported file and information about progress of export job  */
export type IncidentExportTask = {
  __typename?: 'IncidentExportTask';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the IncidentExportTask List config, or
   *  2. As an alias to the field set on 'labelField' in the IncidentExportTask List config, or
   *  3. As an alias to a 'name' field on the IncidentExportTask List (if one exists), or
   *  4. As an alias to the 'id' field on the IncidentExportTask List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Status of the job. Used at client side progress information component  */
  status?: Maybe<IncidentExportTaskStatusType>;
  /**  Requested export file format  */
  format?: Maybe<IncidentExportTaskFormatType>;
  /**  How many records at the moment are exported  */
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  /**  Total records to export that will be determined at server side in export operation  */
  totalRecordsCount?: Maybe<Scalars['Int']>;
  /**  Meta information about file, saved outside of database somewhere. Shape of meta information JSON object is specific to file adapter, used by saving a file.  */
  file?: Maybe<File>;
  /**  Stores information about query and ids of exported and failed records  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Filtering conditions for records to export  */
  where?: Maybe<Scalars['JSON']>;
  /**  Sorting parameters for records to export  */
  sortBy?: Maybe<Scalars['JSON']>;
  /**  Requested export locale, in that the resulting file will be rendered  */
  locale?: Maybe<Scalars['String']>;
  /**  To requested timeZone all datetime fields will be converted  */
  timeZone?: Maybe<Scalars['String']>;
  /**  User that requested this exporting operation. Will be used for read access checks to display all exported tasks somewhere and to display progress indicator of ongoing exporting task for current user  */
  user?: Maybe<User>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type IncidentExportTaskCreateInput = {
  status?: Maybe<IncidentExportTaskStatusType>;
  format?: Maybe<IncidentExportTaskFormatType>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['Upload']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export enum IncidentExportTaskFormatType {
  Excel = 'excel'
}

/**  A keystone list  */
export type IncidentExportTaskHistoryRecord = {
  __typename?: 'IncidentExportTaskHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the IncidentExportTaskHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the IncidentExportTaskHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the IncidentExportTaskHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the IncidentExportTaskHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentExportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type IncidentExportTaskHistoryRecordCreateInput = {
  status?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentExportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum IncidentExportTaskHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type IncidentExportTaskHistoryRecordUpdateInput = {
  status?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentExportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type IncidentExportTaskHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentExportTaskHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentExportTaskHistoryRecordWhereInput>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  format?: Maybe<Scalars['String']>;
  format_not?: Maybe<Scalars['String']>;
  format_contains?: Maybe<Scalars['String']>;
  format_not_contains?: Maybe<Scalars['String']>;
  format_starts_with?: Maybe<Scalars['String']>;
  format_not_starts_with?: Maybe<Scalars['String']>;
  format_ends_with?: Maybe<Scalars['String']>;
  format_not_ends_with?: Maybe<Scalars['String']>;
  format_i?: Maybe<Scalars['String']>;
  format_not_i?: Maybe<Scalars['String']>;
  format_contains_i?: Maybe<Scalars['String']>;
  format_not_contains_i?: Maybe<Scalars['String']>;
  format_starts_with_i?: Maybe<Scalars['String']>;
  format_not_starts_with_i?: Maybe<Scalars['String']>;
  format_ends_with_i?: Maybe<Scalars['String']>;
  format_not_ends_with_i?: Maybe<Scalars['String']>;
  format_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  format_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  exportedRecordsCount_not?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  exportedRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount_not?: Maybe<Scalars['Int']>;
  totalRecordsCount_lt?: Maybe<Scalars['Int']>;
  totalRecordsCount_lte?: Maybe<Scalars['Int']>;
  totalRecordsCount_gt?: Maybe<Scalars['Int']>;
  totalRecordsCount_gte?: Maybe<Scalars['Int']>;
  totalRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  file?: Maybe<Scalars['JSON']>;
  file_not?: Maybe<Scalars['JSON']>;
  file_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where?: Maybe<Scalars['JSON']>;
  where_not?: Maybe<Scalars['JSON']>;
  where_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy?: Maybe<Scalars['JSON']>;
  sortBy_not?: Maybe<Scalars['JSON']>;
  sortBy_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  locale?: Maybe<Scalars['String']>;
  locale_not?: Maybe<Scalars['String']>;
  locale_contains?: Maybe<Scalars['String']>;
  locale_not_contains?: Maybe<Scalars['String']>;
  locale_starts_with?: Maybe<Scalars['String']>;
  locale_not_starts_with?: Maybe<Scalars['String']>;
  locale_ends_with?: Maybe<Scalars['String']>;
  locale_not_ends_with?: Maybe<Scalars['String']>;
  locale_i?: Maybe<Scalars['String']>;
  locale_not_i?: Maybe<Scalars['String']>;
  locale_contains_i?: Maybe<Scalars['String']>;
  locale_not_contains_i?: Maybe<Scalars['String']>;
  locale_starts_with_i?: Maybe<Scalars['String']>;
  locale_not_starts_with_i?: Maybe<Scalars['String']>;
  locale_ends_with_i?: Maybe<Scalars['String']>;
  locale_not_ends_with_i?: Maybe<Scalars['String']>;
  locale_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  locale_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone?: Maybe<Scalars['String']>;
  timeZone_not?: Maybe<Scalars['String']>;
  timeZone_contains?: Maybe<Scalars['String']>;
  timeZone_not_contains?: Maybe<Scalars['String']>;
  timeZone_starts_with?: Maybe<Scalars['String']>;
  timeZone_not_starts_with?: Maybe<Scalars['String']>;
  timeZone_ends_with?: Maybe<Scalars['String']>;
  timeZone_not_ends_with?: Maybe<Scalars['String']>;
  timeZone_i?: Maybe<Scalars['String']>;
  timeZone_not_i?: Maybe<Scalars['String']>;
  timeZone_contains_i?: Maybe<Scalars['String']>;
  timeZone_not_contains_i?: Maybe<Scalars['String']>;
  timeZone_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_not_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_not_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<IncidentExportTaskHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<IncidentExportTaskHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<IncidentExportTaskHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<IncidentExportTaskHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type IncidentExportTaskHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type IncidentExportTaskHistoryRecordsCreateInput = {
  data?: Maybe<IncidentExportTaskHistoryRecordCreateInput>;
};

export type IncidentExportTaskHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentExportTaskHistoryRecordUpdateInput>;
};

export enum IncidentExportTaskStatusType {
  Processing = 'processing',
  Completed = 'completed',
  Error = 'error',
  Cancelled = 'cancelled'
}

export type IncidentExportTaskUpdateInput = {
  status?: Maybe<IncidentExportTaskStatusType>;
  format?: Maybe<IncidentExportTaskFormatType>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['Upload']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type IncidentExportTaskWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentExportTaskWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentExportTaskWhereInput>>>;
  status?: Maybe<IncidentExportTaskStatusType>;
  status_not?: Maybe<IncidentExportTaskStatusType>;
  status_in?: Maybe<Array<Maybe<IncidentExportTaskStatusType>>>;
  status_not_in?: Maybe<Array<Maybe<IncidentExportTaskStatusType>>>;
  format?: Maybe<IncidentExportTaskFormatType>;
  format_not?: Maybe<IncidentExportTaskFormatType>;
  format_in?: Maybe<Array<Maybe<IncidentExportTaskFormatType>>>;
  format_not_in?: Maybe<Array<Maybe<IncidentExportTaskFormatType>>>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  exportedRecordsCount_not?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  exportedRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount_not?: Maybe<Scalars['Int']>;
  totalRecordsCount_lt?: Maybe<Scalars['Int']>;
  totalRecordsCount_lte?: Maybe<Scalars['Int']>;
  totalRecordsCount_gt?: Maybe<Scalars['Int']>;
  totalRecordsCount_gte?: Maybe<Scalars['Int']>;
  totalRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  file?: Maybe<Scalars['String']>;
  file_not?: Maybe<Scalars['String']>;
  file_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where?: Maybe<Scalars['JSON']>;
  where_not?: Maybe<Scalars['JSON']>;
  where_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy?: Maybe<Scalars['JSON']>;
  sortBy_not?: Maybe<Scalars['JSON']>;
  sortBy_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  locale?: Maybe<Scalars['String']>;
  locale_not?: Maybe<Scalars['String']>;
  locale_contains?: Maybe<Scalars['String']>;
  locale_not_contains?: Maybe<Scalars['String']>;
  locale_starts_with?: Maybe<Scalars['String']>;
  locale_not_starts_with?: Maybe<Scalars['String']>;
  locale_ends_with?: Maybe<Scalars['String']>;
  locale_not_ends_with?: Maybe<Scalars['String']>;
  locale_i?: Maybe<Scalars['String']>;
  locale_not_i?: Maybe<Scalars['String']>;
  locale_contains_i?: Maybe<Scalars['String']>;
  locale_not_contains_i?: Maybe<Scalars['String']>;
  locale_starts_with_i?: Maybe<Scalars['String']>;
  locale_not_starts_with_i?: Maybe<Scalars['String']>;
  locale_ends_with_i?: Maybe<Scalars['String']>;
  locale_not_ends_with_i?: Maybe<Scalars['String']>;
  locale_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  locale_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone?: Maybe<Scalars['String']>;
  timeZone_not?: Maybe<Scalars['String']>;
  timeZone_contains?: Maybe<Scalars['String']>;
  timeZone_not_contains?: Maybe<Scalars['String']>;
  timeZone_starts_with?: Maybe<Scalars['String']>;
  timeZone_not_starts_with?: Maybe<Scalars['String']>;
  timeZone_ends_with?: Maybe<Scalars['String']>;
  timeZone_not_ends_with?: Maybe<Scalars['String']>;
  timeZone_i?: Maybe<Scalars['String']>;
  timeZone_not_i?: Maybe<Scalars['String']>;
  timeZone_contains_i?: Maybe<Scalars['String']>;
  timeZone_not_contains_i?: Maybe<Scalars['String']>;
  timeZone_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_not_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_not_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type IncidentExportTaskWhereUniqueInput = {
  id: Scalars['ID'];
};

export type IncidentExportTasksCreateInput = {
  data?: Maybe<IncidentExportTaskCreateInput>;
};

export type IncidentExportTasksUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentExportTaskUpdateInput>;
};

/**  A keystone list  */
export type IncidentHistoryRecord = {
  __typename?: 'IncidentHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the IncidentHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the IncidentHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the IncidentHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the IncidentHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['JSON']>;
  details?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  textForResident?: Maybe<Scalars['String']>;
  workStart?: Maybe<Scalars['String']>;
  workFinish?: Maybe<Scalars['String']>;
  workType?: Maybe<Scalars['String']>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type IncidentHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['JSON']>;
  details?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  textForResident?: Maybe<Scalars['String']>;
  workStart?: Maybe<Scalars['String']>;
  workFinish?: Maybe<Scalars['String']>;
  workType?: Maybe<Scalars['String']>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum IncidentHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type IncidentHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['JSON']>;
  details?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  textForResident?: Maybe<Scalars['String']>;
  workStart?: Maybe<Scalars['String']>;
  workFinish?: Maybe<Scalars['String']>;
  workType?: Maybe<Scalars['String']>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type IncidentHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number?: Maybe<Scalars['JSON']>;
  number_not?: Maybe<Scalars['JSON']>;
  number_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  details?: Maybe<Scalars['String']>;
  details_not?: Maybe<Scalars['String']>;
  details_contains?: Maybe<Scalars['String']>;
  details_not_contains?: Maybe<Scalars['String']>;
  details_starts_with?: Maybe<Scalars['String']>;
  details_not_starts_with?: Maybe<Scalars['String']>;
  details_ends_with?: Maybe<Scalars['String']>;
  details_not_ends_with?: Maybe<Scalars['String']>;
  details_i?: Maybe<Scalars['String']>;
  details_not_i?: Maybe<Scalars['String']>;
  details_contains_i?: Maybe<Scalars['String']>;
  details_not_contains_i?: Maybe<Scalars['String']>;
  details_starts_with_i?: Maybe<Scalars['String']>;
  details_not_starts_with_i?: Maybe<Scalars['String']>;
  details_ends_with_i?: Maybe<Scalars['String']>;
  details_not_ends_with_i?: Maybe<Scalars['String']>;
  details_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  details_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  textForResident?: Maybe<Scalars['String']>;
  textForResident_not?: Maybe<Scalars['String']>;
  textForResident_contains?: Maybe<Scalars['String']>;
  textForResident_not_contains?: Maybe<Scalars['String']>;
  textForResident_starts_with?: Maybe<Scalars['String']>;
  textForResident_not_starts_with?: Maybe<Scalars['String']>;
  textForResident_ends_with?: Maybe<Scalars['String']>;
  textForResident_not_ends_with?: Maybe<Scalars['String']>;
  textForResident_i?: Maybe<Scalars['String']>;
  textForResident_not_i?: Maybe<Scalars['String']>;
  textForResident_contains_i?: Maybe<Scalars['String']>;
  textForResident_not_contains_i?: Maybe<Scalars['String']>;
  textForResident_starts_with_i?: Maybe<Scalars['String']>;
  textForResident_not_starts_with_i?: Maybe<Scalars['String']>;
  textForResident_ends_with_i?: Maybe<Scalars['String']>;
  textForResident_not_ends_with_i?: Maybe<Scalars['String']>;
  textForResident_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  textForResident_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workStart?: Maybe<Scalars['String']>;
  workStart_not?: Maybe<Scalars['String']>;
  workStart_lt?: Maybe<Scalars['String']>;
  workStart_lte?: Maybe<Scalars['String']>;
  workStart_gt?: Maybe<Scalars['String']>;
  workStart_gte?: Maybe<Scalars['String']>;
  workStart_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workStart_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workFinish?: Maybe<Scalars['String']>;
  workFinish_not?: Maybe<Scalars['String']>;
  workFinish_lt?: Maybe<Scalars['String']>;
  workFinish_lte?: Maybe<Scalars['String']>;
  workFinish_gt?: Maybe<Scalars['String']>;
  workFinish_gte?: Maybe<Scalars['String']>;
  workFinish_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workFinish_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workType?: Maybe<Scalars['String']>;
  workType_not?: Maybe<Scalars['String']>;
  workType_contains?: Maybe<Scalars['String']>;
  workType_not_contains?: Maybe<Scalars['String']>;
  workType_starts_with?: Maybe<Scalars['String']>;
  workType_not_starts_with?: Maybe<Scalars['String']>;
  workType_ends_with?: Maybe<Scalars['String']>;
  workType_not_ends_with?: Maybe<Scalars['String']>;
  workType_i?: Maybe<Scalars['String']>;
  workType_not_i?: Maybe<Scalars['String']>;
  workType_contains_i?: Maybe<Scalars['String']>;
  workType_not_contains_i?: Maybe<Scalars['String']>;
  workType_starts_with_i?: Maybe<Scalars['String']>;
  workType_not_starts_with_i?: Maybe<Scalars['String']>;
  workType_ends_with_i?: Maybe<Scalars['String']>;
  workType_not_ends_with_i?: Maybe<Scalars['String']>;
  workType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  hasAllProperties_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<IncidentHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<IncidentHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<IncidentHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<IncidentHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type IncidentHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type IncidentHistoryRecordsCreateInput = {
  data?: Maybe<IncidentHistoryRecordCreateInput>;
};

export type IncidentHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentHistoryRecordUpdateInput>;
};

export type IncidentPropertiesCreateInput = {
  data?: Maybe<IncidentPropertyCreateInput>;
};

export type IncidentPropertiesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentPropertyUpdateInput>;
};

/**  Many-to-many relationship between Incident and Property  */
export type IncidentProperty = {
  __typename?: 'IncidentProperty';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the IncidentProperty List config, or
   *  2. As an alias to the field set on 'labelField' in the IncidentProperty List config, or
   *  3. As an alias to a 'name' field on the IncidentProperty List (if one exists), or
   *  4. As an alias to the 'id' field on the IncidentProperty List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Incident which has a property  */
  incident?: Maybe<Incident>;
  /**  A property which is in the incident entry  */
  property?: Maybe<Property>;
  /**  Address of property, which synced with property and displayed, if property is deleted  */
  propertyAddress?: Maybe<Scalars['String']>;
  /**  Address meta of property, which synced with property and used to form view of address, if property is deleted  */
  propertyAddressMeta?: Maybe<AddressMetaField>;
  /**  Ref to the organization. It is filled in on the server and is read-only  */
  organization?: Maybe<Organization>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type IncidentPropertyCreateInput = {
  incident?: Maybe<IncidentRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type IncidentPropertyHistoryRecord = {
  __typename?: 'IncidentPropertyHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the IncidentPropertyHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the IncidentPropertyHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the IncidentPropertyHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the IncidentPropertyHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  incident?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  organization?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type IncidentPropertyHistoryRecordCreateInput = {
  incident?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum IncidentPropertyHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type IncidentPropertyHistoryRecordUpdateInput = {
  incident?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<IncidentPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type IncidentPropertyHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentPropertyHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentPropertyHistoryRecordWhereInput>>>;
  incident?: Maybe<Scalars['String']>;
  incident_not?: Maybe<Scalars['String']>;
  incident_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  incident_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddress_not?: Maybe<Scalars['String']>;
  propertyAddress_contains?: Maybe<Scalars['String']>;
  propertyAddress_not_contains?: Maybe<Scalars['String']>;
  propertyAddress_starts_with?: Maybe<Scalars['String']>;
  propertyAddress_not_starts_with?: Maybe<Scalars['String']>;
  propertyAddress_ends_with?: Maybe<Scalars['String']>;
  propertyAddress_not_ends_with?: Maybe<Scalars['String']>;
  propertyAddress_i?: Maybe<Scalars['String']>;
  propertyAddress_not_i?: Maybe<Scalars['String']>;
  propertyAddress_contains_i?: Maybe<Scalars['String']>;
  propertyAddress_not_contains_i?: Maybe<Scalars['String']>;
  propertyAddress_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddress_not_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddress_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddress_not_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  propertyAddressMeta_not?: Maybe<Scalars['JSON']>;
  propertyAddressMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  propertyAddressMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<IncidentPropertyHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<IncidentPropertyHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<IncidentPropertyHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<IncidentPropertyHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type IncidentPropertyHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type IncidentPropertyHistoryRecordsCreateInput = {
  data?: Maybe<IncidentPropertyHistoryRecordCreateInput>;
};

export type IncidentPropertyHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentPropertyHistoryRecordUpdateInput>;
};

export type IncidentPropertyUpdateInput = {
  incident?: Maybe<IncidentRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type IncidentPropertyWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentPropertyWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentPropertyWhereInput>>>;
  incident?: Maybe<IncidentWhereInput>;
  incident_is_null?: Maybe<Scalars['Boolean']>;
  property?: Maybe<PropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddress_not?: Maybe<Scalars['String']>;
  propertyAddress_contains?: Maybe<Scalars['String']>;
  propertyAddress_not_contains?: Maybe<Scalars['String']>;
  propertyAddress_starts_with?: Maybe<Scalars['String']>;
  propertyAddress_not_starts_with?: Maybe<Scalars['String']>;
  propertyAddress_ends_with?: Maybe<Scalars['String']>;
  propertyAddress_not_ends_with?: Maybe<Scalars['String']>;
  propertyAddress_i?: Maybe<Scalars['String']>;
  propertyAddress_not_i?: Maybe<Scalars['String']>;
  propertyAddress_contains_i?: Maybe<Scalars['String']>;
  propertyAddress_not_contains_i?: Maybe<Scalars['String']>;
  propertyAddress_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddress_not_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddress_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddress_not_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  propertyAddressMeta_not?: Maybe<Scalars['JSON']>;
  propertyAddressMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  propertyAddressMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type IncidentPropertyWhereUniqueInput = {
  id: Scalars['ID'];
};

export type IncidentRelateToOneInput = {
  create?: Maybe<IncidentCreateInput>;
  connect?: Maybe<IncidentWhereUniqueInput>;
  disconnect?: Maybe<IncidentWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export enum IncidentStatusType {
  Actual = 'actual',
  NotActual = 'not_actual'
}

export type IncidentUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  number?: Maybe<Scalars['Int']>;
  details?: Maybe<Scalars['String']>;
  status?: Maybe<IncidentStatusType>;
  textForResident?: Maybe<Scalars['String']>;
  workStart?: Maybe<Scalars['String']>;
  workFinish?: Maybe<Scalars['String']>;
  workType?: Maybe<IncidentWorkTypeType>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type IncidentWhereInput = {
  AND?: Maybe<Array<Maybe<IncidentWhereInput>>>;
  OR?: Maybe<Array<Maybe<IncidentWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  number?: Maybe<Scalars['Int']>;
  number_not?: Maybe<Scalars['Int']>;
  number_lt?: Maybe<Scalars['Int']>;
  number_lte?: Maybe<Scalars['Int']>;
  number_gt?: Maybe<Scalars['Int']>;
  number_gte?: Maybe<Scalars['Int']>;
  number_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  details?: Maybe<Scalars['String']>;
  details_not?: Maybe<Scalars['String']>;
  details_contains?: Maybe<Scalars['String']>;
  details_not_contains?: Maybe<Scalars['String']>;
  details_starts_with?: Maybe<Scalars['String']>;
  details_not_starts_with?: Maybe<Scalars['String']>;
  details_ends_with?: Maybe<Scalars['String']>;
  details_not_ends_with?: Maybe<Scalars['String']>;
  details_i?: Maybe<Scalars['String']>;
  details_not_i?: Maybe<Scalars['String']>;
  details_contains_i?: Maybe<Scalars['String']>;
  details_not_contains_i?: Maybe<Scalars['String']>;
  details_starts_with_i?: Maybe<Scalars['String']>;
  details_not_starts_with_i?: Maybe<Scalars['String']>;
  details_ends_with_i?: Maybe<Scalars['String']>;
  details_not_ends_with_i?: Maybe<Scalars['String']>;
  details_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  details_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<IncidentStatusType>;
  status_not?: Maybe<IncidentStatusType>;
  status_in?: Maybe<Array<Maybe<IncidentStatusType>>>;
  status_not_in?: Maybe<Array<Maybe<IncidentStatusType>>>;
  textForResident?: Maybe<Scalars['String']>;
  textForResident_not?: Maybe<Scalars['String']>;
  textForResident_contains?: Maybe<Scalars['String']>;
  textForResident_not_contains?: Maybe<Scalars['String']>;
  textForResident_starts_with?: Maybe<Scalars['String']>;
  textForResident_not_starts_with?: Maybe<Scalars['String']>;
  textForResident_ends_with?: Maybe<Scalars['String']>;
  textForResident_not_ends_with?: Maybe<Scalars['String']>;
  textForResident_i?: Maybe<Scalars['String']>;
  textForResident_not_i?: Maybe<Scalars['String']>;
  textForResident_contains_i?: Maybe<Scalars['String']>;
  textForResident_not_contains_i?: Maybe<Scalars['String']>;
  textForResident_starts_with_i?: Maybe<Scalars['String']>;
  textForResident_not_starts_with_i?: Maybe<Scalars['String']>;
  textForResident_ends_with_i?: Maybe<Scalars['String']>;
  textForResident_not_ends_with_i?: Maybe<Scalars['String']>;
  textForResident_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  textForResident_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workStart?: Maybe<Scalars['String']>;
  workStart_not?: Maybe<Scalars['String']>;
  workStart_lt?: Maybe<Scalars['String']>;
  workStart_lte?: Maybe<Scalars['String']>;
  workStart_gt?: Maybe<Scalars['String']>;
  workStart_gte?: Maybe<Scalars['String']>;
  workStart_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workStart_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workFinish?: Maybe<Scalars['String']>;
  workFinish_not?: Maybe<Scalars['String']>;
  workFinish_lt?: Maybe<Scalars['String']>;
  workFinish_lte?: Maybe<Scalars['String']>;
  workFinish_gt?: Maybe<Scalars['String']>;
  workFinish_gte?: Maybe<Scalars['String']>;
  workFinish_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workFinish_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  workType?: Maybe<IncidentWorkTypeType>;
  workType_not?: Maybe<IncidentWorkTypeType>;
  workType_in?: Maybe<Array<Maybe<IncidentWorkTypeType>>>;
  workType_not_in?: Maybe<Array<Maybe<IncidentWorkTypeType>>>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  hasAllProperties_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type IncidentWhereUniqueInput = {
  id: Scalars['ID'];
};

export enum IncidentWorkTypeType {
  Scheduled = 'scheduled',
  Emergency = 'emergency'
}

export type IncidentsCreateInput = {
  data?: Maybe<IncidentCreateInput>;
};

export type IncidentsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<IncidentUpdateInput>;
};

export type InviteNewOrganizationEmployeeInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  organization: OrganizationWhereUniqueInput;
  email?: Maybe<Scalars['String']>;
  phone: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  role: OrganizationEmployeeRoleWhereUniqueInput;
  position?: Maybe<Scalars['String']>;
  specializations?: Maybe<Array<Maybe<TicketCategoryClassifierWhereUniqueInput>>>;
  hasAllSpecializations?: Maybe<Scalars['Boolean']>;
};


/**  Notification message  */
export type Message = {
  __typename?: 'Message';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the Message List config, or
   *  2. As an alias to the field set on 'labelField' in the Message List config, or
   *  3. As an alias to a 'name' field on the Message List (if one exists), or
   *  4. As an alias to the 'id' field on the Message List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  This message is related to some organization. Organization can manage their messages  */
  organization?: Maybe<Organization>;
  /**  to User  */
  user?: Maybe<User>;
  /**  to Phone  */
  phone?: Maybe<Scalars['String']>;
  /**  to Email  */
  email?: Maybe<Scalars['String']>;
  /**  to Remote client  */
  remoteClient?: Maybe<RemoteClient>;
  /**  from Email  */
  emailFrom?: Maybe<Scalars['String']>;
  /**  Message status  */
  lang?: Maybe<MessageLangType>;
  /**  Message type  */
  type?: Maybe<Scalars['String']>;
  /**  Message context  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Message status  */
  status?: Maybe<MessageStatusType>;
  /**  Task processing metadata. Just for debug purpose. You can see exactly what and where the message was sent  */
  processingMeta?: Maybe<Scalars['JSON']>;
  /**  Delivered (received) at time  */
  deliveredAt?: Maybe<Scalars['String']>;
  /**  Sent at time  */
  sentAt?: Maybe<Scalars['String']>;
  /**  Read at time  */
  readAt?: Maybe<Scalars['String']>;
  /**  Unique message key. You can use it if you need to make sure that the message you are trying to create has not been created before. Fields `user`, `type` and `uniqkey` is to be unique. If you don't have a `user`, the fields `type` and `uniqkey` is to be unique  */
  uniqKey?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

/**  Rule for blocking specific type of messages for apps  */
export type MessageAppBlackList = {
  __typename?: 'MessageAppBlackList';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MessageAppBlackList List config, or
   *  2. As an alias to the field set on 'labelField' in the MessageAppBlackList List config, or
   *  3. As an alias to a 'name' field on the MessageAppBlackList List (if one exists), or
   *  4. As an alias to the 'id' field on the MessageAppBlackList List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  the app we want to block from sending messages to (null - all apps)  */
  app?: Maybe<B2CApp>;
  /**  The type of message we want to block  */
  type?: Maybe<Scalars['String']>;
  /**  The reason why the entry was added to the MessageAppBlackList  */
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type MessageAppBlackListCreateInput = {
  app?: Maybe<B2CAppRelateToOneInput>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type MessageAppBlackListHistoryRecord = {
  __typename?: 'MessageAppBlackListHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MessageAppBlackListHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MessageAppBlackListHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MessageAppBlackListHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MessageAppBlackListHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  app?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageAppBlackListHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MessageAppBlackListHistoryRecordCreateInput = {
  app?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageAppBlackListHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MessageAppBlackListHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MessageAppBlackListHistoryRecordUpdateInput = {
  app?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageAppBlackListHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MessageAppBlackListHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MessageAppBlackListHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MessageAppBlackListHistoryRecordWhereInput>>>;
  app?: Maybe<Scalars['String']>;
  app_not?: Maybe<Scalars['String']>;
  app_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  app_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MessageAppBlackListHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MessageAppBlackListHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MessageAppBlackListHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MessageAppBlackListHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MessageAppBlackListHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MessageAppBlackListHistoryRecordsCreateInput = {
  data?: Maybe<MessageAppBlackListHistoryRecordCreateInput>;
};

export type MessageAppBlackListHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MessageAppBlackListHistoryRecordUpdateInput>;
};

export type MessageAppBlackListUpdateInput = {
  app?: Maybe<B2CAppRelateToOneInput>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type MessageAppBlackListWhereInput = {
  AND?: Maybe<Array<Maybe<MessageAppBlackListWhereInput>>>;
  OR?: Maybe<Array<Maybe<MessageAppBlackListWhereInput>>>;
  app?: Maybe<B2CAppWhereInput>;
  app_is_null?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MessageAppBlackListWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MessageAppBlackListsCreateInput = {
  data?: Maybe<MessageAppBlackListCreateInput>;
};

export type MessageAppBlackListsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MessageAppBlackListUpdateInput>;
};

/**  Message batch. Adding record here will cause sending message to all targets (user, phone or email) listed in targets via transport detected based on target type.  */
export type MessageBatch = {
  __typename?: 'MessageBatch';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MessageBatch List config, or
   *  2. As an alias to the field set on 'labelField' in the MessageBatch List config, or
   *  3. As an alias to a 'name' field on the MessageBatch List (if one exists), or
   *  4. As an alias to the 'id' field on the MessageBatch List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Message type to use for sending notification  */
  messageType?: Maybe<MessageBatchMessageTypeType>;
  /**  Common title for messages to be sent. Single line, shouldn't be very long.  */
  title?: Maybe<Scalars['String']>;
  /**  Common body for messages to be sent. Can be multiline, but shouldn't be very long in case of SMS or Push.  */
  message?: Maybe<Scalars['String']>;
  /**  A link to bring user to specified position within a mobile app. Used ONLY for push notifications  */
  deepLink?: Maybe<Scalars['String']>;
  /**  List of ids for "push", "email", "sms" message types; list of emails for "email" message types; list of phone numbers for "sms" message types. Can be mixed. For each entry an appropriate message type will be used.  */
  targets?: Maybe<Scalars['JSON']>;
  /**  Batch processing status  */
  status?: Maybe<MessageBatchStatusType>;
  /**  Batch processing results will be stored here  */
  processingMeta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type MessageBatchCreateInput = {
  messageType?: Maybe<MessageBatchMessageTypeType>;
  title?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  deepLink?: Maybe<Scalars['String']>;
  targets?: Maybe<Scalars['JSON']>;
  status?: Maybe<MessageBatchStatusType>;
  processingMeta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type MessageBatchHistoryRecord = {
  __typename?: 'MessageBatchHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MessageBatchHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MessageBatchHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MessageBatchHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MessageBatchHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  messageType?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  deepLink?: Maybe<Scalars['String']>;
  targets?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  processingMeta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageBatchHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MessageBatchHistoryRecordCreateInput = {
  messageType?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  deepLink?: Maybe<Scalars['String']>;
  targets?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  processingMeta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageBatchHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MessageBatchHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MessageBatchHistoryRecordUpdateInput = {
  messageType?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  deepLink?: Maybe<Scalars['String']>;
  targets?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  processingMeta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageBatchHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MessageBatchHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MessageBatchHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MessageBatchHistoryRecordWhereInput>>>;
  messageType?: Maybe<Scalars['String']>;
  messageType_not?: Maybe<Scalars['String']>;
  messageType_contains?: Maybe<Scalars['String']>;
  messageType_not_contains?: Maybe<Scalars['String']>;
  messageType_starts_with?: Maybe<Scalars['String']>;
  messageType_not_starts_with?: Maybe<Scalars['String']>;
  messageType_ends_with?: Maybe<Scalars['String']>;
  messageType_not_ends_with?: Maybe<Scalars['String']>;
  messageType_i?: Maybe<Scalars['String']>;
  messageType_not_i?: Maybe<Scalars['String']>;
  messageType_contains_i?: Maybe<Scalars['String']>;
  messageType_not_contains_i?: Maybe<Scalars['String']>;
  messageType_starts_with_i?: Maybe<Scalars['String']>;
  messageType_not_starts_with_i?: Maybe<Scalars['String']>;
  messageType_ends_with_i?: Maybe<Scalars['String']>;
  messageType_not_ends_with_i?: Maybe<Scalars['String']>;
  messageType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  messageType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  message?: Maybe<Scalars['String']>;
  message_not?: Maybe<Scalars['String']>;
  message_contains?: Maybe<Scalars['String']>;
  message_not_contains?: Maybe<Scalars['String']>;
  message_starts_with?: Maybe<Scalars['String']>;
  message_not_starts_with?: Maybe<Scalars['String']>;
  message_ends_with?: Maybe<Scalars['String']>;
  message_not_ends_with?: Maybe<Scalars['String']>;
  message_i?: Maybe<Scalars['String']>;
  message_not_i?: Maybe<Scalars['String']>;
  message_contains_i?: Maybe<Scalars['String']>;
  message_not_contains_i?: Maybe<Scalars['String']>;
  message_starts_with_i?: Maybe<Scalars['String']>;
  message_not_starts_with_i?: Maybe<Scalars['String']>;
  message_ends_with_i?: Maybe<Scalars['String']>;
  message_not_ends_with_i?: Maybe<Scalars['String']>;
  message_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  message_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deepLink?: Maybe<Scalars['String']>;
  deepLink_not?: Maybe<Scalars['String']>;
  deepLink_contains?: Maybe<Scalars['String']>;
  deepLink_not_contains?: Maybe<Scalars['String']>;
  deepLink_starts_with?: Maybe<Scalars['String']>;
  deepLink_not_starts_with?: Maybe<Scalars['String']>;
  deepLink_ends_with?: Maybe<Scalars['String']>;
  deepLink_not_ends_with?: Maybe<Scalars['String']>;
  deepLink_i?: Maybe<Scalars['String']>;
  deepLink_not_i?: Maybe<Scalars['String']>;
  deepLink_contains_i?: Maybe<Scalars['String']>;
  deepLink_not_contains_i?: Maybe<Scalars['String']>;
  deepLink_starts_with_i?: Maybe<Scalars['String']>;
  deepLink_not_starts_with_i?: Maybe<Scalars['String']>;
  deepLink_ends_with_i?: Maybe<Scalars['String']>;
  deepLink_not_ends_with_i?: Maybe<Scalars['String']>;
  deepLink_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deepLink_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  targets?: Maybe<Scalars['JSON']>;
  targets_not?: Maybe<Scalars['JSON']>;
  targets_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  targets_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  processingMeta?: Maybe<Scalars['JSON']>;
  processingMeta_not?: Maybe<Scalars['JSON']>;
  processingMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  processingMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MessageBatchHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MessageBatchHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MessageBatchHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MessageBatchHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MessageBatchHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MessageBatchHistoryRecordsCreateInput = {
  data?: Maybe<MessageBatchHistoryRecordCreateInput>;
};

export type MessageBatchHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MessageBatchHistoryRecordUpdateInput>;
};

export enum MessageBatchMessageTypeType {
  CustomContentMessage = 'CUSTOM_CONTENT_MESSAGE'
}

export enum MessageBatchStatusType {
  Created = 'created',
  Processing = 'processing',
  Failed = 'failed',
  Done = 'done'
}

export type MessageBatchUpdateInput = {
  messageType?: Maybe<MessageBatchMessageTypeType>;
  title?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  deepLink?: Maybe<Scalars['String']>;
  targets?: Maybe<Scalars['JSON']>;
  status?: Maybe<MessageBatchStatusType>;
  processingMeta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type MessageBatchWhereInput = {
  AND?: Maybe<Array<Maybe<MessageBatchWhereInput>>>;
  OR?: Maybe<Array<Maybe<MessageBatchWhereInput>>>;
  messageType?: Maybe<MessageBatchMessageTypeType>;
  messageType_not?: Maybe<MessageBatchMessageTypeType>;
  messageType_in?: Maybe<Array<Maybe<MessageBatchMessageTypeType>>>;
  messageType_not_in?: Maybe<Array<Maybe<MessageBatchMessageTypeType>>>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  message?: Maybe<Scalars['String']>;
  message_not?: Maybe<Scalars['String']>;
  message_contains?: Maybe<Scalars['String']>;
  message_not_contains?: Maybe<Scalars['String']>;
  message_starts_with?: Maybe<Scalars['String']>;
  message_not_starts_with?: Maybe<Scalars['String']>;
  message_ends_with?: Maybe<Scalars['String']>;
  message_not_ends_with?: Maybe<Scalars['String']>;
  message_i?: Maybe<Scalars['String']>;
  message_not_i?: Maybe<Scalars['String']>;
  message_contains_i?: Maybe<Scalars['String']>;
  message_not_contains_i?: Maybe<Scalars['String']>;
  message_starts_with_i?: Maybe<Scalars['String']>;
  message_not_starts_with_i?: Maybe<Scalars['String']>;
  message_ends_with_i?: Maybe<Scalars['String']>;
  message_not_ends_with_i?: Maybe<Scalars['String']>;
  message_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  message_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deepLink?: Maybe<Scalars['String']>;
  deepLink_not?: Maybe<Scalars['String']>;
  deepLink_contains?: Maybe<Scalars['String']>;
  deepLink_not_contains?: Maybe<Scalars['String']>;
  deepLink_starts_with?: Maybe<Scalars['String']>;
  deepLink_not_starts_with?: Maybe<Scalars['String']>;
  deepLink_ends_with?: Maybe<Scalars['String']>;
  deepLink_not_ends_with?: Maybe<Scalars['String']>;
  deepLink_i?: Maybe<Scalars['String']>;
  deepLink_not_i?: Maybe<Scalars['String']>;
  deepLink_contains_i?: Maybe<Scalars['String']>;
  deepLink_not_contains_i?: Maybe<Scalars['String']>;
  deepLink_starts_with_i?: Maybe<Scalars['String']>;
  deepLink_not_starts_with_i?: Maybe<Scalars['String']>;
  deepLink_ends_with_i?: Maybe<Scalars['String']>;
  deepLink_not_ends_with_i?: Maybe<Scalars['String']>;
  deepLink_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deepLink_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  targets?: Maybe<Scalars['JSON']>;
  targets_not?: Maybe<Scalars['JSON']>;
  targets_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  targets_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<MessageBatchStatusType>;
  status_not?: Maybe<MessageBatchStatusType>;
  status_in?: Maybe<Array<Maybe<MessageBatchStatusType>>>;
  status_not_in?: Maybe<Array<Maybe<MessageBatchStatusType>>>;
  processingMeta?: Maybe<Scalars['JSON']>;
  processingMeta_not?: Maybe<Scalars['JSON']>;
  processingMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  processingMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MessageBatchWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MessageBatchesCreateInput = {
  data?: Maybe<MessageBatchCreateInput>;
};

export type MessageBatchesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MessageBatchUpdateInput>;
};

export type MessageCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  remoteClient?: Maybe<RemoteClientRelateToOneInput>;
  emailFrom?: Maybe<Scalars['String']>;
  lang?: Maybe<MessageLangType>;
  type?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  status?: Maybe<MessageStatusType>;
  processingMeta?: Maybe<Scalars['JSON']>;
  deliveredAt?: Maybe<Scalars['String']>;
  sentAt?: Maybe<Scalars['String']>;
  readAt?: Maybe<Scalars['String']>;
  uniqKey?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type MessageHistoryRecord = {
  __typename?: 'MessageHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MessageHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MessageHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MessageHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MessageHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  remoteClient?: Maybe<Scalars['String']>;
  emailFrom?: Maybe<Scalars['String']>;
  lang?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  processingMeta?: Maybe<Scalars['JSON']>;
  deliveredAt?: Maybe<Scalars['String']>;
  sentAt?: Maybe<Scalars['String']>;
  readAt?: Maybe<Scalars['String']>;
  uniqKey?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MessageHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  remoteClient?: Maybe<Scalars['String']>;
  emailFrom?: Maybe<Scalars['String']>;
  lang?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  processingMeta?: Maybe<Scalars['JSON']>;
  deliveredAt?: Maybe<Scalars['String']>;
  sentAt?: Maybe<Scalars['String']>;
  readAt?: Maybe<Scalars['String']>;
  uniqKey?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MessageHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MessageHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  remoteClient?: Maybe<Scalars['String']>;
  emailFrom?: Maybe<Scalars['String']>;
  lang?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  processingMeta?: Maybe<Scalars['JSON']>;
  deliveredAt?: Maybe<Scalars['String']>;
  sentAt?: Maybe<Scalars['String']>;
  readAt?: Maybe<Scalars['String']>;
  uniqKey?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MessageHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MessageHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MessageHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  remoteClient?: Maybe<Scalars['String']>;
  remoteClient_not?: Maybe<Scalars['String']>;
  remoteClient_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  remoteClient_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  emailFrom?: Maybe<Scalars['String']>;
  emailFrom_not?: Maybe<Scalars['String']>;
  emailFrom_contains?: Maybe<Scalars['String']>;
  emailFrom_not_contains?: Maybe<Scalars['String']>;
  emailFrom_starts_with?: Maybe<Scalars['String']>;
  emailFrom_not_starts_with?: Maybe<Scalars['String']>;
  emailFrom_ends_with?: Maybe<Scalars['String']>;
  emailFrom_not_ends_with?: Maybe<Scalars['String']>;
  emailFrom_i?: Maybe<Scalars['String']>;
  emailFrom_not_i?: Maybe<Scalars['String']>;
  emailFrom_contains_i?: Maybe<Scalars['String']>;
  emailFrom_not_contains_i?: Maybe<Scalars['String']>;
  emailFrom_starts_with_i?: Maybe<Scalars['String']>;
  emailFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  emailFrom_ends_with_i?: Maybe<Scalars['String']>;
  emailFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  emailFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  emailFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lang?: Maybe<Scalars['String']>;
  lang_not?: Maybe<Scalars['String']>;
  lang_contains?: Maybe<Scalars['String']>;
  lang_not_contains?: Maybe<Scalars['String']>;
  lang_starts_with?: Maybe<Scalars['String']>;
  lang_not_starts_with?: Maybe<Scalars['String']>;
  lang_ends_with?: Maybe<Scalars['String']>;
  lang_not_ends_with?: Maybe<Scalars['String']>;
  lang_i?: Maybe<Scalars['String']>;
  lang_not_i?: Maybe<Scalars['String']>;
  lang_contains_i?: Maybe<Scalars['String']>;
  lang_not_contains_i?: Maybe<Scalars['String']>;
  lang_starts_with_i?: Maybe<Scalars['String']>;
  lang_not_starts_with_i?: Maybe<Scalars['String']>;
  lang_ends_with_i?: Maybe<Scalars['String']>;
  lang_not_ends_with_i?: Maybe<Scalars['String']>;
  lang_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lang_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  processingMeta?: Maybe<Scalars['JSON']>;
  processingMeta_not?: Maybe<Scalars['JSON']>;
  processingMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  processingMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  deliveredAt?: Maybe<Scalars['String']>;
  deliveredAt_not?: Maybe<Scalars['String']>;
  deliveredAt_lt?: Maybe<Scalars['String']>;
  deliveredAt_lte?: Maybe<Scalars['String']>;
  deliveredAt_gt?: Maybe<Scalars['String']>;
  deliveredAt_gte?: Maybe<Scalars['String']>;
  deliveredAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deliveredAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sentAt?: Maybe<Scalars['String']>;
  sentAt_not?: Maybe<Scalars['String']>;
  sentAt_lt?: Maybe<Scalars['String']>;
  sentAt_lte?: Maybe<Scalars['String']>;
  sentAt_gt?: Maybe<Scalars['String']>;
  sentAt_gte?: Maybe<Scalars['String']>;
  sentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readAt?: Maybe<Scalars['String']>;
  readAt_not?: Maybe<Scalars['String']>;
  readAt_lt?: Maybe<Scalars['String']>;
  readAt_lte?: Maybe<Scalars['String']>;
  readAt_gt?: Maybe<Scalars['String']>;
  readAt_gte?: Maybe<Scalars['String']>;
  readAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  uniqKey?: Maybe<Scalars['String']>;
  uniqKey_not?: Maybe<Scalars['String']>;
  uniqKey_contains?: Maybe<Scalars['String']>;
  uniqKey_not_contains?: Maybe<Scalars['String']>;
  uniqKey_starts_with?: Maybe<Scalars['String']>;
  uniqKey_not_starts_with?: Maybe<Scalars['String']>;
  uniqKey_ends_with?: Maybe<Scalars['String']>;
  uniqKey_not_ends_with?: Maybe<Scalars['String']>;
  uniqKey_i?: Maybe<Scalars['String']>;
  uniqKey_not_i?: Maybe<Scalars['String']>;
  uniqKey_contains_i?: Maybe<Scalars['String']>;
  uniqKey_not_contains_i?: Maybe<Scalars['String']>;
  uniqKey_starts_with_i?: Maybe<Scalars['String']>;
  uniqKey_not_starts_with_i?: Maybe<Scalars['String']>;
  uniqKey_ends_with_i?: Maybe<Scalars['String']>;
  uniqKey_not_ends_with_i?: Maybe<Scalars['String']>;
  uniqKey_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  uniqKey_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MessageHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MessageHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MessageHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MessageHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MessageHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MessageHistoryRecordsCreateInput = {
  data?: Maybe<MessageHistoryRecordCreateInput>;
};

export type MessageHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MessageHistoryRecordUpdateInput>;
};

export enum MessageLangType {
  Ru = 'ru',
  En = 'en'
}

/**  Rule for blocking specific type of messages for organization  */
export type MessageOrganizationBlackList = {
  __typename?: 'MessageOrganizationBlackList';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MessageOrganizationBlackList List config, or
   *  2. As an alias to the field set on 'labelField' in the MessageOrganizationBlackList List config, or
   *  3. As an alias to a 'name' field on the MessageOrganizationBlackList List (if one exists), or
   *  4. As an alias to the 'id' field on the MessageOrganizationBlackList List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  The organization we want to block from sending messages to (null - all organizations)  */
  organization?: Maybe<Organization>;
  /**  The type of message we want to block  */
  type?: Maybe<Scalars['String']>;
  /**  The reason why the entry was added to the MessageOrganizationBlackList  */
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type MessageOrganizationBlackListCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type MessageOrganizationBlackListHistoryRecord = {
  __typename?: 'MessageOrganizationBlackListHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MessageOrganizationBlackListHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MessageOrganizationBlackListHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MessageOrganizationBlackListHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MessageOrganizationBlackListHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageOrganizationBlackListHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MessageOrganizationBlackListHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageOrganizationBlackListHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MessageOrganizationBlackListHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MessageOrganizationBlackListHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageOrganizationBlackListHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MessageOrganizationBlackListHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MessageOrganizationBlackListHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MessageOrganizationBlackListHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MessageOrganizationBlackListHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MessageOrganizationBlackListHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MessageOrganizationBlackListHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MessageOrganizationBlackListHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MessageOrganizationBlackListHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MessageOrganizationBlackListHistoryRecordsCreateInput = {
  data?: Maybe<MessageOrganizationBlackListHistoryRecordCreateInput>;
};

export type MessageOrganizationBlackListHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MessageOrganizationBlackListHistoryRecordUpdateInput>;
};

export type MessageOrganizationBlackListUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type MessageOrganizationBlackListWhereInput = {
  AND?: Maybe<Array<Maybe<MessageOrganizationBlackListWhereInput>>>;
  OR?: Maybe<Array<Maybe<MessageOrganizationBlackListWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MessageOrganizationBlackListWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MessageOrganizationBlackListsCreateInput = {
  data?: Maybe<MessageOrganizationBlackListCreateInput>;
};

export type MessageOrganizationBlackListsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MessageOrganizationBlackListUpdateInput>;
};

export enum MessageStatusType {
  Sending = 'sending',
  Resending = 'resending',
  Processing = 'processing',
  Error = 'error',
  Blacklisted = 'blacklisted',
  Sent = 'sent',
  Delivered = 'delivered',
  Read = 'read',
  Canceled = 'canceled'
}

export type MessageUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  remoteClient?: Maybe<RemoteClientRelateToOneInput>;
  emailFrom?: Maybe<Scalars['String']>;
  lang?: Maybe<MessageLangType>;
  type?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  status?: Maybe<MessageStatusType>;
  processingMeta?: Maybe<Scalars['JSON']>;
  deliveredAt?: Maybe<Scalars['String']>;
  sentAt?: Maybe<Scalars['String']>;
  readAt?: Maybe<Scalars['String']>;
  uniqKey?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  Rule for blocking messages (specific type or all) for user, phone or email  */
export type MessageUserBlackList = {
  __typename?: 'MessageUserBlackList';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MessageUserBlackList List config, or
   *  2. As an alias to the field set on 'labelField' in the MessageUserBlackList List config, or
   *  3. As an alias to a 'name' field on the MessageUserBlackList List (if one exists), or
   *  4. As an alias to the 'id' field on the MessageUserBlackList List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  The user to whom we want to block sending messages  */
  user?: Maybe<User>;
  /**  The phone number to which we want to block sending messages  */
  phone?: Maybe<Scalars['String']>;
  /**  Email to which we want to block the sending of messages  */
  email?: Maybe<Scalars['String']>;
  /**  The type of message we want to block (null means all types)  */
  type?: Maybe<Scalars['String']>;
  /**  The reason why the entry was added to the MessageUserBlackList  */
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type MessageUserBlackListCreateInput = {
  user?: Maybe<UserRelateToOneInput>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type MessageUserBlackListHistoryRecord = {
  __typename?: 'MessageUserBlackListHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MessageUserBlackListHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MessageUserBlackListHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MessageUserBlackListHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MessageUserBlackListHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageUserBlackListHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MessageUserBlackListHistoryRecordCreateInput = {
  user?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageUserBlackListHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MessageUserBlackListHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MessageUserBlackListHistoryRecordUpdateInput = {
  user?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MessageUserBlackListHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MessageUserBlackListHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MessageUserBlackListHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MessageUserBlackListHistoryRecordWhereInput>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MessageUserBlackListHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MessageUserBlackListHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MessageUserBlackListHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MessageUserBlackListHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MessageUserBlackListHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MessageUserBlackListHistoryRecordsCreateInput = {
  data?: Maybe<MessageUserBlackListHistoryRecordCreateInput>;
};

export type MessageUserBlackListHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MessageUserBlackListHistoryRecordUpdateInput>;
};

export type MessageUserBlackListUpdateInput = {
  user?: Maybe<UserRelateToOneInput>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type MessageUserBlackListWhereInput = {
  AND?: Maybe<Array<Maybe<MessageUserBlackListWhereInput>>>;
  OR?: Maybe<Array<Maybe<MessageUserBlackListWhereInput>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MessageUserBlackListWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MessageUserBlackListsCreateInput = {
  data?: Maybe<MessageUserBlackListCreateInput>;
};

export type MessageUserBlackListsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MessageUserBlackListUpdateInput>;
};

export type MessageWhereInput = {
  AND?: Maybe<Array<Maybe<MessageWhereInput>>>;
  OR?: Maybe<Array<Maybe<MessageWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  remoteClient?: Maybe<RemoteClientWhereInput>;
  remoteClient_is_null?: Maybe<Scalars['Boolean']>;
  emailFrom?: Maybe<Scalars['String']>;
  emailFrom_not?: Maybe<Scalars['String']>;
  emailFrom_contains?: Maybe<Scalars['String']>;
  emailFrom_not_contains?: Maybe<Scalars['String']>;
  emailFrom_starts_with?: Maybe<Scalars['String']>;
  emailFrom_not_starts_with?: Maybe<Scalars['String']>;
  emailFrom_ends_with?: Maybe<Scalars['String']>;
  emailFrom_not_ends_with?: Maybe<Scalars['String']>;
  emailFrom_i?: Maybe<Scalars['String']>;
  emailFrom_not_i?: Maybe<Scalars['String']>;
  emailFrom_contains_i?: Maybe<Scalars['String']>;
  emailFrom_not_contains_i?: Maybe<Scalars['String']>;
  emailFrom_starts_with_i?: Maybe<Scalars['String']>;
  emailFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  emailFrom_ends_with_i?: Maybe<Scalars['String']>;
  emailFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  emailFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  emailFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lang?: Maybe<MessageLangType>;
  lang_not?: Maybe<MessageLangType>;
  lang_in?: Maybe<Array<Maybe<MessageLangType>>>;
  lang_not_in?: Maybe<Array<Maybe<MessageLangType>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<MessageStatusType>;
  status_not?: Maybe<MessageStatusType>;
  status_in?: Maybe<Array<Maybe<MessageStatusType>>>;
  status_not_in?: Maybe<Array<Maybe<MessageStatusType>>>;
  processingMeta?: Maybe<Scalars['JSON']>;
  processingMeta_not?: Maybe<Scalars['JSON']>;
  processingMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  processingMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  deliveredAt?: Maybe<Scalars['String']>;
  deliveredAt_not?: Maybe<Scalars['String']>;
  deliveredAt_lt?: Maybe<Scalars['String']>;
  deliveredAt_lte?: Maybe<Scalars['String']>;
  deliveredAt_gt?: Maybe<Scalars['String']>;
  deliveredAt_gte?: Maybe<Scalars['String']>;
  deliveredAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deliveredAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sentAt?: Maybe<Scalars['String']>;
  sentAt_not?: Maybe<Scalars['String']>;
  sentAt_lt?: Maybe<Scalars['String']>;
  sentAt_lte?: Maybe<Scalars['String']>;
  sentAt_gt?: Maybe<Scalars['String']>;
  sentAt_gte?: Maybe<Scalars['String']>;
  sentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readAt?: Maybe<Scalars['String']>;
  readAt_not?: Maybe<Scalars['String']>;
  readAt_lt?: Maybe<Scalars['String']>;
  readAt_lte?: Maybe<Scalars['String']>;
  readAt_gt?: Maybe<Scalars['String']>;
  readAt_gte?: Maybe<Scalars['String']>;
  readAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  uniqKey?: Maybe<Scalars['String']>;
  uniqKey_not?: Maybe<Scalars['String']>;
  uniqKey_contains?: Maybe<Scalars['String']>;
  uniqKey_not_contains?: Maybe<Scalars['String']>;
  uniqKey_starts_with?: Maybe<Scalars['String']>;
  uniqKey_not_starts_with?: Maybe<Scalars['String']>;
  uniqKey_ends_with?: Maybe<Scalars['String']>;
  uniqKey_not_ends_with?: Maybe<Scalars['String']>;
  uniqKey_i?: Maybe<Scalars['String']>;
  uniqKey_not_i?: Maybe<Scalars['String']>;
  uniqKey_contains_i?: Maybe<Scalars['String']>;
  uniqKey_not_contains_i?: Maybe<Scalars['String']>;
  uniqKey_starts_with_i?: Maybe<Scalars['String']>;
  uniqKey_not_starts_with_i?: Maybe<Scalars['String']>;
  uniqKey_ends_with_i?: Maybe<Scalars['String']>;
  uniqKey_not_ends_with_i?: Maybe<Scalars['String']>;
  uniqKey_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  uniqKey_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MessageWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MessagesCreateInput = {
  data?: Maybe<MessageCreateInput>;
};

export type MessagesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MessageUpdateInput>;
};

/**  Resource meter at a certain place in the unitName  */
export type Meter = {
  __typename?: 'Meter';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the Meter List config, or
   *  2. As an alias to the field set on 'labelField' in the Meter List config, or
   *  3. As an alias to a 'name' field on the Meter List (if one exists), or
   *  4. As an alias to the 'id' field on the Meter List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Link to property which contains unit with this meter  */
  property?: Maybe<Property>;
  /**  Number of resource meter, such as "А03 9908"  */
  number?: Maybe<Scalars['String']>;
  numberOfTariffs?: Maybe<Scalars['Int']>;
  /**  Date when the meter was installed in the unit  */
  installationDate?: Maybe<Scalars['String']>;
  /**  Date when the meter was commissioned.Commissioning - documentation of the meter as a billing meter  */
  commissioningDate?: Maybe<Scalars['String']>;
  /**  The date when the employee came and checked how accurately the meter counts the resource  */
  verificationDate?: Maybe<Scalars['String']>;
  /**  The date of the next meter verification.For example, for a cold water meter - usually 6 years after the verification date  */
  nextVerificationDate?: Maybe<Scalars['String']>;
  /**  The date when the employee came and took readings from the meter  */
  controlReadingsDate?: Maybe<Scalars['String']>;
  /**  The date when meter was sealed.Sealing is the installation of a unique single-use device (directly a seal and a sealing rope)on the metering device, which is designed to control unauthorized access to the equipment.  */
  sealingDate?: Maybe<Scalars['String']>;
  /**  Client's billing account  */
  accountNumber?: Maybe<Scalars['String']>;
  /**  Unit with this meter  */
  unitName?: Maybe<Scalars['String']>;
  /**  Type of unit, such as parking lot or flat  */
  unitType?: Maybe<Scalars['String']>;
  /**  Certain place in unit where meter is, such as kitchen  */
  place?: Maybe<Scalars['String']>;
  /**  Meter resource, such as hot water or electricity  */
  resource?: Maybe<MeterResource>;
  /**  Determines, if Meter is automatic or not. False by default. If set to True - prevents user with type "resident" from creating MeterReading. So MeterReadings only be acquired through external integration or adjusted by organization employee  */
  isAutomatic?: Maybe<Scalars['Boolean']>;
  /**  Meter metadata. Can be used to store additional settings from external sources, such as billing integrations or mini apps  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Ref to the B2CApp which used to replace default integration with meter by resident's user in resident's app  */
  b2cApp?: Maybe<B2CApp>;
  /**  Ref to B2BApp, which is used as a master system for this meter. Specified organization must connect this app.  */
  b2bApp?: Maybe<B2BApp>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type MeterCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  number?: Maybe<Scalars['String']>;
  numberOfTariffs?: Maybe<Scalars['Int']>;
  installationDate?: Maybe<Scalars['String']>;
  commissioningDate?: Maybe<Scalars['String']>;
  verificationDate?: Maybe<Scalars['String']>;
  nextVerificationDate?: Maybe<Scalars['String']>;
  controlReadingsDate?: Maybe<Scalars['String']>;
  sealingDate?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
  resource?: Maybe<MeterResourceRelateToOneInput>;
  isAutomatic?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  b2cApp?: Maybe<B2CAppRelateToOneInput>;
  b2bApp?: Maybe<B2BAppRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type MeterHistoryRecord = {
  __typename?: 'MeterHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MeterHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MeterHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MeterHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MeterHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  numberOfTariffs?: Maybe<Scalars['Int']>;
  installationDate?: Maybe<Scalars['String']>;
  commissioningDate?: Maybe<Scalars['String']>;
  verificationDate?: Maybe<Scalars['String']>;
  nextVerificationDate?: Maybe<Scalars['String']>;
  controlReadingsDate?: Maybe<Scalars['String']>;
  sealingDate?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
  resource?: Maybe<Scalars['String']>;
  isAutomatic?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  b2cApp?: Maybe<Scalars['String']>;
  b2bApp?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MeterHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  numberOfTariffs?: Maybe<Scalars['Int']>;
  installationDate?: Maybe<Scalars['String']>;
  commissioningDate?: Maybe<Scalars['String']>;
  verificationDate?: Maybe<Scalars['String']>;
  nextVerificationDate?: Maybe<Scalars['String']>;
  controlReadingsDate?: Maybe<Scalars['String']>;
  sealingDate?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
  resource?: Maybe<Scalars['String']>;
  isAutomatic?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  b2cApp?: Maybe<Scalars['String']>;
  b2bApp?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MeterHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MeterHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  numberOfTariffs?: Maybe<Scalars['Int']>;
  installationDate?: Maybe<Scalars['String']>;
  commissioningDate?: Maybe<Scalars['String']>;
  verificationDate?: Maybe<Scalars['String']>;
  nextVerificationDate?: Maybe<Scalars['String']>;
  controlReadingsDate?: Maybe<Scalars['String']>;
  sealingDate?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
  resource?: Maybe<Scalars['String']>;
  isAutomatic?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  b2cApp?: Maybe<Scalars['String']>;
  b2bApp?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MeterHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MeterHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MeterHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number?: Maybe<Scalars['String']>;
  number_not?: Maybe<Scalars['String']>;
  number_contains?: Maybe<Scalars['String']>;
  number_not_contains?: Maybe<Scalars['String']>;
  number_starts_with?: Maybe<Scalars['String']>;
  number_not_starts_with?: Maybe<Scalars['String']>;
  number_ends_with?: Maybe<Scalars['String']>;
  number_not_ends_with?: Maybe<Scalars['String']>;
  number_i?: Maybe<Scalars['String']>;
  number_not_i?: Maybe<Scalars['String']>;
  number_contains_i?: Maybe<Scalars['String']>;
  number_not_contains_i?: Maybe<Scalars['String']>;
  number_starts_with_i?: Maybe<Scalars['String']>;
  number_not_starts_with_i?: Maybe<Scalars['String']>;
  number_ends_with_i?: Maybe<Scalars['String']>;
  number_not_ends_with_i?: Maybe<Scalars['String']>;
  number_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  numberOfTariffs?: Maybe<Scalars['Int']>;
  numberOfTariffs_not?: Maybe<Scalars['Int']>;
  numberOfTariffs_lt?: Maybe<Scalars['Int']>;
  numberOfTariffs_lte?: Maybe<Scalars['Int']>;
  numberOfTariffs_gt?: Maybe<Scalars['Int']>;
  numberOfTariffs_gte?: Maybe<Scalars['Int']>;
  numberOfTariffs_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfTariffs_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  installationDate?: Maybe<Scalars['String']>;
  installationDate_not?: Maybe<Scalars['String']>;
  installationDate_lt?: Maybe<Scalars['String']>;
  installationDate_lte?: Maybe<Scalars['String']>;
  installationDate_gt?: Maybe<Scalars['String']>;
  installationDate_gte?: Maybe<Scalars['String']>;
  installationDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  installationDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commissioningDate?: Maybe<Scalars['String']>;
  commissioningDate_not?: Maybe<Scalars['String']>;
  commissioningDate_lt?: Maybe<Scalars['String']>;
  commissioningDate_lte?: Maybe<Scalars['String']>;
  commissioningDate_gt?: Maybe<Scalars['String']>;
  commissioningDate_gte?: Maybe<Scalars['String']>;
  commissioningDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commissioningDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  verificationDate?: Maybe<Scalars['String']>;
  verificationDate_not?: Maybe<Scalars['String']>;
  verificationDate_lt?: Maybe<Scalars['String']>;
  verificationDate_lte?: Maybe<Scalars['String']>;
  verificationDate_gt?: Maybe<Scalars['String']>;
  verificationDate_gte?: Maybe<Scalars['String']>;
  verificationDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  verificationDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nextVerificationDate?: Maybe<Scalars['String']>;
  nextVerificationDate_not?: Maybe<Scalars['String']>;
  nextVerificationDate_lt?: Maybe<Scalars['String']>;
  nextVerificationDate_lte?: Maybe<Scalars['String']>;
  nextVerificationDate_gt?: Maybe<Scalars['String']>;
  nextVerificationDate_gte?: Maybe<Scalars['String']>;
  nextVerificationDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nextVerificationDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  controlReadingsDate?: Maybe<Scalars['String']>;
  controlReadingsDate_not?: Maybe<Scalars['String']>;
  controlReadingsDate_lt?: Maybe<Scalars['String']>;
  controlReadingsDate_lte?: Maybe<Scalars['String']>;
  controlReadingsDate_gt?: Maybe<Scalars['String']>;
  controlReadingsDate_gte?: Maybe<Scalars['String']>;
  controlReadingsDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  controlReadingsDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sealingDate?: Maybe<Scalars['String']>;
  sealingDate_not?: Maybe<Scalars['String']>;
  sealingDate_lt?: Maybe<Scalars['String']>;
  sealingDate_lte?: Maybe<Scalars['String']>;
  sealingDate_gt?: Maybe<Scalars['String']>;
  sealingDate_gte?: Maybe<Scalars['String']>;
  sealingDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sealingDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber?: Maybe<Scalars['String']>;
  accountNumber_not?: Maybe<Scalars['String']>;
  accountNumber_contains?: Maybe<Scalars['String']>;
  accountNumber_not_contains?: Maybe<Scalars['String']>;
  accountNumber_starts_with?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with?: Maybe<Scalars['String']>;
  accountNumber_ends_with?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with?: Maybe<Scalars['String']>;
  accountNumber_i?: Maybe<Scalars['String']>;
  accountNumber_not_i?: Maybe<Scalars['String']>;
  accountNumber_contains_i?: Maybe<Scalars['String']>;
  accountNumber_not_contains_i?: Maybe<Scalars['String']>;
  accountNumber_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_contains?: Maybe<Scalars['String']>;
  unitType_not_contains?: Maybe<Scalars['String']>;
  unitType_starts_with?: Maybe<Scalars['String']>;
  unitType_not_starts_with?: Maybe<Scalars['String']>;
  unitType_ends_with?: Maybe<Scalars['String']>;
  unitType_not_ends_with?: Maybe<Scalars['String']>;
  unitType_i?: Maybe<Scalars['String']>;
  unitType_not_i?: Maybe<Scalars['String']>;
  unitType_contains_i?: Maybe<Scalars['String']>;
  unitType_not_contains_i?: Maybe<Scalars['String']>;
  unitType_starts_with_i?: Maybe<Scalars['String']>;
  unitType_not_starts_with_i?: Maybe<Scalars['String']>;
  unitType_ends_with_i?: Maybe<Scalars['String']>;
  unitType_not_ends_with_i?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  place?: Maybe<Scalars['String']>;
  place_not?: Maybe<Scalars['String']>;
  place_contains?: Maybe<Scalars['String']>;
  place_not_contains?: Maybe<Scalars['String']>;
  place_starts_with?: Maybe<Scalars['String']>;
  place_not_starts_with?: Maybe<Scalars['String']>;
  place_ends_with?: Maybe<Scalars['String']>;
  place_not_ends_with?: Maybe<Scalars['String']>;
  place_i?: Maybe<Scalars['String']>;
  place_not_i?: Maybe<Scalars['String']>;
  place_contains_i?: Maybe<Scalars['String']>;
  place_not_contains_i?: Maybe<Scalars['String']>;
  place_starts_with_i?: Maybe<Scalars['String']>;
  place_not_starts_with_i?: Maybe<Scalars['String']>;
  place_ends_with_i?: Maybe<Scalars['String']>;
  place_not_ends_with_i?: Maybe<Scalars['String']>;
  place_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  place_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  resource?: Maybe<Scalars['String']>;
  resource_not?: Maybe<Scalars['String']>;
  resource_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  resource_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isAutomatic?: Maybe<Scalars['Boolean']>;
  isAutomatic_not?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  b2cApp?: Maybe<Scalars['String']>;
  b2cApp_not?: Maybe<Scalars['String']>;
  b2cApp_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2cApp_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2bApp?: Maybe<Scalars['String']>;
  b2bApp_not?: Maybe<Scalars['String']>;
  b2bApp_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2bApp_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MeterHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MeterHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MeterHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MeterHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MeterHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MeterHistoryRecordsCreateInput = {
  data?: Maybe<MeterHistoryRecordCreateInput>;
};

export type MeterHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MeterHistoryRecordUpdateInput>;
};

/**  Meter reading taken from a client or billing  */
export type MeterReading = {
  __typename?: 'MeterReading';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MeterReading List config, or
   *  2. As an alias to the field set on 'labelField' in the MeterReading List config, or
   *  3. As an alias to a 'name' field on the MeterReading List (if one exists), or
   *  4. As an alias to the 'id' field on the MeterReading List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Date when the readings were taken  */
  date?: Maybe<Scalars['String']>;
  /**  Meter from which readings were taken  */
  meter?: Maybe<Meter>;
  /**  If the meter is single-tariff, then only this value will be filled in;If multi-tariff, then the value of the first tariff will be in this field  */
  value1?: Maybe<Scalars['String']>;
  /**  If the meter is multi-tariff, then the value of the second tariff is stored here  */
  value2?: Maybe<Scalars['String']>;
  /**  If the meter is multi-tariff, then the value of the third tariff is stored here  */
  value3?: Maybe<Scalars['String']>;
  /**  If the meter is multi-tariff, then the value of the fourth tariff is stored here  */
  value4?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem or want to improve/order something. Not null if we have a registered client.  */
  client?: Maybe<User>;
  /**  Contact, that reported issue, described in this ticket  */
  contact?: Maybe<Contact>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientName?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientEmail?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientPhone?: Maybe<Scalars['String']>;
  /**  Meter reading source channel/system. Examples: call, mobile_app, billing, ...  */
  source?: Maybe<MeterReadingSource>;
  /**  Ref to the organization. It is filled in on the server and is read-only  */
  organization?: Maybe<Organization>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type MeterReadingCreateInput = {
  date?: Maybe<Scalars['String']>;
  meter?: Maybe<MeterRelateToOneInput>;
  value1?: Maybe<Scalars['String']>;
  value2?: Maybe<Scalars['String']>;
  value3?: Maybe<Scalars['String']>;
  value4?: Maybe<Scalars['String']>;
  client?: Maybe<UserRelateToOneInput>;
  contact?: Maybe<ContactRelateToOneInput>;
  clientName?: Maybe<Scalars['String']>;
  clientEmail?: Maybe<Scalars['String']>;
  clientPhone?: Maybe<Scalars['String']>;
  source?: Maybe<MeterReadingSourceRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  Employee specific meter reading filter template  */
export type MeterReadingFilterTemplate = {
  __typename?: 'MeterReadingFilterTemplate';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MeterReadingFilterTemplate List config, or
   *  2. As an alias to the field set on 'labelField' in the MeterReadingFilterTemplate List config, or
   *  3. As an alias to a 'name' field on the MeterReadingFilterTemplate List (if one exists), or
   *  4. As an alias to the 'id' field on the MeterReadingFilterTemplate List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Meter reading filter template name  */
  name?: Maybe<Scalars['String']>;
  /**  Link to employee, who created this template  */
  employee?: Maybe<OrganizationEmployee>;
  /**  Filter that match the given template  */
  fields?: Maybe<MeterReadingFilters>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type MeterReadingFilterTemplateCreateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<OrganizationEmployeeRelateToOneInput>;
  fields?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type MeterReadingFilterTemplateHistoryRecord = {
  __typename?: 'MeterReadingFilterTemplateHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MeterReadingFilterTemplateHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MeterReadingFilterTemplateHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MeterReadingFilterTemplateHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MeterReadingFilterTemplateHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterReadingFilterTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MeterReadingFilterTemplateHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterReadingFilterTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MeterReadingFilterTemplateHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MeterReadingFilterTemplateHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterReadingFilterTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MeterReadingFilterTemplateHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MeterReadingFilterTemplateHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MeterReadingFilterTemplateHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee?: Maybe<Scalars['String']>;
  employee_not?: Maybe<Scalars['String']>;
  employee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fields?: Maybe<Scalars['JSON']>;
  fields_not?: Maybe<Scalars['JSON']>;
  fields_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MeterReadingFilterTemplateHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MeterReadingFilterTemplateHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MeterReadingFilterTemplateHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MeterReadingFilterTemplateHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MeterReadingFilterTemplateHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MeterReadingFilterTemplateHistoryRecordsCreateInput = {
  data?: Maybe<MeterReadingFilterTemplateHistoryRecordCreateInput>;
};

export type MeterReadingFilterTemplateHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingFilterTemplateHistoryRecordUpdateInput>;
};

export type MeterReadingFilterTemplateUpdateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<OrganizationEmployeeRelateToOneInput>;
  fields?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type MeterReadingFilterTemplateWhereInput = {
  AND?: Maybe<Array<Maybe<MeterReadingFilterTemplateWhereInput>>>;
  OR?: Maybe<Array<Maybe<MeterReadingFilterTemplateWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee?: Maybe<OrganizationEmployeeWhereInput>;
  employee_is_null?: Maybe<Scalars['Boolean']>;
  fields?: Maybe<Scalars['JSON']>;
  fields_not?: Maybe<Scalars['JSON']>;
  fields_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MeterReadingFilterTemplateWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MeterReadingFilterTemplatesCreateInput = {
  data?: Maybe<MeterReadingFilterTemplateCreateInput>;
};

export type MeterReadingFilterTemplatesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingFilterTemplateUpdateInput>;
};

export type MeterReadingFilters = {
  __typename?: 'MeterReadingFilters';
  organization?: Maybe<Array<Maybe<Scalars['String']>>>;
  address?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  unitName?: Maybe<Array<Maybe<Scalars['String']>>>;
  resource?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientName?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Array<Maybe<Scalars['String']>>>;
  date?: Maybe<Array<Maybe<Scalars['String']>>>;
  verificationDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  installationDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  commissioningDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  sealingDate?: Maybe<Array<Maybe<Scalars['String']>>>;
  controlReadingDate?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/**  A keystone list  */
export type MeterReadingHistoryRecord = {
  __typename?: 'MeterReadingHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MeterReadingHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MeterReadingHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MeterReadingHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MeterReadingHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  meter?: Maybe<Scalars['String']>;
  value1?: Maybe<Scalars['String']>;
  value2?: Maybe<Scalars['String']>;
  value3?: Maybe<Scalars['String']>;
  value4?: Maybe<Scalars['String']>;
  client?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  clientName?: Maybe<Scalars['String']>;
  clientEmail?: Maybe<Scalars['String']>;
  clientPhone?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterReadingHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MeterReadingHistoryRecordCreateInput = {
  date?: Maybe<Scalars['String']>;
  meter?: Maybe<Scalars['String']>;
  value1?: Maybe<Scalars['String']>;
  value2?: Maybe<Scalars['String']>;
  value3?: Maybe<Scalars['String']>;
  value4?: Maybe<Scalars['String']>;
  client?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  clientName?: Maybe<Scalars['String']>;
  clientEmail?: Maybe<Scalars['String']>;
  clientPhone?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterReadingHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MeterReadingHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MeterReadingHistoryRecordUpdateInput = {
  date?: Maybe<Scalars['String']>;
  meter?: Maybe<Scalars['String']>;
  value1?: Maybe<Scalars['String']>;
  value2?: Maybe<Scalars['String']>;
  value3?: Maybe<Scalars['String']>;
  value4?: Maybe<Scalars['String']>;
  client?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  clientName?: Maybe<Scalars['String']>;
  clientEmail?: Maybe<Scalars['String']>;
  clientPhone?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterReadingHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MeterReadingHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MeterReadingHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MeterReadingHistoryRecordWhereInput>>>;
  date?: Maybe<Scalars['String']>;
  date_not?: Maybe<Scalars['String']>;
  date_lt?: Maybe<Scalars['String']>;
  date_lte?: Maybe<Scalars['String']>;
  date_gt?: Maybe<Scalars['String']>;
  date_gte?: Maybe<Scalars['String']>;
  date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meter?: Maybe<Scalars['String']>;
  meter_not?: Maybe<Scalars['String']>;
  meter_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meter_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value1?: Maybe<Scalars['String']>;
  value1_not?: Maybe<Scalars['String']>;
  value1_lt?: Maybe<Scalars['String']>;
  value1_lte?: Maybe<Scalars['String']>;
  value1_gt?: Maybe<Scalars['String']>;
  value1_gte?: Maybe<Scalars['String']>;
  value1_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value1_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value2?: Maybe<Scalars['String']>;
  value2_not?: Maybe<Scalars['String']>;
  value2_lt?: Maybe<Scalars['String']>;
  value2_lte?: Maybe<Scalars['String']>;
  value2_gt?: Maybe<Scalars['String']>;
  value2_gte?: Maybe<Scalars['String']>;
  value2_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value2_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value3?: Maybe<Scalars['String']>;
  value3_not?: Maybe<Scalars['String']>;
  value3_lt?: Maybe<Scalars['String']>;
  value3_lte?: Maybe<Scalars['String']>;
  value3_gt?: Maybe<Scalars['String']>;
  value3_gte?: Maybe<Scalars['String']>;
  value3_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value3_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value4?: Maybe<Scalars['String']>;
  value4_not?: Maybe<Scalars['String']>;
  value4_lt?: Maybe<Scalars['String']>;
  value4_lte?: Maybe<Scalars['String']>;
  value4_gt?: Maybe<Scalars['String']>;
  value4_gte?: Maybe<Scalars['String']>;
  value4_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value4_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  client?: Maybe<Scalars['String']>;
  client_not?: Maybe<Scalars['String']>;
  client_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  client_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contact?: Maybe<Scalars['String']>;
  contact_not?: Maybe<Scalars['String']>;
  contact_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contact_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientName?: Maybe<Scalars['String']>;
  clientName_not?: Maybe<Scalars['String']>;
  clientName_contains?: Maybe<Scalars['String']>;
  clientName_not_contains?: Maybe<Scalars['String']>;
  clientName_starts_with?: Maybe<Scalars['String']>;
  clientName_not_starts_with?: Maybe<Scalars['String']>;
  clientName_ends_with?: Maybe<Scalars['String']>;
  clientName_not_ends_with?: Maybe<Scalars['String']>;
  clientName_i?: Maybe<Scalars['String']>;
  clientName_not_i?: Maybe<Scalars['String']>;
  clientName_contains_i?: Maybe<Scalars['String']>;
  clientName_not_contains_i?: Maybe<Scalars['String']>;
  clientName_starts_with_i?: Maybe<Scalars['String']>;
  clientName_not_starts_with_i?: Maybe<Scalars['String']>;
  clientName_ends_with_i?: Maybe<Scalars['String']>;
  clientName_not_ends_with_i?: Maybe<Scalars['String']>;
  clientName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmail?: Maybe<Scalars['String']>;
  clientEmail_not?: Maybe<Scalars['String']>;
  clientEmail_contains?: Maybe<Scalars['String']>;
  clientEmail_not_contains?: Maybe<Scalars['String']>;
  clientEmail_starts_with?: Maybe<Scalars['String']>;
  clientEmail_not_starts_with?: Maybe<Scalars['String']>;
  clientEmail_ends_with?: Maybe<Scalars['String']>;
  clientEmail_not_ends_with?: Maybe<Scalars['String']>;
  clientEmail_i?: Maybe<Scalars['String']>;
  clientEmail_not_i?: Maybe<Scalars['String']>;
  clientEmail_contains_i?: Maybe<Scalars['String']>;
  clientEmail_not_contains_i?: Maybe<Scalars['String']>;
  clientEmail_starts_with_i?: Maybe<Scalars['String']>;
  clientEmail_not_starts_with_i?: Maybe<Scalars['String']>;
  clientEmail_ends_with_i?: Maybe<Scalars['String']>;
  clientEmail_not_ends_with_i?: Maybe<Scalars['String']>;
  clientEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhone?: Maybe<Scalars['String']>;
  clientPhone_not?: Maybe<Scalars['String']>;
  clientPhone_contains?: Maybe<Scalars['String']>;
  clientPhone_not_contains?: Maybe<Scalars['String']>;
  clientPhone_starts_with?: Maybe<Scalars['String']>;
  clientPhone_not_starts_with?: Maybe<Scalars['String']>;
  clientPhone_ends_with?: Maybe<Scalars['String']>;
  clientPhone_not_ends_with?: Maybe<Scalars['String']>;
  clientPhone_i?: Maybe<Scalars['String']>;
  clientPhone_not_i?: Maybe<Scalars['String']>;
  clientPhone_contains_i?: Maybe<Scalars['String']>;
  clientPhone_not_contains_i?: Maybe<Scalars['String']>;
  clientPhone_starts_with_i?: Maybe<Scalars['String']>;
  clientPhone_not_starts_with_i?: Maybe<Scalars['String']>;
  clientPhone_ends_with_i?: Maybe<Scalars['String']>;
  clientPhone_not_ends_with_i?: Maybe<Scalars['String']>;
  clientPhone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  source?: Maybe<Scalars['String']>;
  source_not?: Maybe<Scalars['String']>;
  source_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  source_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MeterReadingHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MeterReadingHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MeterReadingHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MeterReadingHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MeterReadingHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MeterReadingHistoryRecordsCreateInput = {
  data?: Maybe<MeterReadingHistoryRecordCreateInput>;
};

export type MeterReadingHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingHistoryRecordUpdateInput>;
};

/**  Ticket source. Income call, mobile_app, ...  */
export type MeterReadingSource = {
  __typename?: 'MeterReadingSource';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MeterReadingSource List config, or
   *  2. As an alias to the field set on 'labelField' in the MeterReadingSource List config, or
   *  3. As an alias to a 'name' field on the MeterReadingSource List (if one exists), or
   *  4. As an alias to the 'id' field on the MeterReadingSource List.
   */
  _label_?: Maybe<Scalars['String']>;
  type?: Maybe<MeterReadingSourceTypeType>;
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type MeterReadingSourceCreateInput = {
  type?: Maybe<MeterReadingSourceTypeType>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type MeterReadingSourceHistoryRecord = {
  __typename?: 'MeterReadingSourceHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MeterReadingSourceHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MeterReadingSourceHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MeterReadingSourceHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MeterReadingSourceHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterReadingSourceHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MeterReadingSourceHistoryRecordCreateInput = {
  type?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterReadingSourceHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MeterReadingSourceHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MeterReadingSourceHistoryRecordUpdateInput = {
  type?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterReadingSourceHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MeterReadingSourceHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MeterReadingSourceHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MeterReadingSourceHistoryRecordWhereInput>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MeterReadingSourceHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MeterReadingSourceHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MeterReadingSourceHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MeterReadingSourceHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MeterReadingSourceHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MeterReadingSourceHistoryRecordsCreateInput = {
  data?: Maybe<MeterReadingSourceHistoryRecordCreateInput>;
};

export type MeterReadingSourceHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingSourceHistoryRecordUpdateInput>;
};

export type MeterReadingSourceRelateToOneInput = {
  create?: Maybe<MeterReadingSourceCreateInput>;
  connect?: Maybe<MeterReadingSourceWhereUniqueInput>;
  disconnect?: Maybe<MeterReadingSourceWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export enum MeterReadingSourceTypeType {
  ImportCondo = 'import_condo',
  Call = 'call',
  MobileApp = 'mobile_app',
  ExternalImport = 'external_import',
  Email = 'email',
  RemoteSystem = 'remote_system',
  Other = 'other',
  Visit = 'visit',
  WebApp = 'web_app',
  OrganizationSite = 'organization_site',
  Messenger = 'messenger',
  SocialNetwork = 'social_network',
  MobileAppStaff = 'mobile_app_staff'
}

export type MeterReadingSourceUpdateInput = {
  type?: Maybe<MeterReadingSourceTypeType>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type MeterReadingSourceWhereInput = {
  AND?: Maybe<Array<Maybe<MeterReadingSourceWhereInput>>>;
  OR?: Maybe<Array<Maybe<MeterReadingSourceWhereInput>>>;
  type?: Maybe<MeterReadingSourceTypeType>;
  type_not?: Maybe<MeterReadingSourceTypeType>;
  type_in?: Maybe<Array<Maybe<MeterReadingSourceTypeType>>>;
  type_not_in?: Maybe<Array<Maybe<MeterReadingSourceTypeType>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MeterReadingSourceWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MeterReadingSourcesCreateInput = {
  data?: Maybe<MeterReadingSourceCreateInput>;
};

export type MeterReadingSourcesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingSourceUpdateInput>;
};

export type MeterReadingUpdateInput = {
  date?: Maybe<Scalars['String']>;
  meter?: Maybe<MeterRelateToOneInput>;
  value1?: Maybe<Scalars['String']>;
  value2?: Maybe<Scalars['String']>;
  value3?: Maybe<Scalars['String']>;
  value4?: Maybe<Scalars['String']>;
  client?: Maybe<UserRelateToOneInput>;
  contact?: Maybe<ContactRelateToOneInput>;
  clientName?: Maybe<Scalars['String']>;
  clientEmail?: Maybe<Scalars['String']>;
  clientPhone?: Maybe<Scalars['String']>;
  source?: Maybe<MeterReadingSourceRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type MeterReadingWhereInput = {
  AND?: Maybe<Array<Maybe<MeterReadingWhereInput>>>;
  OR?: Maybe<Array<Maybe<MeterReadingWhereInput>>>;
  date?: Maybe<Scalars['String']>;
  date_not?: Maybe<Scalars['String']>;
  date_lt?: Maybe<Scalars['String']>;
  date_lte?: Maybe<Scalars['String']>;
  date_gt?: Maybe<Scalars['String']>;
  date_gte?: Maybe<Scalars['String']>;
  date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meter?: Maybe<MeterWhereInput>;
  meter_is_null?: Maybe<Scalars['Boolean']>;
  value1?: Maybe<Scalars['String']>;
  value1_not?: Maybe<Scalars['String']>;
  value1_lt?: Maybe<Scalars['String']>;
  value1_lte?: Maybe<Scalars['String']>;
  value1_gt?: Maybe<Scalars['String']>;
  value1_gte?: Maybe<Scalars['String']>;
  value1_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value1_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value2?: Maybe<Scalars['String']>;
  value2_not?: Maybe<Scalars['String']>;
  value2_lt?: Maybe<Scalars['String']>;
  value2_lte?: Maybe<Scalars['String']>;
  value2_gt?: Maybe<Scalars['String']>;
  value2_gte?: Maybe<Scalars['String']>;
  value2_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value2_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value3?: Maybe<Scalars['String']>;
  value3_not?: Maybe<Scalars['String']>;
  value3_lt?: Maybe<Scalars['String']>;
  value3_lte?: Maybe<Scalars['String']>;
  value3_gt?: Maybe<Scalars['String']>;
  value3_gte?: Maybe<Scalars['String']>;
  value3_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value3_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value4?: Maybe<Scalars['String']>;
  value4_not?: Maybe<Scalars['String']>;
  value4_lt?: Maybe<Scalars['String']>;
  value4_lte?: Maybe<Scalars['String']>;
  value4_gt?: Maybe<Scalars['String']>;
  value4_gte?: Maybe<Scalars['String']>;
  value4_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  value4_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  client?: Maybe<UserWhereInput>;
  client_is_null?: Maybe<Scalars['Boolean']>;
  contact?: Maybe<ContactWhereInput>;
  contact_is_null?: Maybe<Scalars['Boolean']>;
  clientName?: Maybe<Scalars['String']>;
  clientName_not?: Maybe<Scalars['String']>;
  clientName_contains?: Maybe<Scalars['String']>;
  clientName_not_contains?: Maybe<Scalars['String']>;
  clientName_starts_with?: Maybe<Scalars['String']>;
  clientName_not_starts_with?: Maybe<Scalars['String']>;
  clientName_ends_with?: Maybe<Scalars['String']>;
  clientName_not_ends_with?: Maybe<Scalars['String']>;
  clientName_i?: Maybe<Scalars['String']>;
  clientName_not_i?: Maybe<Scalars['String']>;
  clientName_contains_i?: Maybe<Scalars['String']>;
  clientName_not_contains_i?: Maybe<Scalars['String']>;
  clientName_starts_with_i?: Maybe<Scalars['String']>;
  clientName_not_starts_with_i?: Maybe<Scalars['String']>;
  clientName_ends_with_i?: Maybe<Scalars['String']>;
  clientName_not_ends_with_i?: Maybe<Scalars['String']>;
  clientName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmail?: Maybe<Scalars['String']>;
  clientEmail_not?: Maybe<Scalars['String']>;
  clientEmail_contains?: Maybe<Scalars['String']>;
  clientEmail_not_contains?: Maybe<Scalars['String']>;
  clientEmail_starts_with?: Maybe<Scalars['String']>;
  clientEmail_not_starts_with?: Maybe<Scalars['String']>;
  clientEmail_ends_with?: Maybe<Scalars['String']>;
  clientEmail_not_ends_with?: Maybe<Scalars['String']>;
  clientEmail_i?: Maybe<Scalars['String']>;
  clientEmail_not_i?: Maybe<Scalars['String']>;
  clientEmail_contains_i?: Maybe<Scalars['String']>;
  clientEmail_not_contains_i?: Maybe<Scalars['String']>;
  clientEmail_starts_with_i?: Maybe<Scalars['String']>;
  clientEmail_not_starts_with_i?: Maybe<Scalars['String']>;
  clientEmail_ends_with_i?: Maybe<Scalars['String']>;
  clientEmail_not_ends_with_i?: Maybe<Scalars['String']>;
  clientEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhone?: Maybe<Scalars['String']>;
  clientPhone_not?: Maybe<Scalars['String']>;
  clientPhone_contains?: Maybe<Scalars['String']>;
  clientPhone_not_contains?: Maybe<Scalars['String']>;
  clientPhone_starts_with?: Maybe<Scalars['String']>;
  clientPhone_not_starts_with?: Maybe<Scalars['String']>;
  clientPhone_ends_with?: Maybe<Scalars['String']>;
  clientPhone_not_ends_with?: Maybe<Scalars['String']>;
  clientPhone_i?: Maybe<Scalars['String']>;
  clientPhone_not_i?: Maybe<Scalars['String']>;
  clientPhone_contains_i?: Maybe<Scalars['String']>;
  clientPhone_not_contains_i?: Maybe<Scalars['String']>;
  clientPhone_starts_with_i?: Maybe<Scalars['String']>;
  clientPhone_not_starts_with_i?: Maybe<Scalars['String']>;
  clientPhone_ends_with_i?: Maybe<Scalars['String']>;
  clientPhone_not_ends_with_i?: Maybe<Scalars['String']>;
  clientPhone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  source?: Maybe<MeterReadingSourceWhereInput>;
  source_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MeterReadingWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MeterReadingsCreateInput = {
  data?: Maybe<MeterReadingCreateInput>;
};

export type MeterReadingsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingUpdateInput>;
};

export type MeterRelateToOneInput = {
  create?: Maybe<MeterCreateInput>;
  connect?: Maybe<MeterWhereUniqueInput>;
  disconnect?: Maybe<MeterWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

/**  Kind of consumed resource, measured by meter  */
export type MeterResource = {
  __typename?: 'MeterResource';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MeterResource List config, or
   *  2. As an alias to the field set on 'labelField' in the MeterResource List config, or
   *  3. As an alias to a 'name' field on the MeterResource List (if one exists), or
   *  4. As an alias to the 'id' field on the MeterResource List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  measure?: Maybe<Scalars['String']>;
  measureNonLocalized?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type MeterResourceCreateInput = {
  name?: Maybe<Scalars['String']>;
  measure?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type MeterResourceHistoryRecord = {
  __typename?: 'MeterResourceHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MeterResourceHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MeterResourceHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MeterResourceHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MeterResourceHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  measure?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterResourceHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MeterResourceHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  measure?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterResourceHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MeterResourceHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MeterResourceHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  measure?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MeterResourceHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MeterResourceHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MeterResourceHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MeterResourceHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  measure?: Maybe<Scalars['String']>;
  measure_not?: Maybe<Scalars['String']>;
  measure_contains?: Maybe<Scalars['String']>;
  measure_not_contains?: Maybe<Scalars['String']>;
  measure_starts_with?: Maybe<Scalars['String']>;
  measure_not_starts_with?: Maybe<Scalars['String']>;
  measure_ends_with?: Maybe<Scalars['String']>;
  measure_not_ends_with?: Maybe<Scalars['String']>;
  measure_i?: Maybe<Scalars['String']>;
  measure_not_i?: Maybe<Scalars['String']>;
  measure_contains_i?: Maybe<Scalars['String']>;
  measure_not_contains_i?: Maybe<Scalars['String']>;
  measure_starts_with_i?: Maybe<Scalars['String']>;
  measure_not_starts_with_i?: Maybe<Scalars['String']>;
  measure_ends_with_i?: Maybe<Scalars['String']>;
  measure_not_ends_with_i?: Maybe<Scalars['String']>;
  measure_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  measure_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MeterResourceHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MeterResourceHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MeterResourceHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MeterResourceHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MeterResourceHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MeterResourceHistoryRecordsCreateInput = {
  data?: Maybe<MeterResourceHistoryRecordCreateInput>;
};

export type MeterResourceHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MeterResourceHistoryRecordUpdateInput>;
};

export type MeterResourceRelateToOneInput = {
  create?: Maybe<MeterResourceCreateInput>;
  connect?: Maybe<MeterResourceWhereUniqueInput>;
  disconnect?: Maybe<MeterResourceWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type MeterResourceUpdateInput = {
  name?: Maybe<Scalars['String']>;
  measure?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type MeterResourceWhereInput = {
  AND?: Maybe<Array<Maybe<MeterResourceWhereInput>>>;
  OR?: Maybe<Array<Maybe<MeterResourceWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  measure?: Maybe<Scalars['String']>;
  measure_not?: Maybe<Scalars['String']>;
  measure_contains?: Maybe<Scalars['String']>;
  measure_not_contains?: Maybe<Scalars['String']>;
  measure_starts_with?: Maybe<Scalars['String']>;
  measure_not_starts_with?: Maybe<Scalars['String']>;
  measure_ends_with?: Maybe<Scalars['String']>;
  measure_not_ends_with?: Maybe<Scalars['String']>;
  measure_i?: Maybe<Scalars['String']>;
  measure_not_i?: Maybe<Scalars['String']>;
  measure_contains_i?: Maybe<Scalars['String']>;
  measure_not_contains_i?: Maybe<Scalars['String']>;
  measure_starts_with_i?: Maybe<Scalars['String']>;
  measure_not_starts_with_i?: Maybe<Scalars['String']>;
  measure_ends_with_i?: Maybe<Scalars['String']>;
  measure_not_ends_with_i?: Maybe<Scalars['String']>;
  measure_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  measure_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MeterResourceWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MeterResourcesCreateInput = {
  data?: Maybe<MeterResourceCreateInput>;
};

export type MeterResourcesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MeterResourceUpdateInput>;
};

export type MeterUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  number?: Maybe<Scalars['String']>;
  numberOfTariffs?: Maybe<Scalars['Int']>;
  installationDate?: Maybe<Scalars['String']>;
  commissioningDate?: Maybe<Scalars['String']>;
  verificationDate?: Maybe<Scalars['String']>;
  nextVerificationDate?: Maybe<Scalars['String']>;
  controlReadingsDate?: Maybe<Scalars['String']>;
  sealingDate?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
  resource?: Maybe<MeterResourceRelateToOneInput>;
  isAutomatic?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  b2cApp?: Maybe<B2CAppRelateToOneInput>;
  b2bApp?: Maybe<B2BAppRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type MeterWhereInput = {
  AND?: Maybe<Array<Maybe<MeterWhereInput>>>;
  OR?: Maybe<Array<Maybe<MeterWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  property?: Maybe<PropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  number?: Maybe<Scalars['String']>;
  number_not?: Maybe<Scalars['String']>;
  number_contains?: Maybe<Scalars['String']>;
  number_not_contains?: Maybe<Scalars['String']>;
  number_starts_with?: Maybe<Scalars['String']>;
  number_not_starts_with?: Maybe<Scalars['String']>;
  number_ends_with?: Maybe<Scalars['String']>;
  number_not_ends_with?: Maybe<Scalars['String']>;
  number_i?: Maybe<Scalars['String']>;
  number_not_i?: Maybe<Scalars['String']>;
  number_contains_i?: Maybe<Scalars['String']>;
  number_not_contains_i?: Maybe<Scalars['String']>;
  number_starts_with_i?: Maybe<Scalars['String']>;
  number_not_starts_with_i?: Maybe<Scalars['String']>;
  number_ends_with_i?: Maybe<Scalars['String']>;
  number_not_ends_with_i?: Maybe<Scalars['String']>;
  number_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  numberOfTariffs?: Maybe<Scalars['Int']>;
  numberOfTariffs_not?: Maybe<Scalars['Int']>;
  numberOfTariffs_lt?: Maybe<Scalars['Int']>;
  numberOfTariffs_lte?: Maybe<Scalars['Int']>;
  numberOfTariffs_gt?: Maybe<Scalars['Int']>;
  numberOfTariffs_gte?: Maybe<Scalars['Int']>;
  numberOfTariffs_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfTariffs_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  installationDate?: Maybe<Scalars['String']>;
  installationDate_not?: Maybe<Scalars['String']>;
  installationDate_lt?: Maybe<Scalars['String']>;
  installationDate_lte?: Maybe<Scalars['String']>;
  installationDate_gt?: Maybe<Scalars['String']>;
  installationDate_gte?: Maybe<Scalars['String']>;
  installationDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  installationDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commissioningDate?: Maybe<Scalars['String']>;
  commissioningDate_not?: Maybe<Scalars['String']>;
  commissioningDate_lt?: Maybe<Scalars['String']>;
  commissioningDate_lte?: Maybe<Scalars['String']>;
  commissioningDate_gt?: Maybe<Scalars['String']>;
  commissioningDate_gte?: Maybe<Scalars['String']>;
  commissioningDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commissioningDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  verificationDate?: Maybe<Scalars['String']>;
  verificationDate_not?: Maybe<Scalars['String']>;
  verificationDate_lt?: Maybe<Scalars['String']>;
  verificationDate_lte?: Maybe<Scalars['String']>;
  verificationDate_gt?: Maybe<Scalars['String']>;
  verificationDate_gte?: Maybe<Scalars['String']>;
  verificationDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  verificationDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nextVerificationDate?: Maybe<Scalars['String']>;
  nextVerificationDate_not?: Maybe<Scalars['String']>;
  nextVerificationDate_lt?: Maybe<Scalars['String']>;
  nextVerificationDate_lte?: Maybe<Scalars['String']>;
  nextVerificationDate_gt?: Maybe<Scalars['String']>;
  nextVerificationDate_gte?: Maybe<Scalars['String']>;
  nextVerificationDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nextVerificationDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  controlReadingsDate?: Maybe<Scalars['String']>;
  controlReadingsDate_not?: Maybe<Scalars['String']>;
  controlReadingsDate_lt?: Maybe<Scalars['String']>;
  controlReadingsDate_lte?: Maybe<Scalars['String']>;
  controlReadingsDate_gt?: Maybe<Scalars['String']>;
  controlReadingsDate_gte?: Maybe<Scalars['String']>;
  controlReadingsDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  controlReadingsDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sealingDate?: Maybe<Scalars['String']>;
  sealingDate_not?: Maybe<Scalars['String']>;
  sealingDate_lt?: Maybe<Scalars['String']>;
  sealingDate_lte?: Maybe<Scalars['String']>;
  sealingDate_gt?: Maybe<Scalars['String']>;
  sealingDate_gte?: Maybe<Scalars['String']>;
  sealingDate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sealingDate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber?: Maybe<Scalars['String']>;
  accountNumber_not?: Maybe<Scalars['String']>;
  accountNumber_contains?: Maybe<Scalars['String']>;
  accountNumber_not_contains?: Maybe<Scalars['String']>;
  accountNumber_starts_with?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with?: Maybe<Scalars['String']>;
  accountNumber_ends_with?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with?: Maybe<Scalars['String']>;
  accountNumber_i?: Maybe<Scalars['String']>;
  accountNumber_not_i?: Maybe<Scalars['String']>;
  accountNumber_contains_i?: Maybe<Scalars['String']>;
  accountNumber_not_contains_i?: Maybe<Scalars['String']>;
  accountNumber_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  place?: Maybe<Scalars['String']>;
  place_not?: Maybe<Scalars['String']>;
  place_contains?: Maybe<Scalars['String']>;
  place_not_contains?: Maybe<Scalars['String']>;
  place_starts_with?: Maybe<Scalars['String']>;
  place_not_starts_with?: Maybe<Scalars['String']>;
  place_ends_with?: Maybe<Scalars['String']>;
  place_not_ends_with?: Maybe<Scalars['String']>;
  place_i?: Maybe<Scalars['String']>;
  place_not_i?: Maybe<Scalars['String']>;
  place_contains_i?: Maybe<Scalars['String']>;
  place_not_contains_i?: Maybe<Scalars['String']>;
  place_starts_with_i?: Maybe<Scalars['String']>;
  place_not_starts_with_i?: Maybe<Scalars['String']>;
  place_ends_with_i?: Maybe<Scalars['String']>;
  place_not_ends_with_i?: Maybe<Scalars['String']>;
  place_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  place_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  resource?: Maybe<MeterResourceWhereInput>;
  resource_is_null?: Maybe<Scalars['Boolean']>;
  isAutomatic?: Maybe<Scalars['Boolean']>;
  isAutomatic_not?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  b2cApp?: Maybe<B2CAppWhereInput>;
  b2cApp_is_null?: Maybe<Scalars['Boolean']>;
  b2bApp?: Maybe<B2BAppWhereInput>;
  b2bApp_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MeterWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MetersCreateInput = {
  data?: Maybe<MeterCreateInput>;
};

export type MetersUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MeterUpdateInput>;
};

export type MiniAppOutput = {
  __typename?: 'MiniAppOutput';
  id: Scalars['ID'];
  type: AppType;
  connected: Scalars['Boolean'];
  name: Scalars['String'];
  shortDescription: Scalars['String'];
  category: AppCategory;
  logo?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
};

/**  Information about resident's payment for single or multiple services/receipts  */
export type MultiPayment = {
  __typename?: 'MultiPayment';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MultiPayment List config, or
   *  2. As an alias to the field set on 'labelField' in the MultiPayment List config, or
   *  3. As an alias to a 'name' field on the MultiPayment List (if one exists), or
   *  4. As an alias to the 'id' field on the MultiPayment List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Total amount of withdraw. amount = amountWithoutExplicitFee + explicitFee + explicitServiceCharge  */
  amount?: Maybe<Scalars['String']>;
  /**  Amount of money which payer pays on top of initial "amount", which counts as fee for total "amount"  */
  explicitFee?: Maybe<Scalars['String']>;
  /**  Amount of money which payer pays on top of initial "amount", which counts as internal service charge for all payments  */
  explicitServiceCharge?: Maybe<Scalars['String']>;
  /**  The amount of money charged by service (Doma) for the provision of service after subtracting from it the shares of all participants in the process. Can be part of explicit fee, implicit fee or explicit service charge  */
  serviceFee?: Maybe<Scalars['String']>;
  /**  Total amount of money charged to recipients from amountWithoutExplicitFee of multipayment as fee for transaction  */
  implicitFee?: Maybe<Scalars['String']>;
  /**  The amount of money used to pay bills, initialized by resident.  */
  amountWithoutExplicitFee?: Maybe<Scalars['String']>;
  /**  Code of currency in ISO-4217 format  */
  currencyCode?: Maybe<Scalars['String']>;
  /**  Time of money withdraw (UTC)  */
  withdrawnAt?: Maybe<Scalars['String']>;
  /**  Number of the card (masked) from which the money was withdrawn. Needed for creating receipt  */
  cardNumber?: Maybe<Scalars['String']>;
  /**  Payment way, such as `CARD` or `APPLE_PAY`  */
  paymentWay?: Maybe<Scalars['String']>;
  /**  Payer email address (optional). Can be used by support to find MultiPayment faster or to send digital receipt  */
  payerEmail?: Maybe<Scalars['String']>;
  /**  Name of the payment document, such as `Квитанция`, `Штраф`  */
  serviceCategory?: Maybe<Scalars['String']>;
  /**  Transaction ID of money withdraw  */
  transactionId?: Maybe<Scalars['String']>;
  /**  Id of object in external service which represents current item. Mostly used for internal needs of integration services for matching our objects with theirs  */
  importId?: Maybe<Scalars['String']>;
  /**  Additional acquiring-specific information  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Status of multipayment. Can be: "CREATED", "DONE", "PROCESSING", "ERROR", "WITHDRAWN"  */
  status?: Maybe<Scalars['String']>;
  /**  Link to user  */
  user?: Maybe<User>;
  /**  Link to all related payments  */
  payments: Array<Payment>;
  _paymentsMeta?: Maybe<_QueryMeta>;
  /**  Acquiring integration. Determines way of user's payment  */
  integration?: Maybe<AcquiringIntegration>;
  /**  Link to RecurrentPaymentContext  */
  recurrentPaymentContext?: Maybe<RecurrentPaymentContext>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};


/**  Information about resident's payment for single or multiple services/receipts  */
export type MultiPaymentPaymentsArgs = {
  where?: Maybe<PaymentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPaymentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


/**  Information about resident's payment for single or multiple services/receipts  */
export type MultiPayment_PaymentsMetaArgs = {
  where?: Maybe<PaymentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPaymentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

export type MultiPaymentCreateInput = {
  explicitFee?: Maybe<Scalars['String']>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  serviceFee?: Maybe<Scalars['String']>;
  implicitFee?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  withdrawnAt?: Maybe<Scalars['String']>;
  cardNumber?: Maybe<Scalars['String']>;
  paymentWay?: Maybe<Scalars['String']>;
  payerEmail?: Maybe<Scalars['String']>;
  serviceCategory?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  user?: Maybe<UserRelateToOneInput>;
  payments?: Maybe<PaymentRelateToManyInput>;
  integration?: Maybe<AcquiringIntegrationRelateToOneInput>;
  recurrentPaymentContext?: Maybe<RecurrentPaymentContextRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type MultiPaymentHistoryRecord = {
  __typename?: 'MultiPaymentHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the MultiPaymentHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the MultiPaymentHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the MultiPaymentHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the MultiPaymentHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['JSON']>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  serviceFee?: Maybe<Scalars['String']>;
  implicitFee?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  withdrawnAt?: Maybe<Scalars['String']>;
  cardNumber?: Maybe<Scalars['String']>;
  paymentWay?: Maybe<Scalars['String']>;
  payerEmail?: Maybe<Scalars['String']>;
  serviceCategory?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  recurrentPaymentContext?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MultiPaymentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MultiPaymentHistoryRecordCreateInput = {
  amount?: Maybe<Scalars['JSON']>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  serviceFee?: Maybe<Scalars['String']>;
  implicitFee?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  withdrawnAt?: Maybe<Scalars['String']>;
  cardNumber?: Maybe<Scalars['String']>;
  paymentWay?: Maybe<Scalars['String']>;
  payerEmail?: Maybe<Scalars['String']>;
  serviceCategory?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  recurrentPaymentContext?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MultiPaymentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum MultiPaymentHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type MultiPaymentHistoryRecordUpdateInput = {
  amount?: Maybe<Scalars['JSON']>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  serviceFee?: Maybe<Scalars['String']>;
  implicitFee?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  withdrawnAt?: Maybe<Scalars['String']>;
  cardNumber?: Maybe<Scalars['String']>;
  paymentWay?: Maybe<Scalars['String']>;
  payerEmail?: Maybe<Scalars['String']>;
  serviceCategory?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  integration?: Maybe<Scalars['String']>;
  recurrentPaymentContext?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<MultiPaymentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type MultiPaymentHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<MultiPaymentHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<MultiPaymentHistoryRecordWhereInput>>>;
  amount?: Maybe<Scalars['JSON']>;
  amount_not?: Maybe<Scalars['JSON']>;
  amount_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  amount_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitFee_not?: Maybe<Scalars['String']>;
  explicitFee_lt?: Maybe<Scalars['String']>;
  explicitFee_lte?: Maybe<Scalars['String']>;
  explicitFee_gt?: Maybe<Scalars['String']>;
  explicitFee_gte?: Maybe<Scalars['String']>;
  explicitFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  explicitServiceCharge_not?: Maybe<Scalars['String']>;
  explicitServiceCharge_lt?: Maybe<Scalars['String']>;
  explicitServiceCharge_lte?: Maybe<Scalars['String']>;
  explicitServiceCharge_gt?: Maybe<Scalars['String']>;
  explicitServiceCharge_gte?: Maybe<Scalars['String']>;
  explicitServiceCharge_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitServiceCharge_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceFee?: Maybe<Scalars['String']>;
  serviceFee_not?: Maybe<Scalars['String']>;
  serviceFee_lt?: Maybe<Scalars['String']>;
  serviceFee_lte?: Maybe<Scalars['String']>;
  serviceFee_gt?: Maybe<Scalars['String']>;
  serviceFee_gte?: Maybe<Scalars['String']>;
  serviceFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  implicitFee?: Maybe<Scalars['String']>;
  implicitFee_not?: Maybe<Scalars['String']>;
  implicitFee_lt?: Maybe<Scalars['String']>;
  implicitFee_lte?: Maybe<Scalars['String']>;
  implicitFee_gt?: Maybe<Scalars['String']>;
  implicitFee_gte?: Maybe<Scalars['String']>;
  implicitFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  implicitFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amountWithoutExplicitFee?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_not?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_lt?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_lte?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_gt?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_gte?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amountWithoutExplicitFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_contains?: Maybe<Scalars['String']>;
  currencyCode_not_contains?: Maybe<Scalars['String']>;
  currencyCode_starts_with?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with?: Maybe<Scalars['String']>;
  currencyCode_ends_with?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with?: Maybe<Scalars['String']>;
  currencyCode_i?: Maybe<Scalars['String']>;
  currencyCode_not_i?: Maybe<Scalars['String']>;
  currencyCode_contains_i?: Maybe<Scalars['String']>;
  currencyCode_not_contains_i?: Maybe<Scalars['String']>;
  currencyCode_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  withdrawnAt?: Maybe<Scalars['String']>;
  withdrawnAt_not?: Maybe<Scalars['String']>;
  withdrawnAt_lt?: Maybe<Scalars['String']>;
  withdrawnAt_lte?: Maybe<Scalars['String']>;
  withdrawnAt_gt?: Maybe<Scalars['String']>;
  withdrawnAt_gte?: Maybe<Scalars['String']>;
  withdrawnAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  withdrawnAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  cardNumber?: Maybe<Scalars['String']>;
  cardNumber_not?: Maybe<Scalars['String']>;
  cardNumber_contains?: Maybe<Scalars['String']>;
  cardNumber_not_contains?: Maybe<Scalars['String']>;
  cardNumber_starts_with?: Maybe<Scalars['String']>;
  cardNumber_not_starts_with?: Maybe<Scalars['String']>;
  cardNumber_ends_with?: Maybe<Scalars['String']>;
  cardNumber_not_ends_with?: Maybe<Scalars['String']>;
  cardNumber_i?: Maybe<Scalars['String']>;
  cardNumber_not_i?: Maybe<Scalars['String']>;
  cardNumber_contains_i?: Maybe<Scalars['String']>;
  cardNumber_not_contains_i?: Maybe<Scalars['String']>;
  cardNumber_starts_with_i?: Maybe<Scalars['String']>;
  cardNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  cardNumber_ends_with_i?: Maybe<Scalars['String']>;
  cardNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  cardNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  cardNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentWay?: Maybe<Scalars['String']>;
  paymentWay_not?: Maybe<Scalars['String']>;
  paymentWay_contains?: Maybe<Scalars['String']>;
  paymentWay_not_contains?: Maybe<Scalars['String']>;
  paymentWay_starts_with?: Maybe<Scalars['String']>;
  paymentWay_not_starts_with?: Maybe<Scalars['String']>;
  paymentWay_ends_with?: Maybe<Scalars['String']>;
  paymentWay_not_ends_with?: Maybe<Scalars['String']>;
  paymentWay_i?: Maybe<Scalars['String']>;
  paymentWay_not_i?: Maybe<Scalars['String']>;
  paymentWay_contains_i?: Maybe<Scalars['String']>;
  paymentWay_not_contains_i?: Maybe<Scalars['String']>;
  paymentWay_starts_with_i?: Maybe<Scalars['String']>;
  paymentWay_not_starts_with_i?: Maybe<Scalars['String']>;
  paymentWay_ends_with_i?: Maybe<Scalars['String']>;
  paymentWay_not_ends_with_i?: Maybe<Scalars['String']>;
  paymentWay_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentWay_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  payerEmail?: Maybe<Scalars['String']>;
  payerEmail_not?: Maybe<Scalars['String']>;
  payerEmail_contains?: Maybe<Scalars['String']>;
  payerEmail_not_contains?: Maybe<Scalars['String']>;
  payerEmail_starts_with?: Maybe<Scalars['String']>;
  payerEmail_not_starts_with?: Maybe<Scalars['String']>;
  payerEmail_ends_with?: Maybe<Scalars['String']>;
  payerEmail_not_ends_with?: Maybe<Scalars['String']>;
  payerEmail_i?: Maybe<Scalars['String']>;
  payerEmail_not_i?: Maybe<Scalars['String']>;
  payerEmail_contains_i?: Maybe<Scalars['String']>;
  payerEmail_not_contains_i?: Maybe<Scalars['String']>;
  payerEmail_starts_with_i?: Maybe<Scalars['String']>;
  payerEmail_not_starts_with_i?: Maybe<Scalars['String']>;
  payerEmail_ends_with_i?: Maybe<Scalars['String']>;
  payerEmail_not_ends_with_i?: Maybe<Scalars['String']>;
  payerEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  payerEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceCategory?: Maybe<Scalars['String']>;
  serviceCategory_not?: Maybe<Scalars['String']>;
  serviceCategory_contains?: Maybe<Scalars['String']>;
  serviceCategory_not_contains?: Maybe<Scalars['String']>;
  serviceCategory_starts_with?: Maybe<Scalars['String']>;
  serviceCategory_not_starts_with?: Maybe<Scalars['String']>;
  serviceCategory_ends_with?: Maybe<Scalars['String']>;
  serviceCategory_not_ends_with?: Maybe<Scalars['String']>;
  serviceCategory_i?: Maybe<Scalars['String']>;
  serviceCategory_not_i?: Maybe<Scalars['String']>;
  serviceCategory_contains_i?: Maybe<Scalars['String']>;
  serviceCategory_not_contains_i?: Maybe<Scalars['String']>;
  serviceCategory_starts_with_i?: Maybe<Scalars['String']>;
  serviceCategory_not_starts_with_i?: Maybe<Scalars['String']>;
  serviceCategory_ends_with_i?: Maybe<Scalars['String']>;
  serviceCategory_not_ends_with_i?: Maybe<Scalars['String']>;
  serviceCategory_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceCategory_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionId?: Maybe<Scalars['String']>;
  transactionId_not?: Maybe<Scalars['String']>;
  transactionId_contains?: Maybe<Scalars['String']>;
  transactionId_not_contains?: Maybe<Scalars['String']>;
  transactionId_starts_with?: Maybe<Scalars['String']>;
  transactionId_not_starts_with?: Maybe<Scalars['String']>;
  transactionId_ends_with?: Maybe<Scalars['String']>;
  transactionId_not_ends_with?: Maybe<Scalars['String']>;
  transactionId_i?: Maybe<Scalars['String']>;
  transactionId_not_i?: Maybe<Scalars['String']>;
  transactionId_contains_i?: Maybe<Scalars['String']>;
  transactionId_not_contains_i?: Maybe<Scalars['String']>;
  transactionId_starts_with_i?: Maybe<Scalars['String']>;
  transactionId_not_starts_with_i?: Maybe<Scalars['String']>;
  transactionId_ends_with_i?: Maybe<Scalars['String']>;
  transactionId_not_ends_with_i?: Maybe<Scalars['String']>;
  transactionId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integration?: Maybe<Scalars['String']>;
  integration_not?: Maybe<Scalars['String']>;
  integration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  integration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recurrentPaymentContext?: Maybe<Scalars['String']>;
  recurrentPaymentContext_not?: Maybe<Scalars['String']>;
  recurrentPaymentContext_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recurrentPaymentContext_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<MultiPaymentHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<MultiPaymentHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<MultiPaymentHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<MultiPaymentHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type MultiPaymentHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MultiPaymentHistoryRecordsCreateInput = {
  data?: Maybe<MultiPaymentHistoryRecordCreateInput>;
};

export type MultiPaymentHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MultiPaymentHistoryRecordUpdateInput>;
};

export type MultiPaymentRelateToOneInput = {
  create?: Maybe<MultiPaymentCreateInput>;
  connect?: Maybe<MultiPaymentWhereUniqueInput>;
  disconnect?: Maybe<MultiPaymentWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type MultiPaymentUpdateInput = {
  explicitFee?: Maybe<Scalars['String']>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  serviceFee?: Maybe<Scalars['String']>;
  implicitFee?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  withdrawnAt?: Maybe<Scalars['String']>;
  cardNumber?: Maybe<Scalars['String']>;
  paymentWay?: Maybe<Scalars['String']>;
  payerEmail?: Maybe<Scalars['String']>;
  serviceCategory?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  status?: Maybe<Scalars['String']>;
  user?: Maybe<UserRelateToOneInput>;
  payments?: Maybe<PaymentRelateToManyInput>;
  integration?: Maybe<AcquiringIntegrationRelateToOneInput>;
  recurrentPaymentContext?: Maybe<RecurrentPaymentContextRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type MultiPaymentWhereInput = {
  AND?: Maybe<Array<Maybe<MultiPaymentWhereInput>>>;
  OR?: Maybe<Array<Maybe<MultiPaymentWhereInput>>>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitFee_not?: Maybe<Scalars['String']>;
  explicitFee_lt?: Maybe<Scalars['String']>;
  explicitFee_lte?: Maybe<Scalars['String']>;
  explicitFee_gt?: Maybe<Scalars['String']>;
  explicitFee_gte?: Maybe<Scalars['String']>;
  explicitFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  explicitServiceCharge_not?: Maybe<Scalars['String']>;
  explicitServiceCharge_lt?: Maybe<Scalars['String']>;
  explicitServiceCharge_lte?: Maybe<Scalars['String']>;
  explicitServiceCharge_gt?: Maybe<Scalars['String']>;
  explicitServiceCharge_gte?: Maybe<Scalars['String']>;
  explicitServiceCharge_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitServiceCharge_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceFee?: Maybe<Scalars['String']>;
  serviceFee_not?: Maybe<Scalars['String']>;
  serviceFee_lt?: Maybe<Scalars['String']>;
  serviceFee_lte?: Maybe<Scalars['String']>;
  serviceFee_gt?: Maybe<Scalars['String']>;
  serviceFee_gte?: Maybe<Scalars['String']>;
  serviceFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  implicitFee?: Maybe<Scalars['String']>;
  implicitFee_not?: Maybe<Scalars['String']>;
  implicitFee_lt?: Maybe<Scalars['String']>;
  implicitFee_lte?: Maybe<Scalars['String']>;
  implicitFee_gt?: Maybe<Scalars['String']>;
  implicitFee_gte?: Maybe<Scalars['String']>;
  implicitFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  implicitFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amountWithoutExplicitFee?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_not?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_lt?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_lte?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_gt?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_gte?: Maybe<Scalars['String']>;
  amountWithoutExplicitFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amountWithoutExplicitFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  withdrawnAt?: Maybe<Scalars['String']>;
  withdrawnAt_not?: Maybe<Scalars['String']>;
  withdrawnAt_lt?: Maybe<Scalars['String']>;
  withdrawnAt_lte?: Maybe<Scalars['String']>;
  withdrawnAt_gt?: Maybe<Scalars['String']>;
  withdrawnAt_gte?: Maybe<Scalars['String']>;
  withdrawnAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  withdrawnAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  cardNumber?: Maybe<Scalars['String']>;
  cardNumber_not?: Maybe<Scalars['String']>;
  cardNumber_contains?: Maybe<Scalars['String']>;
  cardNumber_not_contains?: Maybe<Scalars['String']>;
  cardNumber_starts_with?: Maybe<Scalars['String']>;
  cardNumber_not_starts_with?: Maybe<Scalars['String']>;
  cardNumber_ends_with?: Maybe<Scalars['String']>;
  cardNumber_not_ends_with?: Maybe<Scalars['String']>;
  cardNumber_i?: Maybe<Scalars['String']>;
  cardNumber_not_i?: Maybe<Scalars['String']>;
  cardNumber_contains_i?: Maybe<Scalars['String']>;
  cardNumber_not_contains_i?: Maybe<Scalars['String']>;
  cardNumber_starts_with_i?: Maybe<Scalars['String']>;
  cardNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  cardNumber_ends_with_i?: Maybe<Scalars['String']>;
  cardNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  cardNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  cardNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentWay?: Maybe<Scalars['String']>;
  paymentWay_not?: Maybe<Scalars['String']>;
  paymentWay_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentWay_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  payerEmail?: Maybe<Scalars['String']>;
  payerEmail_not?: Maybe<Scalars['String']>;
  payerEmail_contains?: Maybe<Scalars['String']>;
  payerEmail_not_contains?: Maybe<Scalars['String']>;
  payerEmail_starts_with?: Maybe<Scalars['String']>;
  payerEmail_not_starts_with?: Maybe<Scalars['String']>;
  payerEmail_ends_with?: Maybe<Scalars['String']>;
  payerEmail_not_ends_with?: Maybe<Scalars['String']>;
  payerEmail_i?: Maybe<Scalars['String']>;
  payerEmail_not_i?: Maybe<Scalars['String']>;
  payerEmail_contains_i?: Maybe<Scalars['String']>;
  payerEmail_not_contains_i?: Maybe<Scalars['String']>;
  payerEmail_starts_with_i?: Maybe<Scalars['String']>;
  payerEmail_not_starts_with_i?: Maybe<Scalars['String']>;
  payerEmail_ends_with_i?: Maybe<Scalars['String']>;
  payerEmail_not_ends_with_i?: Maybe<Scalars['String']>;
  payerEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  payerEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceCategory?: Maybe<Scalars['String']>;
  serviceCategory_not?: Maybe<Scalars['String']>;
  serviceCategory_contains?: Maybe<Scalars['String']>;
  serviceCategory_not_contains?: Maybe<Scalars['String']>;
  serviceCategory_starts_with?: Maybe<Scalars['String']>;
  serviceCategory_not_starts_with?: Maybe<Scalars['String']>;
  serviceCategory_ends_with?: Maybe<Scalars['String']>;
  serviceCategory_not_ends_with?: Maybe<Scalars['String']>;
  serviceCategory_i?: Maybe<Scalars['String']>;
  serviceCategory_not_i?: Maybe<Scalars['String']>;
  serviceCategory_contains_i?: Maybe<Scalars['String']>;
  serviceCategory_not_contains_i?: Maybe<Scalars['String']>;
  serviceCategory_starts_with_i?: Maybe<Scalars['String']>;
  serviceCategory_not_starts_with_i?: Maybe<Scalars['String']>;
  serviceCategory_ends_with_i?: Maybe<Scalars['String']>;
  serviceCategory_not_ends_with_i?: Maybe<Scalars['String']>;
  serviceCategory_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceCategory_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionId?: Maybe<Scalars['String']>;
  transactionId_not?: Maybe<Scalars['String']>;
  transactionId_contains?: Maybe<Scalars['String']>;
  transactionId_not_contains?: Maybe<Scalars['String']>;
  transactionId_starts_with?: Maybe<Scalars['String']>;
  transactionId_not_starts_with?: Maybe<Scalars['String']>;
  transactionId_ends_with?: Maybe<Scalars['String']>;
  transactionId_not_ends_with?: Maybe<Scalars['String']>;
  transactionId_i?: Maybe<Scalars['String']>;
  transactionId_not_i?: Maybe<Scalars['String']>;
  transactionId_contains_i?: Maybe<Scalars['String']>;
  transactionId_not_contains_i?: Maybe<Scalars['String']>;
  transactionId_starts_with_i?: Maybe<Scalars['String']>;
  transactionId_not_starts_with_i?: Maybe<Scalars['String']>;
  transactionId_ends_with_i?: Maybe<Scalars['String']>;
  transactionId_not_ends_with_i?: Maybe<Scalars['String']>;
  transactionId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  /**  condition must be true for all nodes  */
  payments_every?: Maybe<PaymentWhereInput>;
  /**  condition must be true for at least 1 node  */
  payments_some?: Maybe<PaymentWhereInput>;
  /**  condition must be false for all nodes  */
  payments_none?: Maybe<PaymentWhereInput>;
  integration?: Maybe<AcquiringIntegrationWhereInput>;
  integration_is_null?: Maybe<Scalars['Boolean']>;
  recurrentPaymentContext?: Maybe<RecurrentPaymentContextWhereInput>;
  recurrentPaymentContext_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type MultiPaymentWhereUniqueInput = {
  id: Scalars['ID'];
};

export type MultiPaymentsCreateInput = {
  data?: Maybe<MultiPaymentCreateInput>;
};

export type MultiPaymentsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<MultiPaymentUpdateInput>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /**  Create a single UserHistoryRecord item.  */
  createUserHistoryRecord?: Maybe<UserHistoryRecord>;
  /**  Create multiple UserHistoryRecord items.  */
  createUserHistoryRecords?: Maybe<Array<Maybe<UserHistoryRecord>>>;
  /**  Update a single UserHistoryRecord item by ID.  */
  updateUserHistoryRecord?: Maybe<UserHistoryRecord>;
  /**  Update multiple UserHistoryRecord items by ID.  */
  updateUserHistoryRecords?: Maybe<Array<Maybe<UserHistoryRecord>>>;
  /**  Delete a single UserHistoryRecord item by ID.  */
  deleteUserHistoryRecord?: Maybe<UserHistoryRecord>;
  /**  Delete multiple UserHistoryRecord items by ID.  */
  deleteUserHistoryRecords?: Maybe<Array<Maybe<UserHistoryRecord>>>;
  /**  Create a single User item.  */
  createUser?: Maybe<User>;
  /**  Create multiple User items.  */
  createUsers?: Maybe<Array<Maybe<User>>>;
  /**  Update a single User item by ID.  */
  updateUser?: Maybe<User>;
  /**  Update multiple User items by ID.  */
  updateUsers?: Maybe<Array<Maybe<User>>>;
  /**  Delete a single User item by ID.  */
  deleteUser?: Maybe<User>;
  /**  Delete multiple User items by ID.  */
  deleteUsers?: Maybe<Array<Maybe<User>>>;
  /**  Create a single ForgotPasswordActionHistoryRecord item.  */
  createForgotPasswordActionHistoryRecord?: Maybe<ForgotPasswordActionHistoryRecord>;
  /**  Create multiple ForgotPasswordActionHistoryRecord items.  */
  createForgotPasswordActionHistoryRecords?: Maybe<Array<Maybe<ForgotPasswordActionHistoryRecord>>>;
  /**  Update a single ForgotPasswordActionHistoryRecord item by ID.  */
  updateForgotPasswordActionHistoryRecord?: Maybe<ForgotPasswordActionHistoryRecord>;
  /**  Update multiple ForgotPasswordActionHistoryRecord items by ID.  */
  updateForgotPasswordActionHistoryRecords?: Maybe<Array<Maybe<ForgotPasswordActionHistoryRecord>>>;
  /**  Delete a single ForgotPasswordActionHistoryRecord item by ID.  */
  deleteForgotPasswordActionHistoryRecord?: Maybe<ForgotPasswordActionHistoryRecord>;
  /**  Delete multiple ForgotPasswordActionHistoryRecord items by ID.  */
  deleteForgotPasswordActionHistoryRecords?: Maybe<Array<Maybe<ForgotPasswordActionHistoryRecord>>>;
  /**  Create a single ForgotPasswordAction item.  */
  createForgotPasswordAction?: Maybe<ForgotPasswordAction>;
  /**  Create multiple ForgotPasswordAction items.  */
  createForgotPasswordActions?: Maybe<Array<Maybe<ForgotPasswordAction>>>;
  /**  Update a single ForgotPasswordAction item by ID.  */
  updateForgotPasswordAction?: Maybe<ForgotPasswordAction>;
  /**  Update multiple ForgotPasswordAction items by ID.  */
  updateForgotPasswordActions?: Maybe<Array<Maybe<ForgotPasswordAction>>>;
  /**  Delete a single ForgotPasswordAction item by ID.  */
  deleteForgotPasswordAction?: Maybe<ForgotPasswordAction>;
  /**  Delete multiple ForgotPasswordAction items by ID.  */
  deleteForgotPasswordActions?: Maybe<Array<Maybe<ForgotPasswordAction>>>;
  /**  Create a single ConfirmPhoneActionHistoryRecord item.  */
  createConfirmPhoneActionHistoryRecord?: Maybe<ConfirmPhoneActionHistoryRecord>;
  /**  Create multiple ConfirmPhoneActionHistoryRecord items.  */
  createConfirmPhoneActionHistoryRecords?: Maybe<Array<Maybe<ConfirmPhoneActionHistoryRecord>>>;
  /**  Update a single ConfirmPhoneActionHistoryRecord item by ID.  */
  updateConfirmPhoneActionHistoryRecord?: Maybe<ConfirmPhoneActionHistoryRecord>;
  /**  Update multiple ConfirmPhoneActionHistoryRecord items by ID.  */
  updateConfirmPhoneActionHistoryRecords?: Maybe<Array<Maybe<ConfirmPhoneActionHistoryRecord>>>;
  /**  Delete a single ConfirmPhoneActionHistoryRecord item by ID.  */
  deleteConfirmPhoneActionHistoryRecord?: Maybe<ConfirmPhoneActionHistoryRecord>;
  /**  Delete multiple ConfirmPhoneActionHistoryRecord items by ID.  */
  deleteConfirmPhoneActionHistoryRecords?: Maybe<Array<Maybe<ConfirmPhoneActionHistoryRecord>>>;
  /**  Create a single ConfirmPhoneAction item.  */
  createConfirmPhoneAction?: Maybe<ConfirmPhoneAction>;
  /**  Create multiple ConfirmPhoneAction items.  */
  createConfirmPhoneActions?: Maybe<Array<Maybe<ConfirmPhoneAction>>>;
  /**  Update a single ConfirmPhoneAction item by ID.  */
  updateConfirmPhoneAction?: Maybe<ConfirmPhoneAction>;
  /**  Update multiple ConfirmPhoneAction items by ID.  */
  updateConfirmPhoneActions?: Maybe<Array<Maybe<ConfirmPhoneAction>>>;
  /**  Delete a single ConfirmPhoneAction item by ID.  */
  deleteConfirmPhoneAction?: Maybe<ConfirmPhoneAction>;
  /**  Delete multiple ConfirmPhoneAction items by ID.  */
  deleteConfirmPhoneActions?: Maybe<Array<Maybe<ConfirmPhoneAction>>>;
  /**  Create a single OidcClientHistoryRecord item.  */
  createOidcClientHistoryRecord?: Maybe<OidcClientHistoryRecord>;
  /**  Create multiple OidcClientHistoryRecord items.  */
  createOidcClientHistoryRecords?: Maybe<Array<Maybe<OidcClientHistoryRecord>>>;
  /**  Update a single OidcClientHistoryRecord item by ID.  */
  updateOidcClientHistoryRecord?: Maybe<OidcClientHistoryRecord>;
  /**  Update multiple OidcClientHistoryRecord items by ID.  */
  updateOidcClientHistoryRecords?: Maybe<Array<Maybe<OidcClientHistoryRecord>>>;
  /**  Delete a single OidcClientHistoryRecord item by ID.  */
  deleteOidcClientHistoryRecord?: Maybe<OidcClientHistoryRecord>;
  /**  Delete multiple OidcClientHistoryRecord items by ID.  */
  deleteOidcClientHistoryRecords?: Maybe<Array<Maybe<OidcClientHistoryRecord>>>;
  /**  Create a single OidcClient item.  */
  createOidcClient?: Maybe<OidcClient>;
  /**  Create multiple OidcClient items.  */
  createOidcClients?: Maybe<Array<Maybe<OidcClient>>>;
  /**  Update a single OidcClient item by ID.  */
  updateOidcClient?: Maybe<OidcClient>;
  /**  Update multiple OidcClient items by ID.  */
  updateOidcClients?: Maybe<Array<Maybe<OidcClient>>>;
  /**  Delete a single OidcClient item by ID.  */
  deleteOidcClient?: Maybe<OidcClient>;
  /**  Delete multiple OidcClient items by ID.  */
  deleteOidcClients?: Maybe<Array<Maybe<OidcClient>>>;
  /**  Create a single UserExternalIdentityHistoryRecord item.  */
  createUserExternalIdentityHistoryRecord?: Maybe<UserExternalIdentityHistoryRecord>;
  /**  Create multiple UserExternalIdentityHistoryRecord items.  */
  createUserExternalIdentityHistoryRecords?: Maybe<Array<Maybe<UserExternalIdentityHistoryRecord>>>;
  /**  Update a single UserExternalIdentityHistoryRecord item by ID.  */
  updateUserExternalIdentityHistoryRecord?: Maybe<UserExternalIdentityHistoryRecord>;
  /**  Update multiple UserExternalIdentityHistoryRecord items by ID.  */
  updateUserExternalIdentityHistoryRecords?: Maybe<Array<Maybe<UserExternalIdentityHistoryRecord>>>;
  /**  Delete a single UserExternalIdentityHistoryRecord item by ID.  */
  deleteUserExternalIdentityHistoryRecord?: Maybe<UserExternalIdentityHistoryRecord>;
  /**  Delete multiple UserExternalIdentityHistoryRecord items by ID.  */
  deleteUserExternalIdentityHistoryRecords?: Maybe<Array<Maybe<UserExternalIdentityHistoryRecord>>>;
  /**  Create a single UserExternalIdentity item.  */
  createUserExternalIdentity?: Maybe<UserExternalIdentity>;
  /**  Create multiple UserExternalIdentity items.  */
  createUserExternalIdentities?: Maybe<Array<Maybe<UserExternalIdentity>>>;
  /**  Update a single UserExternalIdentity item by ID.  */
  updateUserExternalIdentity?: Maybe<UserExternalIdentity>;
  /**  Update multiple UserExternalIdentity items by ID.  */
  updateUserExternalIdentities?: Maybe<Array<Maybe<UserExternalIdentity>>>;
  /**  Delete a single UserExternalIdentity item by ID.  */
  deleteUserExternalIdentity?: Maybe<UserExternalIdentity>;
  /**  Delete multiple UserExternalIdentity items by ID.  */
  deleteUserExternalIdentities?: Maybe<Array<Maybe<UserExternalIdentity>>>;
  /**  Create a single ExternalTokenAccessRightHistoryRecord item.  */
  createExternalTokenAccessRightHistoryRecord?: Maybe<ExternalTokenAccessRightHistoryRecord>;
  /**  Create multiple ExternalTokenAccessRightHistoryRecord items.  */
  createExternalTokenAccessRightHistoryRecords?: Maybe<Array<Maybe<ExternalTokenAccessRightHistoryRecord>>>;
  /**  Update a single ExternalTokenAccessRightHistoryRecord item by ID.  */
  updateExternalTokenAccessRightHistoryRecord?: Maybe<ExternalTokenAccessRightHistoryRecord>;
  /**  Update multiple ExternalTokenAccessRightHistoryRecord items by ID.  */
  updateExternalTokenAccessRightHistoryRecords?: Maybe<Array<Maybe<ExternalTokenAccessRightHistoryRecord>>>;
  /**  Delete a single ExternalTokenAccessRightHistoryRecord item by ID.  */
  deleteExternalTokenAccessRightHistoryRecord?: Maybe<ExternalTokenAccessRightHistoryRecord>;
  /**  Delete multiple ExternalTokenAccessRightHistoryRecord items by ID.  */
  deleteExternalTokenAccessRightHistoryRecords?: Maybe<Array<Maybe<ExternalTokenAccessRightHistoryRecord>>>;
  /**  Create a single ExternalTokenAccessRight item.  */
  createExternalTokenAccessRight?: Maybe<ExternalTokenAccessRight>;
  /**  Create multiple ExternalTokenAccessRight items.  */
  createExternalTokenAccessRights?: Maybe<Array<Maybe<ExternalTokenAccessRight>>>;
  /**  Update a single ExternalTokenAccessRight item by ID.  */
  updateExternalTokenAccessRight?: Maybe<ExternalTokenAccessRight>;
  /**  Update multiple ExternalTokenAccessRight items by ID.  */
  updateExternalTokenAccessRights?: Maybe<Array<Maybe<ExternalTokenAccessRight>>>;
  /**  Delete a single ExternalTokenAccessRight item by ID.  */
  deleteExternalTokenAccessRight?: Maybe<ExternalTokenAccessRight>;
  /**  Delete multiple ExternalTokenAccessRight items by ID.  */
  deleteExternalTokenAccessRights?: Maybe<Array<Maybe<ExternalTokenAccessRight>>>;
  /**  Create a single OrganizationHistoryRecord item.  */
  createOrganizationHistoryRecord?: Maybe<OrganizationHistoryRecord>;
  /**  Create multiple OrganizationHistoryRecord items.  */
  createOrganizationHistoryRecords?: Maybe<Array<Maybe<OrganizationHistoryRecord>>>;
  /**  Update a single OrganizationHistoryRecord item by ID.  */
  updateOrganizationHistoryRecord?: Maybe<OrganizationHistoryRecord>;
  /**  Update multiple OrganizationHistoryRecord items by ID.  */
  updateOrganizationHistoryRecords?: Maybe<Array<Maybe<OrganizationHistoryRecord>>>;
  /**  Delete a single OrganizationHistoryRecord item by ID.  */
  deleteOrganizationHistoryRecord?: Maybe<OrganizationHistoryRecord>;
  /**  Delete multiple OrganizationHistoryRecord items by ID.  */
  deleteOrganizationHistoryRecords?: Maybe<Array<Maybe<OrganizationHistoryRecord>>>;
  /**  Create a single Organization item.  */
  createOrganization?: Maybe<Organization>;
  /**  Create multiple Organization items.  */
  createOrganizations?: Maybe<Array<Maybe<Organization>>>;
  /**  Update a single Organization item by ID.  */
  updateOrganization?: Maybe<Organization>;
  /**  Update multiple Organization items by ID.  */
  updateOrganizations?: Maybe<Array<Maybe<Organization>>>;
  /**  Delete a single Organization item by ID.  */
  deleteOrganization?: Maybe<Organization>;
  /**  Delete multiple Organization items by ID.  */
  deleteOrganizations?: Maybe<Array<Maybe<Organization>>>;
  /**  Create a single OrganizationEmployeeHistoryRecord item.  */
  createOrganizationEmployeeHistoryRecord?: Maybe<OrganizationEmployeeHistoryRecord>;
  /**  Create multiple OrganizationEmployeeHistoryRecord items.  */
  createOrganizationEmployeeHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeHistoryRecord>>>;
  /**  Update a single OrganizationEmployeeHistoryRecord item by ID.  */
  updateOrganizationEmployeeHistoryRecord?: Maybe<OrganizationEmployeeHistoryRecord>;
  /**  Update multiple OrganizationEmployeeHistoryRecord items by ID.  */
  updateOrganizationEmployeeHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeHistoryRecord>>>;
  /**  Delete a single OrganizationEmployeeHistoryRecord item by ID.  */
  deleteOrganizationEmployeeHistoryRecord?: Maybe<OrganizationEmployeeHistoryRecord>;
  /**  Delete multiple OrganizationEmployeeHistoryRecord items by ID.  */
  deleteOrganizationEmployeeHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeHistoryRecord>>>;
  /**  Create a single OrganizationEmployee item.  */
  createOrganizationEmployee?: Maybe<OrganizationEmployee>;
  /**  Create multiple OrganizationEmployee items.  */
  createOrganizationEmployees?: Maybe<Array<Maybe<OrganizationEmployee>>>;
  /**  Update a single OrganizationEmployee item by ID.  */
  updateOrganizationEmployee?: Maybe<OrganizationEmployee>;
  /**  Update multiple OrganizationEmployee items by ID.  */
  updateOrganizationEmployees?: Maybe<Array<Maybe<OrganizationEmployee>>>;
  /**  Delete a single OrganizationEmployee item by ID.  */
  deleteOrganizationEmployee?: Maybe<OrganizationEmployee>;
  /**  Delete multiple OrganizationEmployee items by ID.  */
  deleteOrganizationEmployees?: Maybe<Array<Maybe<OrganizationEmployee>>>;
  /**  Create a single OrganizationEmployeeRoleHistoryRecord item.  */
  createOrganizationEmployeeRoleHistoryRecord?: Maybe<OrganizationEmployeeRoleHistoryRecord>;
  /**  Create multiple OrganizationEmployeeRoleHistoryRecord items.  */
  createOrganizationEmployeeRoleHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeRoleHistoryRecord>>>;
  /**  Update a single OrganizationEmployeeRoleHistoryRecord item by ID.  */
  updateOrganizationEmployeeRoleHistoryRecord?: Maybe<OrganizationEmployeeRoleHistoryRecord>;
  /**  Update multiple OrganizationEmployeeRoleHistoryRecord items by ID.  */
  updateOrganizationEmployeeRoleHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeRoleHistoryRecord>>>;
  /**  Delete a single OrganizationEmployeeRoleHistoryRecord item by ID.  */
  deleteOrganizationEmployeeRoleHistoryRecord?: Maybe<OrganizationEmployeeRoleHistoryRecord>;
  /**  Delete multiple OrganizationEmployeeRoleHistoryRecord items by ID.  */
  deleteOrganizationEmployeeRoleHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeRoleHistoryRecord>>>;
  /**  Create a single OrganizationEmployeeRole item.  */
  createOrganizationEmployeeRole?: Maybe<OrganizationEmployeeRole>;
  /**  Create multiple OrganizationEmployeeRole items.  */
  createOrganizationEmployeeRoles?: Maybe<Array<Maybe<OrganizationEmployeeRole>>>;
  /**  Update a single OrganizationEmployeeRole item by ID.  */
  updateOrganizationEmployeeRole?: Maybe<OrganizationEmployeeRole>;
  /**  Update multiple OrganizationEmployeeRole items by ID.  */
  updateOrganizationEmployeeRoles?: Maybe<Array<Maybe<OrganizationEmployeeRole>>>;
  /**  Delete a single OrganizationEmployeeRole item by ID.  */
  deleteOrganizationEmployeeRole?: Maybe<OrganizationEmployeeRole>;
  /**  Delete multiple OrganizationEmployeeRole items by ID.  */
  deleteOrganizationEmployeeRoles?: Maybe<Array<Maybe<OrganizationEmployeeRole>>>;
  /**  Create a single OrganizationLinkHistoryRecord item.  */
  createOrganizationLinkHistoryRecord?: Maybe<OrganizationLinkHistoryRecord>;
  /**  Create multiple OrganizationLinkHistoryRecord items.  */
  createOrganizationLinkHistoryRecords?: Maybe<Array<Maybe<OrganizationLinkHistoryRecord>>>;
  /**  Update a single OrganizationLinkHistoryRecord item by ID.  */
  updateOrganizationLinkHistoryRecord?: Maybe<OrganizationLinkHistoryRecord>;
  /**  Update multiple OrganizationLinkHistoryRecord items by ID.  */
  updateOrganizationLinkHistoryRecords?: Maybe<Array<Maybe<OrganizationLinkHistoryRecord>>>;
  /**  Delete a single OrganizationLinkHistoryRecord item by ID.  */
  deleteOrganizationLinkHistoryRecord?: Maybe<OrganizationLinkHistoryRecord>;
  /**  Delete multiple OrganizationLinkHistoryRecord items by ID.  */
  deleteOrganizationLinkHistoryRecords?: Maybe<Array<Maybe<OrganizationLinkHistoryRecord>>>;
  /**  Create a single OrganizationLink item.  */
  createOrganizationLink?: Maybe<OrganizationLink>;
  /**  Create multiple OrganizationLink items.  */
  createOrganizationLinks?: Maybe<Array<Maybe<OrganizationLink>>>;
  /**  Update a single OrganizationLink item by ID.  */
  updateOrganizationLink?: Maybe<OrganizationLink>;
  /**  Update multiple OrganizationLink items by ID.  */
  updateOrganizationLinks?: Maybe<Array<Maybe<OrganizationLink>>>;
  /**  Delete a single OrganizationLink item by ID.  */
  deleteOrganizationLink?: Maybe<OrganizationLink>;
  /**  Delete multiple OrganizationLink items by ID.  */
  deleteOrganizationLinks?: Maybe<Array<Maybe<OrganizationLink>>>;
  /**  Create a single OrganizationEmployeeSpecializationHistoryRecord item.  */
  createOrganizationEmployeeSpecializationHistoryRecord?: Maybe<OrganizationEmployeeSpecializationHistoryRecord>;
  /**  Create multiple OrganizationEmployeeSpecializationHistoryRecord items.  */
  createOrganizationEmployeeSpecializationHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationHistoryRecord>>>;
  /**  Update a single OrganizationEmployeeSpecializationHistoryRecord item by ID.  */
  updateOrganizationEmployeeSpecializationHistoryRecord?: Maybe<OrganizationEmployeeSpecializationHistoryRecord>;
  /**  Update multiple OrganizationEmployeeSpecializationHistoryRecord items by ID.  */
  updateOrganizationEmployeeSpecializationHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationHistoryRecord>>>;
  /**  Delete a single OrganizationEmployeeSpecializationHistoryRecord item by ID.  */
  deleteOrganizationEmployeeSpecializationHistoryRecord?: Maybe<OrganizationEmployeeSpecializationHistoryRecord>;
  /**  Delete multiple OrganizationEmployeeSpecializationHistoryRecord items by ID.  */
  deleteOrganizationEmployeeSpecializationHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationHistoryRecord>>>;
  /**  Create a single OrganizationEmployeeSpecialization item.  */
  createOrganizationEmployeeSpecialization?: Maybe<OrganizationEmployeeSpecialization>;
  /**  Create multiple OrganizationEmployeeSpecialization items.  */
  createOrganizationEmployeeSpecializations?: Maybe<Array<Maybe<OrganizationEmployeeSpecialization>>>;
  /**  Update a single OrganizationEmployeeSpecialization item by ID.  */
  updateOrganizationEmployeeSpecialization?: Maybe<OrganizationEmployeeSpecialization>;
  /**  Update multiple OrganizationEmployeeSpecialization items by ID.  */
  updateOrganizationEmployeeSpecializations?: Maybe<Array<Maybe<OrganizationEmployeeSpecialization>>>;
  /**  Delete a single OrganizationEmployeeSpecialization item by ID.  */
  deleteOrganizationEmployeeSpecialization?: Maybe<OrganizationEmployeeSpecialization>;
  /**  Delete multiple OrganizationEmployeeSpecialization items by ID.  */
  deleteOrganizationEmployeeSpecializations?: Maybe<Array<Maybe<OrganizationEmployeeSpecialization>>>;
  /**  Create a single PropertyHistoryRecord item.  */
  createPropertyHistoryRecord?: Maybe<PropertyHistoryRecord>;
  /**  Create multiple PropertyHistoryRecord items.  */
  createPropertyHistoryRecords?: Maybe<Array<Maybe<PropertyHistoryRecord>>>;
  /**  Update a single PropertyHistoryRecord item by ID.  */
  updatePropertyHistoryRecord?: Maybe<PropertyHistoryRecord>;
  /**  Update multiple PropertyHistoryRecord items by ID.  */
  updatePropertyHistoryRecords?: Maybe<Array<Maybe<PropertyHistoryRecord>>>;
  /**  Delete a single PropertyHistoryRecord item by ID.  */
  deletePropertyHistoryRecord?: Maybe<PropertyHistoryRecord>;
  /**  Delete multiple PropertyHistoryRecord items by ID.  */
  deletePropertyHistoryRecords?: Maybe<Array<Maybe<PropertyHistoryRecord>>>;
  /**  Create a single Property item.  */
  createProperty?: Maybe<Property>;
  /**  Create multiple Property items.  */
  createProperties?: Maybe<Array<Maybe<Property>>>;
  /**  Update a single Property item by ID.  */
  updateProperty?: Maybe<Property>;
  /**  Update multiple Property items by ID.  */
  updateProperties?: Maybe<Array<Maybe<Property>>>;
  /**  Delete a single Property item by ID.  */
  deleteProperty?: Maybe<Property>;
  /**  Delete multiple Property items by ID.  */
  deleteProperties?: Maybe<Array<Maybe<Property>>>;
  /**  Create a single BillingIntegrationHistoryRecord item.  */
  createBillingIntegrationHistoryRecord?: Maybe<BillingIntegrationHistoryRecord>;
  /**  Create multiple BillingIntegrationHistoryRecord items.  */
  createBillingIntegrationHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationHistoryRecord>>>;
  /**  Update a single BillingIntegrationHistoryRecord item by ID.  */
  updateBillingIntegrationHistoryRecord?: Maybe<BillingIntegrationHistoryRecord>;
  /**  Update multiple BillingIntegrationHistoryRecord items by ID.  */
  updateBillingIntegrationHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationHistoryRecord>>>;
  /**  Delete a single BillingIntegrationHistoryRecord item by ID.  */
  deleteBillingIntegrationHistoryRecord?: Maybe<BillingIntegrationHistoryRecord>;
  /**  Delete multiple BillingIntegrationHistoryRecord items by ID.  */
  deleteBillingIntegrationHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationHistoryRecord>>>;
  /**  Create a single BillingIntegration item.  */
  createBillingIntegration?: Maybe<BillingIntegration>;
  /**  Create multiple BillingIntegration items.  */
  createBillingIntegrations?: Maybe<Array<Maybe<BillingIntegration>>>;
  /**  Update a single BillingIntegration item by ID.  */
  updateBillingIntegration?: Maybe<BillingIntegration>;
  /**  Update multiple BillingIntegration items by ID.  */
  updateBillingIntegrations?: Maybe<Array<Maybe<BillingIntegration>>>;
  /**  Delete a single BillingIntegration item by ID.  */
  deleteBillingIntegration?: Maybe<BillingIntegration>;
  /**  Delete multiple BillingIntegration items by ID.  */
  deleteBillingIntegrations?: Maybe<Array<Maybe<BillingIntegration>>>;
  /**  Create a single BillingIntegrationAccessRightHistoryRecord item.  */
  createBillingIntegrationAccessRightHistoryRecord?: Maybe<BillingIntegrationAccessRightHistoryRecord>;
  /**  Create multiple BillingIntegrationAccessRightHistoryRecord items.  */
  createBillingIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationAccessRightHistoryRecord>>>;
  /**  Update a single BillingIntegrationAccessRightHistoryRecord item by ID.  */
  updateBillingIntegrationAccessRightHistoryRecord?: Maybe<BillingIntegrationAccessRightHistoryRecord>;
  /**  Update multiple BillingIntegrationAccessRightHistoryRecord items by ID.  */
  updateBillingIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationAccessRightHistoryRecord>>>;
  /**  Delete a single BillingIntegrationAccessRightHistoryRecord item by ID.  */
  deleteBillingIntegrationAccessRightHistoryRecord?: Maybe<BillingIntegrationAccessRightHistoryRecord>;
  /**  Delete multiple BillingIntegrationAccessRightHistoryRecord items by ID.  */
  deleteBillingIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationAccessRightHistoryRecord>>>;
  /**  Create a single BillingIntegrationAccessRight item.  */
  createBillingIntegrationAccessRight?: Maybe<BillingIntegrationAccessRight>;
  /**  Create multiple BillingIntegrationAccessRight items.  */
  createBillingIntegrationAccessRights?: Maybe<Array<Maybe<BillingIntegrationAccessRight>>>;
  /**  Update a single BillingIntegrationAccessRight item by ID.  */
  updateBillingIntegrationAccessRight?: Maybe<BillingIntegrationAccessRight>;
  /**  Update multiple BillingIntegrationAccessRight items by ID.  */
  updateBillingIntegrationAccessRights?: Maybe<Array<Maybe<BillingIntegrationAccessRight>>>;
  /**  Delete a single BillingIntegrationAccessRight item by ID.  */
  deleteBillingIntegrationAccessRight?: Maybe<BillingIntegrationAccessRight>;
  /**  Delete multiple BillingIntegrationAccessRight items by ID.  */
  deleteBillingIntegrationAccessRights?: Maybe<Array<Maybe<BillingIntegrationAccessRight>>>;
  /**  Create a single BillingIntegrationOrganizationContextHistoryRecord item.  */
  createBillingIntegrationOrganizationContextHistoryRecord?: Maybe<BillingIntegrationOrganizationContextHistoryRecord>;
  /**  Create multiple BillingIntegrationOrganizationContextHistoryRecord items.  */
  createBillingIntegrationOrganizationContextHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextHistoryRecord>>>;
  /**  Update a single BillingIntegrationOrganizationContextHistoryRecord item by ID.  */
  updateBillingIntegrationOrganizationContextHistoryRecord?: Maybe<BillingIntegrationOrganizationContextHistoryRecord>;
  /**  Update multiple BillingIntegrationOrganizationContextHistoryRecord items by ID.  */
  updateBillingIntegrationOrganizationContextHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextHistoryRecord>>>;
  /**  Delete a single BillingIntegrationOrganizationContextHistoryRecord item by ID.  */
  deleteBillingIntegrationOrganizationContextHistoryRecord?: Maybe<BillingIntegrationOrganizationContextHistoryRecord>;
  /**  Delete multiple BillingIntegrationOrganizationContextHistoryRecord items by ID.  */
  deleteBillingIntegrationOrganizationContextHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextHistoryRecord>>>;
  /**  Create a single BillingIntegrationOrganizationContext item.  */
  createBillingIntegrationOrganizationContext?: Maybe<BillingIntegrationOrganizationContext>;
  /**  Create multiple BillingIntegrationOrganizationContext items.  */
  createBillingIntegrationOrganizationContexts?: Maybe<Array<Maybe<BillingIntegrationOrganizationContext>>>;
  /**  Update a single BillingIntegrationOrganizationContext item by ID.  */
  updateBillingIntegrationOrganizationContext?: Maybe<BillingIntegrationOrganizationContext>;
  /**  Update multiple BillingIntegrationOrganizationContext items by ID.  */
  updateBillingIntegrationOrganizationContexts?: Maybe<Array<Maybe<BillingIntegrationOrganizationContext>>>;
  /**  Delete a single BillingIntegrationOrganizationContext item by ID.  */
  deleteBillingIntegrationOrganizationContext?: Maybe<BillingIntegrationOrganizationContext>;
  /**  Delete multiple BillingIntegrationOrganizationContext items by ID.  */
  deleteBillingIntegrationOrganizationContexts?: Maybe<Array<Maybe<BillingIntegrationOrganizationContext>>>;
  /**  Create a single BillingIntegrationProblem item.  */
  createBillingIntegrationProblem?: Maybe<BillingIntegrationProblem>;
  /**  Create multiple BillingIntegrationProblem items.  */
  createBillingIntegrationProblems?: Maybe<Array<Maybe<BillingIntegrationProblem>>>;
  /**  Update a single BillingIntegrationProblem item by ID.  */
  updateBillingIntegrationProblem?: Maybe<BillingIntegrationProblem>;
  /**  Update multiple BillingIntegrationProblem items by ID.  */
  updateBillingIntegrationProblems?: Maybe<Array<Maybe<BillingIntegrationProblem>>>;
  /**  Delete a single BillingIntegrationProblem item by ID.  */
  deleteBillingIntegrationProblem?: Maybe<BillingIntegrationProblem>;
  /**  Delete multiple BillingIntegrationProblem items by ID.  */
  deleteBillingIntegrationProblems?: Maybe<Array<Maybe<BillingIntegrationProblem>>>;
  /**  Create a single BillingPropertyHistoryRecord item.  */
  createBillingPropertyHistoryRecord?: Maybe<BillingPropertyHistoryRecord>;
  /**  Create multiple BillingPropertyHistoryRecord items.  */
  createBillingPropertyHistoryRecords?: Maybe<Array<Maybe<BillingPropertyHistoryRecord>>>;
  /**  Update a single BillingPropertyHistoryRecord item by ID.  */
  updateBillingPropertyHistoryRecord?: Maybe<BillingPropertyHistoryRecord>;
  /**  Update multiple BillingPropertyHistoryRecord items by ID.  */
  updateBillingPropertyHistoryRecords?: Maybe<Array<Maybe<BillingPropertyHistoryRecord>>>;
  /**  Delete a single BillingPropertyHistoryRecord item by ID.  */
  deleteBillingPropertyHistoryRecord?: Maybe<BillingPropertyHistoryRecord>;
  /**  Delete multiple BillingPropertyHistoryRecord items by ID.  */
  deleteBillingPropertyHistoryRecords?: Maybe<Array<Maybe<BillingPropertyHistoryRecord>>>;
  /**  Create a single BillingProperty item.  */
  createBillingProperty?: Maybe<BillingProperty>;
  /**  Create multiple BillingProperty items.  */
  createBillingProperties?: Maybe<Array<Maybe<BillingProperty>>>;
  /**  Update a single BillingProperty item by ID.  */
  updateBillingProperty?: Maybe<BillingProperty>;
  /**  Update multiple BillingProperty items by ID.  */
  updateBillingProperties?: Maybe<Array<Maybe<BillingProperty>>>;
  /**  Delete a single BillingProperty item by ID.  */
  deleteBillingProperty?: Maybe<BillingProperty>;
  /**  Delete multiple BillingProperty items by ID.  */
  deleteBillingProperties?: Maybe<Array<Maybe<BillingProperty>>>;
  /**  Create a single BillingAccountHistoryRecord item.  */
  createBillingAccountHistoryRecord?: Maybe<BillingAccountHistoryRecord>;
  /**  Create multiple BillingAccountHistoryRecord items.  */
  createBillingAccountHistoryRecords?: Maybe<Array<Maybe<BillingAccountHistoryRecord>>>;
  /**  Update a single BillingAccountHistoryRecord item by ID.  */
  updateBillingAccountHistoryRecord?: Maybe<BillingAccountHistoryRecord>;
  /**  Update multiple BillingAccountHistoryRecord items by ID.  */
  updateBillingAccountHistoryRecords?: Maybe<Array<Maybe<BillingAccountHistoryRecord>>>;
  /**  Delete a single BillingAccountHistoryRecord item by ID.  */
  deleteBillingAccountHistoryRecord?: Maybe<BillingAccountHistoryRecord>;
  /**  Delete multiple BillingAccountHistoryRecord items by ID.  */
  deleteBillingAccountHistoryRecords?: Maybe<Array<Maybe<BillingAccountHistoryRecord>>>;
  /**  Create a single BillingAccount item.  */
  createBillingAccount?: Maybe<BillingAccount>;
  /**  Create multiple BillingAccount items.  */
  createBillingAccounts?: Maybe<Array<Maybe<BillingAccount>>>;
  /**  Update a single BillingAccount item by ID.  */
  updateBillingAccount?: Maybe<BillingAccount>;
  /**  Update multiple BillingAccount items by ID.  */
  updateBillingAccounts?: Maybe<Array<Maybe<BillingAccount>>>;
  /**  Delete a single BillingAccount item by ID.  */
  deleteBillingAccount?: Maybe<BillingAccount>;
  /**  Delete multiple BillingAccount items by ID.  */
  deleteBillingAccounts?: Maybe<Array<Maybe<BillingAccount>>>;
  /**  Create a single BillingReceiptHistoryRecord item.  */
  createBillingReceiptHistoryRecord?: Maybe<BillingReceiptHistoryRecord>;
  /**  Create multiple BillingReceiptHistoryRecord items.  */
  createBillingReceiptHistoryRecords?: Maybe<Array<Maybe<BillingReceiptHistoryRecord>>>;
  /**  Update a single BillingReceiptHistoryRecord item by ID.  */
  updateBillingReceiptHistoryRecord?: Maybe<BillingReceiptHistoryRecord>;
  /**  Update multiple BillingReceiptHistoryRecord items by ID.  */
  updateBillingReceiptHistoryRecords?: Maybe<Array<Maybe<BillingReceiptHistoryRecord>>>;
  /**  Delete a single BillingReceiptHistoryRecord item by ID.  */
  deleteBillingReceiptHistoryRecord?: Maybe<BillingReceiptHistoryRecord>;
  /**  Delete multiple BillingReceiptHistoryRecord items by ID.  */
  deleteBillingReceiptHistoryRecords?: Maybe<Array<Maybe<BillingReceiptHistoryRecord>>>;
  /**  Create a single BillingReceipt item.  */
  createBillingReceipt?: Maybe<BillingReceipt>;
  /**  Create multiple BillingReceipt items.  */
  createBillingReceipts?: Maybe<Array<Maybe<BillingReceipt>>>;
  /**  Update a single BillingReceipt item by ID.  */
  updateBillingReceipt?: Maybe<BillingReceipt>;
  /**  Update multiple BillingReceipt items by ID.  */
  updateBillingReceipts?: Maybe<Array<Maybe<BillingReceipt>>>;
  /**  Delete a single BillingReceipt item by ID.  */
  deleteBillingReceipt?: Maybe<BillingReceipt>;
  /**  Delete multiple BillingReceipt items by ID.  */
  deleteBillingReceipts?: Maybe<Array<Maybe<BillingReceipt>>>;
  /**  Create a single BillingRecipientHistoryRecord item.  */
  createBillingRecipientHistoryRecord?: Maybe<BillingRecipientHistoryRecord>;
  /**  Create multiple BillingRecipientHistoryRecord items.  */
  createBillingRecipientHistoryRecords?: Maybe<Array<Maybe<BillingRecipientHistoryRecord>>>;
  /**  Update a single BillingRecipientHistoryRecord item by ID.  */
  updateBillingRecipientHistoryRecord?: Maybe<BillingRecipientHistoryRecord>;
  /**  Update multiple BillingRecipientHistoryRecord items by ID.  */
  updateBillingRecipientHistoryRecords?: Maybe<Array<Maybe<BillingRecipientHistoryRecord>>>;
  /**  Delete a single BillingRecipientHistoryRecord item by ID.  */
  deleteBillingRecipientHistoryRecord?: Maybe<BillingRecipientHistoryRecord>;
  /**  Delete multiple BillingRecipientHistoryRecord items by ID.  */
  deleteBillingRecipientHistoryRecords?: Maybe<Array<Maybe<BillingRecipientHistoryRecord>>>;
  /**  Create a single BillingRecipient item.  */
  createBillingRecipient?: Maybe<BillingRecipient>;
  /**  Create multiple BillingRecipient items.  */
  createBillingRecipients?: Maybe<Array<Maybe<BillingRecipient>>>;
  /**  Update a single BillingRecipient item by ID.  */
  updateBillingRecipient?: Maybe<BillingRecipient>;
  /**  Update multiple BillingRecipient items by ID.  */
  updateBillingRecipients?: Maybe<Array<Maybe<BillingRecipient>>>;
  /**  Delete a single BillingRecipient item by ID.  */
  deleteBillingRecipient?: Maybe<BillingRecipient>;
  /**  Delete multiple BillingRecipient items by ID.  */
  deleteBillingRecipients?: Maybe<Array<Maybe<BillingRecipient>>>;
  /**  Create a single BillingCategoryHistoryRecord item.  */
  createBillingCategoryHistoryRecord?: Maybe<BillingCategoryHistoryRecord>;
  /**  Create multiple BillingCategoryHistoryRecord items.  */
  createBillingCategoryHistoryRecords?: Maybe<Array<Maybe<BillingCategoryHistoryRecord>>>;
  /**  Update a single BillingCategoryHistoryRecord item by ID.  */
  updateBillingCategoryHistoryRecord?: Maybe<BillingCategoryHistoryRecord>;
  /**  Update multiple BillingCategoryHistoryRecord items by ID.  */
  updateBillingCategoryHistoryRecords?: Maybe<Array<Maybe<BillingCategoryHistoryRecord>>>;
  /**  Delete a single BillingCategoryHistoryRecord item by ID.  */
  deleteBillingCategoryHistoryRecord?: Maybe<BillingCategoryHistoryRecord>;
  /**  Delete multiple BillingCategoryHistoryRecord items by ID.  */
  deleteBillingCategoryHistoryRecords?: Maybe<Array<Maybe<BillingCategoryHistoryRecord>>>;
  /**  Create a single BillingCategory item.  */
  createBillingCategory?: Maybe<BillingCategory>;
  /**  Create multiple BillingCategory items.  */
  createBillingCategories?: Maybe<Array<Maybe<BillingCategory>>>;
  /**  Update a single BillingCategory item by ID.  */
  updateBillingCategory?: Maybe<BillingCategory>;
  /**  Update multiple BillingCategory items by ID.  */
  updateBillingCategories?: Maybe<Array<Maybe<BillingCategory>>>;
  /**  Delete a single BillingCategory item by ID.  */
  deleteBillingCategory?: Maybe<BillingCategory>;
  /**  Delete multiple BillingCategory items by ID.  */
  deleteBillingCategories?: Maybe<Array<Maybe<BillingCategory>>>;
  /**  Create a single BankAccountHistoryRecord item.  */
  createBankAccountHistoryRecord?: Maybe<BankAccountHistoryRecord>;
  /**  Create multiple BankAccountHistoryRecord items.  */
  createBankAccountHistoryRecords?: Maybe<Array<Maybe<BankAccountHistoryRecord>>>;
  /**  Update a single BankAccountHistoryRecord item by ID.  */
  updateBankAccountHistoryRecord?: Maybe<BankAccountHistoryRecord>;
  /**  Update multiple BankAccountHistoryRecord items by ID.  */
  updateBankAccountHistoryRecords?: Maybe<Array<Maybe<BankAccountHistoryRecord>>>;
  /**  Delete a single BankAccountHistoryRecord item by ID.  */
  deleteBankAccountHistoryRecord?: Maybe<BankAccountHistoryRecord>;
  /**  Delete multiple BankAccountHistoryRecord items by ID.  */
  deleteBankAccountHistoryRecords?: Maybe<Array<Maybe<BankAccountHistoryRecord>>>;
  /**  Create a single BankAccount item.  */
  createBankAccount?: Maybe<BankAccount>;
  /**  Create multiple BankAccount items.  */
  createBankAccounts?: Maybe<Array<Maybe<BankAccount>>>;
  /**  Update a single BankAccount item by ID.  */
  updateBankAccount?: Maybe<BankAccount>;
  /**  Update multiple BankAccount items by ID.  */
  updateBankAccounts?: Maybe<Array<Maybe<BankAccount>>>;
  /**  Delete a single BankAccount item by ID.  */
  deleteBankAccount?: Maybe<BankAccount>;
  /**  Delete multiple BankAccount items by ID.  */
  deleteBankAccounts?: Maybe<Array<Maybe<BankAccount>>>;
  /**  Create a single BankCategoryHistoryRecord item.  */
  createBankCategoryHistoryRecord?: Maybe<BankCategoryHistoryRecord>;
  /**  Create multiple BankCategoryHistoryRecord items.  */
  createBankCategoryHistoryRecords?: Maybe<Array<Maybe<BankCategoryHistoryRecord>>>;
  /**  Update a single BankCategoryHistoryRecord item by ID.  */
  updateBankCategoryHistoryRecord?: Maybe<BankCategoryHistoryRecord>;
  /**  Update multiple BankCategoryHistoryRecord items by ID.  */
  updateBankCategoryHistoryRecords?: Maybe<Array<Maybe<BankCategoryHistoryRecord>>>;
  /**  Delete a single BankCategoryHistoryRecord item by ID.  */
  deleteBankCategoryHistoryRecord?: Maybe<BankCategoryHistoryRecord>;
  /**  Delete multiple BankCategoryHistoryRecord items by ID.  */
  deleteBankCategoryHistoryRecords?: Maybe<Array<Maybe<BankCategoryHistoryRecord>>>;
  /**  Create a single BankCategory item.  */
  createBankCategory?: Maybe<BankCategory>;
  /**  Create multiple BankCategory items.  */
  createBankCategories?: Maybe<Array<Maybe<BankCategory>>>;
  /**  Update a single BankCategory item by ID.  */
  updateBankCategory?: Maybe<BankCategory>;
  /**  Update multiple BankCategory items by ID.  */
  updateBankCategories?: Maybe<Array<Maybe<BankCategory>>>;
  /**  Delete a single BankCategory item by ID.  */
  deleteBankCategory?: Maybe<BankCategory>;
  /**  Delete multiple BankCategory items by ID.  */
  deleteBankCategories?: Maybe<Array<Maybe<BankCategory>>>;
  /**  Create a single BankCostItemHistoryRecord item.  */
  createBankCostItemHistoryRecord?: Maybe<BankCostItemHistoryRecord>;
  /**  Create multiple BankCostItemHistoryRecord items.  */
  createBankCostItemHistoryRecords?: Maybe<Array<Maybe<BankCostItemHistoryRecord>>>;
  /**  Update a single BankCostItemHistoryRecord item by ID.  */
  updateBankCostItemHistoryRecord?: Maybe<BankCostItemHistoryRecord>;
  /**  Update multiple BankCostItemHistoryRecord items by ID.  */
  updateBankCostItemHistoryRecords?: Maybe<Array<Maybe<BankCostItemHistoryRecord>>>;
  /**  Delete a single BankCostItemHistoryRecord item by ID.  */
  deleteBankCostItemHistoryRecord?: Maybe<BankCostItemHistoryRecord>;
  /**  Delete multiple BankCostItemHistoryRecord items by ID.  */
  deleteBankCostItemHistoryRecords?: Maybe<Array<Maybe<BankCostItemHistoryRecord>>>;
  /**  Create a single BankCostItem item.  */
  createBankCostItem?: Maybe<BankCostItem>;
  /**  Create multiple BankCostItem items.  */
  createBankCostItems?: Maybe<Array<Maybe<BankCostItem>>>;
  /**  Update a single BankCostItem item by ID.  */
  updateBankCostItem?: Maybe<BankCostItem>;
  /**  Update multiple BankCostItem items by ID.  */
  updateBankCostItems?: Maybe<Array<Maybe<BankCostItem>>>;
  /**  Delete a single BankCostItem item by ID.  */
  deleteBankCostItem?: Maybe<BankCostItem>;
  /**  Delete multiple BankCostItem items by ID.  */
  deleteBankCostItems?: Maybe<Array<Maybe<BankCostItem>>>;
  /**  Create a single BankContractorAccountHistoryRecord item.  */
  createBankContractorAccountHistoryRecord?: Maybe<BankContractorAccountHistoryRecord>;
  /**  Create multiple BankContractorAccountHistoryRecord items.  */
  createBankContractorAccountHistoryRecords?: Maybe<Array<Maybe<BankContractorAccountHistoryRecord>>>;
  /**  Update a single BankContractorAccountHistoryRecord item by ID.  */
  updateBankContractorAccountHistoryRecord?: Maybe<BankContractorAccountHistoryRecord>;
  /**  Update multiple BankContractorAccountHistoryRecord items by ID.  */
  updateBankContractorAccountHistoryRecords?: Maybe<Array<Maybe<BankContractorAccountHistoryRecord>>>;
  /**  Delete a single BankContractorAccountHistoryRecord item by ID.  */
  deleteBankContractorAccountHistoryRecord?: Maybe<BankContractorAccountHistoryRecord>;
  /**  Delete multiple BankContractorAccountHistoryRecord items by ID.  */
  deleteBankContractorAccountHistoryRecords?: Maybe<Array<Maybe<BankContractorAccountHistoryRecord>>>;
  /**  Create a single BankContractorAccount item.  */
  createBankContractorAccount?: Maybe<BankContractorAccount>;
  /**  Create multiple BankContractorAccount items.  */
  createBankContractorAccounts?: Maybe<Array<Maybe<BankContractorAccount>>>;
  /**  Update a single BankContractorAccount item by ID.  */
  updateBankContractorAccount?: Maybe<BankContractorAccount>;
  /**  Update multiple BankContractorAccount items by ID.  */
  updateBankContractorAccounts?: Maybe<Array<Maybe<BankContractorAccount>>>;
  /**  Delete a single BankContractorAccount item by ID.  */
  deleteBankContractorAccount?: Maybe<BankContractorAccount>;
  /**  Delete multiple BankContractorAccount items by ID.  */
  deleteBankContractorAccounts?: Maybe<Array<Maybe<BankContractorAccount>>>;
  /**  Create a single BankIntegrationHistoryRecord item.  */
  createBankIntegrationHistoryRecord?: Maybe<BankIntegrationHistoryRecord>;
  /**  Create multiple BankIntegrationHistoryRecord items.  */
  createBankIntegrationHistoryRecords?: Maybe<Array<Maybe<BankIntegrationHistoryRecord>>>;
  /**  Update a single BankIntegrationHistoryRecord item by ID.  */
  updateBankIntegrationHistoryRecord?: Maybe<BankIntegrationHistoryRecord>;
  /**  Update multiple BankIntegrationHistoryRecord items by ID.  */
  updateBankIntegrationHistoryRecords?: Maybe<Array<Maybe<BankIntegrationHistoryRecord>>>;
  /**  Delete a single BankIntegrationHistoryRecord item by ID.  */
  deleteBankIntegrationHistoryRecord?: Maybe<BankIntegrationHistoryRecord>;
  /**  Delete multiple BankIntegrationHistoryRecord items by ID.  */
  deleteBankIntegrationHistoryRecords?: Maybe<Array<Maybe<BankIntegrationHistoryRecord>>>;
  /**  Create a single BankIntegration item.  */
  createBankIntegration?: Maybe<BankIntegration>;
  /**  Create multiple BankIntegration items.  */
  createBankIntegrations?: Maybe<Array<Maybe<BankIntegration>>>;
  /**  Update a single BankIntegration item by ID.  */
  updateBankIntegration?: Maybe<BankIntegration>;
  /**  Update multiple BankIntegration items by ID.  */
  updateBankIntegrations?: Maybe<Array<Maybe<BankIntegration>>>;
  /**  Delete a single BankIntegration item by ID.  */
  deleteBankIntegration?: Maybe<BankIntegration>;
  /**  Delete multiple BankIntegration items by ID.  */
  deleteBankIntegrations?: Maybe<Array<Maybe<BankIntegration>>>;
  /**  Create a single BankIntegrationAccessRightHistoryRecord item.  */
  createBankIntegrationAccessRightHistoryRecord?: Maybe<BankIntegrationAccessRightHistoryRecord>;
  /**  Create multiple BankIntegrationAccessRightHistoryRecord items.  */
  createBankIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<BankIntegrationAccessRightHistoryRecord>>>;
  /**  Update a single BankIntegrationAccessRightHistoryRecord item by ID.  */
  updateBankIntegrationAccessRightHistoryRecord?: Maybe<BankIntegrationAccessRightHistoryRecord>;
  /**  Update multiple BankIntegrationAccessRightHistoryRecord items by ID.  */
  updateBankIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<BankIntegrationAccessRightHistoryRecord>>>;
  /**  Delete a single BankIntegrationAccessRightHistoryRecord item by ID.  */
  deleteBankIntegrationAccessRightHistoryRecord?: Maybe<BankIntegrationAccessRightHistoryRecord>;
  /**  Delete multiple BankIntegrationAccessRightHistoryRecord items by ID.  */
  deleteBankIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<BankIntegrationAccessRightHistoryRecord>>>;
  /**  Create a single BankIntegrationAccessRight item.  */
  createBankIntegrationAccessRight?: Maybe<BankIntegrationAccessRight>;
  /**  Create multiple BankIntegrationAccessRight items.  */
  createBankIntegrationAccessRights?: Maybe<Array<Maybe<BankIntegrationAccessRight>>>;
  /**  Update a single BankIntegrationAccessRight item by ID.  */
  updateBankIntegrationAccessRight?: Maybe<BankIntegrationAccessRight>;
  /**  Update multiple BankIntegrationAccessRight items by ID.  */
  updateBankIntegrationAccessRights?: Maybe<Array<Maybe<BankIntegrationAccessRight>>>;
  /**  Delete a single BankIntegrationAccessRight item by ID.  */
  deleteBankIntegrationAccessRight?: Maybe<BankIntegrationAccessRight>;
  /**  Delete multiple BankIntegrationAccessRight items by ID.  */
  deleteBankIntegrationAccessRights?: Maybe<Array<Maybe<BankIntegrationAccessRight>>>;
  /**  Create a single BankIntegrationAccountContextHistoryRecord item.  */
  createBankIntegrationAccountContextHistoryRecord?: Maybe<BankIntegrationAccountContextHistoryRecord>;
  /**  Create multiple BankIntegrationAccountContextHistoryRecord items.  */
  createBankIntegrationAccountContextHistoryRecords?: Maybe<Array<Maybe<BankIntegrationAccountContextHistoryRecord>>>;
  /**  Update a single BankIntegrationAccountContextHistoryRecord item by ID.  */
  updateBankIntegrationAccountContextHistoryRecord?: Maybe<BankIntegrationAccountContextHistoryRecord>;
  /**  Update multiple BankIntegrationAccountContextHistoryRecord items by ID.  */
  updateBankIntegrationAccountContextHistoryRecords?: Maybe<Array<Maybe<BankIntegrationAccountContextHistoryRecord>>>;
  /**  Delete a single BankIntegrationAccountContextHistoryRecord item by ID.  */
  deleteBankIntegrationAccountContextHistoryRecord?: Maybe<BankIntegrationAccountContextHistoryRecord>;
  /**  Delete multiple BankIntegrationAccountContextHistoryRecord items by ID.  */
  deleteBankIntegrationAccountContextHistoryRecords?: Maybe<Array<Maybe<BankIntegrationAccountContextHistoryRecord>>>;
  /**  Create a single BankIntegrationAccountContext item.  */
  createBankIntegrationAccountContext?: Maybe<BankIntegrationAccountContext>;
  /**  Create multiple BankIntegrationAccountContext items.  */
  createBankIntegrationAccountContexts?: Maybe<Array<Maybe<BankIntegrationAccountContext>>>;
  /**  Update a single BankIntegrationAccountContext item by ID.  */
  updateBankIntegrationAccountContext?: Maybe<BankIntegrationAccountContext>;
  /**  Update multiple BankIntegrationAccountContext items by ID.  */
  updateBankIntegrationAccountContexts?: Maybe<Array<Maybe<BankIntegrationAccountContext>>>;
  /**  Delete a single BankIntegrationAccountContext item by ID.  */
  deleteBankIntegrationAccountContext?: Maybe<BankIntegrationAccountContext>;
  /**  Delete multiple BankIntegrationAccountContext items by ID.  */
  deleteBankIntegrationAccountContexts?: Maybe<Array<Maybe<BankIntegrationAccountContext>>>;
  /**  Create a single BankTransactionHistoryRecord item.  */
  createBankTransactionHistoryRecord?: Maybe<BankTransactionHistoryRecord>;
  /**  Create multiple BankTransactionHistoryRecord items.  */
  createBankTransactionHistoryRecords?: Maybe<Array<Maybe<BankTransactionHistoryRecord>>>;
  /**  Update a single BankTransactionHistoryRecord item by ID.  */
  updateBankTransactionHistoryRecord?: Maybe<BankTransactionHistoryRecord>;
  /**  Update multiple BankTransactionHistoryRecord items by ID.  */
  updateBankTransactionHistoryRecords?: Maybe<Array<Maybe<BankTransactionHistoryRecord>>>;
  /**  Delete a single BankTransactionHistoryRecord item by ID.  */
  deleteBankTransactionHistoryRecord?: Maybe<BankTransactionHistoryRecord>;
  /**  Delete multiple BankTransactionHistoryRecord items by ID.  */
  deleteBankTransactionHistoryRecords?: Maybe<Array<Maybe<BankTransactionHistoryRecord>>>;
  /**  Create a single BankTransaction item.  */
  createBankTransaction?: Maybe<BankTransaction>;
  /**  Create multiple BankTransaction items.  */
  createBankTransactions?: Maybe<Array<Maybe<BankTransaction>>>;
  /**  Update a single BankTransaction item by ID.  */
  updateBankTransaction?: Maybe<BankTransaction>;
  /**  Update multiple BankTransaction items by ID.  */
  updateBankTransactions?: Maybe<Array<Maybe<BankTransaction>>>;
  /**  Delete a single BankTransaction item by ID.  */
  deleteBankTransaction?: Maybe<BankTransaction>;
  /**  Delete multiple BankTransaction items by ID.  */
  deleteBankTransactions?: Maybe<Array<Maybe<BankTransaction>>>;
  /**  Create a single BankSyncTaskHistoryRecord item.  */
  createBankSyncTaskHistoryRecord?: Maybe<BankSyncTaskHistoryRecord>;
  /**  Create multiple BankSyncTaskHistoryRecord items.  */
  createBankSyncTaskHistoryRecords?: Maybe<Array<Maybe<BankSyncTaskHistoryRecord>>>;
  /**  Update a single BankSyncTaskHistoryRecord item by ID.  */
  updateBankSyncTaskHistoryRecord?: Maybe<BankSyncTaskHistoryRecord>;
  /**  Update multiple BankSyncTaskHistoryRecord items by ID.  */
  updateBankSyncTaskHistoryRecords?: Maybe<Array<Maybe<BankSyncTaskHistoryRecord>>>;
  /**  Delete a single BankSyncTaskHistoryRecord item by ID.  */
  deleteBankSyncTaskHistoryRecord?: Maybe<BankSyncTaskHistoryRecord>;
  /**  Delete multiple BankSyncTaskHistoryRecord items by ID.  */
  deleteBankSyncTaskHistoryRecords?: Maybe<Array<Maybe<BankSyncTaskHistoryRecord>>>;
  /**  Create a single BankSyncTask item.  */
  createBankSyncTask?: Maybe<BankSyncTask>;
  /**  Create multiple BankSyncTask items.  */
  createBankSyncTasks?: Maybe<Array<Maybe<BankSyncTask>>>;
  /**  Update a single BankSyncTask item by ID.  */
  updateBankSyncTask?: Maybe<BankSyncTask>;
  /**  Update multiple BankSyncTask items by ID.  */
  updateBankSyncTasks?: Maybe<Array<Maybe<BankSyncTask>>>;
  /**  Delete a single BankSyncTask item by ID.  */
  deleteBankSyncTask?: Maybe<BankSyncTask>;
  /**  Delete multiple BankSyncTask items by ID.  */
  deleteBankSyncTasks?: Maybe<Array<Maybe<BankSyncTask>>>;
  /**  Create a single BankIntegrationOrganizationContextHistoryRecord item.  */
  createBankIntegrationOrganizationContextHistoryRecord?: Maybe<BankIntegrationOrganizationContextHistoryRecord>;
  /**  Create multiple BankIntegrationOrganizationContextHistoryRecord items.  */
  createBankIntegrationOrganizationContextHistoryRecords?: Maybe<Array<Maybe<BankIntegrationOrganizationContextHistoryRecord>>>;
  /**  Update a single BankIntegrationOrganizationContextHistoryRecord item by ID.  */
  updateBankIntegrationOrganizationContextHistoryRecord?: Maybe<BankIntegrationOrganizationContextHistoryRecord>;
  /**  Update multiple BankIntegrationOrganizationContextHistoryRecord items by ID.  */
  updateBankIntegrationOrganizationContextHistoryRecords?: Maybe<Array<Maybe<BankIntegrationOrganizationContextHistoryRecord>>>;
  /**  Delete a single BankIntegrationOrganizationContextHistoryRecord item by ID.  */
  deleteBankIntegrationOrganizationContextHistoryRecord?: Maybe<BankIntegrationOrganizationContextHistoryRecord>;
  /**  Delete multiple BankIntegrationOrganizationContextHistoryRecord items by ID.  */
  deleteBankIntegrationOrganizationContextHistoryRecords?: Maybe<Array<Maybe<BankIntegrationOrganizationContextHistoryRecord>>>;
  /**  Create a single BankIntegrationOrganizationContext item.  */
  createBankIntegrationOrganizationContext?: Maybe<BankIntegrationOrganizationContext>;
  /**  Create multiple BankIntegrationOrganizationContext items.  */
  createBankIntegrationOrganizationContexts?: Maybe<Array<Maybe<BankIntegrationOrganizationContext>>>;
  /**  Update a single BankIntegrationOrganizationContext item by ID.  */
  updateBankIntegrationOrganizationContext?: Maybe<BankIntegrationOrganizationContext>;
  /**  Update multiple BankIntegrationOrganizationContext items by ID.  */
  updateBankIntegrationOrganizationContexts?: Maybe<Array<Maybe<BankIntegrationOrganizationContext>>>;
  /**  Delete a single BankIntegrationOrganizationContext item by ID.  */
  deleteBankIntegrationOrganizationContext?: Maybe<BankIntegrationOrganizationContext>;
  /**  Delete multiple BankIntegrationOrganizationContext items by ID.  */
  deleteBankIntegrationOrganizationContexts?: Maybe<Array<Maybe<BankIntegrationOrganizationContext>>>;
  /**  Create a single BankAccountReportHistoryRecord item.  */
  createBankAccountReportHistoryRecord?: Maybe<BankAccountReportHistoryRecord>;
  /**  Create multiple BankAccountReportHistoryRecord items.  */
  createBankAccountReportHistoryRecords?: Maybe<Array<Maybe<BankAccountReportHistoryRecord>>>;
  /**  Update a single BankAccountReportHistoryRecord item by ID.  */
  updateBankAccountReportHistoryRecord?: Maybe<BankAccountReportHistoryRecord>;
  /**  Update multiple BankAccountReportHistoryRecord items by ID.  */
  updateBankAccountReportHistoryRecords?: Maybe<Array<Maybe<BankAccountReportHistoryRecord>>>;
  /**  Delete a single BankAccountReportHistoryRecord item by ID.  */
  deleteBankAccountReportHistoryRecord?: Maybe<BankAccountReportHistoryRecord>;
  /**  Delete multiple BankAccountReportHistoryRecord items by ID.  */
  deleteBankAccountReportHistoryRecords?: Maybe<Array<Maybe<BankAccountReportHistoryRecord>>>;
  /**  Create a single BankAccountReport item.  */
  createBankAccountReport?: Maybe<BankAccountReport>;
  /**  Create multiple BankAccountReport items.  */
  createBankAccountReports?: Maybe<Array<Maybe<BankAccountReport>>>;
  /**  Update a single BankAccountReport item by ID.  */
  updateBankAccountReport?: Maybe<BankAccountReport>;
  /**  Update multiple BankAccountReport items by ID.  */
  updateBankAccountReports?: Maybe<Array<Maybe<BankAccountReport>>>;
  /**  Delete a single BankAccountReport item by ID.  */
  deleteBankAccountReport?: Maybe<BankAccountReport>;
  /**  Delete multiple BankAccountReport items by ID.  */
  deleteBankAccountReports?: Maybe<Array<Maybe<BankAccountReport>>>;
  /**  Create a single BankAccountReportTaskHistoryRecord item.  */
  createBankAccountReportTaskHistoryRecord?: Maybe<BankAccountReportTaskHistoryRecord>;
  /**  Create multiple BankAccountReportTaskHistoryRecord items.  */
  createBankAccountReportTaskHistoryRecords?: Maybe<Array<Maybe<BankAccountReportTaskHistoryRecord>>>;
  /**  Update a single BankAccountReportTaskHistoryRecord item by ID.  */
  updateBankAccountReportTaskHistoryRecord?: Maybe<BankAccountReportTaskHistoryRecord>;
  /**  Update multiple BankAccountReportTaskHistoryRecord items by ID.  */
  updateBankAccountReportTaskHistoryRecords?: Maybe<Array<Maybe<BankAccountReportTaskHistoryRecord>>>;
  /**  Delete a single BankAccountReportTaskHistoryRecord item by ID.  */
  deleteBankAccountReportTaskHistoryRecord?: Maybe<BankAccountReportTaskHistoryRecord>;
  /**  Delete multiple BankAccountReportTaskHistoryRecord items by ID.  */
  deleteBankAccountReportTaskHistoryRecords?: Maybe<Array<Maybe<BankAccountReportTaskHistoryRecord>>>;
  /**  Create a single BankAccountReportTask item.  */
  createBankAccountReportTask?: Maybe<BankAccountReportTask>;
  /**  Create multiple BankAccountReportTask items.  */
  createBankAccountReportTasks?: Maybe<Array<Maybe<BankAccountReportTask>>>;
  /**  Update a single BankAccountReportTask item by ID.  */
  updateBankAccountReportTask?: Maybe<BankAccountReportTask>;
  /**  Update multiple BankAccountReportTask items by ID.  */
  updateBankAccountReportTasks?: Maybe<Array<Maybe<BankAccountReportTask>>>;
  /**  Delete a single BankAccountReportTask item by ID.  */
  deleteBankAccountReportTask?: Maybe<BankAccountReportTask>;
  /**  Delete multiple BankAccountReportTask items by ID.  */
  deleteBankAccountReportTasks?: Maybe<Array<Maybe<BankAccountReportTask>>>;
  /**  Create a single TicketHistoryRecord item.  */
  createTicketHistoryRecord?: Maybe<TicketHistoryRecord>;
  /**  Create multiple TicketHistoryRecord items.  */
  createTicketHistoryRecords?: Maybe<Array<Maybe<TicketHistoryRecord>>>;
  /**  Update a single TicketHistoryRecord item by ID.  */
  updateTicketHistoryRecord?: Maybe<TicketHistoryRecord>;
  /**  Update multiple TicketHistoryRecord items by ID.  */
  updateTicketHistoryRecords?: Maybe<Array<Maybe<TicketHistoryRecord>>>;
  /**  Delete a single TicketHistoryRecord item by ID.  */
  deleteTicketHistoryRecord?: Maybe<TicketHistoryRecord>;
  /**  Delete multiple TicketHistoryRecord items by ID.  */
  deleteTicketHistoryRecords?: Maybe<Array<Maybe<TicketHistoryRecord>>>;
  /**  Create a single Ticket item.  */
  createTicket?: Maybe<Ticket>;
  /**  Create multiple Ticket items.  */
  createTickets?: Maybe<Array<Maybe<Ticket>>>;
  /**  Update a single Ticket item by ID.  */
  updateTicket?: Maybe<Ticket>;
  /**  Update multiple Ticket items by ID.  */
  updateTickets?: Maybe<Array<Maybe<Ticket>>>;
  /**  Delete a single Ticket item by ID.  */
  deleteTicket?: Maybe<Ticket>;
  /**  Delete multiple Ticket items by ID.  */
  deleteTickets?: Maybe<Array<Maybe<Ticket>>>;
  /**  Create a single TicketSourceHistoryRecord item.  */
  createTicketSourceHistoryRecord?: Maybe<TicketSourceHistoryRecord>;
  /**  Create multiple TicketSourceHistoryRecord items.  */
  createTicketSourceHistoryRecords?: Maybe<Array<Maybe<TicketSourceHistoryRecord>>>;
  /**  Update a single TicketSourceHistoryRecord item by ID.  */
  updateTicketSourceHistoryRecord?: Maybe<TicketSourceHistoryRecord>;
  /**  Update multiple TicketSourceHistoryRecord items by ID.  */
  updateTicketSourceHistoryRecords?: Maybe<Array<Maybe<TicketSourceHistoryRecord>>>;
  /**  Delete a single TicketSourceHistoryRecord item by ID.  */
  deleteTicketSourceHistoryRecord?: Maybe<TicketSourceHistoryRecord>;
  /**  Delete multiple TicketSourceHistoryRecord items by ID.  */
  deleteTicketSourceHistoryRecords?: Maybe<Array<Maybe<TicketSourceHistoryRecord>>>;
  /**  Create a single TicketSource item.  */
  createTicketSource?: Maybe<TicketSource>;
  /**  Create multiple TicketSource items.  */
  createTicketSources?: Maybe<Array<Maybe<TicketSource>>>;
  /**  Update a single TicketSource item by ID.  */
  updateTicketSource?: Maybe<TicketSource>;
  /**  Update multiple TicketSource items by ID.  */
  updateTicketSources?: Maybe<Array<Maybe<TicketSource>>>;
  /**  Delete a single TicketSource item by ID.  */
  deleteTicketSource?: Maybe<TicketSource>;
  /**  Delete multiple TicketSource items by ID.  */
  deleteTicketSources?: Maybe<Array<Maybe<TicketSource>>>;
  /**  Create a single TicketStatusHistoryRecord item.  */
  createTicketStatusHistoryRecord?: Maybe<TicketStatusHistoryRecord>;
  /**  Create multiple TicketStatusHistoryRecord items.  */
  createTicketStatusHistoryRecords?: Maybe<Array<Maybe<TicketStatusHistoryRecord>>>;
  /**  Update a single TicketStatusHistoryRecord item by ID.  */
  updateTicketStatusHistoryRecord?: Maybe<TicketStatusHistoryRecord>;
  /**  Update multiple TicketStatusHistoryRecord items by ID.  */
  updateTicketStatusHistoryRecords?: Maybe<Array<Maybe<TicketStatusHistoryRecord>>>;
  /**  Delete a single TicketStatusHistoryRecord item by ID.  */
  deleteTicketStatusHistoryRecord?: Maybe<TicketStatusHistoryRecord>;
  /**  Delete multiple TicketStatusHistoryRecord items by ID.  */
  deleteTicketStatusHistoryRecords?: Maybe<Array<Maybe<TicketStatusHistoryRecord>>>;
  /**  Create a single TicketStatus item.  */
  createTicketStatus?: Maybe<TicketStatus>;
  /**  Create multiple TicketStatus items.  */
  createTicketStatuses?: Maybe<Array<Maybe<TicketStatus>>>;
  /**  Update a single TicketStatus item by ID.  */
  updateTicketStatus?: Maybe<TicketStatus>;
  /**  Update multiple TicketStatus items by ID.  */
  updateTicketStatuses?: Maybe<Array<Maybe<TicketStatus>>>;
  /**  Delete a single TicketStatus item by ID.  */
  deleteTicketStatus?: Maybe<TicketStatus>;
  /**  Delete multiple TicketStatus items by ID.  */
  deleteTicketStatuses?: Maybe<Array<Maybe<TicketStatus>>>;
  /**  Create a single TicketFileHistoryRecord item.  */
  createTicketFileHistoryRecord?: Maybe<TicketFileHistoryRecord>;
  /**  Create multiple TicketFileHistoryRecord items.  */
  createTicketFileHistoryRecords?: Maybe<Array<Maybe<TicketFileHistoryRecord>>>;
  /**  Update a single TicketFileHistoryRecord item by ID.  */
  updateTicketFileHistoryRecord?: Maybe<TicketFileHistoryRecord>;
  /**  Update multiple TicketFileHistoryRecord items by ID.  */
  updateTicketFileHistoryRecords?: Maybe<Array<Maybe<TicketFileHistoryRecord>>>;
  /**  Delete a single TicketFileHistoryRecord item by ID.  */
  deleteTicketFileHistoryRecord?: Maybe<TicketFileHistoryRecord>;
  /**  Delete multiple TicketFileHistoryRecord items by ID.  */
  deleteTicketFileHistoryRecords?: Maybe<Array<Maybe<TicketFileHistoryRecord>>>;
  /**  Create a single TicketFile item.  */
  createTicketFile?: Maybe<TicketFile>;
  /**  Create multiple TicketFile items.  */
  createTicketFiles?: Maybe<Array<Maybe<TicketFile>>>;
  /**  Update a single TicketFile item by ID.  */
  updateTicketFile?: Maybe<TicketFile>;
  /**  Update multiple TicketFile items by ID.  */
  updateTicketFiles?: Maybe<Array<Maybe<TicketFile>>>;
  /**  Delete a single TicketFile item by ID.  */
  deleteTicketFile?: Maybe<TicketFile>;
  /**  Delete multiple TicketFile items by ID.  */
  deleteTicketFiles?: Maybe<Array<Maybe<TicketFile>>>;
  /**  Create a single TicketChange item.  */
  createTicketChange?: Maybe<TicketChange>;
  /**  Create multiple TicketChange items.  */
  createTicketChanges?: Maybe<Array<Maybe<TicketChange>>>;
  /**  Update a single TicketChange item by ID.  */
  updateTicketChange?: Maybe<TicketChange>;
  /**  Update multiple TicketChange items by ID.  */
  updateTicketChanges?: Maybe<Array<Maybe<TicketChange>>>;
  /**  Delete a single TicketChange item by ID.  */
  deleteTicketChange?: Maybe<TicketChange>;
  /**  Delete multiple TicketChange items by ID.  */
  deleteTicketChanges?: Maybe<Array<Maybe<TicketChange>>>;
  /**  Create a single TicketCommentHistoryRecord item.  */
  createTicketCommentHistoryRecord?: Maybe<TicketCommentHistoryRecord>;
  /**  Create multiple TicketCommentHistoryRecord items.  */
  createTicketCommentHistoryRecords?: Maybe<Array<Maybe<TicketCommentHistoryRecord>>>;
  /**  Update a single TicketCommentHistoryRecord item by ID.  */
  updateTicketCommentHistoryRecord?: Maybe<TicketCommentHistoryRecord>;
  /**  Update multiple TicketCommentHistoryRecord items by ID.  */
  updateTicketCommentHistoryRecords?: Maybe<Array<Maybe<TicketCommentHistoryRecord>>>;
  /**  Delete a single TicketCommentHistoryRecord item by ID.  */
  deleteTicketCommentHistoryRecord?: Maybe<TicketCommentHistoryRecord>;
  /**  Delete multiple TicketCommentHistoryRecord items by ID.  */
  deleteTicketCommentHistoryRecords?: Maybe<Array<Maybe<TicketCommentHistoryRecord>>>;
  /**  Create a single TicketComment item.  */
  createTicketComment?: Maybe<TicketComment>;
  /**  Create multiple TicketComment items.  */
  createTicketComments?: Maybe<Array<Maybe<TicketComment>>>;
  /**  Update a single TicketComment item by ID.  */
  updateTicketComment?: Maybe<TicketComment>;
  /**  Update multiple TicketComment items by ID.  */
  updateTicketComments?: Maybe<Array<Maybe<TicketComment>>>;
  /**  Delete a single TicketComment item by ID.  */
  deleteTicketComment?: Maybe<TicketComment>;
  /**  Delete multiple TicketComment items by ID.  */
  deleteTicketComments?: Maybe<Array<Maybe<TicketComment>>>;
  /**  Create a single TicketPlaceClassifierHistoryRecord item.  */
  createTicketPlaceClassifierHistoryRecord?: Maybe<TicketPlaceClassifierHistoryRecord>;
  /**  Create multiple TicketPlaceClassifierHistoryRecord items.  */
  createTicketPlaceClassifierHistoryRecords?: Maybe<Array<Maybe<TicketPlaceClassifierHistoryRecord>>>;
  /**  Update a single TicketPlaceClassifierHistoryRecord item by ID.  */
  updateTicketPlaceClassifierHistoryRecord?: Maybe<TicketPlaceClassifierHistoryRecord>;
  /**  Update multiple TicketPlaceClassifierHistoryRecord items by ID.  */
  updateTicketPlaceClassifierHistoryRecords?: Maybe<Array<Maybe<TicketPlaceClassifierHistoryRecord>>>;
  /**  Delete a single TicketPlaceClassifierHistoryRecord item by ID.  */
  deleteTicketPlaceClassifierHistoryRecord?: Maybe<TicketPlaceClassifierHistoryRecord>;
  /**  Delete multiple TicketPlaceClassifierHistoryRecord items by ID.  */
  deleteTicketPlaceClassifierHistoryRecords?: Maybe<Array<Maybe<TicketPlaceClassifierHistoryRecord>>>;
  /**  Create a single TicketPlaceClassifier item.  */
  createTicketPlaceClassifier?: Maybe<TicketPlaceClassifier>;
  /**  Create multiple TicketPlaceClassifier items.  */
  createTicketPlaceClassifiers?: Maybe<Array<Maybe<TicketPlaceClassifier>>>;
  /**  Update a single TicketPlaceClassifier item by ID.  */
  updateTicketPlaceClassifier?: Maybe<TicketPlaceClassifier>;
  /**  Update multiple TicketPlaceClassifier items by ID.  */
  updateTicketPlaceClassifiers?: Maybe<Array<Maybe<TicketPlaceClassifier>>>;
  /**  Delete a single TicketPlaceClassifier item by ID.  */
  deleteTicketPlaceClassifier?: Maybe<TicketPlaceClassifier>;
  /**  Delete multiple TicketPlaceClassifier items by ID.  */
  deleteTicketPlaceClassifiers?: Maybe<Array<Maybe<TicketPlaceClassifier>>>;
  /**  Create a single TicketCategoryClassifierHistoryRecord item.  */
  createTicketCategoryClassifierHistoryRecord?: Maybe<TicketCategoryClassifierHistoryRecord>;
  /**  Create multiple TicketCategoryClassifierHistoryRecord items.  */
  createTicketCategoryClassifierHistoryRecords?: Maybe<Array<Maybe<TicketCategoryClassifierHistoryRecord>>>;
  /**  Update a single TicketCategoryClassifierHistoryRecord item by ID.  */
  updateTicketCategoryClassifierHistoryRecord?: Maybe<TicketCategoryClassifierHistoryRecord>;
  /**  Update multiple TicketCategoryClassifierHistoryRecord items by ID.  */
  updateTicketCategoryClassifierHistoryRecords?: Maybe<Array<Maybe<TicketCategoryClassifierHistoryRecord>>>;
  /**  Delete a single TicketCategoryClassifierHistoryRecord item by ID.  */
  deleteTicketCategoryClassifierHistoryRecord?: Maybe<TicketCategoryClassifierHistoryRecord>;
  /**  Delete multiple TicketCategoryClassifierHistoryRecord items by ID.  */
  deleteTicketCategoryClassifierHistoryRecords?: Maybe<Array<Maybe<TicketCategoryClassifierHistoryRecord>>>;
  /**  Create a single TicketCategoryClassifier item.  */
  createTicketCategoryClassifier?: Maybe<TicketCategoryClassifier>;
  /**  Create multiple TicketCategoryClassifier items.  */
  createTicketCategoryClassifiers?: Maybe<Array<Maybe<TicketCategoryClassifier>>>;
  /**  Update a single TicketCategoryClassifier item by ID.  */
  updateTicketCategoryClassifier?: Maybe<TicketCategoryClassifier>;
  /**  Update multiple TicketCategoryClassifier items by ID.  */
  updateTicketCategoryClassifiers?: Maybe<Array<Maybe<TicketCategoryClassifier>>>;
  /**  Delete a single TicketCategoryClassifier item by ID.  */
  deleteTicketCategoryClassifier?: Maybe<TicketCategoryClassifier>;
  /**  Delete multiple TicketCategoryClassifier items by ID.  */
  deleteTicketCategoryClassifiers?: Maybe<Array<Maybe<TicketCategoryClassifier>>>;
  /**  Create a single TicketProblemClassifierHistoryRecord item.  */
  createTicketProblemClassifierHistoryRecord?: Maybe<TicketProblemClassifierHistoryRecord>;
  /**  Create multiple TicketProblemClassifierHistoryRecord items.  */
  createTicketProblemClassifierHistoryRecords?: Maybe<Array<Maybe<TicketProblemClassifierHistoryRecord>>>;
  /**  Update a single TicketProblemClassifierHistoryRecord item by ID.  */
  updateTicketProblemClassifierHistoryRecord?: Maybe<TicketProblemClassifierHistoryRecord>;
  /**  Update multiple TicketProblemClassifierHistoryRecord items by ID.  */
  updateTicketProblemClassifierHistoryRecords?: Maybe<Array<Maybe<TicketProblemClassifierHistoryRecord>>>;
  /**  Delete a single TicketProblemClassifierHistoryRecord item by ID.  */
  deleteTicketProblemClassifierHistoryRecord?: Maybe<TicketProblemClassifierHistoryRecord>;
  /**  Delete multiple TicketProblemClassifierHistoryRecord items by ID.  */
  deleteTicketProblemClassifierHistoryRecords?: Maybe<Array<Maybe<TicketProblemClassifierHistoryRecord>>>;
  /**  Create a single TicketProblemClassifier item.  */
  createTicketProblemClassifier?: Maybe<TicketProblemClassifier>;
  /**  Create multiple TicketProblemClassifier items.  */
  createTicketProblemClassifiers?: Maybe<Array<Maybe<TicketProblemClassifier>>>;
  /**  Update a single TicketProblemClassifier item by ID.  */
  updateTicketProblemClassifier?: Maybe<TicketProblemClassifier>;
  /**  Update multiple TicketProblemClassifier items by ID.  */
  updateTicketProblemClassifiers?: Maybe<Array<Maybe<TicketProblemClassifier>>>;
  /**  Delete a single TicketProblemClassifier item by ID.  */
  deleteTicketProblemClassifier?: Maybe<TicketProblemClassifier>;
  /**  Delete multiple TicketProblemClassifier items by ID.  */
  deleteTicketProblemClassifiers?: Maybe<Array<Maybe<TicketProblemClassifier>>>;
  /**  Create a single TicketClassifierHistoryRecord item.  */
  createTicketClassifierHistoryRecord?: Maybe<TicketClassifierHistoryRecord>;
  /**  Create multiple TicketClassifierHistoryRecord items.  */
  createTicketClassifierHistoryRecords?: Maybe<Array<Maybe<TicketClassifierHistoryRecord>>>;
  /**  Update a single TicketClassifierHistoryRecord item by ID.  */
  updateTicketClassifierHistoryRecord?: Maybe<TicketClassifierHistoryRecord>;
  /**  Update multiple TicketClassifierHistoryRecord items by ID.  */
  updateTicketClassifierHistoryRecords?: Maybe<Array<Maybe<TicketClassifierHistoryRecord>>>;
  /**  Delete a single TicketClassifierHistoryRecord item by ID.  */
  deleteTicketClassifierHistoryRecord?: Maybe<TicketClassifierHistoryRecord>;
  /**  Delete multiple TicketClassifierHistoryRecord items by ID.  */
  deleteTicketClassifierHistoryRecords?: Maybe<Array<Maybe<TicketClassifierHistoryRecord>>>;
  /**  Create a single TicketClassifier item.  */
  createTicketClassifier?: Maybe<TicketClassifier>;
  /**  Create multiple TicketClassifier items.  */
  createTicketClassifiers?: Maybe<Array<Maybe<TicketClassifier>>>;
  /**  Update a single TicketClassifier item by ID.  */
  updateTicketClassifier?: Maybe<TicketClassifier>;
  /**  Update multiple TicketClassifier items by ID.  */
  updateTicketClassifiers?: Maybe<Array<Maybe<TicketClassifier>>>;
  /**  Delete a single TicketClassifier item by ID.  */
  deleteTicketClassifier?: Maybe<TicketClassifier>;
  /**  Delete multiple TicketClassifier items by ID.  */
  deleteTicketClassifiers?: Maybe<Array<Maybe<TicketClassifier>>>;
  /**  Create a single TicketFilterTemplateHistoryRecord item.  */
  createTicketFilterTemplateHistoryRecord?: Maybe<TicketFilterTemplateHistoryRecord>;
  /**  Create multiple TicketFilterTemplateHistoryRecord items.  */
  createTicketFilterTemplateHistoryRecords?: Maybe<Array<Maybe<TicketFilterTemplateHistoryRecord>>>;
  /**  Update a single TicketFilterTemplateHistoryRecord item by ID.  */
  updateTicketFilterTemplateHistoryRecord?: Maybe<TicketFilterTemplateHistoryRecord>;
  /**  Update multiple TicketFilterTemplateHistoryRecord items by ID.  */
  updateTicketFilterTemplateHistoryRecords?: Maybe<Array<Maybe<TicketFilterTemplateHistoryRecord>>>;
  /**  Delete a single TicketFilterTemplateHistoryRecord item by ID.  */
  deleteTicketFilterTemplateHistoryRecord?: Maybe<TicketFilterTemplateHistoryRecord>;
  /**  Delete multiple TicketFilterTemplateHistoryRecord items by ID.  */
  deleteTicketFilterTemplateHistoryRecords?: Maybe<Array<Maybe<TicketFilterTemplateHistoryRecord>>>;
  /**  Create a single TicketFilterTemplate item.  */
  createTicketFilterTemplate?: Maybe<TicketFilterTemplate>;
  /**  Create multiple TicketFilterTemplate items.  */
  createTicketFilterTemplates?: Maybe<Array<Maybe<TicketFilterTemplate>>>;
  /**  Update a single TicketFilterTemplate item by ID.  */
  updateTicketFilterTemplate?: Maybe<TicketFilterTemplate>;
  /**  Update multiple TicketFilterTemplate items by ID.  */
  updateTicketFilterTemplates?: Maybe<Array<Maybe<TicketFilterTemplate>>>;
  /**  Delete a single TicketFilterTemplate item by ID.  */
  deleteTicketFilterTemplate?: Maybe<TicketFilterTemplate>;
  /**  Delete multiple TicketFilterTemplate items by ID.  */
  deleteTicketFilterTemplates?: Maybe<Array<Maybe<TicketFilterTemplate>>>;
  /**  Create a single TicketCommentFileHistoryRecord item.  */
  createTicketCommentFileHistoryRecord?: Maybe<TicketCommentFileHistoryRecord>;
  /**  Create multiple TicketCommentFileHistoryRecord items.  */
  createTicketCommentFileHistoryRecords?: Maybe<Array<Maybe<TicketCommentFileHistoryRecord>>>;
  /**  Update a single TicketCommentFileHistoryRecord item by ID.  */
  updateTicketCommentFileHistoryRecord?: Maybe<TicketCommentFileHistoryRecord>;
  /**  Update multiple TicketCommentFileHistoryRecord items by ID.  */
  updateTicketCommentFileHistoryRecords?: Maybe<Array<Maybe<TicketCommentFileHistoryRecord>>>;
  /**  Delete a single TicketCommentFileHistoryRecord item by ID.  */
  deleteTicketCommentFileHistoryRecord?: Maybe<TicketCommentFileHistoryRecord>;
  /**  Delete multiple TicketCommentFileHistoryRecord items by ID.  */
  deleteTicketCommentFileHistoryRecords?: Maybe<Array<Maybe<TicketCommentFileHistoryRecord>>>;
  /**  Create a single TicketCommentFile item.  */
  createTicketCommentFile?: Maybe<TicketCommentFile>;
  /**  Create multiple TicketCommentFile items.  */
  createTicketCommentFiles?: Maybe<Array<Maybe<TicketCommentFile>>>;
  /**  Update a single TicketCommentFile item by ID.  */
  updateTicketCommentFile?: Maybe<TicketCommentFile>;
  /**  Update multiple TicketCommentFile items by ID.  */
  updateTicketCommentFiles?: Maybe<Array<Maybe<TicketCommentFile>>>;
  /**  Delete a single TicketCommentFile item by ID.  */
  deleteTicketCommentFile?: Maybe<TicketCommentFile>;
  /**  Delete multiple TicketCommentFile items by ID.  */
  deleteTicketCommentFiles?: Maybe<Array<Maybe<TicketCommentFile>>>;
  /**  Create a single TicketCommentsTimeHistoryRecord item.  */
  createTicketCommentsTimeHistoryRecord?: Maybe<TicketCommentsTimeHistoryRecord>;
  /**  Create multiple TicketCommentsTimeHistoryRecord items.  */
  createTicketCommentsTimeHistoryRecords?: Maybe<Array<Maybe<TicketCommentsTimeHistoryRecord>>>;
  /**  Update a single TicketCommentsTimeHistoryRecord item by ID.  */
  updateTicketCommentsTimeHistoryRecord?: Maybe<TicketCommentsTimeHistoryRecord>;
  /**  Update multiple TicketCommentsTimeHistoryRecord items by ID.  */
  updateTicketCommentsTimeHistoryRecords?: Maybe<Array<Maybe<TicketCommentsTimeHistoryRecord>>>;
  /**  Delete a single TicketCommentsTimeHistoryRecord item by ID.  */
  deleteTicketCommentsTimeHistoryRecord?: Maybe<TicketCommentsTimeHistoryRecord>;
  /**  Delete multiple TicketCommentsTimeHistoryRecord items by ID.  */
  deleteTicketCommentsTimeHistoryRecords?: Maybe<Array<Maybe<TicketCommentsTimeHistoryRecord>>>;
  /**  Create a single TicketCommentsTime item.  */
  createTicketCommentsTime?: Maybe<TicketCommentsTime>;
  /**  Create multiple TicketCommentsTime items.  */
  createTicketCommentsTimes?: Maybe<Array<Maybe<TicketCommentsTime>>>;
  /**  Update a single TicketCommentsTime item by ID.  */
  updateTicketCommentsTime?: Maybe<TicketCommentsTime>;
  /**  Update multiple TicketCommentsTime items by ID.  */
  updateTicketCommentsTimes?: Maybe<Array<Maybe<TicketCommentsTime>>>;
  /**  Delete a single TicketCommentsTime item by ID.  */
  deleteTicketCommentsTime?: Maybe<TicketCommentsTime>;
  /**  Delete multiple TicketCommentsTime items by ID.  */
  deleteTicketCommentsTimes?: Maybe<Array<Maybe<TicketCommentsTime>>>;
  /**  Create a single UserTicketCommentReadTimeHistoryRecord item.  */
  createUserTicketCommentReadTimeHistoryRecord?: Maybe<UserTicketCommentReadTimeHistoryRecord>;
  /**  Create multiple UserTicketCommentReadTimeHistoryRecord items.  */
  createUserTicketCommentReadTimeHistoryRecords?: Maybe<Array<Maybe<UserTicketCommentReadTimeHistoryRecord>>>;
  /**  Update a single UserTicketCommentReadTimeHistoryRecord item by ID.  */
  updateUserTicketCommentReadTimeHistoryRecord?: Maybe<UserTicketCommentReadTimeHistoryRecord>;
  /**  Update multiple UserTicketCommentReadTimeHistoryRecord items by ID.  */
  updateUserTicketCommentReadTimeHistoryRecords?: Maybe<Array<Maybe<UserTicketCommentReadTimeHistoryRecord>>>;
  /**  Delete a single UserTicketCommentReadTimeHistoryRecord item by ID.  */
  deleteUserTicketCommentReadTimeHistoryRecord?: Maybe<UserTicketCommentReadTimeHistoryRecord>;
  /**  Delete multiple UserTicketCommentReadTimeHistoryRecord items by ID.  */
  deleteUserTicketCommentReadTimeHistoryRecords?: Maybe<Array<Maybe<UserTicketCommentReadTimeHistoryRecord>>>;
  /**  Create a single UserTicketCommentReadTime item.  */
  createUserTicketCommentReadTime?: Maybe<UserTicketCommentReadTime>;
  /**  Create multiple UserTicketCommentReadTime items.  */
  createUserTicketCommentReadTimes?: Maybe<Array<Maybe<UserTicketCommentReadTime>>>;
  /**  Update a single UserTicketCommentReadTime item by ID.  */
  updateUserTicketCommentReadTime?: Maybe<UserTicketCommentReadTime>;
  /**  Update multiple UserTicketCommentReadTime items by ID.  */
  updateUserTicketCommentReadTimes?: Maybe<Array<Maybe<UserTicketCommentReadTime>>>;
  /**  Delete a single UserTicketCommentReadTime item by ID.  */
  deleteUserTicketCommentReadTime?: Maybe<UserTicketCommentReadTime>;
  /**  Delete multiple UserTicketCommentReadTime items by ID.  */
  deleteUserTicketCommentReadTimes?: Maybe<Array<Maybe<UserTicketCommentReadTime>>>;
  /**  Create a single TicketPropertyHintHistoryRecord item.  */
  createTicketPropertyHintHistoryRecord?: Maybe<TicketPropertyHintHistoryRecord>;
  /**  Create multiple TicketPropertyHintHistoryRecord items.  */
  createTicketPropertyHintHistoryRecords?: Maybe<Array<Maybe<TicketPropertyHintHistoryRecord>>>;
  /**  Update a single TicketPropertyHintHistoryRecord item by ID.  */
  updateTicketPropertyHintHistoryRecord?: Maybe<TicketPropertyHintHistoryRecord>;
  /**  Update multiple TicketPropertyHintHistoryRecord items by ID.  */
  updateTicketPropertyHintHistoryRecords?: Maybe<Array<Maybe<TicketPropertyHintHistoryRecord>>>;
  /**  Delete a single TicketPropertyHintHistoryRecord item by ID.  */
  deleteTicketPropertyHintHistoryRecord?: Maybe<TicketPropertyHintHistoryRecord>;
  /**  Delete multiple TicketPropertyHintHistoryRecord items by ID.  */
  deleteTicketPropertyHintHistoryRecords?: Maybe<Array<Maybe<TicketPropertyHintHistoryRecord>>>;
  /**  Create a single TicketPropertyHint item.  */
  createTicketPropertyHint?: Maybe<TicketPropertyHint>;
  /**  Create multiple TicketPropertyHint items.  */
  createTicketPropertyHints?: Maybe<Array<Maybe<TicketPropertyHint>>>;
  /**  Update a single TicketPropertyHint item by ID.  */
  updateTicketPropertyHint?: Maybe<TicketPropertyHint>;
  /**  Update multiple TicketPropertyHint items by ID.  */
  updateTicketPropertyHints?: Maybe<Array<Maybe<TicketPropertyHint>>>;
  /**  Delete a single TicketPropertyHint item by ID.  */
  deleteTicketPropertyHint?: Maybe<TicketPropertyHint>;
  /**  Delete multiple TicketPropertyHint items by ID.  */
  deleteTicketPropertyHints?: Maybe<Array<Maybe<TicketPropertyHint>>>;
  /**  Create a single TicketPropertyHintPropertyHistoryRecord item.  */
  createTicketPropertyHintPropertyHistoryRecord?: Maybe<TicketPropertyHintPropertyHistoryRecord>;
  /**  Create multiple TicketPropertyHintPropertyHistoryRecord items.  */
  createTicketPropertyHintPropertyHistoryRecords?: Maybe<Array<Maybe<TicketPropertyHintPropertyHistoryRecord>>>;
  /**  Update a single TicketPropertyHintPropertyHistoryRecord item by ID.  */
  updateTicketPropertyHintPropertyHistoryRecord?: Maybe<TicketPropertyHintPropertyHistoryRecord>;
  /**  Update multiple TicketPropertyHintPropertyHistoryRecord items by ID.  */
  updateTicketPropertyHintPropertyHistoryRecords?: Maybe<Array<Maybe<TicketPropertyHintPropertyHistoryRecord>>>;
  /**  Delete a single TicketPropertyHintPropertyHistoryRecord item by ID.  */
  deleteTicketPropertyHintPropertyHistoryRecord?: Maybe<TicketPropertyHintPropertyHistoryRecord>;
  /**  Delete multiple TicketPropertyHintPropertyHistoryRecord items by ID.  */
  deleteTicketPropertyHintPropertyHistoryRecords?: Maybe<Array<Maybe<TicketPropertyHintPropertyHistoryRecord>>>;
  /**  Create a single TicketPropertyHintProperty item.  */
  createTicketPropertyHintProperty?: Maybe<TicketPropertyHintProperty>;
  /**  Create multiple TicketPropertyHintProperty items.  */
  createTicketPropertyHintProperties?: Maybe<Array<Maybe<TicketPropertyHintProperty>>>;
  /**  Update a single TicketPropertyHintProperty item by ID.  */
  updateTicketPropertyHintProperty?: Maybe<TicketPropertyHintProperty>;
  /**  Update multiple TicketPropertyHintProperty items by ID.  */
  updateTicketPropertyHintProperties?: Maybe<Array<Maybe<TicketPropertyHintProperty>>>;
  /**  Delete a single TicketPropertyHintProperty item by ID.  */
  deleteTicketPropertyHintProperty?: Maybe<TicketPropertyHintProperty>;
  /**  Delete multiple TicketPropertyHintProperty items by ID.  */
  deleteTicketPropertyHintProperties?: Maybe<Array<Maybe<TicketPropertyHintProperty>>>;
  /**  Create a single TicketExportTaskHistoryRecord item.  */
  createTicketExportTaskHistoryRecord?: Maybe<TicketExportTaskHistoryRecord>;
  /**  Create multiple TicketExportTaskHistoryRecord items.  */
  createTicketExportTaskHistoryRecords?: Maybe<Array<Maybe<TicketExportTaskHistoryRecord>>>;
  /**  Update a single TicketExportTaskHistoryRecord item by ID.  */
  updateTicketExportTaskHistoryRecord?: Maybe<TicketExportTaskHistoryRecord>;
  /**  Update multiple TicketExportTaskHistoryRecord items by ID.  */
  updateTicketExportTaskHistoryRecords?: Maybe<Array<Maybe<TicketExportTaskHistoryRecord>>>;
  /**  Delete a single TicketExportTaskHistoryRecord item by ID.  */
  deleteTicketExportTaskHistoryRecord?: Maybe<TicketExportTaskHistoryRecord>;
  /**  Delete multiple TicketExportTaskHistoryRecord items by ID.  */
  deleteTicketExportTaskHistoryRecords?: Maybe<Array<Maybe<TicketExportTaskHistoryRecord>>>;
  /**  Create a single TicketExportTask item.  */
  createTicketExportTask?: Maybe<TicketExportTask>;
  /**  Create multiple TicketExportTask items.  */
  createTicketExportTasks?: Maybe<Array<Maybe<TicketExportTask>>>;
  /**  Update a single TicketExportTask item by ID.  */
  updateTicketExportTask?: Maybe<TicketExportTask>;
  /**  Update multiple TicketExportTask items by ID.  */
  updateTicketExportTasks?: Maybe<Array<Maybe<TicketExportTask>>>;
  /**  Delete a single TicketExportTask item by ID.  */
  deleteTicketExportTask?: Maybe<TicketExportTask>;
  /**  Delete multiple TicketExportTask items by ID.  */
  deleteTicketExportTasks?: Maybe<Array<Maybe<TicketExportTask>>>;
  /**  Create a single TicketOrganizationSettingHistoryRecord item.  */
  createTicketOrganizationSettingHistoryRecord?: Maybe<TicketOrganizationSettingHistoryRecord>;
  /**  Create multiple TicketOrganizationSettingHistoryRecord items.  */
  createTicketOrganizationSettingHistoryRecords?: Maybe<Array<Maybe<TicketOrganizationSettingHistoryRecord>>>;
  /**  Update a single TicketOrganizationSettingHistoryRecord item by ID.  */
  updateTicketOrganizationSettingHistoryRecord?: Maybe<TicketOrganizationSettingHistoryRecord>;
  /**  Update multiple TicketOrganizationSettingHistoryRecord items by ID.  */
  updateTicketOrganizationSettingHistoryRecords?: Maybe<Array<Maybe<TicketOrganizationSettingHistoryRecord>>>;
  /**  Delete a single TicketOrganizationSettingHistoryRecord item by ID.  */
  deleteTicketOrganizationSettingHistoryRecord?: Maybe<TicketOrganizationSettingHistoryRecord>;
  /**  Delete multiple TicketOrganizationSettingHistoryRecord items by ID.  */
  deleteTicketOrganizationSettingHistoryRecords?: Maybe<Array<Maybe<TicketOrganizationSettingHistoryRecord>>>;
  /**  Create a single TicketOrganizationSetting item.  */
  createTicketOrganizationSetting?: Maybe<TicketOrganizationSetting>;
  /**  Create multiple TicketOrganizationSetting items.  */
  createTicketOrganizationSettings?: Maybe<Array<Maybe<TicketOrganizationSetting>>>;
  /**  Update a single TicketOrganizationSetting item by ID.  */
  updateTicketOrganizationSetting?: Maybe<TicketOrganizationSetting>;
  /**  Update multiple TicketOrganizationSetting items by ID.  */
  updateTicketOrganizationSettings?: Maybe<Array<Maybe<TicketOrganizationSetting>>>;
  /**  Delete a single TicketOrganizationSetting item by ID.  */
  deleteTicketOrganizationSetting?: Maybe<TicketOrganizationSetting>;
  /**  Delete multiple TicketOrganizationSetting items by ID.  */
  deleteTicketOrganizationSettings?: Maybe<Array<Maybe<TicketOrganizationSetting>>>;
  /**  Create a single IncidentHistoryRecord item.  */
  createIncidentHistoryRecord?: Maybe<IncidentHistoryRecord>;
  /**  Create multiple IncidentHistoryRecord items.  */
  createIncidentHistoryRecords?: Maybe<Array<Maybe<IncidentHistoryRecord>>>;
  /**  Update a single IncidentHistoryRecord item by ID.  */
  updateIncidentHistoryRecord?: Maybe<IncidentHistoryRecord>;
  /**  Update multiple IncidentHistoryRecord items by ID.  */
  updateIncidentHistoryRecords?: Maybe<Array<Maybe<IncidentHistoryRecord>>>;
  /**  Delete a single IncidentHistoryRecord item by ID.  */
  deleteIncidentHistoryRecord?: Maybe<IncidentHistoryRecord>;
  /**  Delete multiple IncidentHistoryRecord items by ID.  */
  deleteIncidentHistoryRecords?: Maybe<Array<Maybe<IncidentHistoryRecord>>>;
  /**  Create a single Incident item.  */
  createIncident?: Maybe<Incident>;
  /**  Create multiple Incident items.  */
  createIncidents?: Maybe<Array<Maybe<Incident>>>;
  /**  Update a single Incident item by ID.  */
  updateIncident?: Maybe<Incident>;
  /**  Update multiple Incident items by ID.  */
  updateIncidents?: Maybe<Array<Maybe<Incident>>>;
  /**  Delete a single Incident item by ID.  */
  deleteIncident?: Maybe<Incident>;
  /**  Delete multiple Incident items by ID.  */
  deleteIncidents?: Maybe<Array<Maybe<Incident>>>;
  /**  Create a single IncidentChange item.  */
  createIncidentChange?: Maybe<IncidentChange>;
  /**  Create multiple IncidentChange items.  */
  createIncidentChanges?: Maybe<Array<Maybe<IncidentChange>>>;
  /**  Update a single IncidentChange item by ID.  */
  updateIncidentChange?: Maybe<IncidentChange>;
  /**  Update multiple IncidentChange items by ID.  */
  updateIncidentChanges?: Maybe<Array<Maybe<IncidentChange>>>;
  /**  Delete a single IncidentChange item by ID.  */
  deleteIncidentChange?: Maybe<IncidentChange>;
  /**  Delete multiple IncidentChange items by ID.  */
  deleteIncidentChanges?: Maybe<Array<Maybe<IncidentChange>>>;
  /**  Create a single IncidentPropertyHistoryRecord item.  */
  createIncidentPropertyHistoryRecord?: Maybe<IncidentPropertyHistoryRecord>;
  /**  Create multiple IncidentPropertyHistoryRecord items.  */
  createIncidentPropertyHistoryRecords?: Maybe<Array<Maybe<IncidentPropertyHistoryRecord>>>;
  /**  Update a single IncidentPropertyHistoryRecord item by ID.  */
  updateIncidentPropertyHistoryRecord?: Maybe<IncidentPropertyHistoryRecord>;
  /**  Update multiple IncidentPropertyHistoryRecord items by ID.  */
  updateIncidentPropertyHistoryRecords?: Maybe<Array<Maybe<IncidentPropertyHistoryRecord>>>;
  /**  Delete a single IncidentPropertyHistoryRecord item by ID.  */
  deleteIncidentPropertyHistoryRecord?: Maybe<IncidentPropertyHistoryRecord>;
  /**  Delete multiple IncidentPropertyHistoryRecord items by ID.  */
  deleteIncidentPropertyHistoryRecords?: Maybe<Array<Maybe<IncidentPropertyHistoryRecord>>>;
  /**  Create a single IncidentProperty item.  */
  createIncidentProperty?: Maybe<IncidentProperty>;
  /**  Create multiple IncidentProperty items.  */
  createIncidentProperties?: Maybe<Array<Maybe<IncidentProperty>>>;
  /**  Update a single IncidentProperty item by ID.  */
  updateIncidentProperty?: Maybe<IncidentProperty>;
  /**  Update multiple IncidentProperty items by ID.  */
  updateIncidentProperties?: Maybe<Array<Maybe<IncidentProperty>>>;
  /**  Delete a single IncidentProperty item by ID.  */
  deleteIncidentProperty?: Maybe<IncidentProperty>;
  /**  Delete multiple IncidentProperty items by ID.  */
  deleteIncidentProperties?: Maybe<Array<Maybe<IncidentProperty>>>;
  /**  Create a single IncidentClassifierHistoryRecord item.  */
  createIncidentClassifierHistoryRecord?: Maybe<IncidentClassifierHistoryRecord>;
  /**  Create multiple IncidentClassifierHistoryRecord items.  */
  createIncidentClassifierHistoryRecords?: Maybe<Array<Maybe<IncidentClassifierHistoryRecord>>>;
  /**  Update a single IncidentClassifierHistoryRecord item by ID.  */
  updateIncidentClassifierHistoryRecord?: Maybe<IncidentClassifierHistoryRecord>;
  /**  Update multiple IncidentClassifierHistoryRecord items by ID.  */
  updateIncidentClassifierHistoryRecords?: Maybe<Array<Maybe<IncidentClassifierHistoryRecord>>>;
  /**  Delete a single IncidentClassifierHistoryRecord item by ID.  */
  deleteIncidentClassifierHistoryRecord?: Maybe<IncidentClassifierHistoryRecord>;
  /**  Delete multiple IncidentClassifierHistoryRecord items by ID.  */
  deleteIncidentClassifierHistoryRecords?: Maybe<Array<Maybe<IncidentClassifierHistoryRecord>>>;
  /**  Create a single IncidentClassifier item.  */
  createIncidentClassifier?: Maybe<IncidentClassifier>;
  /**  Create multiple IncidentClassifier items.  */
  createIncidentClassifiers?: Maybe<Array<Maybe<IncidentClassifier>>>;
  /**  Update a single IncidentClassifier item by ID.  */
  updateIncidentClassifier?: Maybe<IncidentClassifier>;
  /**  Update multiple IncidentClassifier items by ID.  */
  updateIncidentClassifiers?: Maybe<Array<Maybe<IncidentClassifier>>>;
  /**  Delete a single IncidentClassifier item by ID.  */
  deleteIncidentClassifier?: Maybe<IncidentClassifier>;
  /**  Delete multiple IncidentClassifier items by ID.  */
  deleteIncidentClassifiers?: Maybe<Array<Maybe<IncidentClassifier>>>;
  /**  Create a single IncidentClassifierIncidentHistoryRecord item.  */
  createIncidentClassifierIncidentHistoryRecord?: Maybe<IncidentClassifierIncidentHistoryRecord>;
  /**  Create multiple IncidentClassifierIncidentHistoryRecord items.  */
  createIncidentClassifierIncidentHistoryRecords?: Maybe<Array<Maybe<IncidentClassifierIncidentHistoryRecord>>>;
  /**  Update a single IncidentClassifierIncidentHistoryRecord item by ID.  */
  updateIncidentClassifierIncidentHistoryRecord?: Maybe<IncidentClassifierIncidentHistoryRecord>;
  /**  Update multiple IncidentClassifierIncidentHistoryRecord items by ID.  */
  updateIncidentClassifierIncidentHistoryRecords?: Maybe<Array<Maybe<IncidentClassifierIncidentHistoryRecord>>>;
  /**  Delete a single IncidentClassifierIncidentHistoryRecord item by ID.  */
  deleteIncidentClassifierIncidentHistoryRecord?: Maybe<IncidentClassifierIncidentHistoryRecord>;
  /**  Delete multiple IncidentClassifierIncidentHistoryRecord items by ID.  */
  deleteIncidentClassifierIncidentHistoryRecords?: Maybe<Array<Maybe<IncidentClassifierIncidentHistoryRecord>>>;
  /**  Create a single IncidentClassifierIncident item.  */
  createIncidentClassifierIncident?: Maybe<IncidentClassifierIncident>;
  /**  Create multiple IncidentClassifierIncident items.  */
  createIncidentClassifierIncidents?: Maybe<Array<Maybe<IncidentClassifierIncident>>>;
  /**  Update a single IncidentClassifierIncident item by ID.  */
  updateIncidentClassifierIncident?: Maybe<IncidentClassifierIncident>;
  /**  Update multiple IncidentClassifierIncident items by ID.  */
  updateIncidentClassifierIncidents?: Maybe<Array<Maybe<IncidentClassifierIncident>>>;
  /**  Delete a single IncidentClassifierIncident item by ID.  */
  deleteIncidentClassifierIncident?: Maybe<IncidentClassifierIncident>;
  /**  Delete multiple IncidentClassifierIncident items by ID.  */
  deleteIncidentClassifierIncidents?: Maybe<Array<Maybe<IncidentClassifierIncident>>>;
  /**  Create a single UserFavoriteTicketHistoryRecord item.  */
  createUserFavoriteTicketHistoryRecord?: Maybe<UserFavoriteTicketHistoryRecord>;
  /**  Create multiple UserFavoriteTicketHistoryRecord items.  */
  createUserFavoriteTicketHistoryRecords?: Maybe<Array<Maybe<UserFavoriteTicketHistoryRecord>>>;
  /**  Update a single UserFavoriteTicketHistoryRecord item by ID.  */
  updateUserFavoriteTicketHistoryRecord?: Maybe<UserFavoriteTicketHistoryRecord>;
  /**  Update multiple UserFavoriteTicketHistoryRecord items by ID.  */
  updateUserFavoriteTicketHistoryRecords?: Maybe<Array<Maybe<UserFavoriteTicketHistoryRecord>>>;
  /**  Delete a single UserFavoriteTicketHistoryRecord item by ID.  */
  deleteUserFavoriteTicketHistoryRecord?: Maybe<UserFavoriteTicketHistoryRecord>;
  /**  Delete multiple UserFavoriteTicketHistoryRecord items by ID.  */
  deleteUserFavoriteTicketHistoryRecords?: Maybe<Array<Maybe<UserFavoriteTicketHistoryRecord>>>;
  /**  Create a single UserFavoriteTicket item.  */
  createUserFavoriteTicket?: Maybe<UserFavoriteTicket>;
  /**  Create multiple UserFavoriteTicket items.  */
  createUserFavoriteTickets?: Maybe<Array<Maybe<UserFavoriteTicket>>>;
  /**  Update a single UserFavoriteTicket item by ID.  */
  updateUserFavoriteTicket?: Maybe<UserFavoriteTicket>;
  /**  Update multiple UserFavoriteTicket items by ID.  */
  updateUserFavoriteTickets?: Maybe<Array<Maybe<UserFavoriteTicket>>>;
  /**  Delete a single UserFavoriteTicket item by ID.  */
  deleteUserFavoriteTicket?: Maybe<UserFavoriteTicket>;
  /**  Delete multiple UserFavoriteTicket items by ID.  */
  deleteUserFavoriteTickets?: Maybe<Array<Maybe<UserFavoriteTicket>>>;
  /**  Create a single IncidentExportTaskHistoryRecord item.  */
  createIncidentExportTaskHistoryRecord?: Maybe<IncidentExportTaskHistoryRecord>;
  /**  Create multiple IncidentExportTaskHistoryRecord items.  */
  createIncidentExportTaskHistoryRecords?: Maybe<Array<Maybe<IncidentExportTaskHistoryRecord>>>;
  /**  Update a single IncidentExportTaskHistoryRecord item by ID.  */
  updateIncidentExportTaskHistoryRecord?: Maybe<IncidentExportTaskHistoryRecord>;
  /**  Update multiple IncidentExportTaskHistoryRecord items by ID.  */
  updateIncidentExportTaskHistoryRecords?: Maybe<Array<Maybe<IncidentExportTaskHistoryRecord>>>;
  /**  Delete a single IncidentExportTaskHistoryRecord item by ID.  */
  deleteIncidentExportTaskHistoryRecord?: Maybe<IncidentExportTaskHistoryRecord>;
  /**  Delete multiple IncidentExportTaskHistoryRecord items by ID.  */
  deleteIncidentExportTaskHistoryRecords?: Maybe<Array<Maybe<IncidentExportTaskHistoryRecord>>>;
  /**  Create a single IncidentExportTask item.  */
  createIncidentExportTask?: Maybe<IncidentExportTask>;
  /**  Create multiple IncidentExportTask items.  */
  createIncidentExportTasks?: Maybe<Array<Maybe<IncidentExportTask>>>;
  /**  Update a single IncidentExportTask item by ID.  */
  updateIncidentExportTask?: Maybe<IncidentExportTask>;
  /**  Update multiple IncidentExportTask items by ID.  */
  updateIncidentExportTasks?: Maybe<Array<Maybe<IncidentExportTask>>>;
  /**  Delete a single IncidentExportTask item by ID.  */
  deleteIncidentExportTask?: Maybe<IncidentExportTask>;
  /**  Delete multiple IncidentExportTask items by ID.  */
  deleteIncidentExportTasks?: Maybe<Array<Maybe<IncidentExportTask>>>;
  /**  Create a single MessageHistoryRecord item.  */
  createMessageHistoryRecord?: Maybe<MessageHistoryRecord>;
  /**  Create multiple MessageHistoryRecord items.  */
  createMessageHistoryRecords?: Maybe<Array<Maybe<MessageHistoryRecord>>>;
  /**  Update a single MessageHistoryRecord item by ID.  */
  updateMessageHistoryRecord?: Maybe<MessageHistoryRecord>;
  /**  Update multiple MessageHistoryRecord items by ID.  */
  updateMessageHistoryRecords?: Maybe<Array<Maybe<MessageHistoryRecord>>>;
  /**  Delete a single MessageHistoryRecord item by ID.  */
  deleteMessageHistoryRecord?: Maybe<MessageHistoryRecord>;
  /**  Delete multiple MessageHistoryRecord items by ID.  */
  deleteMessageHistoryRecords?: Maybe<Array<Maybe<MessageHistoryRecord>>>;
  /**  Create a single Message item.  */
  createMessage?: Maybe<Message>;
  /**  Create multiple Message items.  */
  createMessages?: Maybe<Array<Maybe<Message>>>;
  /**  Update a single Message item by ID.  */
  updateMessage?: Maybe<Message>;
  /**  Update multiple Message items by ID.  */
  updateMessages?: Maybe<Array<Maybe<Message>>>;
  /**  Delete a single Message item by ID.  */
  deleteMessage?: Maybe<Message>;
  /**  Delete multiple Message items by ID.  */
  deleteMessages?: Maybe<Array<Maybe<Message>>>;
  /**  Create a single RemoteClientHistoryRecord item.  */
  createRemoteClientHistoryRecord?: Maybe<RemoteClientHistoryRecord>;
  /**  Create multiple RemoteClientHistoryRecord items.  */
  createRemoteClientHistoryRecords?: Maybe<Array<Maybe<RemoteClientHistoryRecord>>>;
  /**  Update a single RemoteClientHistoryRecord item by ID.  */
  updateRemoteClientHistoryRecord?: Maybe<RemoteClientHistoryRecord>;
  /**  Update multiple RemoteClientHistoryRecord items by ID.  */
  updateRemoteClientHistoryRecords?: Maybe<Array<Maybe<RemoteClientHistoryRecord>>>;
  /**  Delete a single RemoteClientHistoryRecord item by ID.  */
  deleteRemoteClientHistoryRecord?: Maybe<RemoteClientHistoryRecord>;
  /**  Delete multiple RemoteClientHistoryRecord items by ID.  */
  deleteRemoteClientHistoryRecords?: Maybe<Array<Maybe<RemoteClientHistoryRecord>>>;
  /**  Create a single RemoteClient item.  */
  createRemoteClient?: Maybe<RemoteClient>;
  /**  Create multiple RemoteClient items.  */
  createRemoteClients?: Maybe<Array<Maybe<RemoteClient>>>;
  /**  Update a single RemoteClient item by ID.  */
  updateRemoteClient?: Maybe<RemoteClient>;
  /**  Update multiple RemoteClient items by ID.  */
  updateRemoteClients?: Maybe<Array<Maybe<RemoteClient>>>;
  /**  Delete a single RemoteClient item by ID.  */
  deleteRemoteClient?: Maybe<RemoteClient>;
  /**  Delete multiple RemoteClient items by ID.  */
  deleteRemoteClients?: Maybe<Array<Maybe<RemoteClient>>>;
  /**  Create a single MessageUserBlackListHistoryRecord item.  */
  createMessageUserBlackListHistoryRecord?: Maybe<MessageUserBlackListHistoryRecord>;
  /**  Create multiple MessageUserBlackListHistoryRecord items.  */
  createMessageUserBlackListHistoryRecords?: Maybe<Array<Maybe<MessageUserBlackListHistoryRecord>>>;
  /**  Update a single MessageUserBlackListHistoryRecord item by ID.  */
  updateMessageUserBlackListHistoryRecord?: Maybe<MessageUserBlackListHistoryRecord>;
  /**  Update multiple MessageUserBlackListHistoryRecord items by ID.  */
  updateMessageUserBlackListHistoryRecords?: Maybe<Array<Maybe<MessageUserBlackListHistoryRecord>>>;
  /**  Delete a single MessageUserBlackListHistoryRecord item by ID.  */
  deleteMessageUserBlackListHistoryRecord?: Maybe<MessageUserBlackListHistoryRecord>;
  /**  Delete multiple MessageUserBlackListHistoryRecord items by ID.  */
  deleteMessageUserBlackListHistoryRecords?: Maybe<Array<Maybe<MessageUserBlackListHistoryRecord>>>;
  /**  Create a single MessageUserBlackList item.  */
  createMessageUserBlackList?: Maybe<MessageUserBlackList>;
  /**  Create multiple MessageUserBlackList items.  */
  createMessageUserBlackLists?: Maybe<Array<Maybe<MessageUserBlackList>>>;
  /**  Update a single MessageUserBlackList item by ID.  */
  updateMessageUserBlackList?: Maybe<MessageUserBlackList>;
  /**  Update multiple MessageUserBlackList items by ID.  */
  updateMessageUserBlackLists?: Maybe<Array<Maybe<MessageUserBlackList>>>;
  /**  Delete a single MessageUserBlackList item by ID.  */
  deleteMessageUserBlackList?: Maybe<MessageUserBlackList>;
  /**  Delete multiple MessageUserBlackList items by ID.  */
  deleteMessageUserBlackLists?: Maybe<Array<Maybe<MessageUserBlackList>>>;
  /**  Create a single MessageOrganizationBlackListHistoryRecord item.  */
  createMessageOrganizationBlackListHistoryRecord?: Maybe<MessageOrganizationBlackListHistoryRecord>;
  /**  Create multiple MessageOrganizationBlackListHistoryRecord items.  */
  createMessageOrganizationBlackListHistoryRecords?: Maybe<Array<Maybe<MessageOrganizationBlackListHistoryRecord>>>;
  /**  Update a single MessageOrganizationBlackListHistoryRecord item by ID.  */
  updateMessageOrganizationBlackListHistoryRecord?: Maybe<MessageOrganizationBlackListHistoryRecord>;
  /**  Update multiple MessageOrganizationBlackListHistoryRecord items by ID.  */
  updateMessageOrganizationBlackListHistoryRecords?: Maybe<Array<Maybe<MessageOrganizationBlackListHistoryRecord>>>;
  /**  Delete a single MessageOrganizationBlackListHistoryRecord item by ID.  */
  deleteMessageOrganizationBlackListHistoryRecord?: Maybe<MessageOrganizationBlackListHistoryRecord>;
  /**  Delete multiple MessageOrganizationBlackListHistoryRecord items by ID.  */
  deleteMessageOrganizationBlackListHistoryRecords?: Maybe<Array<Maybe<MessageOrganizationBlackListHistoryRecord>>>;
  /**  Create a single MessageOrganizationBlackList item.  */
  createMessageOrganizationBlackList?: Maybe<MessageOrganizationBlackList>;
  /**  Create multiple MessageOrganizationBlackList items.  */
  createMessageOrganizationBlackLists?: Maybe<Array<Maybe<MessageOrganizationBlackList>>>;
  /**  Update a single MessageOrganizationBlackList item by ID.  */
  updateMessageOrganizationBlackList?: Maybe<MessageOrganizationBlackList>;
  /**  Update multiple MessageOrganizationBlackList items by ID.  */
  updateMessageOrganizationBlackLists?: Maybe<Array<Maybe<MessageOrganizationBlackList>>>;
  /**  Delete a single MessageOrganizationBlackList item by ID.  */
  deleteMessageOrganizationBlackList?: Maybe<MessageOrganizationBlackList>;
  /**  Delete multiple MessageOrganizationBlackList items by ID.  */
  deleteMessageOrganizationBlackLists?: Maybe<Array<Maybe<MessageOrganizationBlackList>>>;
  /**  Create a single MessageBatchHistoryRecord item.  */
  createMessageBatchHistoryRecord?: Maybe<MessageBatchHistoryRecord>;
  /**  Create multiple MessageBatchHistoryRecord items.  */
  createMessageBatchHistoryRecords?: Maybe<Array<Maybe<MessageBatchHistoryRecord>>>;
  /**  Update a single MessageBatchHistoryRecord item by ID.  */
  updateMessageBatchHistoryRecord?: Maybe<MessageBatchHistoryRecord>;
  /**  Update multiple MessageBatchHistoryRecord items by ID.  */
  updateMessageBatchHistoryRecords?: Maybe<Array<Maybe<MessageBatchHistoryRecord>>>;
  /**  Delete a single MessageBatchHistoryRecord item by ID.  */
  deleteMessageBatchHistoryRecord?: Maybe<MessageBatchHistoryRecord>;
  /**  Delete multiple MessageBatchHistoryRecord items by ID.  */
  deleteMessageBatchHistoryRecords?: Maybe<Array<Maybe<MessageBatchHistoryRecord>>>;
  /**  Create a single MessageBatch item.  */
  createMessageBatch?: Maybe<MessageBatch>;
  /**  Create multiple MessageBatch items.  */
  createMessageBatches?: Maybe<Array<Maybe<MessageBatch>>>;
  /**  Update a single MessageBatch item by ID.  */
  updateMessageBatch?: Maybe<MessageBatch>;
  /**  Update multiple MessageBatch items by ID.  */
  updateMessageBatches?: Maybe<Array<Maybe<MessageBatch>>>;
  /**  Delete a single MessageBatch item by ID.  */
  deleteMessageBatch?: Maybe<MessageBatch>;
  /**  Delete multiple MessageBatch items by ID.  */
  deleteMessageBatches?: Maybe<Array<Maybe<MessageBatch>>>;
  /**  Create a single ContactHistoryRecord item.  */
  createContactHistoryRecord?: Maybe<ContactHistoryRecord>;
  /**  Create multiple ContactHistoryRecord items.  */
  createContactHistoryRecords?: Maybe<Array<Maybe<ContactHistoryRecord>>>;
  /**  Update a single ContactHistoryRecord item by ID.  */
  updateContactHistoryRecord?: Maybe<ContactHistoryRecord>;
  /**  Update multiple ContactHistoryRecord items by ID.  */
  updateContactHistoryRecords?: Maybe<Array<Maybe<ContactHistoryRecord>>>;
  /**  Delete a single ContactHistoryRecord item by ID.  */
  deleteContactHistoryRecord?: Maybe<ContactHistoryRecord>;
  /**  Delete multiple ContactHistoryRecord items by ID.  */
  deleteContactHistoryRecords?: Maybe<Array<Maybe<ContactHistoryRecord>>>;
  /**  Create a single Contact item.  */
  createContact?: Maybe<Contact>;
  /**  Create multiple Contact items.  */
  createContacts?: Maybe<Array<Maybe<Contact>>>;
  /**  Update a single Contact item by ID.  */
  updateContact?: Maybe<Contact>;
  /**  Update multiple Contact items by ID.  */
  updateContacts?: Maybe<Array<Maybe<Contact>>>;
  /**  Delete a single Contact item by ID.  */
  deleteContact?: Maybe<Contact>;
  /**  Delete multiple Contact items by ID.  */
  deleteContacts?: Maybe<Array<Maybe<Contact>>>;
  /**  Create a single ContactRoleHistoryRecord item.  */
  createContactRoleHistoryRecord?: Maybe<ContactRoleHistoryRecord>;
  /**  Create multiple ContactRoleHistoryRecord items.  */
  createContactRoleHistoryRecords?: Maybe<Array<Maybe<ContactRoleHistoryRecord>>>;
  /**  Update a single ContactRoleHistoryRecord item by ID.  */
  updateContactRoleHistoryRecord?: Maybe<ContactRoleHistoryRecord>;
  /**  Update multiple ContactRoleHistoryRecord items by ID.  */
  updateContactRoleHistoryRecords?: Maybe<Array<Maybe<ContactRoleHistoryRecord>>>;
  /**  Delete a single ContactRoleHistoryRecord item by ID.  */
  deleteContactRoleHistoryRecord?: Maybe<ContactRoleHistoryRecord>;
  /**  Delete multiple ContactRoleHistoryRecord items by ID.  */
  deleteContactRoleHistoryRecords?: Maybe<Array<Maybe<ContactRoleHistoryRecord>>>;
  /**  Create a single ContactRole item.  */
  createContactRole?: Maybe<ContactRole>;
  /**  Create multiple ContactRole items.  */
  createContactRoles?: Maybe<Array<Maybe<ContactRole>>>;
  /**  Update a single ContactRole item by ID.  */
  updateContactRole?: Maybe<ContactRole>;
  /**  Update multiple ContactRole items by ID.  */
  updateContactRoles?: Maybe<Array<Maybe<ContactRole>>>;
  /**  Delete a single ContactRole item by ID.  */
  deleteContactRole?: Maybe<ContactRole>;
  /**  Delete multiple ContactRole items by ID.  */
  deleteContactRoles?: Maybe<Array<Maybe<ContactRole>>>;
  /**  Create a single ContactExportTaskHistoryRecord item.  */
  createContactExportTaskHistoryRecord?: Maybe<ContactExportTaskHistoryRecord>;
  /**  Create multiple ContactExportTaskHistoryRecord items.  */
  createContactExportTaskHistoryRecords?: Maybe<Array<Maybe<ContactExportTaskHistoryRecord>>>;
  /**  Update a single ContactExportTaskHistoryRecord item by ID.  */
  updateContactExportTaskHistoryRecord?: Maybe<ContactExportTaskHistoryRecord>;
  /**  Update multiple ContactExportTaskHistoryRecord items by ID.  */
  updateContactExportTaskHistoryRecords?: Maybe<Array<Maybe<ContactExportTaskHistoryRecord>>>;
  /**  Delete a single ContactExportTaskHistoryRecord item by ID.  */
  deleteContactExportTaskHistoryRecord?: Maybe<ContactExportTaskHistoryRecord>;
  /**  Delete multiple ContactExportTaskHistoryRecord items by ID.  */
  deleteContactExportTaskHistoryRecords?: Maybe<Array<Maybe<ContactExportTaskHistoryRecord>>>;
  /**  Create a single ContactExportTask item.  */
  createContactExportTask?: Maybe<ContactExportTask>;
  /**  Create multiple ContactExportTask items.  */
  createContactExportTasks?: Maybe<Array<Maybe<ContactExportTask>>>;
  /**  Update a single ContactExportTask item by ID.  */
  updateContactExportTask?: Maybe<ContactExportTask>;
  /**  Update multiple ContactExportTask items by ID.  */
  updateContactExportTasks?: Maybe<Array<Maybe<ContactExportTask>>>;
  /**  Delete a single ContactExportTask item by ID.  */
  deleteContactExportTask?: Maybe<ContactExportTask>;
  /**  Delete multiple ContactExportTask items by ID.  */
  deleteContactExportTasks?: Maybe<Array<Maybe<ContactExportTask>>>;
  /**  Create a single ResidentHistoryRecord item.  */
  createResidentHistoryRecord?: Maybe<ResidentHistoryRecord>;
  /**  Create multiple ResidentHistoryRecord items.  */
  createResidentHistoryRecords?: Maybe<Array<Maybe<ResidentHistoryRecord>>>;
  /**  Update a single ResidentHistoryRecord item by ID.  */
  updateResidentHistoryRecord?: Maybe<ResidentHistoryRecord>;
  /**  Update multiple ResidentHistoryRecord items by ID.  */
  updateResidentHistoryRecords?: Maybe<Array<Maybe<ResidentHistoryRecord>>>;
  /**  Delete a single ResidentHistoryRecord item by ID.  */
  deleteResidentHistoryRecord?: Maybe<ResidentHistoryRecord>;
  /**  Delete multiple ResidentHistoryRecord items by ID.  */
  deleteResidentHistoryRecords?: Maybe<Array<Maybe<ResidentHistoryRecord>>>;
  /**  Create a single Resident item.  */
  createResident?: Maybe<Resident>;
  /**  Create multiple Resident items.  */
  createResidents?: Maybe<Array<Maybe<Resident>>>;
  /**  Update a single Resident item by ID.  */
  updateResident?: Maybe<Resident>;
  /**  Update multiple Resident items by ID.  */
  updateResidents?: Maybe<Array<Maybe<Resident>>>;
  /**  Delete a single Resident item by ID.  */
  deleteResident?: Maybe<Resident>;
  /**  Delete multiple Resident items by ID.  */
  deleteResidents?: Maybe<Array<Maybe<Resident>>>;
  /**  Create a single ServiceConsumerHistoryRecord item.  */
  createServiceConsumerHistoryRecord?: Maybe<ServiceConsumerHistoryRecord>;
  /**  Create multiple ServiceConsumerHistoryRecord items.  */
  createServiceConsumerHistoryRecords?: Maybe<Array<Maybe<ServiceConsumerHistoryRecord>>>;
  /**  Update a single ServiceConsumerHistoryRecord item by ID.  */
  updateServiceConsumerHistoryRecord?: Maybe<ServiceConsumerHistoryRecord>;
  /**  Update multiple ServiceConsumerHistoryRecord items by ID.  */
  updateServiceConsumerHistoryRecords?: Maybe<Array<Maybe<ServiceConsumerHistoryRecord>>>;
  /**  Delete a single ServiceConsumerHistoryRecord item by ID.  */
  deleteServiceConsumerHistoryRecord?: Maybe<ServiceConsumerHistoryRecord>;
  /**  Delete multiple ServiceConsumerHistoryRecord items by ID.  */
  deleteServiceConsumerHistoryRecords?: Maybe<Array<Maybe<ServiceConsumerHistoryRecord>>>;
  /**  Create a single ServiceConsumer item.  */
  createServiceConsumer?: Maybe<ServiceConsumer>;
  /**  Create multiple ServiceConsumer items.  */
  createServiceConsumers?: Maybe<Array<Maybe<ServiceConsumer>>>;
  /**  Update a single ServiceConsumer item by ID.  */
  updateServiceConsumer?: Maybe<ServiceConsumer>;
  /**  Update multiple ServiceConsumer items by ID.  */
  updateServiceConsumers?: Maybe<Array<Maybe<ServiceConsumer>>>;
  /**  Delete a single ServiceConsumer item by ID.  */
  deleteServiceConsumer?: Maybe<ServiceConsumer>;
  /**  Delete multiple ServiceConsumer items by ID.  */
  deleteServiceConsumers?: Maybe<Array<Maybe<ServiceConsumer>>>;
  /**  Create a single OnBoardingHistoryRecord item.  */
  createOnBoardingHistoryRecord?: Maybe<OnBoardingHistoryRecord>;
  /**  Create multiple OnBoardingHistoryRecord items.  */
  createOnBoardingHistoryRecords?: Maybe<Array<Maybe<OnBoardingHistoryRecord>>>;
  /**  Update a single OnBoardingHistoryRecord item by ID.  */
  updateOnBoardingHistoryRecord?: Maybe<OnBoardingHistoryRecord>;
  /**  Update multiple OnBoardingHistoryRecord items by ID.  */
  updateOnBoardingHistoryRecords?: Maybe<Array<Maybe<OnBoardingHistoryRecord>>>;
  /**  Delete a single OnBoardingHistoryRecord item by ID.  */
  deleteOnBoardingHistoryRecord?: Maybe<OnBoardingHistoryRecord>;
  /**  Delete multiple OnBoardingHistoryRecord items by ID.  */
  deleteOnBoardingHistoryRecords?: Maybe<Array<Maybe<OnBoardingHistoryRecord>>>;
  /**  Create a single OnBoarding item.  */
  createOnBoarding?: Maybe<OnBoarding>;
  /**  Create multiple OnBoarding items.  */
  createOnBoardings?: Maybe<Array<Maybe<OnBoarding>>>;
  /**  Update a single OnBoarding item by ID.  */
  updateOnBoarding?: Maybe<OnBoarding>;
  /**  Update multiple OnBoarding items by ID.  */
  updateOnBoardings?: Maybe<Array<Maybe<OnBoarding>>>;
  /**  Delete a single OnBoarding item by ID.  */
  deleteOnBoarding?: Maybe<OnBoarding>;
  /**  Delete multiple OnBoarding items by ID.  */
  deleteOnBoardings?: Maybe<Array<Maybe<OnBoarding>>>;
  /**  Create a single OnBoardingStepHistoryRecord item.  */
  createOnBoardingStepHistoryRecord?: Maybe<OnBoardingStepHistoryRecord>;
  /**  Create multiple OnBoardingStepHistoryRecord items.  */
  createOnBoardingStepHistoryRecords?: Maybe<Array<Maybe<OnBoardingStepHistoryRecord>>>;
  /**  Update a single OnBoardingStepHistoryRecord item by ID.  */
  updateOnBoardingStepHistoryRecord?: Maybe<OnBoardingStepHistoryRecord>;
  /**  Update multiple OnBoardingStepHistoryRecord items by ID.  */
  updateOnBoardingStepHistoryRecords?: Maybe<Array<Maybe<OnBoardingStepHistoryRecord>>>;
  /**  Delete a single OnBoardingStepHistoryRecord item by ID.  */
  deleteOnBoardingStepHistoryRecord?: Maybe<OnBoardingStepHistoryRecord>;
  /**  Delete multiple OnBoardingStepHistoryRecord items by ID.  */
  deleteOnBoardingStepHistoryRecords?: Maybe<Array<Maybe<OnBoardingStepHistoryRecord>>>;
  /**  Create a single OnBoardingStep item.  */
  createOnBoardingStep?: Maybe<OnBoardingStep>;
  /**  Create multiple OnBoardingStep items.  */
  createOnBoardingSteps?: Maybe<Array<Maybe<OnBoardingStep>>>;
  /**  Update a single OnBoardingStep item by ID.  */
  updateOnBoardingStep?: Maybe<OnBoardingStep>;
  /**  Update multiple OnBoardingStep items by ID.  */
  updateOnBoardingSteps?: Maybe<Array<Maybe<OnBoardingStep>>>;
  /**  Delete a single OnBoardingStep item by ID.  */
  deleteOnBoardingStep?: Maybe<OnBoardingStep>;
  /**  Delete multiple OnBoardingStep items by ID.  */
  deleteOnBoardingSteps?: Maybe<Array<Maybe<OnBoardingStep>>>;
  /**  Create a single MeterResourceHistoryRecord item.  */
  createMeterResourceHistoryRecord?: Maybe<MeterResourceHistoryRecord>;
  /**  Create multiple MeterResourceHistoryRecord items.  */
  createMeterResourceHistoryRecords?: Maybe<Array<Maybe<MeterResourceHistoryRecord>>>;
  /**  Update a single MeterResourceHistoryRecord item by ID.  */
  updateMeterResourceHistoryRecord?: Maybe<MeterResourceHistoryRecord>;
  /**  Update multiple MeterResourceHistoryRecord items by ID.  */
  updateMeterResourceHistoryRecords?: Maybe<Array<Maybe<MeterResourceHistoryRecord>>>;
  /**  Delete a single MeterResourceHistoryRecord item by ID.  */
  deleteMeterResourceHistoryRecord?: Maybe<MeterResourceHistoryRecord>;
  /**  Delete multiple MeterResourceHistoryRecord items by ID.  */
  deleteMeterResourceHistoryRecords?: Maybe<Array<Maybe<MeterResourceHistoryRecord>>>;
  /**  Create a single MeterResource item.  */
  createMeterResource?: Maybe<MeterResource>;
  /**  Create multiple MeterResource items.  */
  createMeterResources?: Maybe<Array<Maybe<MeterResource>>>;
  /**  Update a single MeterResource item by ID.  */
  updateMeterResource?: Maybe<MeterResource>;
  /**  Update multiple MeterResource items by ID.  */
  updateMeterResources?: Maybe<Array<Maybe<MeterResource>>>;
  /**  Delete a single MeterResource item by ID.  */
  deleteMeterResource?: Maybe<MeterResource>;
  /**  Delete multiple MeterResource items by ID.  */
  deleteMeterResources?: Maybe<Array<Maybe<MeterResource>>>;
  /**  Create a single MeterReadingSourceHistoryRecord item.  */
  createMeterReadingSourceHistoryRecord?: Maybe<MeterReadingSourceHistoryRecord>;
  /**  Create multiple MeterReadingSourceHistoryRecord items.  */
  createMeterReadingSourceHistoryRecords?: Maybe<Array<Maybe<MeterReadingSourceHistoryRecord>>>;
  /**  Update a single MeterReadingSourceHistoryRecord item by ID.  */
  updateMeterReadingSourceHistoryRecord?: Maybe<MeterReadingSourceHistoryRecord>;
  /**  Update multiple MeterReadingSourceHistoryRecord items by ID.  */
  updateMeterReadingSourceHistoryRecords?: Maybe<Array<Maybe<MeterReadingSourceHistoryRecord>>>;
  /**  Delete a single MeterReadingSourceHistoryRecord item by ID.  */
  deleteMeterReadingSourceHistoryRecord?: Maybe<MeterReadingSourceHistoryRecord>;
  /**  Delete multiple MeterReadingSourceHistoryRecord items by ID.  */
  deleteMeterReadingSourceHistoryRecords?: Maybe<Array<Maybe<MeterReadingSourceHistoryRecord>>>;
  /**  Create a single MeterReadingSource item.  */
  createMeterReadingSource?: Maybe<MeterReadingSource>;
  /**  Create multiple MeterReadingSource items.  */
  createMeterReadingSources?: Maybe<Array<Maybe<MeterReadingSource>>>;
  /**  Update a single MeterReadingSource item by ID.  */
  updateMeterReadingSource?: Maybe<MeterReadingSource>;
  /**  Update multiple MeterReadingSource items by ID.  */
  updateMeterReadingSources?: Maybe<Array<Maybe<MeterReadingSource>>>;
  /**  Delete a single MeterReadingSource item by ID.  */
  deleteMeterReadingSource?: Maybe<MeterReadingSource>;
  /**  Delete multiple MeterReadingSource items by ID.  */
  deleteMeterReadingSources?: Maybe<Array<Maybe<MeterReadingSource>>>;
  /**  Create a single MeterReadingHistoryRecord item.  */
  createMeterReadingHistoryRecord?: Maybe<MeterReadingHistoryRecord>;
  /**  Create multiple MeterReadingHistoryRecord items.  */
  createMeterReadingHistoryRecords?: Maybe<Array<Maybe<MeterReadingHistoryRecord>>>;
  /**  Update a single MeterReadingHistoryRecord item by ID.  */
  updateMeterReadingHistoryRecord?: Maybe<MeterReadingHistoryRecord>;
  /**  Update multiple MeterReadingHistoryRecord items by ID.  */
  updateMeterReadingHistoryRecords?: Maybe<Array<Maybe<MeterReadingHistoryRecord>>>;
  /**  Delete a single MeterReadingHistoryRecord item by ID.  */
  deleteMeterReadingHistoryRecord?: Maybe<MeterReadingHistoryRecord>;
  /**  Delete multiple MeterReadingHistoryRecord items by ID.  */
  deleteMeterReadingHistoryRecords?: Maybe<Array<Maybe<MeterReadingHistoryRecord>>>;
  /**  Create a single MeterReading item.  */
  createMeterReading?: Maybe<MeterReading>;
  /**  Create multiple MeterReading items.  */
  createMeterReadings?: Maybe<Array<Maybe<MeterReading>>>;
  /**  Update a single MeterReading item by ID.  */
  updateMeterReading?: Maybe<MeterReading>;
  /**  Update multiple MeterReading items by ID.  */
  updateMeterReadings?: Maybe<Array<Maybe<MeterReading>>>;
  /**  Delete a single MeterReading item by ID.  */
  deleteMeterReading?: Maybe<MeterReading>;
  /**  Delete multiple MeterReading items by ID.  */
  deleteMeterReadings?: Maybe<Array<Maybe<MeterReading>>>;
  /**  Create a single MeterHistoryRecord item.  */
  createMeterHistoryRecord?: Maybe<MeterHistoryRecord>;
  /**  Create multiple MeterHistoryRecord items.  */
  createMeterHistoryRecords?: Maybe<Array<Maybe<MeterHistoryRecord>>>;
  /**  Update a single MeterHistoryRecord item by ID.  */
  updateMeterHistoryRecord?: Maybe<MeterHistoryRecord>;
  /**  Update multiple MeterHistoryRecord items by ID.  */
  updateMeterHistoryRecords?: Maybe<Array<Maybe<MeterHistoryRecord>>>;
  /**  Delete a single MeterHistoryRecord item by ID.  */
  deleteMeterHistoryRecord?: Maybe<MeterHistoryRecord>;
  /**  Delete multiple MeterHistoryRecord items by ID.  */
  deleteMeterHistoryRecords?: Maybe<Array<Maybe<MeterHistoryRecord>>>;
  /**  Create a single Meter item.  */
  createMeter?: Maybe<Meter>;
  /**  Create multiple Meter items.  */
  createMeters?: Maybe<Array<Maybe<Meter>>>;
  /**  Update a single Meter item by ID.  */
  updateMeter?: Maybe<Meter>;
  /**  Update multiple Meter items by ID.  */
  updateMeters?: Maybe<Array<Maybe<Meter>>>;
  /**  Delete a single Meter item by ID.  */
  deleteMeter?: Maybe<Meter>;
  /**  Delete multiple Meter items by ID.  */
  deleteMeters?: Maybe<Array<Maybe<Meter>>>;
  /**  Create a single MeterReadingFilterTemplateHistoryRecord item.  */
  createMeterReadingFilterTemplateHistoryRecord?: Maybe<MeterReadingFilterTemplateHistoryRecord>;
  /**  Create multiple MeterReadingFilterTemplateHistoryRecord items.  */
  createMeterReadingFilterTemplateHistoryRecords?: Maybe<Array<Maybe<MeterReadingFilterTemplateHistoryRecord>>>;
  /**  Update a single MeterReadingFilterTemplateHistoryRecord item by ID.  */
  updateMeterReadingFilterTemplateHistoryRecord?: Maybe<MeterReadingFilterTemplateHistoryRecord>;
  /**  Update multiple MeterReadingFilterTemplateHistoryRecord items by ID.  */
  updateMeterReadingFilterTemplateHistoryRecords?: Maybe<Array<Maybe<MeterReadingFilterTemplateHistoryRecord>>>;
  /**  Delete a single MeterReadingFilterTemplateHistoryRecord item by ID.  */
  deleteMeterReadingFilterTemplateHistoryRecord?: Maybe<MeterReadingFilterTemplateHistoryRecord>;
  /**  Delete multiple MeterReadingFilterTemplateHistoryRecord items by ID.  */
  deleteMeterReadingFilterTemplateHistoryRecords?: Maybe<Array<Maybe<MeterReadingFilterTemplateHistoryRecord>>>;
  /**  Create a single MeterReadingFilterTemplate item.  */
  createMeterReadingFilterTemplate?: Maybe<MeterReadingFilterTemplate>;
  /**  Create multiple MeterReadingFilterTemplate items.  */
  createMeterReadingFilterTemplates?: Maybe<Array<Maybe<MeterReadingFilterTemplate>>>;
  /**  Update a single MeterReadingFilterTemplate item by ID.  */
  updateMeterReadingFilterTemplate?: Maybe<MeterReadingFilterTemplate>;
  /**  Update multiple MeterReadingFilterTemplate items by ID.  */
  updateMeterReadingFilterTemplates?: Maybe<Array<Maybe<MeterReadingFilterTemplate>>>;
  /**  Delete a single MeterReadingFilterTemplate item by ID.  */
  deleteMeterReadingFilterTemplate?: Maybe<MeterReadingFilterTemplate>;
  /**  Delete multiple MeterReadingFilterTemplate items by ID.  */
  deleteMeterReadingFilterTemplates?: Maybe<Array<Maybe<MeterReadingFilterTemplate>>>;
  /**  Create a single ServiceSubscriptionHistoryRecord item.  */
  createServiceSubscriptionHistoryRecord?: Maybe<ServiceSubscriptionHistoryRecord>;
  /**  Create multiple ServiceSubscriptionHistoryRecord items.  */
  createServiceSubscriptionHistoryRecords?: Maybe<Array<Maybe<ServiceSubscriptionHistoryRecord>>>;
  /**  Update a single ServiceSubscriptionHistoryRecord item by ID.  */
  updateServiceSubscriptionHistoryRecord?: Maybe<ServiceSubscriptionHistoryRecord>;
  /**  Update multiple ServiceSubscriptionHistoryRecord items by ID.  */
  updateServiceSubscriptionHistoryRecords?: Maybe<Array<Maybe<ServiceSubscriptionHistoryRecord>>>;
  /**  Delete a single ServiceSubscriptionHistoryRecord item by ID.  */
  deleteServiceSubscriptionHistoryRecord?: Maybe<ServiceSubscriptionHistoryRecord>;
  /**  Delete multiple ServiceSubscriptionHistoryRecord items by ID.  */
  deleteServiceSubscriptionHistoryRecords?: Maybe<Array<Maybe<ServiceSubscriptionHistoryRecord>>>;
  /**  Create a single ServiceSubscription item.  */
  createServiceSubscription?: Maybe<ServiceSubscription>;
  /**  Create multiple ServiceSubscription items.  */
  createServiceSubscriptions?: Maybe<Array<Maybe<ServiceSubscription>>>;
  /**  Update a single ServiceSubscription item by ID.  */
  updateServiceSubscription?: Maybe<ServiceSubscription>;
  /**  Update multiple ServiceSubscription items by ID.  */
  updateServiceSubscriptions?: Maybe<Array<Maybe<ServiceSubscription>>>;
  /**  Delete a single ServiceSubscription item by ID.  */
  deleteServiceSubscription?: Maybe<ServiceSubscription>;
  /**  Delete multiple ServiceSubscription items by ID.  */
  deleteServiceSubscriptions?: Maybe<Array<Maybe<ServiceSubscription>>>;
  /**  Create a single AcquiringIntegrationHistoryRecord item.  */
  createAcquiringIntegrationHistoryRecord?: Maybe<AcquiringIntegrationHistoryRecord>;
  /**  Create multiple AcquiringIntegrationHistoryRecord items.  */
  createAcquiringIntegrationHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationHistoryRecord>>>;
  /**  Update a single AcquiringIntegrationHistoryRecord item by ID.  */
  updateAcquiringIntegrationHistoryRecord?: Maybe<AcquiringIntegrationHistoryRecord>;
  /**  Update multiple AcquiringIntegrationHistoryRecord items by ID.  */
  updateAcquiringIntegrationHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationHistoryRecord>>>;
  /**  Delete a single AcquiringIntegrationHistoryRecord item by ID.  */
  deleteAcquiringIntegrationHistoryRecord?: Maybe<AcquiringIntegrationHistoryRecord>;
  /**  Delete multiple AcquiringIntegrationHistoryRecord items by ID.  */
  deleteAcquiringIntegrationHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationHistoryRecord>>>;
  /**  Create a single AcquiringIntegration item.  */
  createAcquiringIntegration?: Maybe<AcquiringIntegration>;
  /**  Create multiple AcquiringIntegration items.  */
  createAcquiringIntegrations?: Maybe<Array<Maybe<AcquiringIntegration>>>;
  /**  Update a single AcquiringIntegration item by ID.  */
  updateAcquiringIntegration?: Maybe<AcquiringIntegration>;
  /**  Update multiple AcquiringIntegration items by ID.  */
  updateAcquiringIntegrations?: Maybe<Array<Maybe<AcquiringIntegration>>>;
  /**  Delete a single AcquiringIntegration item by ID.  */
  deleteAcquiringIntegration?: Maybe<AcquiringIntegration>;
  /**  Delete multiple AcquiringIntegration items by ID.  */
  deleteAcquiringIntegrations?: Maybe<Array<Maybe<AcquiringIntegration>>>;
  /**  Create a single AcquiringIntegrationAccessRightHistoryRecord item.  */
  createAcquiringIntegrationAccessRightHistoryRecord?: Maybe<AcquiringIntegrationAccessRightHistoryRecord>;
  /**  Create multiple AcquiringIntegrationAccessRightHistoryRecord items.  */
  createAcquiringIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightHistoryRecord>>>;
  /**  Update a single AcquiringIntegrationAccessRightHistoryRecord item by ID.  */
  updateAcquiringIntegrationAccessRightHistoryRecord?: Maybe<AcquiringIntegrationAccessRightHistoryRecord>;
  /**  Update multiple AcquiringIntegrationAccessRightHistoryRecord items by ID.  */
  updateAcquiringIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightHistoryRecord>>>;
  /**  Delete a single AcquiringIntegrationAccessRightHistoryRecord item by ID.  */
  deleteAcquiringIntegrationAccessRightHistoryRecord?: Maybe<AcquiringIntegrationAccessRightHistoryRecord>;
  /**  Delete multiple AcquiringIntegrationAccessRightHistoryRecord items by ID.  */
  deleteAcquiringIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightHistoryRecord>>>;
  /**  Create a single AcquiringIntegrationAccessRight item.  */
  createAcquiringIntegrationAccessRight?: Maybe<AcquiringIntegrationAccessRight>;
  /**  Create multiple AcquiringIntegrationAccessRight items.  */
  createAcquiringIntegrationAccessRights?: Maybe<Array<Maybe<AcquiringIntegrationAccessRight>>>;
  /**  Update a single AcquiringIntegrationAccessRight item by ID.  */
  updateAcquiringIntegrationAccessRight?: Maybe<AcquiringIntegrationAccessRight>;
  /**  Update multiple AcquiringIntegrationAccessRight items by ID.  */
  updateAcquiringIntegrationAccessRights?: Maybe<Array<Maybe<AcquiringIntegrationAccessRight>>>;
  /**  Delete a single AcquiringIntegrationAccessRight item by ID.  */
  deleteAcquiringIntegrationAccessRight?: Maybe<AcquiringIntegrationAccessRight>;
  /**  Delete multiple AcquiringIntegrationAccessRight items by ID.  */
  deleteAcquiringIntegrationAccessRights?: Maybe<Array<Maybe<AcquiringIntegrationAccessRight>>>;
  /**  Create a single AcquiringIntegrationContextHistoryRecord item.  */
  createAcquiringIntegrationContextHistoryRecord?: Maybe<AcquiringIntegrationContextHistoryRecord>;
  /**  Create multiple AcquiringIntegrationContextHistoryRecord items.  */
  createAcquiringIntegrationContextHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationContextHistoryRecord>>>;
  /**  Update a single AcquiringIntegrationContextHistoryRecord item by ID.  */
  updateAcquiringIntegrationContextHistoryRecord?: Maybe<AcquiringIntegrationContextHistoryRecord>;
  /**  Update multiple AcquiringIntegrationContextHistoryRecord items by ID.  */
  updateAcquiringIntegrationContextHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationContextHistoryRecord>>>;
  /**  Delete a single AcquiringIntegrationContextHistoryRecord item by ID.  */
  deleteAcquiringIntegrationContextHistoryRecord?: Maybe<AcquiringIntegrationContextHistoryRecord>;
  /**  Delete multiple AcquiringIntegrationContextHistoryRecord items by ID.  */
  deleteAcquiringIntegrationContextHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationContextHistoryRecord>>>;
  /**  Create a single AcquiringIntegrationContext item.  */
  createAcquiringIntegrationContext?: Maybe<AcquiringIntegrationContext>;
  /**  Create multiple AcquiringIntegrationContext items.  */
  createAcquiringIntegrationContexts?: Maybe<Array<Maybe<AcquiringIntegrationContext>>>;
  /**  Update a single AcquiringIntegrationContext item by ID.  */
  updateAcquiringIntegrationContext?: Maybe<AcquiringIntegrationContext>;
  /**  Update multiple AcquiringIntegrationContext items by ID.  */
  updateAcquiringIntegrationContexts?: Maybe<Array<Maybe<AcquiringIntegrationContext>>>;
  /**  Delete a single AcquiringIntegrationContext item by ID.  */
  deleteAcquiringIntegrationContext?: Maybe<AcquiringIntegrationContext>;
  /**  Delete multiple AcquiringIntegrationContext items by ID.  */
  deleteAcquiringIntegrationContexts?: Maybe<Array<Maybe<AcquiringIntegrationContext>>>;
  /**  Create a single MultiPaymentHistoryRecord item.  */
  createMultiPaymentHistoryRecord?: Maybe<MultiPaymentHistoryRecord>;
  /**  Create multiple MultiPaymentHistoryRecord items.  */
  createMultiPaymentHistoryRecords?: Maybe<Array<Maybe<MultiPaymentHistoryRecord>>>;
  /**  Update a single MultiPaymentHistoryRecord item by ID.  */
  updateMultiPaymentHistoryRecord?: Maybe<MultiPaymentHistoryRecord>;
  /**  Update multiple MultiPaymentHistoryRecord items by ID.  */
  updateMultiPaymentHistoryRecords?: Maybe<Array<Maybe<MultiPaymentHistoryRecord>>>;
  /**  Delete a single MultiPaymentHistoryRecord item by ID.  */
  deleteMultiPaymentHistoryRecord?: Maybe<MultiPaymentHistoryRecord>;
  /**  Delete multiple MultiPaymentHistoryRecord items by ID.  */
  deleteMultiPaymentHistoryRecords?: Maybe<Array<Maybe<MultiPaymentHistoryRecord>>>;
  /**  Create a single MultiPayment item.  */
  createMultiPayment?: Maybe<MultiPayment>;
  /**  Create multiple MultiPayment items.  */
  createMultiPayments?: Maybe<Array<Maybe<MultiPayment>>>;
  /**  Update a single MultiPayment item by ID.  */
  updateMultiPayment?: Maybe<MultiPayment>;
  /**  Update multiple MultiPayment items by ID.  */
  updateMultiPayments?: Maybe<Array<Maybe<MultiPayment>>>;
  /**  Delete a single MultiPayment item by ID.  */
  deleteMultiPayment?: Maybe<MultiPayment>;
  /**  Delete multiple MultiPayment items by ID.  */
  deleteMultiPayments?: Maybe<Array<Maybe<MultiPayment>>>;
  /**  Create a single PaymentHistoryRecord item.  */
  createPaymentHistoryRecord?: Maybe<PaymentHistoryRecord>;
  /**  Create multiple PaymentHistoryRecord items.  */
  createPaymentHistoryRecords?: Maybe<Array<Maybe<PaymentHistoryRecord>>>;
  /**  Update a single PaymentHistoryRecord item by ID.  */
  updatePaymentHistoryRecord?: Maybe<PaymentHistoryRecord>;
  /**  Update multiple PaymentHistoryRecord items by ID.  */
  updatePaymentHistoryRecords?: Maybe<Array<Maybe<PaymentHistoryRecord>>>;
  /**  Delete a single PaymentHistoryRecord item by ID.  */
  deletePaymentHistoryRecord?: Maybe<PaymentHistoryRecord>;
  /**  Delete multiple PaymentHistoryRecord items by ID.  */
  deletePaymentHistoryRecords?: Maybe<Array<Maybe<PaymentHistoryRecord>>>;
  /**  Create a single Payment item.  */
  createPayment?: Maybe<Payment>;
  /**  Create multiple Payment items.  */
  createPayments?: Maybe<Array<Maybe<Payment>>>;
  /**  Update a single Payment item by ID.  */
  updatePayment?: Maybe<Payment>;
  /**  Update multiple Payment items by ID.  */
  updatePayments?: Maybe<Array<Maybe<Payment>>>;
  /**  Delete a single Payment item by ID.  */
  deletePayment?: Maybe<Payment>;
  /**  Delete multiple Payment items by ID.  */
  deletePayments?: Maybe<Array<Maybe<Payment>>>;
  /**  Create a single PaymentsFilterTemplateHistoryRecord item.  */
  createPaymentsFilterTemplateHistoryRecord?: Maybe<PaymentsFilterTemplateHistoryRecord>;
  /**  Create multiple PaymentsFilterTemplateHistoryRecord items.  */
  createPaymentsFilterTemplateHistoryRecords?: Maybe<Array<Maybe<PaymentsFilterTemplateHistoryRecord>>>;
  /**  Update a single PaymentsFilterTemplateHistoryRecord item by ID.  */
  updatePaymentsFilterTemplateHistoryRecord?: Maybe<PaymentsFilterTemplateHistoryRecord>;
  /**  Update multiple PaymentsFilterTemplateHistoryRecord items by ID.  */
  updatePaymentsFilterTemplateHistoryRecords?: Maybe<Array<Maybe<PaymentsFilterTemplateHistoryRecord>>>;
  /**  Delete a single PaymentsFilterTemplateHistoryRecord item by ID.  */
  deletePaymentsFilterTemplateHistoryRecord?: Maybe<PaymentsFilterTemplateHistoryRecord>;
  /**  Delete multiple PaymentsFilterTemplateHistoryRecord items by ID.  */
  deletePaymentsFilterTemplateHistoryRecords?: Maybe<Array<Maybe<PaymentsFilterTemplateHistoryRecord>>>;
  /**  Create a single PaymentsFilterTemplate item.  */
  createPaymentsFilterTemplate?: Maybe<PaymentsFilterTemplate>;
  /**  Create multiple PaymentsFilterTemplate items.  */
  createPaymentsFilterTemplates?: Maybe<Array<Maybe<PaymentsFilterTemplate>>>;
  /**  Update a single PaymentsFilterTemplate item by ID.  */
  updatePaymentsFilterTemplate?: Maybe<PaymentsFilterTemplate>;
  /**  Update multiple PaymentsFilterTemplate items by ID.  */
  updatePaymentsFilterTemplates?: Maybe<Array<Maybe<PaymentsFilterTemplate>>>;
  /**  Delete a single PaymentsFilterTemplate item by ID.  */
  deletePaymentsFilterTemplate?: Maybe<PaymentsFilterTemplate>;
  /**  Delete multiple PaymentsFilterTemplate items by ID.  */
  deletePaymentsFilterTemplates?: Maybe<Array<Maybe<PaymentsFilterTemplate>>>;
  /**  Create a single RecurrentPaymentContextHistoryRecord item.  */
  createRecurrentPaymentContextHistoryRecord?: Maybe<RecurrentPaymentContextHistoryRecord>;
  /**  Create multiple RecurrentPaymentContextHistoryRecord items.  */
  createRecurrentPaymentContextHistoryRecords?: Maybe<Array<Maybe<RecurrentPaymentContextHistoryRecord>>>;
  /**  Update a single RecurrentPaymentContextHistoryRecord item by ID.  */
  updateRecurrentPaymentContextHistoryRecord?: Maybe<RecurrentPaymentContextHistoryRecord>;
  /**  Update multiple RecurrentPaymentContextHistoryRecord items by ID.  */
  updateRecurrentPaymentContextHistoryRecords?: Maybe<Array<Maybe<RecurrentPaymentContextHistoryRecord>>>;
  /**  Delete a single RecurrentPaymentContextHistoryRecord item by ID.  */
  deleteRecurrentPaymentContextHistoryRecord?: Maybe<RecurrentPaymentContextHistoryRecord>;
  /**  Delete multiple RecurrentPaymentContextHistoryRecord items by ID.  */
  deleteRecurrentPaymentContextHistoryRecords?: Maybe<Array<Maybe<RecurrentPaymentContextHistoryRecord>>>;
  /**  Create a single RecurrentPaymentContext item.  */
  createRecurrentPaymentContext?: Maybe<RecurrentPaymentContext>;
  /**  Create multiple RecurrentPaymentContext items.  */
  createRecurrentPaymentContexts?: Maybe<Array<Maybe<RecurrentPaymentContext>>>;
  /**  Update a single RecurrentPaymentContext item by ID.  */
  updateRecurrentPaymentContext?: Maybe<RecurrentPaymentContext>;
  /**  Update multiple RecurrentPaymentContext items by ID.  */
  updateRecurrentPaymentContexts?: Maybe<Array<Maybe<RecurrentPaymentContext>>>;
  /**  Delete a single RecurrentPaymentContext item by ID.  */
  deleteRecurrentPaymentContext?: Maybe<RecurrentPaymentContext>;
  /**  Delete multiple RecurrentPaymentContext items by ID.  */
  deleteRecurrentPaymentContexts?: Maybe<Array<Maybe<RecurrentPaymentContext>>>;
  /**  Create a single RecurrentPaymentHistoryRecord item.  */
  createRecurrentPaymentHistoryRecord?: Maybe<RecurrentPaymentHistoryRecord>;
  /**  Create multiple RecurrentPaymentHistoryRecord items.  */
  createRecurrentPaymentHistoryRecords?: Maybe<Array<Maybe<RecurrentPaymentHistoryRecord>>>;
  /**  Update a single RecurrentPaymentHistoryRecord item by ID.  */
  updateRecurrentPaymentHistoryRecord?: Maybe<RecurrentPaymentHistoryRecord>;
  /**  Update multiple RecurrentPaymentHistoryRecord items by ID.  */
  updateRecurrentPaymentHistoryRecords?: Maybe<Array<Maybe<RecurrentPaymentHistoryRecord>>>;
  /**  Delete a single RecurrentPaymentHistoryRecord item by ID.  */
  deleteRecurrentPaymentHistoryRecord?: Maybe<RecurrentPaymentHistoryRecord>;
  /**  Delete multiple RecurrentPaymentHistoryRecord items by ID.  */
  deleteRecurrentPaymentHistoryRecords?: Maybe<Array<Maybe<RecurrentPaymentHistoryRecord>>>;
  /**  Create a single RecurrentPayment item.  */
  createRecurrentPayment?: Maybe<RecurrentPayment>;
  /**  Create multiple RecurrentPayment items.  */
  createRecurrentPayments?: Maybe<Array<Maybe<RecurrentPayment>>>;
  /**  Update a single RecurrentPayment item by ID.  */
  updateRecurrentPayment?: Maybe<RecurrentPayment>;
  /**  Update multiple RecurrentPayment items by ID.  */
  updateRecurrentPayments?: Maybe<Array<Maybe<RecurrentPayment>>>;
  /**  Delete a single RecurrentPayment item by ID.  */
  deleteRecurrentPayment?: Maybe<RecurrentPayment>;
  /**  Delete multiple RecurrentPayment items by ID.  */
  deleteRecurrentPayments?: Maybe<Array<Maybe<RecurrentPayment>>>;
  /**  Create a single B2BAppHistoryRecord item.  */
  createB2BAppHistoryRecord?: Maybe<B2BAppHistoryRecord>;
  /**  Create multiple B2BAppHistoryRecord items.  */
  createB2BAppHistoryRecords?: Maybe<Array<Maybe<B2BAppHistoryRecord>>>;
  /**  Update a single B2BAppHistoryRecord item by ID.  */
  updateB2BAppHistoryRecord?: Maybe<B2BAppHistoryRecord>;
  /**  Update multiple B2BAppHistoryRecord items by ID.  */
  updateB2BAppHistoryRecords?: Maybe<Array<Maybe<B2BAppHistoryRecord>>>;
  /**  Delete a single B2BAppHistoryRecord item by ID.  */
  deleteB2BAppHistoryRecord?: Maybe<B2BAppHistoryRecord>;
  /**  Delete multiple B2BAppHistoryRecord items by ID.  */
  deleteB2BAppHistoryRecords?: Maybe<Array<Maybe<B2BAppHistoryRecord>>>;
  /**  Create a single B2BApp item.  */
  createB2BApp?: Maybe<B2BApp>;
  /**  Create multiple B2BApp items.  */
  createB2BApps?: Maybe<Array<Maybe<B2BApp>>>;
  /**  Update a single B2BApp item by ID.  */
  updateB2BApp?: Maybe<B2BApp>;
  /**  Update multiple B2BApp items by ID.  */
  updateB2BApps?: Maybe<Array<Maybe<B2BApp>>>;
  /**  Delete a single B2BApp item by ID.  */
  deleteB2BApp?: Maybe<B2BApp>;
  /**  Delete multiple B2BApp items by ID.  */
  deleteB2BApps?: Maybe<Array<Maybe<B2BApp>>>;
  /**  Create a single B2BAppContextHistoryRecord item.  */
  createB2BAppContextHistoryRecord?: Maybe<B2BAppContextHistoryRecord>;
  /**  Create multiple B2BAppContextHistoryRecord items.  */
  createB2BAppContextHistoryRecords?: Maybe<Array<Maybe<B2BAppContextHistoryRecord>>>;
  /**  Update a single B2BAppContextHistoryRecord item by ID.  */
  updateB2BAppContextHistoryRecord?: Maybe<B2BAppContextHistoryRecord>;
  /**  Update multiple B2BAppContextHistoryRecord items by ID.  */
  updateB2BAppContextHistoryRecords?: Maybe<Array<Maybe<B2BAppContextHistoryRecord>>>;
  /**  Delete a single B2BAppContextHistoryRecord item by ID.  */
  deleteB2BAppContextHistoryRecord?: Maybe<B2BAppContextHistoryRecord>;
  /**  Delete multiple B2BAppContextHistoryRecord items by ID.  */
  deleteB2BAppContextHistoryRecords?: Maybe<Array<Maybe<B2BAppContextHistoryRecord>>>;
  /**  Create a single B2BAppContext item.  */
  createB2BAppContext?: Maybe<B2BAppContext>;
  /**  Create multiple B2BAppContext items.  */
  createB2BAppContexts?: Maybe<Array<Maybe<B2BAppContext>>>;
  /**  Update a single B2BAppContext item by ID.  */
  updateB2BAppContext?: Maybe<B2BAppContext>;
  /**  Update multiple B2BAppContext items by ID.  */
  updateB2BAppContexts?: Maybe<Array<Maybe<B2BAppContext>>>;
  /**  Delete a single B2BAppContext item by ID.  */
  deleteB2BAppContext?: Maybe<B2BAppContext>;
  /**  Delete multiple B2BAppContext items by ID.  */
  deleteB2BAppContexts?: Maybe<Array<Maybe<B2BAppContext>>>;
  /**  Create a single B2BAppAccessRightHistoryRecord item.  */
  createB2BAppAccessRightHistoryRecord?: Maybe<B2BAppAccessRightHistoryRecord>;
  /**  Create multiple B2BAppAccessRightHistoryRecord items.  */
  createB2BAppAccessRightHistoryRecords?: Maybe<Array<Maybe<B2BAppAccessRightHistoryRecord>>>;
  /**  Update a single B2BAppAccessRightHistoryRecord item by ID.  */
  updateB2BAppAccessRightHistoryRecord?: Maybe<B2BAppAccessRightHistoryRecord>;
  /**  Update multiple B2BAppAccessRightHistoryRecord items by ID.  */
  updateB2BAppAccessRightHistoryRecords?: Maybe<Array<Maybe<B2BAppAccessRightHistoryRecord>>>;
  /**  Delete a single B2BAppAccessRightHistoryRecord item by ID.  */
  deleteB2BAppAccessRightHistoryRecord?: Maybe<B2BAppAccessRightHistoryRecord>;
  /**  Delete multiple B2BAppAccessRightHistoryRecord items by ID.  */
  deleteB2BAppAccessRightHistoryRecords?: Maybe<Array<Maybe<B2BAppAccessRightHistoryRecord>>>;
  /**  Create a single B2BAppAccessRight item.  */
  createB2BAppAccessRight?: Maybe<B2BAppAccessRight>;
  /**  Create multiple B2BAppAccessRight items.  */
  createB2BAppAccessRights?: Maybe<Array<Maybe<B2BAppAccessRight>>>;
  /**  Update a single B2BAppAccessRight item by ID.  */
  updateB2BAppAccessRight?: Maybe<B2BAppAccessRight>;
  /**  Update multiple B2BAppAccessRight items by ID.  */
  updateB2BAppAccessRights?: Maybe<Array<Maybe<B2BAppAccessRight>>>;
  /**  Delete a single B2BAppAccessRight item by ID.  */
  deleteB2BAppAccessRight?: Maybe<B2BAppAccessRight>;
  /**  Delete multiple B2BAppAccessRight items by ID.  */
  deleteB2BAppAccessRights?: Maybe<Array<Maybe<B2BAppAccessRight>>>;
  /**  Create a single B2CAppHistoryRecord item.  */
  createB2CAppHistoryRecord?: Maybe<B2CAppHistoryRecord>;
  /**  Create multiple B2CAppHistoryRecord items.  */
  createB2CAppHistoryRecords?: Maybe<Array<Maybe<B2CAppHistoryRecord>>>;
  /**  Update a single B2CAppHistoryRecord item by ID.  */
  updateB2CAppHistoryRecord?: Maybe<B2CAppHistoryRecord>;
  /**  Update multiple B2CAppHistoryRecord items by ID.  */
  updateB2CAppHistoryRecords?: Maybe<Array<Maybe<B2CAppHistoryRecord>>>;
  /**  Delete a single B2CAppHistoryRecord item by ID.  */
  deleteB2CAppHistoryRecord?: Maybe<B2CAppHistoryRecord>;
  /**  Delete multiple B2CAppHistoryRecord items by ID.  */
  deleteB2CAppHistoryRecords?: Maybe<Array<Maybe<B2CAppHistoryRecord>>>;
  /**  Create a single B2CApp item.  */
  createB2CApp?: Maybe<B2CApp>;
  /**  Create multiple B2CApp items.  */
  createB2CApps?: Maybe<Array<Maybe<B2CApp>>>;
  /**  Update a single B2CApp item by ID.  */
  updateB2CApp?: Maybe<B2CApp>;
  /**  Update multiple B2CApp items by ID.  */
  updateB2CApps?: Maybe<Array<Maybe<B2CApp>>>;
  /**  Delete a single B2CApp item by ID.  */
  deleteB2CApp?: Maybe<B2CApp>;
  /**  Delete multiple B2CApp items by ID.  */
  deleteB2CApps?: Maybe<Array<Maybe<B2CApp>>>;
  /**  Create a single B2CAppAccessRightHistoryRecord item.  */
  createB2CAppAccessRightHistoryRecord?: Maybe<B2CAppAccessRightHistoryRecord>;
  /**  Create multiple B2CAppAccessRightHistoryRecord items.  */
  createB2CAppAccessRightHistoryRecords?: Maybe<Array<Maybe<B2CAppAccessRightHistoryRecord>>>;
  /**  Update a single B2CAppAccessRightHistoryRecord item by ID.  */
  updateB2CAppAccessRightHistoryRecord?: Maybe<B2CAppAccessRightHistoryRecord>;
  /**  Update multiple B2CAppAccessRightHistoryRecord items by ID.  */
  updateB2CAppAccessRightHistoryRecords?: Maybe<Array<Maybe<B2CAppAccessRightHistoryRecord>>>;
  /**  Delete a single B2CAppAccessRightHistoryRecord item by ID.  */
  deleteB2CAppAccessRightHistoryRecord?: Maybe<B2CAppAccessRightHistoryRecord>;
  /**  Delete multiple B2CAppAccessRightHistoryRecord items by ID.  */
  deleteB2CAppAccessRightHistoryRecords?: Maybe<Array<Maybe<B2CAppAccessRightHistoryRecord>>>;
  /**  Create a single B2CAppAccessRight item.  */
  createB2CAppAccessRight?: Maybe<B2CAppAccessRight>;
  /**  Create multiple B2CAppAccessRight items.  */
  createB2CAppAccessRights?: Maybe<Array<Maybe<B2CAppAccessRight>>>;
  /**  Update a single B2CAppAccessRight item by ID.  */
  updateB2CAppAccessRight?: Maybe<B2CAppAccessRight>;
  /**  Update multiple B2CAppAccessRight items by ID.  */
  updateB2CAppAccessRights?: Maybe<Array<Maybe<B2CAppAccessRight>>>;
  /**  Delete a single B2CAppAccessRight item by ID.  */
  deleteB2CAppAccessRight?: Maybe<B2CAppAccessRight>;
  /**  Delete multiple B2CAppAccessRight items by ID.  */
  deleteB2CAppAccessRights?: Maybe<Array<Maybe<B2CAppAccessRight>>>;
  /**  Create a single B2CAppBuildHistoryRecord item.  */
  createB2CAppBuildHistoryRecord?: Maybe<B2CAppBuildHistoryRecord>;
  /**  Create multiple B2CAppBuildHistoryRecord items.  */
  createB2CAppBuildHistoryRecords?: Maybe<Array<Maybe<B2CAppBuildHistoryRecord>>>;
  /**  Update a single B2CAppBuildHistoryRecord item by ID.  */
  updateB2CAppBuildHistoryRecord?: Maybe<B2CAppBuildHistoryRecord>;
  /**  Update multiple B2CAppBuildHistoryRecord items by ID.  */
  updateB2CAppBuildHistoryRecords?: Maybe<Array<Maybe<B2CAppBuildHistoryRecord>>>;
  /**  Delete a single B2CAppBuildHistoryRecord item by ID.  */
  deleteB2CAppBuildHistoryRecord?: Maybe<B2CAppBuildHistoryRecord>;
  /**  Delete multiple B2CAppBuildHistoryRecord items by ID.  */
  deleteB2CAppBuildHistoryRecords?: Maybe<Array<Maybe<B2CAppBuildHistoryRecord>>>;
  /**  Create a single B2CAppBuild item.  */
  createB2CAppBuild?: Maybe<B2CAppBuild>;
  /**  Create multiple B2CAppBuild items.  */
  createB2CAppBuilds?: Maybe<Array<Maybe<B2CAppBuild>>>;
  /**  Update a single B2CAppBuild item by ID.  */
  updateB2CAppBuild?: Maybe<B2CAppBuild>;
  /**  Update multiple B2CAppBuild items by ID.  */
  updateB2CAppBuilds?: Maybe<Array<Maybe<B2CAppBuild>>>;
  /**  Delete a single B2CAppBuild item by ID.  */
  deleteB2CAppBuild?: Maybe<B2CAppBuild>;
  /**  Delete multiple B2CAppBuild items by ID.  */
  deleteB2CAppBuilds?: Maybe<Array<Maybe<B2CAppBuild>>>;
  /**  Create a single B2CAppPropertyHistoryRecord item.  */
  createB2CAppPropertyHistoryRecord?: Maybe<B2CAppPropertyHistoryRecord>;
  /**  Create multiple B2CAppPropertyHistoryRecord items.  */
  createB2CAppPropertyHistoryRecords?: Maybe<Array<Maybe<B2CAppPropertyHistoryRecord>>>;
  /**  Update a single B2CAppPropertyHistoryRecord item by ID.  */
  updateB2CAppPropertyHistoryRecord?: Maybe<B2CAppPropertyHistoryRecord>;
  /**  Update multiple B2CAppPropertyHistoryRecord items by ID.  */
  updateB2CAppPropertyHistoryRecords?: Maybe<Array<Maybe<B2CAppPropertyHistoryRecord>>>;
  /**  Delete a single B2CAppPropertyHistoryRecord item by ID.  */
  deleteB2CAppPropertyHistoryRecord?: Maybe<B2CAppPropertyHistoryRecord>;
  /**  Delete multiple B2CAppPropertyHistoryRecord items by ID.  */
  deleteB2CAppPropertyHistoryRecords?: Maybe<Array<Maybe<B2CAppPropertyHistoryRecord>>>;
  /**  Create a single B2CAppProperty item.  */
  createB2CAppProperty?: Maybe<B2CAppProperty>;
  /**  Create multiple B2CAppProperty items.  */
  createB2CAppProperties?: Maybe<Array<Maybe<B2CAppProperty>>>;
  /**  Update a single B2CAppProperty item by ID.  */
  updateB2CAppProperty?: Maybe<B2CAppProperty>;
  /**  Update multiple B2CAppProperty items by ID.  */
  updateB2CAppProperties?: Maybe<Array<Maybe<B2CAppProperty>>>;
  /**  Delete a single B2CAppProperty item by ID.  */
  deleteB2CAppProperty?: Maybe<B2CAppProperty>;
  /**  Delete multiple B2CAppProperty items by ID.  */
  deleteB2CAppProperties?: Maybe<Array<Maybe<B2CAppProperty>>>;
  /**  Create a single B2BAppPromoBlockHistoryRecord item.  */
  createB2BAppPromoBlockHistoryRecord?: Maybe<B2BAppPromoBlockHistoryRecord>;
  /**  Create multiple B2BAppPromoBlockHistoryRecord items.  */
  createB2BAppPromoBlockHistoryRecords?: Maybe<Array<Maybe<B2BAppPromoBlockHistoryRecord>>>;
  /**  Update a single B2BAppPromoBlockHistoryRecord item by ID.  */
  updateB2BAppPromoBlockHistoryRecord?: Maybe<B2BAppPromoBlockHistoryRecord>;
  /**  Update multiple B2BAppPromoBlockHistoryRecord items by ID.  */
  updateB2BAppPromoBlockHistoryRecords?: Maybe<Array<Maybe<B2BAppPromoBlockHistoryRecord>>>;
  /**  Delete a single B2BAppPromoBlockHistoryRecord item by ID.  */
  deleteB2BAppPromoBlockHistoryRecord?: Maybe<B2BAppPromoBlockHistoryRecord>;
  /**  Delete multiple B2BAppPromoBlockHistoryRecord items by ID.  */
  deleteB2BAppPromoBlockHistoryRecords?: Maybe<Array<Maybe<B2BAppPromoBlockHistoryRecord>>>;
  /**  Create a single B2BAppPromoBlock item.  */
  createB2BAppPromoBlock?: Maybe<B2BAppPromoBlock>;
  /**  Create multiple B2BAppPromoBlock items.  */
  createB2BAppPromoBlocks?: Maybe<Array<Maybe<B2BAppPromoBlock>>>;
  /**  Update a single B2BAppPromoBlock item by ID.  */
  updateB2BAppPromoBlock?: Maybe<B2BAppPromoBlock>;
  /**  Update multiple B2BAppPromoBlock items by ID.  */
  updateB2BAppPromoBlocks?: Maybe<Array<Maybe<B2BAppPromoBlock>>>;
  /**  Delete a single B2BAppPromoBlock item by ID.  */
  deleteB2BAppPromoBlock?: Maybe<B2BAppPromoBlock>;
  /**  Delete multiple B2BAppPromoBlock items by ID.  */
  deleteB2BAppPromoBlocks?: Maybe<Array<Maybe<B2BAppPromoBlock>>>;
  /**  Create a single MessageAppBlackListHistoryRecord item.  */
  createMessageAppBlackListHistoryRecord?: Maybe<MessageAppBlackListHistoryRecord>;
  /**  Create multiple MessageAppBlackListHistoryRecord items.  */
  createMessageAppBlackListHistoryRecords?: Maybe<Array<Maybe<MessageAppBlackListHistoryRecord>>>;
  /**  Update a single MessageAppBlackListHistoryRecord item by ID.  */
  updateMessageAppBlackListHistoryRecord?: Maybe<MessageAppBlackListHistoryRecord>;
  /**  Update multiple MessageAppBlackListHistoryRecord items by ID.  */
  updateMessageAppBlackListHistoryRecords?: Maybe<Array<Maybe<MessageAppBlackListHistoryRecord>>>;
  /**  Delete a single MessageAppBlackListHistoryRecord item by ID.  */
  deleteMessageAppBlackListHistoryRecord?: Maybe<MessageAppBlackListHistoryRecord>;
  /**  Delete multiple MessageAppBlackListHistoryRecord items by ID.  */
  deleteMessageAppBlackListHistoryRecords?: Maybe<Array<Maybe<MessageAppBlackListHistoryRecord>>>;
  /**  Create a single MessageAppBlackList item.  */
  createMessageAppBlackList?: Maybe<MessageAppBlackList>;
  /**  Create multiple MessageAppBlackList items.  */
  createMessageAppBlackLists?: Maybe<Array<Maybe<MessageAppBlackList>>>;
  /**  Update a single MessageAppBlackList item by ID.  */
  updateMessageAppBlackList?: Maybe<MessageAppBlackList>;
  /**  Update multiple MessageAppBlackList items by ID.  */
  updateMessageAppBlackLists?: Maybe<Array<Maybe<MessageAppBlackList>>>;
  /**  Delete a single MessageAppBlackList item by ID.  */
  deleteMessageAppBlackList?: Maybe<MessageAppBlackList>;
  /**  Delete multiple MessageAppBlackList items by ID.  */
  deleteMessageAppBlackLists?: Maybe<Array<Maybe<MessageAppBlackList>>>;
  /**  Create a single ExternalReportHistoryRecord item.  */
  createExternalReportHistoryRecord?: Maybe<ExternalReportHistoryRecord>;
  /**  Create multiple ExternalReportHistoryRecord items.  */
  createExternalReportHistoryRecords?: Maybe<Array<Maybe<ExternalReportHistoryRecord>>>;
  /**  Update a single ExternalReportHistoryRecord item by ID.  */
  updateExternalReportHistoryRecord?: Maybe<ExternalReportHistoryRecord>;
  /**  Update multiple ExternalReportHistoryRecord items by ID.  */
  updateExternalReportHistoryRecords?: Maybe<Array<Maybe<ExternalReportHistoryRecord>>>;
  /**  Delete a single ExternalReportHistoryRecord item by ID.  */
  deleteExternalReportHistoryRecord?: Maybe<ExternalReportHistoryRecord>;
  /**  Delete multiple ExternalReportHistoryRecord items by ID.  */
  deleteExternalReportHistoryRecords?: Maybe<Array<Maybe<ExternalReportHistoryRecord>>>;
  /**  Create a single ExternalReport item.  */
  createExternalReport?: Maybe<ExternalReport>;
  /**  Create multiple ExternalReport items.  */
  createExternalReports?: Maybe<Array<Maybe<ExternalReport>>>;
  /**  Update a single ExternalReport item by ID.  */
  updateExternalReport?: Maybe<ExternalReport>;
  /**  Update multiple ExternalReport items by ID.  */
  updateExternalReports?: Maybe<Array<Maybe<ExternalReport>>>;
  /**  Delete a single ExternalReport item by ID.  */
  deleteExternalReport?: Maybe<ExternalReport>;
  /**  Delete multiple ExternalReport items by ID.  */
  deleteExternalReports?: Maybe<Array<Maybe<ExternalReport>>>;
  /**  Create a single PropertyScopeHistoryRecord item.  */
  createPropertyScopeHistoryRecord?: Maybe<PropertyScopeHistoryRecord>;
  /**  Create multiple PropertyScopeHistoryRecord items.  */
  createPropertyScopeHistoryRecords?: Maybe<Array<Maybe<PropertyScopeHistoryRecord>>>;
  /**  Update a single PropertyScopeHistoryRecord item by ID.  */
  updatePropertyScopeHistoryRecord?: Maybe<PropertyScopeHistoryRecord>;
  /**  Update multiple PropertyScopeHistoryRecord items by ID.  */
  updatePropertyScopeHistoryRecords?: Maybe<Array<Maybe<PropertyScopeHistoryRecord>>>;
  /**  Delete a single PropertyScopeHistoryRecord item by ID.  */
  deletePropertyScopeHistoryRecord?: Maybe<PropertyScopeHistoryRecord>;
  /**  Delete multiple PropertyScopeHistoryRecord items by ID.  */
  deletePropertyScopeHistoryRecords?: Maybe<Array<Maybe<PropertyScopeHistoryRecord>>>;
  /**  Create a single PropertyScope item.  */
  createPropertyScope?: Maybe<PropertyScope>;
  /**  Create multiple PropertyScope items.  */
  createPropertyScopes?: Maybe<Array<Maybe<PropertyScope>>>;
  /**  Update a single PropertyScope item by ID.  */
  updatePropertyScope?: Maybe<PropertyScope>;
  /**  Update multiple PropertyScope items by ID.  */
  updatePropertyScopes?: Maybe<Array<Maybe<PropertyScope>>>;
  /**  Delete a single PropertyScope item by ID.  */
  deletePropertyScope?: Maybe<PropertyScope>;
  /**  Delete multiple PropertyScope items by ID.  */
  deletePropertyScopes?: Maybe<Array<Maybe<PropertyScope>>>;
  /**  Create a single PropertyScopeOrganizationEmployeeHistoryRecord item.  */
  createPropertyScopeOrganizationEmployeeHistoryRecord?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecord>;
  /**  Create multiple PropertyScopeOrganizationEmployeeHistoryRecord items.  */
  createPropertyScopeOrganizationEmployeeHistoryRecords?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeHistoryRecord>>>;
  /**  Update a single PropertyScopeOrganizationEmployeeHistoryRecord item by ID.  */
  updatePropertyScopeOrganizationEmployeeHistoryRecord?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecord>;
  /**  Update multiple PropertyScopeOrganizationEmployeeHistoryRecord items by ID.  */
  updatePropertyScopeOrganizationEmployeeHistoryRecords?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeHistoryRecord>>>;
  /**  Delete a single PropertyScopeOrganizationEmployeeHistoryRecord item by ID.  */
  deletePropertyScopeOrganizationEmployeeHistoryRecord?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecord>;
  /**  Delete multiple PropertyScopeOrganizationEmployeeHistoryRecord items by ID.  */
  deletePropertyScopeOrganizationEmployeeHistoryRecords?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeHistoryRecord>>>;
  /**  Create a single PropertyScopeOrganizationEmployee item.  */
  createPropertyScopeOrganizationEmployee?: Maybe<PropertyScopeOrganizationEmployee>;
  /**  Create multiple PropertyScopeOrganizationEmployee items.  */
  createPropertyScopeOrganizationEmployees?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployee>>>;
  /**  Update a single PropertyScopeOrganizationEmployee item by ID.  */
  updatePropertyScopeOrganizationEmployee?: Maybe<PropertyScopeOrganizationEmployee>;
  /**  Update multiple PropertyScopeOrganizationEmployee items by ID.  */
  updatePropertyScopeOrganizationEmployees?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployee>>>;
  /**  Delete a single PropertyScopeOrganizationEmployee item by ID.  */
  deletePropertyScopeOrganizationEmployee?: Maybe<PropertyScopeOrganizationEmployee>;
  /**  Delete multiple PropertyScopeOrganizationEmployee items by ID.  */
  deletePropertyScopeOrganizationEmployees?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployee>>>;
  /**  Create a single PropertyScopePropertyHistoryRecord item.  */
  createPropertyScopePropertyHistoryRecord?: Maybe<PropertyScopePropertyHistoryRecord>;
  /**  Create multiple PropertyScopePropertyHistoryRecord items.  */
  createPropertyScopePropertyHistoryRecords?: Maybe<Array<Maybe<PropertyScopePropertyHistoryRecord>>>;
  /**  Update a single PropertyScopePropertyHistoryRecord item by ID.  */
  updatePropertyScopePropertyHistoryRecord?: Maybe<PropertyScopePropertyHistoryRecord>;
  /**  Update multiple PropertyScopePropertyHistoryRecord items by ID.  */
  updatePropertyScopePropertyHistoryRecords?: Maybe<Array<Maybe<PropertyScopePropertyHistoryRecord>>>;
  /**  Delete a single PropertyScopePropertyHistoryRecord item by ID.  */
  deletePropertyScopePropertyHistoryRecord?: Maybe<PropertyScopePropertyHistoryRecord>;
  /**  Delete multiple PropertyScopePropertyHistoryRecord items by ID.  */
  deletePropertyScopePropertyHistoryRecords?: Maybe<Array<Maybe<PropertyScopePropertyHistoryRecord>>>;
  /**  Create a single PropertyScopeProperty item.  */
  createPropertyScopeProperty?: Maybe<PropertyScopeProperty>;
  /**  Create multiple PropertyScopeProperty items.  */
  createPropertyScopeProperties?: Maybe<Array<Maybe<PropertyScopeProperty>>>;
  /**  Update a single PropertyScopeProperty item by ID.  */
  updatePropertyScopeProperty?: Maybe<PropertyScopeProperty>;
  /**  Update multiple PropertyScopeProperty items by ID.  */
  updatePropertyScopeProperties?: Maybe<Array<Maybe<PropertyScopeProperty>>>;
  /**  Delete a single PropertyScopeProperty item by ID.  */
  deletePropertyScopeProperty?: Maybe<PropertyScopeProperty>;
  /**  Delete multiple PropertyScopeProperty items by ID.  */
  deletePropertyScopeProperties?: Maybe<Array<Maybe<PropertyScopeProperty>>>;
  /**  Create a single AssigneeScopeHistoryRecord item.  */
  createAssigneeScopeHistoryRecord?: Maybe<AssigneeScopeHistoryRecord>;
  /**  Create multiple AssigneeScopeHistoryRecord items.  */
  createAssigneeScopeHistoryRecords?: Maybe<Array<Maybe<AssigneeScopeHistoryRecord>>>;
  /**  Update a single AssigneeScopeHistoryRecord item by ID.  */
  updateAssigneeScopeHistoryRecord?: Maybe<AssigneeScopeHistoryRecord>;
  /**  Update multiple AssigneeScopeHistoryRecord items by ID.  */
  updateAssigneeScopeHistoryRecords?: Maybe<Array<Maybe<AssigneeScopeHistoryRecord>>>;
  /**  Delete a single AssigneeScopeHistoryRecord item by ID.  */
  deleteAssigneeScopeHistoryRecord?: Maybe<AssigneeScopeHistoryRecord>;
  /**  Delete multiple AssigneeScopeHistoryRecord items by ID.  */
  deleteAssigneeScopeHistoryRecords?: Maybe<Array<Maybe<AssigneeScopeHistoryRecord>>>;
  /**  Create a single AssigneeScope item.  */
  createAssigneeScope?: Maybe<AssigneeScope>;
  /**  Create multiple AssigneeScope items.  */
  createAssigneeScopes?: Maybe<Array<Maybe<AssigneeScope>>>;
  /**  Update a single AssigneeScope item by ID.  */
  updateAssigneeScope?: Maybe<AssigneeScope>;
  /**  Update multiple AssigneeScope items by ID.  */
  updateAssigneeScopes?: Maybe<Array<Maybe<AssigneeScope>>>;
  /**  Delete a single AssigneeScope item by ID.  */
  deleteAssigneeScope?: Maybe<AssigneeScope>;
  /**  Delete multiple AssigneeScope items by ID.  */
  deleteAssigneeScopes?: Maybe<Array<Maybe<AssigneeScope>>>;
  /**  Create a single NewsItemHistoryRecord item.  */
  createNewsItemHistoryRecord?: Maybe<NewsItemHistoryRecord>;
  /**  Create multiple NewsItemHistoryRecord items.  */
  createNewsItemHistoryRecords?: Maybe<Array<Maybe<NewsItemHistoryRecord>>>;
  /**  Update a single NewsItemHistoryRecord item by ID.  */
  updateNewsItemHistoryRecord?: Maybe<NewsItemHistoryRecord>;
  /**  Update multiple NewsItemHistoryRecord items by ID.  */
  updateNewsItemHistoryRecords?: Maybe<Array<Maybe<NewsItemHistoryRecord>>>;
  /**  Delete a single NewsItemHistoryRecord item by ID.  */
  deleteNewsItemHistoryRecord?: Maybe<NewsItemHistoryRecord>;
  /**  Delete multiple NewsItemHistoryRecord items by ID.  */
  deleteNewsItemHistoryRecords?: Maybe<Array<Maybe<NewsItemHistoryRecord>>>;
  /**  Create a single NewsItem item.  */
  createNewsItem?: Maybe<NewsItem>;
  /**  Create multiple NewsItem items.  */
  createNewsItems?: Maybe<Array<Maybe<NewsItem>>>;
  /**  Update a single NewsItem item by ID.  */
  updateNewsItem?: Maybe<NewsItem>;
  /**  Update multiple NewsItem items by ID.  */
  updateNewsItems?: Maybe<Array<Maybe<NewsItem>>>;
  /**  Delete a single NewsItem item by ID.  */
  deleteNewsItem?: Maybe<NewsItem>;
  /**  Delete multiple NewsItem items by ID.  */
  deleteNewsItems?: Maybe<Array<Maybe<NewsItem>>>;
  /**  Create a single NewsItemScopeHistoryRecord item.  */
  createNewsItemScopeHistoryRecord?: Maybe<NewsItemScopeHistoryRecord>;
  /**  Create multiple NewsItemScopeHistoryRecord items.  */
  createNewsItemScopeHistoryRecords?: Maybe<Array<Maybe<NewsItemScopeHistoryRecord>>>;
  /**  Update a single NewsItemScopeHistoryRecord item by ID.  */
  updateNewsItemScopeHistoryRecord?: Maybe<NewsItemScopeHistoryRecord>;
  /**  Update multiple NewsItemScopeHistoryRecord items by ID.  */
  updateNewsItemScopeHistoryRecords?: Maybe<Array<Maybe<NewsItemScopeHistoryRecord>>>;
  /**  Delete a single NewsItemScopeHistoryRecord item by ID.  */
  deleteNewsItemScopeHistoryRecord?: Maybe<NewsItemScopeHistoryRecord>;
  /**  Delete multiple NewsItemScopeHistoryRecord items by ID.  */
  deleteNewsItemScopeHistoryRecords?: Maybe<Array<Maybe<NewsItemScopeHistoryRecord>>>;
  /**  Create a single NewsItemScope item.  */
  createNewsItemScope?: Maybe<NewsItemScope>;
  /**  Create multiple NewsItemScope items.  */
  createNewsItemScopes?: Maybe<Array<Maybe<NewsItemScope>>>;
  /**  Update a single NewsItemScope item by ID.  */
  updateNewsItemScope?: Maybe<NewsItemScope>;
  /**  Update multiple NewsItemScope items by ID.  */
  updateNewsItemScopes?: Maybe<Array<Maybe<NewsItemScope>>>;
  /**  Delete a single NewsItemScope item by ID.  */
  deleteNewsItemScope?: Maybe<NewsItemScope>;
  /**  Delete multiple NewsItemScope items by ID.  */
  deleteNewsItemScopes?: Maybe<Array<Maybe<NewsItemScope>>>;
  /**  Create a single NewsItemTemplateHistoryRecord item.  */
  createNewsItemTemplateHistoryRecord?: Maybe<NewsItemTemplateHistoryRecord>;
  /**  Create multiple NewsItemTemplateHistoryRecord items.  */
  createNewsItemTemplateHistoryRecords?: Maybe<Array<Maybe<NewsItemTemplateHistoryRecord>>>;
  /**  Update a single NewsItemTemplateHistoryRecord item by ID.  */
  updateNewsItemTemplateHistoryRecord?: Maybe<NewsItemTemplateHistoryRecord>;
  /**  Update multiple NewsItemTemplateHistoryRecord items by ID.  */
  updateNewsItemTemplateHistoryRecords?: Maybe<Array<Maybe<NewsItemTemplateHistoryRecord>>>;
  /**  Delete a single NewsItemTemplateHistoryRecord item by ID.  */
  deleteNewsItemTemplateHistoryRecord?: Maybe<NewsItemTemplateHistoryRecord>;
  /**  Delete multiple NewsItemTemplateHistoryRecord items by ID.  */
  deleteNewsItemTemplateHistoryRecords?: Maybe<Array<Maybe<NewsItemTemplateHistoryRecord>>>;
  /**  Create a single NewsItemTemplate item.  */
  createNewsItemTemplate?: Maybe<NewsItemTemplate>;
  /**  Create multiple NewsItemTemplate items.  */
  createNewsItemTemplates?: Maybe<Array<Maybe<NewsItemTemplate>>>;
  /**  Update a single NewsItemTemplate item by ID.  */
  updateNewsItemTemplate?: Maybe<NewsItemTemplate>;
  /**  Update multiple NewsItemTemplate items by ID.  */
  updateNewsItemTemplates?: Maybe<Array<Maybe<NewsItemTemplate>>>;
  /**  Delete a single NewsItemTemplate item by ID.  */
  deleteNewsItemTemplate?: Maybe<NewsItemTemplate>;
  /**  Delete multiple NewsItemTemplate items by ID.  */
  deleteNewsItemTemplates?: Maybe<Array<Maybe<NewsItemTemplate>>>;
  /**  Create a single NewsItemUserReadHistoryRecord item.  */
  createNewsItemUserReadHistoryRecord?: Maybe<NewsItemUserReadHistoryRecord>;
  /**  Create multiple NewsItemUserReadHistoryRecord items.  */
  createNewsItemUserReadHistoryRecords?: Maybe<Array<Maybe<NewsItemUserReadHistoryRecord>>>;
  /**  Update a single NewsItemUserReadHistoryRecord item by ID.  */
  updateNewsItemUserReadHistoryRecord?: Maybe<NewsItemUserReadHistoryRecord>;
  /**  Update multiple NewsItemUserReadHistoryRecord items by ID.  */
  updateNewsItemUserReadHistoryRecords?: Maybe<Array<Maybe<NewsItemUserReadHistoryRecord>>>;
  /**  Delete a single NewsItemUserReadHistoryRecord item by ID.  */
  deleteNewsItemUserReadHistoryRecord?: Maybe<NewsItemUserReadHistoryRecord>;
  /**  Delete multiple NewsItemUserReadHistoryRecord items by ID.  */
  deleteNewsItemUserReadHistoryRecords?: Maybe<Array<Maybe<NewsItemUserReadHistoryRecord>>>;
  /**  Create a single NewsItemUserRead item.  */
  createNewsItemUserRead?: Maybe<NewsItemUserRead>;
  /**  Create multiple NewsItemUserRead items.  */
  createNewsItemUserReads?: Maybe<Array<Maybe<NewsItemUserRead>>>;
  /**  Update a single NewsItemUserRead item by ID.  */
  updateNewsItemUserRead?: Maybe<NewsItemUserRead>;
  /**  Update multiple NewsItemUserRead items by ID.  */
  updateNewsItemUserReads?: Maybe<Array<Maybe<NewsItemUserRead>>>;
  /**  Delete a single NewsItemUserRead item by ID.  */
  deleteNewsItemUserRead?: Maybe<NewsItemUserRead>;
  /**  Delete multiple NewsItemUserRead items by ID.  */
  deleteNewsItemUserReads?: Maybe<Array<Maybe<NewsItemUserRead>>>;
  /**  Create a single WebhookHistoryRecord item.  */
  createWebhookHistoryRecord?: Maybe<WebhookHistoryRecord>;
  /**  Create multiple WebhookHistoryRecord items.  */
  createWebhookHistoryRecords?: Maybe<Array<Maybe<WebhookHistoryRecord>>>;
  /**  Update a single WebhookHistoryRecord item by ID.  */
  updateWebhookHistoryRecord?: Maybe<WebhookHistoryRecord>;
  /**  Update multiple WebhookHistoryRecord items by ID.  */
  updateWebhookHistoryRecords?: Maybe<Array<Maybe<WebhookHistoryRecord>>>;
  /**  Delete a single WebhookHistoryRecord item by ID.  */
  deleteWebhookHistoryRecord?: Maybe<WebhookHistoryRecord>;
  /**  Delete multiple WebhookHistoryRecord items by ID.  */
  deleteWebhookHistoryRecords?: Maybe<Array<Maybe<WebhookHistoryRecord>>>;
  /**  Create a single Webhook item.  */
  createWebhook?: Maybe<Webhook>;
  /**  Create multiple Webhook items.  */
  createWebhooks?: Maybe<Array<Maybe<Webhook>>>;
  /**  Update a single Webhook item by ID.  */
  updateWebhook?: Maybe<Webhook>;
  /**  Update multiple Webhook items by ID.  */
  updateWebhooks?: Maybe<Array<Maybe<Webhook>>>;
  /**  Delete a single Webhook item by ID.  */
  deleteWebhook?: Maybe<Webhook>;
  /**  Delete multiple Webhook items by ID.  */
  deleteWebhooks?: Maybe<Array<Maybe<Webhook>>>;
  /**  Create a single WebhookSubscriptionHistoryRecord item.  */
  createWebhookSubscriptionHistoryRecord?: Maybe<WebhookSubscriptionHistoryRecord>;
  /**  Create multiple WebhookSubscriptionHistoryRecord items.  */
  createWebhookSubscriptionHistoryRecords?: Maybe<Array<Maybe<WebhookSubscriptionHistoryRecord>>>;
  /**  Update a single WebhookSubscriptionHistoryRecord item by ID.  */
  updateWebhookSubscriptionHistoryRecord?: Maybe<WebhookSubscriptionHistoryRecord>;
  /**  Update multiple WebhookSubscriptionHistoryRecord items by ID.  */
  updateWebhookSubscriptionHistoryRecords?: Maybe<Array<Maybe<WebhookSubscriptionHistoryRecord>>>;
  /**  Delete a single WebhookSubscriptionHistoryRecord item by ID.  */
  deleteWebhookSubscriptionHistoryRecord?: Maybe<WebhookSubscriptionHistoryRecord>;
  /**  Delete multiple WebhookSubscriptionHistoryRecord items by ID.  */
  deleteWebhookSubscriptionHistoryRecords?: Maybe<Array<Maybe<WebhookSubscriptionHistoryRecord>>>;
  /**  Create a single WebhookSubscription item.  */
  createWebhookSubscription?: Maybe<WebhookSubscription>;
  /**  Create multiple WebhookSubscription items.  */
  createWebhookSubscriptions?: Maybe<Array<Maybe<WebhookSubscription>>>;
  /**  Update a single WebhookSubscription item by ID.  */
  updateWebhookSubscription?: Maybe<WebhookSubscription>;
  /**  Update multiple WebhookSubscription items by ID.  */
  updateWebhookSubscriptions?: Maybe<Array<Maybe<WebhookSubscription>>>;
  /**  Delete a single WebhookSubscription item by ID.  */
  deleteWebhookSubscription?: Maybe<WebhookSubscription>;
  /**  Delete multiple WebhookSubscription items by ID.  */
  deleteWebhookSubscriptions?: Maybe<Array<Maybe<WebhookSubscription>>>;
  /**
   * Registers new user and sends notification
   *
   * User will be registered only in case of correct provided token of phone confirmation action. After successful registration, phone confirmation action will be marked as completed and will not be allowed for further usage
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "registerNewUser",
   *   "variable": [
   *     "data",
   *     "confirmPhoneActionToken"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "UNABLE_TO_FIND_CONFIRM_PHONE_ACTION",
   *   "message": "Unable to find confirm phone action",
   *   "messageForUser": "api.user.registerNewUser.UNABLE_TO_FIND_CONFIRM_PHONE_ACTION"
   * }`
   *
   * `{
   *   "mutation": "registerNewUser",
   *   "variable": [
   *     "data",
   *     "phone"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_PHONE_FORMAT",
   *   "message": "Wrong format of provided phone number",
   *   "messageForUser": "api.common.WRONG_PHONE_FORMAT",
   *   "correctExample": "+79991234567"
   * }`
   *
   * `{
   *   "mutation": "registerNewUser",
   *   "variable": [
   *     "data",
   *     "password"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_FORMAT",
   *   "message": "Password length is less then {min} characters",
   *   "messageForUser": "api.user.PASSWORD_IS_TOO_SHORT",
   *   "messageInterpolation": {
   *     "min": 8
   *   }
   * }`
   *
   * `{
   *   "mutation": "registerNewUser",
   *   "variable": [
   *     "data",
   *     "password"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_VALUE",
   *   "message": "The password is too simple. We found it in the list of stolen passwords. You need to use something more secure",
   *   "messageForUser": "api.user.PASSWORD_IS_FREQUENTLY_USED"
   * }`
   *
   * `{
   *   "mutation": "registerNewUser",
   *   "variable": [
   *     "data",
   *     "phone"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_UNIQUE",
   *   "message": "User with specified phone already exists",
   *   "messageForUser": "api.user.registerNewUser.USER_WITH_SPECIFIED_PHONE_ALREADY_EXISTS"
   * }`
   *
   * `{
   *   "mutation": "registerNewUser",
   *   "variable": [
   *     "data",
   *     "email"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_UNIQUE",
   *   "message": "User with specified email already exists",
   *   "messageForUser": "api.user.registerNewUser.USER_WITH_SPECIFIED_EMAIL_ALREADY_EXISTS"
   * }`
   *
   * `{
   *   "mutation": "registerNewUser",
   *   "code": "INTERNAL_ERROR",
   *   "type": "UNABLE_TO_CREATE_USER",
   *   "message": "Unable to create user",
   *   "messageForUser": "api.user.registerNewUser.UNABLE_TO_CREATE_USER"
   * }`
   */
  registerNewUser?: Maybe<User>;
  authenticateUserWithPhoneAndPassword?: Maybe<AuthenticateUserWithPhoneAndPasswordOutput>;
  /**
   * Beginning of a multi-step process of a password recovery.
   * 1. Start recovery and get token to confirm phone number
   * 2. Confirm phone number
   * 3. Call `changePasswordWithToken` mutation
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "startPasswordRecovery",
   *   "variable": [
   *     "data",
   *     "phone"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "USER_BY_PHONE_NOT_FOUND",
   *   "message": "Unable to find user with specified phone",
   *   "messageForUser": "api.user.startPasswordRecovery.USER_NOT_FOUND"
   * }`
   *
   * `{
   *   "mutation": "startPasswordRecovery",
   *   "variable": [
   *     "data",
   *     "phone"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "MULTIPLE_USERS_FOUND",
   *   "message": "Unable to find exact one user to start password recovery",
   *   "messageForUser": "api.user.startPasswordRecovery.MULTIPLE_USERS_FOUND"
   * }`
   *
   * `{
   *   "mutation": "startPasswordRecovery",
   *   "variable": [
   *     "data",
   *     "phone"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_PHONE_FORMAT",
   *   "message": "Wrong format of provided phone number",
   *   "correctExample": "+79991234567",
   *   "messageForUser": "api.common.WRONG_PHONE_FORMAT"
   * }`
   */
  startPasswordRecovery?: Maybe<StartPasswordRecoveryOutput>;
  /**
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "changePasswordWithToken",
   *   "variable": [
   *     "data",
   *     "password"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "PASSWORD_IS_TOO_SHORT",
   *   "message": "Password length is less then {min} characters",
   *   "messageForUser": "api.user.PASSWORD_IS_TOO_SHORT",
   *   "messageInterpolation": {
   *     "min": 8
   *   }
   * }`
   *
   * `{
   *   "mutation": "changePasswordWithToken",
   *   "variable": [
   *     "data",
   *     "password"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_VALUE",
   *   "message": "The password is too simple. We found it in the list of stolen passwords. You need to use something more secure",
   *   "messageForUser": "api.user.PASSWORD_IS_FREQUENTLY_USED"
   * }`
   *
   * `{
   *   "mutation": "changePasswordWithToken",
   *   "variable": [
   *     "data",
   *     "token"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "TOKEN_NOT_FOUND",
   *   "message": "Unable to find non-expired ConfirmPhoneAction by specified token",
   *   "messageForUser": "api.user.changePasswordWithToken.TOKEN_NOT_FOUND"
   * }`
   *
   * `{
   *   "mutation": "changePasswordWithToken",
   *   "variable": [
   *     "data",
   *     "phone"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "USER_NOT_FOUND",
   *   "message": "Unable to find user with specified phone",
   *   "messageForUser": "api.user.changePasswordWithToken.USER_NOT_FOUND"
   * }`
   */
  changePasswordWithToken?: Maybe<ChangePasswordWithTokenOutput>;
  /**
   * Send confirmation phone SMS message and return confirmation token. You can use the token for completeConfirmPhoneAction mutation. And then use the token in other mutations to prove that the phone number is verified
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "variable": [
   *     "data",
   *     "captcha"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "CAPTCHA_CHECK_FAILED",
   *   "message": "Failed to check CAPTCHA",
   *   "messageForUser": "api.user.CAPTCHA_CHECK_FAILED"
   * }`
   *
   * `{
   *   "mutation": "startConfirmPhoneAction",
   *   "variable": [
   *     "data",
   *     "phone"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_PHONE_FORMAT",
   *   "message": "Wrong format of provided phone number",
   *   "correctExample": "+79991234567",
   *   "messageForUser": "api.common.WRONG_PHONE_FORMAT"
   * }`
   *
   * `{
   *   "code": "BAD_USER_INPUT",
   *   "type": "TOO_MANY_REQUESTS",
   *   "message": "You have to wait {secondsRemaining} seconds to be able to send request again",
   *   "messageForUser": "api.user.TOO_MANY_REQUESTS"
   * }`
   *
   * `{
   *   "code": "BAD_USER_INPUT",
   *   "type": "SMS_FOR_PHONE_DAY_LIMIT_REACHED",
   *   "message": "Too many sms requests for this phone number. Try again tomorrow"
   * }`
   *
   * `{
   *   "code": "BAD_USER_INPUT",
   *   "type": "SMS_FOR_IP_DAY_LIMIT_REACHED",
   *   "message": "Too many sms requests from this ip address. Try again tomorrow"
   * }`
   */
  startConfirmPhoneAction?: Maybe<StartConfirmPhoneActionOutput>;
  /**
   * Resend the confirm phone SMS message for existing token
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "variable": [
   *     "data",
   *     "captcha"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "CAPTCHA_CHECK_FAILED",
   *   "message": "Failed to check CAPTCHA",
   *   "messageForUser": "api.user.CAPTCHA_CHECK_FAILED"
   * }`
   *
   * `{
   *   "variable": [
   *     "data",
   *     "token"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "UNABLE_TO_FIND_CONFIRM_PHONE_ACTION",
   *   "message": "Confirm phone action was expired or it could not be found. Try to initiate phone confirmation again",
   *   "messageForUser": "api.user.UNABLE_TO_FIND_CONFIRM_PHONE_ACTION"
   * }`
   *
   * `{
   *   "code": "BAD_USER_INPUT",
   *   "type": "TOO_MANY_REQUESTS",
   *   "message": "You have to wait {secondsRemaining} seconds to be able to send request again",
   *   "messageForUser": "api.user.TOO_MANY_REQUESTS"
   * }`
   *
   * `{
   *   "code": "BAD_USER_INPUT",
   *   "type": "SMS_FOR_PHONE_DAY_LIMIT_REACHED",
   *   "message": "Too many sms requests for this phone number. Try again tomorrow"
   * }`
   *
   * `{
   *   "code": "BAD_USER_INPUT",
   *   "type": "SMS_FOR_IP_DAY_LIMIT_REACHED",
   *   "message": "Too many sms requests from this ip address. Try again tomorrow"
   * }`
   */
  resendConfirmPhoneActionSms?: Maybe<ResendConfirmPhoneActionSmsOutput>;
  /**
   * The final step of a phone number confirmation. You should use the token from startConfirmPhoneAction and a secret code from the confirm phone SMS message. After success call, you can use the token in other mutations to prove that you have access to the phone number
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "variable": [
   *     "data",
   *     "captcha"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "CAPTCHA_CHECK_FAILED",
   *   "message": "Failed to check CAPTCHA",
   *   "messageForUser": "api.user.CAPTCHA_CHECK_FAILED"
   * }`
   *
   * `{
   *   "variable": [
   *     "data",
   *     "token"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "UNABLE_TO_FIND_CONFIRM_PHONE_ACTION",
   *   "message": "Confirm phone action was expired or it could not be found. Try to initiate phone confirmation again",
   *   "messageForUser": "api.user.UNABLE_TO_FIND_CONFIRM_PHONE_ACTION"
   * }`
   *
   * `{
   *   "mutation": "completeConfirmPhoneAction",
   *   "variable": [
   *     "data",
   *     "smsCode"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "SMS_CODE_EXPIRED",
   *   "message": "SMS code expired. Try to initiate phone confirmation again",
   *   "messageForUser": "api.user.completeConfirmPhoneAction.SMS_CODE_EXPIRED"
   * }`
   *
   * `{
   *   "mutation": "completeConfirmPhoneAction",
   *   "variable": [
   *     "data",
   *     "smsCode"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "SMS_CODE_MAX_RETRIES_REACHED",
   *   "message": "Max retries reached for SMS code confirmation. Try to initiate phone confirmation again",
   *   "messageForUser": "api.user.completeConfirmPhoneAction.SMS_CODE_MAX_RETRIES_REACHED"
   * }`
   *
   * `{
   *   "mutation": "completeConfirmPhoneAction",
   *   "variable": [
   *     "data",
   *     "smsCode"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "SMS_CODE_VERIFICATION_FAILED",
   *   "message": "SMS code verification mismatch",
   *   "messageForUser": "api.user.completeConfirmPhoneAction.SMS_CODE_VERIFICATION_FAILED"
   * }`
   *
   * `{
   *   "code": "BAD_USER_INPUT",
   *   "type": "TOO_MANY_REQUESTS",
   *   "message": "You have to wait {secondsRemaining} seconds to be able to send request again",
   *   "messageForUser": "api.user.TOO_MANY_REQUESTS"
   * }`
   */
  completeConfirmPhoneAction?: Maybe<CompleteConfirmPhoneActionOutput>;
  /**
   * Authenticates resident user for mobile apps
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "signinResidentUser",
   *   "variable": [
   *     "data",
   *     "token"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "TOKEN_NOT_FOUND",
   *   "message": "Unable to find a non-expired confirm phone action, that corresponds to provided token",
   *   "messageForUser": "api.user.signinResidentUser.TOKEN_NOT_FOUND"
   * }`
   *
   * `{
   *   "code": "INTERNAL_ERROR",
   *   "type": "UNABLE_TO_CREATE_USER",
   *   "mutation": "signinResidentUser",
   *   "message": "Something went wrong while trying to create a User record",
   *   "messageForUser": "api.user.signinResidentUser.UNABLE_TO_CREATE_USER"
   * }`
   */
  signinResidentUser?: Maybe<SigninResidentUserOutput>;
  /**
   * Changes a phone of a resident, that corresponds to confirmed phone number, specified via token
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "changePhoneNumberResidentUser",
   *   "variable": [
   *     "data",
   *     "dv"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "DV_VERSION_MISMATCH",
   *   "message": "Wrong value for data version number"
   * }`
   *
   * `{
   *   "mutation": "changePhoneNumberResidentUser",
   *   "variable": [
   *     "data",
   *     "sender"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_FORMAT",
   *   "message": "Invalid format of \"sender\" field value. {details}",
   *   "correctExample": "{ dv: 1, fingerprint: 'example-fingerprint-alphanumeric-value'}"
   * }`
   *
   * `{
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "mutation": "changePhoneNumberResidentUser",
   *   "message": "Unable to find a non-expired confirm phone action, that corresponds to provided token",
   *   "variable": [
   *     "data",
   *     "token"
   *   ],
   *   "messageForUser": "api.user.changePhoneNumberResidentUser.UNABLE_TO_FIND_CONFIRM_PHONE_ACTION"
   * }`
   *
   * `{
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_VALUE",
   *   "mutation": "changePhoneNumberResidentUser",
   *   "message": "Unable to change phone number since user has external identity and phone number are different",
   *   "variable": [
   *     "data",
   *     "token"
   *   ],
   *   "messageForUser": "api.user.changePhoneNumberResidentUser.USER_HAS_CONNECTED_EXTERNAL_IDENTITY_WITH_DIFFERENT_PHONE"
   * }`
   */
  changePhoneNumberResidentUser?: Maybe<ChangePhoneNumberResidentUserOutput>;
  /**
   * Authenticates as an another user to be able to see the system, as it does
   *
   * You cannot authenticate for another admin or support or whatever kind of a non-client user
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "signinAsUser",
   *   "code": "BAD_USER_INPUT",
   *   "type": "USER_NOT_FOUND",
   *   "message": "Could not find a user with a specified id",
   *   "messageForUser": "api.user.signinAsUser.USER_NOT_FOUND"
   * }`
   *
   * `{
   *   "mutation": "signinAsUser",
   *   "code": "FORBIDDEN",
   *   "type": "DENIED_FOR_ADMIN",
   *   "message": "You cannot authenticate for an another admin user",
   *   "messageForUser": "api.user.signinAsUser.DENIED_FOR_ADMIN"
   * }`
   *
   * `{
   *   "mutation": "signinAsUser",
   *   "code": "FORBIDDEN",
   *   "type": "DENIED_FOR_SUPPORT",
   *   "message": "You cannot authenticate for an another support user",
   *   "messageForUser": "api.user.signinAsUser.DENIED_FOR_SUPPORT"
   * }`
   */
  signinAsUser?: Maybe<SigninAsUserOutput>;
  registerNewServiceUser?: Maybe<RegisterNewServiceUserOutput>;
  sendMessageToSupport?: Maybe<SendMessageToSupportOutput>;
  /**
   * Used by QA for cleaning existing test user record to avoid utilizing every time new phone and email, which is hard to obtain again and again for every manual testing procedure
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "resetUser",
   *   "variable": [
   *     "data",
   *     "dv"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "DV_VERSION_MISMATCH",
   *   "message": "Unsupported value for dv"
   * }`
   *
   * `{
   *   "mutation": "resetUser",
   *   "variable": [
   *     "data",
   *     "user",
   *     "id"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "USER_NOT_FOUND",
   *   "message": "Could not find User by provided id"
   * }`
   *
   * `{
   *   "mutation": "resetUser",
   *   "variable": [
   *     "data",
   *     "user",
   *     "id"
   *   ],
   *   "code": "FORBIDDEN",
   *   "type": "CANNOT_RESET_ADMIN_USER",
   *   "message": "You cannot reset admin user"
   * }`
   */
  resetUser?: Maybe<ResetUserOutput>;
  /**
   * Registers new Organization for current user
   *
   * Creates new Organization, new OrganizationEmployee for current user, creates a set of default OrganizationEmployeeRole for organization and connects created OrganizationEmployee to "Admin" OrganizationEmployeeRole, creates trial ServiceSubscription for organization
   */
  registerNewOrganization?: Maybe<Organization>;
  /**
   * Invites staff-user into specified Organization
   *
   * For corresponding User record it creates a new OrganizationEmployee and sends message with notification about invitation
   * It tries to find already existing User with type "staff" first by phone, then by email.
   * If User is not found, it will be registered.
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "inviteNewOrganizationEmployee",
   *   "code": "BAD_USER_INPUT",
   *   "type": "ALREADY_INVITED",
   *   "message": "Already invited into the organization",
   *   "messageForUser": "api.organization.inviteNewOrganizationEmployee.ALREADY_INVITED"
   * }`
   *
   * `{
   *   "mutation": "inviteNewOrganizationEmployee",
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_PHONE_FORMAT",
   *   "message": "Wrong phone format",
   *   "messageForUser": "api.common.WRONG_PHONE_FORMAT"
   * }`
   *
   * `{
   *   "mutation": "inviteNewOrganizationEmployee",
   *   "code": "INTERNAL_ERROR",
   *   "type": "UNABLE_TO_REGISTER_USER",
   *   "message": "Unable to register user",
   *   "messageForUser": "api.organization.inviteNewOrganizationEmployee.UNABLE_TO_REGISTER_USER"
   * }`
   *
   * `{
   *   "mutation": "inviteNewOrganizationEmployee",
   *   "variable": [
   *     "data",
   *     "dv"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "DV_VERSION_MISMATCH",
   *   "message": "Wrong value for data version number"
   * }`
   */
  inviteNewOrganizationEmployee?: Maybe<OrganizationEmployee>;
  /**
   * Tries to send notification message again to already invited user
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "reInviteOrganizationEmployee",
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_FORMAT",
   *   "message": "Wrong phone format",
   *   "messageForUser": "api.common.WRONG_PHONE_FORMAT"
   * }`
   *
   * `{
   *   "mutation": "reInviteOrganizationEmployee",
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Could not find Organization by specified search criteria",
   *   "messageForUser": "api.organization.reInviteOrganizationEmployee.ORGANIZATION_NOT_FOUND"
   * }`
   *
   * `{
   *   "mutation": "reInviteOrganizationEmployee",
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Could not find User by specified phone or email",
   *   "messageForUser": "api.organization.reInviteOrganizationEmployee.USER_NOT_FOUND"
   * }`
   *
   * `{
   *   "mutation": "reInviteOrganizationEmployee",
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Could not find OrganizationEmployee that has not accepted invitation for found User",
   *   "messageForUser": "api.organization.reInviteOrganizationEmployee.EMPLOYEE_NOT_FOUND"
   * }`
   *
   * `{
   *   "mutation": "reInviteOrganizationEmployee",
   *   "code": "BAD_USER_INPUT",
   *   "type": "ALREADY_ACCEPTED_INVITATION",
   *   "message": "Corresponding OrganizationEmployee has already accepted invitation",
   *   "messageForUser": "api.organization.reInviteOrganizationEmployee.ALREADY_ACCEPTED_INVITATION"
   * }`
   */
  reInviteOrganizationEmployee?: Maybe<OrganizationEmployee>;
  acceptOrRejectOrganizationInviteById?: Maybe<OrganizationEmployee>;
  acceptOrRejectOrganizationInviteByCode?: Maybe<OrganizationEmployee>;
  resetOrganization?: Maybe<ResetOrganizationOutput>;
  registerBillingReceipts?: Maybe<Array<Maybe<BillingReceipt>>>;
  /**
   * Sends notification of BILLING_RECEIPT_CATEGORY_AVAILABLE_TYPE type to all residents of provided scopes. Requires service user with access rights to billing domain. All properties in scopes should be connected to provided context.
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "sendNewReceiptMessagesToResidentScopes",
   *   "variable": [
   *     "data",
   *     "context"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Please provide proper period not before start of previous and not later than start of current month, valid format is YYYY-MM-DD",
   *   "messageForUser": "api.billing.sendNewReceiptMessagesToResidentScopes.INVALID_PERIOD_PROVIDED"
   * }`
   *
   * `{
   *   "mutation": "sendNewReceiptMessagesToResidentScopes",
   *   "variable": [
   *     "data",
   *     "billingIntegrationContext"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Please provide existing non-deleted billing integration organization context id",
   *   "messageForUser": "api.billing.sendNewReceiptMessagesToResidentScopes.INVALID_BILLING_CONTEXT_PROVIDED"
   * }`
   *
   * `{
   *   "mutation": "sendNewReceiptMessagesToResidentScopes",
   *   "variable": [
   *     "data",
   *     "context"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Please provide existing non-deleted billing category id",
   *   "messageForUser": "api.billing.sendNewReceiptMessagesToResidentScopes.INVALID_BILLING_CATEGORY_PROVIDED"
   * }`
   *
   * `{
   *   "mutation": "sendNewReceiptMessagesToResidentScopes",
   *   "variable": [
   *     "data",
   *     "scopes"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Scopes could not be empty",
   *   "messageForUser": "api.billing.sendNewReceiptMessagesToResidentScopes.SCOPES_IS_EMPTY"
   * }`
   *
   * `{
   *   "mutation": "sendNewReceiptMessagesToResidentScopes",
   *   "variable": [
   *     "data",
   *     "scopes"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "All provided properties in scopes should be non-deleted & connected to organization of the billing context",
   *   "messageForUser": "api.billing.sendNewReceiptMessagesToResidentScopes.INVALID_PROPERTY_PROVIDED"
   * }`
   */
  sendNewReceiptMessagesToResidentScopes?: Maybe<SendNewReceiptMessagesToResidentScopesOutput>;
  createBankAccountRequest?: Maybe<CreateBankAccountRequestOutput>;
  shareTicket?: Maybe<ShareTicketOutput>;
  /**
   * Sends message of specified type to specified contact
   *
   * Each message type has specific set of required fields:
   *
   * `{
   * 	"INVITE_NEW_EMPLOYEE": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"inviteCode": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"userName": {
   * 			"defaultValue": "USERNAME",
   * 			"required": false
   * 		},
   * 		"userEmail": {
   * 			"defaultValue": "",
   * 			"required": false
   * 		},
   * 		"userPhone": {
   * 			"defaultValue": "",
   * 			"required": false
   * 		},
   * 		"organizationName": {
   * 			"defaultValue": "ORGANIZATION",
   * 			"required": false
   * 		}
   * 	},
   * 	"SHARE_TICKET": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"ticketNumber": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"date": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"id": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"details": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		}
   * 	},
   * 	"BANK_ACCOUNT_CREATION_REQUEST": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"bankAccountClient": {
   * 			"defaultValue": {},
   * 			"required": true
   * 		},
   * 		"tin": {
   * 			"required": true
   * 		},
   * 		"name": {
   * 			"required": true
   * 		},
   * 		"propertyAddress": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		}
   * 	},
   * 	"DIRTY_INVITE_NEW_EMPLOYEE_SMS": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"organizationName": {
   * 			"defaultValue": "ORGANIZATION",
   * 			"required": false
   * 		}
   * 	},
   * 	"DIRTY_INVITE_NEW_EMPLOYEE_EMAIL": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"organizationName": {
   * 			"defaultValue": "ORGANIZATION",
   * 			"required": false
   * 		}
   * 	},
   * 	"REGISTER_NEW_USER": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"userPhone": {
   * 			"defaultValue": "",
   * 			"required": false
   * 		},
   * 		"userPassword": {
   * 			"defaultValue": "",
   * 			"required": false
   * 		}
   * 	},
   * 	"RESET_PASSWORD": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"token": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"userName": {
   * 			"defaultValue": "USERNAME",
   * 			"required": false
   * 		},
   * 		"userEmail": {
   * 			"defaultValue": "",
   * 			"required": false
   * 		}
   * 	},
   * 	"SMS_VERIFY": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"smsCode": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		}
   * 	},
   * 	"DEVELOPER_IMPORTANT_NOTE_TYPE": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"type": {
   * 			"defaultValue": "UNKNOWN",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"defaultValue": null,
   * 			"required": true
   * 		}
   * 	},
   * 	"CUSTOMER_IMPORTANT_NOTE_TYPE": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"type": {
   * 			"defaultValue": "UNKNOWN",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"defaultValue": null,
   * 			"required": true
   * 		}
   * 	},
   * 	"MESSAGE_FORWARDED_TO_SUPPORT": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"text": {
   * 			"defaultValue": null,
   * 			"required": true
   * 		},
   * 		"residentsExtraInfo": {
   * 			"defaultValue": null,
   * 			"required": true
   * 		},
   * 		"os": {
   * 			"defaultValue": null,
   * 			"required": true
   * 		},
   * 		"appVersion": {
   * 			"defaultValue": null,
   * 			"required": true
   * 		},
   * 		"attachments": {
   * 			"defaultValue": [],
   * 			"isRequired": false
   * 		}
   * 	},
   * 	"TICKET_ASSIGNEE_CONNECTED": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"ticketId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"ticketNumber": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"TICKET_EXECUTOR_CONNECTED": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"ticketId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"ticketNumber": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"TRACK_TICKET_IN_DOMA_APP": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"organization": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"TICKET_STATUS_OPENED": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"ticketId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"ticketNumber": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"TICKET_STATUS_IN_PROGRESS": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"ticketId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"ticketNumber": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"TICKET_STATUS_COMPLETED": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"ticketId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"ticketNumber": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"TICKET_STATUS_RETURNED": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"ticketId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"ticketNumber": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"TICKET_STATUS_DECLINED": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"ticketId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"ticketNumber": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"TICKET_COMMENT_ADDED": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"ticketId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"ticketNumber": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"commentId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"METER_VERIFICATION_DATE_REMINDER": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"reminderDate": {
   * 				"required": true
   * 			},
   * 			"meterId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RESIDENT_ADD_BILLING_ACCOUNT": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"residentIds": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"BILLING_RECEIPT_AVAILABLE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"receiptId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"accountId": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"period": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"BILLING_RECEIPT_AVAILABLE_NO_ACCOUNT": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"residentIds": {
   * 				"required": true
   * 			},
   * 			"propertyId": {
   * 				"required": true
   * 			},
   * 			"period": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"BILLING_RECEIPT_CATEGORY_AVAILABLE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"propertyId": {
   * 				"required": true
   * 			},
   * 			"period": {
   * 				"required": true
   * 			},
   * 			"categoryId": {
   * 				"required": true
   * 			}
   * 		},
   * 		"categoryName": {
   * 			"required": true
   * 		}
   * 	},
   * 	"BILLING_RECEIPT_ADDED": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"residentId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"billingReceiptId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"billingAccountId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"billingPropertyId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"period": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"BILLING_RECEIPT_ADDED_WITH_DEBT": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"residentId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"billingReceiptId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"billingAccountId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"billingPropertyId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"period": {
   * 				"required": true
   * 			},
   * 			"category": {
   * 				"required": true
   * 			},
   * 			"toPay": {
   * 				"required": true
   * 			},
   * 			"currencyCode": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"BILLING_RECEIPT_ADDED_WITH_NO_DEBT": {
   * 		"dv": {
   * 			"defaultValue": "",
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"residentId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"billingReceiptId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"billingAccountId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"billingPropertyId": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			},
   * 			"period": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"METER_SUBMIT_READINGS_REMINDER": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"meterId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"METER_VERIFICATION_DATE_EXPIRED": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"meterId": {
   * 				"required": true
   * 			},
   * 			"resource": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RESIDENT_UPGRADE_APP": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"userType": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"STAFF_UPGRADE_APP": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"userType": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"CUSTOM_CONTENT_MESSAGE_PUSH": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"title": {
   * 			"required": false
   * 		},
   * 		"body": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"userId": {
   * 				"required": false
   * 			},
   * 			"remoteClient": {
   * 				"required": false
   * 			},
   * 			"url": {
   * 				"defaultValue": "",
   * 				"required": false
   * 			},
   * 			"messageBatchId": {
   * 				"required": false
   * 			}
   * 		}
   * 	},
   * 	"CUSTOM_CONTENT_MESSAGE_EMAIL": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"title": {
   * 			"required": false
   * 		},
   * 		"subject": {
   * 			"required": false
   * 		},
   * 		"body": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"email": {
   * 				"required": false
   * 			},
   * 			"messageBatchId": {
   * 				"required": false
   * 			}
   * 		}
   * 	},
   * 	"CUSTOM_CONTENT_MESSAGE_SMS": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"title": {
   * 			"required": false
   * 		},
   * 		"body": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"phone": {
   * 				"required": false
   * 			},
   * 			"messageBatchId": {
   * 				"required": false
   * 			}
   * 		}
   * 	},
   * 	"VOIP_INCOMING_CALL_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"title": {
   * 			"required": false
   * 		},
   * 		"body": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"B2CAppId": {
   * 				"required": true
   * 			},
   * 			"B2CAppContext": {
   * 				"required": false
   * 			},
   * 			"B2CAppName": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"B2C_APP_MESSAGE_PUSH": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"title": {
   * 			"required": false
   * 		},
   * 		"body": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"B2CAppId": {
   * 				"required": true
   * 			},
   * 			"B2CAppContext": {
   * 				"required": false
   * 			},
   * 			"B2CAppName": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RECURRENT_PAYMENT_PROCEEDING_SUCCESS_RESULT_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"recurrentPaymentContextId": {
   * 				"required": true
   * 			},
   * 			"recurrentPaymentId": {
   * 				"required": true
   * 			},
   * 			"serviceConsumerId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RECURRENT_PAYMENT_PROCEEDING_UNKNOWN_ERROR_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"recurrentPaymentContextId": {
   * 				"required": true
   * 			},
   * 			"recurrentPaymentId": {
   * 				"required": true
   * 			},
   * 			"serviceConsumerId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"errorCode": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RECURRENT_PAYMENT_PROCEEDING_ACQUIRING_PAYMENT_PROCEED_ERROR_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"recurrentPaymentContextId": {
   * 				"required": true
   * 			},
   * 			"recurrentPaymentId": {
   * 				"required": true
   * 			},
   * 			"serviceConsumerId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"errorCode": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RECURRENT_PAYMENT_PROCEEDING_SERVICE_CONSUMER_NOT_FOUND_ERROR_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"recurrentPaymentContextId": {
   * 				"required": true
   * 			},
   * 			"recurrentPaymentId": {
   * 				"required": true
   * 			},
   * 			"serviceConsumerId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"errorCode": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RECURRENT_PAYMENT_PROCEEDING_LIMIT_EXCEEDED_ERROR_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"recurrentPaymentContextId": {
   * 				"required": true
   * 			},
   * 			"recurrentPaymentId": {
   * 				"required": true
   * 			},
   * 			"serviceConsumerId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"errorCode": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RECURRENT_PAYMENT_PROCEEDING_CONTEXT_NOT_FOUND_ERROR_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"recurrentPaymentContextId": {
   * 				"required": true
   * 			},
   * 			"recurrentPaymentId": {
   * 				"required": true
   * 			},
   * 			"serviceConsumerId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"errorCode": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RECURRENT_PAYMENT_PROCEEDING_CONTEXT_DISABLED_ERROR_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"recurrentPaymentContextId": {
   * 				"required": true
   * 			},
   * 			"recurrentPaymentId": {
   * 				"required": true
   * 			},
   * 			"serviceConsumerId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"errorCode": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RECURRENT_PAYMENT_PROCEEDING_CARD_TOKEN_NOT_VALID_ERROR_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"recurrentPaymentContextId": {
   * 				"required": true
   * 			},
   * 			"recurrentPaymentId": {
   * 				"required": true
   * 			},
   * 			"serviceConsumerId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"errorCode": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RECURRENT_PAYMENT_PROCEEDING_CAN_NOT_REGISTER_MULTI_PAYMENT_ERROR_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"recurrentPaymentContextId": {
   * 				"required": true
   * 			},
   * 			"recurrentPaymentId": {
   * 				"required": true
   * 			},
   * 			"serviceConsumerId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"errorCode": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"RECURRENT_PAYMENT_TOMORROW_PAYMENT_MESSAGE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"recurrentPaymentContextId": {
   * 				"required": true
   * 			},
   * 			"serviceConsumerId": {
   * 				"required": true
   * 			},
   * 			"residentId": {
   * 				"required": true
   * 			},
   * 			"userId": {
   * 				"required": true
   * 			},
   * 			"url": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"NEWS_ITEM_COMMON_MESSAGE_TYPE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"title": {
   * 			"required": true
   * 		},
   * 		"body": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"newsItemId": {
   * 				"required": true
   * 			},
   * 			"organizationId": {
   * 				"required": true
   * 			}
   * 		}
   * 	},
   * 	"NEWS_ITEM_EMERGENCY_MESSAGE_TYPE": {
   * 		"dv": {
   * 			"required": true
   * 		},
   * 		"title": {
   * 			"required": true
   * 		},
   * 		"body": {
   * 			"required": true
   * 		},
   * 		"data": {
   * 			"newsItemId": {
   * 				"required": true
   * 			},
   * 			"organizationId": {
   * 				"required": true
   * 			}
   * 		}
   * 	}
   * }`
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "sendMessage",
   *   "variable": [
   *     "data",
   *     "to",
   *     "email"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "REQUIRED",
   *   "message": "You can not use emailFrom without to.email"
   * }`
   *
   * `{
   *   "mutation": "sendMessage",
   *   "variable": [
   *     "data"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "REQUIRED",
   *   "message": "You should provide either \"user\", \"email\", \"phone\" or \"remoteClient\" attribute"
   * }`
   *
   * `{
   *   "mutation": "sendMessage",
   *   "variable": [
   *     "data",
   *     "meta"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "UNKNOWN_ATTRIBUTE",
   *   "message": "Unknown attribute \"{attr}\" provided to \"meta\" variable"
   * }`
   *
   * `{
   *   "mutation": "sendMessage",
   *   "variable": [
   *     "data",
   *     "meta"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "REQUIRED",
   *   "message": "Missing value for required \"meta.{attr}\" attribute"
   * }`
   *
   * `{
   *   "mutation": "sendMessage",
   *   "variable": [
   *     "data",
   *     "meta"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_VALUE",
   *   "message": "Unknown value \"{type}\" provided for message type"
   * }`
   *
   * `{
   *   "mutation": "sendMessage",
   *   "variable": [
   *     "data",
   *     "meta",
   *     "dv"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "DV_VERSION_MISMATCH",
   *   "message": "Wrong value for data version number"
   * }`
   */
  sendMessage?: Maybe<SendMessageOutput>;
  resendMessage?: Maybe<ResendMessageOutput>;
  syncRemoteClient?: Maybe<RemoteClient>;
  disconnectUserFromRemoteClient?: Maybe<DisconnectUserFromRemoteClientOutput>;
  setMessageStatus?: Maybe<SetMessageStatusOutput>;
  registerResident?: Maybe<Resident>;
  /**
   * Creates service consumer with default data, and automatically populates the optional data fields, such as `billingAccount
   *
   * To be successfully created accountNumber and unitName should at least have billingAccount with same data or Meter with same data
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "registerServiceConsumer",
   *   "variable": [
   *     "data",
   *     "residentId"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Cannot find Resident for current user"
   * }`
   *
   * `{
   *   "mutation": "registerServiceConsumer",
   *   "variable": [
   *     "data",
   *     "organizationId"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Cannot find Organization for current user"
   * }`
   *
   * `{
   *   "mutation": "registerServiceConsumer",
   *   "variable": [
   *     "data",
   *     "accountNumber"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Can't find billingAccount and any meters with this accountNumber, unitName and organization combination"
   * }`
   *
   * `{
   *   "mutation": "registerServiceConsumer",
   *   "variable": [
   *     "data",
   *     "accountNumber"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "WRONG_FORMAT",
   *   "message": "Argument \"accountNumber\" is null or empty"
   * }`
   */
  registerServiceConsumer?: Maybe<ServiceConsumer>;
  /**
   * Sends notification of requested type to all residents of provided scopes
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "sendMessageToResidentScopes",
   *   "variable": [
   *     "data",
   *     "scopes"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "NOT_FOUND",
   *   "message": "Scopes could not be empty",
   *   "messageForUser": "api.resident.sendMessageToResidentScopes.SCOPES_IS_EMPTY"
   * }`
   */
  sendMessageToResidentScopes?: Maybe<SendMessageToResidentScopesServiceOutput>;
  /**
   * Creates OnBoarding and set of OnBoardingStep records for specified role and user
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "createOnBoardingByType",
   *   "variable": [
   *     "data",
   *     "type"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "ROLE_IS_NOT_SUPPORTED",
   *   "message": "Role \"{type}\" is not supported to create OnBoarding for"
   * }`
   *
   * `{
   *   "mutation": "createOnBoardingByType",
   *   "variable": [
   *     "data",
   *     "type"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "ROLE_IS_NOT_SUPPORTED",
   *   "message": "Step transitions are not defined for role \"{type}\""
   * }`
   */
  createOnBoardingByType?: Maybe<OnBoarding>;
  registerMultiPayment?: Maybe<RegisterMultiPaymentOutput>;
  registerMultiPaymentForOneReceipt?: Maybe<RegisterMultiPaymentForOneReceiptOutput>;
  registerMultiPaymentForVirtualReceipt?: Maybe<RegisterMultiPaymentForOneReceiptOutput>;
  sendAppPushMessage?: Maybe<SendAppPushMessageOutput>;
  /**  Authenticate and generate a token for a User with the Password Authentication Strategy.  */
  authenticateUserWithPassword?: Maybe<AuthenticateUserOutput>;
  unauthenticateUser?: Maybe<UnauthenticateUserOutput>;
  updateAuthenticatedUser?: Maybe<User>;
};


export type MutationCreateUserHistoryRecordArgs = {
  data?: Maybe<UserHistoryRecordCreateInput>;
};


export type MutationCreateUserHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<UserHistoryRecordsCreateInput>>>;
};


export type MutationUpdateUserHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<UserHistoryRecordUpdateInput>;
};


export type MutationUpdateUserHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<UserHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteUserHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteUserHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateUserArgs = {
  data?: Maybe<UserCreateInput>;
};


export type MutationCreateUsersArgs = {
  data?: Maybe<Array<Maybe<UsersCreateInput>>>;
};


export type MutationUpdateUserArgs = {
  id: Scalars['ID'];
  data?: Maybe<UserUpdateInput>;
};


export type MutationUpdateUsersArgs = {
  data?: Maybe<Array<Maybe<UsersUpdateInput>>>;
};


export type MutationDeleteUserArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteUsersArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateForgotPasswordActionHistoryRecordArgs = {
  data?: Maybe<ForgotPasswordActionHistoryRecordCreateInput>;
};


export type MutationCreateForgotPasswordActionHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ForgotPasswordActionHistoryRecordsCreateInput>>>;
};


export type MutationUpdateForgotPasswordActionHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<ForgotPasswordActionHistoryRecordUpdateInput>;
};


export type MutationUpdateForgotPasswordActionHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ForgotPasswordActionHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteForgotPasswordActionHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteForgotPasswordActionHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateForgotPasswordActionArgs = {
  data?: Maybe<ForgotPasswordActionCreateInput>;
};


export type MutationCreateForgotPasswordActionsArgs = {
  data?: Maybe<Array<Maybe<ForgotPasswordActionsCreateInput>>>;
};


export type MutationUpdateForgotPasswordActionArgs = {
  id: Scalars['ID'];
  data?: Maybe<ForgotPasswordActionUpdateInput>;
};


export type MutationUpdateForgotPasswordActionsArgs = {
  data?: Maybe<Array<Maybe<ForgotPasswordActionsUpdateInput>>>;
};


export type MutationDeleteForgotPasswordActionArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteForgotPasswordActionsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateConfirmPhoneActionHistoryRecordArgs = {
  data?: Maybe<ConfirmPhoneActionHistoryRecordCreateInput>;
};


export type MutationCreateConfirmPhoneActionHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ConfirmPhoneActionHistoryRecordsCreateInput>>>;
};


export type MutationUpdateConfirmPhoneActionHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<ConfirmPhoneActionHistoryRecordUpdateInput>;
};


export type MutationUpdateConfirmPhoneActionHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ConfirmPhoneActionHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteConfirmPhoneActionHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteConfirmPhoneActionHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateConfirmPhoneActionArgs = {
  data?: Maybe<ConfirmPhoneActionCreateInput>;
};


export type MutationCreateConfirmPhoneActionsArgs = {
  data?: Maybe<Array<Maybe<ConfirmPhoneActionsCreateInput>>>;
};


export type MutationUpdateConfirmPhoneActionArgs = {
  id: Scalars['ID'];
  data?: Maybe<ConfirmPhoneActionUpdateInput>;
};


export type MutationUpdateConfirmPhoneActionsArgs = {
  data?: Maybe<Array<Maybe<ConfirmPhoneActionsUpdateInput>>>;
};


export type MutationDeleteConfirmPhoneActionArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteConfirmPhoneActionsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOidcClientHistoryRecordArgs = {
  data?: Maybe<OidcClientHistoryRecordCreateInput>;
};


export type MutationCreateOidcClientHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OidcClientHistoryRecordsCreateInput>>>;
};


export type MutationUpdateOidcClientHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<OidcClientHistoryRecordUpdateInput>;
};


export type MutationUpdateOidcClientHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OidcClientHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteOidcClientHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOidcClientHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOidcClientArgs = {
  data?: Maybe<OidcClientCreateInput>;
};


export type MutationCreateOidcClientsArgs = {
  data?: Maybe<Array<Maybe<OidcClientsCreateInput>>>;
};


export type MutationUpdateOidcClientArgs = {
  id: Scalars['ID'];
  data?: Maybe<OidcClientUpdateInput>;
};


export type MutationUpdateOidcClientsArgs = {
  data?: Maybe<Array<Maybe<OidcClientsUpdateInput>>>;
};


export type MutationDeleteOidcClientArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOidcClientsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateUserExternalIdentityHistoryRecordArgs = {
  data?: Maybe<UserExternalIdentityHistoryRecordCreateInput>;
};


export type MutationCreateUserExternalIdentityHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<UserExternalIdentityHistoryRecordsCreateInput>>>;
};


export type MutationUpdateUserExternalIdentityHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<UserExternalIdentityHistoryRecordUpdateInput>;
};


export type MutationUpdateUserExternalIdentityHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<UserExternalIdentityHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteUserExternalIdentityHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteUserExternalIdentityHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateUserExternalIdentityArgs = {
  data?: Maybe<UserExternalIdentityCreateInput>;
};


export type MutationCreateUserExternalIdentitiesArgs = {
  data?: Maybe<Array<Maybe<UserExternalIdentitiesCreateInput>>>;
};


export type MutationUpdateUserExternalIdentityArgs = {
  id: Scalars['ID'];
  data?: Maybe<UserExternalIdentityUpdateInput>;
};


export type MutationUpdateUserExternalIdentitiesArgs = {
  data?: Maybe<Array<Maybe<UserExternalIdentitiesUpdateInput>>>;
};


export type MutationDeleteUserExternalIdentityArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteUserExternalIdentitiesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateExternalTokenAccessRightHistoryRecordArgs = {
  data?: Maybe<ExternalTokenAccessRightHistoryRecordCreateInput>;
};


export type MutationCreateExternalTokenAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ExternalTokenAccessRightHistoryRecordsCreateInput>>>;
};


export type MutationUpdateExternalTokenAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<ExternalTokenAccessRightHistoryRecordUpdateInput>;
};


export type MutationUpdateExternalTokenAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ExternalTokenAccessRightHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteExternalTokenAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteExternalTokenAccessRightHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateExternalTokenAccessRightArgs = {
  data?: Maybe<ExternalTokenAccessRightCreateInput>;
};


export type MutationCreateExternalTokenAccessRightsArgs = {
  data?: Maybe<Array<Maybe<ExternalTokenAccessRightsCreateInput>>>;
};


export type MutationUpdateExternalTokenAccessRightArgs = {
  id: Scalars['ID'];
  data?: Maybe<ExternalTokenAccessRightUpdateInput>;
};


export type MutationUpdateExternalTokenAccessRightsArgs = {
  data?: Maybe<Array<Maybe<ExternalTokenAccessRightsUpdateInput>>>;
};


export type MutationDeleteExternalTokenAccessRightArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteExternalTokenAccessRightsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOrganizationHistoryRecordArgs = {
  data?: Maybe<OrganizationHistoryRecordCreateInput>;
};


export type MutationCreateOrganizationHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OrganizationHistoryRecordsCreateInput>>>;
};


export type MutationUpdateOrganizationHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationHistoryRecordUpdateInput>;
};


export type MutationUpdateOrganizationHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OrganizationHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteOrganizationHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrganizationHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOrganizationArgs = {
  data?: Maybe<OrganizationCreateInput>;
};


export type MutationCreateOrganizationsArgs = {
  data?: Maybe<Array<Maybe<OrganizationsCreateInput>>>;
};


export type MutationUpdateOrganizationArgs = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationUpdateInput>;
};


export type MutationUpdateOrganizationsArgs = {
  data?: Maybe<Array<Maybe<OrganizationsUpdateInput>>>;
};


export type MutationDeleteOrganizationArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrganizationsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOrganizationEmployeeHistoryRecordArgs = {
  data?: Maybe<OrganizationEmployeeHistoryRecordCreateInput>;
};


export type MutationCreateOrganizationEmployeeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeeHistoryRecordsCreateInput>>>;
};


export type MutationUpdateOrganizationEmployeeHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeHistoryRecordUpdateInput>;
};


export type MutationUpdateOrganizationEmployeeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeeHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteOrganizationEmployeeHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrganizationEmployeeHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOrganizationEmployeeArgs = {
  data?: Maybe<OrganizationEmployeeCreateInput>;
};


export type MutationCreateOrganizationEmployeesArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeesCreateInput>>>;
};


export type MutationUpdateOrganizationEmployeeArgs = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeUpdateInput>;
};


export type MutationUpdateOrganizationEmployeesArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeesUpdateInput>>>;
};


export type MutationDeleteOrganizationEmployeeArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrganizationEmployeesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOrganizationEmployeeRoleHistoryRecordArgs = {
  data?: Maybe<OrganizationEmployeeRoleHistoryRecordCreateInput>;
};


export type MutationCreateOrganizationEmployeeRoleHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeeRoleHistoryRecordsCreateInput>>>;
};


export type MutationUpdateOrganizationEmployeeRoleHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeRoleHistoryRecordUpdateInput>;
};


export type MutationUpdateOrganizationEmployeeRoleHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeeRoleHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteOrganizationEmployeeRoleHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrganizationEmployeeRoleHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOrganizationEmployeeRoleArgs = {
  data?: Maybe<OrganizationEmployeeRoleCreateInput>;
};


export type MutationCreateOrganizationEmployeeRolesArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeeRolesCreateInput>>>;
};


export type MutationUpdateOrganizationEmployeeRoleArgs = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeRoleUpdateInput>;
};


export type MutationUpdateOrganizationEmployeeRolesArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeeRolesUpdateInput>>>;
};


export type MutationDeleteOrganizationEmployeeRoleArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrganizationEmployeeRolesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOrganizationLinkHistoryRecordArgs = {
  data?: Maybe<OrganizationLinkHistoryRecordCreateInput>;
};


export type MutationCreateOrganizationLinkHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OrganizationLinkHistoryRecordsCreateInput>>>;
};


export type MutationUpdateOrganizationLinkHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationLinkHistoryRecordUpdateInput>;
};


export type MutationUpdateOrganizationLinkHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OrganizationLinkHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteOrganizationLinkHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrganizationLinkHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOrganizationLinkArgs = {
  data?: Maybe<OrganizationLinkCreateInput>;
};


export type MutationCreateOrganizationLinksArgs = {
  data?: Maybe<Array<Maybe<OrganizationLinksCreateInput>>>;
};


export type MutationUpdateOrganizationLinkArgs = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationLinkUpdateInput>;
};


export type MutationUpdateOrganizationLinksArgs = {
  data?: Maybe<Array<Maybe<OrganizationLinksUpdateInput>>>;
};


export type MutationDeleteOrganizationLinkArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrganizationLinksArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOrganizationEmployeeSpecializationHistoryRecordArgs = {
  data?: Maybe<OrganizationEmployeeSpecializationHistoryRecordCreateInput>;
};


export type MutationCreateOrganizationEmployeeSpecializationHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationHistoryRecordsCreateInput>>>;
};


export type MutationUpdateOrganizationEmployeeSpecializationHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeSpecializationHistoryRecordUpdateInput>;
};


export type MutationUpdateOrganizationEmployeeSpecializationHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteOrganizationEmployeeSpecializationHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrganizationEmployeeSpecializationHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOrganizationEmployeeSpecializationArgs = {
  data?: Maybe<OrganizationEmployeeSpecializationCreateInput>;
};


export type MutationCreateOrganizationEmployeeSpecializationsArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationsCreateInput>>>;
};


export type MutationUpdateOrganizationEmployeeSpecializationArgs = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeSpecializationUpdateInput>;
};


export type MutationUpdateOrganizationEmployeeSpecializationsArgs = {
  data?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationsUpdateInput>>>;
};


export type MutationDeleteOrganizationEmployeeSpecializationArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrganizationEmployeeSpecializationsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePropertyHistoryRecordArgs = {
  data?: Maybe<PropertyHistoryRecordCreateInput>;
};


export type MutationCreatePropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PropertyHistoryRecordsCreateInput>>>;
};


export type MutationUpdatePropertyHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<PropertyHistoryRecordUpdateInput>;
};


export type MutationUpdatePropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PropertyHistoryRecordsUpdateInput>>>;
};


export type MutationDeletePropertyHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePropertyHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePropertyArgs = {
  data?: Maybe<PropertyCreateInput>;
};


export type MutationCreatePropertiesArgs = {
  data?: Maybe<Array<Maybe<PropertiesCreateInput>>>;
};


export type MutationUpdatePropertyArgs = {
  id: Scalars['ID'];
  data?: Maybe<PropertyUpdateInput>;
};


export type MutationUpdatePropertiesArgs = {
  data?: Maybe<Array<Maybe<PropertiesUpdateInput>>>;
};


export type MutationDeletePropertyArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePropertiesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingIntegrationHistoryRecordArgs = {
  data?: Maybe<BillingIntegrationHistoryRecordCreateInput>;
};


export type MutationCreateBillingIntegrationHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBillingIntegrationHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationHistoryRecordUpdateInput>;
};


export type MutationUpdateBillingIntegrationHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBillingIntegrationHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingIntegrationHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingIntegrationArgs = {
  data?: Maybe<BillingIntegrationCreateInput>;
};


export type MutationCreateBillingIntegrationsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationsCreateInput>>>;
};


export type MutationUpdateBillingIntegrationArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationUpdateInput>;
};


export type MutationUpdateBillingIntegrationsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationsUpdateInput>>>;
};


export type MutationDeleteBillingIntegrationArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingIntegrationsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingIntegrationAccessRightHistoryRecordArgs = {
  data?: Maybe<BillingIntegrationAccessRightHistoryRecordCreateInput>;
};


export type MutationCreateBillingIntegrationAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationAccessRightHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBillingIntegrationAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationAccessRightHistoryRecordUpdateInput>;
};


export type MutationUpdateBillingIntegrationAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationAccessRightHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBillingIntegrationAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingIntegrationAccessRightHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingIntegrationAccessRightArgs = {
  data?: Maybe<BillingIntegrationAccessRightCreateInput>;
};


export type MutationCreateBillingIntegrationAccessRightsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationAccessRightsCreateInput>>>;
};


export type MutationUpdateBillingIntegrationAccessRightArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationAccessRightUpdateInput>;
};


export type MutationUpdateBillingIntegrationAccessRightsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationAccessRightsUpdateInput>>>;
};


export type MutationDeleteBillingIntegrationAccessRightArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingIntegrationAccessRightsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingIntegrationOrganizationContextHistoryRecordArgs = {
  data?: Maybe<BillingIntegrationOrganizationContextHistoryRecordCreateInput>;
};


export type MutationCreateBillingIntegrationOrganizationContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBillingIntegrationOrganizationContextHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationOrganizationContextHistoryRecordUpdateInput>;
};


export type MutationUpdateBillingIntegrationOrganizationContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBillingIntegrationOrganizationContextHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingIntegrationOrganizationContextHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingIntegrationOrganizationContextArgs = {
  data?: Maybe<BillingIntegrationOrganizationContextCreateInput>;
};


export type MutationCreateBillingIntegrationOrganizationContextsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextsCreateInput>>>;
};


export type MutationUpdateBillingIntegrationOrganizationContextArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationOrganizationContextUpdateInput>;
};


export type MutationUpdateBillingIntegrationOrganizationContextsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextsUpdateInput>>>;
};


export type MutationDeleteBillingIntegrationOrganizationContextArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingIntegrationOrganizationContextsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingIntegrationProblemArgs = {
  data?: Maybe<BillingIntegrationProblemCreateInput>;
};


export type MutationCreateBillingIntegrationProblemsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationProblemsCreateInput>>>;
};


export type MutationUpdateBillingIntegrationProblemArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingIntegrationProblemUpdateInput>;
};


export type MutationUpdateBillingIntegrationProblemsArgs = {
  data?: Maybe<Array<Maybe<BillingIntegrationProblemsUpdateInput>>>;
};


export type MutationDeleteBillingIntegrationProblemArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingIntegrationProblemsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingPropertyHistoryRecordArgs = {
  data?: Maybe<BillingPropertyHistoryRecordCreateInput>;
};


export type MutationCreateBillingPropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingPropertyHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBillingPropertyHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingPropertyHistoryRecordUpdateInput>;
};


export type MutationUpdateBillingPropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingPropertyHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBillingPropertyHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingPropertyHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingPropertyArgs = {
  data?: Maybe<BillingPropertyCreateInput>;
};


export type MutationCreateBillingPropertiesArgs = {
  data?: Maybe<Array<Maybe<BillingPropertiesCreateInput>>>;
};


export type MutationUpdateBillingPropertyArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingPropertyUpdateInput>;
};


export type MutationUpdateBillingPropertiesArgs = {
  data?: Maybe<Array<Maybe<BillingPropertiesUpdateInput>>>;
};


export type MutationDeleteBillingPropertyArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingPropertiesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingAccountHistoryRecordArgs = {
  data?: Maybe<BillingAccountHistoryRecordCreateInput>;
};


export type MutationCreateBillingAccountHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingAccountHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBillingAccountHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingAccountHistoryRecordUpdateInput>;
};


export type MutationUpdateBillingAccountHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingAccountHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBillingAccountHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingAccountHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingAccountArgs = {
  data?: Maybe<BillingAccountCreateInput>;
};


export type MutationCreateBillingAccountsArgs = {
  data?: Maybe<Array<Maybe<BillingAccountsCreateInput>>>;
};


export type MutationUpdateBillingAccountArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingAccountUpdateInput>;
};


export type MutationUpdateBillingAccountsArgs = {
  data?: Maybe<Array<Maybe<BillingAccountsUpdateInput>>>;
};


export type MutationDeleteBillingAccountArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingAccountsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingReceiptHistoryRecordArgs = {
  data?: Maybe<BillingReceiptHistoryRecordCreateInput>;
};


export type MutationCreateBillingReceiptHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingReceiptHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBillingReceiptHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingReceiptHistoryRecordUpdateInput>;
};


export type MutationUpdateBillingReceiptHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingReceiptHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBillingReceiptHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingReceiptHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingReceiptArgs = {
  data?: Maybe<BillingReceiptCreateInput>;
};


export type MutationCreateBillingReceiptsArgs = {
  data?: Maybe<Array<Maybe<BillingReceiptsCreateInput>>>;
};


export type MutationUpdateBillingReceiptArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingReceiptUpdateInput>;
};


export type MutationUpdateBillingReceiptsArgs = {
  data?: Maybe<Array<Maybe<BillingReceiptsUpdateInput>>>;
};


export type MutationDeleteBillingReceiptArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingReceiptsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingRecipientHistoryRecordArgs = {
  data?: Maybe<BillingRecipientHistoryRecordCreateInput>;
};


export type MutationCreateBillingRecipientHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingRecipientHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBillingRecipientHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingRecipientHistoryRecordUpdateInput>;
};


export type MutationUpdateBillingRecipientHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingRecipientHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBillingRecipientHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingRecipientHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingRecipientArgs = {
  data?: Maybe<BillingRecipientCreateInput>;
};


export type MutationCreateBillingRecipientsArgs = {
  data?: Maybe<Array<Maybe<BillingRecipientsCreateInput>>>;
};


export type MutationUpdateBillingRecipientArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingRecipientUpdateInput>;
};


export type MutationUpdateBillingRecipientsArgs = {
  data?: Maybe<Array<Maybe<BillingRecipientsUpdateInput>>>;
};


export type MutationDeleteBillingRecipientArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingRecipientsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingCategoryHistoryRecordArgs = {
  data?: Maybe<BillingCategoryHistoryRecordCreateInput>;
};


export type MutationCreateBillingCategoryHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingCategoryHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBillingCategoryHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingCategoryHistoryRecordUpdateInput>;
};


export type MutationUpdateBillingCategoryHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BillingCategoryHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBillingCategoryHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingCategoryHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBillingCategoryArgs = {
  data?: Maybe<BillingCategoryCreateInput>;
};


export type MutationCreateBillingCategoriesArgs = {
  data?: Maybe<Array<Maybe<BillingCategoriesCreateInput>>>;
};


export type MutationUpdateBillingCategoryArgs = {
  id: Scalars['ID'];
  data?: Maybe<BillingCategoryUpdateInput>;
};


export type MutationUpdateBillingCategoriesArgs = {
  data?: Maybe<Array<Maybe<BillingCategoriesUpdateInput>>>;
};


export type MutationDeleteBillingCategoryArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBillingCategoriesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankAccountHistoryRecordArgs = {
  data?: Maybe<BankAccountHistoryRecordCreateInput>;
};


export type MutationCreateBankAccountHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankAccountHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankAccountHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountHistoryRecordUpdateInput>;
};


export type MutationUpdateBankAccountHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankAccountHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankAccountHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankAccountHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankAccountArgs = {
  data?: Maybe<BankAccountCreateInput>;
};


export type MutationCreateBankAccountsArgs = {
  data?: Maybe<Array<Maybe<BankAccountsCreateInput>>>;
};


export type MutationUpdateBankAccountArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountUpdateInput>;
};


export type MutationUpdateBankAccountsArgs = {
  data?: Maybe<Array<Maybe<BankAccountsUpdateInput>>>;
};


export type MutationDeleteBankAccountArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankAccountsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankCategoryHistoryRecordArgs = {
  data?: Maybe<BankCategoryHistoryRecordCreateInput>;
};


export type MutationCreateBankCategoryHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankCategoryHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankCategoryHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankCategoryHistoryRecordUpdateInput>;
};


export type MutationUpdateBankCategoryHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankCategoryHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankCategoryHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankCategoryHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankCategoryArgs = {
  data?: Maybe<BankCategoryCreateInput>;
};


export type MutationCreateBankCategoriesArgs = {
  data?: Maybe<Array<Maybe<BankCategoriesCreateInput>>>;
};


export type MutationUpdateBankCategoryArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankCategoryUpdateInput>;
};


export type MutationUpdateBankCategoriesArgs = {
  data?: Maybe<Array<Maybe<BankCategoriesUpdateInput>>>;
};


export type MutationDeleteBankCategoryArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankCategoriesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankCostItemHistoryRecordArgs = {
  data?: Maybe<BankCostItemHistoryRecordCreateInput>;
};


export type MutationCreateBankCostItemHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankCostItemHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankCostItemHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankCostItemHistoryRecordUpdateInput>;
};


export type MutationUpdateBankCostItemHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankCostItemHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankCostItemHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankCostItemHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankCostItemArgs = {
  data?: Maybe<BankCostItemCreateInput>;
};


export type MutationCreateBankCostItemsArgs = {
  data?: Maybe<Array<Maybe<BankCostItemsCreateInput>>>;
};


export type MutationUpdateBankCostItemArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankCostItemUpdateInput>;
};


export type MutationUpdateBankCostItemsArgs = {
  data?: Maybe<Array<Maybe<BankCostItemsUpdateInput>>>;
};


export type MutationDeleteBankCostItemArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankCostItemsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankContractorAccountHistoryRecordArgs = {
  data?: Maybe<BankContractorAccountHistoryRecordCreateInput>;
};


export type MutationCreateBankContractorAccountHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankContractorAccountHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankContractorAccountHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankContractorAccountHistoryRecordUpdateInput>;
};


export type MutationUpdateBankContractorAccountHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankContractorAccountHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankContractorAccountHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankContractorAccountHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankContractorAccountArgs = {
  data?: Maybe<BankContractorAccountCreateInput>;
};


export type MutationCreateBankContractorAccountsArgs = {
  data?: Maybe<Array<Maybe<BankContractorAccountsCreateInput>>>;
};


export type MutationUpdateBankContractorAccountArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankContractorAccountUpdateInput>;
};


export type MutationUpdateBankContractorAccountsArgs = {
  data?: Maybe<Array<Maybe<BankContractorAccountsUpdateInput>>>;
};


export type MutationDeleteBankContractorAccountArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankContractorAccountsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankIntegrationHistoryRecordArgs = {
  data?: Maybe<BankIntegrationHistoryRecordCreateInput>;
};


export type MutationCreateBankIntegrationHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankIntegrationHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationHistoryRecordUpdateInput>;
};


export type MutationUpdateBankIntegrationHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankIntegrationHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankIntegrationHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankIntegrationArgs = {
  data?: Maybe<BankIntegrationCreateInput>;
};


export type MutationCreateBankIntegrationsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationsCreateInput>>>;
};


export type MutationUpdateBankIntegrationArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationUpdateInput>;
};


export type MutationUpdateBankIntegrationsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationsUpdateInput>>>;
};


export type MutationDeleteBankIntegrationArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankIntegrationsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankIntegrationAccessRightHistoryRecordArgs = {
  data?: Maybe<BankIntegrationAccessRightHistoryRecordCreateInput>;
};


export type MutationCreateBankIntegrationAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationAccessRightHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankIntegrationAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationAccessRightHistoryRecordUpdateInput>;
};


export type MutationUpdateBankIntegrationAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationAccessRightHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankIntegrationAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankIntegrationAccessRightHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankIntegrationAccessRightArgs = {
  data?: Maybe<BankIntegrationAccessRightCreateInput>;
};


export type MutationCreateBankIntegrationAccessRightsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationAccessRightsCreateInput>>>;
};


export type MutationUpdateBankIntegrationAccessRightArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationAccessRightUpdateInput>;
};


export type MutationUpdateBankIntegrationAccessRightsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationAccessRightsUpdateInput>>>;
};


export type MutationDeleteBankIntegrationAccessRightArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankIntegrationAccessRightsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankIntegrationAccountContextHistoryRecordArgs = {
  data?: Maybe<BankIntegrationAccountContextHistoryRecordCreateInput>;
};


export type MutationCreateBankIntegrationAccountContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationAccountContextHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankIntegrationAccountContextHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationAccountContextHistoryRecordUpdateInput>;
};


export type MutationUpdateBankIntegrationAccountContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationAccountContextHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankIntegrationAccountContextHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankIntegrationAccountContextHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankIntegrationAccountContextArgs = {
  data?: Maybe<BankIntegrationAccountContextCreateInput>;
};


export type MutationCreateBankIntegrationAccountContextsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationAccountContextsCreateInput>>>;
};


export type MutationUpdateBankIntegrationAccountContextArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationAccountContextUpdateInput>;
};


export type MutationUpdateBankIntegrationAccountContextsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationAccountContextsUpdateInput>>>;
};


export type MutationDeleteBankIntegrationAccountContextArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankIntegrationAccountContextsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankTransactionHistoryRecordArgs = {
  data?: Maybe<BankTransactionHistoryRecordCreateInput>;
};


export type MutationCreateBankTransactionHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankTransactionHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankTransactionHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankTransactionHistoryRecordUpdateInput>;
};


export type MutationUpdateBankTransactionHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankTransactionHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankTransactionHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankTransactionHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankTransactionArgs = {
  data?: Maybe<BankTransactionCreateInput>;
};


export type MutationCreateBankTransactionsArgs = {
  data?: Maybe<Array<Maybe<BankTransactionsCreateInput>>>;
};


export type MutationUpdateBankTransactionArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankTransactionUpdateInput>;
};


export type MutationUpdateBankTransactionsArgs = {
  data?: Maybe<Array<Maybe<BankTransactionsUpdateInput>>>;
};


export type MutationDeleteBankTransactionArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankTransactionsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankSyncTaskHistoryRecordArgs = {
  data?: Maybe<BankSyncTaskHistoryRecordCreateInput>;
};


export type MutationCreateBankSyncTaskHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankSyncTaskHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankSyncTaskHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankSyncTaskHistoryRecordUpdateInput>;
};


export type MutationUpdateBankSyncTaskHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankSyncTaskHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankSyncTaskHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankSyncTaskHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankSyncTaskArgs = {
  data?: Maybe<BankSyncTaskCreateInput>;
};


export type MutationCreateBankSyncTasksArgs = {
  data?: Maybe<Array<Maybe<BankSyncTasksCreateInput>>>;
};


export type MutationUpdateBankSyncTaskArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankSyncTaskUpdateInput>;
};


export type MutationUpdateBankSyncTasksArgs = {
  data?: Maybe<Array<Maybe<BankSyncTasksUpdateInput>>>;
};


export type MutationDeleteBankSyncTaskArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankSyncTasksArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankIntegrationOrganizationContextHistoryRecordArgs = {
  data?: Maybe<BankIntegrationOrganizationContextHistoryRecordCreateInput>;
};


export type MutationCreateBankIntegrationOrganizationContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationOrganizationContextHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankIntegrationOrganizationContextHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationOrganizationContextHistoryRecordUpdateInput>;
};


export type MutationUpdateBankIntegrationOrganizationContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationOrganizationContextHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankIntegrationOrganizationContextHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankIntegrationOrganizationContextHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankIntegrationOrganizationContextArgs = {
  data?: Maybe<BankIntegrationOrganizationContextCreateInput>;
};


export type MutationCreateBankIntegrationOrganizationContextsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationOrganizationContextsCreateInput>>>;
};


export type MutationUpdateBankIntegrationOrganizationContextArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankIntegrationOrganizationContextUpdateInput>;
};


export type MutationUpdateBankIntegrationOrganizationContextsArgs = {
  data?: Maybe<Array<Maybe<BankIntegrationOrganizationContextsUpdateInput>>>;
};


export type MutationDeleteBankIntegrationOrganizationContextArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankIntegrationOrganizationContextsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankAccountReportHistoryRecordArgs = {
  data?: Maybe<BankAccountReportHistoryRecordCreateInput>;
};


export type MutationCreateBankAccountReportHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankAccountReportHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankAccountReportHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountReportHistoryRecordUpdateInput>;
};


export type MutationUpdateBankAccountReportHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankAccountReportHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankAccountReportHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankAccountReportHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankAccountReportArgs = {
  data?: Maybe<BankAccountReportCreateInput>;
};


export type MutationCreateBankAccountReportsArgs = {
  data?: Maybe<Array<Maybe<BankAccountReportsCreateInput>>>;
};


export type MutationUpdateBankAccountReportArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountReportUpdateInput>;
};


export type MutationUpdateBankAccountReportsArgs = {
  data?: Maybe<Array<Maybe<BankAccountReportsUpdateInput>>>;
};


export type MutationDeleteBankAccountReportArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankAccountReportsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankAccountReportTaskHistoryRecordArgs = {
  data?: Maybe<BankAccountReportTaskHistoryRecordCreateInput>;
};


export type MutationCreateBankAccountReportTaskHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankAccountReportTaskHistoryRecordsCreateInput>>>;
};


export type MutationUpdateBankAccountReportTaskHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountReportTaskHistoryRecordUpdateInput>;
};


export type MutationUpdateBankAccountReportTaskHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<BankAccountReportTaskHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteBankAccountReportTaskHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankAccountReportTaskHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateBankAccountReportTaskArgs = {
  data?: Maybe<BankAccountReportTaskCreateInput>;
};


export type MutationCreateBankAccountReportTasksArgs = {
  data?: Maybe<Array<Maybe<BankAccountReportTasksCreateInput>>>;
};


export type MutationUpdateBankAccountReportTaskArgs = {
  id: Scalars['ID'];
  data?: Maybe<BankAccountReportTaskUpdateInput>;
};


export type MutationUpdateBankAccountReportTasksArgs = {
  data?: Maybe<Array<Maybe<BankAccountReportTasksUpdateInput>>>;
};


export type MutationDeleteBankAccountReportTaskArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteBankAccountReportTasksArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketHistoryRecordArgs = {
  data?: Maybe<TicketHistoryRecordCreateInput>;
};


export type MutationCreateTicketHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketArgs = {
  data?: Maybe<TicketCreateInput>;
};


export type MutationCreateTicketsArgs = {
  data?: Maybe<Array<Maybe<TicketsCreateInput>>>;
};


export type MutationUpdateTicketArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketUpdateInput>;
};


export type MutationUpdateTicketsArgs = {
  data?: Maybe<Array<Maybe<TicketsUpdateInput>>>;
};


export type MutationDeleteTicketArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketSourceHistoryRecordArgs = {
  data?: Maybe<TicketSourceHistoryRecordCreateInput>;
};


export type MutationCreateTicketSourceHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketSourceHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketSourceHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketSourceHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketSourceHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketSourceHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketSourceHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketSourceHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketSourceArgs = {
  data?: Maybe<TicketSourceCreateInput>;
};


export type MutationCreateTicketSourcesArgs = {
  data?: Maybe<Array<Maybe<TicketSourcesCreateInput>>>;
};


export type MutationUpdateTicketSourceArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketSourceUpdateInput>;
};


export type MutationUpdateTicketSourcesArgs = {
  data?: Maybe<Array<Maybe<TicketSourcesUpdateInput>>>;
};


export type MutationDeleteTicketSourceArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketSourcesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketStatusHistoryRecordArgs = {
  data?: Maybe<TicketStatusHistoryRecordCreateInput>;
};


export type MutationCreateTicketStatusHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketStatusHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketStatusHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketStatusHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketStatusHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketStatusHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketStatusHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketStatusHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketStatusArgs = {
  data?: Maybe<TicketStatusCreateInput>;
};


export type MutationCreateTicketStatusesArgs = {
  data?: Maybe<Array<Maybe<TicketStatusesCreateInput>>>;
};


export type MutationUpdateTicketStatusArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketStatusUpdateInput>;
};


export type MutationUpdateTicketStatusesArgs = {
  data?: Maybe<Array<Maybe<TicketStatusesUpdateInput>>>;
};


export type MutationDeleteTicketStatusArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketStatusesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketFileHistoryRecordArgs = {
  data?: Maybe<TicketFileHistoryRecordCreateInput>;
};


export type MutationCreateTicketFileHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketFileHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketFileHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketFileHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketFileHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketFileHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketFileHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketFileHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketFileArgs = {
  data?: Maybe<TicketFileCreateInput>;
};


export type MutationCreateTicketFilesArgs = {
  data?: Maybe<Array<Maybe<TicketFilesCreateInput>>>;
};


export type MutationUpdateTicketFileArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketFileUpdateInput>;
};


export type MutationUpdateTicketFilesArgs = {
  data?: Maybe<Array<Maybe<TicketFilesUpdateInput>>>;
};


export type MutationDeleteTicketFileArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketFilesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketChangeArgs = {
  data?: Maybe<TicketChangeCreateInput>;
};


export type MutationCreateTicketChangesArgs = {
  data?: Maybe<Array<Maybe<TicketChangesCreateInput>>>;
};


export type MutationUpdateTicketChangeArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketChangeUpdateInput>;
};


export type MutationUpdateTicketChangesArgs = {
  data?: Maybe<Array<Maybe<TicketChangesUpdateInput>>>;
};


export type MutationDeleteTicketChangeArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketChangesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketCommentHistoryRecordArgs = {
  data?: Maybe<TicketCommentHistoryRecordCreateInput>;
};


export type MutationCreateTicketCommentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketCommentHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketCommentHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketCommentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketCommentHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketCommentHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketCommentHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketCommentArgs = {
  data?: Maybe<TicketCommentCreateInput>;
};


export type MutationCreateTicketCommentsArgs = {
  data?: Maybe<Array<Maybe<TicketCommentsCreateInput>>>;
};


export type MutationUpdateTicketCommentArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentUpdateInput>;
};


export type MutationUpdateTicketCommentsArgs = {
  data?: Maybe<Array<Maybe<TicketCommentsUpdateInput>>>;
};


export type MutationDeleteTicketCommentArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketCommentsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketPlaceClassifierHistoryRecordArgs = {
  data?: Maybe<TicketPlaceClassifierHistoryRecordCreateInput>;
};


export type MutationCreateTicketPlaceClassifierHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketPlaceClassifierHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketPlaceClassifierHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketPlaceClassifierHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketPlaceClassifierHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketPlaceClassifierHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketPlaceClassifierHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketPlaceClassifierHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketPlaceClassifierArgs = {
  data?: Maybe<TicketPlaceClassifierCreateInput>;
};


export type MutationCreateTicketPlaceClassifiersArgs = {
  data?: Maybe<Array<Maybe<TicketPlaceClassifiersCreateInput>>>;
};


export type MutationUpdateTicketPlaceClassifierArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketPlaceClassifierUpdateInput>;
};


export type MutationUpdateTicketPlaceClassifiersArgs = {
  data?: Maybe<Array<Maybe<TicketPlaceClassifiersUpdateInput>>>;
};


export type MutationDeleteTicketPlaceClassifierArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketPlaceClassifiersArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketCategoryClassifierHistoryRecordArgs = {
  data?: Maybe<TicketCategoryClassifierHistoryRecordCreateInput>;
};


export type MutationCreateTicketCategoryClassifierHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketCategoryClassifierHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketCategoryClassifierHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketCategoryClassifierHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketCategoryClassifierHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketCategoryClassifierHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketCategoryClassifierHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketCategoryClassifierHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketCategoryClassifierArgs = {
  data?: Maybe<TicketCategoryClassifierCreateInput>;
};


export type MutationCreateTicketCategoryClassifiersArgs = {
  data?: Maybe<Array<Maybe<TicketCategoryClassifiersCreateInput>>>;
};


export type MutationUpdateTicketCategoryClassifierArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketCategoryClassifierUpdateInput>;
};


export type MutationUpdateTicketCategoryClassifiersArgs = {
  data?: Maybe<Array<Maybe<TicketCategoryClassifiersUpdateInput>>>;
};


export type MutationDeleteTicketCategoryClassifierArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketCategoryClassifiersArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketProblemClassifierHistoryRecordArgs = {
  data?: Maybe<TicketProblemClassifierHistoryRecordCreateInput>;
};


export type MutationCreateTicketProblemClassifierHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketProblemClassifierHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketProblemClassifierHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketProblemClassifierHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketProblemClassifierHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketProblemClassifierHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketProblemClassifierHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketProblemClassifierHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketProblemClassifierArgs = {
  data?: Maybe<TicketProblemClassifierCreateInput>;
};


export type MutationCreateTicketProblemClassifiersArgs = {
  data?: Maybe<Array<Maybe<TicketProblemClassifiersCreateInput>>>;
};


export type MutationUpdateTicketProblemClassifierArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketProblemClassifierUpdateInput>;
};


export type MutationUpdateTicketProblemClassifiersArgs = {
  data?: Maybe<Array<Maybe<TicketProblemClassifiersUpdateInput>>>;
};


export type MutationDeleteTicketProblemClassifierArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketProblemClassifiersArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketClassifierHistoryRecordArgs = {
  data?: Maybe<TicketClassifierHistoryRecordCreateInput>;
};


export type MutationCreateTicketClassifierHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketClassifierHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketClassifierHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketClassifierHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketClassifierHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketClassifierHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketClassifierHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketClassifierHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketClassifierArgs = {
  data?: Maybe<TicketClassifierCreateInput>;
};


export type MutationCreateTicketClassifiersArgs = {
  data?: Maybe<Array<Maybe<TicketClassifiersCreateInput>>>;
};


export type MutationUpdateTicketClassifierArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketClassifierUpdateInput>;
};


export type MutationUpdateTicketClassifiersArgs = {
  data?: Maybe<Array<Maybe<TicketClassifiersUpdateInput>>>;
};


export type MutationDeleteTicketClassifierArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketClassifiersArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketFilterTemplateHistoryRecordArgs = {
  data?: Maybe<TicketFilterTemplateHistoryRecordCreateInput>;
};


export type MutationCreateTicketFilterTemplateHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketFilterTemplateHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketFilterTemplateHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketFilterTemplateHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketFilterTemplateHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketFilterTemplateHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketFilterTemplateHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketFilterTemplateHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketFilterTemplateArgs = {
  data?: Maybe<TicketFilterTemplateCreateInput>;
};


export type MutationCreateTicketFilterTemplatesArgs = {
  data?: Maybe<Array<Maybe<TicketFilterTemplatesCreateInput>>>;
};


export type MutationUpdateTicketFilterTemplateArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketFilterTemplateUpdateInput>;
};


export type MutationUpdateTicketFilterTemplatesArgs = {
  data?: Maybe<Array<Maybe<TicketFilterTemplatesUpdateInput>>>;
};


export type MutationDeleteTicketFilterTemplateArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketFilterTemplatesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketCommentFileHistoryRecordArgs = {
  data?: Maybe<TicketCommentFileHistoryRecordCreateInput>;
};


export type MutationCreateTicketCommentFileHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketCommentFileHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketCommentFileHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentFileHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketCommentFileHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketCommentFileHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketCommentFileHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketCommentFileHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketCommentFileArgs = {
  data?: Maybe<TicketCommentFileCreateInput>;
};


export type MutationCreateTicketCommentFilesArgs = {
  data?: Maybe<Array<Maybe<TicketCommentFilesCreateInput>>>;
};


export type MutationUpdateTicketCommentFileArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentFileUpdateInput>;
};


export type MutationUpdateTicketCommentFilesArgs = {
  data?: Maybe<Array<Maybe<TicketCommentFilesUpdateInput>>>;
};


export type MutationDeleteTicketCommentFileArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketCommentFilesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketCommentsTimeHistoryRecordArgs = {
  data?: Maybe<TicketCommentsTimeHistoryRecordCreateInput>;
};


export type MutationCreateTicketCommentsTimeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketCommentsTimeHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketCommentsTimeHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentsTimeHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketCommentsTimeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketCommentsTimeHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketCommentsTimeHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketCommentsTimeHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketCommentsTimeArgs = {
  data?: Maybe<TicketCommentsTimeCreateInput>;
};


export type MutationCreateTicketCommentsTimesArgs = {
  data?: Maybe<Array<Maybe<TicketCommentsTimesCreateInput>>>;
};


export type MutationUpdateTicketCommentsTimeArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentsTimeUpdateInput>;
};


export type MutationUpdateTicketCommentsTimesArgs = {
  data?: Maybe<Array<Maybe<TicketCommentsTimesUpdateInput>>>;
};


export type MutationDeleteTicketCommentsTimeArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketCommentsTimesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateUserTicketCommentReadTimeHistoryRecordArgs = {
  data?: Maybe<UserTicketCommentReadTimeHistoryRecordCreateInput>;
};


export type MutationCreateUserTicketCommentReadTimeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<UserTicketCommentReadTimeHistoryRecordsCreateInput>>>;
};


export type MutationUpdateUserTicketCommentReadTimeHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<UserTicketCommentReadTimeHistoryRecordUpdateInput>;
};


export type MutationUpdateUserTicketCommentReadTimeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<UserTicketCommentReadTimeHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteUserTicketCommentReadTimeHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteUserTicketCommentReadTimeHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateUserTicketCommentReadTimeArgs = {
  data?: Maybe<UserTicketCommentReadTimeCreateInput>;
};


export type MutationCreateUserTicketCommentReadTimesArgs = {
  data?: Maybe<Array<Maybe<UserTicketCommentReadTimesCreateInput>>>;
};


export type MutationUpdateUserTicketCommentReadTimeArgs = {
  id: Scalars['ID'];
  data?: Maybe<UserTicketCommentReadTimeUpdateInput>;
};


export type MutationUpdateUserTicketCommentReadTimesArgs = {
  data?: Maybe<Array<Maybe<UserTicketCommentReadTimesUpdateInput>>>;
};


export type MutationDeleteUserTicketCommentReadTimeArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteUserTicketCommentReadTimesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketPropertyHintHistoryRecordArgs = {
  data?: Maybe<TicketPropertyHintHistoryRecordCreateInput>;
};


export type MutationCreateTicketPropertyHintHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketPropertyHintHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketPropertyHintHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketPropertyHintHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketPropertyHintHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketPropertyHintHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketPropertyHintHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketPropertyHintHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketPropertyHintArgs = {
  data?: Maybe<TicketPropertyHintCreateInput>;
};


export type MutationCreateTicketPropertyHintsArgs = {
  data?: Maybe<Array<Maybe<TicketPropertyHintsCreateInput>>>;
};


export type MutationUpdateTicketPropertyHintArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketPropertyHintUpdateInput>;
};


export type MutationUpdateTicketPropertyHintsArgs = {
  data?: Maybe<Array<Maybe<TicketPropertyHintsUpdateInput>>>;
};


export type MutationDeleteTicketPropertyHintArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketPropertyHintsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketPropertyHintPropertyHistoryRecordArgs = {
  data?: Maybe<TicketPropertyHintPropertyHistoryRecordCreateInput>;
};


export type MutationCreateTicketPropertyHintPropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketPropertyHintPropertyHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketPropertyHintPropertyHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketPropertyHintPropertyHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketPropertyHintPropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketPropertyHintPropertyHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketPropertyHintPropertyHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketPropertyHintPropertyHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketPropertyHintPropertyArgs = {
  data?: Maybe<TicketPropertyHintPropertyCreateInput>;
};


export type MutationCreateTicketPropertyHintPropertiesArgs = {
  data?: Maybe<Array<Maybe<TicketPropertyHintPropertiesCreateInput>>>;
};


export type MutationUpdateTicketPropertyHintPropertyArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketPropertyHintPropertyUpdateInput>;
};


export type MutationUpdateTicketPropertyHintPropertiesArgs = {
  data?: Maybe<Array<Maybe<TicketPropertyHintPropertiesUpdateInput>>>;
};


export type MutationDeleteTicketPropertyHintPropertyArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketPropertyHintPropertiesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketExportTaskHistoryRecordArgs = {
  data?: Maybe<TicketExportTaskHistoryRecordCreateInput>;
};


export type MutationCreateTicketExportTaskHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketExportTaskHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketExportTaskHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketExportTaskHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketExportTaskHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketExportTaskHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketExportTaskHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketExportTaskHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketExportTaskArgs = {
  data?: Maybe<TicketExportTaskCreateInput>;
};


export type MutationCreateTicketExportTasksArgs = {
  data?: Maybe<Array<Maybe<TicketExportTasksCreateInput>>>;
};


export type MutationUpdateTicketExportTaskArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketExportTaskUpdateInput>;
};


export type MutationUpdateTicketExportTasksArgs = {
  data?: Maybe<Array<Maybe<TicketExportTasksUpdateInput>>>;
};


export type MutationDeleteTicketExportTaskArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketExportTasksArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketOrganizationSettingHistoryRecordArgs = {
  data?: Maybe<TicketOrganizationSettingHistoryRecordCreateInput>;
};


export type MutationCreateTicketOrganizationSettingHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketOrganizationSettingHistoryRecordsCreateInput>>>;
};


export type MutationUpdateTicketOrganizationSettingHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketOrganizationSettingHistoryRecordUpdateInput>;
};


export type MutationUpdateTicketOrganizationSettingHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<TicketOrganizationSettingHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteTicketOrganizationSettingHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketOrganizationSettingHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateTicketOrganizationSettingArgs = {
  data?: Maybe<TicketOrganizationSettingCreateInput>;
};


export type MutationCreateTicketOrganizationSettingsArgs = {
  data?: Maybe<Array<Maybe<TicketOrganizationSettingsCreateInput>>>;
};


export type MutationUpdateTicketOrganizationSettingArgs = {
  id: Scalars['ID'];
  data?: Maybe<TicketOrganizationSettingUpdateInput>;
};


export type MutationUpdateTicketOrganizationSettingsArgs = {
  data?: Maybe<Array<Maybe<TicketOrganizationSettingsUpdateInput>>>;
};


export type MutationDeleteTicketOrganizationSettingArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteTicketOrganizationSettingsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentHistoryRecordArgs = {
  data?: Maybe<IncidentHistoryRecordCreateInput>;
};


export type MutationCreateIncidentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<IncidentHistoryRecordsCreateInput>>>;
};


export type MutationUpdateIncidentHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentHistoryRecordUpdateInput>;
};


export type MutationUpdateIncidentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<IncidentHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteIncidentHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentArgs = {
  data?: Maybe<IncidentCreateInput>;
};


export type MutationCreateIncidentsArgs = {
  data?: Maybe<Array<Maybe<IncidentsCreateInput>>>;
};


export type MutationUpdateIncidentArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentUpdateInput>;
};


export type MutationUpdateIncidentsArgs = {
  data?: Maybe<Array<Maybe<IncidentsUpdateInput>>>;
};


export type MutationDeleteIncidentArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentChangeArgs = {
  data?: Maybe<IncidentChangeCreateInput>;
};


export type MutationCreateIncidentChangesArgs = {
  data?: Maybe<Array<Maybe<IncidentChangesCreateInput>>>;
};


export type MutationUpdateIncidentChangeArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentChangeUpdateInput>;
};


export type MutationUpdateIncidentChangesArgs = {
  data?: Maybe<Array<Maybe<IncidentChangesUpdateInput>>>;
};


export type MutationDeleteIncidentChangeArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentChangesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentPropertyHistoryRecordArgs = {
  data?: Maybe<IncidentPropertyHistoryRecordCreateInput>;
};


export type MutationCreateIncidentPropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<IncidentPropertyHistoryRecordsCreateInput>>>;
};


export type MutationUpdateIncidentPropertyHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentPropertyHistoryRecordUpdateInput>;
};


export type MutationUpdateIncidentPropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<IncidentPropertyHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteIncidentPropertyHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentPropertyHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentPropertyArgs = {
  data?: Maybe<IncidentPropertyCreateInput>;
};


export type MutationCreateIncidentPropertiesArgs = {
  data?: Maybe<Array<Maybe<IncidentPropertiesCreateInput>>>;
};


export type MutationUpdateIncidentPropertyArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentPropertyUpdateInput>;
};


export type MutationUpdateIncidentPropertiesArgs = {
  data?: Maybe<Array<Maybe<IncidentPropertiesUpdateInput>>>;
};


export type MutationDeleteIncidentPropertyArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentPropertiesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentClassifierHistoryRecordArgs = {
  data?: Maybe<IncidentClassifierHistoryRecordCreateInput>;
};


export type MutationCreateIncidentClassifierHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<IncidentClassifierHistoryRecordsCreateInput>>>;
};


export type MutationUpdateIncidentClassifierHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentClassifierHistoryRecordUpdateInput>;
};


export type MutationUpdateIncidentClassifierHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<IncidentClassifierHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteIncidentClassifierHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentClassifierHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentClassifierArgs = {
  data?: Maybe<IncidentClassifierCreateInput>;
};


export type MutationCreateIncidentClassifiersArgs = {
  data?: Maybe<Array<Maybe<IncidentClassifiersCreateInput>>>;
};


export type MutationUpdateIncidentClassifierArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentClassifierUpdateInput>;
};


export type MutationUpdateIncidentClassifiersArgs = {
  data?: Maybe<Array<Maybe<IncidentClassifiersUpdateInput>>>;
};


export type MutationDeleteIncidentClassifierArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentClassifiersArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentClassifierIncidentHistoryRecordArgs = {
  data?: Maybe<IncidentClassifierIncidentHistoryRecordCreateInput>;
};


export type MutationCreateIncidentClassifierIncidentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<IncidentClassifierIncidentHistoryRecordsCreateInput>>>;
};


export type MutationUpdateIncidentClassifierIncidentHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentClassifierIncidentHistoryRecordUpdateInput>;
};


export type MutationUpdateIncidentClassifierIncidentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<IncidentClassifierIncidentHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteIncidentClassifierIncidentHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentClassifierIncidentHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentClassifierIncidentArgs = {
  data?: Maybe<IncidentClassifierIncidentCreateInput>;
};


export type MutationCreateIncidentClassifierIncidentsArgs = {
  data?: Maybe<Array<Maybe<IncidentClassifierIncidentsCreateInput>>>;
};


export type MutationUpdateIncidentClassifierIncidentArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentClassifierIncidentUpdateInput>;
};


export type MutationUpdateIncidentClassifierIncidentsArgs = {
  data?: Maybe<Array<Maybe<IncidentClassifierIncidentsUpdateInput>>>;
};


export type MutationDeleteIncidentClassifierIncidentArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentClassifierIncidentsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateUserFavoriteTicketHistoryRecordArgs = {
  data?: Maybe<UserFavoriteTicketHistoryRecordCreateInput>;
};


export type MutationCreateUserFavoriteTicketHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<UserFavoriteTicketHistoryRecordsCreateInput>>>;
};


export type MutationUpdateUserFavoriteTicketHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<UserFavoriteTicketHistoryRecordUpdateInput>;
};


export type MutationUpdateUserFavoriteTicketHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<UserFavoriteTicketHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteUserFavoriteTicketHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteUserFavoriteTicketHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateUserFavoriteTicketArgs = {
  data?: Maybe<UserFavoriteTicketCreateInput>;
};


export type MutationCreateUserFavoriteTicketsArgs = {
  data?: Maybe<Array<Maybe<UserFavoriteTicketsCreateInput>>>;
};


export type MutationUpdateUserFavoriteTicketArgs = {
  id: Scalars['ID'];
  data?: Maybe<UserFavoriteTicketUpdateInput>;
};


export type MutationUpdateUserFavoriteTicketsArgs = {
  data?: Maybe<Array<Maybe<UserFavoriteTicketsUpdateInput>>>;
};


export type MutationDeleteUserFavoriteTicketArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteUserFavoriteTicketsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentExportTaskHistoryRecordArgs = {
  data?: Maybe<IncidentExportTaskHistoryRecordCreateInput>;
};


export type MutationCreateIncidentExportTaskHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<IncidentExportTaskHistoryRecordsCreateInput>>>;
};


export type MutationUpdateIncidentExportTaskHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentExportTaskHistoryRecordUpdateInput>;
};


export type MutationUpdateIncidentExportTaskHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<IncidentExportTaskHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteIncidentExportTaskHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentExportTaskHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateIncidentExportTaskArgs = {
  data?: Maybe<IncidentExportTaskCreateInput>;
};


export type MutationCreateIncidentExportTasksArgs = {
  data?: Maybe<Array<Maybe<IncidentExportTasksCreateInput>>>;
};


export type MutationUpdateIncidentExportTaskArgs = {
  id: Scalars['ID'];
  data?: Maybe<IncidentExportTaskUpdateInput>;
};


export type MutationUpdateIncidentExportTasksArgs = {
  data?: Maybe<Array<Maybe<IncidentExportTasksUpdateInput>>>;
};


export type MutationDeleteIncidentExportTaskArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteIncidentExportTasksArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMessageHistoryRecordArgs = {
  data?: Maybe<MessageHistoryRecordCreateInput>;
};


export type MutationCreateMessageHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MessageHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMessageHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MessageHistoryRecordUpdateInput>;
};


export type MutationUpdateMessageHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MessageHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMessageHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMessageHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMessageArgs = {
  data?: Maybe<MessageCreateInput>;
};


export type MutationCreateMessagesArgs = {
  data?: Maybe<Array<Maybe<MessagesCreateInput>>>;
};


export type MutationUpdateMessageArgs = {
  id: Scalars['ID'];
  data?: Maybe<MessageUpdateInput>;
};


export type MutationUpdateMessagesArgs = {
  data?: Maybe<Array<Maybe<MessagesUpdateInput>>>;
};


export type MutationDeleteMessageArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMessagesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateRemoteClientHistoryRecordArgs = {
  data?: Maybe<RemoteClientHistoryRecordCreateInput>;
};


export type MutationCreateRemoteClientHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<RemoteClientHistoryRecordsCreateInput>>>;
};


export type MutationUpdateRemoteClientHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<RemoteClientHistoryRecordUpdateInput>;
};


export type MutationUpdateRemoteClientHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<RemoteClientHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteRemoteClientHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteRemoteClientHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateRemoteClientArgs = {
  data?: Maybe<RemoteClientCreateInput>;
};


export type MutationCreateRemoteClientsArgs = {
  data?: Maybe<Array<Maybe<RemoteClientsCreateInput>>>;
};


export type MutationUpdateRemoteClientArgs = {
  id: Scalars['ID'];
  data?: Maybe<RemoteClientUpdateInput>;
};


export type MutationUpdateRemoteClientsArgs = {
  data?: Maybe<Array<Maybe<RemoteClientsUpdateInput>>>;
};


export type MutationDeleteRemoteClientArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteRemoteClientsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMessageUserBlackListHistoryRecordArgs = {
  data?: Maybe<MessageUserBlackListHistoryRecordCreateInput>;
};


export type MutationCreateMessageUserBlackListHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MessageUserBlackListHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMessageUserBlackListHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MessageUserBlackListHistoryRecordUpdateInput>;
};


export type MutationUpdateMessageUserBlackListHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MessageUserBlackListHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMessageUserBlackListHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMessageUserBlackListHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMessageUserBlackListArgs = {
  data?: Maybe<MessageUserBlackListCreateInput>;
};


export type MutationCreateMessageUserBlackListsArgs = {
  data?: Maybe<Array<Maybe<MessageUserBlackListsCreateInput>>>;
};


export type MutationUpdateMessageUserBlackListArgs = {
  id: Scalars['ID'];
  data?: Maybe<MessageUserBlackListUpdateInput>;
};


export type MutationUpdateMessageUserBlackListsArgs = {
  data?: Maybe<Array<Maybe<MessageUserBlackListsUpdateInput>>>;
};


export type MutationDeleteMessageUserBlackListArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMessageUserBlackListsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMessageOrganizationBlackListHistoryRecordArgs = {
  data?: Maybe<MessageOrganizationBlackListHistoryRecordCreateInput>;
};


export type MutationCreateMessageOrganizationBlackListHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MessageOrganizationBlackListHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMessageOrganizationBlackListHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MessageOrganizationBlackListHistoryRecordUpdateInput>;
};


export type MutationUpdateMessageOrganizationBlackListHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MessageOrganizationBlackListHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMessageOrganizationBlackListHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMessageOrganizationBlackListHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMessageOrganizationBlackListArgs = {
  data?: Maybe<MessageOrganizationBlackListCreateInput>;
};


export type MutationCreateMessageOrganizationBlackListsArgs = {
  data?: Maybe<Array<Maybe<MessageOrganizationBlackListsCreateInput>>>;
};


export type MutationUpdateMessageOrganizationBlackListArgs = {
  id: Scalars['ID'];
  data?: Maybe<MessageOrganizationBlackListUpdateInput>;
};


export type MutationUpdateMessageOrganizationBlackListsArgs = {
  data?: Maybe<Array<Maybe<MessageOrganizationBlackListsUpdateInput>>>;
};


export type MutationDeleteMessageOrganizationBlackListArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMessageOrganizationBlackListsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMessageBatchHistoryRecordArgs = {
  data?: Maybe<MessageBatchHistoryRecordCreateInput>;
};


export type MutationCreateMessageBatchHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MessageBatchHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMessageBatchHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MessageBatchHistoryRecordUpdateInput>;
};


export type MutationUpdateMessageBatchHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MessageBatchHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMessageBatchHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMessageBatchHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMessageBatchArgs = {
  data?: Maybe<MessageBatchCreateInput>;
};


export type MutationCreateMessageBatchesArgs = {
  data?: Maybe<Array<Maybe<MessageBatchesCreateInput>>>;
};


export type MutationUpdateMessageBatchArgs = {
  id: Scalars['ID'];
  data?: Maybe<MessageBatchUpdateInput>;
};


export type MutationUpdateMessageBatchesArgs = {
  data?: Maybe<Array<Maybe<MessageBatchesUpdateInput>>>;
};


export type MutationDeleteMessageBatchArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMessageBatchesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateContactHistoryRecordArgs = {
  data?: Maybe<ContactHistoryRecordCreateInput>;
};


export type MutationCreateContactHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ContactHistoryRecordsCreateInput>>>;
};


export type MutationUpdateContactHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<ContactHistoryRecordUpdateInput>;
};


export type MutationUpdateContactHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ContactHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteContactHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteContactHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateContactArgs = {
  data?: Maybe<ContactCreateInput>;
};


export type MutationCreateContactsArgs = {
  data?: Maybe<Array<Maybe<ContactsCreateInput>>>;
};


export type MutationUpdateContactArgs = {
  id: Scalars['ID'];
  data?: Maybe<ContactUpdateInput>;
};


export type MutationUpdateContactsArgs = {
  data?: Maybe<Array<Maybe<ContactsUpdateInput>>>;
};


export type MutationDeleteContactArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteContactsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateContactRoleHistoryRecordArgs = {
  data?: Maybe<ContactRoleHistoryRecordCreateInput>;
};


export type MutationCreateContactRoleHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ContactRoleHistoryRecordsCreateInput>>>;
};


export type MutationUpdateContactRoleHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<ContactRoleHistoryRecordUpdateInput>;
};


export type MutationUpdateContactRoleHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ContactRoleHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteContactRoleHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteContactRoleHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateContactRoleArgs = {
  data?: Maybe<ContactRoleCreateInput>;
};


export type MutationCreateContactRolesArgs = {
  data?: Maybe<Array<Maybe<ContactRolesCreateInput>>>;
};


export type MutationUpdateContactRoleArgs = {
  id: Scalars['ID'];
  data?: Maybe<ContactRoleUpdateInput>;
};


export type MutationUpdateContactRolesArgs = {
  data?: Maybe<Array<Maybe<ContactRolesUpdateInput>>>;
};


export type MutationDeleteContactRoleArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteContactRolesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateContactExportTaskHistoryRecordArgs = {
  data?: Maybe<ContactExportTaskHistoryRecordCreateInput>;
};


export type MutationCreateContactExportTaskHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ContactExportTaskHistoryRecordsCreateInput>>>;
};


export type MutationUpdateContactExportTaskHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<ContactExportTaskHistoryRecordUpdateInput>;
};


export type MutationUpdateContactExportTaskHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ContactExportTaskHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteContactExportTaskHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteContactExportTaskHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateContactExportTaskArgs = {
  data?: Maybe<ContactExportTaskCreateInput>;
};


export type MutationCreateContactExportTasksArgs = {
  data?: Maybe<Array<Maybe<ContactExportTasksCreateInput>>>;
};


export type MutationUpdateContactExportTaskArgs = {
  id: Scalars['ID'];
  data?: Maybe<ContactExportTaskUpdateInput>;
};


export type MutationUpdateContactExportTasksArgs = {
  data?: Maybe<Array<Maybe<ContactExportTasksUpdateInput>>>;
};


export type MutationDeleteContactExportTaskArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteContactExportTasksArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateResidentHistoryRecordArgs = {
  data?: Maybe<ResidentHistoryRecordCreateInput>;
};


export type MutationCreateResidentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ResidentHistoryRecordsCreateInput>>>;
};


export type MutationUpdateResidentHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<ResidentHistoryRecordUpdateInput>;
};


export type MutationUpdateResidentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ResidentHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteResidentHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteResidentHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateResidentArgs = {
  data?: Maybe<ResidentCreateInput>;
};


export type MutationCreateResidentsArgs = {
  data?: Maybe<Array<Maybe<ResidentsCreateInput>>>;
};


export type MutationUpdateResidentArgs = {
  id: Scalars['ID'];
  data?: Maybe<ResidentUpdateInput>;
};


export type MutationUpdateResidentsArgs = {
  data?: Maybe<Array<Maybe<ResidentsUpdateInput>>>;
};


export type MutationDeleteResidentArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteResidentsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateServiceConsumerHistoryRecordArgs = {
  data?: Maybe<ServiceConsumerHistoryRecordCreateInput>;
};


export type MutationCreateServiceConsumerHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ServiceConsumerHistoryRecordsCreateInput>>>;
};


export type MutationUpdateServiceConsumerHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<ServiceConsumerHistoryRecordUpdateInput>;
};


export type MutationUpdateServiceConsumerHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ServiceConsumerHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteServiceConsumerHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteServiceConsumerHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateServiceConsumerArgs = {
  data?: Maybe<ServiceConsumerCreateInput>;
};


export type MutationCreateServiceConsumersArgs = {
  data?: Maybe<Array<Maybe<ServiceConsumersCreateInput>>>;
};


export type MutationUpdateServiceConsumerArgs = {
  id: Scalars['ID'];
  data?: Maybe<ServiceConsumerUpdateInput>;
};


export type MutationUpdateServiceConsumersArgs = {
  data?: Maybe<Array<Maybe<ServiceConsumersUpdateInput>>>;
};


export type MutationDeleteServiceConsumerArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteServiceConsumersArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOnBoardingHistoryRecordArgs = {
  data?: Maybe<OnBoardingHistoryRecordCreateInput>;
};


export type MutationCreateOnBoardingHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OnBoardingHistoryRecordsCreateInput>>>;
};


export type MutationUpdateOnBoardingHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<OnBoardingHistoryRecordUpdateInput>;
};


export type MutationUpdateOnBoardingHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OnBoardingHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteOnBoardingHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOnBoardingHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOnBoardingArgs = {
  data?: Maybe<OnBoardingCreateInput>;
};


export type MutationCreateOnBoardingsArgs = {
  data?: Maybe<Array<Maybe<OnBoardingsCreateInput>>>;
};


export type MutationUpdateOnBoardingArgs = {
  id: Scalars['ID'];
  data?: Maybe<OnBoardingUpdateInput>;
};


export type MutationUpdateOnBoardingsArgs = {
  data?: Maybe<Array<Maybe<OnBoardingsUpdateInput>>>;
};


export type MutationDeleteOnBoardingArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOnBoardingsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOnBoardingStepHistoryRecordArgs = {
  data?: Maybe<OnBoardingStepHistoryRecordCreateInput>;
};


export type MutationCreateOnBoardingStepHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OnBoardingStepHistoryRecordsCreateInput>>>;
};


export type MutationUpdateOnBoardingStepHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<OnBoardingStepHistoryRecordUpdateInput>;
};


export type MutationUpdateOnBoardingStepHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<OnBoardingStepHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteOnBoardingStepHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOnBoardingStepHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateOnBoardingStepArgs = {
  data?: Maybe<OnBoardingStepCreateInput>;
};


export type MutationCreateOnBoardingStepsArgs = {
  data?: Maybe<Array<Maybe<OnBoardingStepsCreateInput>>>;
};


export type MutationUpdateOnBoardingStepArgs = {
  id: Scalars['ID'];
  data?: Maybe<OnBoardingStepUpdateInput>;
};


export type MutationUpdateOnBoardingStepsArgs = {
  data?: Maybe<Array<Maybe<OnBoardingStepsUpdateInput>>>;
};


export type MutationDeleteOnBoardingStepArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOnBoardingStepsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMeterResourceHistoryRecordArgs = {
  data?: Maybe<MeterResourceHistoryRecordCreateInput>;
};


export type MutationCreateMeterResourceHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MeterResourceHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMeterResourceHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MeterResourceHistoryRecordUpdateInput>;
};


export type MutationUpdateMeterResourceHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MeterResourceHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMeterResourceHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMeterResourceHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMeterResourceArgs = {
  data?: Maybe<MeterResourceCreateInput>;
};


export type MutationCreateMeterResourcesArgs = {
  data?: Maybe<Array<Maybe<MeterResourcesCreateInput>>>;
};


export type MutationUpdateMeterResourceArgs = {
  id: Scalars['ID'];
  data?: Maybe<MeterResourceUpdateInput>;
};


export type MutationUpdateMeterResourcesArgs = {
  data?: Maybe<Array<Maybe<MeterResourcesUpdateInput>>>;
};


export type MutationDeleteMeterResourceArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMeterResourcesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMeterReadingSourceHistoryRecordArgs = {
  data?: Maybe<MeterReadingSourceHistoryRecordCreateInput>;
};


export type MutationCreateMeterReadingSourceHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MeterReadingSourceHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMeterReadingSourceHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingSourceHistoryRecordUpdateInput>;
};


export type MutationUpdateMeterReadingSourceHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MeterReadingSourceHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMeterReadingSourceHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMeterReadingSourceHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMeterReadingSourceArgs = {
  data?: Maybe<MeterReadingSourceCreateInput>;
};


export type MutationCreateMeterReadingSourcesArgs = {
  data?: Maybe<Array<Maybe<MeterReadingSourcesCreateInput>>>;
};


export type MutationUpdateMeterReadingSourceArgs = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingSourceUpdateInput>;
};


export type MutationUpdateMeterReadingSourcesArgs = {
  data?: Maybe<Array<Maybe<MeterReadingSourcesUpdateInput>>>;
};


export type MutationDeleteMeterReadingSourceArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMeterReadingSourcesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMeterReadingHistoryRecordArgs = {
  data?: Maybe<MeterReadingHistoryRecordCreateInput>;
};


export type MutationCreateMeterReadingHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MeterReadingHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMeterReadingHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingHistoryRecordUpdateInput>;
};


export type MutationUpdateMeterReadingHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MeterReadingHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMeterReadingHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMeterReadingHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMeterReadingArgs = {
  data?: Maybe<MeterReadingCreateInput>;
};


export type MutationCreateMeterReadingsArgs = {
  data?: Maybe<Array<Maybe<MeterReadingsCreateInput>>>;
};


export type MutationUpdateMeterReadingArgs = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingUpdateInput>;
};


export type MutationUpdateMeterReadingsArgs = {
  data?: Maybe<Array<Maybe<MeterReadingsUpdateInput>>>;
};


export type MutationDeleteMeterReadingArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMeterReadingsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMeterHistoryRecordArgs = {
  data?: Maybe<MeterHistoryRecordCreateInput>;
};


export type MutationCreateMeterHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MeterHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMeterHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MeterHistoryRecordUpdateInput>;
};


export type MutationUpdateMeterHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MeterHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMeterHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMeterHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMeterArgs = {
  data?: Maybe<MeterCreateInput>;
};


export type MutationCreateMetersArgs = {
  data?: Maybe<Array<Maybe<MetersCreateInput>>>;
};


export type MutationUpdateMeterArgs = {
  id: Scalars['ID'];
  data?: Maybe<MeterUpdateInput>;
};


export type MutationUpdateMetersArgs = {
  data?: Maybe<Array<Maybe<MetersUpdateInput>>>;
};


export type MutationDeleteMeterArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMetersArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMeterReadingFilterTemplateHistoryRecordArgs = {
  data?: Maybe<MeterReadingFilterTemplateHistoryRecordCreateInput>;
};


export type MutationCreateMeterReadingFilterTemplateHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MeterReadingFilterTemplateHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMeterReadingFilterTemplateHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingFilterTemplateHistoryRecordUpdateInput>;
};


export type MutationUpdateMeterReadingFilterTemplateHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MeterReadingFilterTemplateHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMeterReadingFilterTemplateHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMeterReadingFilterTemplateHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMeterReadingFilterTemplateArgs = {
  data?: Maybe<MeterReadingFilterTemplateCreateInput>;
};


export type MutationCreateMeterReadingFilterTemplatesArgs = {
  data?: Maybe<Array<Maybe<MeterReadingFilterTemplatesCreateInput>>>;
};


export type MutationUpdateMeterReadingFilterTemplateArgs = {
  id: Scalars['ID'];
  data?: Maybe<MeterReadingFilterTemplateUpdateInput>;
};


export type MutationUpdateMeterReadingFilterTemplatesArgs = {
  data?: Maybe<Array<Maybe<MeterReadingFilterTemplatesUpdateInput>>>;
};


export type MutationDeleteMeterReadingFilterTemplateArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMeterReadingFilterTemplatesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateServiceSubscriptionHistoryRecordArgs = {
  data?: Maybe<ServiceSubscriptionHistoryRecordCreateInput>;
};


export type MutationCreateServiceSubscriptionHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ServiceSubscriptionHistoryRecordsCreateInput>>>;
};


export type MutationUpdateServiceSubscriptionHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<ServiceSubscriptionHistoryRecordUpdateInput>;
};


export type MutationUpdateServiceSubscriptionHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ServiceSubscriptionHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteServiceSubscriptionHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteServiceSubscriptionHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateServiceSubscriptionArgs = {
  data?: Maybe<ServiceSubscriptionCreateInput>;
};


export type MutationCreateServiceSubscriptionsArgs = {
  data?: Maybe<Array<Maybe<ServiceSubscriptionsCreateInput>>>;
};


export type MutationUpdateServiceSubscriptionArgs = {
  id: Scalars['ID'];
  data?: Maybe<ServiceSubscriptionUpdateInput>;
};


export type MutationUpdateServiceSubscriptionsArgs = {
  data?: Maybe<Array<Maybe<ServiceSubscriptionsUpdateInput>>>;
};


export type MutationDeleteServiceSubscriptionArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteServiceSubscriptionsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateAcquiringIntegrationHistoryRecordArgs = {
  data?: Maybe<AcquiringIntegrationHistoryRecordCreateInput>;
};


export type MutationCreateAcquiringIntegrationHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationHistoryRecordsCreateInput>>>;
};


export type MutationUpdateAcquiringIntegrationHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationHistoryRecordUpdateInput>;
};


export type MutationUpdateAcquiringIntegrationHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteAcquiringIntegrationHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteAcquiringIntegrationHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateAcquiringIntegrationArgs = {
  data?: Maybe<AcquiringIntegrationCreateInput>;
};


export type MutationCreateAcquiringIntegrationsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationsCreateInput>>>;
};


export type MutationUpdateAcquiringIntegrationArgs = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationUpdateInput>;
};


export type MutationUpdateAcquiringIntegrationsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationsUpdateInput>>>;
};


export type MutationDeleteAcquiringIntegrationArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteAcquiringIntegrationsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateAcquiringIntegrationAccessRightHistoryRecordArgs = {
  data?: Maybe<AcquiringIntegrationAccessRightHistoryRecordCreateInput>;
};


export type MutationCreateAcquiringIntegrationAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightHistoryRecordsCreateInput>>>;
};


export type MutationUpdateAcquiringIntegrationAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationAccessRightHistoryRecordUpdateInput>;
};


export type MutationUpdateAcquiringIntegrationAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteAcquiringIntegrationAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteAcquiringIntegrationAccessRightHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateAcquiringIntegrationAccessRightArgs = {
  data?: Maybe<AcquiringIntegrationAccessRightCreateInput>;
};


export type MutationCreateAcquiringIntegrationAccessRightsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightsCreateInput>>>;
};


export type MutationUpdateAcquiringIntegrationAccessRightArgs = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationAccessRightUpdateInput>;
};


export type MutationUpdateAcquiringIntegrationAccessRightsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightsUpdateInput>>>;
};


export type MutationDeleteAcquiringIntegrationAccessRightArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteAcquiringIntegrationAccessRightsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateAcquiringIntegrationContextHistoryRecordArgs = {
  data?: Maybe<AcquiringIntegrationContextHistoryRecordCreateInput>;
};


export type MutationCreateAcquiringIntegrationContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationContextHistoryRecordsCreateInput>>>;
};


export type MutationUpdateAcquiringIntegrationContextHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationContextHistoryRecordUpdateInput>;
};


export type MutationUpdateAcquiringIntegrationContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationContextHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteAcquiringIntegrationContextHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteAcquiringIntegrationContextHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateAcquiringIntegrationContextArgs = {
  data?: Maybe<AcquiringIntegrationContextCreateInput>;
};


export type MutationCreateAcquiringIntegrationContextsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationContextsCreateInput>>>;
};


export type MutationUpdateAcquiringIntegrationContextArgs = {
  id: Scalars['ID'];
  data?: Maybe<AcquiringIntegrationContextUpdateInput>;
};


export type MutationUpdateAcquiringIntegrationContextsArgs = {
  data?: Maybe<Array<Maybe<AcquiringIntegrationContextsUpdateInput>>>;
};


export type MutationDeleteAcquiringIntegrationContextArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteAcquiringIntegrationContextsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMultiPaymentHistoryRecordArgs = {
  data?: Maybe<MultiPaymentHistoryRecordCreateInput>;
};


export type MutationCreateMultiPaymentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MultiPaymentHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMultiPaymentHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MultiPaymentHistoryRecordUpdateInput>;
};


export type MutationUpdateMultiPaymentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MultiPaymentHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMultiPaymentHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMultiPaymentHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMultiPaymentArgs = {
  data?: Maybe<MultiPaymentCreateInput>;
};


export type MutationCreateMultiPaymentsArgs = {
  data?: Maybe<Array<Maybe<MultiPaymentsCreateInput>>>;
};


export type MutationUpdateMultiPaymentArgs = {
  id: Scalars['ID'];
  data?: Maybe<MultiPaymentUpdateInput>;
};


export type MutationUpdateMultiPaymentsArgs = {
  data?: Maybe<Array<Maybe<MultiPaymentsUpdateInput>>>;
};


export type MutationDeleteMultiPaymentArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMultiPaymentsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePaymentHistoryRecordArgs = {
  data?: Maybe<PaymentHistoryRecordCreateInput>;
};


export type MutationCreatePaymentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PaymentHistoryRecordsCreateInput>>>;
};


export type MutationUpdatePaymentHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<PaymentHistoryRecordUpdateInput>;
};


export type MutationUpdatePaymentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PaymentHistoryRecordsUpdateInput>>>;
};


export type MutationDeletePaymentHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePaymentHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePaymentArgs = {
  data?: Maybe<PaymentCreateInput>;
};


export type MutationCreatePaymentsArgs = {
  data?: Maybe<Array<Maybe<PaymentsCreateInput>>>;
};


export type MutationUpdatePaymentArgs = {
  id: Scalars['ID'];
  data?: Maybe<PaymentUpdateInput>;
};


export type MutationUpdatePaymentsArgs = {
  data?: Maybe<Array<Maybe<PaymentsUpdateInput>>>;
};


export type MutationDeletePaymentArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePaymentsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePaymentsFilterTemplateHistoryRecordArgs = {
  data?: Maybe<PaymentsFilterTemplateHistoryRecordCreateInput>;
};


export type MutationCreatePaymentsFilterTemplateHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PaymentsFilterTemplateHistoryRecordsCreateInput>>>;
};


export type MutationUpdatePaymentsFilterTemplateHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<PaymentsFilterTemplateHistoryRecordUpdateInput>;
};


export type MutationUpdatePaymentsFilterTemplateHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PaymentsFilterTemplateHistoryRecordsUpdateInput>>>;
};


export type MutationDeletePaymentsFilterTemplateHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePaymentsFilterTemplateHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePaymentsFilterTemplateArgs = {
  data?: Maybe<PaymentsFilterTemplateCreateInput>;
};


export type MutationCreatePaymentsFilterTemplatesArgs = {
  data?: Maybe<Array<Maybe<PaymentsFilterTemplatesCreateInput>>>;
};


export type MutationUpdatePaymentsFilterTemplateArgs = {
  id: Scalars['ID'];
  data?: Maybe<PaymentsFilterTemplateUpdateInput>;
};


export type MutationUpdatePaymentsFilterTemplatesArgs = {
  data?: Maybe<Array<Maybe<PaymentsFilterTemplatesUpdateInput>>>;
};


export type MutationDeletePaymentsFilterTemplateArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePaymentsFilterTemplatesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateRecurrentPaymentContextHistoryRecordArgs = {
  data?: Maybe<RecurrentPaymentContextHistoryRecordCreateInput>;
};


export type MutationCreateRecurrentPaymentContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<RecurrentPaymentContextHistoryRecordsCreateInput>>>;
};


export type MutationUpdateRecurrentPaymentContextHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<RecurrentPaymentContextHistoryRecordUpdateInput>;
};


export type MutationUpdateRecurrentPaymentContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<RecurrentPaymentContextHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteRecurrentPaymentContextHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteRecurrentPaymentContextHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateRecurrentPaymentContextArgs = {
  data?: Maybe<RecurrentPaymentContextCreateInput>;
};


export type MutationCreateRecurrentPaymentContextsArgs = {
  data?: Maybe<Array<Maybe<RecurrentPaymentContextsCreateInput>>>;
};


export type MutationUpdateRecurrentPaymentContextArgs = {
  id: Scalars['ID'];
  data?: Maybe<RecurrentPaymentContextUpdateInput>;
};


export type MutationUpdateRecurrentPaymentContextsArgs = {
  data?: Maybe<Array<Maybe<RecurrentPaymentContextsUpdateInput>>>;
};


export type MutationDeleteRecurrentPaymentContextArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteRecurrentPaymentContextsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateRecurrentPaymentHistoryRecordArgs = {
  data?: Maybe<RecurrentPaymentHistoryRecordCreateInput>;
};


export type MutationCreateRecurrentPaymentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<RecurrentPaymentHistoryRecordsCreateInput>>>;
};


export type MutationUpdateRecurrentPaymentHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<RecurrentPaymentHistoryRecordUpdateInput>;
};


export type MutationUpdateRecurrentPaymentHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<RecurrentPaymentHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteRecurrentPaymentHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteRecurrentPaymentHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateRecurrentPaymentArgs = {
  data?: Maybe<RecurrentPaymentCreateInput>;
};


export type MutationCreateRecurrentPaymentsArgs = {
  data?: Maybe<Array<Maybe<RecurrentPaymentsCreateInput>>>;
};


export type MutationUpdateRecurrentPaymentArgs = {
  id: Scalars['ID'];
  data?: Maybe<RecurrentPaymentUpdateInput>;
};


export type MutationUpdateRecurrentPaymentsArgs = {
  data?: Maybe<Array<Maybe<RecurrentPaymentsUpdateInput>>>;
};


export type MutationDeleteRecurrentPaymentArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteRecurrentPaymentsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2BAppHistoryRecordArgs = {
  data?: Maybe<B2BAppHistoryRecordCreateInput>;
};


export type MutationCreateB2BAppHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2BAppHistoryRecordsCreateInput>>>;
};


export type MutationUpdateB2BAppHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppHistoryRecordUpdateInput>;
};


export type MutationUpdateB2BAppHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2BAppHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteB2BAppHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2BAppHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2BAppArgs = {
  data?: Maybe<B2BAppCreateInput>;
};


export type MutationCreateB2BAppsArgs = {
  data?: Maybe<Array<Maybe<B2BAppsCreateInput>>>;
};


export type MutationUpdateB2BAppArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppUpdateInput>;
};


export type MutationUpdateB2BAppsArgs = {
  data?: Maybe<Array<Maybe<B2BAppsUpdateInput>>>;
};


export type MutationDeleteB2BAppArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2BAppsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2BAppContextHistoryRecordArgs = {
  data?: Maybe<B2BAppContextHistoryRecordCreateInput>;
};


export type MutationCreateB2BAppContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2BAppContextHistoryRecordsCreateInput>>>;
};


export type MutationUpdateB2BAppContextHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppContextHistoryRecordUpdateInput>;
};


export type MutationUpdateB2BAppContextHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2BAppContextHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteB2BAppContextHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2BAppContextHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2BAppContextArgs = {
  data?: Maybe<B2BAppContextCreateInput>;
};


export type MutationCreateB2BAppContextsArgs = {
  data?: Maybe<Array<Maybe<B2BAppContextsCreateInput>>>;
};


export type MutationUpdateB2BAppContextArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppContextUpdateInput>;
};


export type MutationUpdateB2BAppContextsArgs = {
  data?: Maybe<Array<Maybe<B2BAppContextsUpdateInput>>>;
};


export type MutationDeleteB2BAppContextArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2BAppContextsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2BAppAccessRightHistoryRecordArgs = {
  data?: Maybe<B2BAppAccessRightHistoryRecordCreateInput>;
};


export type MutationCreateB2BAppAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2BAppAccessRightHistoryRecordsCreateInput>>>;
};


export type MutationUpdateB2BAppAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppAccessRightHistoryRecordUpdateInput>;
};


export type MutationUpdateB2BAppAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2BAppAccessRightHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteB2BAppAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2BAppAccessRightHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2BAppAccessRightArgs = {
  data?: Maybe<B2BAppAccessRightCreateInput>;
};


export type MutationCreateB2BAppAccessRightsArgs = {
  data?: Maybe<Array<Maybe<B2BAppAccessRightsCreateInput>>>;
};


export type MutationUpdateB2BAppAccessRightArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppAccessRightUpdateInput>;
};


export type MutationUpdateB2BAppAccessRightsArgs = {
  data?: Maybe<Array<Maybe<B2BAppAccessRightsUpdateInput>>>;
};


export type MutationDeleteB2BAppAccessRightArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2BAppAccessRightsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2CAppHistoryRecordArgs = {
  data?: Maybe<B2CAppHistoryRecordCreateInput>;
};


export type MutationCreateB2CAppHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2CAppHistoryRecordsCreateInput>>>;
};


export type MutationUpdateB2CAppHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppHistoryRecordUpdateInput>;
};


export type MutationUpdateB2CAppHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2CAppHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteB2CAppHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2CAppHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2CAppArgs = {
  data?: Maybe<B2CAppCreateInput>;
};


export type MutationCreateB2CAppsArgs = {
  data?: Maybe<Array<Maybe<B2CAppsCreateInput>>>;
};


export type MutationUpdateB2CAppArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppUpdateInput>;
};


export type MutationUpdateB2CAppsArgs = {
  data?: Maybe<Array<Maybe<B2CAppsUpdateInput>>>;
};


export type MutationDeleteB2CAppArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2CAppsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2CAppAccessRightHistoryRecordArgs = {
  data?: Maybe<B2CAppAccessRightHistoryRecordCreateInput>;
};


export type MutationCreateB2CAppAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2CAppAccessRightHistoryRecordsCreateInput>>>;
};


export type MutationUpdateB2CAppAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppAccessRightHistoryRecordUpdateInput>;
};


export type MutationUpdateB2CAppAccessRightHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2CAppAccessRightHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteB2CAppAccessRightHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2CAppAccessRightHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2CAppAccessRightArgs = {
  data?: Maybe<B2CAppAccessRightCreateInput>;
};


export type MutationCreateB2CAppAccessRightsArgs = {
  data?: Maybe<Array<Maybe<B2CAppAccessRightsCreateInput>>>;
};


export type MutationUpdateB2CAppAccessRightArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppAccessRightUpdateInput>;
};


export type MutationUpdateB2CAppAccessRightsArgs = {
  data?: Maybe<Array<Maybe<B2CAppAccessRightsUpdateInput>>>;
};


export type MutationDeleteB2CAppAccessRightArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2CAppAccessRightsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2CAppBuildHistoryRecordArgs = {
  data?: Maybe<B2CAppBuildHistoryRecordCreateInput>;
};


export type MutationCreateB2CAppBuildHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2CAppBuildHistoryRecordsCreateInput>>>;
};


export type MutationUpdateB2CAppBuildHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppBuildHistoryRecordUpdateInput>;
};


export type MutationUpdateB2CAppBuildHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2CAppBuildHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteB2CAppBuildHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2CAppBuildHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2CAppBuildArgs = {
  data?: Maybe<B2CAppBuildCreateInput>;
};


export type MutationCreateB2CAppBuildsArgs = {
  data?: Maybe<Array<Maybe<B2CAppBuildsCreateInput>>>;
};


export type MutationUpdateB2CAppBuildArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppBuildUpdateInput>;
};


export type MutationUpdateB2CAppBuildsArgs = {
  data?: Maybe<Array<Maybe<B2CAppBuildsUpdateInput>>>;
};


export type MutationDeleteB2CAppBuildArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2CAppBuildsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2CAppPropertyHistoryRecordArgs = {
  data?: Maybe<B2CAppPropertyHistoryRecordCreateInput>;
};


export type MutationCreateB2CAppPropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2CAppPropertyHistoryRecordsCreateInput>>>;
};


export type MutationUpdateB2CAppPropertyHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppPropertyHistoryRecordUpdateInput>;
};


export type MutationUpdateB2CAppPropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2CAppPropertyHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteB2CAppPropertyHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2CAppPropertyHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2CAppPropertyArgs = {
  data?: Maybe<B2CAppPropertyCreateInput>;
};


export type MutationCreateB2CAppPropertiesArgs = {
  data?: Maybe<Array<Maybe<B2CAppPropertiesCreateInput>>>;
};


export type MutationUpdateB2CAppPropertyArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2CAppPropertyUpdateInput>;
};


export type MutationUpdateB2CAppPropertiesArgs = {
  data?: Maybe<Array<Maybe<B2CAppPropertiesUpdateInput>>>;
};


export type MutationDeleteB2CAppPropertyArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2CAppPropertiesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2BAppPromoBlockHistoryRecordArgs = {
  data?: Maybe<B2BAppPromoBlockHistoryRecordCreateInput>;
};


export type MutationCreateB2BAppPromoBlockHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2BAppPromoBlockHistoryRecordsCreateInput>>>;
};


export type MutationUpdateB2BAppPromoBlockHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppPromoBlockHistoryRecordUpdateInput>;
};


export type MutationUpdateB2BAppPromoBlockHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<B2BAppPromoBlockHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteB2BAppPromoBlockHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2BAppPromoBlockHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateB2BAppPromoBlockArgs = {
  data?: Maybe<B2BAppPromoBlockCreateInput>;
};


export type MutationCreateB2BAppPromoBlocksArgs = {
  data?: Maybe<Array<Maybe<B2BAppPromoBlocksCreateInput>>>;
};


export type MutationUpdateB2BAppPromoBlockArgs = {
  id: Scalars['ID'];
  data?: Maybe<B2BAppPromoBlockUpdateInput>;
};


export type MutationUpdateB2BAppPromoBlocksArgs = {
  data?: Maybe<Array<Maybe<B2BAppPromoBlocksUpdateInput>>>;
};


export type MutationDeleteB2BAppPromoBlockArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteB2BAppPromoBlocksArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMessageAppBlackListHistoryRecordArgs = {
  data?: Maybe<MessageAppBlackListHistoryRecordCreateInput>;
};


export type MutationCreateMessageAppBlackListHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MessageAppBlackListHistoryRecordsCreateInput>>>;
};


export type MutationUpdateMessageAppBlackListHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<MessageAppBlackListHistoryRecordUpdateInput>;
};


export type MutationUpdateMessageAppBlackListHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<MessageAppBlackListHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteMessageAppBlackListHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMessageAppBlackListHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateMessageAppBlackListArgs = {
  data?: Maybe<MessageAppBlackListCreateInput>;
};


export type MutationCreateMessageAppBlackListsArgs = {
  data?: Maybe<Array<Maybe<MessageAppBlackListsCreateInput>>>;
};


export type MutationUpdateMessageAppBlackListArgs = {
  id: Scalars['ID'];
  data?: Maybe<MessageAppBlackListUpdateInput>;
};


export type MutationUpdateMessageAppBlackListsArgs = {
  data?: Maybe<Array<Maybe<MessageAppBlackListsUpdateInput>>>;
};


export type MutationDeleteMessageAppBlackListArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteMessageAppBlackListsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateExternalReportHistoryRecordArgs = {
  data?: Maybe<ExternalReportHistoryRecordCreateInput>;
};


export type MutationCreateExternalReportHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ExternalReportHistoryRecordsCreateInput>>>;
};


export type MutationUpdateExternalReportHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<ExternalReportHistoryRecordUpdateInput>;
};


export type MutationUpdateExternalReportHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<ExternalReportHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteExternalReportHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteExternalReportHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateExternalReportArgs = {
  data?: Maybe<ExternalReportCreateInput>;
};


export type MutationCreateExternalReportsArgs = {
  data?: Maybe<Array<Maybe<ExternalReportsCreateInput>>>;
};


export type MutationUpdateExternalReportArgs = {
  id: Scalars['ID'];
  data?: Maybe<ExternalReportUpdateInput>;
};


export type MutationUpdateExternalReportsArgs = {
  data?: Maybe<Array<Maybe<ExternalReportsUpdateInput>>>;
};


export type MutationDeleteExternalReportArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteExternalReportsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePropertyScopeHistoryRecordArgs = {
  data?: Maybe<PropertyScopeHistoryRecordCreateInput>;
};


export type MutationCreatePropertyScopeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PropertyScopeHistoryRecordsCreateInput>>>;
};


export type MutationUpdatePropertyScopeHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopeHistoryRecordUpdateInput>;
};


export type MutationUpdatePropertyScopeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PropertyScopeHistoryRecordsUpdateInput>>>;
};


export type MutationDeletePropertyScopeHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePropertyScopeHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePropertyScopeArgs = {
  data?: Maybe<PropertyScopeCreateInput>;
};


export type MutationCreatePropertyScopesArgs = {
  data?: Maybe<Array<Maybe<PropertyScopesCreateInput>>>;
};


export type MutationUpdatePropertyScopeArgs = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopeUpdateInput>;
};


export type MutationUpdatePropertyScopesArgs = {
  data?: Maybe<Array<Maybe<PropertyScopesUpdateInput>>>;
};


export type MutationDeletePropertyScopeArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePropertyScopesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePropertyScopeOrganizationEmployeeHistoryRecordArgs = {
  data?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordCreateInput>;
};


export type MutationCreatePropertyScopeOrganizationEmployeeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeHistoryRecordsCreateInput>>>;
};


export type MutationUpdatePropertyScopeOrganizationEmployeeHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordUpdateInput>;
};


export type MutationUpdatePropertyScopeOrganizationEmployeeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeHistoryRecordsUpdateInput>>>;
};


export type MutationDeletePropertyScopeOrganizationEmployeeHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePropertyScopeOrganizationEmployeeHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePropertyScopeOrganizationEmployeeArgs = {
  data?: Maybe<PropertyScopeOrganizationEmployeeCreateInput>;
};


export type MutationCreatePropertyScopeOrganizationEmployeesArgs = {
  data?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeesCreateInput>>>;
};


export type MutationUpdatePropertyScopeOrganizationEmployeeArgs = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopeOrganizationEmployeeUpdateInput>;
};


export type MutationUpdatePropertyScopeOrganizationEmployeesArgs = {
  data?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeesUpdateInput>>>;
};


export type MutationDeletePropertyScopeOrganizationEmployeeArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePropertyScopeOrganizationEmployeesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePropertyScopePropertyHistoryRecordArgs = {
  data?: Maybe<PropertyScopePropertyHistoryRecordCreateInput>;
};


export type MutationCreatePropertyScopePropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PropertyScopePropertyHistoryRecordsCreateInput>>>;
};


export type MutationUpdatePropertyScopePropertyHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopePropertyHistoryRecordUpdateInput>;
};


export type MutationUpdatePropertyScopePropertyHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<PropertyScopePropertyHistoryRecordsUpdateInput>>>;
};


export type MutationDeletePropertyScopePropertyHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePropertyScopePropertyHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreatePropertyScopePropertyArgs = {
  data?: Maybe<PropertyScopePropertyCreateInput>;
};


export type MutationCreatePropertyScopePropertiesArgs = {
  data?: Maybe<Array<Maybe<PropertyScopePropertiesCreateInput>>>;
};


export type MutationUpdatePropertyScopePropertyArgs = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopePropertyUpdateInput>;
};


export type MutationUpdatePropertyScopePropertiesArgs = {
  data?: Maybe<Array<Maybe<PropertyScopePropertiesUpdateInput>>>;
};


export type MutationDeletePropertyScopePropertyArgs = {
  id: Scalars['ID'];
};


export type MutationDeletePropertyScopePropertiesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateAssigneeScopeHistoryRecordArgs = {
  data?: Maybe<AssigneeScopeHistoryRecordCreateInput>;
};


export type MutationCreateAssigneeScopeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<AssigneeScopeHistoryRecordsCreateInput>>>;
};


export type MutationUpdateAssigneeScopeHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<AssigneeScopeHistoryRecordUpdateInput>;
};


export type MutationUpdateAssigneeScopeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<AssigneeScopeHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteAssigneeScopeHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteAssigneeScopeHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateAssigneeScopeArgs = {
  data?: Maybe<AssigneeScopeCreateInput>;
};


export type MutationCreateAssigneeScopesArgs = {
  data?: Maybe<Array<Maybe<AssigneeScopesCreateInput>>>;
};


export type MutationUpdateAssigneeScopeArgs = {
  id: Scalars['ID'];
  data?: Maybe<AssigneeScopeUpdateInput>;
};


export type MutationUpdateAssigneeScopesArgs = {
  data?: Maybe<Array<Maybe<AssigneeScopesUpdateInput>>>;
};


export type MutationDeleteAssigneeScopeArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteAssigneeScopesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateNewsItemHistoryRecordArgs = {
  data?: Maybe<NewsItemHistoryRecordCreateInput>;
};


export type MutationCreateNewsItemHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<NewsItemHistoryRecordsCreateInput>>>;
};


export type MutationUpdateNewsItemHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemHistoryRecordUpdateInput>;
};


export type MutationUpdateNewsItemHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<NewsItemHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteNewsItemHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteNewsItemHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateNewsItemArgs = {
  data?: Maybe<NewsItemCreateInput>;
};


export type MutationCreateNewsItemsArgs = {
  data?: Maybe<Array<Maybe<NewsItemsCreateInput>>>;
};


export type MutationUpdateNewsItemArgs = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemUpdateInput>;
};


export type MutationUpdateNewsItemsArgs = {
  data?: Maybe<Array<Maybe<NewsItemsUpdateInput>>>;
};


export type MutationDeleteNewsItemArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteNewsItemsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateNewsItemScopeHistoryRecordArgs = {
  data?: Maybe<NewsItemScopeHistoryRecordCreateInput>;
};


export type MutationCreateNewsItemScopeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<NewsItemScopeHistoryRecordsCreateInput>>>;
};


export type MutationUpdateNewsItemScopeHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemScopeHistoryRecordUpdateInput>;
};


export type MutationUpdateNewsItemScopeHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<NewsItemScopeHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteNewsItemScopeHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteNewsItemScopeHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateNewsItemScopeArgs = {
  data?: Maybe<NewsItemScopeCreateInput>;
};


export type MutationCreateNewsItemScopesArgs = {
  data?: Maybe<Array<Maybe<NewsItemScopesCreateInput>>>;
};


export type MutationUpdateNewsItemScopeArgs = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemScopeUpdateInput>;
};


export type MutationUpdateNewsItemScopesArgs = {
  data?: Maybe<Array<Maybe<NewsItemScopesUpdateInput>>>;
};


export type MutationDeleteNewsItemScopeArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteNewsItemScopesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateNewsItemTemplateHistoryRecordArgs = {
  data?: Maybe<NewsItemTemplateHistoryRecordCreateInput>;
};


export type MutationCreateNewsItemTemplateHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<NewsItemTemplateHistoryRecordsCreateInput>>>;
};


export type MutationUpdateNewsItemTemplateHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemTemplateHistoryRecordUpdateInput>;
};


export type MutationUpdateNewsItemTemplateHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<NewsItemTemplateHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteNewsItemTemplateHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteNewsItemTemplateHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateNewsItemTemplateArgs = {
  data?: Maybe<NewsItemTemplateCreateInput>;
};


export type MutationCreateNewsItemTemplatesArgs = {
  data?: Maybe<Array<Maybe<NewsItemTemplatesCreateInput>>>;
};


export type MutationUpdateNewsItemTemplateArgs = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemTemplateUpdateInput>;
};


export type MutationUpdateNewsItemTemplatesArgs = {
  data?: Maybe<Array<Maybe<NewsItemTemplatesUpdateInput>>>;
};


export type MutationDeleteNewsItemTemplateArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteNewsItemTemplatesArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateNewsItemUserReadHistoryRecordArgs = {
  data?: Maybe<NewsItemUserReadHistoryRecordCreateInput>;
};


export type MutationCreateNewsItemUserReadHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<NewsItemUserReadHistoryRecordsCreateInput>>>;
};


export type MutationUpdateNewsItemUserReadHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemUserReadHistoryRecordUpdateInput>;
};


export type MutationUpdateNewsItemUserReadHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<NewsItemUserReadHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteNewsItemUserReadHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteNewsItemUserReadHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateNewsItemUserReadArgs = {
  data?: Maybe<NewsItemUserReadCreateInput>;
};


export type MutationCreateNewsItemUserReadsArgs = {
  data?: Maybe<Array<Maybe<NewsItemUserReadsCreateInput>>>;
};


export type MutationUpdateNewsItemUserReadArgs = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemUserReadUpdateInput>;
};


export type MutationUpdateNewsItemUserReadsArgs = {
  data?: Maybe<Array<Maybe<NewsItemUserReadsUpdateInput>>>;
};


export type MutationDeleteNewsItemUserReadArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteNewsItemUserReadsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateWebhookHistoryRecordArgs = {
  data?: Maybe<WebhookHistoryRecordCreateInput>;
};


export type MutationCreateWebhookHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<WebhookHistoryRecordsCreateInput>>>;
};


export type MutationUpdateWebhookHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<WebhookHistoryRecordUpdateInput>;
};


export type MutationUpdateWebhookHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<WebhookHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteWebhookHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteWebhookHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateWebhookArgs = {
  data?: Maybe<WebhookCreateInput>;
};


export type MutationCreateWebhooksArgs = {
  data?: Maybe<Array<Maybe<WebhooksCreateInput>>>;
};


export type MutationUpdateWebhookArgs = {
  id: Scalars['ID'];
  data?: Maybe<WebhookUpdateInput>;
};


export type MutationUpdateWebhooksArgs = {
  data?: Maybe<Array<Maybe<WebhooksUpdateInput>>>;
};


export type MutationDeleteWebhookArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteWebhooksArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateWebhookSubscriptionHistoryRecordArgs = {
  data?: Maybe<WebhookSubscriptionHistoryRecordCreateInput>;
};


export type MutationCreateWebhookSubscriptionHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<WebhookSubscriptionHistoryRecordsCreateInput>>>;
};


export type MutationUpdateWebhookSubscriptionHistoryRecordArgs = {
  id: Scalars['ID'];
  data?: Maybe<WebhookSubscriptionHistoryRecordUpdateInput>;
};


export type MutationUpdateWebhookSubscriptionHistoryRecordsArgs = {
  data?: Maybe<Array<Maybe<WebhookSubscriptionHistoryRecordsUpdateInput>>>;
};


export type MutationDeleteWebhookSubscriptionHistoryRecordArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteWebhookSubscriptionHistoryRecordsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationCreateWebhookSubscriptionArgs = {
  data?: Maybe<WebhookSubscriptionCreateInput>;
};


export type MutationCreateWebhookSubscriptionsArgs = {
  data?: Maybe<Array<Maybe<WebhookSubscriptionsCreateInput>>>;
};


export type MutationUpdateWebhookSubscriptionArgs = {
  id: Scalars['ID'];
  data?: Maybe<WebhookSubscriptionUpdateInput>;
};


export type MutationUpdateWebhookSubscriptionsArgs = {
  data?: Maybe<Array<Maybe<WebhookSubscriptionsUpdateInput>>>;
};


export type MutationDeleteWebhookSubscriptionArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteWebhookSubscriptionsArgs = {
  ids?: Maybe<Array<Scalars['ID']>>;
};


export type MutationRegisterNewUserArgs = {
  data: RegisterNewUserInput;
};


export type MutationAuthenticateUserWithPhoneAndPasswordArgs = {
  data: AuthenticateUserWithPhoneAndPasswordInput;
};


export type MutationStartPasswordRecoveryArgs = {
  data: StartPasswordRecoveryInput;
};


export type MutationChangePasswordWithTokenArgs = {
  data: ChangePasswordWithTokenInput;
};


export type MutationStartConfirmPhoneActionArgs = {
  data: StartConfirmPhoneActionInput;
};


export type MutationResendConfirmPhoneActionSmsArgs = {
  data: ResendConfirmPhoneActionSmsInput;
};


export type MutationCompleteConfirmPhoneActionArgs = {
  data: CompleteConfirmPhoneActionInput;
};


export type MutationSigninResidentUserArgs = {
  data: SigninResidentUserInput;
};


export type MutationChangePhoneNumberResidentUserArgs = {
  data: ChangePhoneNumberResidentUserInput;
};


export type MutationSigninAsUserArgs = {
  data: SigninAsUserInput;
};


export type MutationRegisterNewServiceUserArgs = {
  data: RegisterNewServiceUserInput;
};


export type MutationSendMessageToSupportArgs = {
  data: SendMessageToSupportInput;
};


export type MutationResetUserArgs = {
  data: ResetUserInput;
};


export type MutationRegisterNewOrganizationArgs = {
  data: RegisterNewOrganizationInput;
};


export type MutationInviteNewOrganizationEmployeeArgs = {
  data: InviteNewOrganizationEmployeeInput;
};


export type MutationReInviteOrganizationEmployeeArgs = {
  data: ReInviteOrganizationEmployeeInput;
};


export type MutationAcceptOrRejectOrganizationInviteByIdArgs = {
  id: Scalars['ID'];
  data: AcceptOrRejectOrganizationInviteInput;
};


export type MutationAcceptOrRejectOrganizationInviteByCodeArgs = {
  inviteCode: Scalars['String'];
  data: AcceptOrRejectOrganizationInviteInput;
};


export type MutationResetOrganizationArgs = {
  data: ResetOrganizationInput;
};


export type MutationRegisterBillingReceiptsArgs = {
  data: RegisterBillingReceiptsInput;
};


export type MutationSendNewReceiptMessagesToResidentScopesArgs = {
  data: SendNewReceiptMessagesToResidentScopesInput;
};


export type MutationCreateBankAccountRequestArgs = {
  data: CreateBankAccountRequestInput;
};


export type MutationShareTicketArgs = {
  data: ShareTicketInput;
};


export type MutationSendMessageArgs = {
  data: SendMessageInput;
};


export type MutationResendMessageArgs = {
  data: ResendMessageInput;
};


export type MutationSyncRemoteClientArgs = {
  data: SyncRemoteClientInput;
};


export type MutationDisconnectUserFromRemoteClientArgs = {
  data: DisconnectUserFromRemoteClientInput;
};


export type MutationSetMessageStatusArgs = {
  data: SetMessageStatusInput;
};


export type MutationRegisterResidentArgs = {
  data: RegisterResidentInput;
};


export type MutationRegisterServiceConsumerArgs = {
  data: RegisterServiceConsumerInput;
};


export type MutationSendMessageToResidentScopesArgs = {
  data: SendMessageToResidentScopesServiceInput;
};


export type MutationCreateOnBoardingByTypeArgs = {
  data: CreateOnBoardingInput;
};


export type MutationRegisterMultiPaymentArgs = {
  data: RegisterMultiPaymentInput;
};


export type MutationRegisterMultiPaymentForOneReceiptArgs = {
  data: RegisterMultiPaymentForOneReceiptInput;
};


export type MutationRegisterMultiPaymentForVirtualReceiptArgs = {
  data: RegisterMultiPaymentForVirtualReceiptInput;
};


export type MutationSendAppPushMessageArgs = {
  data: SendAppPushMessageInput;
};


export type MutationAuthenticateUserWithPasswordArgs = {
  email?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
};


export type MutationUpdateAuthenticatedUserArgs = {
  data?: Maybe<UserUpdateInput>;
};

/**  The news item created by the organization to show on resident's mobile devices  */
export type NewsItem = {
  __typename?: 'NewsItem';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the NewsItem List config, or
   *  2. As an alias to the field set on 'labelField' in the NewsItem List config, or
   *  3. As an alias to a 'name' field on the NewsItem List (if one exists), or
   *  4. As an alias to the 'id' field on the NewsItem List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  The organization the news item created by  */
  organization?: Maybe<Organization>;
  /**  The news item title  */
  title?: Maybe<Scalars['String']>;
  /**  The news item main body  */
  body?: Maybe<Scalars['String']>;
  /**  The news item type  */
  type?: Maybe<NewsItemTypeType>;
  /**  Date before which the news item makes sense  */
  validBefore?: Maybe<Scalars['String']>;
  /**  UTC (!) Date to publish the news item and to send notifications  */
  sendAt?: Maybe<Scalars['String']>;
  scopes: Array<NewsItemScope>;
  _scopesMeta?: Maybe<_QueryMeta>;
  /**  The date when newsItem was sent to residents  */
  sentAt?: Maybe<Scalars['String']>;
  /**  Shows if the news item is ready to be shown and send to residents  */
  isPublished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};


/**  The news item created by the organization to show on resident's mobile devices  */
export type NewsItemScopesArgs = {
  where?: Maybe<NewsItemScopeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemScopesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


/**  The news item created by the organization to show on resident's mobile devices  */
export type NewsItem_ScopesMetaArgs = {
  where?: Maybe<NewsItemScopeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemScopesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

export type NewsItemCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  type?: Maybe<NewsItemTypeType>;
  validBefore?: Maybe<Scalars['String']>;
  sendAt?: Maybe<Scalars['String']>;
  scopes?: Maybe<NewsItemScopeRelateToManyInput>;
  sentAt?: Maybe<Scalars['String']>;
  isPublished?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type NewsItemHistoryRecord = {
  __typename?: 'NewsItemHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the NewsItemHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the NewsItemHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the NewsItemHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the NewsItemHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  validBefore?: Maybe<Scalars['String']>;
  sendAt?: Maybe<Scalars['String']>;
  sentAt?: Maybe<Scalars['String']>;
  isPublished?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type NewsItemHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  validBefore?: Maybe<Scalars['String']>;
  sendAt?: Maybe<Scalars['String']>;
  sentAt?: Maybe<Scalars['String']>;
  isPublished?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum NewsItemHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type NewsItemHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  validBefore?: Maybe<Scalars['String']>;
  sendAt?: Maybe<Scalars['String']>;
  sentAt?: Maybe<Scalars['String']>;
  isPublished?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type NewsItemHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<NewsItemHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<NewsItemHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  body?: Maybe<Scalars['String']>;
  body_not?: Maybe<Scalars['String']>;
  body_contains?: Maybe<Scalars['String']>;
  body_not_contains?: Maybe<Scalars['String']>;
  body_starts_with?: Maybe<Scalars['String']>;
  body_not_starts_with?: Maybe<Scalars['String']>;
  body_ends_with?: Maybe<Scalars['String']>;
  body_not_ends_with?: Maybe<Scalars['String']>;
  body_i?: Maybe<Scalars['String']>;
  body_not_i?: Maybe<Scalars['String']>;
  body_contains_i?: Maybe<Scalars['String']>;
  body_not_contains_i?: Maybe<Scalars['String']>;
  body_starts_with_i?: Maybe<Scalars['String']>;
  body_not_starts_with_i?: Maybe<Scalars['String']>;
  body_ends_with_i?: Maybe<Scalars['String']>;
  body_not_ends_with_i?: Maybe<Scalars['String']>;
  body_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  body_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  validBefore?: Maybe<Scalars['String']>;
  validBefore_not?: Maybe<Scalars['String']>;
  validBefore_lt?: Maybe<Scalars['String']>;
  validBefore_lte?: Maybe<Scalars['String']>;
  validBefore_gt?: Maybe<Scalars['String']>;
  validBefore_gte?: Maybe<Scalars['String']>;
  validBefore_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  validBefore_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sendAt?: Maybe<Scalars['String']>;
  sendAt_not?: Maybe<Scalars['String']>;
  sendAt_lt?: Maybe<Scalars['String']>;
  sendAt_lte?: Maybe<Scalars['String']>;
  sendAt_gt?: Maybe<Scalars['String']>;
  sendAt_gte?: Maybe<Scalars['String']>;
  sendAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sendAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sentAt?: Maybe<Scalars['String']>;
  sentAt_not?: Maybe<Scalars['String']>;
  sentAt_lt?: Maybe<Scalars['String']>;
  sentAt_lte?: Maybe<Scalars['String']>;
  sentAt_gt?: Maybe<Scalars['String']>;
  sentAt_gte?: Maybe<Scalars['String']>;
  sentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isPublished?: Maybe<Scalars['Boolean']>;
  isPublished_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<NewsItemHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<NewsItemHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<NewsItemHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<NewsItemHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type NewsItemHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type NewsItemHistoryRecordsCreateInput = {
  data?: Maybe<NewsItemHistoryRecordCreateInput>;
};

export type NewsItemHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemHistoryRecordUpdateInput>;
};

export type NewsItemRelateToOneInput = {
  create?: Maybe<NewsItemCreateInput>;
  connect?: Maybe<NewsItemWhereUniqueInput>;
  disconnect?: Maybe<NewsItemWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

/**  Which residents can see the particular news item  */
export type NewsItemScope = {
  __typename?: 'NewsItemScope';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the NewsItemScope List config, or
   *  2. As an alias to the field set on 'labelField' in the NewsItemScope List config, or
   *  3. As an alias to a 'name' field on the NewsItemScope List (if one exists), or
   *  4. As an alias to the 'id' field on the NewsItemScope List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  The news item to control access for  */
  newsItem?: Maybe<NewsItem>;
  /**  Filter on Resident by property, who can read news  */
  property?: Maybe<Property>;
  /**  Filter on Resident by unit type, who can read news  */
  unitType?: Maybe<NewsItemScopeUnitTypeType>;
  /**  Filter on Resident by unit name, who can read news  */
  unitName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type NewsItemScopeCreateInput = {
  newsItem?: Maybe<NewsItemRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  unitType?: Maybe<NewsItemScopeUnitTypeType>;
  unitName?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type NewsItemScopeHistoryRecord = {
  __typename?: 'NewsItemScopeHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the NewsItemScopeHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the NewsItemScopeHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the NewsItemScopeHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the NewsItemScopeHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  newsItem?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemScopeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type NewsItemScopeHistoryRecordCreateInput = {
  newsItem?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemScopeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum NewsItemScopeHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type NewsItemScopeHistoryRecordUpdateInput = {
  newsItem?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemScopeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type NewsItemScopeHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<NewsItemScopeHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<NewsItemScopeHistoryRecordWhereInput>>>;
  newsItem?: Maybe<Scalars['String']>;
  newsItem_not?: Maybe<Scalars['String']>;
  newsItem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newsItem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_contains?: Maybe<Scalars['String']>;
  unitType_not_contains?: Maybe<Scalars['String']>;
  unitType_starts_with?: Maybe<Scalars['String']>;
  unitType_not_starts_with?: Maybe<Scalars['String']>;
  unitType_ends_with?: Maybe<Scalars['String']>;
  unitType_not_ends_with?: Maybe<Scalars['String']>;
  unitType_i?: Maybe<Scalars['String']>;
  unitType_not_i?: Maybe<Scalars['String']>;
  unitType_contains_i?: Maybe<Scalars['String']>;
  unitType_not_contains_i?: Maybe<Scalars['String']>;
  unitType_starts_with_i?: Maybe<Scalars['String']>;
  unitType_not_starts_with_i?: Maybe<Scalars['String']>;
  unitType_ends_with_i?: Maybe<Scalars['String']>;
  unitType_not_ends_with_i?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<NewsItemScopeHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<NewsItemScopeHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<NewsItemScopeHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<NewsItemScopeHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type NewsItemScopeHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type NewsItemScopeHistoryRecordsCreateInput = {
  data?: Maybe<NewsItemScopeHistoryRecordCreateInput>;
};

export type NewsItemScopeHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemScopeHistoryRecordUpdateInput>;
};

export type NewsItemScopeRelateToManyInput = {
  create?: Maybe<Array<Maybe<NewsItemScopeCreateInput>>>;
  connect?: Maybe<Array<Maybe<NewsItemScopeWhereUniqueInput>>>;
  disconnect?: Maybe<Array<Maybe<NewsItemScopeWhereUniqueInput>>>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export enum NewsItemScopeUnitTypeType {
  Parking = 'parking',
  Flat = 'flat',
  Apartment = 'apartment',
  Commercial = 'commercial',
  Warehouse = 'warehouse'
}

export type NewsItemScopeUpdateInput = {
  newsItem?: Maybe<NewsItemRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  unitType?: Maybe<NewsItemScopeUnitTypeType>;
  unitName?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type NewsItemScopeWhereInput = {
  AND?: Maybe<Array<Maybe<NewsItemScopeWhereInput>>>;
  OR?: Maybe<Array<Maybe<NewsItemScopeWhereInput>>>;
  newsItem?: Maybe<NewsItemWhereInput>;
  newsItem_is_null?: Maybe<Scalars['Boolean']>;
  property?: Maybe<PropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  unitType?: Maybe<NewsItemScopeUnitTypeType>;
  unitType_not?: Maybe<NewsItemScopeUnitTypeType>;
  unitType_in?: Maybe<Array<Maybe<NewsItemScopeUnitTypeType>>>;
  unitType_not_in?: Maybe<Array<Maybe<NewsItemScopeUnitTypeType>>>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type NewsItemScopeWhereUniqueInput = {
  id: Scalars['ID'];
};

export type NewsItemScopesCreateInput = {
  data?: Maybe<NewsItemScopeCreateInput>;
};

export type NewsItemScopesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemScopeUpdateInput>;
};

/**  The news item template for quick composing a news item  */
export type NewsItemTemplate = {
  __typename?: 'NewsItemTemplate';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the NewsItemTemplate List config, or
   *  2. As an alias to the field set on 'labelField' in the NewsItemTemplate List config, or
   *  3. As an alias to a 'name' field on the NewsItemTemplate List (if one exists), or
   *  4. As an alias to the 'id' field on the NewsItemTemplate List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Organization who creates the template. A common template if there is no organization  */
  organization?: Maybe<Organization>;
  /**  The title of a future news item  */
  title?: Maybe<Scalars['String']>;
  /**  A future news item's body  */
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type NewsItemTemplateCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type NewsItemTemplateHistoryRecord = {
  __typename?: 'NewsItemTemplateHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the NewsItemTemplateHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the NewsItemTemplateHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the NewsItemTemplateHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the NewsItemTemplateHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type NewsItemTemplateHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum NewsItemTemplateHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type NewsItemTemplateHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type NewsItemTemplateHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<NewsItemTemplateHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<NewsItemTemplateHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  body?: Maybe<Scalars['String']>;
  body_not?: Maybe<Scalars['String']>;
  body_contains?: Maybe<Scalars['String']>;
  body_not_contains?: Maybe<Scalars['String']>;
  body_starts_with?: Maybe<Scalars['String']>;
  body_not_starts_with?: Maybe<Scalars['String']>;
  body_ends_with?: Maybe<Scalars['String']>;
  body_not_ends_with?: Maybe<Scalars['String']>;
  body_i?: Maybe<Scalars['String']>;
  body_not_i?: Maybe<Scalars['String']>;
  body_contains_i?: Maybe<Scalars['String']>;
  body_not_contains_i?: Maybe<Scalars['String']>;
  body_starts_with_i?: Maybe<Scalars['String']>;
  body_not_starts_with_i?: Maybe<Scalars['String']>;
  body_ends_with_i?: Maybe<Scalars['String']>;
  body_not_ends_with_i?: Maybe<Scalars['String']>;
  body_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  body_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<NewsItemTemplateHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<NewsItemTemplateHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<NewsItemTemplateHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<NewsItemTemplateHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type NewsItemTemplateHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type NewsItemTemplateHistoryRecordsCreateInput = {
  data?: Maybe<NewsItemTemplateHistoryRecordCreateInput>;
};

export type NewsItemTemplateHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemTemplateHistoryRecordUpdateInput>;
};

export type NewsItemTemplateUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type NewsItemTemplateWhereInput = {
  AND?: Maybe<Array<Maybe<NewsItemTemplateWhereInput>>>;
  OR?: Maybe<Array<Maybe<NewsItemTemplateWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  body?: Maybe<Scalars['String']>;
  body_not?: Maybe<Scalars['String']>;
  body_contains?: Maybe<Scalars['String']>;
  body_not_contains?: Maybe<Scalars['String']>;
  body_starts_with?: Maybe<Scalars['String']>;
  body_not_starts_with?: Maybe<Scalars['String']>;
  body_ends_with?: Maybe<Scalars['String']>;
  body_not_ends_with?: Maybe<Scalars['String']>;
  body_i?: Maybe<Scalars['String']>;
  body_not_i?: Maybe<Scalars['String']>;
  body_contains_i?: Maybe<Scalars['String']>;
  body_not_contains_i?: Maybe<Scalars['String']>;
  body_starts_with_i?: Maybe<Scalars['String']>;
  body_not_starts_with_i?: Maybe<Scalars['String']>;
  body_ends_with_i?: Maybe<Scalars['String']>;
  body_not_ends_with_i?: Maybe<Scalars['String']>;
  body_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  body_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type NewsItemTemplateWhereUniqueInput = {
  id: Scalars['ID'];
};

export type NewsItemTemplatesCreateInput = {
  data?: Maybe<NewsItemTemplateCreateInput>;
};

export type NewsItemTemplatesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemTemplateUpdateInput>;
};

export enum NewsItemTypeType {
  Common = 'common',
  Emergency = 'emergency'
}

export type NewsItemUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  type?: Maybe<NewsItemTypeType>;
  validBefore?: Maybe<Scalars['String']>;
  sendAt?: Maybe<Scalars['String']>;
  scopes?: Maybe<NewsItemScopeRelateToManyInput>;
  sentAt?: Maybe<Scalars['String']>;
  isPublished?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  The fact the user has read the particular news item  */
export type NewsItemUserRead = {
  __typename?: 'NewsItemUserRead';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the NewsItemUserRead List config, or
   *  2. As an alias to the field set on 'labelField' in the NewsItemUserRead List config, or
   *  3. As an alias to a 'name' field on the NewsItemUserRead List (if one exists), or
   *  4. As an alias to the 'id' field on the NewsItemUserRead List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  The news item the user has read  */
  newsItem?: Maybe<NewsItem>;
  /**  The user who has read the particular news item  */
  user?: Maybe<User>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type NewsItemUserReadCreateInput = {
  newsItem?: Maybe<NewsItemRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type NewsItemUserReadHistoryRecord = {
  __typename?: 'NewsItemUserReadHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the NewsItemUserReadHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the NewsItemUserReadHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the NewsItemUserReadHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the NewsItemUserReadHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  newsItem?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemUserReadHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type NewsItemUserReadHistoryRecordCreateInput = {
  newsItem?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemUserReadHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum NewsItemUserReadHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type NewsItemUserReadHistoryRecordUpdateInput = {
  newsItem?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<NewsItemUserReadHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type NewsItemUserReadHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<NewsItemUserReadHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<NewsItemUserReadHistoryRecordWhereInput>>>;
  newsItem?: Maybe<Scalars['String']>;
  newsItem_not?: Maybe<Scalars['String']>;
  newsItem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newsItem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<NewsItemUserReadHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<NewsItemUserReadHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<NewsItemUserReadHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<NewsItemUserReadHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type NewsItemUserReadHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type NewsItemUserReadHistoryRecordsCreateInput = {
  data?: Maybe<NewsItemUserReadHistoryRecordCreateInput>;
};

export type NewsItemUserReadHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemUserReadHistoryRecordUpdateInput>;
};

export type NewsItemUserReadUpdateInput = {
  newsItem?: Maybe<NewsItemRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type NewsItemUserReadWhereInput = {
  AND?: Maybe<Array<Maybe<NewsItemUserReadWhereInput>>>;
  OR?: Maybe<Array<Maybe<NewsItemUserReadWhereInput>>>;
  newsItem?: Maybe<NewsItemWhereInput>;
  newsItem_is_null?: Maybe<Scalars['Boolean']>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type NewsItemUserReadWhereUniqueInput = {
  id: Scalars['ID'];
};

export type NewsItemUserReadsCreateInput = {
  data?: Maybe<NewsItemUserReadCreateInput>;
};

export type NewsItemUserReadsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemUserReadUpdateInput>;
};

export type NewsItemWhereInput = {
  AND?: Maybe<Array<Maybe<NewsItemWhereInput>>>;
  OR?: Maybe<Array<Maybe<NewsItemWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  body?: Maybe<Scalars['String']>;
  body_not?: Maybe<Scalars['String']>;
  body_contains?: Maybe<Scalars['String']>;
  body_not_contains?: Maybe<Scalars['String']>;
  body_starts_with?: Maybe<Scalars['String']>;
  body_not_starts_with?: Maybe<Scalars['String']>;
  body_ends_with?: Maybe<Scalars['String']>;
  body_not_ends_with?: Maybe<Scalars['String']>;
  body_i?: Maybe<Scalars['String']>;
  body_not_i?: Maybe<Scalars['String']>;
  body_contains_i?: Maybe<Scalars['String']>;
  body_not_contains_i?: Maybe<Scalars['String']>;
  body_starts_with_i?: Maybe<Scalars['String']>;
  body_not_starts_with_i?: Maybe<Scalars['String']>;
  body_ends_with_i?: Maybe<Scalars['String']>;
  body_not_ends_with_i?: Maybe<Scalars['String']>;
  body_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  body_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<NewsItemTypeType>;
  type_not?: Maybe<NewsItemTypeType>;
  type_in?: Maybe<Array<Maybe<NewsItemTypeType>>>;
  type_not_in?: Maybe<Array<Maybe<NewsItemTypeType>>>;
  validBefore?: Maybe<Scalars['String']>;
  validBefore_not?: Maybe<Scalars['String']>;
  validBefore_lt?: Maybe<Scalars['String']>;
  validBefore_lte?: Maybe<Scalars['String']>;
  validBefore_gt?: Maybe<Scalars['String']>;
  validBefore_gte?: Maybe<Scalars['String']>;
  validBefore_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  validBefore_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sendAt?: Maybe<Scalars['String']>;
  sendAt_not?: Maybe<Scalars['String']>;
  sendAt_lt?: Maybe<Scalars['String']>;
  sendAt_lte?: Maybe<Scalars['String']>;
  sendAt_gt?: Maybe<Scalars['String']>;
  sendAt_gte?: Maybe<Scalars['String']>;
  sendAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sendAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  condition must be true for all nodes  */
  scopes_every?: Maybe<NewsItemScopeWhereInput>;
  /**  condition must be true for at least 1 node  */
  scopes_some?: Maybe<NewsItemScopeWhereInput>;
  /**  condition must be false for all nodes  */
  scopes_none?: Maybe<NewsItemScopeWhereInput>;
  sentAt?: Maybe<Scalars['String']>;
  sentAt_not?: Maybe<Scalars['String']>;
  sentAt_lt?: Maybe<Scalars['String']>;
  sentAt_lte?: Maybe<Scalars['String']>;
  sentAt_gt?: Maybe<Scalars['String']>;
  sentAt_gte?: Maybe<Scalars['String']>;
  sentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isPublished?: Maybe<Scalars['Boolean']>;
  isPublished_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type NewsItemWhereUniqueInput = {
  id: Scalars['ID'];
};

export type NewsItemsCreateInput = {
  data?: Maybe<NewsItemCreateInput>;
};

export type NewsItemsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<NewsItemUpdateInput>;
};

/**  The OIDC clients list  */
export type OidcClient = {
  __typename?: 'OidcClient';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OidcClient List config, or
   *  2. As an alias to the field set on 'labelField' in the OidcClient List config, or
   *  3. As an alias to a 'name' field on the OidcClient List (if one exists), or
   *  4. As an alias to the 'id' field on the OidcClient List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  The clientId  */
  clientId?: Maybe<Scalars['String']>;
  /**  The payload of the client (clientId, clientSecret, callbackUrl, ...)  */
  payload?: Maybe<Scalars['JSON']>;
  /**  The human readable name for client  */
  name?: Maybe<Scalars['String']>;
  /**  The additional client data  */
  meta?: Maybe<Scalars['JSON']>;
  /**  The timestamp of the client expiration  */
  expiresAt?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type OidcClientCreateInput = {
  clientId?: Maybe<Scalars['String']>;
  payload?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  expiresAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type OidcClientHistoryRecord = {
  __typename?: 'OidcClientHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OidcClientHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the OidcClientHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the OidcClientHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the OidcClientHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  clientId?: Maybe<Scalars['String']>;
  payload?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  expiresAt?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OidcClientHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OidcClientHistoryRecordCreateInput = {
  clientId?: Maybe<Scalars['String']>;
  payload?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  expiresAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OidcClientHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum OidcClientHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type OidcClientHistoryRecordUpdateInput = {
  clientId?: Maybe<Scalars['String']>;
  payload?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  expiresAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OidcClientHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OidcClientHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<OidcClientHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<OidcClientHistoryRecordWhereInput>>>;
  clientId?: Maybe<Scalars['String']>;
  clientId_not?: Maybe<Scalars['String']>;
  clientId_contains?: Maybe<Scalars['String']>;
  clientId_not_contains?: Maybe<Scalars['String']>;
  clientId_starts_with?: Maybe<Scalars['String']>;
  clientId_not_starts_with?: Maybe<Scalars['String']>;
  clientId_ends_with?: Maybe<Scalars['String']>;
  clientId_not_ends_with?: Maybe<Scalars['String']>;
  clientId_i?: Maybe<Scalars['String']>;
  clientId_not_i?: Maybe<Scalars['String']>;
  clientId_contains_i?: Maybe<Scalars['String']>;
  clientId_not_contains_i?: Maybe<Scalars['String']>;
  clientId_starts_with_i?: Maybe<Scalars['String']>;
  clientId_not_starts_with_i?: Maybe<Scalars['String']>;
  clientId_ends_with_i?: Maybe<Scalars['String']>;
  clientId_not_ends_with_i?: Maybe<Scalars['String']>;
  clientId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  payload?: Maybe<Scalars['JSON']>;
  payload_not?: Maybe<Scalars['JSON']>;
  payload_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  payload_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  expiresAt?: Maybe<Scalars['String']>;
  expiresAt_not?: Maybe<Scalars['String']>;
  expiresAt_lt?: Maybe<Scalars['String']>;
  expiresAt_lte?: Maybe<Scalars['String']>;
  expiresAt_gt?: Maybe<Scalars['String']>;
  expiresAt_gte?: Maybe<Scalars['String']>;
  expiresAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  expiresAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<OidcClientHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<OidcClientHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<OidcClientHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<OidcClientHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OidcClientHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OidcClientHistoryRecordsCreateInput = {
  data?: Maybe<OidcClientHistoryRecordCreateInput>;
};

export type OidcClientHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OidcClientHistoryRecordUpdateInput>;
};

export type OidcClientUpdateInput = {
  clientId?: Maybe<Scalars['String']>;
  payload?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  expiresAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type OidcClientWhereInput = {
  AND?: Maybe<Array<Maybe<OidcClientWhereInput>>>;
  OR?: Maybe<Array<Maybe<OidcClientWhereInput>>>;
  clientId?: Maybe<Scalars['String']>;
  clientId_not?: Maybe<Scalars['String']>;
  clientId_contains?: Maybe<Scalars['String']>;
  clientId_not_contains?: Maybe<Scalars['String']>;
  clientId_starts_with?: Maybe<Scalars['String']>;
  clientId_not_starts_with?: Maybe<Scalars['String']>;
  clientId_ends_with?: Maybe<Scalars['String']>;
  clientId_not_ends_with?: Maybe<Scalars['String']>;
  clientId_i?: Maybe<Scalars['String']>;
  clientId_not_i?: Maybe<Scalars['String']>;
  clientId_contains_i?: Maybe<Scalars['String']>;
  clientId_not_contains_i?: Maybe<Scalars['String']>;
  clientId_starts_with_i?: Maybe<Scalars['String']>;
  clientId_not_starts_with_i?: Maybe<Scalars['String']>;
  clientId_ends_with_i?: Maybe<Scalars['String']>;
  clientId_not_ends_with_i?: Maybe<Scalars['String']>;
  clientId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  payload?: Maybe<Scalars['JSON']>;
  payload_not?: Maybe<Scalars['JSON']>;
  payload_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  payload_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  expiresAt?: Maybe<Scalars['String']>;
  expiresAt_not?: Maybe<Scalars['String']>;
  expiresAt_lt?: Maybe<Scalars['String']>;
  expiresAt_lte?: Maybe<Scalars['String']>;
  expiresAt_gt?: Maybe<Scalars['String']>;
  expiresAt_gte?: Maybe<Scalars['String']>;
  expiresAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  expiresAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type OidcClientWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OidcClientsCreateInput = {
  data?: Maybe<OidcClientCreateInput>;
};

export type OidcClientsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OidcClientUpdateInput>;
};

/**  User action guide. It should be used to build complex hierarchical systems of user actions.  */
export type OnBoarding = {
  __typename?: 'OnBoarding';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OnBoarding List config, or
   *  2. As an alias to the field set on 'labelField' in the OnBoarding List config, or
   *  3. As an alias to a 'name' field on the OnBoarding List (if one exists), or
   *  4. As an alias to the 'id' field on the OnBoarding List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**
   *  Primary Attribute of user guide what we need to watch for.
   * Indicates the status and detect the full completeness of guide.
   */
  completed?: Maybe<Scalars['Boolean']>;
  /**
   *  Graph of possible transitions for steps. If there is no transition in this graph,
   * it is impossible to move forward or backward of guide.
   */
  stepsTransitions?: Maybe<Scalars['JSON']>;
  /**  User onBoarding relates to.  */
  user?: Maybe<User>;
  /**  Type of onBoarding. Used for guid classification  */
  type?: Maybe<OnBoardingTypeType>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type OnBoardingCreateInput = {
  completed?: Maybe<Scalars['Boolean']>;
  stepsTransitions?: Maybe<Scalars['JSON']>;
  user?: Maybe<UserRelateToOneInput>;
  type?: Maybe<OnBoardingTypeType>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type OnBoardingHistoryRecord = {
  __typename?: 'OnBoardingHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OnBoardingHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the OnBoardingHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the OnBoardingHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the OnBoardingHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  completed?: Maybe<Scalars['Boolean']>;
  stepsTransitions?: Maybe<Scalars['JSON']>;
  user?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OnBoardingHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OnBoardingHistoryRecordCreateInput = {
  completed?: Maybe<Scalars['Boolean']>;
  stepsTransitions?: Maybe<Scalars['JSON']>;
  user?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OnBoardingHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum OnBoardingHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type OnBoardingHistoryRecordUpdateInput = {
  completed?: Maybe<Scalars['Boolean']>;
  stepsTransitions?: Maybe<Scalars['JSON']>;
  user?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OnBoardingHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OnBoardingHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<OnBoardingHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<OnBoardingHistoryRecordWhereInput>>>;
  completed?: Maybe<Scalars['Boolean']>;
  completed_not?: Maybe<Scalars['Boolean']>;
  stepsTransitions?: Maybe<Scalars['JSON']>;
  stepsTransitions_not?: Maybe<Scalars['JSON']>;
  stepsTransitions_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  stepsTransitions_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<OnBoardingHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<OnBoardingHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<OnBoardingHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<OnBoardingHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OnBoardingHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OnBoardingHistoryRecordsCreateInput = {
  data?: Maybe<OnBoardingHistoryRecordCreateInput>;
};

export type OnBoardingHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OnBoardingHistoryRecordUpdateInput>;
};

export type OnBoardingRelateToOneInput = {
  create?: Maybe<OnBoardingCreateInput>;
  connect?: Maybe<OnBoardingWhereUniqueInput>;
  disconnect?: Maybe<OnBoardingWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

/**  Logic part of user app guide.  */
export type OnBoardingStep = {
  __typename?: 'OnBoardingStep';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OnBoardingStep List config, or
   *  2. As an alias to the field set on 'labelField' in the OnBoardingStep List config, or
   *  3. As an alias to a 'name' field on the OnBoardingStep List (if one exists), or
   *  4. As an alias to the 'id' field on the OnBoardingStep List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Icon string definition of step.  */
  icon?: Maybe<Scalars['String']>;
  /**  Step order in view maps, should be used as priority indicator.  */
  order?: Maybe<Scalars['Int']>;
  /**  Shows the main point of a step.  */
  title?: Maybe<Scalars['String']>;
  titleNonLocalized?: Maybe<Scalars['String']>;
  /**  Shows additional point of a step  */
  description?: Maybe<Scalars['String']>;
  descriptionNonLocalized?: Maybe<Scalars['String']>;
  /**  Used for step transition logic calculation, if the value of this flag is true movement towards graph will be blocked.  */
  required?: Maybe<Scalars['Boolean']>;
  /**  Detect completness of the current step. If all steps in onBoarding will be completed, onBoarding completed state should be set to true.  */
  completed?: Maybe<Scalars['Boolean']>;
  /**  Detect step target action. Action should be used for validation step completness.  */
  action?: Maybe<OnBoardingStepActionType>;
  /**  Domain entity on which is performed to  */
  entity?: Maybe<Scalars['String']>;
  onBoarding?: Maybe<OnBoarding>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export enum OnBoardingStepActionType {
  Create = 'create',
  Read = 'read',
  Update = 'update',
  Delete = 'delete'
}

export type OnBoardingStepCreateInput = {
  icon?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  completed?: Maybe<Scalars['Boolean']>;
  action?: Maybe<OnBoardingStepActionType>;
  entity?: Maybe<Scalars['String']>;
  onBoarding?: Maybe<OnBoardingRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type OnBoardingStepHistoryRecord = {
  __typename?: 'OnBoardingStepHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OnBoardingStepHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the OnBoardingStepHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the OnBoardingStepHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the OnBoardingStepHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  icon?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  completed?: Maybe<Scalars['Boolean']>;
  action?: Maybe<Scalars['String']>;
  entity?: Maybe<Scalars['String']>;
  onBoarding?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OnBoardingStepHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OnBoardingStepHistoryRecordCreateInput = {
  icon?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  completed?: Maybe<Scalars['Boolean']>;
  action?: Maybe<Scalars['String']>;
  entity?: Maybe<Scalars['String']>;
  onBoarding?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OnBoardingStepHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum OnBoardingStepHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type OnBoardingStepHistoryRecordUpdateInput = {
  icon?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  completed?: Maybe<Scalars['Boolean']>;
  action?: Maybe<Scalars['String']>;
  entity?: Maybe<Scalars['String']>;
  onBoarding?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OnBoardingStepHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OnBoardingStepHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<OnBoardingStepHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<OnBoardingStepHistoryRecordWhereInput>>>;
  icon?: Maybe<Scalars['String']>;
  icon_not?: Maybe<Scalars['String']>;
  icon_contains?: Maybe<Scalars['String']>;
  icon_not_contains?: Maybe<Scalars['String']>;
  icon_starts_with?: Maybe<Scalars['String']>;
  icon_not_starts_with?: Maybe<Scalars['String']>;
  icon_ends_with?: Maybe<Scalars['String']>;
  icon_not_ends_with?: Maybe<Scalars['String']>;
  icon_i?: Maybe<Scalars['String']>;
  icon_not_i?: Maybe<Scalars['String']>;
  icon_contains_i?: Maybe<Scalars['String']>;
  icon_not_contains_i?: Maybe<Scalars['String']>;
  icon_starts_with_i?: Maybe<Scalars['String']>;
  icon_not_starts_with_i?: Maybe<Scalars['String']>;
  icon_ends_with_i?: Maybe<Scalars['String']>;
  icon_not_ends_with_i?: Maybe<Scalars['String']>;
  icon_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  icon_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  order?: Maybe<Scalars['Int']>;
  order_not?: Maybe<Scalars['Int']>;
  order_lt?: Maybe<Scalars['Int']>;
  order_lte?: Maybe<Scalars['Int']>;
  order_gt?: Maybe<Scalars['Int']>;
  order_gte?: Maybe<Scalars['Int']>;
  order_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  order_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  required?: Maybe<Scalars['Boolean']>;
  required_not?: Maybe<Scalars['Boolean']>;
  completed?: Maybe<Scalars['Boolean']>;
  completed_not?: Maybe<Scalars['Boolean']>;
  action?: Maybe<Scalars['String']>;
  action_not?: Maybe<Scalars['String']>;
  action_contains?: Maybe<Scalars['String']>;
  action_not_contains?: Maybe<Scalars['String']>;
  action_starts_with?: Maybe<Scalars['String']>;
  action_not_starts_with?: Maybe<Scalars['String']>;
  action_ends_with?: Maybe<Scalars['String']>;
  action_not_ends_with?: Maybe<Scalars['String']>;
  action_i?: Maybe<Scalars['String']>;
  action_not_i?: Maybe<Scalars['String']>;
  action_contains_i?: Maybe<Scalars['String']>;
  action_not_contains_i?: Maybe<Scalars['String']>;
  action_starts_with_i?: Maybe<Scalars['String']>;
  action_not_starts_with_i?: Maybe<Scalars['String']>;
  action_ends_with_i?: Maybe<Scalars['String']>;
  action_not_ends_with_i?: Maybe<Scalars['String']>;
  action_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  action_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  entity?: Maybe<Scalars['String']>;
  entity_not?: Maybe<Scalars['String']>;
  entity_contains?: Maybe<Scalars['String']>;
  entity_not_contains?: Maybe<Scalars['String']>;
  entity_starts_with?: Maybe<Scalars['String']>;
  entity_not_starts_with?: Maybe<Scalars['String']>;
  entity_ends_with?: Maybe<Scalars['String']>;
  entity_not_ends_with?: Maybe<Scalars['String']>;
  entity_i?: Maybe<Scalars['String']>;
  entity_not_i?: Maybe<Scalars['String']>;
  entity_contains_i?: Maybe<Scalars['String']>;
  entity_not_contains_i?: Maybe<Scalars['String']>;
  entity_starts_with_i?: Maybe<Scalars['String']>;
  entity_not_starts_with_i?: Maybe<Scalars['String']>;
  entity_ends_with_i?: Maybe<Scalars['String']>;
  entity_not_ends_with_i?: Maybe<Scalars['String']>;
  entity_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  entity_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  onBoarding?: Maybe<Scalars['String']>;
  onBoarding_not?: Maybe<Scalars['String']>;
  onBoarding_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  onBoarding_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<OnBoardingStepHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<OnBoardingStepHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<OnBoardingStepHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<OnBoardingStepHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OnBoardingStepHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OnBoardingStepHistoryRecordsCreateInput = {
  data?: Maybe<OnBoardingStepHistoryRecordCreateInput>;
};

export type OnBoardingStepHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OnBoardingStepHistoryRecordUpdateInput>;
};

export type OnBoardingStepUpdateInput = {
  icon?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  completed?: Maybe<Scalars['Boolean']>;
  action?: Maybe<OnBoardingStepActionType>;
  entity?: Maybe<Scalars['String']>;
  onBoarding?: Maybe<OnBoardingRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type OnBoardingStepWhereInput = {
  AND?: Maybe<Array<Maybe<OnBoardingStepWhereInput>>>;
  OR?: Maybe<Array<Maybe<OnBoardingStepWhereInput>>>;
  icon?: Maybe<Scalars['String']>;
  icon_not?: Maybe<Scalars['String']>;
  icon_contains?: Maybe<Scalars['String']>;
  icon_not_contains?: Maybe<Scalars['String']>;
  icon_starts_with?: Maybe<Scalars['String']>;
  icon_not_starts_with?: Maybe<Scalars['String']>;
  icon_ends_with?: Maybe<Scalars['String']>;
  icon_not_ends_with?: Maybe<Scalars['String']>;
  icon_i?: Maybe<Scalars['String']>;
  icon_not_i?: Maybe<Scalars['String']>;
  icon_contains_i?: Maybe<Scalars['String']>;
  icon_not_contains_i?: Maybe<Scalars['String']>;
  icon_starts_with_i?: Maybe<Scalars['String']>;
  icon_not_starts_with_i?: Maybe<Scalars['String']>;
  icon_ends_with_i?: Maybe<Scalars['String']>;
  icon_not_ends_with_i?: Maybe<Scalars['String']>;
  icon_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  icon_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  order?: Maybe<Scalars['Int']>;
  order_not?: Maybe<Scalars['Int']>;
  order_lt?: Maybe<Scalars['Int']>;
  order_lte?: Maybe<Scalars['Int']>;
  order_gt?: Maybe<Scalars['Int']>;
  order_gte?: Maybe<Scalars['Int']>;
  order_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  order_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  title?: Maybe<Scalars['String']>;
  title_not?: Maybe<Scalars['String']>;
  title_contains?: Maybe<Scalars['String']>;
  title_not_contains?: Maybe<Scalars['String']>;
  title_starts_with?: Maybe<Scalars['String']>;
  title_not_starts_with?: Maybe<Scalars['String']>;
  title_ends_with?: Maybe<Scalars['String']>;
  title_not_ends_with?: Maybe<Scalars['String']>;
  title_i?: Maybe<Scalars['String']>;
  title_not_i?: Maybe<Scalars['String']>;
  title_contains_i?: Maybe<Scalars['String']>;
  title_not_contains_i?: Maybe<Scalars['String']>;
  title_starts_with_i?: Maybe<Scalars['String']>;
  title_not_starts_with_i?: Maybe<Scalars['String']>;
  title_ends_with_i?: Maybe<Scalars['String']>;
  title_not_ends_with_i?: Maybe<Scalars['String']>;
  title_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  title_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  required?: Maybe<Scalars['Boolean']>;
  required_not?: Maybe<Scalars['Boolean']>;
  completed?: Maybe<Scalars['Boolean']>;
  completed_not?: Maybe<Scalars['Boolean']>;
  action?: Maybe<OnBoardingStepActionType>;
  action_not?: Maybe<OnBoardingStepActionType>;
  action_in?: Maybe<Array<Maybe<OnBoardingStepActionType>>>;
  action_not_in?: Maybe<Array<Maybe<OnBoardingStepActionType>>>;
  entity?: Maybe<Scalars['String']>;
  entity_not?: Maybe<Scalars['String']>;
  entity_contains?: Maybe<Scalars['String']>;
  entity_not_contains?: Maybe<Scalars['String']>;
  entity_starts_with?: Maybe<Scalars['String']>;
  entity_not_starts_with?: Maybe<Scalars['String']>;
  entity_ends_with?: Maybe<Scalars['String']>;
  entity_not_ends_with?: Maybe<Scalars['String']>;
  entity_i?: Maybe<Scalars['String']>;
  entity_not_i?: Maybe<Scalars['String']>;
  entity_contains_i?: Maybe<Scalars['String']>;
  entity_not_contains_i?: Maybe<Scalars['String']>;
  entity_starts_with_i?: Maybe<Scalars['String']>;
  entity_not_starts_with_i?: Maybe<Scalars['String']>;
  entity_ends_with_i?: Maybe<Scalars['String']>;
  entity_not_ends_with_i?: Maybe<Scalars['String']>;
  entity_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  entity_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  onBoarding?: Maybe<OnBoardingWhereInput>;
  onBoarding_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type OnBoardingStepWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OnBoardingStepsCreateInput = {
  data?: Maybe<OnBoardingStepCreateInput>;
};

export type OnBoardingStepsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OnBoardingStepUpdateInput>;
};

export enum OnBoardingType {
  Administrator = 'ADMINISTRATOR'
}

export enum OnBoardingTypeType {
  Administrator = 'ADMINISTRATOR'
}

export type OnBoardingUpdateInput = {
  completed?: Maybe<Scalars['Boolean']>;
  stepsTransitions?: Maybe<Scalars['JSON']>;
  user?: Maybe<UserRelateToOneInput>;
  type?: Maybe<OnBoardingTypeType>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type OnBoardingWhereInput = {
  AND?: Maybe<Array<Maybe<OnBoardingWhereInput>>>;
  OR?: Maybe<Array<Maybe<OnBoardingWhereInput>>>;
  completed?: Maybe<Scalars['Boolean']>;
  completed_not?: Maybe<Scalars['Boolean']>;
  stepsTransitions?: Maybe<Scalars['JSON']>;
  stepsTransitions_not?: Maybe<Scalars['JSON']>;
  stepsTransitions_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  stepsTransitions_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  type?: Maybe<OnBoardingTypeType>;
  type_not?: Maybe<OnBoardingTypeType>;
  type_in?: Maybe<Array<Maybe<OnBoardingTypeType>>>;
  type_not_in?: Maybe<Array<Maybe<OnBoardingTypeType>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type OnBoardingWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OnBoardingsCreateInput = {
  data?: Maybe<OnBoardingCreateInput>;
};

export type OnBoardingsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OnBoardingUpdateInput>;
};

/**  B2B customer of the service, a legal entity or an association of legal entities (holding/group)  */
export type Organization = {
  __typename?: 'Organization';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the Organization List config, or
   *  2. As an alias to the field set on 'labelField' in the Organization List config, or
   *  3. As an alias to a 'name' field on the Organization List (if one exists), or
   *  4. As an alias to the 'id' field on the Organization List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Country level specific  */
  country?: Maybe<OrganizationCountryType>;
  /**  Customer-friendly name  */
  name?: Maybe<Scalars['String']>;
  /**  Taxpayer identification number. Every country has its own identification. Examples: INN for Russia, IIN for Kazakhstan and so on  */
  tin?: Maybe<Scalars['String']>;
  /**  Customer-friendly description. Friendly text for employee and resident users  */
  description?: Maybe<Scalars['String']>;
  /**  Customer-friendly avatar  */
  avatar?: Maybe<File>;
  /**  Organization metadata. Depends on country level specificExample of data key: `kpp`  */
  meta?: Maybe<Scalars['JSON']>;
  employees: Array<OrganizationEmployee>;
  _employeesMeta?: Maybe<_QueryMeta>;
  relatedOrganizations: Array<OrganizationLink>;
  _relatedOrganizationsMeta?: Maybe<_QueryMeta>;
  /**  Graph of possible transitions for statuses. If there is no transition in this graph, it is impossible to change status if the user in the role has the right to do so.  */
  statusTransitions?: Maybe<Scalars['JSON']>;
  /**  Default employee role status transitions map which will be used as fallback for status transition validationif user dont have OrganizationEmployeeRole  */
  defaultEmployeeRoleStatusTransitions?: Maybe<Scalars['JSON']>;
  /**  External provider for organization  */
  importRemoteSystem?: Maybe<Scalars['String']>;
  /**  External system organization id. Used for integrations  */
  importId?: Maybe<Scalars['String']>;
  /**  List of the organization's features connected by a particular integration  */
  features: Array<OrganizationFeature>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};


/**  B2B customer of the service, a legal entity or an association of legal entities (holding/group)  */
export type OrganizationEmployeesArgs = {
  where?: Maybe<OrganizationEmployeeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


/**  B2B customer of the service, a legal entity or an association of legal entities (holding/group)  */
export type Organization_EmployeesMetaArgs = {
  where?: Maybe<OrganizationEmployeeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


/**  B2B customer of the service, a legal entity or an association of legal entities (holding/group)  */
export type OrganizationRelatedOrganizationsArgs = {
  where?: Maybe<OrganizationLinkWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationLinksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


/**  B2B customer of the service, a legal entity or an association of legal entities (holding/group)  */
export type Organization_RelatedOrganizationsMetaArgs = {
  where?: Maybe<OrganizationLinkWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationLinksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

export enum OrganizationCountryType {
  En = 'en',
  Ru = 'ru'
}

export type OrganizationCreateInput = {
  country?: Maybe<OrganizationCountryType>;
  name?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['Upload']>;
  meta?: Maybe<Scalars['JSON']>;
  employees?: Maybe<OrganizationEmployeeRelateToManyInput>;
  relatedOrganizations?: Maybe<OrganizationLinkRelateToManyInput>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  features?: Maybe<Array<OrganizationFeature>>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  B2B customer employees  */
export type OrganizationEmployee = {
  __typename?: 'OrganizationEmployee';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OrganizationEmployee List config, or
   *  2. As an alias to the field set on 'labelField' in the OrganizationEmployee List config, or
   *  3. As an alias to a 'name' field on the OrganizationEmployee List (if one exists), or
   *  4. As an alias to the 'id' field on the OrganizationEmployee List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  If user exists => invite is matched by email/phone (user can reject or accept it)  */
  user?: Maybe<User>;
  /**  Secret invite code (used for accept invite verification)  */
  inviteCode?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  role?: Maybe<OrganizationEmployeeRole>;
  /**  Free-form description of the employee's position  */
  position?: Maybe<Scalars['String']>;
  isAccepted?: Maybe<Scalars['Boolean']>;
  isRejected?: Maybe<Scalars['Boolean']>;
  /**  Employee is blocked status, used in permissions functions, isBlocked has Free-form description of the employee's position over all permissions  */
  isBlocked?: Maybe<Scalars['Boolean']>;
  /**  True if employee has all specializations  */
  hasAllSpecializations?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type OrganizationEmployeeCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  inviteCode?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  role?: Maybe<OrganizationEmployeeRoleRelateToOneInput>;
  position?: Maybe<Scalars['String']>;
  isAccepted?: Maybe<Scalars['Boolean']>;
  isRejected?: Maybe<Scalars['Boolean']>;
  isBlocked?: Maybe<Scalars['Boolean']>;
  hasAllSpecializations?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type OrganizationEmployeeHistoryRecord = {
  __typename?: 'OrganizationEmployeeHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OrganizationEmployeeHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the OrganizationEmployeeHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the OrganizationEmployeeHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the OrganizationEmployeeHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  inviteCode?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  isAccepted?: Maybe<Scalars['Boolean']>;
  isRejected?: Maybe<Scalars['Boolean']>;
  isBlocked?: Maybe<Scalars['Boolean']>;
  hasAllSpecializations?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationEmployeeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OrganizationEmployeeHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  inviteCode?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  isAccepted?: Maybe<Scalars['Boolean']>;
  isRejected?: Maybe<Scalars['Boolean']>;
  isBlocked?: Maybe<Scalars['Boolean']>;
  hasAllSpecializations?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationEmployeeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum OrganizationEmployeeHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type OrganizationEmployeeHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  inviteCode?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  isAccepted?: Maybe<Scalars['Boolean']>;
  isRejected?: Maybe<Scalars['Boolean']>;
  isBlocked?: Maybe<Scalars['Boolean']>;
  hasAllSpecializations?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationEmployeeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OrganizationEmployeeHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<OrganizationEmployeeHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<OrganizationEmployeeHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  inviteCode?: Maybe<Scalars['ID']>;
  inviteCode_not?: Maybe<Scalars['ID']>;
  inviteCode_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  inviteCode_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  role?: Maybe<Scalars['String']>;
  role_not?: Maybe<Scalars['String']>;
  role_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  role_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  position?: Maybe<Scalars['String']>;
  position_not?: Maybe<Scalars['String']>;
  position_contains?: Maybe<Scalars['String']>;
  position_not_contains?: Maybe<Scalars['String']>;
  position_starts_with?: Maybe<Scalars['String']>;
  position_not_starts_with?: Maybe<Scalars['String']>;
  position_ends_with?: Maybe<Scalars['String']>;
  position_not_ends_with?: Maybe<Scalars['String']>;
  position_i?: Maybe<Scalars['String']>;
  position_not_i?: Maybe<Scalars['String']>;
  position_contains_i?: Maybe<Scalars['String']>;
  position_not_contains_i?: Maybe<Scalars['String']>;
  position_starts_with_i?: Maybe<Scalars['String']>;
  position_not_starts_with_i?: Maybe<Scalars['String']>;
  position_ends_with_i?: Maybe<Scalars['String']>;
  position_not_ends_with_i?: Maybe<Scalars['String']>;
  position_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  position_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isAccepted?: Maybe<Scalars['Boolean']>;
  isAccepted_not?: Maybe<Scalars['Boolean']>;
  isRejected?: Maybe<Scalars['Boolean']>;
  isRejected_not?: Maybe<Scalars['Boolean']>;
  isBlocked?: Maybe<Scalars['Boolean']>;
  isBlocked_not?: Maybe<Scalars['Boolean']>;
  hasAllSpecializations?: Maybe<Scalars['Boolean']>;
  hasAllSpecializations_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<OrganizationEmployeeHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<OrganizationEmployeeHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<OrganizationEmployeeHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<OrganizationEmployeeHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationEmployeeHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OrganizationEmployeeHistoryRecordsCreateInput = {
  data?: Maybe<OrganizationEmployeeHistoryRecordCreateInput>;
};

export type OrganizationEmployeeHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeHistoryRecordUpdateInput>;
};

export type OrganizationEmployeeRelateToManyInput = {
  create?: Maybe<Array<Maybe<OrganizationEmployeeCreateInput>>>;
  connect?: Maybe<Array<Maybe<OrganizationEmployeeWhereUniqueInput>>>;
  disconnect?: Maybe<Array<Maybe<OrganizationEmployeeWhereUniqueInput>>>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type OrganizationEmployeeRelateToOneInput = {
  create?: Maybe<OrganizationEmployeeCreateInput>;
  connect?: Maybe<OrganizationEmployeeWhereUniqueInput>;
  disconnect?: Maybe<OrganizationEmployeeWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

/**  Employee role name and access permissions  */
export type OrganizationEmployeeRole = {
  __typename?: 'OrganizationEmployeeRole';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OrganizationEmployeeRole List config, or
   *  2. As an alias to the field set on 'labelField' in the OrganizationEmployeeRole List config, or
   *  3. As an alias to a 'name' field on the OrganizationEmployeeRole List (if one exists), or
   *  4. As an alias to the 'id' field on the OrganizationEmployeeRole List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  descriptionNonLocalized?: Maybe<Scalars['String']>;
  /**  Employee status transitions map  */
  statusTransitions?: Maybe<Scalars['JSON']>;
  canManageOrganization?: Maybe<Scalars['Boolean']>;
  canManageEmployees?: Maybe<Scalars['Boolean']>;
  canManageRoles?: Maybe<Scalars['Boolean']>;
  canManageIntegrations?: Maybe<Scalars['Boolean']>;
  canManageProperties?: Maybe<Scalars['Boolean']>;
  canManageTickets?: Maybe<Scalars['Boolean']>;
  canManageMeters?: Maybe<Scalars['Boolean']>;
  canManageMeterReadings?: Maybe<Scalars['Boolean']>;
  canManageContacts?: Maybe<Scalars['Boolean']>;
  canManageContactRoles?: Maybe<Scalars['Boolean']>;
  canManageTicketComments?: Maybe<Scalars['Boolean']>;
  canShareTickets?: Maybe<Scalars['Boolean']>;
  canReadBillingReceipts?: Maybe<Scalars['Boolean']>;
  canReadPayments?: Maybe<Scalars['Boolean']>;
  canInviteNewOrganizationEmployees?: Maybe<Scalars['Boolean']>;
  /**  Allows employees with this role to be assigned to tickets as responsible  */
  canBeAssignedAsResponsible?: Maybe<Scalars['Boolean']>;
  /**  Allows employees with this role to be assigned to tickets as executor  */
  canBeAssignedAsExecutor?: Maybe<Scalars['Boolean']>;
  canManageTicketPropertyHints?: Maybe<Scalars['Boolean']>;
  /**
   *  Which tickets the employee sees:
   * 1) organization - sees all tickets in the organization.
   * 2) property - Sees tickets in PropertyScope that have this employee
   * 3) propertyAndSpecialization - Sees tickets by employee specialization + PropertyScope
   * 4) assigned - sees only those tickets in which he is the executor or responsible
   */
  ticketVisibilityType?: Maybe<Scalars['String']>;
  canManagePropertyScopes?: Maybe<Scalars['Boolean']>;
  canManageBankAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReportTasks?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationAccountContexts?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationOrganizationContexts?: Maybe<Scalars['Boolean']>;
  canManageBankContractorAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankTransactions?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReports?: Maybe<Scalars['Boolean']>;
  canManageIncidents?: Maybe<Scalars['Boolean']>;
  canManageNewsItems?: Maybe<Scalars['Boolean']>;
  canManageNewsItemTemplates?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type OrganizationEmployeeRoleCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  canManageOrganization?: Maybe<Scalars['Boolean']>;
  canManageEmployees?: Maybe<Scalars['Boolean']>;
  canManageRoles?: Maybe<Scalars['Boolean']>;
  canManageIntegrations?: Maybe<Scalars['Boolean']>;
  canManageProperties?: Maybe<Scalars['Boolean']>;
  canManageTickets?: Maybe<Scalars['Boolean']>;
  canManageMeters?: Maybe<Scalars['Boolean']>;
  canManageMeterReadings?: Maybe<Scalars['Boolean']>;
  canManageContacts?: Maybe<Scalars['Boolean']>;
  canManageContactRoles?: Maybe<Scalars['Boolean']>;
  canManageTicketComments?: Maybe<Scalars['Boolean']>;
  canShareTickets?: Maybe<Scalars['Boolean']>;
  canReadBillingReceipts?: Maybe<Scalars['Boolean']>;
  canReadPayments?: Maybe<Scalars['Boolean']>;
  canInviteNewOrganizationEmployees?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsResponsible?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsExecutor?: Maybe<Scalars['Boolean']>;
  canManageTicketPropertyHints?: Maybe<Scalars['Boolean']>;
  ticketVisibilityType?: Maybe<Scalars['String']>;
  canManagePropertyScopes?: Maybe<Scalars['Boolean']>;
  canManageBankAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReportTasks?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationAccountContexts?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationOrganizationContexts?: Maybe<Scalars['Boolean']>;
  canManageBankContractorAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankTransactions?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReports?: Maybe<Scalars['Boolean']>;
  canManageIncidents?: Maybe<Scalars['Boolean']>;
  canManageNewsItems?: Maybe<Scalars['Boolean']>;
  canManageNewsItemTemplates?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type OrganizationEmployeeRoleHistoryRecord = {
  __typename?: 'OrganizationEmployeeRoleHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OrganizationEmployeeRoleHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the OrganizationEmployeeRoleHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the OrganizationEmployeeRoleHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the OrganizationEmployeeRoleHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  statusTransitions?: Maybe<Scalars['JSON']>;
  canManageOrganization?: Maybe<Scalars['Boolean']>;
  canManageEmployees?: Maybe<Scalars['Boolean']>;
  canManageRoles?: Maybe<Scalars['Boolean']>;
  canManageIntegrations?: Maybe<Scalars['Boolean']>;
  canManageProperties?: Maybe<Scalars['Boolean']>;
  canManageTickets?: Maybe<Scalars['Boolean']>;
  canManageMeters?: Maybe<Scalars['Boolean']>;
  canManageMeterReadings?: Maybe<Scalars['Boolean']>;
  canManageContacts?: Maybe<Scalars['Boolean']>;
  canManageContactRoles?: Maybe<Scalars['Boolean']>;
  canManageTicketComments?: Maybe<Scalars['Boolean']>;
  canShareTickets?: Maybe<Scalars['Boolean']>;
  canReadBillingReceipts?: Maybe<Scalars['Boolean']>;
  canReadPayments?: Maybe<Scalars['Boolean']>;
  canInviteNewOrganizationEmployees?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsResponsible?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsExecutor?: Maybe<Scalars['Boolean']>;
  canManageTicketPropertyHints?: Maybe<Scalars['Boolean']>;
  ticketVisibilityType?: Maybe<Scalars['String']>;
  canManagePropertyScopes?: Maybe<Scalars['Boolean']>;
  canManageBankAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReportTasks?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationAccountContexts?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationOrganizationContexts?: Maybe<Scalars['Boolean']>;
  canManageBankContractorAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankTransactions?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReports?: Maybe<Scalars['Boolean']>;
  canManageIncidents?: Maybe<Scalars['Boolean']>;
  canManageNewsItems?: Maybe<Scalars['Boolean']>;
  canManageNewsItemTemplates?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationEmployeeRoleHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OrganizationEmployeeRoleHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  statusTransitions?: Maybe<Scalars['JSON']>;
  canManageOrganization?: Maybe<Scalars['Boolean']>;
  canManageEmployees?: Maybe<Scalars['Boolean']>;
  canManageRoles?: Maybe<Scalars['Boolean']>;
  canManageIntegrations?: Maybe<Scalars['Boolean']>;
  canManageProperties?: Maybe<Scalars['Boolean']>;
  canManageTickets?: Maybe<Scalars['Boolean']>;
  canManageMeters?: Maybe<Scalars['Boolean']>;
  canManageMeterReadings?: Maybe<Scalars['Boolean']>;
  canManageContacts?: Maybe<Scalars['Boolean']>;
  canManageContactRoles?: Maybe<Scalars['Boolean']>;
  canManageTicketComments?: Maybe<Scalars['Boolean']>;
  canShareTickets?: Maybe<Scalars['Boolean']>;
  canReadBillingReceipts?: Maybe<Scalars['Boolean']>;
  canReadPayments?: Maybe<Scalars['Boolean']>;
  canInviteNewOrganizationEmployees?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsResponsible?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsExecutor?: Maybe<Scalars['Boolean']>;
  canManageTicketPropertyHints?: Maybe<Scalars['Boolean']>;
  ticketVisibilityType?: Maybe<Scalars['String']>;
  canManagePropertyScopes?: Maybe<Scalars['Boolean']>;
  canManageBankAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReportTasks?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationAccountContexts?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationOrganizationContexts?: Maybe<Scalars['Boolean']>;
  canManageBankContractorAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankTransactions?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReports?: Maybe<Scalars['Boolean']>;
  canManageIncidents?: Maybe<Scalars['Boolean']>;
  canManageNewsItems?: Maybe<Scalars['Boolean']>;
  canManageNewsItemTemplates?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationEmployeeRoleHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum OrganizationEmployeeRoleHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type OrganizationEmployeeRoleHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  statusTransitions?: Maybe<Scalars['JSON']>;
  canManageOrganization?: Maybe<Scalars['Boolean']>;
  canManageEmployees?: Maybe<Scalars['Boolean']>;
  canManageRoles?: Maybe<Scalars['Boolean']>;
  canManageIntegrations?: Maybe<Scalars['Boolean']>;
  canManageProperties?: Maybe<Scalars['Boolean']>;
  canManageTickets?: Maybe<Scalars['Boolean']>;
  canManageMeters?: Maybe<Scalars['Boolean']>;
  canManageMeterReadings?: Maybe<Scalars['Boolean']>;
  canManageContacts?: Maybe<Scalars['Boolean']>;
  canManageContactRoles?: Maybe<Scalars['Boolean']>;
  canManageTicketComments?: Maybe<Scalars['Boolean']>;
  canShareTickets?: Maybe<Scalars['Boolean']>;
  canReadBillingReceipts?: Maybe<Scalars['Boolean']>;
  canReadPayments?: Maybe<Scalars['Boolean']>;
  canInviteNewOrganizationEmployees?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsResponsible?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsExecutor?: Maybe<Scalars['Boolean']>;
  canManageTicketPropertyHints?: Maybe<Scalars['Boolean']>;
  ticketVisibilityType?: Maybe<Scalars['String']>;
  canManagePropertyScopes?: Maybe<Scalars['Boolean']>;
  canManageBankAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReportTasks?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationAccountContexts?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationOrganizationContexts?: Maybe<Scalars['Boolean']>;
  canManageBankContractorAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankTransactions?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReports?: Maybe<Scalars['Boolean']>;
  canManageIncidents?: Maybe<Scalars['Boolean']>;
  canManageNewsItems?: Maybe<Scalars['Boolean']>;
  canManageNewsItemTemplates?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationEmployeeRoleHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OrganizationEmployeeRoleHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<OrganizationEmployeeRoleHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<OrganizationEmployeeRoleHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusTransitions?: Maybe<Scalars['JSON']>;
  statusTransitions_not?: Maybe<Scalars['JSON']>;
  statusTransitions_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  statusTransitions_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  canManageOrganization?: Maybe<Scalars['Boolean']>;
  canManageOrganization_not?: Maybe<Scalars['Boolean']>;
  canManageEmployees?: Maybe<Scalars['Boolean']>;
  canManageEmployees_not?: Maybe<Scalars['Boolean']>;
  canManageRoles?: Maybe<Scalars['Boolean']>;
  canManageRoles_not?: Maybe<Scalars['Boolean']>;
  canManageIntegrations?: Maybe<Scalars['Boolean']>;
  canManageIntegrations_not?: Maybe<Scalars['Boolean']>;
  canManageProperties?: Maybe<Scalars['Boolean']>;
  canManageProperties_not?: Maybe<Scalars['Boolean']>;
  canManageTickets?: Maybe<Scalars['Boolean']>;
  canManageTickets_not?: Maybe<Scalars['Boolean']>;
  canManageMeters?: Maybe<Scalars['Boolean']>;
  canManageMeters_not?: Maybe<Scalars['Boolean']>;
  canManageMeterReadings?: Maybe<Scalars['Boolean']>;
  canManageMeterReadings_not?: Maybe<Scalars['Boolean']>;
  canManageContacts?: Maybe<Scalars['Boolean']>;
  canManageContacts_not?: Maybe<Scalars['Boolean']>;
  canManageContactRoles?: Maybe<Scalars['Boolean']>;
  canManageContactRoles_not?: Maybe<Scalars['Boolean']>;
  canManageTicketComments?: Maybe<Scalars['Boolean']>;
  canManageTicketComments_not?: Maybe<Scalars['Boolean']>;
  canShareTickets?: Maybe<Scalars['Boolean']>;
  canShareTickets_not?: Maybe<Scalars['Boolean']>;
  canReadBillingReceipts?: Maybe<Scalars['Boolean']>;
  canReadBillingReceipts_not?: Maybe<Scalars['Boolean']>;
  canReadPayments?: Maybe<Scalars['Boolean']>;
  canReadPayments_not?: Maybe<Scalars['Boolean']>;
  canInviteNewOrganizationEmployees?: Maybe<Scalars['Boolean']>;
  canInviteNewOrganizationEmployees_not?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsResponsible?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsResponsible_not?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsExecutor?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsExecutor_not?: Maybe<Scalars['Boolean']>;
  canManageTicketPropertyHints?: Maybe<Scalars['Boolean']>;
  canManageTicketPropertyHints_not?: Maybe<Scalars['Boolean']>;
  ticketVisibilityType?: Maybe<Scalars['String']>;
  ticketVisibilityType_not?: Maybe<Scalars['String']>;
  ticketVisibilityType_contains?: Maybe<Scalars['String']>;
  ticketVisibilityType_not_contains?: Maybe<Scalars['String']>;
  ticketVisibilityType_starts_with?: Maybe<Scalars['String']>;
  ticketVisibilityType_not_starts_with?: Maybe<Scalars['String']>;
  ticketVisibilityType_ends_with?: Maybe<Scalars['String']>;
  ticketVisibilityType_not_ends_with?: Maybe<Scalars['String']>;
  ticketVisibilityType_i?: Maybe<Scalars['String']>;
  ticketVisibilityType_not_i?: Maybe<Scalars['String']>;
  ticketVisibilityType_contains_i?: Maybe<Scalars['String']>;
  ticketVisibilityType_not_contains_i?: Maybe<Scalars['String']>;
  ticketVisibilityType_starts_with_i?: Maybe<Scalars['String']>;
  ticketVisibilityType_not_starts_with_i?: Maybe<Scalars['String']>;
  ticketVisibilityType_ends_with_i?: Maybe<Scalars['String']>;
  ticketVisibilityType_not_ends_with_i?: Maybe<Scalars['String']>;
  ticketVisibilityType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketVisibilityType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  canManagePropertyScopes?: Maybe<Scalars['Boolean']>;
  canManagePropertyScopes_not?: Maybe<Scalars['Boolean']>;
  canManageBankAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankAccounts_not?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReportTasks?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReportTasks_not?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationAccountContexts?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationAccountContexts_not?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationOrganizationContexts?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationOrganizationContexts_not?: Maybe<Scalars['Boolean']>;
  canManageBankContractorAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankContractorAccounts_not?: Maybe<Scalars['Boolean']>;
  canManageBankTransactions?: Maybe<Scalars['Boolean']>;
  canManageBankTransactions_not?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReports?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReports_not?: Maybe<Scalars['Boolean']>;
  canManageIncidents?: Maybe<Scalars['Boolean']>;
  canManageIncidents_not?: Maybe<Scalars['Boolean']>;
  canManageNewsItems?: Maybe<Scalars['Boolean']>;
  canManageNewsItems_not?: Maybe<Scalars['Boolean']>;
  canManageNewsItemTemplates?: Maybe<Scalars['Boolean']>;
  canManageNewsItemTemplates_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<OrganizationEmployeeRoleHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<OrganizationEmployeeRoleHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<OrganizationEmployeeRoleHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<OrganizationEmployeeRoleHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationEmployeeRoleHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OrganizationEmployeeRoleHistoryRecordsCreateInput = {
  data?: Maybe<OrganizationEmployeeRoleHistoryRecordCreateInput>;
};

export type OrganizationEmployeeRoleHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeRoleHistoryRecordUpdateInput>;
};

export type OrganizationEmployeeRoleRelateToOneInput = {
  create?: Maybe<OrganizationEmployeeRoleCreateInput>;
  connect?: Maybe<OrganizationEmployeeRoleWhereUniqueInput>;
  disconnect?: Maybe<OrganizationEmployeeRoleWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type OrganizationEmployeeRoleUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  canManageOrganization?: Maybe<Scalars['Boolean']>;
  canManageEmployees?: Maybe<Scalars['Boolean']>;
  canManageRoles?: Maybe<Scalars['Boolean']>;
  canManageIntegrations?: Maybe<Scalars['Boolean']>;
  canManageProperties?: Maybe<Scalars['Boolean']>;
  canManageTickets?: Maybe<Scalars['Boolean']>;
  canManageMeters?: Maybe<Scalars['Boolean']>;
  canManageMeterReadings?: Maybe<Scalars['Boolean']>;
  canManageContacts?: Maybe<Scalars['Boolean']>;
  canManageContactRoles?: Maybe<Scalars['Boolean']>;
  canManageTicketComments?: Maybe<Scalars['Boolean']>;
  canShareTickets?: Maybe<Scalars['Boolean']>;
  canReadBillingReceipts?: Maybe<Scalars['Boolean']>;
  canReadPayments?: Maybe<Scalars['Boolean']>;
  canInviteNewOrganizationEmployees?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsResponsible?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsExecutor?: Maybe<Scalars['Boolean']>;
  canManageTicketPropertyHints?: Maybe<Scalars['Boolean']>;
  ticketVisibilityType?: Maybe<Scalars['String']>;
  canManagePropertyScopes?: Maybe<Scalars['Boolean']>;
  canManageBankAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReportTasks?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationAccountContexts?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationOrganizationContexts?: Maybe<Scalars['Boolean']>;
  canManageBankContractorAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankTransactions?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReports?: Maybe<Scalars['Boolean']>;
  canManageIncidents?: Maybe<Scalars['Boolean']>;
  canManageNewsItems?: Maybe<Scalars['Boolean']>;
  canManageNewsItemTemplates?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type OrganizationEmployeeRoleWhereInput = {
  AND?: Maybe<Array<Maybe<OrganizationEmployeeRoleWhereInput>>>;
  OR?: Maybe<Array<Maybe<OrganizationEmployeeRoleWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  canManageOrganization?: Maybe<Scalars['Boolean']>;
  canManageOrganization_not?: Maybe<Scalars['Boolean']>;
  canManageEmployees?: Maybe<Scalars['Boolean']>;
  canManageEmployees_not?: Maybe<Scalars['Boolean']>;
  canManageRoles?: Maybe<Scalars['Boolean']>;
  canManageRoles_not?: Maybe<Scalars['Boolean']>;
  canManageIntegrations?: Maybe<Scalars['Boolean']>;
  canManageIntegrations_not?: Maybe<Scalars['Boolean']>;
  canManageProperties?: Maybe<Scalars['Boolean']>;
  canManageProperties_not?: Maybe<Scalars['Boolean']>;
  canManageTickets?: Maybe<Scalars['Boolean']>;
  canManageTickets_not?: Maybe<Scalars['Boolean']>;
  canManageMeters?: Maybe<Scalars['Boolean']>;
  canManageMeters_not?: Maybe<Scalars['Boolean']>;
  canManageMeterReadings?: Maybe<Scalars['Boolean']>;
  canManageMeterReadings_not?: Maybe<Scalars['Boolean']>;
  canManageContacts?: Maybe<Scalars['Boolean']>;
  canManageContacts_not?: Maybe<Scalars['Boolean']>;
  canManageContactRoles?: Maybe<Scalars['Boolean']>;
  canManageContactRoles_not?: Maybe<Scalars['Boolean']>;
  canManageTicketComments?: Maybe<Scalars['Boolean']>;
  canManageTicketComments_not?: Maybe<Scalars['Boolean']>;
  canShareTickets?: Maybe<Scalars['Boolean']>;
  canShareTickets_not?: Maybe<Scalars['Boolean']>;
  canReadBillingReceipts?: Maybe<Scalars['Boolean']>;
  canReadBillingReceipts_not?: Maybe<Scalars['Boolean']>;
  canReadPayments?: Maybe<Scalars['Boolean']>;
  canReadPayments_not?: Maybe<Scalars['Boolean']>;
  canInviteNewOrganizationEmployees?: Maybe<Scalars['Boolean']>;
  canInviteNewOrganizationEmployees_not?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsResponsible?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsResponsible_not?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsExecutor?: Maybe<Scalars['Boolean']>;
  canBeAssignedAsExecutor_not?: Maybe<Scalars['Boolean']>;
  canManageTicketPropertyHints?: Maybe<Scalars['Boolean']>;
  canManageTicketPropertyHints_not?: Maybe<Scalars['Boolean']>;
  ticketVisibilityType?: Maybe<Scalars['String']>;
  ticketVisibilityType_not?: Maybe<Scalars['String']>;
  ticketVisibilityType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketVisibilityType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  canManagePropertyScopes?: Maybe<Scalars['Boolean']>;
  canManagePropertyScopes_not?: Maybe<Scalars['Boolean']>;
  canManageBankAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankAccounts_not?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReportTasks?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReportTasks_not?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationAccountContexts?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationAccountContexts_not?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationOrganizationContexts?: Maybe<Scalars['Boolean']>;
  canManageBankIntegrationOrganizationContexts_not?: Maybe<Scalars['Boolean']>;
  canManageBankContractorAccounts?: Maybe<Scalars['Boolean']>;
  canManageBankContractorAccounts_not?: Maybe<Scalars['Boolean']>;
  canManageBankTransactions?: Maybe<Scalars['Boolean']>;
  canManageBankTransactions_not?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReports?: Maybe<Scalars['Boolean']>;
  canManageBankAccountReports_not?: Maybe<Scalars['Boolean']>;
  canManageIncidents?: Maybe<Scalars['Boolean']>;
  canManageIncidents_not?: Maybe<Scalars['Boolean']>;
  canManageNewsItems?: Maybe<Scalars['Boolean']>;
  canManageNewsItems_not?: Maybe<Scalars['Boolean']>;
  canManageNewsItemTemplates?: Maybe<Scalars['Boolean']>;
  canManageNewsItemTemplates_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type OrganizationEmployeeRoleWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OrganizationEmployeeRolesCreateInput = {
  data?: Maybe<OrganizationEmployeeRoleCreateInput>;
};

export type OrganizationEmployeeRolesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeRoleUpdateInput>;
};

/**  A work category, that employee can perform. Used to limit the visibility of tickets for employees with "propertyAndSpecialization" ticketVisibilityType  */
export type OrganizationEmployeeSpecialization = {
  __typename?: 'OrganizationEmployeeSpecialization';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OrganizationEmployeeSpecialization List config, or
   *  2. As an alias to the field set on 'labelField' in the OrganizationEmployeeSpecialization List config, or
   *  3. As an alias to a 'name' field on the OrganizationEmployeeSpecialization List (if one exists), or
   *  4. As an alias to the 'id' field on the OrganizationEmployeeSpecialization List.
   */
  _label_?: Maybe<Scalars['String']>;
  employee?: Maybe<OrganizationEmployee>;
  /**  Specific work category, that this employee can perform  */
  specialization?: Maybe<TicketCategoryClassifier>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type OrganizationEmployeeSpecializationCreateInput = {
  employee?: Maybe<OrganizationEmployeeRelateToOneInput>;
  specialization?: Maybe<TicketCategoryClassifierRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type OrganizationEmployeeSpecializationHistoryRecord = {
  __typename?: 'OrganizationEmployeeSpecializationHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OrganizationEmployeeSpecializationHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the OrganizationEmployeeSpecializationHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the OrganizationEmployeeSpecializationHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the OrganizationEmployeeSpecializationHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  specialization?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationEmployeeSpecializationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OrganizationEmployeeSpecializationHistoryRecordCreateInput = {
  employee?: Maybe<Scalars['String']>;
  specialization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationEmployeeSpecializationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum OrganizationEmployeeSpecializationHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type OrganizationEmployeeSpecializationHistoryRecordUpdateInput = {
  employee?: Maybe<Scalars['String']>;
  specialization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationEmployeeSpecializationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OrganizationEmployeeSpecializationHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationHistoryRecordWhereInput>>>;
  employee?: Maybe<Scalars['String']>;
  employee_not?: Maybe<Scalars['String']>;
  employee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  specialization?: Maybe<Scalars['String']>;
  specialization_not?: Maybe<Scalars['String']>;
  specialization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  specialization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<OrganizationEmployeeSpecializationHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<OrganizationEmployeeSpecializationHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationEmployeeSpecializationHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OrganizationEmployeeSpecializationHistoryRecordsCreateInput = {
  data?: Maybe<OrganizationEmployeeSpecializationHistoryRecordCreateInput>;
};

export type OrganizationEmployeeSpecializationHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeSpecializationHistoryRecordUpdateInput>;
};

export type OrganizationEmployeeSpecializationUpdateInput = {
  employee?: Maybe<OrganizationEmployeeRelateToOneInput>;
  specialization?: Maybe<TicketCategoryClassifierRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type OrganizationEmployeeSpecializationWhereInput = {
  AND?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationWhereInput>>>;
  OR?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationWhereInput>>>;
  employee?: Maybe<OrganizationEmployeeWhereInput>;
  employee_is_null?: Maybe<Scalars['Boolean']>;
  specialization?: Maybe<TicketCategoryClassifierWhereInput>;
  specialization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type OrganizationEmployeeSpecializationWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OrganizationEmployeeSpecializationsCreateInput = {
  data?: Maybe<OrganizationEmployeeSpecializationCreateInput>;
};

export type OrganizationEmployeeSpecializationsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeSpecializationUpdateInput>;
};

export type OrganizationEmployeeUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  inviteCode?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  role?: Maybe<OrganizationEmployeeRoleRelateToOneInput>;
  position?: Maybe<Scalars['String']>;
  isAccepted?: Maybe<Scalars['Boolean']>;
  isRejected?: Maybe<Scalars['Boolean']>;
  isBlocked?: Maybe<Scalars['Boolean']>;
  hasAllSpecializations?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type OrganizationEmployeeWhereInput = {
  AND?: Maybe<Array<Maybe<OrganizationEmployeeWhereInput>>>;
  OR?: Maybe<Array<Maybe<OrganizationEmployeeWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  inviteCode?: Maybe<Scalars['ID']>;
  inviteCode_not?: Maybe<Scalars['ID']>;
  inviteCode_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  inviteCode_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  role?: Maybe<OrganizationEmployeeRoleWhereInput>;
  role_is_null?: Maybe<Scalars['Boolean']>;
  position?: Maybe<Scalars['String']>;
  position_not?: Maybe<Scalars['String']>;
  position_contains?: Maybe<Scalars['String']>;
  position_not_contains?: Maybe<Scalars['String']>;
  position_starts_with?: Maybe<Scalars['String']>;
  position_not_starts_with?: Maybe<Scalars['String']>;
  position_ends_with?: Maybe<Scalars['String']>;
  position_not_ends_with?: Maybe<Scalars['String']>;
  position_i?: Maybe<Scalars['String']>;
  position_not_i?: Maybe<Scalars['String']>;
  position_contains_i?: Maybe<Scalars['String']>;
  position_not_contains_i?: Maybe<Scalars['String']>;
  position_starts_with_i?: Maybe<Scalars['String']>;
  position_not_starts_with_i?: Maybe<Scalars['String']>;
  position_ends_with_i?: Maybe<Scalars['String']>;
  position_not_ends_with_i?: Maybe<Scalars['String']>;
  position_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  position_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isAccepted?: Maybe<Scalars['Boolean']>;
  isAccepted_not?: Maybe<Scalars['Boolean']>;
  isRejected?: Maybe<Scalars['Boolean']>;
  isRejected_not?: Maybe<Scalars['Boolean']>;
  isBlocked?: Maybe<Scalars['Boolean']>;
  isBlocked_not?: Maybe<Scalars['Boolean']>;
  hasAllSpecializations?: Maybe<Scalars['Boolean']>;
  hasAllSpecializations_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type OrganizationEmployeeWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OrganizationEmployeesCreateInput = {
  data?: Maybe<OrganizationEmployeeCreateInput>;
};

export type OrganizationEmployeesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationEmployeeUpdateInput>;
};

export enum OrganizationFeature {
  Spp = 'SPP'
}

export type OrganizationFeatures = {
  __typename?: 'OrganizationFeatures';
  hasBillingData: Scalars['Boolean'];
  hasMeters: Scalars['Boolean'];
};

/**  A keystone list  */
export type OrganizationHistoryRecord = {
  __typename?: 'OrganizationHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OrganizationHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the OrganizationHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the OrganizationHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the OrganizationHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  avatar?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  statusTransitions?: Maybe<Scalars['JSON']>;
  defaultEmployeeRoleStatusTransitions?: Maybe<Scalars['JSON']>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  features?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OrganizationHistoryRecordCreateInput = {
  country?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  avatar?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  statusTransitions?: Maybe<Scalars['JSON']>;
  defaultEmployeeRoleStatusTransitions?: Maybe<Scalars['JSON']>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  features?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum OrganizationHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type OrganizationHistoryRecordUpdateInput = {
  country?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  avatar?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  statusTransitions?: Maybe<Scalars['JSON']>;
  defaultEmployeeRoleStatusTransitions?: Maybe<Scalars['JSON']>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  features?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OrganizationHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<OrganizationHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<OrganizationHistoryRecordWhereInput>>>;
  country?: Maybe<Scalars['String']>;
  country_not?: Maybe<Scalars['String']>;
  country_contains?: Maybe<Scalars['String']>;
  country_not_contains?: Maybe<Scalars['String']>;
  country_starts_with?: Maybe<Scalars['String']>;
  country_not_starts_with?: Maybe<Scalars['String']>;
  country_ends_with?: Maybe<Scalars['String']>;
  country_not_ends_with?: Maybe<Scalars['String']>;
  country_i?: Maybe<Scalars['String']>;
  country_not_i?: Maybe<Scalars['String']>;
  country_contains_i?: Maybe<Scalars['String']>;
  country_not_contains_i?: Maybe<Scalars['String']>;
  country_starts_with_i?: Maybe<Scalars['String']>;
  country_not_starts_with_i?: Maybe<Scalars['String']>;
  country_ends_with_i?: Maybe<Scalars['String']>;
  country_not_ends_with_i?: Maybe<Scalars['String']>;
  country_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  country_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin?: Maybe<Scalars['String']>;
  tin_not?: Maybe<Scalars['String']>;
  tin_contains?: Maybe<Scalars['String']>;
  tin_not_contains?: Maybe<Scalars['String']>;
  tin_starts_with?: Maybe<Scalars['String']>;
  tin_not_starts_with?: Maybe<Scalars['String']>;
  tin_ends_with?: Maybe<Scalars['String']>;
  tin_not_ends_with?: Maybe<Scalars['String']>;
  tin_i?: Maybe<Scalars['String']>;
  tin_not_i?: Maybe<Scalars['String']>;
  tin_contains_i?: Maybe<Scalars['String']>;
  tin_not_contains_i?: Maybe<Scalars['String']>;
  tin_starts_with_i?: Maybe<Scalars['String']>;
  tin_not_starts_with_i?: Maybe<Scalars['String']>;
  tin_ends_with_i?: Maybe<Scalars['String']>;
  tin_not_ends_with_i?: Maybe<Scalars['String']>;
  tin_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['JSON']>;
  description_not?: Maybe<Scalars['JSON']>;
  description_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  avatar?: Maybe<Scalars['JSON']>;
  avatar_not?: Maybe<Scalars['JSON']>;
  avatar_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  avatar_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  statusTransitions?: Maybe<Scalars['JSON']>;
  statusTransitions_not?: Maybe<Scalars['JSON']>;
  statusTransitions_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  statusTransitions_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  defaultEmployeeRoleStatusTransitions?: Maybe<Scalars['JSON']>;
  defaultEmployeeRoleStatusTransitions_not?: Maybe<Scalars['JSON']>;
  defaultEmployeeRoleStatusTransitions_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  defaultEmployeeRoleStatusTransitions_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  importRemoteSystem_not?: Maybe<Scalars['String']>;
  importRemoteSystem_contains?: Maybe<Scalars['String']>;
  importRemoteSystem_not_contains?: Maybe<Scalars['String']>;
  importRemoteSystem_starts_with?: Maybe<Scalars['String']>;
  importRemoteSystem_not_starts_with?: Maybe<Scalars['String']>;
  importRemoteSystem_ends_with?: Maybe<Scalars['String']>;
  importRemoteSystem_not_ends_with?: Maybe<Scalars['String']>;
  importRemoteSystem_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_i?: Maybe<Scalars['String']>;
  importRemoteSystem_contains_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_contains_i?: Maybe<Scalars['String']>;
  importRemoteSystem_starts_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_starts_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_ends_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_ends_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importRemoteSystem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  features?: Maybe<Scalars['JSON']>;
  features_not?: Maybe<Scalars['JSON']>;
  features_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  features_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<OrganizationHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<OrganizationHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<OrganizationHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<OrganizationHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OrganizationHistoryRecordsCreateInput = {
  data?: Maybe<OrganizationHistoryRecordCreateInput>;
};

export type OrganizationHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationHistoryRecordUpdateInput>;
};

/**  Relationship between Organization that allows an employee of a "parent" (or "holding", you name it) Organization to interact as an employee of another "child" Organizations. If the relationship is created via OrganizationLink between "parent" and "child" Organization, a user does not need to be employee in all "child" Organization to have the abilities, required to perform some actions there. It is enough to be an employee in just one "parent" Organization. "Child" and "parent" means logical connection, not a structural from real world. Example use case of OrganizationLink is to be able to read Ticket from many organization when current user is an employee of Organization that act as a supervisor, like call center, that servers many "client" Organizations. Similar use cases are implemented for abilities to read MeterReading, ExternalReport, Contact, Division, Property, Ticket, TicketComment and other entities.  */
export type OrganizationLink = {
  __typename?: 'OrganizationLink';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OrganizationLink List config, or
   *  2. As an alias to the field set on 'labelField' in the OrganizationLink List config, or
   *  3. As an alias to a 'name' field on the OrganizationLink List (if one exists), or
   *  4. As an alias to the 'id' field on the OrganizationLink List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  "Parent" Organization that gains its employee an access to all its "child" Organizations  */
  from?: Maybe<Organization>;
  /**  "Child" Organization that is getting accessible by employee of "parent" Organization, also, some entities of "Child" Organization are becoming accessible for CRUD operations.  */
  to?: Maybe<Organization>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type OrganizationLinkCreateInput = {
  from?: Maybe<OrganizationRelateToOneInput>;
  to?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type OrganizationLinkHistoryRecord = {
  __typename?: 'OrganizationLinkHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the OrganizationLinkHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the OrganizationLinkHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the OrganizationLinkHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the OrganizationLinkHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationLinkHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OrganizationLinkHistoryRecordCreateInput = {
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationLinkHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum OrganizationLinkHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type OrganizationLinkHistoryRecordUpdateInput = {
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<OrganizationLinkHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type OrganizationLinkHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<OrganizationLinkHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<OrganizationLinkHistoryRecordWhereInput>>>;
  from?: Maybe<Scalars['String']>;
  from_not?: Maybe<Scalars['String']>;
  from_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  from_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  to?: Maybe<Scalars['String']>;
  to_not?: Maybe<Scalars['String']>;
  to_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  to_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<OrganizationLinkHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<OrganizationLinkHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<OrganizationLinkHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<OrganizationLinkHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type OrganizationLinkHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OrganizationLinkHistoryRecordsCreateInput = {
  data?: Maybe<OrganizationLinkHistoryRecordCreateInput>;
};

export type OrganizationLinkHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationLinkHistoryRecordUpdateInput>;
};

export type OrganizationLinkRelateToManyInput = {
  create?: Maybe<Array<Maybe<OrganizationLinkCreateInput>>>;
  connect?: Maybe<Array<Maybe<OrganizationLinkWhereUniqueInput>>>;
  disconnect?: Maybe<Array<Maybe<OrganizationLinkWhereUniqueInput>>>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type OrganizationLinkUpdateInput = {
  from?: Maybe<OrganizationRelateToOneInput>;
  to?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type OrganizationLinkWhereInput = {
  AND?: Maybe<Array<Maybe<OrganizationLinkWhereInput>>>;
  OR?: Maybe<Array<Maybe<OrganizationLinkWhereInput>>>;
  from?: Maybe<OrganizationWhereInput>;
  from_is_null?: Maybe<Scalars['Boolean']>;
  to?: Maybe<OrganizationWhereInput>;
  to_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type OrganizationLinkWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OrganizationLinksCreateInput = {
  data?: Maybe<OrganizationLinkCreateInput>;
};

export type OrganizationLinksUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationLinkUpdateInput>;
};

export type OrganizationRelateToOneInput = {
  create?: Maybe<OrganizationCreateInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
  disconnect?: Maybe<OrganizationWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type OrganizationUpdateInput = {
  country?: Maybe<OrganizationCountryType>;
  name?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['Upload']>;
  meta?: Maybe<Scalars['JSON']>;
  employees?: Maybe<OrganizationEmployeeRelateToManyInput>;
  relatedOrganizations?: Maybe<OrganizationLinkRelateToManyInput>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  features?: Maybe<Array<OrganizationFeature>>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type OrganizationWhereInput = {
  AND?: Maybe<Array<Maybe<OrganizationWhereInput>>>;
  OR?: Maybe<Array<Maybe<OrganizationWhereInput>>>;
  country?: Maybe<OrganizationCountryType>;
  country_not?: Maybe<OrganizationCountryType>;
  country_in?: Maybe<Array<Maybe<OrganizationCountryType>>>;
  country_not_in?: Maybe<Array<Maybe<OrganizationCountryType>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin?: Maybe<Scalars['String']>;
  tin_not?: Maybe<Scalars['String']>;
  tin_contains?: Maybe<Scalars['String']>;
  tin_not_contains?: Maybe<Scalars['String']>;
  tin_starts_with?: Maybe<Scalars['String']>;
  tin_not_starts_with?: Maybe<Scalars['String']>;
  tin_ends_with?: Maybe<Scalars['String']>;
  tin_not_ends_with?: Maybe<Scalars['String']>;
  tin_i?: Maybe<Scalars['String']>;
  tin_not_i?: Maybe<Scalars['String']>;
  tin_contains_i?: Maybe<Scalars['String']>;
  tin_not_contains_i?: Maybe<Scalars['String']>;
  tin_starts_with_i?: Maybe<Scalars['String']>;
  tin_not_starts_with_i?: Maybe<Scalars['String']>;
  tin_ends_with_i?: Maybe<Scalars['String']>;
  tin_not_ends_with_i?: Maybe<Scalars['String']>;
  tin_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tin_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  avatar?: Maybe<Scalars['String']>;
  avatar_not?: Maybe<Scalars['String']>;
  avatar_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  avatar_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  /**  condition must be true for all nodes  */
  employees_every?: Maybe<OrganizationEmployeeWhereInput>;
  /**  condition must be true for at least 1 node  */
  employees_some?: Maybe<OrganizationEmployeeWhereInput>;
  /**  condition must be false for all nodes  */
  employees_none?: Maybe<OrganizationEmployeeWhereInput>;
  /**  condition must be true for all nodes  */
  relatedOrganizations_every?: Maybe<OrganizationLinkWhereInput>;
  /**  condition must be true for at least 1 node  */
  relatedOrganizations_some?: Maybe<OrganizationLinkWhereInput>;
  /**  condition must be false for all nodes  */
  relatedOrganizations_none?: Maybe<OrganizationLinkWhereInput>;
  importRemoteSystem?: Maybe<Scalars['String']>;
  importRemoteSystem_not?: Maybe<Scalars['String']>;
  importRemoteSystem_contains?: Maybe<Scalars['String']>;
  importRemoteSystem_not_contains?: Maybe<Scalars['String']>;
  importRemoteSystem_starts_with?: Maybe<Scalars['String']>;
  importRemoteSystem_not_starts_with?: Maybe<Scalars['String']>;
  importRemoteSystem_ends_with?: Maybe<Scalars['String']>;
  importRemoteSystem_not_ends_with?: Maybe<Scalars['String']>;
  importRemoteSystem_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_i?: Maybe<Scalars['String']>;
  importRemoteSystem_contains_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_contains_i?: Maybe<Scalars['String']>;
  importRemoteSystem_starts_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_starts_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_ends_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_not_ends_with_i?: Maybe<Scalars['String']>;
  importRemoteSystem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importRemoteSystem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  features?: Maybe<Array<OrganizationFeature>>;
  features_not?: Maybe<Array<OrganizationFeature>>;
  features_in?: Maybe<Array<Maybe<Array<OrganizationFeature>>>>;
  features_not_in?: Maybe<Array<Maybe<Array<OrganizationFeature>>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type OrganizationWhereUniqueInput = {
  id: Scalars['ID'];
};

export type OrganizationsCreateInput = {
  data?: Maybe<OrganizationCreateInput>;
};

export type OrganizationsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<OrganizationUpdateInput>;
};

/**  Information about completed transaction from user to a specific organization  */
export type Payment = {
  __typename?: 'Payment';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the Payment List config, or
   *  2. As an alias to the field set on 'labelField' in the Payment List config, or
   *  3. As an alias to a 'name' field on the Payment List (if one exists), or
   *  4. As an alias to the 'id' field on the Payment List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Amount of money from MultiPayment.amountWithOutExplicitFee to pay for billing receipt  */
  amount?: Maybe<Scalars['String']>;
  /**  Amount of money which payer pays on top of initial "amount", which counts as fee for every service which is not housing and communal services  */
  explicitFee?: Maybe<Scalars['String']>;
  /**  Amount of money which payer pays on top of initial "amount", which counts as internal service charge for all payments from housing and communal services category  */
  explicitServiceCharge?: Maybe<Scalars['String']>;
  /**  Amount of money which recipient pays from initial amount for transaction  */
  implicitFee?: Maybe<Scalars['String']>;
  /**  The amount of money charged by our service for the provision of service after subtracting from it the shares of all participants in the process. Can be part of explicit fee, implicit fee or explicit service charge  */
  serviceFee?: Maybe<Scalars['String']>;
  /**  Code of currency in ISO-4217 format  */
  currencyCode?: Maybe<Scalars['String']>;
  /**  Time at which money was advanced to recipient's account  */
  advancedAt?: Maybe<Scalars['String']>;
  /**  Payer's account number  */
  accountNumber?: Maybe<Scalars['String']>;
  /**  Period date: Generated on template <year>-<month>-01  */
  period?: Maybe<Scalars['String']>;
  /**  Purpose of payment. Mostly used as title such as "Payment by agreement №123"  */
  purpose?: Maybe<Scalars['String']>;
  /**  Link to a billing receipt that the user paid for. Can be null in cases of getting payments out of our system  */
  receipt?: Maybe<BillingReceipt>;
  /**  Frozen billing receipt, used to resolving conflicts  */
  frozenReceipt?: Maybe<Scalars['JSON']>;
  /**  Link to a payment related MultiPayment. Required field to update, but initially created unlinked  */
  multiPayment?: Maybe<MultiPayment>;
  /**  Acquiring context, which used to link organization and acquiring integration and provide storage for organization-acquiring-specific settings / state  */
  context?: Maybe<AcquiringIntegrationContext>;
  /**  Direct link to organization, since acquiring context cannot be defined for some payments  */
  organization?: Maybe<Organization>;
  /**  Status of payment. Can be: "CREATED", "PROCESSING", "DONE", "ERROR", "WITHDRAWN"  */
  status?: Maybe<Scalars['String']>;
  /**  Payment order. A directive to a bank from a bank account holder instructing the bank to make a payment or series of payments to a third party  */
  order?: Maybe<Scalars['String']>;
  /**  Bic of recipient organization, used for matching payments with receipts in case of multiple receipts per account + address  */
  recipientBic?: Maybe<Scalars['String']>;
  /**  Bank account number of recipient organization, used for matching payments with receipts in case of multiple receipts per account + address  */
  recipientBankAccount?: Maybe<Scalars['String']>;
  /**  Id of object in external service which represents current item. Mostly used for internal needs of integration services for matching our objects with theirs  */
  importId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type PaymentCategory = {
  __typename?: 'PaymentCategory';
  id: Scalars['String'];
  categoryName: Scalars['String'];
  billingName: Scalars['String'];
  acquiringName: Scalars['String'];
};

export type PaymentCreateInput = {
  amount?: Maybe<Scalars['String']>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  implicitFee?: Maybe<Scalars['String']>;
  serviceFee?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  advancedAt?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  receipt?: Maybe<BillingReceiptRelateToOneInput>;
  frozenReceipt?: Maybe<Scalars['JSON']>;
  multiPayment?: Maybe<MultiPaymentRelateToOneInput>;
  context?: Maybe<AcquiringIntegrationContextRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  status?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  recipientBic?: Maybe<Scalars['String']>;
  recipientBankAccount?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type PaymentHistoryRecord = {
  __typename?: 'PaymentHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the PaymentHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the PaymentHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the PaymentHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the PaymentHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  amount?: Maybe<Scalars['String']>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  implicitFee?: Maybe<Scalars['String']>;
  serviceFee?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  advancedAt?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  receipt?: Maybe<Scalars['String']>;
  frozenReceipt?: Maybe<Scalars['JSON']>;
  multiPayment?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  recipientBic?: Maybe<Scalars['String']>;
  recipientBankAccount?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PaymentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PaymentHistoryRecordCreateInput = {
  amount?: Maybe<Scalars['String']>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  implicitFee?: Maybe<Scalars['String']>;
  serviceFee?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  advancedAt?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  receipt?: Maybe<Scalars['String']>;
  frozenReceipt?: Maybe<Scalars['JSON']>;
  multiPayment?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  recipientBic?: Maybe<Scalars['String']>;
  recipientBankAccount?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PaymentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum PaymentHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type PaymentHistoryRecordUpdateInput = {
  amount?: Maybe<Scalars['String']>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  implicitFee?: Maybe<Scalars['String']>;
  serviceFee?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  advancedAt?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  receipt?: Maybe<Scalars['String']>;
  frozenReceipt?: Maybe<Scalars['JSON']>;
  multiPayment?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  recipientBic?: Maybe<Scalars['String']>;
  recipientBankAccount?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PaymentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PaymentHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<PaymentHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<PaymentHistoryRecordWhereInput>>>;
  amount?: Maybe<Scalars['String']>;
  amount_not?: Maybe<Scalars['String']>;
  amount_lt?: Maybe<Scalars['String']>;
  amount_lte?: Maybe<Scalars['String']>;
  amount_gt?: Maybe<Scalars['String']>;
  amount_gte?: Maybe<Scalars['String']>;
  amount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitFee_not?: Maybe<Scalars['String']>;
  explicitFee_lt?: Maybe<Scalars['String']>;
  explicitFee_lte?: Maybe<Scalars['String']>;
  explicitFee_gt?: Maybe<Scalars['String']>;
  explicitFee_gte?: Maybe<Scalars['String']>;
  explicitFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  explicitServiceCharge_not?: Maybe<Scalars['String']>;
  explicitServiceCharge_lt?: Maybe<Scalars['String']>;
  explicitServiceCharge_lte?: Maybe<Scalars['String']>;
  explicitServiceCharge_gt?: Maybe<Scalars['String']>;
  explicitServiceCharge_gte?: Maybe<Scalars['String']>;
  explicitServiceCharge_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitServiceCharge_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  implicitFee?: Maybe<Scalars['String']>;
  implicitFee_not?: Maybe<Scalars['String']>;
  implicitFee_lt?: Maybe<Scalars['String']>;
  implicitFee_lte?: Maybe<Scalars['String']>;
  implicitFee_gt?: Maybe<Scalars['String']>;
  implicitFee_gte?: Maybe<Scalars['String']>;
  implicitFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  implicitFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceFee?: Maybe<Scalars['String']>;
  serviceFee_not?: Maybe<Scalars['String']>;
  serviceFee_lt?: Maybe<Scalars['String']>;
  serviceFee_lte?: Maybe<Scalars['String']>;
  serviceFee_gt?: Maybe<Scalars['String']>;
  serviceFee_gte?: Maybe<Scalars['String']>;
  serviceFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_contains?: Maybe<Scalars['String']>;
  currencyCode_not_contains?: Maybe<Scalars['String']>;
  currencyCode_starts_with?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with?: Maybe<Scalars['String']>;
  currencyCode_ends_with?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with?: Maybe<Scalars['String']>;
  currencyCode_i?: Maybe<Scalars['String']>;
  currencyCode_not_i?: Maybe<Scalars['String']>;
  currencyCode_contains_i?: Maybe<Scalars['String']>;
  currencyCode_not_contains_i?: Maybe<Scalars['String']>;
  currencyCode_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_starts_with_i?: Maybe<Scalars['String']>;
  currencyCode_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_not_ends_with_i?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  advancedAt?: Maybe<Scalars['String']>;
  advancedAt_not?: Maybe<Scalars['String']>;
  advancedAt_lt?: Maybe<Scalars['String']>;
  advancedAt_lte?: Maybe<Scalars['String']>;
  advancedAt_gt?: Maybe<Scalars['String']>;
  advancedAt_gte?: Maybe<Scalars['String']>;
  advancedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  advancedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber?: Maybe<Scalars['String']>;
  accountNumber_not?: Maybe<Scalars['String']>;
  accountNumber_contains?: Maybe<Scalars['String']>;
  accountNumber_not_contains?: Maybe<Scalars['String']>;
  accountNumber_starts_with?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with?: Maybe<Scalars['String']>;
  accountNumber_ends_with?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with?: Maybe<Scalars['String']>;
  accountNumber_i?: Maybe<Scalars['String']>;
  accountNumber_not_i?: Maybe<Scalars['String']>;
  accountNumber_contains_i?: Maybe<Scalars['String']>;
  accountNumber_not_contains_i?: Maybe<Scalars['String']>;
  accountNumber_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  period?: Maybe<Scalars['String']>;
  period_not?: Maybe<Scalars['String']>;
  period_lt?: Maybe<Scalars['String']>;
  period_lte?: Maybe<Scalars['String']>;
  period_gt?: Maybe<Scalars['String']>;
  period_gte?: Maybe<Scalars['String']>;
  period_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  period_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose?: Maybe<Scalars['String']>;
  purpose_not?: Maybe<Scalars['String']>;
  purpose_contains?: Maybe<Scalars['String']>;
  purpose_not_contains?: Maybe<Scalars['String']>;
  purpose_starts_with?: Maybe<Scalars['String']>;
  purpose_not_starts_with?: Maybe<Scalars['String']>;
  purpose_ends_with?: Maybe<Scalars['String']>;
  purpose_not_ends_with?: Maybe<Scalars['String']>;
  purpose_i?: Maybe<Scalars['String']>;
  purpose_not_i?: Maybe<Scalars['String']>;
  purpose_contains_i?: Maybe<Scalars['String']>;
  purpose_not_contains_i?: Maybe<Scalars['String']>;
  purpose_starts_with_i?: Maybe<Scalars['String']>;
  purpose_not_starts_with_i?: Maybe<Scalars['String']>;
  purpose_ends_with_i?: Maybe<Scalars['String']>;
  purpose_not_ends_with_i?: Maybe<Scalars['String']>;
  purpose_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  receipt?: Maybe<Scalars['String']>;
  receipt_not?: Maybe<Scalars['String']>;
  receipt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  receipt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  frozenReceipt?: Maybe<Scalars['JSON']>;
  frozenReceipt_not?: Maybe<Scalars['JSON']>;
  frozenReceipt_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  frozenReceipt_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  multiPayment?: Maybe<Scalars['String']>;
  multiPayment_not?: Maybe<Scalars['String']>;
  multiPayment_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  multiPayment_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  context?: Maybe<Scalars['String']>;
  context_not?: Maybe<Scalars['String']>;
  context_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  context_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  order?: Maybe<Scalars['String']>;
  order_not?: Maybe<Scalars['String']>;
  order_contains?: Maybe<Scalars['String']>;
  order_not_contains?: Maybe<Scalars['String']>;
  order_starts_with?: Maybe<Scalars['String']>;
  order_not_starts_with?: Maybe<Scalars['String']>;
  order_ends_with?: Maybe<Scalars['String']>;
  order_not_ends_with?: Maybe<Scalars['String']>;
  order_i?: Maybe<Scalars['String']>;
  order_not_i?: Maybe<Scalars['String']>;
  order_contains_i?: Maybe<Scalars['String']>;
  order_not_contains_i?: Maybe<Scalars['String']>;
  order_starts_with_i?: Maybe<Scalars['String']>;
  order_not_starts_with_i?: Maybe<Scalars['String']>;
  order_ends_with_i?: Maybe<Scalars['String']>;
  order_not_ends_with_i?: Maybe<Scalars['String']>;
  order_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  order_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipientBic?: Maybe<Scalars['String']>;
  recipientBic_not?: Maybe<Scalars['String']>;
  recipientBic_contains?: Maybe<Scalars['String']>;
  recipientBic_not_contains?: Maybe<Scalars['String']>;
  recipientBic_starts_with?: Maybe<Scalars['String']>;
  recipientBic_not_starts_with?: Maybe<Scalars['String']>;
  recipientBic_ends_with?: Maybe<Scalars['String']>;
  recipientBic_not_ends_with?: Maybe<Scalars['String']>;
  recipientBic_i?: Maybe<Scalars['String']>;
  recipientBic_not_i?: Maybe<Scalars['String']>;
  recipientBic_contains_i?: Maybe<Scalars['String']>;
  recipientBic_not_contains_i?: Maybe<Scalars['String']>;
  recipientBic_starts_with_i?: Maybe<Scalars['String']>;
  recipientBic_not_starts_with_i?: Maybe<Scalars['String']>;
  recipientBic_ends_with_i?: Maybe<Scalars['String']>;
  recipientBic_not_ends_with_i?: Maybe<Scalars['String']>;
  recipientBic_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipientBic_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipientBankAccount?: Maybe<Scalars['String']>;
  recipientBankAccount_not?: Maybe<Scalars['String']>;
  recipientBankAccount_contains?: Maybe<Scalars['String']>;
  recipientBankAccount_not_contains?: Maybe<Scalars['String']>;
  recipientBankAccount_starts_with?: Maybe<Scalars['String']>;
  recipientBankAccount_not_starts_with?: Maybe<Scalars['String']>;
  recipientBankAccount_ends_with?: Maybe<Scalars['String']>;
  recipientBankAccount_not_ends_with?: Maybe<Scalars['String']>;
  recipientBankAccount_i?: Maybe<Scalars['String']>;
  recipientBankAccount_not_i?: Maybe<Scalars['String']>;
  recipientBankAccount_contains_i?: Maybe<Scalars['String']>;
  recipientBankAccount_not_contains_i?: Maybe<Scalars['String']>;
  recipientBankAccount_starts_with_i?: Maybe<Scalars['String']>;
  recipientBankAccount_not_starts_with_i?: Maybe<Scalars['String']>;
  recipientBankAccount_ends_with_i?: Maybe<Scalars['String']>;
  recipientBankAccount_not_ends_with_i?: Maybe<Scalars['String']>;
  recipientBankAccount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipientBankAccount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<PaymentHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<PaymentHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<PaymentHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<PaymentHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PaymentHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PaymentHistoryRecordsCreateInput = {
  data?: Maybe<PaymentHistoryRecordCreateInput>;
};

export type PaymentHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PaymentHistoryRecordUpdateInput>;
};

export type PaymentRelateToManyInput = {
  create?: Maybe<Array<Maybe<PaymentCreateInput>>>;
  connect?: Maybe<Array<Maybe<PaymentWhereUniqueInput>>>;
  disconnect?: Maybe<Array<Maybe<PaymentWhereUniqueInput>>>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type PaymentUpdateInput = {
  amount?: Maybe<Scalars['String']>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  implicitFee?: Maybe<Scalars['String']>;
  serviceFee?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  advancedAt?: Maybe<Scalars['String']>;
  accountNumber?: Maybe<Scalars['String']>;
  period?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  receipt?: Maybe<BillingReceiptRelateToOneInput>;
  frozenReceipt?: Maybe<Scalars['JSON']>;
  multiPayment?: Maybe<MultiPaymentRelateToOneInput>;
  context?: Maybe<AcquiringIntegrationContextRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  status?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['String']>;
  recipientBic?: Maybe<Scalars['String']>;
  recipientBankAccount?: Maybe<Scalars['String']>;
  importId?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type PaymentWhereInput = {
  AND?: Maybe<Array<Maybe<PaymentWhereInput>>>;
  OR?: Maybe<Array<Maybe<PaymentWhereInput>>>;
  amount?: Maybe<Scalars['String']>;
  amount_not?: Maybe<Scalars['String']>;
  amount_lt?: Maybe<Scalars['String']>;
  amount_lte?: Maybe<Scalars['String']>;
  amount_gt?: Maybe<Scalars['String']>;
  amount_gte?: Maybe<Scalars['String']>;
  amount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  amount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitFee?: Maybe<Scalars['String']>;
  explicitFee_not?: Maybe<Scalars['String']>;
  explicitFee_lt?: Maybe<Scalars['String']>;
  explicitFee_lte?: Maybe<Scalars['String']>;
  explicitFee_gt?: Maybe<Scalars['String']>;
  explicitFee_gte?: Maybe<Scalars['String']>;
  explicitFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitServiceCharge?: Maybe<Scalars['String']>;
  explicitServiceCharge_not?: Maybe<Scalars['String']>;
  explicitServiceCharge_lt?: Maybe<Scalars['String']>;
  explicitServiceCharge_lte?: Maybe<Scalars['String']>;
  explicitServiceCharge_gt?: Maybe<Scalars['String']>;
  explicitServiceCharge_gte?: Maybe<Scalars['String']>;
  explicitServiceCharge_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  explicitServiceCharge_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  implicitFee?: Maybe<Scalars['String']>;
  implicitFee_not?: Maybe<Scalars['String']>;
  implicitFee_lt?: Maybe<Scalars['String']>;
  implicitFee_lte?: Maybe<Scalars['String']>;
  implicitFee_gt?: Maybe<Scalars['String']>;
  implicitFee_gte?: Maybe<Scalars['String']>;
  implicitFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  implicitFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceFee?: Maybe<Scalars['String']>;
  serviceFee_not?: Maybe<Scalars['String']>;
  serviceFee_lt?: Maybe<Scalars['String']>;
  serviceFee_lte?: Maybe<Scalars['String']>;
  serviceFee_gt?: Maybe<Scalars['String']>;
  serviceFee_gte?: Maybe<Scalars['String']>;
  serviceFee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceFee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode?: Maybe<Scalars['String']>;
  currencyCode_not?: Maybe<Scalars['String']>;
  currencyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currencyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  advancedAt?: Maybe<Scalars['String']>;
  advancedAt_not?: Maybe<Scalars['String']>;
  advancedAt_lt?: Maybe<Scalars['String']>;
  advancedAt_lte?: Maybe<Scalars['String']>;
  advancedAt_gt?: Maybe<Scalars['String']>;
  advancedAt_gte?: Maybe<Scalars['String']>;
  advancedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  advancedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber?: Maybe<Scalars['String']>;
  accountNumber_not?: Maybe<Scalars['String']>;
  accountNumber_contains?: Maybe<Scalars['String']>;
  accountNumber_not_contains?: Maybe<Scalars['String']>;
  accountNumber_starts_with?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with?: Maybe<Scalars['String']>;
  accountNumber_ends_with?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with?: Maybe<Scalars['String']>;
  accountNumber_i?: Maybe<Scalars['String']>;
  accountNumber_not_i?: Maybe<Scalars['String']>;
  accountNumber_contains_i?: Maybe<Scalars['String']>;
  accountNumber_not_contains_i?: Maybe<Scalars['String']>;
  accountNumber_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  period?: Maybe<Scalars['String']>;
  period_not?: Maybe<Scalars['String']>;
  period_lt?: Maybe<Scalars['String']>;
  period_lte?: Maybe<Scalars['String']>;
  period_gt?: Maybe<Scalars['String']>;
  period_gte?: Maybe<Scalars['String']>;
  period_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  period_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose?: Maybe<Scalars['String']>;
  purpose_not?: Maybe<Scalars['String']>;
  purpose_contains?: Maybe<Scalars['String']>;
  purpose_not_contains?: Maybe<Scalars['String']>;
  purpose_starts_with?: Maybe<Scalars['String']>;
  purpose_not_starts_with?: Maybe<Scalars['String']>;
  purpose_ends_with?: Maybe<Scalars['String']>;
  purpose_not_ends_with?: Maybe<Scalars['String']>;
  purpose_i?: Maybe<Scalars['String']>;
  purpose_not_i?: Maybe<Scalars['String']>;
  purpose_contains_i?: Maybe<Scalars['String']>;
  purpose_not_contains_i?: Maybe<Scalars['String']>;
  purpose_starts_with_i?: Maybe<Scalars['String']>;
  purpose_not_starts_with_i?: Maybe<Scalars['String']>;
  purpose_ends_with_i?: Maybe<Scalars['String']>;
  purpose_not_ends_with_i?: Maybe<Scalars['String']>;
  purpose_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  purpose_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  receipt?: Maybe<BillingReceiptWhereInput>;
  receipt_is_null?: Maybe<Scalars['Boolean']>;
  frozenReceipt?: Maybe<Scalars['JSON']>;
  frozenReceipt_not?: Maybe<Scalars['JSON']>;
  frozenReceipt_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  frozenReceipt_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  multiPayment?: Maybe<MultiPaymentWhereInput>;
  multiPayment_is_null?: Maybe<Scalars['Boolean']>;
  context?: Maybe<AcquiringIntegrationContextWhereInput>;
  context_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  order?: Maybe<Scalars['String']>;
  order_not?: Maybe<Scalars['String']>;
  order_contains?: Maybe<Scalars['String']>;
  order_not_contains?: Maybe<Scalars['String']>;
  order_starts_with?: Maybe<Scalars['String']>;
  order_not_starts_with?: Maybe<Scalars['String']>;
  order_ends_with?: Maybe<Scalars['String']>;
  order_not_ends_with?: Maybe<Scalars['String']>;
  order_i?: Maybe<Scalars['String']>;
  order_not_i?: Maybe<Scalars['String']>;
  order_contains_i?: Maybe<Scalars['String']>;
  order_not_contains_i?: Maybe<Scalars['String']>;
  order_starts_with_i?: Maybe<Scalars['String']>;
  order_not_starts_with_i?: Maybe<Scalars['String']>;
  order_ends_with_i?: Maybe<Scalars['String']>;
  order_not_ends_with_i?: Maybe<Scalars['String']>;
  order_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  order_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipientBic?: Maybe<Scalars['String']>;
  recipientBic_not?: Maybe<Scalars['String']>;
  recipientBic_contains?: Maybe<Scalars['String']>;
  recipientBic_not_contains?: Maybe<Scalars['String']>;
  recipientBic_starts_with?: Maybe<Scalars['String']>;
  recipientBic_not_starts_with?: Maybe<Scalars['String']>;
  recipientBic_ends_with?: Maybe<Scalars['String']>;
  recipientBic_not_ends_with?: Maybe<Scalars['String']>;
  recipientBic_i?: Maybe<Scalars['String']>;
  recipientBic_not_i?: Maybe<Scalars['String']>;
  recipientBic_contains_i?: Maybe<Scalars['String']>;
  recipientBic_not_contains_i?: Maybe<Scalars['String']>;
  recipientBic_starts_with_i?: Maybe<Scalars['String']>;
  recipientBic_not_starts_with_i?: Maybe<Scalars['String']>;
  recipientBic_ends_with_i?: Maybe<Scalars['String']>;
  recipientBic_not_ends_with_i?: Maybe<Scalars['String']>;
  recipientBic_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipientBic_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipientBankAccount?: Maybe<Scalars['String']>;
  recipientBankAccount_not?: Maybe<Scalars['String']>;
  recipientBankAccount_contains?: Maybe<Scalars['String']>;
  recipientBankAccount_not_contains?: Maybe<Scalars['String']>;
  recipientBankAccount_starts_with?: Maybe<Scalars['String']>;
  recipientBankAccount_not_starts_with?: Maybe<Scalars['String']>;
  recipientBankAccount_ends_with?: Maybe<Scalars['String']>;
  recipientBankAccount_not_ends_with?: Maybe<Scalars['String']>;
  recipientBankAccount_i?: Maybe<Scalars['String']>;
  recipientBankAccount_not_i?: Maybe<Scalars['String']>;
  recipientBankAccount_contains_i?: Maybe<Scalars['String']>;
  recipientBankAccount_not_contains_i?: Maybe<Scalars['String']>;
  recipientBankAccount_starts_with_i?: Maybe<Scalars['String']>;
  recipientBankAccount_not_starts_with_i?: Maybe<Scalars['String']>;
  recipientBankAccount_ends_with_i?: Maybe<Scalars['String']>;
  recipientBankAccount_not_ends_with_i?: Maybe<Scalars['String']>;
  recipientBankAccount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recipientBankAccount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId?: Maybe<Scalars['String']>;
  importId_not?: Maybe<Scalars['String']>;
  importId_contains?: Maybe<Scalars['String']>;
  importId_not_contains?: Maybe<Scalars['String']>;
  importId_starts_with?: Maybe<Scalars['String']>;
  importId_not_starts_with?: Maybe<Scalars['String']>;
  importId_ends_with?: Maybe<Scalars['String']>;
  importId_not_ends_with?: Maybe<Scalars['String']>;
  importId_i?: Maybe<Scalars['String']>;
  importId_not_i?: Maybe<Scalars['String']>;
  importId_contains_i?: Maybe<Scalars['String']>;
  importId_not_contains_i?: Maybe<Scalars['String']>;
  importId_starts_with_i?: Maybe<Scalars['String']>;
  importId_not_starts_with_i?: Maybe<Scalars['String']>;
  importId_ends_with_i?: Maybe<Scalars['String']>;
  importId_not_ends_with_i?: Maybe<Scalars['String']>;
  importId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  importId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type PaymentWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PaymentsCreateInput = {
  data?: Maybe<PaymentCreateInput>;
};

export type PaymentsFilter = {
  __typename?: 'PaymentsFilter';
  advancedAt?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber?: Maybe<Scalars['String']>;
  address?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  order?: Maybe<Scalars['String']>;
  status?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PaymentsFilterInput = {
  advancedAt?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber?: Maybe<Scalars['String']>;
  address?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
  order?: Maybe<Scalars['String']>;
  status?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/**  The payments filter preset  */
export type PaymentsFilterTemplate = {
  __typename?: 'PaymentsFilterTemplate';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the PaymentsFilterTemplate List config, or
   *  2. As an alias to the field set on 'labelField' in the PaymentsFilterTemplate List config, or
   *  3. As an alias to a 'name' field on the PaymentsFilterTemplate List (if one exists), or
   *  4. As an alias to the 'id' field on the PaymentsFilterTemplate List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Preset name  */
  name?: Maybe<Scalars['String']>;
  /**  Preset owner  */
  employee?: Maybe<OrganizationEmployee>;
  /**  Filter that match the given template  */
  fields?: Maybe<PaymentsFilter>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type PaymentsFilterTemplateCreateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<OrganizationEmployeeRelateToOneInput>;
  fields?: Maybe<PaymentsFilterInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type PaymentsFilterTemplateHistoryRecord = {
  __typename?: 'PaymentsFilterTemplateHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the PaymentsFilterTemplateHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the PaymentsFilterTemplateHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the PaymentsFilterTemplateHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the PaymentsFilterTemplateHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PaymentsFilterTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PaymentsFilterTemplateHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PaymentsFilterTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum PaymentsFilterTemplateHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type PaymentsFilterTemplateHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PaymentsFilterTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PaymentsFilterTemplateHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<PaymentsFilterTemplateHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<PaymentsFilterTemplateHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee?: Maybe<Scalars['String']>;
  employee_not?: Maybe<Scalars['String']>;
  employee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fields?: Maybe<Scalars['JSON']>;
  fields_not?: Maybe<Scalars['JSON']>;
  fields_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<PaymentsFilterTemplateHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<PaymentsFilterTemplateHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<PaymentsFilterTemplateHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<PaymentsFilterTemplateHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PaymentsFilterTemplateHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PaymentsFilterTemplateHistoryRecordsCreateInput = {
  data?: Maybe<PaymentsFilterTemplateHistoryRecordCreateInput>;
};

export type PaymentsFilterTemplateHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PaymentsFilterTemplateHistoryRecordUpdateInput>;
};

export type PaymentsFilterTemplateUpdateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<OrganizationEmployeeRelateToOneInput>;
  fields?: Maybe<PaymentsFilterInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type PaymentsFilterTemplateWhereInput = {
  AND?: Maybe<Array<Maybe<PaymentsFilterTemplateWhereInput>>>;
  OR?: Maybe<Array<Maybe<PaymentsFilterTemplateWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee?: Maybe<OrganizationEmployeeWhereInput>;
  employee_is_null?: Maybe<Scalars['Boolean']>;
  fields?: Maybe<PaymentsFilterInput>;
  fields_not?: Maybe<PaymentsFilterInput>;
  fields_in?: Maybe<Array<Maybe<PaymentsFilterInput>>>;
  fields_not_in?: Maybe<Array<Maybe<PaymentsFilterInput>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type PaymentsFilterTemplateWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PaymentsFilterTemplatesCreateInput = {
  data?: Maybe<PaymentsFilterTemplateCreateInput>;
};

export type PaymentsFilterTemplatesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PaymentsFilterTemplateUpdateInput>;
};

export type PaymentsSumOutput = {
  __typename?: 'PaymentsSumOutput';
  sum: Scalars['String'];
};

export type PaymentsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PaymentUpdateInput>;
};

export type PredictTicketClassificationInput = {
  details: Scalars['String'];
};

export type PredictTransactionClassificationInput = {
  purpose: Scalars['String'];
  isOutcome: Scalars['Boolean'];
};

export type PredictTransactionClassificationOutput = {
  __typename?: 'PredictTransactionClassificationOutput';
  id: Scalars['ID'];
  name: Scalars['String'];
  isOutcome: Scalars['Boolean'];
  category: Scalars['ID'];
};

export type PropertiesCreateInput = {
  data?: Maybe<PropertyCreateInput>;
};

export type PropertiesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PropertyUpdateInput>;
};

/**  Common property. The property is divided into separate `unit` parts, each of which can be owned by an independent owner. Community farm, residential buildings, or a cottage settlement  */
export type Property = {
  __typename?: 'Property';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the Property List config, or
   *  2. As an alias to the field set on 'labelField' in the Property List config, or
   *  3. As an alias to a 'name' field on the Property List (if one exists), or
   *  4. As an alias to the 'id' field on the Property List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Client understandable Property name. A well-known property name for the client  */
  name?: Maybe<Scalars['String']>;
  /**  Common property type  */
  type?: Maybe<PropertyTypeType>;
  /**  Property map/schema  */
  map?: Maybe<BuildingMap>;
  /**  A number of parts in the property. The number of flats for property.type = house. The number of garden houses for property.type = village.  */
  unitsCount?: Maybe<Scalars['Int']>;
  /**  A number of non-residential units. Number of parking places for unit.unitType = parking, apartment, commercial & warehouse  */
  uninhabitedUnitsCount?: Maybe<Scalars['Int']>;
  /**  Counter for closed tickets  */
  ticketsClosed?: Maybe<Scalars['String']>;
  /**  Counter for deferred tickets  */
  ticketsDeferred?: Maybe<Scalars['String']>;
  /**  Counter for not closed tickets  */
  ticketsInWork?: Maybe<Scalars['String']>;
  /**  Whether or not this organization can manage this property. Usually set by support. Defaults to False. Field is dropped to false if address is updated  */
  isApproved?: Maybe<Scalars['Boolean']>;
  /**  Year of the property was built  */
  yearOfConstruction?: Maybe<Scalars['String']>;
  /**  Property area in square meters  */
  area?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  /**  Normalized address  */
  address?: Maybe<Scalars['String']>;
  /**  The unique key of the address  */
  addressKey?: Maybe<Scalars['String']>;
  /**  Property address components  */
  addressMeta?: Maybe<AddressMetaField>;
  /**  The origins of the address (some strings which may looks like real address or some id)  */
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type PropertyCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<PropertyTypeType>;
  map?: Maybe<Scalars['JSON']>;
  unitsCount?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount?: Maybe<Scalars['Int']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  yearOfConstruction?: Maybe<Scalars['String']>;
  area?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type PropertyHistoryRecord = {
  __typename?: 'PropertyHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the PropertyHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the PropertyHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the PropertyHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the PropertyHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['JSON']>;
  unitsCount?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount?: Maybe<Scalars['Int']>;
  ticketsClosed?: Maybe<Scalars['JSON']>;
  ticketsDeferred?: Maybe<Scalars['JSON']>;
  ticketsInWork?: Maybe<Scalars['JSON']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  yearOfConstruction?: Maybe<Scalars['String']>;
  area?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PropertyHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['JSON']>;
  unitsCount?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount?: Maybe<Scalars['Int']>;
  ticketsClosed?: Maybe<Scalars['JSON']>;
  ticketsDeferred?: Maybe<Scalars['JSON']>;
  ticketsInWork?: Maybe<Scalars['JSON']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  yearOfConstruction?: Maybe<Scalars['String']>;
  area?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum PropertyHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type PropertyHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['JSON']>;
  unitsCount?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount?: Maybe<Scalars['Int']>;
  ticketsClosed?: Maybe<Scalars['JSON']>;
  ticketsDeferred?: Maybe<Scalars['JSON']>;
  ticketsInWork?: Maybe<Scalars['JSON']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  yearOfConstruction?: Maybe<Scalars['String']>;
  area?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PropertyHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<PropertyHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<PropertyHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  map?: Maybe<Scalars['JSON']>;
  map_not?: Maybe<Scalars['JSON']>;
  map_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  map_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  unitsCount?: Maybe<Scalars['Int']>;
  unitsCount_not?: Maybe<Scalars['Int']>;
  unitsCount_lt?: Maybe<Scalars['Int']>;
  unitsCount_lte?: Maybe<Scalars['Int']>;
  unitsCount_gt?: Maybe<Scalars['Int']>;
  unitsCount_gte?: Maybe<Scalars['Int']>;
  unitsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  unitsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  uninhabitedUnitsCount?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_not?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_lt?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_lte?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_gt?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_gte?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  uninhabitedUnitsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ticketsClosed?: Maybe<Scalars['JSON']>;
  ticketsClosed_not?: Maybe<Scalars['JSON']>;
  ticketsClosed_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  ticketsClosed_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  ticketsDeferred?: Maybe<Scalars['JSON']>;
  ticketsDeferred_not?: Maybe<Scalars['JSON']>;
  ticketsDeferred_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  ticketsDeferred_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  ticketsInWork?: Maybe<Scalars['JSON']>;
  ticketsInWork_not?: Maybe<Scalars['JSON']>;
  ticketsInWork_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  ticketsInWork_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  isApproved?: Maybe<Scalars['Boolean']>;
  isApproved_not?: Maybe<Scalars['Boolean']>;
  yearOfConstruction?: Maybe<Scalars['String']>;
  yearOfConstruction_not?: Maybe<Scalars['String']>;
  yearOfConstruction_lt?: Maybe<Scalars['String']>;
  yearOfConstruction_lte?: Maybe<Scalars['String']>;
  yearOfConstruction_gt?: Maybe<Scalars['String']>;
  yearOfConstruction_gte?: Maybe<Scalars['String']>;
  yearOfConstruction_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  yearOfConstruction_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  area?: Maybe<Scalars['String']>;
  area_not?: Maybe<Scalars['String']>;
  area_lt?: Maybe<Scalars['String']>;
  area_lte?: Maybe<Scalars['String']>;
  area_gt?: Maybe<Scalars['String']>;
  area_gte?: Maybe<Scalars['String']>;
  area_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  area_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  address?: Maybe<Scalars['String']>;
  address_not?: Maybe<Scalars['String']>;
  address_contains?: Maybe<Scalars['String']>;
  address_not_contains?: Maybe<Scalars['String']>;
  address_starts_with?: Maybe<Scalars['String']>;
  address_not_starts_with?: Maybe<Scalars['String']>;
  address_ends_with?: Maybe<Scalars['String']>;
  address_not_ends_with?: Maybe<Scalars['String']>;
  address_i?: Maybe<Scalars['String']>;
  address_not_i?: Maybe<Scalars['String']>;
  address_contains_i?: Maybe<Scalars['String']>;
  address_not_contains_i?: Maybe<Scalars['String']>;
  address_starts_with_i?: Maybe<Scalars['String']>;
  address_not_starts_with_i?: Maybe<Scalars['String']>;
  address_ends_with_i?: Maybe<Scalars['String']>;
  address_not_ends_with_i?: Maybe<Scalars['String']>;
  address_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  address_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey?: Maybe<Scalars['String']>;
  addressKey_not?: Maybe<Scalars['String']>;
  addressKey_contains?: Maybe<Scalars['String']>;
  addressKey_not_contains?: Maybe<Scalars['String']>;
  addressKey_starts_with?: Maybe<Scalars['String']>;
  addressKey_not_starts_with?: Maybe<Scalars['String']>;
  addressKey_ends_with?: Maybe<Scalars['String']>;
  addressKey_not_ends_with?: Maybe<Scalars['String']>;
  addressKey_i?: Maybe<Scalars['String']>;
  addressKey_not_i?: Maybe<Scalars['String']>;
  addressKey_contains_i?: Maybe<Scalars['String']>;
  addressKey_not_contains_i?: Maybe<Scalars['String']>;
  addressKey_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_not_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_not_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressMeta_not?: Maybe<Scalars['JSON']>;
  addressMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources?: Maybe<Scalars['JSON']>;
  addressSources_not?: Maybe<Scalars['JSON']>;
  addressSources_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<PropertyHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<PropertyHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<PropertyHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<PropertyHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PropertyHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PropertyHistoryRecordsCreateInput = {
  data?: Maybe<PropertyHistoryRecordCreateInput>;
};

export type PropertyHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PropertyHistoryRecordUpdateInput>;
};

export type PropertyMap = BuildingMap | VillageMap;

export type PropertyRelateToOneInput = {
  create?: Maybe<PropertyCreateInput>;
  connect?: Maybe<PropertyWhereUniqueInput>;
  disconnect?: Maybe<PropertyWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

/**  A set of properties that limits the visibility of the organization's objects to the specified employees  */
export type PropertyScope = {
  __typename?: 'PropertyScope';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the PropertyScope List config, or
   *  2. As an alias to the field set on 'labelField' in the PropertyScope List config, or
   *  3. As an alias to a 'name' field on the PropertyScope List (if one exists), or
   *  4. As an alias to the 'id' field on the PropertyScope List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  The name of the zone that limits the visibility of employees by properties  */
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  True if PropertyScope includes all properties in organization  */
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  /**  True if PropertyScope includes all employees in organization  */
  hasAllEmployees?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type PropertyScopeCreateInput = {
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  hasAllEmployees?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type PropertyScopeHistoryRecord = {
  __typename?: 'PropertyScopeHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the PropertyScopeHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the PropertyScopeHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the PropertyScopeHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the PropertyScopeHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  hasAllEmployees?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyScopeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PropertyScopeHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  hasAllEmployees?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyScopeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum PropertyScopeHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type PropertyScopeHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  hasAllEmployees?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyScopeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PropertyScopeHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<PropertyScopeHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<PropertyScopeHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  hasAllProperties_not?: Maybe<Scalars['Boolean']>;
  hasAllEmployees?: Maybe<Scalars['Boolean']>;
  hasAllEmployees_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<PropertyScopeHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<PropertyScopeHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<PropertyScopeHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<PropertyScopeHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PropertyScopeHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PropertyScopeHistoryRecordsCreateInput = {
  data?: Maybe<PropertyScopeHistoryRecordCreateInput>;
};

export type PropertyScopeHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopeHistoryRecordUpdateInput>;
};

/**  Many-to-many relationship between PropertyScope and OrganizationEmployee  */
export type PropertyScopeOrganizationEmployee = {
  __typename?: 'PropertyScopeOrganizationEmployee';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the PropertyScopeOrganizationEmployee List config, or
   *  2. As an alias to the field set on 'labelField' in the PropertyScopeOrganizationEmployee List config, or
   *  3. As an alias to a 'name' field on the PropertyScopeOrganizationEmployee List (if one exists), or
   *  4. As an alias to the 'id' field on the PropertyScopeOrganizationEmployee List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Property scope which has an employee  */
  propertyScope?: Maybe<PropertyScope>;
  /**  An employee who is in the property scope  */
  employee?: Maybe<OrganizationEmployee>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type PropertyScopeOrganizationEmployeeCreateInput = {
  propertyScope?: Maybe<PropertyScopeRelateToOneInput>;
  employee?: Maybe<OrganizationEmployeeRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type PropertyScopeOrganizationEmployeeHistoryRecord = {
  __typename?: 'PropertyScopeOrganizationEmployeeHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the PropertyScopeOrganizationEmployeeHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the PropertyScopeOrganizationEmployeeHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the PropertyScopeOrganizationEmployeeHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the PropertyScopeOrganizationEmployeeHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  propertyScope?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PropertyScopeOrganizationEmployeeHistoryRecordCreateInput = {
  propertyScope?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum PropertyScopeOrganizationEmployeeHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type PropertyScopeOrganizationEmployeeHistoryRecordUpdateInput = {
  propertyScope?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PropertyScopeOrganizationEmployeeHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeHistoryRecordWhereInput>>>;
  propertyScope?: Maybe<Scalars['String']>;
  propertyScope_not?: Maybe<Scalars['String']>;
  propertyScope_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyScope_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee?: Maybe<Scalars['String']>;
  employee_not?: Maybe<Scalars['String']>;
  employee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PropertyScopeOrganizationEmployeeHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PropertyScopeOrganizationEmployeeHistoryRecordsCreateInput = {
  data?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordCreateInput>;
};

export type PropertyScopeOrganizationEmployeeHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordUpdateInput>;
};

export type PropertyScopeOrganizationEmployeeUpdateInput = {
  propertyScope?: Maybe<PropertyScopeRelateToOneInput>;
  employee?: Maybe<OrganizationEmployeeRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type PropertyScopeOrganizationEmployeeWhereInput = {
  AND?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeWhereInput>>>;
  OR?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeWhereInput>>>;
  propertyScope?: Maybe<PropertyScopeWhereInput>;
  propertyScope_is_null?: Maybe<Scalars['Boolean']>;
  employee?: Maybe<OrganizationEmployeeWhereInput>;
  employee_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type PropertyScopeOrganizationEmployeeWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PropertyScopeOrganizationEmployeesCreateInput = {
  data?: Maybe<PropertyScopeOrganizationEmployeeCreateInput>;
};

export type PropertyScopeOrganizationEmployeesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopeOrganizationEmployeeUpdateInput>;
};

export type PropertyScopePropertiesCreateInput = {
  data?: Maybe<PropertyScopePropertyCreateInput>;
};

export type PropertyScopePropertiesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopePropertyUpdateInput>;
};

/**  Many-to-many relationship between PropertyScope and Property  */
export type PropertyScopeProperty = {
  __typename?: 'PropertyScopeProperty';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the PropertyScopeProperty List config, or
   *  2. As an alias to the field set on 'labelField' in the PropertyScopeProperty List config, or
   *  3. As an alias to a 'name' field on the PropertyScopeProperty List (if one exists), or
   *  4. As an alias to the 'id' field on the PropertyScopeProperty List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Property scope which has a property  */
  propertyScope?: Maybe<PropertyScope>;
  /**  A property which is in the property scope  */
  property?: Maybe<Property>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type PropertyScopePropertyCreateInput = {
  propertyScope?: Maybe<PropertyScopeRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type PropertyScopePropertyHistoryRecord = {
  __typename?: 'PropertyScopePropertyHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the PropertyScopePropertyHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the PropertyScopePropertyHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the PropertyScopePropertyHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the PropertyScopePropertyHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  propertyScope?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyScopePropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PropertyScopePropertyHistoryRecordCreateInput = {
  propertyScope?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyScopePropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum PropertyScopePropertyHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type PropertyScopePropertyHistoryRecordUpdateInput = {
  propertyScope?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<PropertyScopePropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type PropertyScopePropertyHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<PropertyScopePropertyHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<PropertyScopePropertyHistoryRecordWhereInput>>>;
  propertyScope?: Maybe<Scalars['String']>;
  propertyScope_not?: Maybe<Scalars['String']>;
  propertyScope_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyScope_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<PropertyScopePropertyHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<PropertyScopePropertyHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<PropertyScopePropertyHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<PropertyScopePropertyHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PropertyScopePropertyHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PropertyScopePropertyHistoryRecordsCreateInput = {
  data?: Maybe<PropertyScopePropertyHistoryRecordCreateInput>;
};

export type PropertyScopePropertyHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopePropertyHistoryRecordUpdateInput>;
};

export type PropertyScopePropertyUpdateInput = {
  propertyScope?: Maybe<PropertyScopeRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type PropertyScopePropertyWhereInput = {
  AND?: Maybe<Array<Maybe<PropertyScopePropertyWhereInput>>>;
  OR?: Maybe<Array<Maybe<PropertyScopePropertyWhereInput>>>;
  propertyScope?: Maybe<PropertyScopeWhereInput>;
  propertyScope_is_null?: Maybe<Scalars['Boolean']>;
  property?: Maybe<PropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type PropertyScopePropertyWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PropertyScopeRelateToOneInput = {
  create?: Maybe<PropertyScopeCreateInput>;
  connect?: Maybe<PropertyScopeWhereUniqueInput>;
  disconnect?: Maybe<PropertyScopeWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type PropertyScopeUpdateInput = {
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  hasAllEmployees?: Maybe<Scalars['Boolean']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type PropertyScopeWhereInput = {
  AND?: Maybe<Array<Maybe<PropertyScopeWhereInput>>>;
  OR?: Maybe<Array<Maybe<PropertyScopeWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  hasAllProperties?: Maybe<Scalars['Boolean']>;
  hasAllProperties_not?: Maybe<Scalars['Boolean']>;
  hasAllEmployees?: Maybe<Scalars['Boolean']>;
  hasAllEmployees_not?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type PropertyScopeWhereUniqueInput = {
  id: Scalars['ID'];
};

export type PropertyScopesCreateInput = {
  data?: Maybe<PropertyScopeCreateInput>;
};

export type PropertyScopesInput = {
  property: PropertyWhereUniqueInput;
  units?: Maybe<Array<Maybe<PropertyUnitInput>>>;
  accountNumbers?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PropertyScopesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<PropertyScopeUpdateInput>;
};

export enum PropertyTypeType {
  Building = 'building',
  Village = 'village'
}

export type PropertyUnitInput = {
  unitType: Scalars['String'];
  unitName: Scalars['String'];
};

export type PropertyUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<PropertyTypeType>;
  map?: Maybe<Scalars['JSON']>;
  unitsCount?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount?: Maybe<Scalars['Int']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  yearOfConstruction?: Maybe<Scalars['String']>;
  area?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type PropertyWhereInput = {
  AND?: Maybe<Array<Maybe<PropertyWhereInput>>>;
  OR?: Maybe<Array<Maybe<PropertyWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<PropertyTypeType>;
  type_not?: Maybe<PropertyTypeType>;
  type_in?: Maybe<Array<Maybe<PropertyTypeType>>>;
  type_not_in?: Maybe<Array<Maybe<PropertyTypeType>>>;
  map?: Maybe<Scalars['JSON']>;
  map_not?: Maybe<Scalars['JSON']>;
  map_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  map_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  unitsCount?: Maybe<Scalars['Int']>;
  unitsCount_not?: Maybe<Scalars['Int']>;
  unitsCount_lt?: Maybe<Scalars['Int']>;
  unitsCount_lte?: Maybe<Scalars['Int']>;
  unitsCount_gt?: Maybe<Scalars['Int']>;
  unitsCount_gte?: Maybe<Scalars['Int']>;
  unitsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  unitsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  uninhabitedUnitsCount?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_not?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_lt?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_lte?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_gt?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_gte?: Maybe<Scalars['Int']>;
  uninhabitedUnitsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  uninhabitedUnitsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  isApproved?: Maybe<Scalars['Boolean']>;
  isApproved_not?: Maybe<Scalars['Boolean']>;
  yearOfConstruction?: Maybe<Scalars['String']>;
  yearOfConstruction_not?: Maybe<Scalars['String']>;
  yearOfConstruction_lt?: Maybe<Scalars['String']>;
  yearOfConstruction_lte?: Maybe<Scalars['String']>;
  yearOfConstruction_gt?: Maybe<Scalars['String']>;
  yearOfConstruction_gte?: Maybe<Scalars['String']>;
  yearOfConstruction_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  yearOfConstruction_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  area?: Maybe<Scalars['String']>;
  area_not?: Maybe<Scalars['String']>;
  area_lt?: Maybe<Scalars['String']>;
  area_lte?: Maybe<Scalars['String']>;
  area_gt?: Maybe<Scalars['String']>;
  area_gte?: Maybe<Scalars['String']>;
  area_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  area_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  address?: Maybe<Scalars['String']>;
  address_not?: Maybe<Scalars['String']>;
  address_contains?: Maybe<Scalars['String']>;
  address_not_contains?: Maybe<Scalars['String']>;
  address_starts_with?: Maybe<Scalars['String']>;
  address_not_starts_with?: Maybe<Scalars['String']>;
  address_ends_with?: Maybe<Scalars['String']>;
  address_not_ends_with?: Maybe<Scalars['String']>;
  address_i?: Maybe<Scalars['String']>;
  address_not_i?: Maybe<Scalars['String']>;
  address_contains_i?: Maybe<Scalars['String']>;
  address_not_contains_i?: Maybe<Scalars['String']>;
  address_starts_with_i?: Maybe<Scalars['String']>;
  address_not_starts_with_i?: Maybe<Scalars['String']>;
  address_ends_with_i?: Maybe<Scalars['String']>;
  address_not_ends_with_i?: Maybe<Scalars['String']>;
  address_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  address_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey?: Maybe<Scalars['String']>;
  addressKey_not?: Maybe<Scalars['String']>;
  addressKey_contains?: Maybe<Scalars['String']>;
  addressKey_not_contains?: Maybe<Scalars['String']>;
  addressKey_starts_with?: Maybe<Scalars['String']>;
  addressKey_not_starts_with?: Maybe<Scalars['String']>;
  addressKey_ends_with?: Maybe<Scalars['String']>;
  addressKey_not_ends_with?: Maybe<Scalars['String']>;
  addressKey_i?: Maybe<Scalars['String']>;
  addressKey_not_i?: Maybe<Scalars['String']>;
  addressKey_contains_i?: Maybe<Scalars['String']>;
  addressKey_not_contains_i?: Maybe<Scalars['String']>;
  addressKey_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_not_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_not_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressMeta_not?: Maybe<Scalars['JSON']>;
  addressMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources?: Maybe<Scalars['JSON']>;
  addressSources_not?: Maybe<Scalars['JSON']>;
  addressSources_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type PropertyWhereUniqueInput = {
  id: Scalars['ID'];
};

export enum PushTransportType {
  Firebase = 'firebase',
  Apple = 'apple',
  Huawei = 'huawei'
}

export enum PushType {
  Default = 'default',
  SilentData = 'silent_data'
}

export enum QualityControlAdditionalOptionsType {
  LowQuality = 'lowQuality',
  HighQuality = 'highQuality',
  Slowly = 'slowly',
  Quickly = 'quickly'
}

export type Query = {
  __typename?: 'Query';
  /**  Search for all UserHistoryRecord items which match the where clause.  */
  allUserHistoryRecords?: Maybe<Array<Maybe<UserHistoryRecord>>>;
  /**  Search for the UserHistoryRecord item with the matching ID.  */
  UserHistoryRecord?: Maybe<UserHistoryRecord>;
  /**  Perform a meta-query on all UserHistoryRecord items which match the where clause.  */
  _allUserHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the UserHistoryRecord list.  */
  _UserHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all User items which match the where clause.  */
  allUsers?: Maybe<Array<Maybe<User>>>;
  /**  Search for the User item with the matching ID.  */
  User?: Maybe<User>;
  /**  Perform a meta-query on all User items which match the where clause.  */
  _allUsersMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the User list.  */
  _UsersMeta?: Maybe<_ListMeta>;
  /**  Search for all ForgotPasswordActionHistoryRecord items which match the where clause.  */
  allForgotPasswordActionHistoryRecords?: Maybe<Array<Maybe<ForgotPasswordActionHistoryRecord>>>;
  /**  Search for the ForgotPasswordActionHistoryRecord item with the matching ID.  */
  ForgotPasswordActionHistoryRecord?: Maybe<ForgotPasswordActionHistoryRecord>;
  /**  Perform a meta-query on all ForgotPasswordActionHistoryRecord items which match the where clause.  */
  _allForgotPasswordActionHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ForgotPasswordActionHistoryRecord list.  */
  _ForgotPasswordActionHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all ForgotPasswordAction items which match the where clause.  */
  allForgotPasswordActions?: Maybe<Array<Maybe<ForgotPasswordAction>>>;
  /**  Search for the ForgotPasswordAction item with the matching ID.  */
  ForgotPasswordAction?: Maybe<ForgotPasswordAction>;
  /**  Perform a meta-query on all ForgotPasswordAction items which match the where clause.  */
  _allForgotPasswordActionsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ForgotPasswordAction list.  */
  _ForgotPasswordActionsMeta?: Maybe<_ListMeta>;
  /**  Search for all ConfirmPhoneActionHistoryRecord items which match the where clause.  */
  allConfirmPhoneActionHistoryRecords?: Maybe<Array<Maybe<ConfirmPhoneActionHistoryRecord>>>;
  /**  Search for the ConfirmPhoneActionHistoryRecord item with the matching ID.  */
  ConfirmPhoneActionHistoryRecord?: Maybe<ConfirmPhoneActionHistoryRecord>;
  /**  Perform a meta-query on all ConfirmPhoneActionHistoryRecord items which match the where clause.  */
  _allConfirmPhoneActionHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ConfirmPhoneActionHistoryRecord list.  */
  _ConfirmPhoneActionHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all ConfirmPhoneAction items which match the where clause.  */
  allConfirmPhoneActions?: Maybe<Array<Maybe<ConfirmPhoneAction>>>;
  /**  Search for the ConfirmPhoneAction item with the matching ID.  */
  ConfirmPhoneAction?: Maybe<ConfirmPhoneAction>;
  /**  Perform a meta-query on all ConfirmPhoneAction items which match the where clause.  */
  _allConfirmPhoneActionsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ConfirmPhoneAction list.  */
  _ConfirmPhoneActionsMeta?: Maybe<_ListMeta>;
  /**  Search for all OidcClientHistoryRecord items which match the where clause.  */
  allOidcClientHistoryRecords?: Maybe<Array<Maybe<OidcClientHistoryRecord>>>;
  /**  Search for the OidcClientHistoryRecord item with the matching ID.  */
  OidcClientHistoryRecord?: Maybe<OidcClientHistoryRecord>;
  /**  Perform a meta-query on all OidcClientHistoryRecord items which match the where clause.  */
  _allOidcClientHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OidcClientHistoryRecord list.  */
  _OidcClientHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all OidcClient items which match the where clause.  */
  allOidcClients?: Maybe<Array<Maybe<OidcClient>>>;
  /**  Search for the OidcClient item with the matching ID.  */
  OidcClient?: Maybe<OidcClient>;
  /**  Perform a meta-query on all OidcClient items which match the where clause.  */
  _allOidcClientsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OidcClient list.  */
  _OidcClientsMeta?: Maybe<_ListMeta>;
  /**  Search for all UserExternalIdentityHistoryRecord items which match the where clause.  */
  allUserExternalIdentityHistoryRecords?: Maybe<Array<Maybe<UserExternalIdentityHistoryRecord>>>;
  /**  Search for the UserExternalIdentityHistoryRecord item with the matching ID.  */
  UserExternalIdentityHistoryRecord?: Maybe<UserExternalIdentityHistoryRecord>;
  /**  Perform a meta-query on all UserExternalIdentityHistoryRecord items which match the where clause.  */
  _allUserExternalIdentityHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the UserExternalIdentityHistoryRecord list.  */
  _UserExternalIdentityHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all UserExternalIdentity items which match the where clause.  */
  allUserExternalIdentities?: Maybe<Array<Maybe<UserExternalIdentity>>>;
  /**  Search for the UserExternalIdentity item with the matching ID.  */
  UserExternalIdentity?: Maybe<UserExternalIdentity>;
  /**  Perform a meta-query on all UserExternalIdentity items which match the where clause.  */
  _allUserExternalIdentitiesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the UserExternalIdentity list.  */
  _UserExternalIdentitiesMeta?: Maybe<_ListMeta>;
  /**  Search for all ExternalTokenAccessRightHistoryRecord items which match the where clause.  */
  allExternalTokenAccessRightHistoryRecords?: Maybe<Array<Maybe<ExternalTokenAccessRightHistoryRecord>>>;
  /**  Search for the ExternalTokenAccessRightHistoryRecord item with the matching ID.  */
  ExternalTokenAccessRightHistoryRecord?: Maybe<ExternalTokenAccessRightHistoryRecord>;
  /**  Perform a meta-query on all ExternalTokenAccessRightHistoryRecord items which match the where clause.  */
  _allExternalTokenAccessRightHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ExternalTokenAccessRightHistoryRecord list.  */
  _ExternalTokenAccessRightHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all ExternalTokenAccessRight items which match the where clause.  */
  allExternalTokenAccessRights?: Maybe<Array<Maybe<ExternalTokenAccessRight>>>;
  /**  Search for the ExternalTokenAccessRight item with the matching ID.  */
  ExternalTokenAccessRight?: Maybe<ExternalTokenAccessRight>;
  /**  Perform a meta-query on all ExternalTokenAccessRight items which match the where clause.  */
  _allExternalTokenAccessRightsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ExternalTokenAccessRight list.  */
  _ExternalTokenAccessRightsMeta?: Maybe<_ListMeta>;
  /**  Search for all OrganizationHistoryRecord items which match the where clause.  */
  allOrganizationHistoryRecords?: Maybe<Array<Maybe<OrganizationHistoryRecord>>>;
  /**  Search for the OrganizationHistoryRecord item with the matching ID.  */
  OrganizationHistoryRecord?: Maybe<OrganizationHistoryRecord>;
  /**  Perform a meta-query on all OrganizationHistoryRecord items which match the where clause.  */
  _allOrganizationHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OrganizationHistoryRecord list.  */
  _OrganizationHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all Organization items which match the where clause.  */
  allOrganizations?: Maybe<Array<Maybe<Organization>>>;
  /**  Search for the Organization item with the matching ID.  */
  Organization?: Maybe<Organization>;
  /**  Perform a meta-query on all Organization items which match the where clause.  */
  _allOrganizationsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the Organization list.  */
  _OrganizationsMeta?: Maybe<_ListMeta>;
  /**  Search for all OrganizationEmployeeHistoryRecord items which match the where clause.  */
  allOrganizationEmployeeHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeHistoryRecord>>>;
  /**  Search for the OrganizationEmployeeHistoryRecord item with the matching ID.  */
  OrganizationEmployeeHistoryRecord?: Maybe<OrganizationEmployeeHistoryRecord>;
  /**  Perform a meta-query on all OrganizationEmployeeHistoryRecord items which match the where clause.  */
  _allOrganizationEmployeeHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OrganizationEmployeeHistoryRecord list.  */
  _OrganizationEmployeeHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all OrganizationEmployee items which match the where clause.  */
  allOrganizationEmployees?: Maybe<Array<Maybe<OrganizationEmployee>>>;
  /**  Search for the OrganizationEmployee item with the matching ID.  */
  OrganizationEmployee?: Maybe<OrganizationEmployee>;
  /**  Perform a meta-query on all OrganizationEmployee items which match the where clause.  */
  _allOrganizationEmployeesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OrganizationEmployee list.  */
  _OrganizationEmployeesMeta?: Maybe<_ListMeta>;
  /**  Search for all OrganizationEmployeeRoleHistoryRecord items which match the where clause.  */
  allOrganizationEmployeeRoleHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeRoleHistoryRecord>>>;
  /**  Search for the OrganizationEmployeeRoleHistoryRecord item with the matching ID.  */
  OrganizationEmployeeRoleHistoryRecord?: Maybe<OrganizationEmployeeRoleHistoryRecord>;
  /**  Perform a meta-query on all OrganizationEmployeeRoleHistoryRecord items which match the where clause.  */
  _allOrganizationEmployeeRoleHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OrganizationEmployeeRoleHistoryRecord list.  */
  _OrganizationEmployeeRoleHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all OrganizationEmployeeRole items which match the where clause.  */
  allOrganizationEmployeeRoles?: Maybe<Array<Maybe<OrganizationEmployeeRole>>>;
  /**  Search for the OrganizationEmployeeRole item with the matching ID.  */
  OrganizationEmployeeRole?: Maybe<OrganizationEmployeeRole>;
  /**  Perform a meta-query on all OrganizationEmployeeRole items which match the where clause.  */
  _allOrganizationEmployeeRolesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OrganizationEmployeeRole list.  */
  _OrganizationEmployeeRolesMeta?: Maybe<_ListMeta>;
  /**  Search for all OrganizationLinkHistoryRecord items which match the where clause.  */
  allOrganizationLinkHistoryRecords?: Maybe<Array<Maybe<OrganizationLinkHistoryRecord>>>;
  /**  Search for the OrganizationLinkHistoryRecord item with the matching ID.  */
  OrganizationLinkHistoryRecord?: Maybe<OrganizationLinkHistoryRecord>;
  /**  Perform a meta-query on all OrganizationLinkHistoryRecord items which match the where clause.  */
  _allOrganizationLinkHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OrganizationLinkHistoryRecord list.  */
  _OrganizationLinkHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all OrganizationLink items which match the where clause.  */
  allOrganizationLinks?: Maybe<Array<Maybe<OrganizationLink>>>;
  /**  Search for the OrganizationLink item with the matching ID.  */
  OrganizationLink?: Maybe<OrganizationLink>;
  /**  Perform a meta-query on all OrganizationLink items which match the where clause.  */
  _allOrganizationLinksMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OrganizationLink list.  */
  _OrganizationLinksMeta?: Maybe<_ListMeta>;
  /**  Search for all OrganizationEmployeeSpecializationHistoryRecord items which match the where clause.  */
  allOrganizationEmployeeSpecializationHistoryRecords?: Maybe<Array<Maybe<OrganizationEmployeeSpecializationHistoryRecord>>>;
  /**  Search for the OrganizationEmployeeSpecializationHistoryRecord item with the matching ID.  */
  OrganizationEmployeeSpecializationHistoryRecord?: Maybe<OrganizationEmployeeSpecializationHistoryRecord>;
  /**  Perform a meta-query on all OrganizationEmployeeSpecializationHistoryRecord items which match the where clause.  */
  _allOrganizationEmployeeSpecializationHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OrganizationEmployeeSpecializationHistoryRecord list.  */
  _OrganizationEmployeeSpecializationHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all OrganizationEmployeeSpecialization items which match the where clause.  */
  allOrganizationEmployeeSpecializations?: Maybe<Array<Maybe<OrganizationEmployeeSpecialization>>>;
  /**  Search for the OrganizationEmployeeSpecialization item with the matching ID.  */
  OrganizationEmployeeSpecialization?: Maybe<OrganizationEmployeeSpecialization>;
  /**  Perform a meta-query on all OrganizationEmployeeSpecialization items which match the where clause.  */
  _allOrganizationEmployeeSpecializationsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OrganizationEmployeeSpecialization list.  */
  _OrganizationEmployeeSpecializationsMeta?: Maybe<_ListMeta>;
  /**  Search for all PropertyHistoryRecord items which match the where clause.  */
  allPropertyHistoryRecords?: Maybe<Array<Maybe<PropertyHistoryRecord>>>;
  /**  Search for the PropertyHistoryRecord item with the matching ID.  */
  PropertyHistoryRecord?: Maybe<PropertyHistoryRecord>;
  /**  Perform a meta-query on all PropertyHistoryRecord items which match the where clause.  */
  _allPropertyHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the PropertyHistoryRecord list.  */
  _PropertyHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all Property items which match the where clause.  */
  allProperties?: Maybe<Array<Maybe<Property>>>;
  /**  Search for the Property item with the matching ID.  */
  Property?: Maybe<Property>;
  /**  Perform a meta-query on all Property items which match the where clause.  */
  _allPropertiesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the Property list.  */
  _PropertiesMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingIntegrationHistoryRecord items which match the where clause.  */
  allBillingIntegrationHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationHistoryRecord>>>;
  /**  Search for the BillingIntegrationHistoryRecord item with the matching ID.  */
  BillingIntegrationHistoryRecord?: Maybe<BillingIntegrationHistoryRecord>;
  /**  Perform a meta-query on all BillingIntegrationHistoryRecord items which match the where clause.  */
  _allBillingIntegrationHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingIntegrationHistoryRecord list.  */
  _BillingIntegrationHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingIntegration items which match the where clause.  */
  allBillingIntegrations?: Maybe<Array<Maybe<BillingIntegration>>>;
  /**  Search for the BillingIntegration item with the matching ID.  */
  BillingIntegration?: Maybe<BillingIntegration>;
  /**  Perform a meta-query on all BillingIntegration items which match the where clause.  */
  _allBillingIntegrationsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingIntegration list.  */
  _BillingIntegrationsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingIntegrationAccessRightHistoryRecord items which match the where clause.  */
  allBillingIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationAccessRightHistoryRecord>>>;
  /**  Search for the BillingIntegrationAccessRightHistoryRecord item with the matching ID.  */
  BillingIntegrationAccessRightHistoryRecord?: Maybe<BillingIntegrationAccessRightHistoryRecord>;
  /**  Perform a meta-query on all BillingIntegrationAccessRightHistoryRecord items which match the where clause.  */
  _allBillingIntegrationAccessRightHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingIntegrationAccessRightHistoryRecord list.  */
  _BillingIntegrationAccessRightHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingIntegrationAccessRight items which match the where clause.  */
  allBillingIntegrationAccessRights?: Maybe<Array<Maybe<BillingIntegrationAccessRight>>>;
  /**  Search for the BillingIntegrationAccessRight item with the matching ID.  */
  BillingIntegrationAccessRight?: Maybe<BillingIntegrationAccessRight>;
  /**  Perform a meta-query on all BillingIntegrationAccessRight items which match the where clause.  */
  _allBillingIntegrationAccessRightsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingIntegrationAccessRight list.  */
  _BillingIntegrationAccessRightsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingIntegrationOrganizationContextHistoryRecord items which match the where clause.  */
  allBillingIntegrationOrganizationContextHistoryRecords?: Maybe<Array<Maybe<BillingIntegrationOrganizationContextHistoryRecord>>>;
  /**  Search for the BillingIntegrationOrganizationContextHistoryRecord item with the matching ID.  */
  BillingIntegrationOrganizationContextHistoryRecord?: Maybe<BillingIntegrationOrganizationContextHistoryRecord>;
  /**  Perform a meta-query on all BillingIntegrationOrganizationContextHistoryRecord items which match the where clause.  */
  _allBillingIntegrationOrganizationContextHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingIntegrationOrganizationContextHistoryRecord list.  */
  _BillingIntegrationOrganizationContextHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingIntegrationOrganizationContext items which match the where clause.  */
  allBillingIntegrationOrganizationContexts?: Maybe<Array<Maybe<BillingIntegrationOrganizationContext>>>;
  /**  Search for the BillingIntegrationOrganizationContext item with the matching ID.  */
  BillingIntegrationOrganizationContext?: Maybe<BillingIntegrationOrganizationContext>;
  /**  Perform a meta-query on all BillingIntegrationOrganizationContext items which match the where clause.  */
  _allBillingIntegrationOrganizationContextsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingIntegrationOrganizationContext list.  */
  _BillingIntegrationOrganizationContextsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingIntegrationProblem items which match the where clause.  */
  allBillingIntegrationProblems?: Maybe<Array<Maybe<BillingIntegrationProblem>>>;
  /**  Search for the BillingIntegrationProblem item with the matching ID.  */
  BillingIntegrationProblem?: Maybe<BillingIntegrationProblem>;
  /**  Perform a meta-query on all BillingIntegrationProblem items which match the where clause.  */
  _allBillingIntegrationProblemsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingIntegrationProblem list.  */
  _BillingIntegrationProblemsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingPropertyHistoryRecord items which match the where clause.  */
  allBillingPropertyHistoryRecords?: Maybe<Array<Maybe<BillingPropertyHistoryRecord>>>;
  /**  Search for the BillingPropertyHistoryRecord item with the matching ID.  */
  BillingPropertyHistoryRecord?: Maybe<BillingPropertyHistoryRecord>;
  /**  Perform a meta-query on all BillingPropertyHistoryRecord items which match the where clause.  */
  _allBillingPropertyHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingPropertyHistoryRecord list.  */
  _BillingPropertyHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingProperty items which match the where clause.  */
  allBillingProperties?: Maybe<Array<Maybe<BillingProperty>>>;
  /**  Search for the BillingProperty item with the matching ID.  */
  BillingProperty?: Maybe<BillingProperty>;
  /**  Perform a meta-query on all BillingProperty items which match the where clause.  */
  _allBillingPropertiesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingProperty list.  */
  _BillingPropertiesMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingAccountHistoryRecord items which match the where clause.  */
  allBillingAccountHistoryRecords?: Maybe<Array<Maybe<BillingAccountHistoryRecord>>>;
  /**  Search for the BillingAccountHistoryRecord item with the matching ID.  */
  BillingAccountHistoryRecord?: Maybe<BillingAccountHistoryRecord>;
  /**  Perform a meta-query on all BillingAccountHistoryRecord items which match the where clause.  */
  _allBillingAccountHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingAccountHistoryRecord list.  */
  _BillingAccountHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingAccount items which match the where clause.  */
  allBillingAccounts?: Maybe<Array<Maybe<BillingAccount>>>;
  /**  Search for the BillingAccount item with the matching ID.  */
  BillingAccount?: Maybe<BillingAccount>;
  /**  Perform a meta-query on all BillingAccount items which match the where clause.  */
  _allBillingAccountsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingAccount list.  */
  _BillingAccountsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingReceiptHistoryRecord items which match the where clause.  */
  allBillingReceiptHistoryRecords?: Maybe<Array<Maybe<BillingReceiptHistoryRecord>>>;
  /**  Search for the BillingReceiptHistoryRecord item with the matching ID.  */
  BillingReceiptHistoryRecord?: Maybe<BillingReceiptHistoryRecord>;
  /**  Perform a meta-query on all BillingReceiptHistoryRecord items which match the where clause.  */
  _allBillingReceiptHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingReceiptHistoryRecord list.  */
  _BillingReceiptHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingReceipt items which match the where clause.  */
  allBillingReceipts?: Maybe<Array<Maybe<BillingReceipt>>>;
  /**  Search for the BillingReceipt item with the matching ID.  */
  BillingReceipt?: Maybe<BillingReceipt>;
  /**  Perform a meta-query on all BillingReceipt items which match the where clause.  */
  _allBillingReceiptsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingReceipt list.  */
  _BillingReceiptsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingRecipientHistoryRecord items which match the where clause.  */
  allBillingRecipientHistoryRecords?: Maybe<Array<Maybe<BillingRecipientHistoryRecord>>>;
  /**  Search for the BillingRecipientHistoryRecord item with the matching ID.  */
  BillingRecipientHistoryRecord?: Maybe<BillingRecipientHistoryRecord>;
  /**  Perform a meta-query on all BillingRecipientHistoryRecord items which match the where clause.  */
  _allBillingRecipientHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingRecipientHistoryRecord list.  */
  _BillingRecipientHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingRecipient items which match the where clause.  */
  allBillingRecipients?: Maybe<Array<Maybe<BillingRecipient>>>;
  /**  Search for the BillingRecipient item with the matching ID.  */
  BillingRecipient?: Maybe<BillingRecipient>;
  /**  Perform a meta-query on all BillingRecipient items which match the where clause.  */
  _allBillingRecipientsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingRecipient list.  */
  _BillingRecipientsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingCategoryHistoryRecord items which match the where clause.  */
  allBillingCategoryHistoryRecords?: Maybe<Array<Maybe<BillingCategoryHistoryRecord>>>;
  /**  Search for the BillingCategoryHistoryRecord item with the matching ID.  */
  BillingCategoryHistoryRecord?: Maybe<BillingCategoryHistoryRecord>;
  /**  Perform a meta-query on all BillingCategoryHistoryRecord items which match the where clause.  */
  _allBillingCategoryHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingCategoryHistoryRecord list.  */
  _BillingCategoryHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BillingCategory items which match the where clause.  */
  allBillingCategories?: Maybe<Array<Maybe<BillingCategory>>>;
  /**  Search for the BillingCategory item with the matching ID.  */
  BillingCategory?: Maybe<BillingCategory>;
  /**  Perform a meta-query on all BillingCategory items which match the where clause.  */
  _allBillingCategoriesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BillingCategory list.  */
  _BillingCategoriesMeta?: Maybe<_ListMeta>;
  /**  Search for all BankAccountHistoryRecord items which match the where clause.  */
  allBankAccountHistoryRecords?: Maybe<Array<Maybe<BankAccountHistoryRecord>>>;
  /**  Search for the BankAccountHistoryRecord item with the matching ID.  */
  BankAccountHistoryRecord?: Maybe<BankAccountHistoryRecord>;
  /**  Perform a meta-query on all BankAccountHistoryRecord items which match the where clause.  */
  _allBankAccountHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankAccountHistoryRecord list.  */
  _BankAccountHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankAccount items which match the where clause.  */
  allBankAccounts?: Maybe<Array<Maybe<BankAccount>>>;
  /**  Search for the BankAccount item with the matching ID.  */
  BankAccount?: Maybe<BankAccount>;
  /**  Perform a meta-query on all BankAccount items which match the where clause.  */
  _allBankAccountsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankAccount list.  */
  _BankAccountsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankCategoryHistoryRecord items which match the where clause.  */
  allBankCategoryHistoryRecords?: Maybe<Array<Maybe<BankCategoryHistoryRecord>>>;
  /**  Search for the BankCategoryHistoryRecord item with the matching ID.  */
  BankCategoryHistoryRecord?: Maybe<BankCategoryHistoryRecord>;
  /**  Perform a meta-query on all BankCategoryHistoryRecord items which match the where clause.  */
  _allBankCategoryHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankCategoryHistoryRecord list.  */
  _BankCategoryHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankCategory items which match the where clause.  */
  allBankCategories?: Maybe<Array<Maybe<BankCategory>>>;
  /**  Search for the BankCategory item with the matching ID.  */
  BankCategory?: Maybe<BankCategory>;
  /**  Perform a meta-query on all BankCategory items which match the where clause.  */
  _allBankCategoriesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankCategory list.  */
  _BankCategoriesMeta?: Maybe<_ListMeta>;
  /**  Search for all BankCostItemHistoryRecord items which match the where clause.  */
  allBankCostItemHistoryRecords?: Maybe<Array<Maybe<BankCostItemHistoryRecord>>>;
  /**  Search for the BankCostItemHistoryRecord item with the matching ID.  */
  BankCostItemHistoryRecord?: Maybe<BankCostItemHistoryRecord>;
  /**  Perform a meta-query on all BankCostItemHistoryRecord items which match the where clause.  */
  _allBankCostItemHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankCostItemHistoryRecord list.  */
  _BankCostItemHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankCostItem items which match the where clause.  */
  allBankCostItems?: Maybe<Array<Maybe<BankCostItem>>>;
  /**  Search for the BankCostItem item with the matching ID.  */
  BankCostItem?: Maybe<BankCostItem>;
  /**  Perform a meta-query on all BankCostItem items which match the where clause.  */
  _allBankCostItemsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankCostItem list.  */
  _BankCostItemsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankContractorAccountHistoryRecord items which match the where clause.  */
  allBankContractorAccountHistoryRecords?: Maybe<Array<Maybe<BankContractorAccountHistoryRecord>>>;
  /**  Search for the BankContractorAccountHistoryRecord item with the matching ID.  */
  BankContractorAccountHistoryRecord?: Maybe<BankContractorAccountHistoryRecord>;
  /**  Perform a meta-query on all BankContractorAccountHistoryRecord items which match the where clause.  */
  _allBankContractorAccountHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankContractorAccountHistoryRecord list.  */
  _BankContractorAccountHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankContractorAccount items which match the where clause.  */
  allBankContractorAccounts?: Maybe<Array<Maybe<BankContractorAccount>>>;
  /**  Search for the BankContractorAccount item with the matching ID.  */
  BankContractorAccount?: Maybe<BankContractorAccount>;
  /**  Perform a meta-query on all BankContractorAccount items which match the where clause.  */
  _allBankContractorAccountsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankContractorAccount list.  */
  _BankContractorAccountsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankIntegrationHistoryRecord items which match the where clause.  */
  allBankIntegrationHistoryRecords?: Maybe<Array<Maybe<BankIntegrationHistoryRecord>>>;
  /**  Search for the BankIntegrationHistoryRecord item with the matching ID.  */
  BankIntegrationHistoryRecord?: Maybe<BankIntegrationHistoryRecord>;
  /**  Perform a meta-query on all BankIntegrationHistoryRecord items which match the where clause.  */
  _allBankIntegrationHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankIntegrationHistoryRecord list.  */
  _BankIntegrationHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankIntegration items which match the where clause.  */
  allBankIntegrations?: Maybe<Array<Maybe<BankIntegration>>>;
  /**  Search for the BankIntegration item with the matching ID.  */
  BankIntegration?: Maybe<BankIntegration>;
  /**  Perform a meta-query on all BankIntegration items which match the where clause.  */
  _allBankIntegrationsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankIntegration list.  */
  _BankIntegrationsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankIntegrationAccessRightHistoryRecord items which match the where clause.  */
  allBankIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<BankIntegrationAccessRightHistoryRecord>>>;
  /**  Search for the BankIntegrationAccessRightHistoryRecord item with the matching ID.  */
  BankIntegrationAccessRightHistoryRecord?: Maybe<BankIntegrationAccessRightHistoryRecord>;
  /**  Perform a meta-query on all BankIntegrationAccessRightHistoryRecord items which match the where clause.  */
  _allBankIntegrationAccessRightHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankIntegrationAccessRightHistoryRecord list.  */
  _BankIntegrationAccessRightHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankIntegrationAccessRight items which match the where clause.  */
  allBankIntegrationAccessRights?: Maybe<Array<Maybe<BankIntegrationAccessRight>>>;
  /**  Search for the BankIntegrationAccessRight item with the matching ID.  */
  BankIntegrationAccessRight?: Maybe<BankIntegrationAccessRight>;
  /**  Perform a meta-query on all BankIntegrationAccessRight items which match the where clause.  */
  _allBankIntegrationAccessRightsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankIntegrationAccessRight list.  */
  _BankIntegrationAccessRightsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankIntegrationAccountContextHistoryRecord items which match the where clause.  */
  allBankIntegrationAccountContextHistoryRecords?: Maybe<Array<Maybe<BankIntegrationAccountContextHistoryRecord>>>;
  /**  Search for the BankIntegrationAccountContextHistoryRecord item with the matching ID.  */
  BankIntegrationAccountContextHistoryRecord?: Maybe<BankIntegrationAccountContextHistoryRecord>;
  /**  Perform a meta-query on all BankIntegrationAccountContextHistoryRecord items which match the where clause.  */
  _allBankIntegrationAccountContextHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankIntegrationAccountContextHistoryRecord list.  */
  _BankIntegrationAccountContextHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankIntegrationAccountContext items which match the where clause.  */
  allBankIntegrationAccountContexts?: Maybe<Array<Maybe<BankIntegrationAccountContext>>>;
  /**  Search for the BankIntegrationAccountContext item with the matching ID.  */
  BankIntegrationAccountContext?: Maybe<BankIntegrationAccountContext>;
  /**  Perform a meta-query on all BankIntegrationAccountContext items which match the where clause.  */
  _allBankIntegrationAccountContextsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankIntegrationAccountContext list.  */
  _BankIntegrationAccountContextsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankTransactionHistoryRecord items which match the where clause.  */
  allBankTransactionHistoryRecords?: Maybe<Array<Maybe<BankTransactionHistoryRecord>>>;
  /**  Search for the BankTransactionHistoryRecord item with the matching ID.  */
  BankTransactionHistoryRecord?: Maybe<BankTransactionHistoryRecord>;
  /**  Perform a meta-query on all BankTransactionHistoryRecord items which match the where clause.  */
  _allBankTransactionHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankTransactionHistoryRecord list.  */
  _BankTransactionHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankTransaction items which match the where clause.  */
  allBankTransactions?: Maybe<Array<Maybe<BankTransaction>>>;
  /**  Search for the BankTransaction item with the matching ID.  */
  BankTransaction?: Maybe<BankTransaction>;
  /**  Perform a meta-query on all BankTransaction items which match the where clause.  */
  _allBankTransactionsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankTransaction list.  */
  _BankTransactionsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankSyncTaskHistoryRecord items which match the where clause.  */
  allBankSyncTaskHistoryRecords?: Maybe<Array<Maybe<BankSyncTaskHistoryRecord>>>;
  /**  Search for the BankSyncTaskHistoryRecord item with the matching ID.  */
  BankSyncTaskHistoryRecord?: Maybe<BankSyncTaskHistoryRecord>;
  /**  Perform a meta-query on all BankSyncTaskHistoryRecord items which match the where clause.  */
  _allBankSyncTaskHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankSyncTaskHistoryRecord list.  */
  _BankSyncTaskHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankSyncTask items which match the where clause.  */
  allBankSyncTasks?: Maybe<Array<Maybe<BankSyncTask>>>;
  /**  Search for the BankSyncTask item with the matching ID.  */
  BankSyncTask?: Maybe<BankSyncTask>;
  /**  Perform a meta-query on all BankSyncTask items which match the where clause.  */
  _allBankSyncTasksMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankSyncTask list.  */
  _BankSyncTasksMeta?: Maybe<_ListMeta>;
  /**  Search for all BankIntegrationOrganizationContextHistoryRecord items which match the where clause.  */
  allBankIntegrationOrganizationContextHistoryRecords?: Maybe<Array<Maybe<BankIntegrationOrganizationContextHistoryRecord>>>;
  /**  Search for the BankIntegrationOrganizationContextHistoryRecord item with the matching ID.  */
  BankIntegrationOrganizationContextHistoryRecord?: Maybe<BankIntegrationOrganizationContextHistoryRecord>;
  /**  Perform a meta-query on all BankIntegrationOrganizationContextHistoryRecord items which match the where clause.  */
  _allBankIntegrationOrganizationContextHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankIntegrationOrganizationContextHistoryRecord list.  */
  _BankIntegrationOrganizationContextHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankIntegrationOrganizationContext items which match the where clause.  */
  allBankIntegrationOrganizationContexts?: Maybe<Array<Maybe<BankIntegrationOrganizationContext>>>;
  /**  Search for the BankIntegrationOrganizationContext item with the matching ID.  */
  BankIntegrationOrganizationContext?: Maybe<BankIntegrationOrganizationContext>;
  /**  Perform a meta-query on all BankIntegrationOrganizationContext items which match the where clause.  */
  _allBankIntegrationOrganizationContextsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankIntegrationOrganizationContext list.  */
  _BankIntegrationOrganizationContextsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankAccountReportHistoryRecord items which match the where clause.  */
  allBankAccountReportHistoryRecords?: Maybe<Array<Maybe<BankAccountReportHistoryRecord>>>;
  /**  Search for the BankAccountReportHistoryRecord item with the matching ID.  */
  BankAccountReportHistoryRecord?: Maybe<BankAccountReportHistoryRecord>;
  /**  Perform a meta-query on all BankAccountReportHistoryRecord items which match the where clause.  */
  _allBankAccountReportHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankAccountReportHistoryRecord list.  */
  _BankAccountReportHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankAccountReport items which match the where clause.  */
  allBankAccountReports?: Maybe<Array<Maybe<BankAccountReport>>>;
  /**  Search for the BankAccountReport item with the matching ID.  */
  BankAccountReport?: Maybe<BankAccountReport>;
  /**  Perform a meta-query on all BankAccountReport items which match the where clause.  */
  _allBankAccountReportsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankAccountReport list.  */
  _BankAccountReportsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankAccountReportTaskHistoryRecord items which match the where clause.  */
  allBankAccountReportTaskHistoryRecords?: Maybe<Array<Maybe<BankAccountReportTaskHistoryRecord>>>;
  /**  Search for the BankAccountReportTaskHistoryRecord item with the matching ID.  */
  BankAccountReportTaskHistoryRecord?: Maybe<BankAccountReportTaskHistoryRecord>;
  /**  Perform a meta-query on all BankAccountReportTaskHistoryRecord items which match the where clause.  */
  _allBankAccountReportTaskHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankAccountReportTaskHistoryRecord list.  */
  _BankAccountReportTaskHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all BankAccountReportTask items which match the where clause.  */
  allBankAccountReportTasks?: Maybe<Array<Maybe<BankAccountReportTask>>>;
  /**  Search for the BankAccountReportTask item with the matching ID.  */
  BankAccountReportTask?: Maybe<BankAccountReportTask>;
  /**  Perform a meta-query on all BankAccountReportTask items which match the where clause.  */
  _allBankAccountReportTasksMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the BankAccountReportTask list.  */
  _BankAccountReportTasksMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketHistoryRecord items which match the where clause.  */
  allTicketHistoryRecords?: Maybe<Array<Maybe<TicketHistoryRecord>>>;
  /**  Search for the TicketHistoryRecord item with the matching ID.  */
  TicketHistoryRecord?: Maybe<TicketHistoryRecord>;
  /**  Perform a meta-query on all TicketHistoryRecord items which match the where clause.  */
  _allTicketHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketHistoryRecord list.  */
  _TicketHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all Ticket items which match the where clause.  */
  allTickets?: Maybe<Array<Maybe<Ticket>>>;
  /**  Search for the Ticket item with the matching ID.  */
  Ticket?: Maybe<Ticket>;
  /**  Perform a meta-query on all Ticket items which match the where clause.  */
  _allTicketsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the Ticket list.  */
  _TicketsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketSourceHistoryRecord items which match the where clause.  */
  allTicketSourceHistoryRecords?: Maybe<Array<Maybe<TicketSourceHistoryRecord>>>;
  /**  Search for the TicketSourceHistoryRecord item with the matching ID.  */
  TicketSourceHistoryRecord?: Maybe<TicketSourceHistoryRecord>;
  /**  Perform a meta-query on all TicketSourceHistoryRecord items which match the where clause.  */
  _allTicketSourceHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketSourceHistoryRecord list.  */
  _TicketSourceHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketSource items which match the where clause.  */
  allTicketSources?: Maybe<Array<Maybe<TicketSource>>>;
  /**  Search for the TicketSource item with the matching ID.  */
  TicketSource?: Maybe<TicketSource>;
  /**  Perform a meta-query on all TicketSource items which match the where clause.  */
  _allTicketSourcesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketSource list.  */
  _TicketSourcesMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketStatusHistoryRecord items which match the where clause.  */
  allTicketStatusHistoryRecords?: Maybe<Array<Maybe<TicketStatusHistoryRecord>>>;
  /**  Search for the TicketStatusHistoryRecord item with the matching ID.  */
  TicketStatusHistoryRecord?: Maybe<TicketStatusHistoryRecord>;
  /**  Perform a meta-query on all TicketStatusHistoryRecord items which match the where clause.  */
  _allTicketStatusHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketStatusHistoryRecord list.  */
  _TicketStatusHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketStatus items which match the where clause.  */
  allTicketStatuses?: Maybe<Array<Maybe<TicketStatus>>>;
  /**  Search for the TicketStatus item with the matching ID.  */
  TicketStatus?: Maybe<TicketStatus>;
  /**  Perform a meta-query on all TicketStatus items which match the where clause.  */
  _allTicketStatusesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketStatus list.  */
  _TicketStatusesMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketFileHistoryRecord items which match the where clause.  */
  allTicketFileHistoryRecords?: Maybe<Array<Maybe<TicketFileHistoryRecord>>>;
  /**  Search for the TicketFileHistoryRecord item with the matching ID.  */
  TicketFileHistoryRecord?: Maybe<TicketFileHistoryRecord>;
  /**  Perform a meta-query on all TicketFileHistoryRecord items which match the where clause.  */
  _allTicketFileHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketFileHistoryRecord list.  */
  _TicketFileHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketFile items which match the where clause.  */
  allTicketFiles?: Maybe<Array<Maybe<TicketFile>>>;
  /**  Search for the TicketFile item with the matching ID.  */
  TicketFile?: Maybe<TicketFile>;
  /**  Perform a meta-query on all TicketFile items which match the where clause.  */
  _allTicketFilesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketFile list.  */
  _TicketFilesMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketChange items which match the where clause.  */
  allTicketChanges?: Maybe<Array<Maybe<TicketChange>>>;
  /**  Search for the TicketChange item with the matching ID.  */
  TicketChange?: Maybe<TicketChange>;
  /**  Perform a meta-query on all TicketChange items which match the where clause.  */
  _allTicketChangesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketChange list.  */
  _TicketChangesMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketCommentHistoryRecord items which match the where clause.  */
  allTicketCommentHistoryRecords?: Maybe<Array<Maybe<TicketCommentHistoryRecord>>>;
  /**  Search for the TicketCommentHistoryRecord item with the matching ID.  */
  TicketCommentHistoryRecord?: Maybe<TicketCommentHistoryRecord>;
  /**  Perform a meta-query on all TicketCommentHistoryRecord items which match the where clause.  */
  _allTicketCommentHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketCommentHistoryRecord list.  */
  _TicketCommentHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketComment items which match the where clause.  */
  allTicketComments?: Maybe<Array<Maybe<TicketComment>>>;
  /**  Search for the TicketComment item with the matching ID.  */
  TicketComment?: Maybe<TicketComment>;
  /**  Perform a meta-query on all TicketComment items which match the where clause.  */
  _allTicketCommentsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketComment list.  */
  _TicketCommentsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketPlaceClassifierHistoryRecord items which match the where clause.  */
  allTicketPlaceClassifierHistoryRecords?: Maybe<Array<Maybe<TicketPlaceClassifierHistoryRecord>>>;
  /**  Search for the TicketPlaceClassifierHistoryRecord item with the matching ID.  */
  TicketPlaceClassifierHistoryRecord?: Maybe<TicketPlaceClassifierHistoryRecord>;
  /**  Perform a meta-query on all TicketPlaceClassifierHistoryRecord items which match the where clause.  */
  _allTicketPlaceClassifierHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketPlaceClassifierHistoryRecord list.  */
  _TicketPlaceClassifierHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketPlaceClassifier items which match the where clause.  */
  allTicketPlaceClassifiers?: Maybe<Array<Maybe<TicketPlaceClassifier>>>;
  /**  Search for the TicketPlaceClassifier item with the matching ID.  */
  TicketPlaceClassifier?: Maybe<TicketPlaceClassifier>;
  /**  Perform a meta-query on all TicketPlaceClassifier items which match the where clause.  */
  _allTicketPlaceClassifiersMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketPlaceClassifier list.  */
  _TicketPlaceClassifiersMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketCategoryClassifierHistoryRecord items which match the where clause.  */
  allTicketCategoryClassifierHistoryRecords?: Maybe<Array<Maybe<TicketCategoryClassifierHistoryRecord>>>;
  /**  Search for the TicketCategoryClassifierHistoryRecord item with the matching ID.  */
  TicketCategoryClassifierHistoryRecord?: Maybe<TicketCategoryClassifierHistoryRecord>;
  /**  Perform a meta-query on all TicketCategoryClassifierHistoryRecord items which match the where clause.  */
  _allTicketCategoryClassifierHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketCategoryClassifierHistoryRecord list.  */
  _TicketCategoryClassifierHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketCategoryClassifier items which match the where clause.  */
  allTicketCategoryClassifiers?: Maybe<Array<Maybe<TicketCategoryClassifier>>>;
  /**  Search for the TicketCategoryClassifier item with the matching ID.  */
  TicketCategoryClassifier?: Maybe<TicketCategoryClassifier>;
  /**  Perform a meta-query on all TicketCategoryClassifier items which match the where clause.  */
  _allTicketCategoryClassifiersMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketCategoryClassifier list.  */
  _TicketCategoryClassifiersMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketProblemClassifierHistoryRecord items which match the where clause.  */
  allTicketProblemClassifierHistoryRecords?: Maybe<Array<Maybe<TicketProblemClassifierHistoryRecord>>>;
  /**  Search for the TicketProblemClassifierHistoryRecord item with the matching ID.  */
  TicketProblemClassifierHistoryRecord?: Maybe<TicketProblemClassifierHistoryRecord>;
  /**  Perform a meta-query on all TicketProblemClassifierHistoryRecord items which match the where clause.  */
  _allTicketProblemClassifierHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketProblemClassifierHistoryRecord list.  */
  _TicketProblemClassifierHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketProblemClassifier items which match the where clause.  */
  allTicketProblemClassifiers?: Maybe<Array<Maybe<TicketProblemClassifier>>>;
  /**  Search for the TicketProblemClassifier item with the matching ID.  */
  TicketProblemClassifier?: Maybe<TicketProblemClassifier>;
  /**  Perform a meta-query on all TicketProblemClassifier items which match the where clause.  */
  _allTicketProblemClassifiersMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketProblemClassifier list.  */
  _TicketProblemClassifiersMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketClassifierHistoryRecord items which match the where clause.  */
  allTicketClassifierHistoryRecords?: Maybe<Array<Maybe<TicketClassifierHistoryRecord>>>;
  /**  Search for the TicketClassifierHistoryRecord item with the matching ID.  */
  TicketClassifierHistoryRecord?: Maybe<TicketClassifierHistoryRecord>;
  /**  Perform a meta-query on all TicketClassifierHistoryRecord items which match the where clause.  */
  _allTicketClassifierHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketClassifierHistoryRecord list.  */
  _TicketClassifierHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketClassifier items which match the where clause.  */
  allTicketClassifiers?: Maybe<Array<Maybe<TicketClassifier>>>;
  /**  Search for the TicketClassifier item with the matching ID.  */
  TicketClassifier?: Maybe<TicketClassifier>;
  /**  Perform a meta-query on all TicketClassifier items which match the where clause.  */
  _allTicketClassifiersMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketClassifier list.  */
  _TicketClassifiersMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketFilterTemplateHistoryRecord items which match the where clause.  */
  allTicketFilterTemplateHistoryRecords?: Maybe<Array<Maybe<TicketFilterTemplateHistoryRecord>>>;
  /**  Search for the TicketFilterTemplateHistoryRecord item with the matching ID.  */
  TicketFilterTemplateHistoryRecord?: Maybe<TicketFilterTemplateHistoryRecord>;
  /**  Perform a meta-query on all TicketFilterTemplateHistoryRecord items which match the where clause.  */
  _allTicketFilterTemplateHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketFilterTemplateHistoryRecord list.  */
  _TicketFilterTemplateHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketFilterTemplate items which match the where clause.  */
  allTicketFilterTemplates?: Maybe<Array<Maybe<TicketFilterTemplate>>>;
  /**  Search for the TicketFilterTemplate item with the matching ID.  */
  TicketFilterTemplate?: Maybe<TicketFilterTemplate>;
  /**  Perform a meta-query on all TicketFilterTemplate items which match the where clause.  */
  _allTicketFilterTemplatesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketFilterTemplate list.  */
  _TicketFilterTemplatesMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketCommentFileHistoryRecord items which match the where clause.  */
  allTicketCommentFileHistoryRecords?: Maybe<Array<Maybe<TicketCommentFileHistoryRecord>>>;
  /**  Search for the TicketCommentFileHistoryRecord item with the matching ID.  */
  TicketCommentFileHistoryRecord?: Maybe<TicketCommentFileHistoryRecord>;
  /**  Perform a meta-query on all TicketCommentFileHistoryRecord items which match the where clause.  */
  _allTicketCommentFileHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketCommentFileHistoryRecord list.  */
  _TicketCommentFileHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketCommentFile items which match the where clause.  */
  allTicketCommentFiles?: Maybe<Array<Maybe<TicketCommentFile>>>;
  /**  Search for the TicketCommentFile item with the matching ID.  */
  TicketCommentFile?: Maybe<TicketCommentFile>;
  /**  Perform a meta-query on all TicketCommentFile items which match the where clause.  */
  _allTicketCommentFilesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketCommentFile list.  */
  _TicketCommentFilesMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketCommentsTimeHistoryRecord items which match the where clause.  */
  allTicketCommentsTimeHistoryRecords?: Maybe<Array<Maybe<TicketCommentsTimeHistoryRecord>>>;
  /**  Search for the TicketCommentsTimeHistoryRecord item with the matching ID.  */
  TicketCommentsTimeHistoryRecord?: Maybe<TicketCommentsTimeHistoryRecord>;
  /**  Perform a meta-query on all TicketCommentsTimeHistoryRecord items which match the where clause.  */
  _allTicketCommentsTimeHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketCommentsTimeHistoryRecord list.  */
  _TicketCommentsTimeHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketCommentsTime items which match the where clause.  */
  allTicketCommentsTimes?: Maybe<Array<Maybe<TicketCommentsTime>>>;
  /**  Search for the TicketCommentsTime item with the matching ID.  */
  TicketCommentsTime?: Maybe<TicketCommentsTime>;
  /**  Perform a meta-query on all TicketCommentsTime items which match the where clause.  */
  _allTicketCommentsTimesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketCommentsTime list.  */
  _TicketCommentsTimesMeta?: Maybe<_ListMeta>;
  /**  Search for all UserTicketCommentReadTimeHistoryRecord items which match the where clause.  */
  allUserTicketCommentReadTimeHistoryRecords?: Maybe<Array<Maybe<UserTicketCommentReadTimeHistoryRecord>>>;
  /**  Search for the UserTicketCommentReadTimeHistoryRecord item with the matching ID.  */
  UserTicketCommentReadTimeHistoryRecord?: Maybe<UserTicketCommentReadTimeHistoryRecord>;
  /**  Perform a meta-query on all UserTicketCommentReadTimeHistoryRecord items which match the where clause.  */
  _allUserTicketCommentReadTimeHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the UserTicketCommentReadTimeHistoryRecord list.  */
  _UserTicketCommentReadTimeHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all UserTicketCommentReadTime items which match the where clause.  */
  allUserTicketCommentReadTimes?: Maybe<Array<Maybe<UserTicketCommentReadTime>>>;
  /**  Search for the UserTicketCommentReadTime item with the matching ID.  */
  UserTicketCommentReadTime?: Maybe<UserTicketCommentReadTime>;
  /**  Perform a meta-query on all UserTicketCommentReadTime items which match the where clause.  */
  _allUserTicketCommentReadTimesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the UserTicketCommentReadTime list.  */
  _UserTicketCommentReadTimesMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketPropertyHintHistoryRecord items which match the where clause.  */
  allTicketPropertyHintHistoryRecords?: Maybe<Array<Maybe<TicketPropertyHintHistoryRecord>>>;
  /**  Search for the TicketPropertyHintHistoryRecord item with the matching ID.  */
  TicketPropertyHintHistoryRecord?: Maybe<TicketPropertyHintHistoryRecord>;
  /**  Perform a meta-query on all TicketPropertyHintHistoryRecord items which match the where clause.  */
  _allTicketPropertyHintHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketPropertyHintHistoryRecord list.  */
  _TicketPropertyHintHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketPropertyHint items which match the where clause.  */
  allTicketPropertyHints?: Maybe<Array<Maybe<TicketPropertyHint>>>;
  /**  Search for the TicketPropertyHint item with the matching ID.  */
  TicketPropertyHint?: Maybe<TicketPropertyHint>;
  /**  Perform a meta-query on all TicketPropertyHint items which match the where clause.  */
  _allTicketPropertyHintsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketPropertyHint list.  */
  _TicketPropertyHintsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketPropertyHintPropertyHistoryRecord items which match the where clause.  */
  allTicketPropertyHintPropertyHistoryRecords?: Maybe<Array<Maybe<TicketPropertyHintPropertyHistoryRecord>>>;
  /**  Search for the TicketPropertyHintPropertyHistoryRecord item with the matching ID.  */
  TicketPropertyHintPropertyHistoryRecord?: Maybe<TicketPropertyHintPropertyHistoryRecord>;
  /**  Perform a meta-query on all TicketPropertyHintPropertyHistoryRecord items which match the where clause.  */
  _allTicketPropertyHintPropertyHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketPropertyHintPropertyHistoryRecord list.  */
  _TicketPropertyHintPropertyHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketPropertyHintProperty items which match the where clause.  */
  allTicketPropertyHintProperties?: Maybe<Array<Maybe<TicketPropertyHintProperty>>>;
  /**  Search for the TicketPropertyHintProperty item with the matching ID.  */
  TicketPropertyHintProperty?: Maybe<TicketPropertyHintProperty>;
  /**  Perform a meta-query on all TicketPropertyHintProperty items which match the where clause.  */
  _allTicketPropertyHintPropertiesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketPropertyHintProperty list.  */
  _TicketPropertyHintPropertiesMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketExportTaskHistoryRecord items which match the where clause.  */
  allTicketExportTaskHistoryRecords?: Maybe<Array<Maybe<TicketExportTaskHistoryRecord>>>;
  /**  Search for the TicketExportTaskHistoryRecord item with the matching ID.  */
  TicketExportTaskHistoryRecord?: Maybe<TicketExportTaskHistoryRecord>;
  /**  Perform a meta-query on all TicketExportTaskHistoryRecord items which match the where clause.  */
  _allTicketExportTaskHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketExportTaskHistoryRecord list.  */
  _TicketExportTaskHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketExportTask items which match the where clause.  */
  allTicketExportTasks?: Maybe<Array<Maybe<TicketExportTask>>>;
  /**  Search for the TicketExportTask item with the matching ID.  */
  TicketExportTask?: Maybe<TicketExportTask>;
  /**  Perform a meta-query on all TicketExportTask items which match the where clause.  */
  _allTicketExportTasksMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketExportTask list.  */
  _TicketExportTasksMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketOrganizationSettingHistoryRecord items which match the where clause.  */
  allTicketOrganizationSettingHistoryRecords?: Maybe<Array<Maybe<TicketOrganizationSettingHistoryRecord>>>;
  /**  Search for the TicketOrganizationSettingHistoryRecord item with the matching ID.  */
  TicketOrganizationSettingHistoryRecord?: Maybe<TicketOrganizationSettingHistoryRecord>;
  /**  Perform a meta-query on all TicketOrganizationSettingHistoryRecord items which match the where clause.  */
  _allTicketOrganizationSettingHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketOrganizationSettingHistoryRecord list.  */
  _TicketOrganizationSettingHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all TicketOrganizationSetting items which match the where clause.  */
  allTicketOrganizationSettings?: Maybe<Array<Maybe<TicketOrganizationSetting>>>;
  /**  Search for the TicketOrganizationSetting item with the matching ID.  */
  TicketOrganizationSetting?: Maybe<TicketOrganizationSetting>;
  /**  Perform a meta-query on all TicketOrganizationSetting items which match the where clause.  */
  _allTicketOrganizationSettingsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the TicketOrganizationSetting list.  */
  _TicketOrganizationSettingsMeta?: Maybe<_ListMeta>;
  /**  Search for all IncidentHistoryRecord items which match the where clause.  */
  allIncidentHistoryRecords?: Maybe<Array<Maybe<IncidentHistoryRecord>>>;
  /**  Search for the IncidentHistoryRecord item with the matching ID.  */
  IncidentHistoryRecord?: Maybe<IncidentHistoryRecord>;
  /**  Perform a meta-query on all IncidentHistoryRecord items which match the where clause.  */
  _allIncidentHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the IncidentHistoryRecord list.  */
  _IncidentHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all Incident items which match the where clause.  */
  allIncidents?: Maybe<Array<Maybe<Incident>>>;
  /**  Search for the Incident item with the matching ID.  */
  Incident?: Maybe<Incident>;
  /**  Perform a meta-query on all Incident items which match the where clause.  */
  _allIncidentsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the Incident list.  */
  _IncidentsMeta?: Maybe<_ListMeta>;
  /**  Search for all IncidentChange items which match the where clause.  */
  allIncidentChanges?: Maybe<Array<Maybe<IncidentChange>>>;
  /**  Search for the IncidentChange item with the matching ID.  */
  IncidentChange?: Maybe<IncidentChange>;
  /**  Perform a meta-query on all IncidentChange items which match the where clause.  */
  _allIncidentChangesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the IncidentChange list.  */
  _IncidentChangesMeta?: Maybe<_ListMeta>;
  /**  Search for all IncidentPropertyHistoryRecord items which match the where clause.  */
  allIncidentPropertyHistoryRecords?: Maybe<Array<Maybe<IncidentPropertyHistoryRecord>>>;
  /**  Search for the IncidentPropertyHistoryRecord item with the matching ID.  */
  IncidentPropertyHistoryRecord?: Maybe<IncidentPropertyHistoryRecord>;
  /**  Perform a meta-query on all IncidentPropertyHistoryRecord items which match the where clause.  */
  _allIncidentPropertyHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the IncidentPropertyHistoryRecord list.  */
  _IncidentPropertyHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all IncidentProperty items which match the where clause.  */
  allIncidentProperties?: Maybe<Array<Maybe<IncidentProperty>>>;
  /**  Search for the IncidentProperty item with the matching ID.  */
  IncidentProperty?: Maybe<IncidentProperty>;
  /**  Perform a meta-query on all IncidentProperty items which match the where clause.  */
  _allIncidentPropertiesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the IncidentProperty list.  */
  _IncidentPropertiesMeta?: Maybe<_ListMeta>;
  /**  Search for all IncidentClassifierHistoryRecord items which match the where clause.  */
  allIncidentClassifierHistoryRecords?: Maybe<Array<Maybe<IncidentClassifierHistoryRecord>>>;
  /**  Search for the IncidentClassifierHistoryRecord item with the matching ID.  */
  IncidentClassifierHistoryRecord?: Maybe<IncidentClassifierHistoryRecord>;
  /**  Perform a meta-query on all IncidentClassifierHistoryRecord items which match the where clause.  */
  _allIncidentClassifierHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the IncidentClassifierHistoryRecord list.  */
  _IncidentClassifierHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all IncidentClassifier items which match the where clause.  */
  allIncidentClassifiers?: Maybe<Array<Maybe<IncidentClassifier>>>;
  /**  Search for the IncidentClassifier item with the matching ID.  */
  IncidentClassifier?: Maybe<IncidentClassifier>;
  /**  Perform a meta-query on all IncidentClassifier items which match the where clause.  */
  _allIncidentClassifiersMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the IncidentClassifier list.  */
  _IncidentClassifiersMeta?: Maybe<_ListMeta>;
  /**  Search for all IncidentClassifierIncidentHistoryRecord items which match the where clause.  */
  allIncidentClassifierIncidentHistoryRecords?: Maybe<Array<Maybe<IncidentClassifierIncidentHistoryRecord>>>;
  /**  Search for the IncidentClassifierIncidentHistoryRecord item with the matching ID.  */
  IncidentClassifierIncidentHistoryRecord?: Maybe<IncidentClassifierIncidentHistoryRecord>;
  /**  Perform a meta-query on all IncidentClassifierIncidentHistoryRecord items which match the where clause.  */
  _allIncidentClassifierIncidentHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the IncidentClassifierIncidentHistoryRecord list.  */
  _IncidentClassifierIncidentHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all IncidentClassifierIncident items which match the where clause.  */
  allIncidentClassifierIncidents?: Maybe<Array<Maybe<IncidentClassifierIncident>>>;
  /**  Search for the IncidentClassifierIncident item with the matching ID.  */
  IncidentClassifierIncident?: Maybe<IncidentClassifierIncident>;
  /**  Perform a meta-query on all IncidentClassifierIncident items which match the where clause.  */
  _allIncidentClassifierIncidentsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the IncidentClassifierIncident list.  */
  _IncidentClassifierIncidentsMeta?: Maybe<_ListMeta>;
  /**  Search for all UserFavoriteTicketHistoryRecord items which match the where clause.  */
  allUserFavoriteTicketHistoryRecords?: Maybe<Array<Maybe<UserFavoriteTicketHistoryRecord>>>;
  /**  Search for the UserFavoriteTicketHistoryRecord item with the matching ID.  */
  UserFavoriteTicketHistoryRecord?: Maybe<UserFavoriteTicketHistoryRecord>;
  /**  Perform a meta-query on all UserFavoriteTicketHistoryRecord items which match the where clause.  */
  _allUserFavoriteTicketHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the UserFavoriteTicketHistoryRecord list.  */
  _UserFavoriteTicketHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all UserFavoriteTicket items which match the where clause.  */
  allUserFavoriteTickets?: Maybe<Array<Maybe<UserFavoriteTicket>>>;
  /**  Search for the UserFavoriteTicket item with the matching ID.  */
  UserFavoriteTicket?: Maybe<UserFavoriteTicket>;
  /**  Perform a meta-query on all UserFavoriteTicket items which match the where clause.  */
  _allUserFavoriteTicketsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the UserFavoriteTicket list.  */
  _UserFavoriteTicketsMeta?: Maybe<_ListMeta>;
  /**  Search for all IncidentExportTaskHistoryRecord items which match the where clause.  */
  allIncidentExportTaskHistoryRecords?: Maybe<Array<Maybe<IncidentExportTaskHistoryRecord>>>;
  /**  Search for the IncidentExportTaskHistoryRecord item with the matching ID.  */
  IncidentExportTaskHistoryRecord?: Maybe<IncidentExportTaskHistoryRecord>;
  /**  Perform a meta-query on all IncidentExportTaskHistoryRecord items which match the where clause.  */
  _allIncidentExportTaskHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the IncidentExportTaskHistoryRecord list.  */
  _IncidentExportTaskHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all IncidentExportTask items which match the where clause.  */
  allIncidentExportTasks?: Maybe<Array<Maybe<IncidentExportTask>>>;
  /**  Search for the IncidentExportTask item with the matching ID.  */
  IncidentExportTask?: Maybe<IncidentExportTask>;
  /**  Perform a meta-query on all IncidentExportTask items which match the where clause.  */
  _allIncidentExportTasksMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the IncidentExportTask list.  */
  _IncidentExportTasksMeta?: Maybe<_ListMeta>;
  /**  Search for all MessageHistoryRecord items which match the where clause.  */
  allMessageHistoryRecords?: Maybe<Array<Maybe<MessageHistoryRecord>>>;
  /**  Search for the MessageHistoryRecord item with the matching ID.  */
  MessageHistoryRecord?: Maybe<MessageHistoryRecord>;
  /**  Perform a meta-query on all MessageHistoryRecord items which match the where clause.  */
  _allMessageHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MessageHistoryRecord list.  */
  _MessageHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all Message items which match the where clause.  */
  allMessages?: Maybe<Array<Maybe<Message>>>;
  /**  Search for the Message item with the matching ID.  */
  Message?: Maybe<Message>;
  /**  Perform a meta-query on all Message items which match the where clause.  */
  _allMessagesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the Message list.  */
  _MessagesMeta?: Maybe<_ListMeta>;
  /**  Search for all RemoteClientHistoryRecord items which match the where clause.  */
  allRemoteClientHistoryRecords?: Maybe<Array<Maybe<RemoteClientHistoryRecord>>>;
  /**  Search for the RemoteClientHistoryRecord item with the matching ID.  */
  RemoteClientHistoryRecord?: Maybe<RemoteClientHistoryRecord>;
  /**  Perform a meta-query on all RemoteClientHistoryRecord items which match the where clause.  */
  _allRemoteClientHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the RemoteClientHistoryRecord list.  */
  _RemoteClientHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all RemoteClient items which match the where clause.  */
  allRemoteClients?: Maybe<Array<Maybe<RemoteClient>>>;
  /**  Search for the RemoteClient item with the matching ID.  */
  RemoteClient?: Maybe<RemoteClient>;
  /**  Perform a meta-query on all RemoteClient items which match the where clause.  */
  _allRemoteClientsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the RemoteClient list.  */
  _RemoteClientsMeta?: Maybe<_ListMeta>;
  /**  Search for all MessageUserBlackListHistoryRecord items which match the where clause.  */
  allMessageUserBlackListHistoryRecords?: Maybe<Array<Maybe<MessageUserBlackListHistoryRecord>>>;
  /**  Search for the MessageUserBlackListHistoryRecord item with the matching ID.  */
  MessageUserBlackListHistoryRecord?: Maybe<MessageUserBlackListHistoryRecord>;
  /**  Perform a meta-query on all MessageUserBlackListHistoryRecord items which match the where clause.  */
  _allMessageUserBlackListHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MessageUserBlackListHistoryRecord list.  */
  _MessageUserBlackListHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all MessageUserBlackList items which match the where clause.  */
  allMessageUserBlackLists?: Maybe<Array<Maybe<MessageUserBlackList>>>;
  /**  Search for the MessageUserBlackList item with the matching ID.  */
  MessageUserBlackList?: Maybe<MessageUserBlackList>;
  /**  Perform a meta-query on all MessageUserBlackList items which match the where clause.  */
  _allMessageUserBlackListsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MessageUserBlackList list.  */
  _MessageUserBlackListsMeta?: Maybe<_ListMeta>;
  /**  Search for all MessageOrganizationBlackListHistoryRecord items which match the where clause.  */
  allMessageOrganizationBlackListHistoryRecords?: Maybe<Array<Maybe<MessageOrganizationBlackListHistoryRecord>>>;
  /**  Search for the MessageOrganizationBlackListHistoryRecord item with the matching ID.  */
  MessageOrganizationBlackListHistoryRecord?: Maybe<MessageOrganizationBlackListHistoryRecord>;
  /**  Perform a meta-query on all MessageOrganizationBlackListHistoryRecord items which match the where clause.  */
  _allMessageOrganizationBlackListHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MessageOrganizationBlackListHistoryRecord list.  */
  _MessageOrganizationBlackListHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all MessageOrganizationBlackList items which match the where clause.  */
  allMessageOrganizationBlackLists?: Maybe<Array<Maybe<MessageOrganizationBlackList>>>;
  /**  Search for the MessageOrganizationBlackList item with the matching ID.  */
  MessageOrganizationBlackList?: Maybe<MessageOrganizationBlackList>;
  /**  Perform a meta-query on all MessageOrganizationBlackList items which match the where clause.  */
  _allMessageOrganizationBlackListsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MessageOrganizationBlackList list.  */
  _MessageOrganizationBlackListsMeta?: Maybe<_ListMeta>;
  /**  Search for all MessageBatchHistoryRecord items which match the where clause.  */
  allMessageBatchHistoryRecords?: Maybe<Array<Maybe<MessageBatchHistoryRecord>>>;
  /**  Search for the MessageBatchHistoryRecord item with the matching ID.  */
  MessageBatchHistoryRecord?: Maybe<MessageBatchHistoryRecord>;
  /**  Perform a meta-query on all MessageBatchHistoryRecord items which match the where clause.  */
  _allMessageBatchHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MessageBatchHistoryRecord list.  */
  _MessageBatchHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all MessageBatch items which match the where clause.  */
  allMessageBatches?: Maybe<Array<Maybe<MessageBatch>>>;
  /**  Search for the MessageBatch item with the matching ID.  */
  MessageBatch?: Maybe<MessageBatch>;
  /**  Perform a meta-query on all MessageBatch items which match the where clause.  */
  _allMessageBatchesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MessageBatch list.  */
  _MessageBatchesMeta?: Maybe<_ListMeta>;
  /**  Search for all ContactHistoryRecord items which match the where clause.  */
  allContactHistoryRecords?: Maybe<Array<Maybe<ContactHistoryRecord>>>;
  /**  Search for the ContactHistoryRecord item with the matching ID.  */
  ContactHistoryRecord?: Maybe<ContactHistoryRecord>;
  /**  Perform a meta-query on all ContactHistoryRecord items which match the where clause.  */
  _allContactHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ContactHistoryRecord list.  */
  _ContactHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all Contact items which match the where clause.  */
  allContacts?: Maybe<Array<Maybe<Contact>>>;
  /**  Search for the Contact item with the matching ID.  */
  Contact?: Maybe<Contact>;
  /**  Perform a meta-query on all Contact items which match the where clause.  */
  _allContactsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the Contact list.  */
  _ContactsMeta?: Maybe<_ListMeta>;
  /**  Search for all ContactRoleHistoryRecord items which match the where clause.  */
  allContactRoleHistoryRecords?: Maybe<Array<Maybe<ContactRoleHistoryRecord>>>;
  /**  Search for the ContactRoleHistoryRecord item with the matching ID.  */
  ContactRoleHistoryRecord?: Maybe<ContactRoleHistoryRecord>;
  /**  Perform a meta-query on all ContactRoleHistoryRecord items which match the where clause.  */
  _allContactRoleHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ContactRoleHistoryRecord list.  */
  _ContactRoleHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all ContactRole items which match the where clause.  */
  allContactRoles?: Maybe<Array<Maybe<ContactRole>>>;
  /**  Search for the ContactRole item with the matching ID.  */
  ContactRole?: Maybe<ContactRole>;
  /**  Perform a meta-query on all ContactRole items which match the where clause.  */
  _allContactRolesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ContactRole list.  */
  _ContactRolesMeta?: Maybe<_ListMeta>;
  /**  Search for all ContactExportTaskHistoryRecord items which match the where clause.  */
  allContactExportTaskHistoryRecords?: Maybe<Array<Maybe<ContactExportTaskHistoryRecord>>>;
  /**  Search for the ContactExportTaskHistoryRecord item with the matching ID.  */
  ContactExportTaskHistoryRecord?: Maybe<ContactExportTaskHistoryRecord>;
  /**  Perform a meta-query on all ContactExportTaskHistoryRecord items which match the where clause.  */
  _allContactExportTaskHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ContactExportTaskHistoryRecord list.  */
  _ContactExportTaskHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all ContactExportTask items which match the where clause.  */
  allContactExportTasks?: Maybe<Array<Maybe<ContactExportTask>>>;
  /**  Search for the ContactExportTask item with the matching ID.  */
  ContactExportTask?: Maybe<ContactExportTask>;
  /**  Perform a meta-query on all ContactExportTask items which match the where clause.  */
  _allContactExportTasksMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ContactExportTask list.  */
  _ContactExportTasksMeta?: Maybe<_ListMeta>;
  /**  Search for all ResidentHistoryRecord items which match the where clause.  */
  allResidentHistoryRecords?: Maybe<Array<Maybe<ResidentHistoryRecord>>>;
  /**  Search for the ResidentHistoryRecord item with the matching ID.  */
  ResidentHistoryRecord?: Maybe<ResidentHistoryRecord>;
  /**  Perform a meta-query on all ResidentHistoryRecord items which match the where clause.  */
  _allResidentHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ResidentHistoryRecord list.  */
  _ResidentHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all Resident items which match the where clause.  */
  allResidents?: Maybe<Array<Maybe<Resident>>>;
  /**  Search for the Resident item with the matching ID.  */
  Resident?: Maybe<Resident>;
  /**  Perform a meta-query on all Resident items which match the where clause.  */
  _allResidentsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the Resident list.  */
  _ResidentsMeta?: Maybe<_ListMeta>;
  /**  Search for all ServiceConsumerHistoryRecord items which match the where clause.  */
  allServiceConsumerHistoryRecords?: Maybe<Array<Maybe<ServiceConsumerHistoryRecord>>>;
  /**  Search for the ServiceConsumerHistoryRecord item with the matching ID.  */
  ServiceConsumerHistoryRecord?: Maybe<ServiceConsumerHistoryRecord>;
  /**  Perform a meta-query on all ServiceConsumerHistoryRecord items which match the where clause.  */
  _allServiceConsumerHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ServiceConsumerHistoryRecord list.  */
  _ServiceConsumerHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all ServiceConsumer items which match the where clause.  */
  allServiceConsumers?: Maybe<Array<Maybe<ServiceConsumer>>>;
  /**  Search for the ServiceConsumer item with the matching ID.  */
  ServiceConsumer?: Maybe<ServiceConsumer>;
  /**  Perform a meta-query on all ServiceConsumer items which match the where clause.  */
  _allServiceConsumersMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ServiceConsumer list.  */
  _ServiceConsumersMeta?: Maybe<_ListMeta>;
  /**  Search for all OnBoardingHistoryRecord items which match the where clause.  */
  allOnBoardingHistoryRecords?: Maybe<Array<Maybe<OnBoardingHistoryRecord>>>;
  /**  Search for the OnBoardingHistoryRecord item with the matching ID.  */
  OnBoardingHistoryRecord?: Maybe<OnBoardingHistoryRecord>;
  /**  Perform a meta-query on all OnBoardingHistoryRecord items which match the where clause.  */
  _allOnBoardingHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OnBoardingHistoryRecord list.  */
  _OnBoardingHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all OnBoarding items which match the where clause.  */
  allOnBoardings?: Maybe<Array<Maybe<OnBoarding>>>;
  /**  Search for the OnBoarding item with the matching ID.  */
  OnBoarding?: Maybe<OnBoarding>;
  /**  Perform a meta-query on all OnBoarding items which match the where clause.  */
  _allOnBoardingsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OnBoarding list.  */
  _OnBoardingsMeta?: Maybe<_ListMeta>;
  /**  Search for all OnBoardingStepHistoryRecord items which match the where clause.  */
  allOnBoardingStepHistoryRecords?: Maybe<Array<Maybe<OnBoardingStepHistoryRecord>>>;
  /**  Search for the OnBoardingStepHistoryRecord item with the matching ID.  */
  OnBoardingStepHistoryRecord?: Maybe<OnBoardingStepHistoryRecord>;
  /**  Perform a meta-query on all OnBoardingStepHistoryRecord items which match the where clause.  */
  _allOnBoardingStepHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OnBoardingStepHistoryRecord list.  */
  _OnBoardingStepHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all OnBoardingStep items which match the where clause.  */
  allOnBoardingSteps?: Maybe<Array<Maybe<OnBoardingStep>>>;
  /**  Search for the OnBoardingStep item with the matching ID.  */
  OnBoardingStep?: Maybe<OnBoardingStep>;
  /**  Perform a meta-query on all OnBoardingStep items which match the where clause.  */
  _allOnBoardingStepsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the OnBoardingStep list.  */
  _OnBoardingStepsMeta?: Maybe<_ListMeta>;
  /**  Search for all MeterResourceHistoryRecord items which match the where clause.  */
  allMeterResourceHistoryRecords?: Maybe<Array<Maybe<MeterResourceHistoryRecord>>>;
  /**  Search for the MeterResourceHistoryRecord item with the matching ID.  */
  MeterResourceHistoryRecord?: Maybe<MeterResourceHistoryRecord>;
  /**  Perform a meta-query on all MeterResourceHistoryRecord items which match the where clause.  */
  _allMeterResourceHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MeterResourceHistoryRecord list.  */
  _MeterResourceHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all MeterResource items which match the where clause.  */
  allMeterResources?: Maybe<Array<Maybe<MeterResource>>>;
  /**  Search for the MeterResource item with the matching ID.  */
  MeterResource?: Maybe<MeterResource>;
  /**  Perform a meta-query on all MeterResource items which match the where clause.  */
  _allMeterResourcesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MeterResource list.  */
  _MeterResourcesMeta?: Maybe<_ListMeta>;
  /**  Search for all MeterReadingSourceHistoryRecord items which match the where clause.  */
  allMeterReadingSourceHistoryRecords?: Maybe<Array<Maybe<MeterReadingSourceHistoryRecord>>>;
  /**  Search for the MeterReadingSourceHistoryRecord item with the matching ID.  */
  MeterReadingSourceHistoryRecord?: Maybe<MeterReadingSourceHistoryRecord>;
  /**  Perform a meta-query on all MeterReadingSourceHistoryRecord items which match the where clause.  */
  _allMeterReadingSourceHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MeterReadingSourceHistoryRecord list.  */
  _MeterReadingSourceHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all MeterReadingSource items which match the where clause.  */
  allMeterReadingSources?: Maybe<Array<Maybe<MeterReadingSource>>>;
  /**  Search for the MeterReadingSource item with the matching ID.  */
  MeterReadingSource?: Maybe<MeterReadingSource>;
  /**  Perform a meta-query on all MeterReadingSource items which match the where clause.  */
  _allMeterReadingSourcesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MeterReadingSource list.  */
  _MeterReadingSourcesMeta?: Maybe<_ListMeta>;
  /**  Search for all MeterReadingHistoryRecord items which match the where clause.  */
  allMeterReadingHistoryRecords?: Maybe<Array<Maybe<MeterReadingHistoryRecord>>>;
  /**  Search for the MeterReadingHistoryRecord item with the matching ID.  */
  MeterReadingHistoryRecord?: Maybe<MeterReadingHistoryRecord>;
  /**  Perform a meta-query on all MeterReadingHistoryRecord items which match the where clause.  */
  _allMeterReadingHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MeterReadingHistoryRecord list.  */
  _MeterReadingHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all MeterReading items which match the where clause.  */
  allMeterReadings?: Maybe<Array<Maybe<MeterReading>>>;
  /**  Search for the MeterReading item with the matching ID.  */
  MeterReading?: Maybe<MeterReading>;
  /**  Perform a meta-query on all MeterReading items which match the where clause.  */
  _allMeterReadingsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MeterReading list.  */
  _MeterReadingsMeta?: Maybe<_ListMeta>;
  /**  Search for all MeterHistoryRecord items which match the where clause.  */
  allMeterHistoryRecords?: Maybe<Array<Maybe<MeterHistoryRecord>>>;
  /**  Search for the MeterHistoryRecord item with the matching ID.  */
  MeterHistoryRecord?: Maybe<MeterHistoryRecord>;
  /**  Perform a meta-query on all MeterHistoryRecord items which match the where clause.  */
  _allMeterHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MeterHistoryRecord list.  */
  _MeterHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all Meter items which match the where clause.  */
  allMeters?: Maybe<Array<Maybe<Meter>>>;
  /**  Search for the Meter item with the matching ID.  */
  Meter?: Maybe<Meter>;
  /**  Perform a meta-query on all Meter items which match the where clause.  */
  _allMetersMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the Meter list.  */
  _MetersMeta?: Maybe<_ListMeta>;
  /**  Search for all MeterReadingFilterTemplateHistoryRecord items which match the where clause.  */
  allMeterReadingFilterTemplateHistoryRecords?: Maybe<Array<Maybe<MeterReadingFilterTemplateHistoryRecord>>>;
  /**  Search for the MeterReadingFilterTemplateHistoryRecord item with the matching ID.  */
  MeterReadingFilterTemplateHistoryRecord?: Maybe<MeterReadingFilterTemplateHistoryRecord>;
  /**  Perform a meta-query on all MeterReadingFilterTemplateHistoryRecord items which match the where clause.  */
  _allMeterReadingFilterTemplateHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MeterReadingFilterTemplateHistoryRecord list.  */
  _MeterReadingFilterTemplateHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all MeterReadingFilterTemplate items which match the where clause.  */
  allMeterReadingFilterTemplates?: Maybe<Array<Maybe<MeterReadingFilterTemplate>>>;
  /**  Search for the MeterReadingFilterTemplate item with the matching ID.  */
  MeterReadingFilterTemplate?: Maybe<MeterReadingFilterTemplate>;
  /**  Perform a meta-query on all MeterReadingFilterTemplate items which match the where clause.  */
  _allMeterReadingFilterTemplatesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MeterReadingFilterTemplate list.  */
  _MeterReadingFilterTemplatesMeta?: Maybe<_ListMeta>;
  /**  Search for all ServiceSubscriptionHistoryRecord items which match the where clause.  */
  allServiceSubscriptionHistoryRecords?: Maybe<Array<Maybe<ServiceSubscriptionHistoryRecord>>>;
  /**  Search for the ServiceSubscriptionHistoryRecord item with the matching ID.  */
  ServiceSubscriptionHistoryRecord?: Maybe<ServiceSubscriptionHistoryRecord>;
  /**  Perform a meta-query on all ServiceSubscriptionHistoryRecord items which match the where clause.  */
  _allServiceSubscriptionHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ServiceSubscriptionHistoryRecord list.  */
  _ServiceSubscriptionHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all ServiceSubscription items which match the where clause.  */
  allServiceSubscriptions?: Maybe<Array<Maybe<ServiceSubscription>>>;
  /**  Search for the ServiceSubscription item with the matching ID.  */
  ServiceSubscription?: Maybe<ServiceSubscription>;
  /**  Perform a meta-query on all ServiceSubscription items which match the where clause.  */
  _allServiceSubscriptionsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ServiceSubscription list.  */
  _ServiceSubscriptionsMeta?: Maybe<_ListMeta>;
  /**  Search for all AcquiringIntegrationHistoryRecord items which match the where clause.  */
  allAcquiringIntegrationHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationHistoryRecord>>>;
  /**  Search for the AcquiringIntegrationHistoryRecord item with the matching ID.  */
  AcquiringIntegrationHistoryRecord?: Maybe<AcquiringIntegrationHistoryRecord>;
  /**  Perform a meta-query on all AcquiringIntegrationHistoryRecord items which match the where clause.  */
  _allAcquiringIntegrationHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the AcquiringIntegrationHistoryRecord list.  */
  _AcquiringIntegrationHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all AcquiringIntegration items which match the where clause.  */
  allAcquiringIntegrations?: Maybe<Array<Maybe<AcquiringIntegration>>>;
  /**  Search for the AcquiringIntegration item with the matching ID.  */
  AcquiringIntegration?: Maybe<AcquiringIntegration>;
  /**  Perform a meta-query on all AcquiringIntegration items which match the where clause.  */
  _allAcquiringIntegrationsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the AcquiringIntegration list.  */
  _AcquiringIntegrationsMeta?: Maybe<_ListMeta>;
  /**  Search for all AcquiringIntegrationAccessRightHistoryRecord items which match the where clause.  */
  allAcquiringIntegrationAccessRightHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationAccessRightHistoryRecord>>>;
  /**  Search for the AcquiringIntegrationAccessRightHistoryRecord item with the matching ID.  */
  AcquiringIntegrationAccessRightHistoryRecord?: Maybe<AcquiringIntegrationAccessRightHistoryRecord>;
  /**  Perform a meta-query on all AcquiringIntegrationAccessRightHistoryRecord items which match the where clause.  */
  _allAcquiringIntegrationAccessRightHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the AcquiringIntegrationAccessRightHistoryRecord list.  */
  _AcquiringIntegrationAccessRightHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all AcquiringIntegrationAccessRight items which match the where clause.  */
  allAcquiringIntegrationAccessRights?: Maybe<Array<Maybe<AcquiringIntegrationAccessRight>>>;
  /**  Search for the AcquiringIntegrationAccessRight item with the matching ID.  */
  AcquiringIntegrationAccessRight?: Maybe<AcquiringIntegrationAccessRight>;
  /**  Perform a meta-query on all AcquiringIntegrationAccessRight items which match the where clause.  */
  _allAcquiringIntegrationAccessRightsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the AcquiringIntegrationAccessRight list.  */
  _AcquiringIntegrationAccessRightsMeta?: Maybe<_ListMeta>;
  /**  Search for all AcquiringIntegrationContextHistoryRecord items which match the where clause.  */
  allAcquiringIntegrationContextHistoryRecords?: Maybe<Array<Maybe<AcquiringIntegrationContextHistoryRecord>>>;
  /**  Search for the AcquiringIntegrationContextHistoryRecord item with the matching ID.  */
  AcquiringIntegrationContextHistoryRecord?: Maybe<AcquiringIntegrationContextHistoryRecord>;
  /**  Perform a meta-query on all AcquiringIntegrationContextHistoryRecord items which match the where clause.  */
  _allAcquiringIntegrationContextHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the AcquiringIntegrationContextHistoryRecord list.  */
  _AcquiringIntegrationContextHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all AcquiringIntegrationContext items which match the where clause.  */
  allAcquiringIntegrationContexts?: Maybe<Array<Maybe<AcquiringIntegrationContext>>>;
  /**  Search for the AcquiringIntegrationContext item with the matching ID.  */
  AcquiringIntegrationContext?: Maybe<AcquiringIntegrationContext>;
  /**  Perform a meta-query on all AcquiringIntegrationContext items which match the where clause.  */
  _allAcquiringIntegrationContextsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the AcquiringIntegrationContext list.  */
  _AcquiringIntegrationContextsMeta?: Maybe<_ListMeta>;
  /**  Search for all MultiPaymentHistoryRecord items which match the where clause.  */
  allMultiPaymentHistoryRecords?: Maybe<Array<Maybe<MultiPaymentHistoryRecord>>>;
  /**  Search for the MultiPaymentHistoryRecord item with the matching ID.  */
  MultiPaymentHistoryRecord?: Maybe<MultiPaymentHistoryRecord>;
  /**  Perform a meta-query on all MultiPaymentHistoryRecord items which match the where clause.  */
  _allMultiPaymentHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MultiPaymentHistoryRecord list.  */
  _MultiPaymentHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all MultiPayment items which match the where clause.  */
  allMultiPayments?: Maybe<Array<Maybe<MultiPayment>>>;
  /**  Search for the MultiPayment item with the matching ID.  */
  MultiPayment?: Maybe<MultiPayment>;
  /**  Perform a meta-query on all MultiPayment items which match the where clause.  */
  _allMultiPaymentsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MultiPayment list.  */
  _MultiPaymentsMeta?: Maybe<_ListMeta>;
  /**  Search for all PaymentHistoryRecord items which match the where clause.  */
  allPaymentHistoryRecords?: Maybe<Array<Maybe<PaymentHistoryRecord>>>;
  /**  Search for the PaymentHistoryRecord item with the matching ID.  */
  PaymentHistoryRecord?: Maybe<PaymentHistoryRecord>;
  /**  Perform a meta-query on all PaymentHistoryRecord items which match the where clause.  */
  _allPaymentHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the PaymentHistoryRecord list.  */
  _PaymentHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all Payment items which match the where clause.  */
  allPayments?: Maybe<Array<Maybe<Payment>>>;
  /**  Search for the Payment item with the matching ID.  */
  Payment?: Maybe<Payment>;
  /**  Perform a meta-query on all Payment items which match the where clause.  */
  _allPaymentsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the Payment list.  */
  _PaymentsMeta?: Maybe<_ListMeta>;
  /**  Search for all PaymentsFilterTemplateHistoryRecord items which match the where clause.  */
  allPaymentsFilterTemplateHistoryRecords?: Maybe<Array<Maybe<PaymentsFilterTemplateHistoryRecord>>>;
  /**  Search for the PaymentsFilterTemplateHistoryRecord item with the matching ID.  */
  PaymentsFilterTemplateHistoryRecord?: Maybe<PaymentsFilterTemplateHistoryRecord>;
  /**  Perform a meta-query on all PaymentsFilterTemplateHistoryRecord items which match the where clause.  */
  _allPaymentsFilterTemplateHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the PaymentsFilterTemplateHistoryRecord list.  */
  _PaymentsFilterTemplateHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all PaymentsFilterTemplate items which match the where clause.  */
  allPaymentsFilterTemplates?: Maybe<Array<Maybe<PaymentsFilterTemplate>>>;
  /**  Search for the PaymentsFilterTemplate item with the matching ID.  */
  PaymentsFilterTemplate?: Maybe<PaymentsFilterTemplate>;
  /**  Perform a meta-query on all PaymentsFilterTemplate items which match the where clause.  */
  _allPaymentsFilterTemplatesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the PaymentsFilterTemplate list.  */
  _PaymentsFilterTemplatesMeta?: Maybe<_ListMeta>;
  /**  Search for all RecurrentPaymentContextHistoryRecord items which match the where clause.  */
  allRecurrentPaymentContextHistoryRecords?: Maybe<Array<Maybe<RecurrentPaymentContextHistoryRecord>>>;
  /**  Search for the RecurrentPaymentContextHistoryRecord item with the matching ID.  */
  RecurrentPaymentContextHistoryRecord?: Maybe<RecurrentPaymentContextHistoryRecord>;
  /**  Perform a meta-query on all RecurrentPaymentContextHistoryRecord items which match the where clause.  */
  _allRecurrentPaymentContextHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the RecurrentPaymentContextHistoryRecord list.  */
  _RecurrentPaymentContextHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all RecurrentPaymentContext items which match the where clause.  */
  allRecurrentPaymentContexts?: Maybe<Array<Maybe<RecurrentPaymentContext>>>;
  /**  Search for the RecurrentPaymentContext item with the matching ID.  */
  RecurrentPaymentContext?: Maybe<RecurrentPaymentContext>;
  /**  Perform a meta-query on all RecurrentPaymentContext items which match the where clause.  */
  _allRecurrentPaymentContextsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the RecurrentPaymentContext list.  */
  _RecurrentPaymentContextsMeta?: Maybe<_ListMeta>;
  /**  Search for all RecurrentPaymentHistoryRecord items which match the where clause.  */
  allRecurrentPaymentHistoryRecords?: Maybe<Array<Maybe<RecurrentPaymentHistoryRecord>>>;
  /**  Search for the RecurrentPaymentHistoryRecord item with the matching ID.  */
  RecurrentPaymentHistoryRecord?: Maybe<RecurrentPaymentHistoryRecord>;
  /**  Perform a meta-query on all RecurrentPaymentHistoryRecord items which match the where clause.  */
  _allRecurrentPaymentHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the RecurrentPaymentHistoryRecord list.  */
  _RecurrentPaymentHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all RecurrentPayment items which match the where clause.  */
  allRecurrentPayments?: Maybe<Array<Maybe<RecurrentPayment>>>;
  /**  Search for the RecurrentPayment item with the matching ID.  */
  RecurrentPayment?: Maybe<RecurrentPayment>;
  /**  Perform a meta-query on all RecurrentPayment items which match the where clause.  */
  _allRecurrentPaymentsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the RecurrentPayment list.  */
  _RecurrentPaymentsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2BAppHistoryRecord items which match the where clause.  */
  allB2BAppHistoryRecords?: Maybe<Array<Maybe<B2BAppHistoryRecord>>>;
  /**  Search for the B2BAppHistoryRecord item with the matching ID.  */
  B2BAppHistoryRecord?: Maybe<B2BAppHistoryRecord>;
  /**  Perform a meta-query on all B2BAppHistoryRecord items which match the where clause.  */
  _allB2BAppHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2BAppHistoryRecord list.  */
  _B2BAppHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2BApp items which match the where clause.  */
  allB2BApps?: Maybe<Array<Maybe<B2BApp>>>;
  /**  Search for the B2BApp item with the matching ID.  */
  B2BApp?: Maybe<B2BApp>;
  /**  Perform a meta-query on all B2BApp items which match the where clause.  */
  _allB2BAppsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2BApp list.  */
  _B2BAppsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2BAppContextHistoryRecord items which match the where clause.  */
  allB2BAppContextHistoryRecords?: Maybe<Array<Maybe<B2BAppContextHistoryRecord>>>;
  /**  Search for the B2BAppContextHistoryRecord item with the matching ID.  */
  B2BAppContextHistoryRecord?: Maybe<B2BAppContextHistoryRecord>;
  /**  Perform a meta-query on all B2BAppContextHistoryRecord items which match the where clause.  */
  _allB2BAppContextHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2BAppContextHistoryRecord list.  */
  _B2BAppContextHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2BAppContext items which match the where clause.  */
  allB2BAppContexts?: Maybe<Array<Maybe<B2BAppContext>>>;
  /**  Search for the B2BAppContext item with the matching ID.  */
  B2BAppContext?: Maybe<B2BAppContext>;
  /**  Perform a meta-query on all B2BAppContext items which match the where clause.  */
  _allB2BAppContextsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2BAppContext list.  */
  _B2BAppContextsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2BAppAccessRightHistoryRecord items which match the where clause.  */
  allB2BAppAccessRightHistoryRecords?: Maybe<Array<Maybe<B2BAppAccessRightHistoryRecord>>>;
  /**  Search for the B2BAppAccessRightHistoryRecord item with the matching ID.  */
  B2BAppAccessRightHistoryRecord?: Maybe<B2BAppAccessRightHistoryRecord>;
  /**  Perform a meta-query on all B2BAppAccessRightHistoryRecord items which match the where clause.  */
  _allB2BAppAccessRightHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2BAppAccessRightHistoryRecord list.  */
  _B2BAppAccessRightHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2BAppAccessRight items which match the where clause.  */
  allB2BAppAccessRights?: Maybe<Array<Maybe<B2BAppAccessRight>>>;
  /**  Search for the B2BAppAccessRight item with the matching ID.  */
  B2BAppAccessRight?: Maybe<B2BAppAccessRight>;
  /**  Perform a meta-query on all B2BAppAccessRight items which match the where clause.  */
  _allB2BAppAccessRightsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2BAppAccessRight list.  */
  _B2BAppAccessRightsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2CAppHistoryRecord items which match the where clause.  */
  allB2CAppHistoryRecords?: Maybe<Array<Maybe<B2CAppHistoryRecord>>>;
  /**  Search for the B2CAppHistoryRecord item with the matching ID.  */
  B2CAppHistoryRecord?: Maybe<B2CAppHistoryRecord>;
  /**  Perform a meta-query on all B2CAppHistoryRecord items which match the where clause.  */
  _allB2CAppHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2CAppHistoryRecord list.  */
  _B2CAppHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2CApp items which match the where clause.  */
  allB2CApps?: Maybe<Array<Maybe<B2CApp>>>;
  /**  Search for the B2CApp item with the matching ID.  */
  B2CApp?: Maybe<B2CApp>;
  /**  Perform a meta-query on all B2CApp items which match the where clause.  */
  _allB2CAppsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2CApp list.  */
  _B2CAppsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2CAppAccessRightHistoryRecord items which match the where clause.  */
  allB2CAppAccessRightHistoryRecords?: Maybe<Array<Maybe<B2CAppAccessRightHistoryRecord>>>;
  /**  Search for the B2CAppAccessRightHistoryRecord item with the matching ID.  */
  B2CAppAccessRightHistoryRecord?: Maybe<B2CAppAccessRightHistoryRecord>;
  /**  Perform a meta-query on all B2CAppAccessRightHistoryRecord items which match the where clause.  */
  _allB2CAppAccessRightHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2CAppAccessRightHistoryRecord list.  */
  _B2CAppAccessRightHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2CAppAccessRight items which match the where clause.  */
  allB2CAppAccessRights?: Maybe<Array<Maybe<B2CAppAccessRight>>>;
  /**  Search for the B2CAppAccessRight item with the matching ID.  */
  B2CAppAccessRight?: Maybe<B2CAppAccessRight>;
  /**  Perform a meta-query on all B2CAppAccessRight items which match the where clause.  */
  _allB2CAppAccessRightsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2CAppAccessRight list.  */
  _B2CAppAccessRightsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2CAppBuildHistoryRecord items which match the where clause.  */
  allB2CAppBuildHistoryRecords?: Maybe<Array<Maybe<B2CAppBuildHistoryRecord>>>;
  /**  Search for the B2CAppBuildHistoryRecord item with the matching ID.  */
  B2CAppBuildHistoryRecord?: Maybe<B2CAppBuildHistoryRecord>;
  /**  Perform a meta-query on all B2CAppBuildHistoryRecord items which match the where clause.  */
  _allB2CAppBuildHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2CAppBuildHistoryRecord list.  */
  _B2CAppBuildHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2CAppBuild items which match the where clause.  */
  allB2CAppBuilds?: Maybe<Array<Maybe<B2CAppBuild>>>;
  /**  Search for the B2CAppBuild item with the matching ID.  */
  B2CAppBuild?: Maybe<B2CAppBuild>;
  /**  Perform a meta-query on all B2CAppBuild items which match the where clause.  */
  _allB2CAppBuildsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2CAppBuild list.  */
  _B2CAppBuildsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2CAppPropertyHistoryRecord items which match the where clause.  */
  allB2CAppPropertyHistoryRecords?: Maybe<Array<Maybe<B2CAppPropertyHistoryRecord>>>;
  /**  Search for the B2CAppPropertyHistoryRecord item with the matching ID.  */
  B2CAppPropertyHistoryRecord?: Maybe<B2CAppPropertyHistoryRecord>;
  /**  Perform a meta-query on all B2CAppPropertyHistoryRecord items which match the where clause.  */
  _allB2CAppPropertyHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2CAppPropertyHistoryRecord list.  */
  _B2CAppPropertyHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2CAppProperty items which match the where clause.  */
  allB2CAppProperties?: Maybe<Array<Maybe<B2CAppProperty>>>;
  /**  Search for the B2CAppProperty item with the matching ID.  */
  B2CAppProperty?: Maybe<B2CAppProperty>;
  /**  Perform a meta-query on all B2CAppProperty items which match the where clause.  */
  _allB2CAppPropertiesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2CAppProperty list.  */
  _B2CAppPropertiesMeta?: Maybe<_ListMeta>;
  /**  Search for all B2BAppPromoBlockHistoryRecord items which match the where clause.  */
  allB2BAppPromoBlockHistoryRecords?: Maybe<Array<Maybe<B2BAppPromoBlockHistoryRecord>>>;
  /**  Search for the B2BAppPromoBlockHistoryRecord item with the matching ID.  */
  B2BAppPromoBlockHistoryRecord?: Maybe<B2BAppPromoBlockHistoryRecord>;
  /**  Perform a meta-query on all B2BAppPromoBlockHistoryRecord items which match the where clause.  */
  _allB2BAppPromoBlockHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2BAppPromoBlockHistoryRecord list.  */
  _B2BAppPromoBlockHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all B2BAppPromoBlock items which match the where clause.  */
  allB2BAppPromoBlocks?: Maybe<Array<Maybe<B2BAppPromoBlock>>>;
  /**  Search for the B2BAppPromoBlock item with the matching ID.  */
  B2BAppPromoBlock?: Maybe<B2BAppPromoBlock>;
  /**  Perform a meta-query on all B2BAppPromoBlock items which match the where clause.  */
  _allB2BAppPromoBlocksMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the B2BAppPromoBlock list.  */
  _B2BAppPromoBlocksMeta?: Maybe<_ListMeta>;
  /**  Search for all MessageAppBlackListHistoryRecord items which match the where clause.  */
  allMessageAppBlackListHistoryRecords?: Maybe<Array<Maybe<MessageAppBlackListHistoryRecord>>>;
  /**  Search for the MessageAppBlackListHistoryRecord item with the matching ID.  */
  MessageAppBlackListHistoryRecord?: Maybe<MessageAppBlackListHistoryRecord>;
  /**  Perform a meta-query on all MessageAppBlackListHistoryRecord items which match the where clause.  */
  _allMessageAppBlackListHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MessageAppBlackListHistoryRecord list.  */
  _MessageAppBlackListHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all MessageAppBlackList items which match the where clause.  */
  allMessageAppBlackLists?: Maybe<Array<Maybe<MessageAppBlackList>>>;
  /**  Search for the MessageAppBlackList item with the matching ID.  */
  MessageAppBlackList?: Maybe<MessageAppBlackList>;
  /**  Perform a meta-query on all MessageAppBlackList items which match the where clause.  */
  _allMessageAppBlackListsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the MessageAppBlackList list.  */
  _MessageAppBlackListsMeta?: Maybe<_ListMeta>;
  /**  Search for all ExternalReportHistoryRecord items which match the where clause.  */
  allExternalReportHistoryRecords?: Maybe<Array<Maybe<ExternalReportHistoryRecord>>>;
  /**  Search for the ExternalReportHistoryRecord item with the matching ID.  */
  ExternalReportHistoryRecord?: Maybe<ExternalReportHistoryRecord>;
  /**  Perform a meta-query on all ExternalReportHistoryRecord items which match the where clause.  */
  _allExternalReportHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ExternalReportHistoryRecord list.  */
  _ExternalReportHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all ExternalReport items which match the where clause.  */
  allExternalReports?: Maybe<Array<Maybe<ExternalReport>>>;
  /**  Search for the ExternalReport item with the matching ID.  */
  ExternalReport?: Maybe<ExternalReport>;
  /**  Perform a meta-query on all ExternalReport items which match the where clause.  */
  _allExternalReportsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the ExternalReport list.  */
  _ExternalReportsMeta?: Maybe<_ListMeta>;
  /**  Search for all PropertyScopeHistoryRecord items which match the where clause.  */
  allPropertyScopeHistoryRecords?: Maybe<Array<Maybe<PropertyScopeHistoryRecord>>>;
  /**  Search for the PropertyScopeHistoryRecord item with the matching ID.  */
  PropertyScopeHistoryRecord?: Maybe<PropertyScopeHistoryRecord>;
  /**  Perform a meta-query on all PropertyScopeHistoryRecord items which match the where clause.  */
  _allPropertyScopeHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the PropertyScopeHistoryRecord list.  */
  _PropertyScopeHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all PropertyScope items which match the where clause.  */
  allPropertyScopes?: Maybe<Array<Maybe<PropertyScope>>>;
  /**  Search for the PropertyScope item with the matching ID.  */
  PropertyScope?: Maybe<PropertyScope>;
  /**  Perform a meta-query on all PropertyScope items which match the where clause.  */
  _allPropertyScopesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the PropertyScope list.  */
  _PropertyScopesMeta?: Maybe<_ListMeta>;
  /**  Search for all PropertyScopeOrganizationEmployeeHistoryRecord items which match the where clause.  */
  allPropertyScopeOrganizationEmployeeHistoryRecords?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployeeHistoryRecord>>>;
  /**  Search for the PropertyScopeOrganizationEmployeeHistoryRecord item with the matching ID.  */
  PropertyScopeOrganizationEmployeeHistoryRecord?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecord>;
  /**  Perform a meta-query on all PropertyScopeOrganizationEmployeeHistoryRecord items which match the where clause.  */
  _allPropertyScopeOrganizationEmployeeHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the PropertyScopeOrganizationEmployeeHistoryRecord list.  */
  _PropertyScopeOrganizationEmployeeHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all PropertyScopeOrganizationEmployee items which match the where clause.  */
  allPropertyScopeOrganizationEmployees?: Maybe<Array<Maybe<PropertyScopeOrganizationEmployee>>>;
  /**  Search for the PropertyScopeOrganizationEmployee item with the matching ID.  */
  PropertyScopeOrganizationEmployee?: Maybe<PropertyScopeOrganizationEmployee>;
  /**  Perform a meta-query on all PropertyScopeOrganizationEmployee items which match the where clause.  */
  _allPropertyScopeOrganizationEmployeesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the PropertyScopeOrganizationEmployee list.  */
  _PropertyScopeOrganizationEmployeesMeta?: Maybe<_ListMeta>;
  /**  Search for all PropertyScopePropertyHistoryRecord items which match the where clause.  */
  allPropertyScopePropertyHistoryRecords?: Maybe<Array<Maybe<PropertyScopePropertyHistoryRecord>>>;
  /**  Search for the PropertyScopePropertyHistoryRecord item with the matching ID.  */
  PropertyScopePropertyHistoryRecord?: Maybe<PropertyScopePropertyHistoryRecord>;
  /**  Perform a meta-query on all PropertyScopePropertyHistoryRecord items which match the where clause.  */
  _allPropertyScopePropertyHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the PropertyScopePropertyHistoryRecord list.  */
  _PropertyScopePropertyHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all PropertyScopeProperty items which match the where clause.  */
  allPropertyScopeProperties?: Maybe<Array<Maybe<PropertyScopeProperty>>>;
  /**  Search for the PropertyScopeProperty item with the matching ID.  */
  PropertyScopeProperty?: Maybe<PropertyScopeProperty>;
  /**  Perform a meta-query on all PropertyScopeProperty items which match the where clause.  */
  _allPropertyScopePropertiesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the PropertyScopeProperty list.  */
  _PropertyScopePropertiesMeta?: Maybe<_ListMeta>;
  /**  Search for all AssigneeScopeHistoryRecord items which match the where clause.  */
  allAssigneeScopeHistoryRecords?: Maybe<Array<Maybe<AssigneeScopeHistoryRecord>>>;
  /**  Search for the AssigneeScopeHistoryRecord item with the matching ID.  */
  AssigneeScopeHistoryRecord?: Maybe<AssigneeScopeHistoryRecord>;
  /**  Perform a meta-query on all AssigneeScopeHistoryRecord items which match the where clause.  */
  _allAssigneeScopeHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the AssigneeScopeHistoryRecord list.  */
  _AssigneeScopeHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all AssigneeScope items which match the where clause.  */
  allAssigneeScopes?: Maybe<Array<Maybe<AssigneeScope>>>;
  /**  Search for the AssigneeScope item with the matching ID.  */
  AssigneeScope?: Maybe<AssigneeScope>;
  /**  Perform a meta-query on all AssigneeScope items which match the where clause.  */
  _allAssigneeScopesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the AssigneeScope list.  */
  _AssigneeScopesMeta?: Maybe<_ListMeta>;
  /**  Search for all NewsItemHistoryRecord items which match the where clause.  */
  allNewsItemHistoryRecords?: Maybe<Array<Maybe<NewsItemHistoryRecord>>>;
  /**  Search for the NewsItemHistoryRecord item with the matching ID.  */
  NewsItemHistoryRecord?: Maybe<NewsItemHistoryRecord>;
  /**  Perform a meta-query on all NewsItemHistoryRecord items which match the where clause.  */
  _allNewsItemHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the NewsItemHistoryRecord list.  */
  _NewsItemHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all NewsItem items which match the where clause.  */
  allNewsItems?: Maybe<Array<Maybe<NewsItem>>>;
  /**  Search for the NewsItem item with the matching ID.  */
  NewsItem?: Maybe<NewsItem>;
  /**  Perform a meta-query on all NewsItem items which match the where clause.  */
  _allNewsItemsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the NewsItem list.  */
  _NewsItemsMeta?: Maybe<_ListMeta>;
  /**  Search for all NewsItemScopeHistoryRecord items which match the where clause.  */
  allNewsItemScopeHistoryRecords?: Maybe<Array<Maybe<NewsItemScopeHistoryRecord>>>;
  /**  Search for the NewsItemScopeHistoryRecord item with the matching ID.  */
  NewsItemScopeHistoryRecord?: Maybe<NewsItemScopeHistoryRecord>;
  /**  Perform a meta-query on all NewsItemScopeHistoryRecord items which match the where clause.  */
  _allNewsItemScopeHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the NewsItemScopeHistoryRecord list.  */
  _NewsItemScopeHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all NewsItemScope items which match the where clause.  */
  allNewsItemScopes?: Maybe<Array<Maybe<NewsItemScope>>>;
  /**  Search for the NewsItemScope item with the matching ID.  */
  NewsItemScope?: Maybe<NewsItemScope>;
  /**  Perform a meta-query on all NewsItemScope items which match the where clause.  */
  _allNewsItemScopesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the NewsItemScope list.  */
  _NewsItemScopesMeta?: Maybe<_ListMeta>;
  /**  Search for all NewsItemTemplateHistoryRecord items which match the where clause.  */
  allNewsItemTemplateHistoryRecords?: Maybe<Array<Maybe<NewsItemTemplateHistoryRecord>>>;
  /**  Search for the NewsItemTemplateHistoryRecord item with the matching ID.  */
  NewsItemTemplateHistoryRecord?: Maybe<NewsItemTemplateHistoryRecord>;
  /**  Perform a meta-query on all NewsItemTemplateHistoryRecord items which match the where clause.  */
  _allNewsItemTemplateHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the NewsItemTemplateHistoryRecord list.  */
  _NewsItemTemplateHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all NewsItemTemplate items which match the where clause.  */
  allNewsItemTemplates?: Maybe<Array<Maybe<NewsItemTemplate>>>;
  /**  Search for the NewsItemTemplate item with the matching ID.  */
  NewsItemTemplate?: Maybe<NewsItemTemplate>;
  /**  Perform a meta-query on all NewsItemTemplate items which match the where clause.  */
  _allNewsItemTemplatesMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the NewsItemTemplate list.  */
  _NewsItemTemplatesMeta?: Maybe<_ListMeta>;
  /**  Search for all NewsItemUserReadHistoryRecord items which match the where clause.  */
  allNewsItemUserReadHistoryRecords?: Maybe<Array<Maybe<NewsItemUserReadHistoryRecord>>>;
  /**  Search for the NewsItemUserReadHistoryRecord item with the matching ID.  */
  NewsItemUserReadHistoryRecord?: Maybe<NewsItemUserReadHistoryRecord>;
  /**  Perform a meta-query on all NewsItemUserReadHistoryRecord items which match the where clause.  */
  _allNewsItemUserReadHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the NewsItemUserReadHistoryRecord list.  */
  _NewsItemUserReadHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all NewsItemUserRead items which match the where clause.  */
  allNewsItemUserReads?: Maybe<Array<Maybe<NewsItemUserRead>>>;
  /**  Search for the NewsItemUserRead item with the matching ID.  */
  NewsItemUserRead?: Maybe<NewsItemUserRead>;
  /**  Perform a meta-query on all NewsItemUserRead items which match the where clause.  */
  _allNewsItemUserReadsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the NewsItemUserRead list.  */
  _NewsItemUserReadsMeta?: Maybe<_ListMeta>;
  /**  Search for all WebhookHistoryRecord items which match the where clause.  */
  allWebhookHistoryRecords?: Maybe<Array<Maybe<WebhookHistoryRecord>>>;
  /**  Search for the WebhookHistoryRecord item with the matching ID.  */
  WebhookHistoryRecord?: Maybe<WebhookHistoryRecord>;
  /**  Perform a meta-query on all WebhookHistoryRecord items which match the where clause.  */
  _allWebhookHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the WebhookHistoryRecord list.  */
  _WebhookHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all Webhook items which match the where clause.  */
  allWebhooks?: Maybe<Array<Maybe<Webhook>>>;
  /**  Search for the Webhook item with the matching ID.  */
  Webhook?: Maybe<Webhook>;
  /**  Perform a meta-query on all Webhook items which match the where clause.  */
  _allWebhooksMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the Webhook list.  */
  _WebhooksMeta?: Maybe<_ListMeta>;
  /**  Search for all WebhookSubscriptionHistoryRecord items which match the where clause.  */
  allWebhookSubscriptionHistoryRecords?: Maybe<Array<Maybe<WebhookSubscriptionHistoryRecord>>>;
  /**  Search for the WebhookSubscriptionHistoryRecord item with the matching ID.  */
  WebhookSubscriptionHistoryRecord?: Maybe<WebhookSubscriptionHistoryRecord>;
  /**  Perform a meta-query on all WebhookSubscriptionHistoryRecord items which match the where clause.  */
  _allWebhookSubscriptionHistoryRecordsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the WebhookSubscriptionHistoryRecord list.  */
  _WebhookSubscriptionHistoryRecordsMeta?: Maybe<_ListMeta>;
  /**  Search for all WebhookSubscription items which match the where clause.  */
  allWebhookSubscriptions?: Maybe<Array<Maybe<WebhookSubscription>>>;
  /**  Search for the WebhookSubscription item with the matching ID.  */
  WebhookSubscription?: Maybe<WebhookSubscription>;
  /**  Perform a meta-query on all WebhookSubscription items which match the where clause.  */
  _allWebhookSubscriptionsMeta?: Maybe<_QueryMeta>;
  /**  Retrieve the meta-data for the WebhookSubscription list.  */
  _WebhookSubscriptionsMeta?: Maybe<_ListMeta>;
  /**  Retrieve the meta-data for all lists.  */
  _ksListsMeta?: Maybe<Array<Maybe<_ListMeta>>>;
  /**
   * Tells, whether specified password recovery token is exists and not expired
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "mutation": "checkPasswordRecoveryToken",
   *   "variable": [
   *     "data",
   *     "token"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "TOKEN_NOT_FOUND",
   *   "message": "Unable to find non-expired token",
   *   "messageForUser": "api.user.checkPasswordRecoveryToken.TOKEN_NOT_FOUND"
   * }`
   */
  checkPasswordRecoveryToken?: Maybe<CheckPasswordRecoveryTokenOutput>;
  /**
   * Returns phone number information from ConfirmPhoneAction, that matches provided search conditions
   *
   *
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "variable": [
   *     "data",
   *     "captcha"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "CAPTCHA_CHECK_FAILED",
   *   "message": "Failed to check CAPTCHA",
   *   "messageForUser": "api.user.CAPTCHA_CHECK_FAILED"
   * }`
   *
   * `{
   *   "variable": [
   *     "data",
   *     "token"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "UNABLE_TO_FIND_CONFIRM_PHONE_ACTION",
   *   "message": "Confirm phone action was expired or it could not be found. Try to initiate phone confirmation again",
   *   "messageForUser": "api.user.UNABLE_TO_FIND_CONFIRM_PHONE_ACTION"
   * }`
   */
  getPhoneByConfirmPhoneActionToken?: Maybe<GetPhoneByConfirmPhoneActionTokenOutput>;
  getAccessTokenByUserId?: Maybe<GetAccessTokenByUserIdOutput>;
  /**
   * Tells, whether a Property with given address exists in condo database
   *
   * In specified address string a part up to building will be taken into account. So, it will make no sense when something more precise, like apartment number, will be specified.
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "query": "checkPropertyWithAddressExist",
   *   "variable": [
   *     "data",
   *     "addressMeta",
   *     "dv"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "DV_VERSION_MISMATCH",
   *   "message": "Version number value {dv} is incorrect"
   * }`
   *
   * `{
   *   "query": "checkPropertyWithAddressExist",
   *   "variable": [
   *     "data",
   *     "addressMeta",
   *     "flatType"
   *   ],
   *   "code": "BAD_USER_INPUT",
   *   "type": "FLAT_WITHOUT_FLAT_TYPE",
   *   "message": "Flat type is not specified"
   * }`
   */
  checkPropertyWithAddressExist?: Maybe<CheckPropertyWithAddressExistOutput>;
  exportPropertiesToExcel?: Maybe<ExportPropertiesToExcelOutput>;
  allResidentBillingReceipts?: Maybe<Array<Maybe<ResidentBillingReceiptOutput>>>;
  /**
   * Returns id of BankCostItem corresponding to specified payment purpose string
   *
   * Matching is performed by empirical model, implemented in external microservice "condo-classifier-api"
   *
   * **Errors**
   *
   * Following objects will be presented in `extensions` property of thrown error
   *
   * `{
   *   "query": "predictTransactionClassification",
   *   "code": "INTERNAL_ERROR",
   *   "type": "NOT_FOUND",
   *   "message": "Bank cost item not found",
   *   "messageForUser": "api.user.predictTransactionClassification.COST_ITEM_NOT_FOUND"
   * }`
   *
   * `{
   *   "query": "predictTransactionClassification",
   *   "code": "INTERNAL_ERROR",
   *   "type": "NOT_FOUND",
   *   "message": "Bank cost item not identify",
   *   "messageForUser": "api.user.predictTransactionClassification.COST_ITEM_NOT_IDENTIFY"
   * }`
   *
   * `{
   *   "query": "predictTransactionClassification",
   *   "code": "INTERNAL_ERROR",
   *   "type": "NOT_FOUND",
   *   "message": "Bank cost item isOutcome field not equal isOutcome field from transaction",
   *   "messageForUser": "api.user.predictTransactionClassification.COST_ITEM_IS_OUTCOME_NOT_EQUAL"
   * }`
   *
   * `{
   *   "query": "predictTransactionClassification",
   *   "code": "INTERNAL_ERROR",
   *   "type": "NOT_FOUND",
   *   "message": "ML server response is not successful",
   *   "messageForUser": "api.user.predictTransactionClassification.COST_ITEM_NOT_FOUND"
   * }`
   *
   * `{
   *   "query": "predictTransactionClassification",
   *   "code": "INTERNAL_ERROR",
   *   "type": "NOT_FOUND",
   *   "message": "ML_SPACE_TRANSACTION_CLASSIFIER env variable needs to have endpoint, authKey, workspace",
   *   "messageForUser": "api.user.predictTransactionClassification.ML_SPACE_NOT_CONFIGURED"
   * }`
   */
  predictTransactionClassification?: Maybe<PredictTransactionClassificationOutput>;
  predictTicketClassification?: Maybe<TicketClassifier>;
  exportMeterReadings?: Maybe<ExportMeterReadingsOutput>;
  exportPaymentsToExcel?: Maybe<ExportPaymentsToExcelOutput>;
  generatePaymentLink?: Maybe<GeneratePaymentLinkOutput>;
  _allPaymentsSum?: Maybe<PaymentsSumOutput>;
  allMiniApps?: Maybe<Array<MiniAppOutput>>;
  ticketReportWidgetData?: Maybe<TicketReportWidgetOutput>;
  ticketAnalyticsReport?: Maybe<TicketAnalyticsReportOutput>;
  exportTicketAnalyticsToExcel?: Maybe<ExportTicketAnalyticsToExcelOutput>;
  getExternalReportIframeUrl?: Maybe<GetExternalReportIframeUrlOutput>;
  exportPropertyScopesToExcel?: Maybe<ExportPropertyScopeToExcelOutput>;
  /** The version of the Keystone application serving this API. */
  appVersion?: Maybe<Scalars['String']>;
  authenticatedUser?: Maybe<User>;
};


export type QueryAllUserHistoryRecordsArgs = {
  where?: Maybe<UserHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryUserHistoryRecordArgs = {
  where: UserHistoryRecordWhereUniqueInput;
};


export type Query_AllUserHistoryRecordsMetaArgs = {
  where?: Maybe<UserHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllUsersArgs = {
  where?: Maybe<UserWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUsersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryUserArgs = {
  where: UserWhereUniqueInput;
};


export type Query_AllUsersMetaArgs = {
  where?: Maybe<UserWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUsersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllForgotPasswordActionHistoryRecordsArgs = {
  where?: Maybe<ForgotPasswordActionHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortForgotPasswordActionHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryForgotPasswordActionHistoryRecordArgs = {
  where: ForgotPasswordActionHistoryRecordWhereUniqueInput;
};


export type Query_AllForgotPasswordActionHistoryRecordsMetaArgs = {
  where?: Maybe<ForgotPasswordActionHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortForgotPasswordActionHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllForgotPasswordActionsArgs = {
  where?: Maybe<ForgotPasswordActionWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortForgotPasswordActionsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryForgotPasswordActionArgs = {
  where: ForgotPasswordActionWhereUniqueInput;
};


export type Query_AllForgotPasswordActionsMetaArgs = {
  where?: Maybe<ForgotPasswordActionWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortForgotPasswordActionsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllConfirmPhoneActionHistoryRecordsArgs = {
  where?: Maybe<ConfirmPhoneActionHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortConfirmPhoneActionHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryConfirmPhoneActionHistoryRecordArgs = {
  where: ConfirmPhoneActionHistoryRecordWhereUniqueInput;
};


export type Query_AllConfirmPhoneActionHistoryRecordsMetaArgs = {
  where?: Maybe<ConfirmPhoneActionHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortConfirmPhoneActionHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllConfirmPhoneActionsArgs = {
  where?: Maybe<ConfirmPhoneActionWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortConfirmPhoneActionsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryConfirmPhoneActionArgs = {
  where: ConfirmPhoneActionWhereUniqueInput;
};


export type Query_AllConfirmPhoneActionsMetaArgs = {
  where?: Maybe<ConfirmPhoneActionWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortConfirmPhoneActionsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOidcClientHistoryRecordsArgs = {
  where?: Maybe<OidcClientHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOidcClientHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOidcClientHistoryRecordArgs = {
  where: OidcClientHistoryRecordWhereUniqueInput;
};


export type Query_AllOidcClientHistoryRecordsMetaArgs = {
  where?: Maybe<OidcClientHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOidcClientHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOidcClientsArgs = {
  where?: Maybe<OidcClientWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOidcClientsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOidcClientArgs = {
  where: OidcClientWhereUniqueInput;
};


export type Query_AllOidcClientsMetaArgs = {
  where?: Maybe<OidcClientWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOidcClientsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllUserExternalIdentityHistoryRecordsArgs = {
  where?: Maybe<UserExternalIdentityHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserExternalIdentityHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryUserExternalIdentityHistoryRecordArgs = {
  where: UserExternalIdentityHistoryRecordWhereUniqueInput;
};


export type Query_AllUserExternalIdentityHistoryRecordsMetaArgs = {
  where?: Maybe<UserExternalIdentityHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserExternalIdentityHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllUserExternalIdentitiesArgs = {
  where?: Maybe<UserExternalIdentityWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserExternalIdentitiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryUserExternalIdentityArgs = {
  where: UserExternalIdentityWhereUniqueInput;
};


export type Query_AllUserExternalIdentitiesMetaArgs = {
  where?: Maybe<UserExternalIdentityWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserExternalIdentitiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllExternalTokenAccessRightHistoryRecordsArgs = {
  where?: Maybe<ExternalTokenAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortExternalTokenAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryExternalTokenAccessRightHistoryRecordArgs = {
  where: ExternalTokenAccessRightHistoryRecordWhereUniqueInput;
};


export type Query_AllExternalTokenAccessRightHistoryRecordsMetaArgs = {
  where?: Maybe<ExternalTokenAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortExternalTokenAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllExternalTokenAccessRightsArgs = {
  where?: Maybe<ExternalTokenAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortExternalTokenAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryExternalTokenAccessRightArgs = {
  where: ExternalTokenAccessRightWhereUniqueInput;
};


export type Query_AllExternalTokenAccessRightsMetaArgs = {
  where?: Maybe<ExternalTokenAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortExternalTokenAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOrganizationHistoryRecordsArgs = {
  where?: Maybe<OrganizationHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOrganizationHistoryRecordArgs = {
  where: OrganizationHistoryRecordWhereUniqueInput;
};


export type Query_AllOrganizationHistoryRecordsMetaArgs = {
  where?: Maybe<OrganizationHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOrganizationsArgs = {
  where?: Maybe<OrganizationWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOrganizationArgs = {
  where: OrganizationWhereUniqueInput;
};


export type Query_AllOrganizationsMetaArgs = {
  where?: Maybe<OrganizationWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOrganizationEmployeeHistoryRecordsArgs = {
  where?: Maybe<OrganizationEmployeeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOrganizationEmployeeHistoryRecordArgs = {
  where: OrganizationEmployeeHistoryRecordWhereUniqueInput;
};


export type Query_AllOrganizationEmployeeHistoryRecordsMetaArgs = {
  where?: Maybe<OrganizationEmployeeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOrganizationEmployeesArgs = {
  where?: Maybe<OrganizationEmployeeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOrganizationEmployeeArgs = {
  where: OrganizationEmployeeWhereUniqueInput;
};


export type Query_AllOrganizationEmployeesMetaArgs = {
  where?: Maybe<OrganizationEmployeeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOrganizationEmployeeRoleHistoryRecordsArgs = {
  where?: Maybe<OrganizationEmployeeRoleHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeeRoleHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOrganizationEmployeeRoleHistoryRecordArgs = {
  where: OrganizationEmployeeRoleHistoryRecordWhereUniqueInput;
};


export type Query_AllOrganizationEmployeeRoleHistoryRecordsMetaArgs = {
  where?: Maybe<OrganizationEmployeeRoleHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeeRoleHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOrganizationEmployeeRolesArgs = {
  where?: Maybe<OrganizationEmployeeRoleWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeeRolesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOrganizationEmployeeRoleArgs = {
  where: OrganizationEmployeeRoleWhereUniqueInput;
};


export type Query_AllOrganizationEmployeeRolesMetaArgs = {
  where?: Maybe<OrganizationEmployeeRoleWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeeRolesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOrganizationLinkHistoryRecordsArgs = {
  where?: Maybe<OrganizationLinkHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationLinkHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOrganizationLinkHistoryRecordArgs = {
  where: OrganizationLinkHistoryRecordWhereUniqueInput;
};


export type Query_AllOrganizationLinkHistoryRecordsMetaArgs = {
  where?: Maybe<OrganizationLinkHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationLinkHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOrganizationLinksArgs = {
  where?: Maybe<OrganizationLinkWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationLinksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOrganizationLinkArgs = {
  where: OrganizationLinkWhereUniqueInput;
};


export type Query_AllOrganizationLinksMetaArgs = {
  where?: Maybe<OrganizationLinkWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationLinksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOrganizationEmployeeSpecializationHistoryRecordsArgs = {
  where?: Maybe<OrganizationEmployeeSpecializationHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeeSpecializationHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOrganizationEmployeeSpecializationHistoryRecordArgs = {
  where: OrganizationEmployeeSpecializationHistoryRecordWhereUniqueInput;
};


export type Query_AllOrganizationEmployeeSpecializationHistoryRecordsMetaArgs = {
  where?: Maybe<OrganizationEmployeeSpecializationHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeeSpecializationHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOrganizationEmployeeSpecializationsArgs = {
  where?: Maybe<OrganizationEmployeeSpecializationWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeeSpecializationsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOrganizationEmployeeSpecializationArgs = {
  where: OrganizationEmployeeSpecializationWhereUniqueInput;
};


export type Query_AllOrganizationEmployeeSpecializationsMetaArgs = {
  where?: Maybe<OrganizationEmployeeSpecializationWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOrganizationEmployeeSpecializationsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPropertyHistoryRecordsArgs = {
  where?: Maybe<PropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPropertyHistoryRecordArgs = {
  where: PropertyHistoryRecordWhereUniqueInput;
};


export type Query_AllPropertyHistoryRecordsMetaArgs = {
  where?: Maybe<PropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPropertiesArgs = {
  where?: Maybe<PropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPropertyArgs = {
  where: PropertyWhereUniqueInput;
};


export type Query_AllPropertiesMetaArgs = {
  where?: Maybe<PropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingIntegrationHistoryRecordsArgs = {
  where?: Maybe<BillingIntegrationHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingIntegrationHistoryRecordArgs = {
  where: BillingIntegrationHistoryRecordWhereUniqueInput;
};


export type Query_AllBillingIntegrationHistoryRecordsMetaArgs = {
  where?: Maybe<BillingIntegrationHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingIntegrationsArgs = {
  where?: Maybe<BillingIntegrationWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingIntegrationArgs = {
  where: BillingIntegrationWhereUniqueInput;
};


export type Query_AllBillingIntegrationsMetaArgs = {
  where?: Maybe<BillingIntegrationWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingIntegrationAccessRightHistoryRecordsArgs = {
  where?: Maybe<BillingIntegrationAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingIntegrationAccessRightHistoryRecordArgs = {
  where: BillingIntegrationAccessRightHistoryRecordWhereUniqueInput;
};


export type Query_AllBillingIntegrationAccessRightHistoryRecordsMetaArgs = {
  where?: Maybe<BillingIntegrationAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingIntegrationAccessRightsArgs = {
  where?: Maybe<BillingIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingIntegrationAccessRightArgs = {
  where: BillingIntegrationAccessRightWhereUniqueInput;
};


export type Query_AllBillingIntegrationAccessRightsMetaArgs = {
  where?: Maybe<BillingIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingIntegrationOrganizationContextHistoryRecordsArgs = {
  where?: Maybe<BillingIntegrationOrganizationContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationOrganizationContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingIntegrationOrganizationContextHistoryRecordArgs = {
  where: BillingIntegrationOrganizationContextHistoryRecordWhereUniqueInput;
};


export type Query_AllBillingIntegrationOrganizationContextHistoryRecordsMetaArgs = {
  where?: Maybe<BillingIntegrationOrganizationContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationOrganizationContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingIntegrationOrganizationContextsArgs = {
  where?: Maybe<BillingIntegrationOrganizationContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationOrganizationContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingIntegrationOrganizationContextArgs = {
  where: BillingIntegrationOrganizationContextWhereUniqueInput;
};


export type Query_AllBillingIntegrationOrganizationContextsMetaArgs = {
  where?: Maybe<BillingIntegrationOrganizationContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationOrganizationContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingIntegrationProblemsArgs = {
  where?: Maybe<BillingIntegrationProblemWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationProblemsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingIntegrationProblemArgs = {
  where: BillingIntegrationProblemWhereUniqueInput;
};


export type Query_AllBillingIntegrationProblemsMetaArgs = {
  where?: Maybe<BillingIntegrationProblemWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingIntegrationProblemsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingPropertyHistoryRecordsArgs = {
  where?: Maybe<BillingPropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingPropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingPropertyHistoryRecordArgs = {
  where: BillingPropertyHistoryRecordWhereUniqueInput;
};


export type Query_AllBillingPropertyHistoryRecordsMetaArgs = {
  where?: Maybe<BillingPropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingPropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingPropertiesArgs = {
  where?: Maybe<BillingPropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingPropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingPropertyArgs = {
  where: BillingPropertyWhereUniqueInput;
};


export type Query_AllBillingPropertiesMetaArgs = {
  where?: Maybe<BillingPropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingPropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingAccountHistoryRecordsArgs = {
  where?: Maybe<BillingAccountHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingAccountHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingAccountHistoryRecordArgs = {
  where: BillingAccountHistoryRecordWhereUniqueInput;
};


export type Query_AllBillingAccountHistoryRecordsMetaArgs = {
  where?: Maybe<BillingAccountHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingAccountHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingAccountsArgs = {
  where?: Maybe<BillingAccountWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingAccountsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingAccountArgs = {
  where: BillingAccountWhereUniqueInput;
};


export type Query_AllBillingAccountsMetaArgs = {
  where?: Maybe<BillingAccountWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingAccountsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingReceiptHistoryRecordsArgs = {
  where?: Maybe<BillingReceiptHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingReceiptHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingReceiptHistoryRecordArgs = {
  where: BillingReceiptHistoryRecordWhereUniqueInput;
};


export type Query_AllBillingReceiptHistoryRecordsMetaArgs = {
  where?: Maybe<BillingReceiptHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingReceiptHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingReceiptsArgs = {
  where?: Maybe<BillingReceiptWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingReceiptsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingReceiptArgs = {
  where: BillingReceiptWhereUniqueInput;
};


export type Query_AllBillingReceiptsMetaArgs = {
  where?: Maybe<BillingReceiptWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingReceiptsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingRecipientHistoryRecordsArgs = {
  where?: Maybe<BillingRecipientHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingRecipientHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingRecipientHistoryRecordArgs = {
  where: BillingRecipientHistoryRecordWhereUniqueInput;
};


export type Query_AllBillingRecipientHistoryRecordsMetaArgs = {
  where?: Maybe<BillingRecipientHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingRecipientHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingRecipientsArgs = {
  where?: Maybe<BillingRecipientWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingRecipientsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingRecipientArgs = {
  where: BillingRecipientWhereUniqueInput;
};


export type Query_AllBillingRecipientsMetaArgs = {
  where?: Maybe<BillingRecipientWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingRecipientsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingCategoryHistoryRecordsArgs = {
  where?: Maybe<BillingCategoryHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingCategoryHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingCategoryHistoryRecordArgs = {
  where: BillingCategoryHistoryRecordWhereUniqueInput;
};


export type Query_AllBillingCategoryHistoryRecordsMetaArgs = {
  where?: Maybe<BillingCategoryHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingCategoryHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBillingCategoriesArgs = {
  where?: Maybe<BillingCategoryWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingCategoriesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBillingCategoryArgs = {
  where: BillingCategoryWhereUniqueInput;
};


export type Query_AllBillingCategoriesMetaArgs = {
  where?: Maybe<BillingCategoryWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBillingCategoriesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankAccountHistoryRecordsArgs = {
  where?: Maybe<BankAccountHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankAccountHistoryRecordArgs = {
  where: BankAccountHistoryRecordWhereUniqueInput;
};


export type Query_AllBankAccountHistoryRecordsMetaArgs = {
  where?: Maybe<BankAccountHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankAccountsArgs = {
  where?: Maybe<BankAccountWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankAccountArgs = {
  where: BankAccountWhereUniqueInput;
};


export type Query_AllBankAccountsMetaArgs = {
  where?: Maybe<BankAccountWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankCategoryHistoryRecordsArgs = {
  where?: Maybe<BankCategoryHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankCategoryHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankCategoryHistoryRecordArgs = {
  where: BankCategoryHistoryRecordWhereUniqueInput;
};


export type Query_AllBankCategoryHistoryRecordsMetaArgs = {
  where?: Maybe<BankCategoryHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankCategoryHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankCategoriesArgs = {
  where?: Maybe<BankCategoryWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankCategoriesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankCategoryArgs = {
  where: BankCategoryWhereUniqueInput;
};


export type Query_AllBankCategoriesMetaArgs = {
  where?: Maybe<BankCategoryWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankCategoriesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankCostItemHistoryRecordsArgs = {
  where?: Maybe<BankCostItemHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankCostItemHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankCostItemHistoryRecordArgs = {
  where: BankCostItemHistoryRecordWhereUniqueInput;
};


export type Query_AllBankCostItemHistoryRecordsMetaArgs = {
  where?: Maybe<BankCostItemHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankCostItemHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankCostItemsArgs = {
  where?: Maybe<BankCostItemWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankCostItemsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankCostItemArgs = {
  where: BankCostItemWhereUniqueInput;
};


export type Query_AllBankCostItemsMetaArgs = {
  where?: Maybe<BankCostItemWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankCostItemsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankContractorAccountHistoryRecordsArgs = {
  where?: Maybe<BankContractorAccountHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankContractorAccountHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankContractorAccountHistoryRecordArgs = {
  where: BankContractorAccountHistoryRecordWhereUniqueInput;
};


export type Query_AllBankContractorAccountHistoryRecordsMetaArgs = {
  where?: Maybe<BankContractorAccountHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankContractorAccountHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankContractorAccountsArgs = {
  where?: Maybe<BankContractorAccountWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankContractorAccountsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankContractorAccountArgs = {
  where: BankContractorAccountWhereUniqueInput;
};


export type Query_AllBankContractorAccountsMetaArgs = {
  where?: Maybe<BankContractorAccountWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankContractorAccountsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankIntegrationHistoryRecordsArgs = {
  where?: Maybe<BankIntegrationHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankIntegrationHistoryRecordArgs = {
  where: BankIntegrationHistoryRecordWhereUniqueInput;
};


export type Query_AllBankIntegrationHistoryRecordsMetaArgs = {
  where?: Maybe<BankIntegrationHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankIntegrationsArgs = {
  where?: Maybe<BankIntegrationWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankIntegrationArgs = {
  where: BankIntegrationWhereUniqueInput;
};


export type Query_AllBankIntegrationsMetaArgs = {
  where?: Maybe<BankIntegrationWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankIntegrationAccessRightHistoryRecordsArgs = {
  where?: Maybe<BankIntegrationAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankIntegrationAccessRightHistoryRecordArgs = {
  where: BankIntegrationAccessRightHistoryRecordWhereUniqueInput;
};


export type Query_AllBankIntegrationAccessRightHistoryRecordsMetaArgs = {
  where?: Maybe<BankIntegrationAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankIntegrationAccessRightsArgs = {
  where?: Maybe<BankIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankIntegrationAccessRightArgs = {
  where: BankIntegrationAccessRightWhereUniqueInput;
};


export type Query_AllBankIntegrationAccessRightsMetaArgs = {
  where?: Maybe<BankIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankIntegrationAccountContextHistoryRecordsArgs = {
  where?: Maybe<BankIntegrationAccountContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationAccountContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankIntegrationAccountContextHistoryRecordArgs = {
  where: BankIntegrationAccountContextHistoryRecordWhereUniqueInput;
};


export type Query_AllBankIntegrationAccountContextHistoryRecordsMetaArgs = {
  where?: Maybe<BankIntegrationAccountContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationAccountContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankIntegrationAccountContextsArgs = {
  where?: Maybe<BankIntegrationAccountContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationAccountContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankIntegrationAccountContextArgs = {
  where: BankIntegrationAccountContextWhereUniqueInput;
};


export type Query_AllBankIntegrationAccountContextsMetaArgs = {
  where?: Maybe<BankIntegrationAccountContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationAccountContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankTransactionHistoryRecordsArgs = {
  where?: Maybe<BankTransactionHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankTransactionHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankTransactionHistoryRecordArgs = {
  where: BankTransactionHistoryRecordWhereUniqueInput;
};


export type Query_AllBankTransactionHistoryRecordsMetaArgs = {
  where?: Maybe<BankTransactionHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankTransactionHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankTransactionsArgs = {
  where?: Maybe<BankTransactionWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankTransactionsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankTransactionArgs = {
  where: BankTransactionWhereUniqueInput;
};


export type Query_AllBankTransactionsMetaArgs = {
  where?: Maybe<BankTransactionWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankTransactionsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankSyncTaskHistoryRecordsArgs = {
  where?: Maybe<BankSyncTaskHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankSyncTaskHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankSyncTaskHistoryRecordArgs = {
  where: BankSyncTaskHistoryRecordWhereUniqueInput;
};


export type Query_AllBankSyncTaskHistoryRecordsMetaArgs = {
  where?: Maybe<BankSyncTaskHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankSyncTaskHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankSyncTasksArgs = {
  where?: Maybe<BankSyncTaskWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankSyncTasksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankSyncTaskArgs = {
  where: BankSyncTaskWhereUniqueInput;
};


export type Query_AllBankSyncTasksMetaArgs = {
  where?: Maybe<BankSyncTaskWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankSyncTasksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankIntegrationOrganizationContextHistoryRecordsArgs = {
  where?: Maybe<BankIntegrationOrganizationContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationOrganizationContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankIntegrationOrganizationContextHistoryRecordArgs = {
  where: BankIntegrationOrganizationContextHistoryRecordWhereUniqueInput;
};


export type Query_AllBankIntegrationOrganizationContextHistoryRecordsMetaArgs = {
  where?: Maybe<BankIntegrationOrganizationContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationOrganizationContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankIntegrationOrganizationContextsArgs = {
  where?: Maybe<BankIntegrationOrganizationContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationOrganizationContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankIntegrationOrganizationContextArgs = {
  where: BankIntegrationOrganizationContextWhereUniqueInput;
};


export type Query_AllBankIntegrationOrganizationContextsMetaArgs = {
  where?: Maybe<BankIntegrationOrganizationContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankIntegrationOrganizationContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankAccountReportHistoryRecordsArgs = {
  where?: Maybe<BankAccountReportHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountReportHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankAccountReportHistoryRecordArgs = {
  where: BankAccountReportHistoryRecordWhereUniqueInput;
};


export type Query_AllBankAccountReportHistoryRecordsMetaArgs = {
  where?: Maybe<BankAccountReportHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountReportHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankAccountReportsArgs = {
  where?: Maybe<BankAccountReportWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountReportsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankAccountReportArgs = {
  where: BankAccountReportWhereUniqueInput;
};


export type Query_AllBankAccountReportsMetaArgs = {
  where?: Maybe<BankAccountReportWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountReportsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankAccountReportTaskHistoryRecordsArgs = {
  where?: Maybe<BankAccountReportTaskHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountReportTaskHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankAccountReportTaskHistoryRecordArgs = {
  where: BankAccountReportTaskHistoryRecordWhereUniqueInput;
};


export type Query_AllBankAccountReportTaskHistoryRecordsMetaArgs = {
  where?: Maybe<BankAccountReportTaskHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountReportTaskHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllBankAccountReportTasksArgs = {
  where?: Maybe<BankAccountReportTaskWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountReportTasksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryBankAccountReportTaskArgs = {
  where: BankAccountReportTaskWhereUniqueInput;
};


export type Query_AllBankAccountReportTasksMetaArgs = {
  where?: Maybe<BankAccountReportTaskWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortBankAccountReportTasksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketHistoryRecordsArgs = {
  where?: Maybe<TicketHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketHistoryRecordArgs = {
  where: TicketHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketHistoryRecordsMetaArgs = {
  where?: Maybe<TicketHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketsArgs = {
  where?: Maybe<TicketWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketArgs = {
  where: TicketWhereUniqueInput;
};


export type Query_AllTicketsMetaArgs = {
  where?: Maybe<TicketWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketSourceHistoryRecordsArgs = {
  where?: Maybe<TicketSourceHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketSourceHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketSourceHistoryRecordArgs = {
  where: TicketSourceHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketSourceHistoryRecordsMetaArgs = {
  where?: Maybe<TicketSourceHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketSourceHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketSourcesArgs = {
  where?: Maybe<TicketSourceWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketSourcesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketSourceArgs = {
  where: TicketSourceWhereUniqueInput;
};


export type Query_AllTicketSourcesMetaArgs = {
  where?: Maybe<TicketSourceWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketSourcesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketStatusHistoryRecordsArgs = {
  where?: Maybe<TicketStatusHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketStatusHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketStatusHistoryRecordArgs = {
  where: TicketStatusHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketStatusHistoryRecordsMetaArgs = {
  where?: Maybe<TicketStatusHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketStatusHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketStatusesArgs = {
  where?: Maybe<TicketStatusWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketStatusesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketStatusArgs = {
  where: TicketStatusWhereUniqueInput;
};


export type Query_AllTicketStatusesMetaArgs = {
  where?: Maybe<TicketStatusWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketStatusesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketFileHistoryRecordsArgs = {
  where?: Maybe<TicketFileHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketFileHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketFileHistoryRecordArgs = {
  where: TicketFileHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketFileHistoryRecordsMetaArgs = {
  where?: Maybe<TicketFileHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketFileHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketFilesArgs = {
  where?: Maybe<TicketFileWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketFilesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketFileArgs = {
  where: TicketFileWhereUniqueInput;
};


export type Query_AllTicketFilesMetaArgs = {
  where?: Maybe<TicketFileWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketFilesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketChangesArgs = {
  where?: Maybe<TicketChangeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketChangesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketChangeArgs = {
  where: TicketChangeWhereUniqueInput;
};


export type Query_AllTicketChangesMetaArgs = {
  where?: Maybe<TicketChangeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketChangesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketCommentHistoryRecordsArgs = {
  where?: Maybe<TicketCommentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketCommentHistoryRecordArgs = {
  where: TicketCommentHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketCommentHistoryRecordsMetaArgs = {
  where?: Maybe<TicketCommentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketCommentsArgs = {
  where?: Maybe<TicketCommentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketCommentArgs = {
  where: TicketCommentWhereUniqueInput;
};


export type Query_AllTicketCommentsMetaArgs = {
  where?: Maybe<TicketCommentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketPlaceClassifierHistoryRecordsArgs = {
  where?: Maybe<TicketPlaceClassifierHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPlaceClassifierHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketPlaceClassifierHistoryRecordArgs = {
  where: TicketPlaceClassifierHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketPlaceClassifierHistoryRecordsMetaArgs = {
  where?: Maybe<TicketPlaceClassifierHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPlaceClassifierHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketPlaceClassifiersArgs = {
  where?: Maybe<TicketPlaceClassifierWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPlaceClassifiersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketPlaceClassifierArgs = {
  where: TicketPlaceClassifierWhereUniqueInput;
};


export type Query_AllTicketPlaceClassifiersMetaArgs = {
  where?: Maybe<TicketPlaceClassifierWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPlaceClassifiersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketCategoryClassifierHistoryRecordsArgs = {
  where?: Maybe<TicketCategoryClassifierHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCategoryClassifierHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketCategoryClassifierHistoryRecordArgs = {
  where: TicketCategoryClassifierHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketCategoryClassifierHistoryRecordsMetaArgs = {
  where?: Maybe<TicketCategoryClassifierHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCategoryClassifierHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketCategoryClassifiersArgs = {
  where?: Maybe<TicketCategoryClassifierWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCategoryClassifiersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketCategoryClassifierArgs = {
  where: TicketCategoryClassifierWhereUniqueInput;
};


export type Query_AllTicketCategoryClassifiersMetaArgs = {
  where?: Maybe<TicketCategoryClassifierWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCategoryClassifiersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketProblemClassifierHistoryRecordsArgs = {
  where?: Maybe<TicketProblemClassifierHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketProblemClassifierHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketProblemClassifierHistoryRecordArgs = {
  where: TicketProblemClassifierHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketProblemClassifierHistoryRecordsMetaArgs = {
  where?: Maybe<TicketProblemClassifierHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketProblemClassifierHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketProblemClassifiersArgs = {
  where?: Maybe<TicketProblemClassifierWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketProblemClassifiersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketProblemClassifierArgs = {
  where: TicketProblemClassifierWhereUniqueInput;
};


export type Query_AllTicketProblemClassifiersMetaArgs = {
  where?: Maybe<TicketProblemClassifierWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketProblemClassifiersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketClassifierHistoryRecordsArgs = {
  where?: Maybe<TicketClassifierHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketClassifierHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketClassifierHistoryRecordArgs = {
  where: TicketClassifierHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketClassifierHistoryRecordsMetaArgs = {
  where?: Maybe<TicketClassifierHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketClassifierHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketClassifiersArgs = {
  where?: Maybe<TicketClassifierWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketClassifiersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketClassifierArgs = {
  where: TicketClassifierWhereUniqueInput;
};


export type Query_AllTicketClassifiersMetaArgs = {
  where?: Maybe<TicketClassifierWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketClassifiersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketFilterTemplateHistoryRecordsArgs = {
  where?: Maybe<TicketFilterTemplateHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketFilterTemplateHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketFilterTemplateHistoryRecordArgs = {
  where: TicketFilterTemplateHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketFilterTemplateHistoryRecordsMetaArgs = {
  where?: Maybe<TicketFilterTemplateHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketFilterTemplateHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketFilterTemplatesArgs = {
  where?: Maybe<TicketFilterTemplateWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketFilterTemplatesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketFilterTemplateArgs = {
  where: TicketFilterTemplateWhereUniqueInput;
};


export type Query_AllTicketFilterTemplatesMetaArgs = {
  where?: Maybe<TicketFilterTemplateWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketFilterTemplatesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketCommentFileHistoryRecordsArgs = {
  where?: Maybe<TicketCommentFileHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentFileHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketCommentFileHistoryRecordArgs = {
  where: TicketCommentFileHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketCommentFileHistoryRecordsMetaArgs = {
  where?: Maybe<TicketCommentFileHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentFileHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketCommentFilesArgs = {
  where?: Maybe<TicketCommentFileWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentFilesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketCommentFileArgs = {
  where: TicketCommentFileWhereUniqueInput;
};


export type Query_AllTicketCommentFilesMetaArgs = {
  where?: Maybe<TicketCommentFileWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentFilesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketCommentsTimeHistoryRecordsArgs = {
  where?: Maybe<TicketCommentsTimeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentsTimeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketCommentsTimeHistoryRecordArgs = {
  where: TicketCommentsTimeHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketCommentsTimeHistoryRecordsMetaArgs = {
  where?: Maybe<TicketCommentsTimeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentsTimeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketCommentsTimesArgs = {
  where?: Maybe<TicketCommentsTimeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentsTimesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketCommentsTimeArgs = {
  where: TicketCommentsTimeWhereUniqueInput;
};


export type Query_AllTicketCommentsTimesMetaArgs = {
  where?: Maybe<TicketCommentsTimeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketCommentsTimesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllUserTicketCommentReadTimeHistoryRecordsArgs = {
  where?: Maybe<UserTicketCommentReadTimeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserTicketCommentReadTimeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryUserTicketCommentReadTimeHistoryRecordArgs = {
  where: UserTicketCommentReadTimeHistoryRecordWhereUniqueInput;
};


export type Query_AllUserTicketCommentReadTimeHistoryRecordsMetaArgs = {
  where?: Maybe<UserTicketCommentReadTimeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserTicketCommentReadTimeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllUserTicketCommentReadTimesArgs = {
  where?: Maybe<UserTicketCommentReadTimeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserTicketCommentReadTimesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryUserTicketCommentReadTimeArgs = {
  where: UserTicketCommentReadTimeWhereUniqueInput;
};


export type Query_AllUserTicketCommentReadTimesMetaArgs = {
  where?: Maybe<UserTicketCommentReadTimeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserTicketCommentReadTimesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketPropertyHintHistoryRecordsArgs = {
  where?: Maybe<TicketPropertyHintHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPropertyHintHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketPropertyHintHistoryRecordArgs = {
  where: TicketPropertyHintHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketPropertyHintHistoryRecordsMetaArgs = {
  where?: Maybe<TicketPropertyHintHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPropertyHintHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketPropertyHintsArgs = {
  where?: Maybe<TicketPropertyHintWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPropertyHintsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketPropertyHintArgs = {
  where: TicketPropertyHintWhereUniqueInput;
};


export type Query_AllTicketPropertyHintsMetaArgs = {
  where?: Maybe<TicketPropertyHintWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPropertyHintsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketPropertyHintPropertyHistoryRecordsArgs = {
  where?: Maybe<TicketPropertyHintPropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPropertyHintPropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketPropertyHintPropertyHistoryRecordArgs = {
  where: TicketPropertyHintPropertyHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketPropertyHintPropertyHistoryRecordsMetaArgs = {
  where?: Maybe<TicketPropertyHintPropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPropertyHintPropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketPropertyHintPropertiesArgs = {
  where?: Maybe<TicketPropertyHintPropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPropertyHintPropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketPropertyHintPropertyArgs = {
  where: TicketPropertyHintPropertyWhereUniqueInput;
};


export type Query_AllTicketPropertyHintPropertiesMetaArgs = {
  where?: Maybe<TicketPropertyHintPropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketPropertyHintPropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketExportTaskHistoryRecordsArgs = {
  where?: Maybe<TicketExportTaskHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketExportTaskHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketExportTaskHistoryRecordArgs = {
  where: TicketExportTaskHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketExportTaskHistoryRecordsMetaArgs = {
  where?: Maybe<TicketExportTaskHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketExportTaskHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketExportTasksArgs = {
  where?: Maybe<TicketExportTaskWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketExportTasksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketExportTaskArgs = {
  where: TicketExportTaskWhereUniqueInput;
};


export type Query_AllTicketExportTasksMetaArgs = {
  where?: Maybe<TicketExportTaskWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketExportTasksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketOrganizationSettingHistoryRecordsArgs = {
  where?: Maybe<TicketOrganizationSettingHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketOrganizationSettingHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketOrganizationSettingHistoryRecordArgs = {
  where: TicketOrganizationSettingHistoryRecordWhereUniqueInput;
};


export type Query_AllTicketOrganizationSettingHistoryRecordsMetaArgs = {
  where?: Maybe<TicketOrganizationSettingHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketOrganizationSettingHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllTicketOrganizationSettingsArgs = {
  where?: Maybe<TicketOrganizationSettingWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketOrganizationSettingsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryTicketOrganizationSettingArgs = {
  where: TicketOrganizationSettingWhereUniqueInput;
};


export type Query_AllTicketOrganizationSettingsMetaArgs = {
  where?: Maybe<TicketOrganizationSettingWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortTicketOrganizationSettingsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentHistoryRecordsArgs = {
  where?: Maybe<IncidentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentHistoryRecordArgs = {
  where: IncidentHistoryRecordWhereUniqueInput;
};


export type Query_AllIncidentHistoryRecordsMetaArgs = {
  where?: Maybe<IncidentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentsArgs = {
  where?: Maybe<IncidentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentArgs = {
  where: IncidentWhereUniqueInput;
};


export type Query_AllIncidentsMetaArgs = {
  where?: Maybe<IncidentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentChangesArgs = {
  where?: Maybe<IncidentChangeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentChangesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentChangeArgs = {
  where: IncidentChangeWhereUniqueInput;
};


export type Query_AllIncidentChangesMetaArgs = {
  where?: Maybe<IncidentChangeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentChangesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentPropertyHistoryRecordsArgs = {
  where?: Maybe<IncidentPropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentPropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentPropertyHistoryRecordArgs = {
  where: IncidentPropertyHistoryRecordWhereUniqueInput;
};


export type Query_AllIncidentPropertyHistoryRecordsMetaArgs = {
  where?: Maybe<IncidentPropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentPropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentPropertiesArgs = {
  where?: Maybe<IncidentPropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentPropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentPropertyArgs = {
  where: IncidentPropertyWhereUniqueInput;
};


export type Query_AllIncidentPropertiesMetaArgs = {
  where?: Maybe<IncidentPropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentPropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentClassifierHistoryRecordsArgs = {
  where?: Maybe<IncidentClassifierHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentClassifierHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentClassifierHistoryRecordArgs = {
  where: IncidentClassifierHistoryRecordWhereUniqueInput;
};


export type Query_AllIncidentClassifierHistoryRecordsMetaArgs = {
  where?: Maybe<IncidentClassifierHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentClassifierHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentClassifiersArgs = {
  where?: Maybe<IncidentClassifierWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentClassifiersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentClassifierArgs = {
  where: IncidentClassifierWhereUniqueInput;
};


export type Query_AllIncidentClassifiersMetaArgs = {
  where?: Maybe<IncidentClassifierWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentClassifiersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentClassifierIncidentHistoryRecordsArgs = {
  where?: Maybe<IncidentClassifierIncidentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentClassifierIncidentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentClassifierIncidentHistoryRecordArgs = {
  where: IncidentClassifierIncidentHistoryRecordWhereUniqueInput;
};


export type Query_AllIncidentClassifierIncidentHistoryRecordsMetaArgs = {
  where?: Maybe<IncidentClassifierIncidentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentClassifierIncidentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentClassifierIncidentsArgs = {
  where?: Maybe<IncidentClassifierIncidentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentClassifierIncidentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentClassifierIncidentArgs = {
  where: IncidentClassifierIncidentWhereUniqueInput;
};


export type Query_AllIncidentClassifierIncidentsMetaArgs = {
  where?: Maybe<IncidentClassifierIncidentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentClassifierIncidentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllUserFavoriteTicketHistoryRecordsArgs = {
  where?: Maybe<UserFavoriteTicketHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserFavoriteTicketHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryUserFavoriteTicketHistoryRecordArgs = {
  where: UserFavoriteTicketHistoryRecordWhereUniqueInput;
};


export type Query_AllUserFavoriteTicketHistoryRecordsMetaArgs = {
  where?: Maybe<UserFavoriteTicketHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserFavoriteTicketHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllUserFavoriteTicketsArgs = {
  where?: Maybe<UserFavoriteTicketWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserFavoriteTicketsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryUserFavoriteTicketArgs = {
  where: UserFavoriteTicketWhereUniqueInput;
};


export type Query_AllUserFavoriteTicketsMetaArgs = {
  where?: Maybe<UserFavoriteTicketWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortUserFavoriteTicketsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentExportTaskHistoryRecordsArgs = {
  where?: Maybe<IncidentExportTaskHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentExportTaskHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentExportTaskHistoryRecordArgs = {
  where: IncidentExportTaskHistoryRecordWhereUniqueInput;
};


export type Query_AllIncidentExportTaskHistoryRecordsMetaArgs = {
  where?: Maybe<IncidentExportTaskHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentExportTaskHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllIncidentExportTasksArgs = {
  where?: Maybe<IncidentExportTaskWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentExportTasksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryIncidentExportTaskArgs = {
  where: IncidentExportTaskWhereUniqueInput;
};


export type Query_AllIncidentExportTasksMetaArgs = {
  where?: Maybe<IncidentExportTaskWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortIncidentExportTasksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMessageHistoryRecordsArgs = {
  where?: Maybe<MessageHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMessageHistoryRecordArgs = {
  where: MessageHistoryRecordWhereUniqueInput;
};


export type Query_AllMessageHistoryRecordsMetaArgs = {
  where?: Maybe<MessageHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMessagesArgs = {
  where?: Maybe<MessageWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessagesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMessageArgs = {
  where: MessageWhereUniqueInput;
};


export type Query_AllMessagesMetaArgs = {
  where?: Maybe<MessageWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessagesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllRemoteClientHistoryRecordsArgs = {
  where?: Maybe<RemoteClientHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRemoteClientHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryRemoteClientHistoryRecordArgs = {
  where: RemoteClientHistoryRecordWhereUniqueInput;
};


export type Query_AllRemoteClientHistoryRecordsMetaArgs = {
  where?: Maybe<RemoteClientHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRemoteClientHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllRemoteClientsArgs = {
  where?: Maybe<RemoteClientWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRemoteClientsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryRemoteClientArgs = {
  where: RemoteClientWhereUniqueInput;
};


export type Query_AllRemoteClientsMetaArgs = {
  where?: Maybe<RemoteClientWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRemoteClientsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMessageUserBlackListHistoryRecordsArgs = {
  where?: Maybe<MessageUserBlackListHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageUserBlackListHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMessageUserBlackListHistoryRecordArgs = {
  where: MessageUserBlackListHistoryRecordWhereUniqueInput;
};


export type Query_AllMessageUserBlackListHistoryRecordsMetaArgs = {
  where?: Maybe<MessageUserBlackListHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageUserBlackListHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMessageUserBlackListsArgs = {
  where?: Maybe<MessageUserBlackListWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageUserBlackListsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMessageUserBlackListArgs = {
  where: MessageUserBlackListWhereUniqueInput;
};


export type Query_AllMessageUserBlackListsMetaArgs = {
  where?: Maybe<MessageUserBlackListWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageUserBlackListsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMessageOrganizationBlackListHistoryRecordsArgs = {
  where?: Maybe<MessageOrganizationBlackListHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageOrganizationBlackListHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMessageOrganizationBlackListHistoryRecordArgs = {
  where: MessageOrganizationBlackListHistoryRecordWhereUniqueInput;
};


export type Query_AllMessageOrganizationBlackListHistoryRecordsMetaArgs = {
  where?: Maybe<MessageOrganizationBlackListHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageOrganizationBlackListHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMessageOrganizationBlackListsArgs = {
  where?: Maybe<MessageOrganizationBlackListWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageOrganizationBlackListsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMessageOrganizationBlackListArgs = {
  where: MessageOrganizationBlackListWhereUniqueInput;
};


export type Query_AllMessageOrganizationBlackListsMetaArgs = {
  where?: Maybe<MessageOrganizationBlackListWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageOrganizationBlackListsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMessageBatchHistoryRecordsArgs = {
  where?: Maybe<MessageBatchHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageBatchHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMessageBatchHistoryRecordArgs = {
  where: MessageBatchHistoryRecordWhereUniqueInput;
};


export type Query_AllMessageBatchHistoryRecordsMetaArgs = {
  where?: Maybe<MessageBatchHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageBatchHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMessageBatchesArgs = {
  where?: Maybe<MessageBatchWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageBatchesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMessageBatchArgs = {
  where: MessageBatchWhereUniqueInput;
};


export type Query_AllMessageBatchesMetaArgs = {
  where?: Maybe<MessageBatchWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageBatchesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllContactHistoryRecordsArgs = {
  where?: Maybe<ContactHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryContactHistoryRecordArgs = {
  where: ContactHistoryRecordWhereUniqueInput;
};


export type Query_AllContactHistoryRecordsMetaArgs = {
  where?: Maybe<ContactHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllContactsArgs = {
  where?: Maybe<ContactWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryContactArgs = {
  where: ContactWhereUniqueInput;
};


export type Query_AllContactsMetaArgs = {
  where?: Maybe<ContactWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllContactRoleHistoryRecordsArgs = {
  where?: Maybe<ContactRoleHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactRoleHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryContactRoleHistoryRecordArgs = {
  where: ContactRoleHistoryRecordWhereUniqueInput;
};


export type Query_AllContactRoleHistoryRecordsMetaArgs = {
  where?: Maybe<ContactRoleHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactRoleHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllContactRolesArgs = {
  where?: Maybe<ContactRoleWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactRolesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryContactRoleArgs = {
  where: ContactRoleWhereUniqueInput;
};


export type Query_AllContactRolesMetaArgs = {
  where?: Maybe<ContactRoleWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactRolesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllContactExportTaskHistoryRecordsArgs = {
  where?: Maybe<ContactExportTaskHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactExportTaskHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryContactExportTaskHistoryRecordArgs = {
  where: ContactExportTaskHistoryRecordWhereUniqueInput;
};


export type Query_AllContactExportTaskHistoryRecordsMetaArgs = {
  where?: Maybe<ContactExportTaskHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactExportTaskHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllContactExportTasksArgs = {
  where?: Maybe<ContactExportTaskWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactExportTasksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryContactExportTaskArgs = {
  where: ContactExportTaskWhereUniqueInput;
};


export type Query_AllContactExportTasksMetaArgs = {
  where?: Maybe<ContactExportTaskWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortContactExportTasksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllResidentHistoryRecordsArgs = {
  where?: Maybe<ResidentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortResidentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryResidentHistoryRecordArgs = {
  where: ResidentHistoryRecordWhereUniqueInput;
};


export type Query_AllResidentHistoryRecordsMetaArgs = {
  where?: Maybe<ResidentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortResidentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllResidentsArgs = {
  where?: Maybe<ResidentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortResidentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryResidentArgs = {
  where: ResidentWhereUniqueInput;
};


export type Query_AllResidentsMetaArgs = {
  where?: Maybe<ResidentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortResidentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllServiceConsumerHistoryRecordsArgs = {
  where?: Maybe<ServiceConsumerHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortServiceConsumerHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryServiceConsumerHistoryRecordArgs = {
  where: ServiceConsumerHistoryRecordWhereUniqueInput;
};


export type Query_AllServiceConsumerHistoryRecordsMetaArgs = {
  where?: Maybe<ServiceConsumerHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortServiceConsumerHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllServiceConsumersArgs = {
  where?: Maybe<ServiceConsumerWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortServiceConsumersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryServiceConsumerArgs = {
  where: ServiceConsumerWhereUniqueInput;
};


export type Query_AllServiceConsumersMetaArgs = {
  where?: Maybe<ServiceConsumerWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortServiceConsumersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOnBoardingHistoryRecordsArgs = {
  where?: Maybe<OnBoardingHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOnBoardingHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOnBoardingHistoryRecordArgs = {
  where: OnBoardingHistoryRecordWhereUniqueInput;
};


export type Query_AllOnBoardingHistoryRecordsMetaArgs = {
  where?: Maybe<OnBoardingHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOnBoardingHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOnBoardingsArgs = {
  where?: Maybe<OnBoardingWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOnBoardingsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOnBoardingArgs = {
  where: OnBoardingWhereUniqueInput;
};


export type Query_AllOnBoardingsMetaArgs = {
  where?: Maybe<OnBoardingWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOnBoardingsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOnBoardingStepHistoryRecordsArgs = {
  where?: Maybe<OnBoardingStepHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOnBoardingStepHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOnBoardingStepHistoryRecordArgs = {
  where: OnBoardingStepHistoryRecordWhereUniqueInput;
};


export type Query_AllOnBoardingStepHistoryRecordsMetaArgs = {
  where?: Maybe<OnBoardingStepHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOnBoardingStepHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllOnBoardingStepsArgs = {
  where?: Maybe<OnBoardingStepWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOnBoardingStepsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryOnBoardingStepArgs = {
  where: OnBoardingStepWhereUniqueInput;
};


export type Query_AllOnBoardingStepsMetaArgs = {
  where?: Maybe<OnBoardingStepWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortOnBoardingStepsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMeterResourceHistoryRecordsArgs = {
  where?: Maybe<MeterResourceHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterResourceHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMeterResourceHistoryRecordArgs = {
  where: MeterResourceHistoryRecordWhereUniqueInput;
};


export type Query_AllMeterResourceHistoryRecordsMetaArgs = {
  where?: Maybe<MeterResourceHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterResourceHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMeterResourcesArgs = {
  where?: Maybe<MeterResourceWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterResourcesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMeterResourceArgs = {
  where: MeterResourceWhereUniqueInput;
};


export type Query_AllMeterResourcesMetaArgs = {
  where?: Maybe<MeterResourceWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterResourcesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMeterReadingSourceHistoryRecordsArgs = {
  where?: Maybe<MeterReadingSourceHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingSourceHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMeterReadingSourceHistoryRecordArgs = {
  where: MeterReadingSourceHistoryRecordWhereUniqueInput;
};


export type Query_AllMeterReadingSourceHistoryRecordsMetaArgs = {
  where?: Maybe<MeterReadingSourceHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingSourceHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMeterReadingSourcesArgs = {
  where?: Maybe<MeterReadingSourceWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingSourcesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMeterReadingSourceArgs = {
  where: MeterReadingSourceWhereUniqueInput;
};


export type Query_AllMeterReadingSourcesMetaArgs = {
  where?: Maybe<MeterReadingSourceWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingSourcesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMeterReadingHistoryRecordsArgs = {
  where?: Maybe<MeterReadingHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMeterReadingHistoryRecordArgs = {
  where: MeterReadingHistoryRecordWhereUniqueInput;
};


export type Query_AllMeterReadingHistoryRecordsMetaArgs = {
  where?: Maybe<MeterReadingHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMeterReadingsArgs = {
  where?: Maybe<MeterReadingWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMeterReadingArgs = {
  where: MeterReadingWhereUniqueInput;
};


export type Query_AllMeterReadingsMetaArgs = {
  where?: Maybe<MeterReadingWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMeterHistoryRecordsArgs = {
  where?: Maybe<MeterHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMeterHistoryRecordArgs = {
  where: MeterHistoryRecordWhereUniqueInput;
};


export type Query_AllMeterHistoryRecordsMetaArgs = {
  where?: Maybe<MeterHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMetersArgs = {
  where?: Maybe<MeterWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMetersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMeterArgs = {
  where: MeterWhereUniqueInput;
};


export type Query_AllMetersMetaArgs = {
  where?: Maybe<MeterWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMetersBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMeterReadingFilterTemplateHistoryRecordsArgs = {
  where?: Maybe<MeterReadingFilterTemplateHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingFilterTemplateHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMeterReadingFilterTemplateHistoryRecordArgs = {
  where: MeterReadingFilterTemplateHistoryRecordWhereUniqueInput;
};


export type Query_AllMeterReadingFilterTemplateHistoryRecordsMetaArgs = {
  where?: Maybe<MeterReadingFilterTemplateHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingFilterTemplateHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMeterReadingFilterTemplatesArgs = {
  where?: Maybe<MeterReadingFilterTemplateWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingFilterTemplatesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMeterReadingFilterTemplateArgs = {
  where: MeterReadingFilterTemplateWhereUniqueInput;
};


export type Query_AllMeterReadingFilterTemplatesMetaArgs = {
  where?: Maybe<MeterReadingFilterTemplateWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMeterReadingFilterTemplatesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllServiceSubscriptionHistoryRecordsArgs = {
  where?: Maybe<ServiceSubscriptionHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortServiceSubscriptionHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryServiceSubscriptionHistoryRecordArgs = {
  where: ServiceSubscriptionHistoryRecordWhereUniqueInput;
};


export type Query_AllServiceSubscriptionHistoryRecordsMetaArgs = {
  where?: Maybe<ServiceSubscriptionHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortServiceSubscriptionHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllServiceSubscriptionsArgs = {
  where?: Maybe<ServiceSubscriptionWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortServiceSubscriptionsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryServiceSubscriptionArgs = {
  where: ServiceSubscriptionWhereUniqueInput;
};


export type Query_AllServiceSubscriptionsMetaArgs = {
  where?: Maybe<ServiceSubscriptionWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortServiceSubscriptionsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllAcquiringIntegrationHistoryRecordsArgs = {
  where?: Maybe<AcquiringIntegrationHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAcquiringIntegrationHistoryRecordArgs = {
  where: AcquiringIntegrationHistoryRecordWhereUniqueInput;
};


export type Query_AllAcquiringIntegrationHistoryRecordsMetaArgs = {
  where?: Maybe<AcquiringIntegrationHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllAcquiringIntegrationsArgs = {
  where?: Maybe<AcquiringIntegrationWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAcquiringIntegrationArgs = {
  where: AcquiringIntegrationWhereUniqueInput;
};


export type Query_AllAcquiringIntegrationsMetaArgs = {
  where?: Maybe<AcquiringIntegrationWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllAcquiringIntegrationAccessRightHistoryRecordsArgs = {
  where?: Maybe<AcquiringIntegrationAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAcquiringIntegrationAccessRightHistoryRecordArgs = {
  where: AcquiringIntegrationAccessRightHistoryRecordWhereUniqueInput;
};


export type Query_AllAcquiringIntegrationAccessRightHistoryRecordsMetaArgs = {
  where?: Maybe<AcquiringIntegrationAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllAcquiringIntegrationAccessRightsArgs = {
  where?: Maybe<AcquiringIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAcquiringIntegrationAccessRightArgs = {
  where: AcquiringIntegrationAccessRightWhereUniqueInput;
};


export type Query_AllAcquiringIntegrationAccessRightsMetaArgs = {
  where?: Maybe<AcquiringIntegrationAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllAcquiringIntegrationContextHistoryRecordsArgs = {
  where?: Maybe<AcquiringIntegrationContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAcquiringIntegrationContextHistoryRecordArgs = {
  where: AcquiringIntegrationContextHistoryRecordWhereUniqueInput;
};


export type Query_AllAcquiringIntegrationContextHistoryRecordsMetaArgs = {
  where?: Maybe<AcquiringIntegrationContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllAcquiringIntegrationContextsArgs = {
  where?: Maybe<AcquiringIntegrationContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAcquiringIntegrationContextArgs = {
  where: AcquiringIntegrationContextWhereUniqueInput;
};


export type Query_AllAcquiringIntegrationContextsMetaArgs = {
  where?: Maybe<AcquiringIntegrationContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAcquiringIntegrationContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMultiPaymentHistoryRecordsArgs = {
  where?: Maybe<MultiPaymentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMultiPaymentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMultiPaymentHistoryRecordArgs = {
  where: MultiPaymentHistoryRecordWhereUniqueInput;
};


export type Query_AllMultiPaymentHistoryRecordsMetaArgs = {
  where?: Maybe<MultiPaymentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMultiPaymentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMultiPaymentsArgs = {
  where?: Maybe<MultiPaymentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMultiPaymentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMultiPaymentArgs = {
  where: MultiPaymentWhereUniqueInput;
};


export type Query_AllMultiPaymentsMetaArgs = {
  where?: Maybe<MultiPaymentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMultiPaymentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPaymentHistoryRecordsArgs = {
  where?: Maybe<PaymentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPaymentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPaymentHistoryRecordArgs = {
  where: PaymentHistoryRecordWhereUniqueInput;
};


export type Query_AllPaymentHistoryRecordsMetaArgs = {
  where?: Maybe<PaymentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPaymentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPaymentsArgs = {
  where?: Maybe<PaymentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPaymentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPaymentArgs = {
  where: PaymentWhereUniqueInput;
};


export type Query_AllPaymentsMetaArgs = {
  where?: Maybe<PaymentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPaymentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPaymentsFilterTemplateHistoryRecordsArgs = {
  where?: Maybe<PaymentsFilterTemplateHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPaymentsFilterTemplateHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPaymentsFilterTemplateHistoryRecordArgs = {
  where: PaymentsFilterTemplateHistoryRecordWhereUniqueInput;
};


export type Query_AllPaymentsFilterTemplateHistoryRecordsMetaArgs = {
  where?: Maybe<PaymentsFilterTemplateHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPaymentsFilterTemplateHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPaymentsFilterTemplatesArgs = {
  where?: Maybe<PaymentsFilterTemplateWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPaymentsFilterTemplatesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPaymentsFilterTemplateArgs = {
  where: PaymentsFilterTemplateWhereUniqueInput;
};


export type Query_AllPaymentsFilterTemplatesMetaArgs = {
  where?: Maybe<PaymentsFilterTemplateWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPaymentsFilterTemplatesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllRecurrentPaymentContextHistoryRecordsArgs = {
  where?: Maybe<RecurrentPaymentContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRecurrentPaymentContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryRecurrentPaymentContextHistoryRecordArgs = {
  where: RecurrentPaymentContextHistoryRecordWhereUniqueInput;
};


export type Query_AllRecurrentPaymentContextHistoryRecordsMetaArgs = {
  where?: Maybe<RecurrentPaymentContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRecurrentPaymentContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllRecurrentPaymentContextsArgs = {
  where?: Maybe<RecurrentPaymentContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRecurrentPaymentContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryRecurrentPaymentContextArgs = {
  where: RecurrentPaymentContextWhereUniqueInput;
};


export type Query_AllRecurrentPaymentContextsMetaArgs = {
  where?: Maybe<RecurrentPaymentContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRecurrentPaymentContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllRecurrentPaymentHistoryRecordsArgs = {
  where?: Maybe<RecurrentPaymentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRecurrentPaymentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryRecurrentPaymentHistoryRecordArgs = {
  where: RecurrentPaymentHistoryRecordWhereUniqueInput;
};


export type Query_AllRecurrentPaymentHistoryRecordsMetaArgs = {
  where?: Maybe<RecurrentPaymentHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRecurrentPaymentHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllRecurrentPaymentsArgs = {
  where?: Maybe<RecurrentPaymentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRecurrentPaymentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryRecurrentPaymentArgs = {
  where: RecurrentPaymentWhereUniqueInput;
};


export type Query_AllRecurrentPaymentsMetaArgs = {
  where?: Maybe<RecurrentPaymentWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortRecurrentPaymentsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2BAppHistoryRecordsArgs = {
  where?: Maybe<B2BAppHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2BAppHistoryRecordArgs = {
  where: B2BAppHistoryRecordWhereUniqueInput;
};


export type Query_AllB2BAppHistoryRecordsMetaArgs = {
  where?: Maybe<B2BAppHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2BAppsArgs = {
  where?: Maybe<B2BAppWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2BAppArgs = {
  where: B2BAppWhereUniqueInput;
};


export type Query_AllB2BAppsMetaArgs = {
  where?: Maybe<B2BAppWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2BAppContextHistoryRecordsArgs = {
  where?: Maybe<B2BAppContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2BAppContextHistoryRecordArgs = {
  where: B2BAppContextHistoryRecordWhereUniqueInput;
};


export type Query_AllB2BAppContextHistoryRecordsMetaArgs = {
  where?: Maybe<B2BAppContextHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppContextHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2BAppContextsArgs = {
  where?: Maybe<B2BAppContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2BAppContextArgs = {
  where: B2BAppContextWhereUniqueInput;
};


export type Query_AllB2BAppContextsMetaArgs = {
  where?: Maybe<B2BAppContextWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppContextsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2BAppAccessRightHistoryRecordsArgs = {
  where?: Maybe<B2BAppAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2BAppAccessRightHistoryRecordArgs = {
  where: B2BAppAccessRightHistoryRecordWhereUniqueInput;
};


export type Query_AllB2BAppAccessRightHistoryRecordsMetaArgs = {
  where?: Maybe<B2BAppAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2BAppAccessRightsArgs = {
  where?: Maybe<B2BAppAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2BAppAccessRightArgs = {
  where: B2BAppAccessRightWhereUniqueInput;
};


export type Query_AllB2BAppAccessRightsMetaArgs = {
  where?: Maybe<B2BAppAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2CAppHistoryRecordsArgs = {
  where?: Maybe<B2CAppHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2CAppHistoryRecordArgs = {
  where: B2CAppHistoryRecordWhereUniqueInput;
};


export type Query_AllB2CAppHistoryRecordsMetaArgs = {
  where?: Maybe<B2CAppHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2CAppsArgs = {
  where?: Maybe<B2CAppWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2CAppArgs = {
  where: B2CAppWhereUniqueInput;
};


export type Query_AllB2CAppsMetaArgs = {
  where?: Maybe<B2CAppWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2CAppAccessRightHistoryRecordsArgs = {
  where?: Maybe<B2CAppAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2CAppAccessRightHistoryRecordArgs = {
  where: B2CAppAccessRightHistoryRecordWhereUniqueInput;
};


export type Query_AllB2CAppAccessRightHistoryRecordsMetaArgs = {
  where?: Maybe<B2CAppAccessRightHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppAccessRightHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2CAppAccessRightsArgs = {
  where?: Maybe<B2CAppAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2CAppAccessRightArgs = {
  where: B2CAppAccessRightWhereUniqueInput;
};


export type Query_AllB2CAppAccessRightsMetaArgs = {
  where?: Maybe<B2CAppAccessRightWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppAccessRightsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2CAppBuildHistoryRecordsArgs = {
  where?: Maybe<B2CAppBuildHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppBuildHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2CAppBuildHistoryRecordArgs = {
  where: B2CAppBuildHistoryRecordWhereUniqueInput;
};


export type Query_AllB2CAppBuildHistoryRecordsMetaArgs = {
  where?: Maybe<B2CAppBuildHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppBuildHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2CAppBuildsArgs = {
  where?: Maybe<B2CAppBuildWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppBuildsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2CAppBuildArgs = {
  where: B2CAppBuildWhereUniqueInput;
};


export type Query_AllB2CAppBuildsMetaArgs = {
  where?: Maybe<B2CAppBuildWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppBuildsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2CAppPropertyHistoryRecordsArgs = {
  where?: Maybe<B2CAppPropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppPropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2CAppPropertyHistoryRecordArgs = {
  where: B2CAppPropertyHistoryRecordWhereUniqueInput;
};


export type Query_AllB2CAppPropertyHistoryRecordsMetaArgs = {
  where?: Maybe<B2CAppPropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppPropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2CAppPropertiesArgs = {
  where?: Maybe<B2CAppPropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppPropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2CAppPropertyArgs = {
  where: B2CAppPropertyWhereUniqueInput;
};


export type Query_AllB2CAppPropertiesMetaArgs = {
  where?: Maybe<B2CAppPropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2CAppPropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2BAppPromoBlockHistoryRecordsArgs = {
  where?: Maybe<B2BAppPromoBlockHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppPromoBlockHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2BAppPromoBlockHistoryRecordArgs = {
  where: B2BAppPromoBlockHistoryRecordWhereUniqueInput;
};


export type Query_AllB2BAppPromoBlockHistoryRecordsMetaArgs = {
  where?: Maybe<B2BAppPromoBlockHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppPromoBlockHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllB2BAppPromoBlocksArgs = {
  where?: Maybe<B2BAppPromoBlockWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppPromoBlocksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryB2BAppPromoBlockArgs = {
  where: B2BAppPromoBlockWhereUniqueInput;
};


export type Query_AllB2BAppPromoBlocksMetaArgs = {
  where?: Maybe<B2BAppPromoBlockWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortB2BAppPromoBlocksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMessageAppBlackListHistoryRecordsArgs = {
  where?: Maybe<MessageAppBlackListHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageAppBlackListHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMessageAppBlackListHistoryRecordArgs = {
  where: MessageAppBlackListHistoryRecordWhereUniqueInput;
};


export type Query_AllMessageAppBlackListHistoryRecordsMetaArgs = {
  where?: Maybe<MessageAppBlackListHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageAppBlackListHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllMessageAppBlackListsArgs = {
  where?: Maybe<MessageAppBlackListWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageAppBlackListsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryMessageAppBlackListArgs = {
  where: MessageAppBlackListWhereUniqueInput;
};


export type Query_AllMessageAppBlackListsMetaArgs = {
  where?: Maybe<MessageAppBlackListWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortMessageAppBlackListsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllExternalReportHistoryRecordsArgs = {
  where?: Maybe<ExternalReportHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortExternalReportHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryExternalReportHistoryRecordArgs = {
  where: ExternalReportHistoryRecordWhereUniqueInput;
};


export type Query_AllExternalReportHistoryRecordsMetaArgs = {
  where?: Maybe<ExternalReportHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortExternalReportHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllExternalReportsArgs = {
  where?: Maybe<ExternalReportWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortExternalReportsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryExternalReportArgs = {
  where: ExternalReportWhereUniqueInput;
};


export type Query_AllExternalReportsMetaArgs = {
  where?: Maybe<ExternalReportWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortExternalReportsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPropertyScopeHistoryRecordsArgs = {
  where?: Maybe<PropertyScopeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPropertyScopeHistoryRecordArgs = {
  where: PropertyScopeHistoryRecordWhereUniqueInput;
};


export type Query_AllPropertyScopeHistoryRecordsMetaArgs = {
  where?: Maybe<PropertyScopeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPropertyScopesArgs = {
  where?: Maybe<PropertyScopeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPropertyScopeArgs = {
  where: PropertyScopeWhereUniqueInput;
};


export type Query_AllPropertyScopesMetaArgs = {
  where?: Maybe<PropertyScopeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPropertyScopeOrganizationEmployeeHistoryRecordsArgs = {
  where?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopeOrganizationEmployeeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPropertyScopeOrganizationEmployeeHistoryRecordArgs = {
  where: PropertyScopeOrganizationEmployeeHistoryRecordWhereUniqueInput;
};


export type Query_AllPropertyScopeOrganizationEmployeeHistoryRecordsMetaArgs = {
  where?: Maybe<PropertyScopeOrganizationEmployeeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopeOrganizationEmployeeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPropertyScopeOrganizationEmployeesArgs = {
  where?: Maybe<PropertyScopeOrganizationEmployeeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopeOrganizationEmployeesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPropertyScopeOrganizationEmployeeArgs = {
  where: PropertyScopeOrganizationEmployeeWhereUniqueInput;
};


export type Query_AllPropertyScopeOrganizationEmployeesMetaArgs = {
  where?: Maybe<PropertyScopeOrganizationEmployeeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopeOrganizationEmployeesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPropertyScopePropertyHistoryRecordsArgs = {
  where?: Maybe<PropertyScopePropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopePropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPropertyScopePropertyHistoryRecordArgs = {
  where: PropertyScopePropertyHistoryRecordWhereUniqueInput;
};


export type Query_AllPropertyScopePropertyHistoryRecordsMetaArgs = {
  where?: Maybe<PropertyScopePropertyHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopePropertyHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllPropertyScopePropertiesArgs = {
  where?: Maybe<PropertyScopePropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopePropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryPropertyScopePropertyArgs = {
  where: PropertyScopePropertyWhereUniqueInput;
};


export type Query_AllPropertyScopePropertiesMetaArgs = {
  where?: Maybe<PropertyScopePropertyWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortPropertyScopePropertiesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllAssigneeScopeHistoryRecordsArgs = {
  where?: Maybe<AssigneeScopeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAssigneeScopeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAssigneeScopeHistoryRecordArgs = {
  where: AssigneeScopeHistoryRecordWhereUniqueInput;
};


export type Query_AllAssigneeScopeHistoryRecordsMetaArgs = {
  where?: Maybe<AssigneeScopeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAssigneeScopeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllAssigneeScopesArgs = {
  where?: Maybe<AssigneeScopeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAssigneeScopesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAssigneeScopeArgs = {
  where: AssigneeScopeWhereUniqueInput;
};


export type Query_AllAssigneeScopesMetaArgs = {
  where?: Maybe<AssigneeScopeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortAssigneeScopesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllNewsItemHistoryRecordsArgs = {
  where?: Maybe<NewsItemHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryNewsItemHistoryRecordArgs = {
  where: NewsItemHistoryRecordWhereUniqueInput;
};


export type Query_AllNewsItemHistoryRecordsMetaArgs = {
  where?: Maybe<NewsItemHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllNewsItemsArgs = {
  where?: Maybe<NewsItemWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryNewsItemArgs = {
  where: NewsItemWhereUniqueInput;
};


export type Query_AllNewsItemsMetaArgs = {
  where?: Maybe<NewsItemWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllNewsItemScopeHistoryRecordsArgs = {
  where?: Maybe<NewsItemScopeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemScopeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryNewsItemScopeHistoryRecordArgs = {
  where: NewsItemScopeHistoryRecordWhereUniqueInput;
};


export type Query_AllNewsItemScopeHistoryRecordsMetaArgs = {
  where?: Maybe<NewsItemScopeHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemScopeHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllNewsItemScopesArgs = {
  where?: Maybe<NewsItemScopeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemScopesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryNewsItemScopeArgs = {
  where: NewsItemScopeWhereUniqueInput;
};


export type Query_AllNewsItemScopesMetaArgs = {
  where?: Maybe<NewsItemScopeWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemScopesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllNewsItemTemplateHistoryRecordsArgs = {
  where?: Maybe<NewsItemTemplateHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemTemplateHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryNewsItemTemplateHistoryRecordArgs = {
  where: NewsItemTemplateHistoryRecordWhereUniqueInput;
};


export type Query_AllNewsItemTemplateHistoryRecordsMetaArgs = {
  where?: Maybe<NewsItemTemplateHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemTemplateHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllNewsItemTemplatesArgs = {
  where?: Maybe<NewsItemTemplateWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemTemplatesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryNewsItemTemplateArgs = {
  where: NewsItemTemplateWhereUniqueInput;
};


export type Query_AllNewsItemTemplatesMetaArgs = {
  where?: Maybe<NewsItemTemplateWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemTemplatesBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllNewsItemUserReadHistoryRecordsArgs = {
  where?: Maybe<NewsItemUserReadHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemUserReadHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryNewsItemUserReadHistoryRecordArgs = {
  where: NewsItemUserReadHistoryRecordWhereUniqueInput;
};


export type Query_AllNewsItemUserReadHistoryRecordsMetaArgs = {
  where?: Maybe<NewsItemUserReadHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemUserReadHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllNewsItemUserReadsArgs = {
  where?: Maybe<NewsItemUserReadWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemUserReadsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryNewsItemUserReadArgs = {
  where: NewsItemUserReadWhereUniqueInput;
};


export type Query_AllNewsItemUserReadsMetaArgs = {
  where?: Maybe<NewsItemUserReadWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortNewsItemUserReadsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllWebhookHistoryRecordsArgs = {
  where?: Maybe<WebhookHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortWebhookHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryWebhookHistoryRecordArgs = {
  where: WebhookHistoryRecordWhereUniqueInput;
};


export type Query_AllWebhookHistoryRecordsMetaArgs = {
  where?: Maybe<WebhookHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortWebhookHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllWebhooksArgs = {
  where?: Maybe<WebhookWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortWebhooksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryWebhookArgs = {
  where: WebhookWhereUniqueInput;
};


export type Query_AllWebhooksMetaArgs = {
  where?: Maybe<WebhookWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortWebhooksBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllWebhookSubscriptionHistoryRecordsArgs = {
  where?: Maybe<WebhookSubscriptionHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortWebhookSubscriptionHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryWebhookSubscriptionHistoryRecordArgs = {
  where: WebhookSubscriptionHistoryRecordWhereUniqueInput;
};


export type Query_AllWebhookSubscriptionHistoryRecordsMetaArgs = {
  where?: Maybe<WebhookSubscriptionHistoryRecordWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortWebhookSubscriptionHistoryRecordsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryAllWebhookSubscriptionsArgs = {
  where?: Maybe<WebhookSubscriptionWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortWebhookSubscriptionsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type QueryWebhookSubscriptionArgs = {
  where: WebhookSubscriptionWhereUniqueInput;
};


export type Query_AllWebhookSubscriptionsMetaArgs = {
  where?: Maybe<WebhookSubscriptionWhereInput>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Array<SortWebhookSubscriptionsBy>>;
  orderBy?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};


export type Query_KsListsMetaArgs = {
  where?: Maybe<_KsListsMetaInput>;
};


export type QueryCheckPasswordRecoveryTokenArgs = {
  data: CheckPasswordRecoveryTokenInput;
};


export type QueryGetPhoneByConfirmPhoneActionTokenArgs = {
  data: GetPhoneByConfirmPhoneActionTokenInput;
};


export type QueryGetAccessTokenByUserIdArgs = {
  data: GetAccessTokenByUserIdInput;
};


export type QueryCheckPropertyWithAddressExistArgs = {
  data: CheckPropertyWithAddressExistInput;
};


export type QueryExportPropertiesToExcelArgs = {
  data: ExportPropertiesToExcelInput;
};


export type QueryAllResidentBillingReceiptsArgs = {
  where?: Maybe<ResidentBillingReceiptWhereInput>;
  first?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<Array<SortResidentBillingReceiptsBy>>;
};


export type QueryPredictTransactionClassificationArgs = {
  data: PredictTransactionClassificationInput;
};


export type QueryPredictTicketClassificationArgs = {
  data: PredictTicketClassificationInput;
};


export type QueryExportMeterReadingsArgs = {
  data: ExportMeterReadingsInput;
};


export type QueryExportPaymentsToExcelArgs = {
  data: ExportPaymentsToExcelInput;
};


export type QueryGeneratePaymentLinkArgs = {
  data: GeneratePaymentLinkInput;
};


export type Query_AllPaymentsSumArgs = {
  where: PaymentWhereInput;
};


export type QueryAllMiniAppsArgs = {
  data: AllMiniAppsInput;
};


export type QueryTicketReportWidgetDataArgs = {
  data: TicketReportWidgetInput;
};


export type QueryTicketAnalyticsReportArgs = {
  data?: Maybe<TicketAnalyticsReportInput>;
};


export type QueryExportTicketAnalyticsToExcelArgs = {
  data?: Maybe<ExportTicketAnalyticsToExcelInput>;
};


export type QueryGetExternalReportIframeUrlArgs = {
  data: GetExternalReportIframeUrlInput;
};


export type QueryExportPropertyScopesToExcelArgs = {
  data: ExportPropertyScopeToExcelInput;
};

export type ReInviteOrganizationEmployeeInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  organization: OrganizationWhereUniqueInput;
  email?: Maybe<Scalars['String']>;
  phone: Scalars['String'];
};

export type RecipientField = {
  __typename?: 'RecipientField';
  name?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  offsettingAccount?: Maybe<Scalars['String']>;
  tin: Scalars['String'];
  iec?: Maybe<Scalars['String']>;
  bic: Scalars['String'];
  bankAccount: Scalars['String'];
};

export type RecipientFieldInput = {
  name?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  territoryCode?: Maybe<Scalars['String']>;
  offsettingAccount?: Maybe<Scalars['String']>;
  tin: Scalars['String'];
  iec?: Maybe<Scalars['String']>;
  bic: Scalars['String'];
  bankAccount: Scalars['String'];
};

/**  Hold a snapshot of monthly payment data. Used by background recurrent payment process.  */
export type RecurrentPayment = {
  __typename?: 'RecurrentPayment';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the RecurrentPayment List config, or
   *  2. As an alias to the field set on 'labelField' in the RecurrentPayment List config, or
   *  3. As an alias to a 'name' field on the RecurrentPayment List (if one exists), or
   *  4. As an alias to the 'id' field on the RecurrentPayment List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Payment proceeding status  */
  status?: Maybe<RecurrentPaymentStatusType>;
  /**  Payment proceeding should start after date.  */
  payAfter?: Maybe<Scalars['String']>;
  /**  Count of proceeding tries.  */
  tryCount?: Maybe<Scalars['Int']>;
  /**  Hold current state of payment proceeding.  */
  state?: Maybe<Scalars['JSON']>;
  /**  Contains information about the distribution of a certain type of fee  */
  billingReceipts?: Maybe<Array<BillingReceiptsField>>;
  /**  Link to RecurrentPaymentContext  */
  recurrentPaymentContext?: Maybe<RecurrentPaymentContext>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

/**  Recurrent payments context configuration. Holding settings, limits and etc, configured by resident for background process that proceeding resident`s receipts on monthly basis.  */
export type RecurrentPaymentContext = {
  __typename?: 'RecurrentPaymentContext';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the RecurrentPaymentContext List config, or
   *  2. As an alias to the field set on 'labelField' in the RecurrentPaymentContext List config, or
   *  3. As an alias to a 'name' field on the RecurrentPaymentContext List (if one exists), or
   *  4. As an alias to the 'id' field on the RecurrentPaymentContext List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Enable or Disable recurrent payment proceeding.  */
  enabled?: Maybe<Scalars['Boolean']>;
  /**  Maximal `toPay` amount of multi payment that can be proceeded. Otherwise payment should be interrupted.  */
  limit?: Maybe<Scalars['String']>;
  /**  Pay for billing receipts right after they was created. Only one trigger should be configured: autoPayReceipts or paymentDay.  */
  autoPayReceipts?: Maybe<Scalars['Boolean']>;
  /**  The day of month when resident`s receipts going to be proceeded. Only one trigger should be configured: autoPayReceipts or paymentDay.  */
  paymentDay?: Maybe<Scalars['Int']>;
  /**  Settings. Should contain recurrent payment context configuration.  */
  settings?: Maybe<SettingsField>;
  /**  Link to ServiceConsumer  */
  serviceConsumer?: Maybe<ServiceConsumer>;
  /**  Link to BillingCategory  */
  billingCategory?: Maybe<BillingCategory>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type RecurrentPaymentContextCreateInput = {
  enabled?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['String']>;
  autoPayReceipts?: Maybe<Scalars['Boolean']>;
  paymentDay?: Maybe<Scalars['Int']>;
  settings?: Maybe<SettingsFieldInput>;
  serviceConsumer?: Maybe<ServiceConsumerRelateToOneInput>;
  billingCategory?: Maybe<BillingCategoryRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type RecurrentPaymentContextHistoryRecord = {
  __typename?: 'RecurrentPaymentContextHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the RecurrentPaymentContextHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the RecurrentPaymentContextHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the RecurrentPaymentContextHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the RecurrentPaymentContextHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['String']>;
  autoPayReceipts?: Maybe<Scalars['Boolean']>;
  paymentDay?: Maybe<Scalars['Int']>;
  settings?: Maybe<Scalars['JSON']>;
  serviceConsumer?: Maybe<Scalars['String']>;
  billingCategory?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<RecurrentPaymentContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type RecurrentPaymentContextHistoryRecordCreateInput = {
  enabled?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['String']>;
  autoPayReceipts?: Maybe<Scalars['Boolean']>;
  paymentDay?: Maybe<Scalars['Int']>;
  settings?: Maybe<Scalars['JSON']>;
  serviceConsumer?: Maybe<Scalars['String']>;
  billingCategory?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<RecurrentPaymentContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum RecurrentPaymentContextHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type RecurrentPaymentContextHistoryRecordUpdateInput = {
  enabled?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['String']>;
  autoPayReceipts?: Maybe<Scalars['Boolean']>;
  paymentDay?: Maybe<Scalars['Int']>;
  settings?: Maybe<Scalars['JSON']>;
  serviceConsumer?: Maybe<Scalars['String']>;
  billingCategory?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<RecurrentPaymentContextHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type RecurrentPaymentContextHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<RecurrentPaymentContextHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<RecurrentPaymentContextHistoryRecordWhereInput>>>;
  enabled?: Maybe<Scalars['Boolean']>;
  enabled_not?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['String']>;
  limit_not?: Maybe<Scalars['String']>;
  limit_lt?: Maybe<Scalars['String']>;
  limit_lte?: Maybe<Scalars['String']>;
  limit_gt?: Maybe<Scalars['String']>;
  limit_gte?: Maybe<Scalars['String']>;
  limit_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  autoPayReceipts?: Maybe<Scalars['Boolean']>;
  autoPayReceipts_not?: Maybe<Scalars['Boolean']>;
  paymentDay?: Maybe<Scalars['Int']>;
  paymentDay_not?: Maybe<Scalars['Int']>;
  paymentDay_lt?: Maybe<Scalars['Int']>;
  paymentDay_lte?: Maybe<Scalars['Int']>;
  paymentDay_gt?: Maybe<Scalars['Int']>;
  paymentDay_gte?: Maybe<Scalars['Int']>;
  paymentDay_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  paymentDay_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  settings?: Maybe<Scalars['JSON']>;
  settings_not?: Maybe<Scalars['JSON']>;
  settings_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  settings_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  serviceConsumer?: Maybe<Scalars['String']>;
  serviceConsumer_not?: Maybe<Scalars['String']>;
  serviceConsumer_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  serviceConsumer_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  billingCategory?: Maybe<Scalars['String']>;
  billingCategory_not?: Maybe<Scalars['String']>;
  billingCategory_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  billingCategory_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<RecurrentPaymentContextHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<RecurrentPaymentContextHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<RecurrentPaymentContextHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<RecurrentPaymentContextHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type RecurrentPaymentContextHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type RecurrentPaymentContextHistoryRecordsCreateInput = {
  data?: Maybe<RecurrentPaymentContextHistoryRecordCreateInput>;
};

export type RecurrentPaymentContextHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<RecurrentPaymentContextHistoryRecordUpdateInput>;
};

export type RecurrentPaymentContextRelateToOneInput = {
  create?: Maybe<RecurrentPaymentContextCreateInput>;
  connect?: Maybe<RecurrentPaymentContextWhereUniqueInput>;
  disconnect?: Maybe<RecurrentPaymentContextWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type RecurrentPaymentContextUpdateInput = {
  enabled?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['String']>;
  autoPayReceipts?: Maybe<Scalars['Boolean']>;
  paymentDay?: Maybe<Scalars['Int']>;
  settings?: Maybe<SettingsFieldInput>;
  serviceConsumer?: Maybe<ServiceConsumerRelateToOneInput>;
  billingCategory?: Maybe<BillingCategoryRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type RecurrentPaymentContextWhereInput = {
  AND?: Maybe<Array<Maybe<RecurrentPaymentContextWhereInput>>>;
  OR?: Maybe<Array<Maybe<RecurrentPaymentContextWhereInput>>>;
  enabled?: Maybe<Scalars['Boolean']>;
  enabled_not?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['String']>;
  limit_not?: Maybe<Scalars['String']>;
  limit_lt?: Maybe<Scalars['String']>;
  limit_lte?: Maybe<Scalars['String']>;
  limit_gt?: Maybe<Scalars['String']>;
  limit_gte?: Maybe<Scalars['String']>;
  limit_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  autoPayReceipts?: Maybe<Scalars['Boolean']>;
  autoPayReceipts_not?: Maybe<Scalars['Boolean']>;
  paymentDay?: Maybe<Scalars['Int']>;
  paymentDay_not?: Maybe<Scalars['Int']>;
  paymentDay_lt?: Maybe<Scalars['Int']>;
  paymentDay_lte?: Maybe<Scalars['Int']>;
  paymentDay_gt?: Maybe<Scalars['Int']>;
  paymentDay_gte?: Maybe<Scalars['Int']>;
  paymentDay_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  paymentDay_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  settings?: Maybe<SettingsFieldInput>;
  settings_not?: Maybe<SettingsFieldInput>;
  settings_in?: Maybe<Array<Maybe<SettingsFieldInput>>>;
  settings_not_in?: Maybe<Array<Maybe<SettingsFieldInput>>>;
  serviceConsumer?: Maybe<ServiceConsumerWhereInput>;
  serviceConsumer_is_null?: Maybe<Scalars['Boolean']>;
  billingCategory?: Maybe<BillingCategoryWhereInput>;
  billingCategory_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type RecurrentPaymentContextWhereUniqueInput = {
  id: Scalars['ID'];
};

export type RecurrentPaymentContextsCreateInput = {
  data?: Maybe<RecurrentPaymentContextCreateInput>;
};

export type RecurrentPaymentContextsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<RecurrentPaymentContextUpdateInput>;
};

export type RecurrentPaymentCreateInput = {
  status?: Maybe<RecurrentPaymentStatusType>;
  payAfter?: Maybe<Scalars['String']>;
  tryCount?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['JSON']>;
  billingReceipts?: Maybe<Array<BillingReceiptsFieldInput>>;
  recurrentPaymentContext?: Maybe<RecurrentPaymentContextRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type RecurrentPaymentHistoryRecord = {
  __typename?: 'RecurrentPaymentHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the RecurrentPaymentHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the RecurrentPaymentHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the RecurrentPaymentHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the RecurrentPaymentHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  payAfter?: Maybe<Scalars['String']>;
  tryCount?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['JSON']>;
  billingReceipts?: Maybe<Scalars['JSON']>;
  recurrentPaymentContext?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<RecurrentPaymentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type RecurrentPaymentHistoryRecordCreateInput = {
  status?: Maybe<Scalars['String']>;
  payAfter?: Maybe<Scalars['String']>;
  tryCount?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['JSON']>;
  billingReceipts?: Maybe<Scalars['JSON']>;
  recurrentPaymentContext?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<RecurrentPaymentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum RecurrentPaymentHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type RecurrentPaymentHistoryRecordUpdateInput = {
  status?: Maybe<Scalars['String']>;
  payAfter?: Maybe<Scalars['String']>;
  tryCount?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['JSON']>;
  billingReceipts?: Maybe<Scalars['JSON']>;
  recurrentPaymentContext?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<RecurrentPaymentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type RecurrentPaymentHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<RecurrentPaymentHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<RecurrentPaymentHistoryRecordWhereInput>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  payAfter?: Maybe<Scalars['String']>;
  payAfter_not?: Maybe<Scalars['String']>;
  payAfter_lt?: Maybe<Scalars['String']>;
  payAfter_lte?: Maybe<Scalars['String']>;
  payAfter_gt?: Maybe<Scalars['String']>;
  payAfter_gte?: Maybe<Scalars['String']>;
  payAfter_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  payAfter_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tryCount?: Maybe<Scalars['Int']>;
  tryCount_not?: Maybe<Scalars['Int']>;
  tryCount_lt?: Maybe<Scalars['Int']>;
  tryCount_lte?: Maybe<Scalars['Int']>;
  tryCount_gt?: Maybe<Scalars['Int']>;
  tryCount_gte?: Maybe<Scalars['Int']>;
  tryCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  tryCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  state?: Maybe<Scalars['JSON']>;
  state_not?: Maybe<Scalars['JSON']>;
  state_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  billingReceipts?: Maybe<Scalars['JSON']>;
  billingReceipts_not?: Maybe<Scalars['JSON']>;
  billingReceipts_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  billingReceipts_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  recurrentPaymentContext?: Maybe<Scalars['String']>;
  recurrentPaymentContext_not?: Maybe<Scalars['String']>;
  recurrentPaymentContext_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  recurrentPaymentContext_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<RecurrentPaymentHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<RecurrentPaymentHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<RecurrentPaymentHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<RecurrentPaymentHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type RecurrentPaymentHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type RecurrentPaymentHistoryRecordsCreateInput = {
  data?: Maybe<RecurrentPaymentHistoryRecordCreateInput>;
};

export type RecurrentPaymentHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<RecurrentPaymentHistoryRecordUpdateInput>;
};

export enum RecurrentPaymentStatusType {
  Created = 'CREATED',
  Processing = 'PROCESSING',
  Done = 'DONE',
  ErrorNeedRetry = 'ERROR_NEED_RETRY',
  Error = 'ERROR',
  Cancel = 'CANCEL'
}

export type RecurrentPaymentUpdateInput = {
  status?: Maybe<RecurrentPaymentStatusType>;
  payAfter?: Maybe<Scalars['String']>;
  tryCount?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['JSON']>;
  billingReceipts?: Maybe<Array<BillingReceiptsFieldInput>>;
  recurrentPaymentContext?: Maybe<RecurrentPaymentContextRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type RecurrentPaymentWhereInput = {
  AND?: Maybe<Array<Maybe<RecurrentPaymentWhereInput>>>;
  OR?: Maybe<Array<Maybe<RecurrentPaymentWhereInput>>>;
  status?: Maybe<RecurrentPaymentStatusType>;
  status_not?: Maybe<RecurrentPaymentStatusType>;
  status_in?: Maybe<Array<Maybe<RecurrentPaymentStatusType>>>;
  status_not_in?: Maybe<Array<Maybe<RecurrentPaymentStatusType>>>;
  payAfter?: Maybe<Scalars['String']>;
  payAfter_not?: Maybe<Scalars['String']>;
  payAfter_lt?: Maybe<Scalars['String']>;
  payAfter_lte?: Maybe<Scalars['String']>;
  payAfter_gt?: Maybe<Scalars['String']>;
  payAfter_gte?: Maybe<Scalars['String']>;
  payAfter_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  payAfter_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  tryCount?: Maybe<Scalars['Int']>;
  tryCount_not?: Maybe<Scalars['Int']>;
  tryCount_lt?: Maybe<Scalars['Int']>;
  tryCount_lte?: Maybe<Scalars['Int']>;
  tryCount_gt?: Maybe<Scalars['Int']>;
  tryCount_gte?: Maybe<Scalars['Int']>;
  tryCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  tryCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  state?: Maybe<Scalars['JSON']>;
  state_not?: Maybe<Scalars['JSON']>;
  state_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  state_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  billingReceipts?: Maybe<Array<BillingReceiptsFieldInput>>;
  billingReceipts_not?: Maybe<Array<BillingReceiptsFieldInput>>;
  billingReceipts_in?: Maybe<Array<Maybe<Array<BillingReceiptsFieldInput>>>>;
  billingReceipts_not_in?: Maybe<Array<Maybe<Array<BillingReceiptsFieldInput>>>>;
  recurrentPaymentContext?: Maybe<RecurrentPaymentContextWhereInput>;
  recurrentPaymentContext_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type RecurrentPaymentWhereUniqueInput = {
  id: Scalars['ID'];
};

export type RecurrentPaymentsCreateInput = {
  data?: Maybe<RecurrentPaymentCreateInput>;
};

export type RecurrentPaymentsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<RecurrentPaymentUpdateInput>;
};

export type RegisterBillingReceiptInput = {
  importId: Scalars['String'];
  address: Scalars['String'];
  normalizedAddress?: Maybe<Scalars['String']>;
  accountNumber: Scalars['String'];
  unitName: Scalars['String'];
  unitType: Scalars['String'];
  fullName?: Maybe<Scalars['String']>;
  toPay: Scalars['String'];
  toPayDetails?: Maybe<BillingReceiptServiceToPayDetailsFieldInput>;
  services?: Maybe<Array<Maybe<BillingReceiptServiceFieldInput>>>;
  month: Scalars['Int'];
  year: Scalars['Int'];
  category: BillingCategoryWhereUniqueInput;
  tin: Scalars['String'];
  routingNumber: Scalars['String'];
  bankAccount: Scalars['String'];
  tinMeta?: Maybe<Scalars['JSON']>;
  routingNumberMeta?: Maybe<Scalars['JSON']>;
  raw?: Maybe<Scalars['JSON']>;
};

export type RegisterBillingReceiptsInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  context?: Maybe<BillingIntegrationOrganizationContextWhereUniqueInput>;
  receipts: Array<RegisterBillingReceiptInput>;
};

export type RegisterMultiPaymentForOneReceiptInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  receipt: BillingReceiptWhereUniqueInput;
  acquiringIntegrationContext: AcquiringIntegrationContextWhereUniqueInput;
};

export type RegisterMultiPaymentForOneReceiptOutput = {
  __typename?: 'RegisterMultiPaymentForOneReceiptOutput';
  dv: Scalars['Int'];
  multiPaymentId: Scalars['String'];
  webViewUrl: Scalars['String'];
  feeCalculationUrl: Scalars['String'];
  directPaymentUrl: Scalars['String'];
  anonymousPaymentUrl: Scalars['String'];
};

export type RegisterMultiPaymentForVirtualReceiptInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  receipt: RegisterMultiPaymentVirtualReceiptInput;
  acquiringIntegrationContext: AcquiringIntegrationContextWhereUniqueInput;
};

export type RegisterMultiPaymentForVirtualReceiptOutput = {
  __typename?: 'RegisterMultiPaymentForVirtualReceiptOutput';
  dv: Scalars['Int'];
  multiPaymentId: Scalars['String'];
  webViewUrl: Scalars['String'];
  feeCalculationUrl: Scalars['String'];
  directPaymentUrl: Scalars['String'];
  anonymousPaymentUrl: Scalars['String'];
};

export type RegisterMultiPaymentInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  groupedReceipts: Array<RegisterMultiPaymentServiceConsumerInput>;
  recurrentPaymentContext?: Maybe<RecurrentPaymentContextWhereUniqueInput>;
};

export type RegisterMultiPaymentOutput = {
  __typename?: 'RegisterMultiPaymentOutput';
  dv: Scalars['Int'];
  multiPaymentId: Scalars['String'];
  webViewUrl: Scalars['String'];
  feeCalculationUrl: Scalars['String'];
  directPaymentUrl: Scalars['String'];
  getCardTokensUrl: Scalars['String'];
};

export type RegisterMultiPaymentServiceConsumerInput = {
  serviceConsumer: ServiceConsumerWhereUniqueInput;
  receipts: Array<BillingReceiptWhereUniqueInput>;
};

export type RegisterMultiPaymentVirtualReceiptInput = {
  currencyCode: Scalars['String'];
  amount: Scalars['String'];
  period: Scalars['String'];
  recipient: RegisterMultiPaymentVirtualReceiptRecipientInput;
};

export type RegisterMultiPaymentVirtualReceiptRecipientInput = {
  routingNumber: Scalars['String'];
  bankAccount: Scalars['String'];
  accountNumber: Scalars['String'];
};

export type RegisterNewOrganizationInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  country: Scalars['String'];
  name: Scalars['String'];
  tin: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  meta: Scalars['JSON'];
  avatar?: Maybe<Scalars['Upload']>;
};

export type RegisterNewServiceUserInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  name: Scalars['String'];
  email: Scalars['String'];
  meta?: Maybe<Scalars['JSON']>;
};

export type RegisterNewServiceUserOutput = {
  __typename?: 'RegisterNewServiceUserOutput';
  id: Scalars['ID'];
  email: Scalars['String'];
  password: Scalars['String'];
};

export type RegisterNewUserInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  name: Scalars['String'];
  password: Scalars['String'];
  confirmPhoneActionToken?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
};

export type RegisterResidentInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  address: Scalars['String'];
  addressMeta: AddressMetaFieldInput;
  unitName: Scalars['String'];
  unitType?: Maybe<BuildingUnitSubType>;
};

export type RegisterServiceConsumerInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  residentId: Scalars['ID'];
  accountNumber: Scalars['String'];
  organizationId: Scalars['ID'];
  extra?: Maybe<RegisterServiceConsumerInputExtra>;
};

export type RegisterServiceConsumerInputExtra = {
  paymentCategory?: Maybe<Scalars['String']>;
};

/**  Used to describe device in order to be able to send push notifications via corresponding transport, depending on pushTransport value. RemoteClient could be mobile or web based. RemoteClient could be registered (created by user, admin or anonymous) with or without token, and updated later on by admin (or a user within SyncRemoteClientService) by adding/changing token value and connecting device to user (whose authorization was passed within request). All such interactions should be done via SyncRemoteClientService.  */
export type RemoteClient = {
  __typename?: 'RemoteClient';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the RemoteClient List config, or
   *  2. As an alias to the field set on 'labelField' in the RemoteClient List config, or
   *  3. As an alias to a 'name' field on the RemoteClient List (if one exists), or
   *  4. As an alias to the 'id' field on the RemoteClient List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Mobile/web device ID, which is used to identify a device. One user can have many devices, and one device can be used by many users once upon a time.  */
  deviceId?: Maybe<Scalars['String']>;
  /**  Application ID, which is used to identify app. Same device can have multiple apps installed for same user. It is also required for applying correct credentials for Firebase/Huawei/etc. API requests.  */
  appId?: Maybe<Scalars['String']>;
  /**  Used by transport services (FireBase, Apple, Huawei, etc.) to transfer push notifications to devices.  */
  pushToken?: Maybe<Scalars['String']>;
  /**  Transport service, that delivers push notifications to client device. Type of device requires specific transport service, e.g. Huawei devices can not receive notifications through FireBase.  */
  pushTransport?: Maybe<RemoteClientPushTransportType>;
  /**  Represents the platform type of the client application like android/ios/web.  */
  devicePlatform?: Maybe<RemoteClientDevicePlatformType>;
  /**  Represents the type of push to be sent to the remote client like default/silent-data/etc. Remote client can control structure of data sent via push to the device using this field.Some remote clients are able to show own notifications instead system ones. To do so they have to receive push, containing no notification part, which is sent if this field is equal to PUSH_TYPE_SILENT_DATA.  */
  pushType?: Maybe<RemoteClientPushTypeType>;
  /**  Used by transport services (FireBase, Apple, Huawei, etc.) to transfer VoIP push notifications to devices.  */
  pushTokenVoIP?: Maybe<Scalars['String']>;
  /**  Transport service, that delivers VoIP push notifications to client device. Type of device requires specific transport service, e.g. Huawei devices can not receive notifications through FireBase.  */
  pushTransportVoIP?: Maybe<RemoteClientPushTransportVoIpType>;
  /**  Represents the type of VoIP push to be sent to the remote client like default/silent-data/etc. Remote client can control structure of data sent via push to the device using this field.Some remote clients are able to show own notifications instead system ones. To do so they have to receive push, containing no notification part, which is sent if this field is equal to PUSH_TYPE_SILENT_DATA.  */
  pushTypeVoIP?: Maybe<RemoteClientPushTypeVoIpType>;
  /**  Owner user of a device and a push token. User, which is logged in on the device. Push token can be created by anonymous user and connected to authorized user later on.  */
  owner?: Maybe<User>;
  /**  RemoteClient metadata. OS type, OS version, etc.  */
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type RemoteClientCreateInput = {
  deviceId?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  pushToken?: Maybe<Scalars['String']>;
  pushTransport?: Maybe<RemoteClientPushTransportType>;
  devicePlatform?: Maybe<RemoteClientDevicePlatformType>;
  pushType?: Maybe<RemoteClientPushTypeType>;
  pushTokenVoIP?: Maybe<Scalars['String']>;
  pushTransportVoIP?: Maybe<RemoteClientPushTransportVoIpType>;
  pushTypeVoIP?: Maybe<RemoteClientPushTypeVoIpType>;
  owner?: Maybe<UserRelateToOneInput>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export enum RemoteClientDevicePlatformType {
  Android = 'android',
  Ios = 'ios',
  Web = 'web'
}

/**  A keystone list  */
export type RemoteClientHistoryRecord = {
  __typename?: 'RemoteClientHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the RemoteClientHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the RemoteClientHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the RemoteClientHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the RemoteClientHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  deviceId?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  pushToken?: Maybe<Scalars['String']>;
  pushTransport?: Maybe<Scalars['String']>;
  devicePlatform?: Maybe<Scalars['String']>;
  pushType?: Maybe<Scalars['String']>;
  pushTokenVoIP?: Maybe<Scalars['String']>;
  pushTransportVoIP?: Maybe<Scalars['String']>;
  pushTypeVoIP?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<RemoteClientHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type RemoteClientHistoryRecordCreateInput = {
  deviceId?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  pushToken?: Maybe<Scalars['String']>;
  pushTransport?: Maybe<Scalars['String']>;
  devicePlatform?: Maybe<Scalars['String']>;
  pushType?: Maybe<Scalars['String']>;
  pushTokenVoIP?: Maybe<Scalars['String']>;
  pushTransportVoIP?: Maybe<Scalars['String']>;
  pushTypeVoIP?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<RemoteClientHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum RemoteClientHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type RemoteClientHistoryRecordUpdateInput = {
  deviceId?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  pushToken?: Maybe<Scalars['String']>;
  pushTransport?: Maybe<Scalars['String']>;
  devicePlatform?: Maybe<Scalars['String']>;
  pushType?: Maybe<Scalars['String']>;
  pushTokenVoIP?: Maybe<Scalars['String']>;
  pushTransportVoIP?: Maybe<Scalars['String']>;
  pushTypeVoIP?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<RemoteClientHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type RemoteClientHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<RemoteClientHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<RemoteClientHistoryRecordWhereInput>>>;
  deviceId?: Maybe<Scalars['String']>;
  deviceId_not?: Maybe<Scalars['String']>;
  deviceId_contains?: Maybe<Scalars['String']>;
  deviceId_not_contains?: Maybe<Scalars['String']>;
  deviceId_starts_with?: Maybe<Scalars['String']>;
  deviceId_not_starts_with?: Maybe<Scalars['String']>;
  deviceId_ends_with?: Maybe<Scalars['String']>;
  deviceId_not_ends_with?: Maybe<Scalars['String']>;
  deviceId_i?: Maybe<Scalars['String']>;
  deviceId_not_i?: Maybe<Scalars['String']>;
  deviceId_contains_i?: Maybe<Scalars['String']>;
  deviceId_not_contains_i?: Maybe<Scalars['String']>;
  deviceId_starts_with_i?: Maybe<Scalars['String']>;
  deviceId_not_starts_with_i?: Maybe<Scalars['String']>;
  deviceId_ends_with_i?: Maybe<Scalars['String']>;
  deviceId_not_ends_with_i?: Maybe<Scalars['String']>;
  deviceId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deviceId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appId?: Maybe<Scalars['String']>;
  appId_not?: Maybe<Scalars['String']>;
  appId_contains?: Maybe<Scalars['String']>;
  appId_not_contains?: Maybe<Scalars['String']>;
  appId_starts_with?: Maybe<Scalars['String']>;
  appId_not_starts_with?: Maybe<Scalars['String']>;
  appId_ends_with?: Maybe<Scalars['String']>;
  appId_not_ends_with?: Maybe<Scalars['String']>;
  appId_i?: Maybe<Scalars['String']>;
  appId_not_i?: Maybe<Scalars['String']>;
  appId_contains_i?: Maybe<Scalars['String']>;
  appId_not_contains_i?: Maybe<Scalars['String']>;
  appId_starts_with_i?: Maybe<Scalars['String']>;
  appId_not_starts_with_i?: Maybe<Scalars['String']>;
  appId_ends_with_i?: Maybe<Scalars['String']>;
  appId_not_ends_with_i?: Maybe<Scalars['String']>;
  appId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushToken?: Maybe<Scalars['String']>;
  pushToken_not?: Maybe<Scalars['String']>;
  pushToken_contains?: Maybe<Scalars['String']>;
  pushToken_not_contains?: Maybe<Scalars['String']>;
  pushToken_starts_with?: Maybe<Scalars['String']>;
  pushToken_not_starts_with?: Maybe<Scalars['String']>;
  pushToken_ends_with?: Maybe<Scalars['String']>;
  pushToken_not_ends_with?: Maybe<Scalars['String']>;
  pushToken_i?: Maybe<Scalars['String']>;
  pushToken_not_i?: Maybe<Scalars['String']>;
  pushToken_contains_i?: Maybe<Scalars['String']>;
  pushToken_not_contains_i?: Maybe<Scalars['String']>;
  pushToken_starts_with_i?: Maybe<Scalars['String']>;
  pushToken_not_starts_with_i?: Maybe<Scalars['String']>;
  pushToken_ends_with_i?: Maybe<Scalars['String']>;
  pushToken_not_ends_with_i?: Maybe<Scalars['String']>;
  pushToken_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushToken_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTransport?: Maybe<Scalars['String']>;
  pushTransport_not?: Maybe<Scalars['String']>;
  pushTransport_contains?: Maybe<Scalars['String']>;
  pushTransport_not_contains?: Maybe<Scalars['String']>;
  pushTransport_starts_with?: Maybe<Scalars['String']>;
  pushTransport_not_starts_with?: Maybe<Scalars['String']>;
  pushTransport_ends_with?: Maybe<Scalars['String']>;
  pushTransport_not_ends_with?: Maybe<Scalars['String']>;
  pushTransport_i?: Maybe<Scalars['String']>;
  pushTransport_not_i?: Maybe<Scalars['String']>;
  pushTransport_contains_i?: Maybe<Scalars['String']>;
  pushTransport_not_contains_i?: Maybe<Scalars['String']>;
  pushTransport_starts_with_i?: Maybe<Scalars['String']>;
  pushTransport_not_starts_with_i?: Maybe<Scalars['String']>;
  pushTransport_ends_with_i?: Maybe<Scalars['String']>;
  pushTransport_not_ends_with_i?: Maybe<Scalars['String']>;
  pushTransport_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTransport_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  devicePlatform?: Maybe<Scalars['String']>;
  devicePlatform_not?: Maybe<Scalars['String']>;
  devicePlatform_contains?: Maybe<Scalars['String']>;
  devicePlatform_not_contains?: Maybe<Scalars['String']>;
  devicePlatform_starts_with?: Maybe<Scalars['String']>;
  devicePlatform_not_starts_with?: Maybe<Scalars['String']>;
  devicePlatform_ends_with?: Maybe<Scalars['String']>;
  devicePlatform_not_ends_with?: Maybe<Scalars['String']>;
  devicePlatform_i?: Maybe<Scalars['String']>;
  devicePlatform_not_i?: Maybe<Scalars['String']>;
  devicePlatform_contains_i?: Maybe<Scalars['String']>;
  devicePlatform_not_contains_i?: Maybe<Scalars['String']>;
  devicePlatform_starts_with_i?: Maybe<Scalars['String']>;
  devicePlatform_not_starts_with_i?: Maybe<Scalars['String']>;
  devicePlatform_ends_with_i?: Maybe<Scalars['String']>;
  devicePlatform_not_ends_with_i?: Maybe<Scalars['String']>;
  devicePlatform_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  devicePlatform_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushType?: Maybe<Scalars['String']>;
  pushType_not?: Maybe<Scalars['String']>;
  pushType_contains?: Maybe<Scalars['String']>;
  pushType_not_contains?: Maybe<Scalars['String']>;
  pushType_starts_with?: Maybe<Scalars['String']>;
  pushType_not_starts_with?: Maybe<Scalars['String']>;
  pushType_ends_with?: Maybe<Scalars['String']>;
  pushType_not_ends_with?: Maybe<Scalars['String']>;
  pushType_i?: Maybe<Scalars['String']>;
  pushType_not_i?: Maybe<Scalars['String']>;
  pushType_contains_i?: Maybe<Scalars['String']>;
  pushType_not_contains_i?: Maybe<Scalars['String']>;
  pushType_starts_with_i?: Maybe<Scalars['String']>;
  pushType_not_starts_with_i?: Maybe<Scalars['String']>;
  pushType_ends_with_i?: Maybe<Scalars['String']>;
  pushType_not_ends_with_i?: Maybe<Scalars['String']>;
  pushType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTokenVoIP?: Maybe<Scalars['String']>;
  pushTokenVoIP_not?: Maybe<Scalars['String']>;
  pushTokenVoIP_contains?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_contains?: Maybe<Scalars['String']>;
  pushTokenVoIP_starts_with?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_starts_with?: Maybe<Scalars['String']>;
  pushTokenVoIP_ends_with?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_ends_with?: Maybe<Scalars['String']>;
  pushTokenVoIP_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_contains_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_contains_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_starts_with_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_starts_with_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_ends_with_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_ends_with_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTokenVoIP_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTransportVoIP?: Maybe<Scalars['String']>;
  pushTransportVoIP_not?: Maybe<Scalars['String']>;
  pushTransportVoIP_contains?: Maybe<Scalars['String']>;
  pushTransportVoIP_not_contains?: Maybe<Scalars['String']>;
  pushTransportVoIP_starts_with?: Maybe<Scalars['String']>;
  pushTransportVoIP_not_starts_with?: Maybe<Scalars['String']>;
  pushTransportVoIP_ends_with?: Maybe<Scalars['String']>;
  pushTransportVoIP_not_ends_with?: Maybe<Scalars['String']>;
  pushTransportVoIP_i?: Maybe<Scalars['String']>;
  pushTransportVoIP_not_i?: Maybe<Scalars['String']>;
  pushTransportVoIP_contains_i?: Maybe<Scalars['String']>;
  pushTransportVoIP_not_contains_i?: Maybe<Scalars['String']>;
  pushTransportVoIP_starts_with_i?: Maybe<Scalars['String']>;
  pushTransportVoIP_not_starts_with_i?: Maybe<Scalars['String']>;
  pushTransportVoIP_ends_with_i?: Maybe<Scalars['String']>;
  pushTransportVoIP_not_ends_with_i?: Maybe<Scalars['String']>;
  pushTransportVoIP_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTransportVoIP_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTypeVoIP?: Maybe<Scalars['String']>;
  pushTypeVoIP_not?: Maybe<Scalars['String']>;
  pushTypeVoIP_contains?: Maybe<Scalars['String']>;
  pushTypeVoIP_not_contains?: Maybe<Scalars['String']>;
  pushTypeVoIP_starts_with?: Maybe<Scalars['String']>;
  pushTypeVoIP_not_starts_with?: Maybe<Scalars['String']>;
  pushTypeVoIP_ends_with?: Maybe<Scalars['String']>;
  pushTypeVoIP_not_ends_with?: Maybe<Scalars['String']>;
  pushTypeVoIP_i?: Maybe<Scalars['String']>;
  pushTypeVoIP_not_i?: Maybe<Scalars['String']>;
  pushTypeVoIP_contains_i?: Maybe<Scalars['String']>;
  pushTypeVoIP_not_contains_i?: Maybe<Scalars['String']>;
  pushTypeVoIP_starts_with_i?: Maybe<Scalars['String']>;
  pushTypeVoIP_not_starts_with_i?: Maybe<Scalars['String']>;
  pushTypeVoIP_ends_with_i?: Maybe<Scalars['String']>;
  pushTypeVoIP_not_ends_with_i?: Maybe<Scalars['String']>;
  pushTypeVoIP_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTypeVoIP_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Scalars['String']>;
  owner_not?: Maybe<Scalars['String']>;
  owner_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<RemoteClientHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<RemoteClientHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<RemoteClientHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<RemoteClientHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type RemoteClientHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type RemoteClientHistoryRecordsCreateInput = {
  data?: Maybe<RemoteClientHistoryRecordCreateInput>;
};

export type RemoteClientHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<RemoteClientHistoryRecordUpdateInput>;
};

export enum RemoteClientPushTransportType {
  Firebase = 'firebase',
  Apple = 'apple',
  Huawei = 'huawei'
}

export enum RemoteClientPushTransportVoIpType {
  Firebase = 'firebase',
  Apple = 'apple',
  Huawei = 'huawei'
}

export enum RemoteClientPushTypeType {
  Default = 'default',
  SilentData = 'silent_data'
}

export enum RemoteClientPushTypeVoIpType {
  Default = 'default',
  SilentData = 'silent_data'
}

export type RemoteClientRelateToOneInput = {
  create?: Maybe<RemoteClientCreateInput>;
  connect?: Maybe<RemoteClientWhereUniqueInput>;
  disconnect?: Maybe<RemoteClientWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type RemoteClientUpdateInput = {
  deviceId?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  pushToken?: Maybe<Scalars['String']>;
  pushTransport?: Maybe<RemoteClientPushTransportType>;
  devicePlatform?: Maybe<RemoteClientDevicePlatformType>;
  pushType?: Maybe<RemoteClientPushTypeType>;
  pushTokenVoIP?: Maybe<Scalars['String']>;
  pushTransportVoIP?: Maybe<RemoteClientPushTransportVoIpType>;
  pushTypeVoIP?: Maybe<RemoteClientPushTypeVoIpType>;
  owner?: Maybe<UserRelateToOneInput>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type RemoteClientWhereInput = {
  AND?: Maybe<Array<Maybe<RemoteClientWhereInput>>>;
  OR?: Maybe<Array<Maybe<RemoteClientWhereInput>>>;
  deviceId?: Maybe<Scalars['String']>;
  deviceId_not?: Maybe<Scalars['String']>;
  deviceId_contains?: Maybe<Scalars['String']>;
  deviceId_not_contains?: Maybe<Scalars['String']>;
  deviceId_starts_with?: Maybe<Scalars['String']>;
  deviceId_not_starts_with?: Maybe<Scalars['String']>;
  deviceId_ends_with?: Maybe<Scalars['String']>;
  deviceId_not_ends_with?: Maybe<Scalars['String']>;
  deviceId_i?: Maybe<Scalars['String']>;
  deviceId_not_i?: Maybe<Scalars['String']>;
  deviceId_contains_i?: Maybe<Scalars['String']>;
  deviceId_not_contains_i?: Maybe<Scalars['String']>;
  deviceId_starts_with_i?: Maybe<Scalars['String']>;
  deviceId_not_starts_with_i?: Maybe<Scalars['String']>;
  deviceId_ends_with_i?: Maybe<Scalars['String']>;
  deviceId_not_ends_with_i?: Maybe<Scalars['String']>;
  deviceId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deviceId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appId?: Maybe<Scalars['String']>;
  appId_not?: Maybe<Scalars['String']>;
  appId_contains?: Maybe<Scalars['String']>;
  appId_not_contains?: Maybe<Scalars['String']>;
  appId_starts_with?: Maybe<Scalars['String']>;
  appId_not_starts_with?: Maybe<Scalars['String']>;
  appId_ends_with?: Maybe<Scalars['String']>;
  appId_not_ends_with?: Maybe<Scalars['String']>;
  appId_i?: Maybe<Scalars['String']>;
  appId_not_i?: Maybe<Scalars['String']>;
  appId_contains_i?: Maybe<Scalars['String']>;
  appId_not_contains_i?: Maybe<Scalars['String']>;
  appId_starts_with_i?: Maybe<Scalars['String']>;
  appId_not_starts_with_i?: Maybe<Scalars['String']>;
  appId_ends_with_i?: Maybe<Scalars['String']>;
  appId_not_ends_with_i?: Maybe<Scalars['String']>;
  appId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  appId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushToken?: Maybe<Scalars['String']>;
  pushToken_not?: Maybe<Scalars['String']>;
  pushToken_contains?: Maybe<Scalars['String']>;
  pushToken_not_contains?: Maybe<Scalars['String']>;
  pushToken_starts_with?: Maybe<Scalars['String']>;
  pushToken_not_starts_with?: Maybe<Scalars['String']>;
  pushToken_ends_with?: Maybe<Scalars['String']>;
  pushToken_not_ends_with?: Maybe<Scalars['String']>;
  pushToken_i?: Maybe<Scalars['String']>;
  pushToken_not_i?: Maybe<Scalars['String']>;
  pushToken_contains_i?: Maybe<Scalars['String']>;
  pushToken_not_contains_i?: Maybe<Scalars['String']>;
  pushToken_starts_with_i?: Maybe<Scalars['String']>;
  pushToken_not_starts_with_i?: Maybe<Scalars['String']>;
  pushToken_ends_with_i?: Maybe<Scalars['String']>;
  pushToken_not_ends_with_i?: Maybe<Scalars['String']>;
  pushToken_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushToken_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTransport?: Maybe<RemoteClientPushTransportType>;
  pushTransport_not?: Maybe<RemoteClientPushTransportType>;
  pushTransport_in?: Maybe<Array<Maybe<RemoteClientPushTransportType>>>;
  pushTransport_not_in?: Maybe<Array<Maybe<RemoteClientPushTransportType>>>;
  devicePlatform?: Maybe<RemoteClientDevicePlatformType>;
  devicePlatform_not?: Maybe<RemoteClientDevicePlatformType>;
  devicePlatform_in?: Maybe<Array<Maybe<RemoteClientDevicePlatformType>>>;
  devicePlatform_not_in?: Maybe<Array<Maybe<RemoteClientDevicePlatformType>>>;
  pushType?: Maybe<RemoteClientPushTypeType>;
  pushType_not?: Maybe<RemoteClientPushTypeType>;
  pushType_in?: Maybe<Array<Maybe<RemoteClientPushTypeType>>>;
  pushType_not_in?: Maybe<Array<Maybe<RemoteClientPushTypeType>>>;
  pushTokenVoIP?: Maybe<Scalars['String']>;
  pushTokenVoIP_not?: Maybe<Scalars['String']>;
  pushTokenVoIP_contains?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_contains?: Maybe<Scalars['String']>;
  pushTokenVoIP_starts_with?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_starts_with?: Maybe<Scalars['String']>;
  pushTokenVoIP_ends_with?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_ends_with?: Maybe<Scalars['String']>;
  pushTokenVoIP_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_contains_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_contains_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_starts_with_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_starts_with_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_ends_with_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_not_ends_with_i?: Maybe<Scalars['String']>;
  pushTokenVoIP_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTokenVoIP_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pushTransportVoIP?: Maybe<RemoteClientPushTransportVoIpType>;
  pushTransportVoIP_not?: Maybe<RemoteClientPushTransportVoIpType>;
  pushTransportVoIP_in?: Maybe<Array<Maybe<RemoteClientPushTransportVoIpType>>>;
  pushTransportVoIP_not_in?: Maybe<Array<Maybe<RemoteClientPushTransportVoIpType>>>;
  pushTypeVoIP?: Maybe<RemoteClientPushTypeVoIpType>;
  pushTypeVoIP_not?: Maybe<RemoteClientPushTypeVoIpType>;
  pushTypeVoIP_in?: Maybe<Array<Maybe<RemoteClientPushTypeVoIpType>>>;
  pushTypeVoIP_not_in?: Maybe<Array<Maybe<RemoteClientPushTypeVoIpType>>>;
  owner?: Maybe<UserWhereInput>;
  owner_is_null?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type RemoteClientWhereUniqueInput = {
  id: Scalars['ID'];
};

export type RemoteClientsCreateInput = {
  data?: Maybe<RemoteClientCreateInput>;
};

export type RemoteClientsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<RemoteClientUpdateInput>;
};

export type ResendConfirmPhoneActionSmsInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  captcha: Scalars['String'];
  token: Scalars['String'];
};

export type ResendConfirmPhoneActionSmsOutput = {
  __typename?: 'ResendConfirmPhoneActionSmsOutput';
  status: Scalars['String'];
};

export type ResendMessageInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  message?: Maybe<MessageWhereUniqueInput>;
};

export type ResendMessageOutput = {
  __typename?: 'ResendMessageOutput';
  status: Scalars['String'];
  id: Scalars['String'];
};

export type ResetOrganizationInput = {
  dv: Scalars['Int'];
  sender: Scalars['JSON'];
  organizationId: Scalars['ID'];
};

export type ResetOrganizationOutput = {
  __typename?: 'ResetOrganizationOutput';
  status: Scalars['String'];
};

export type ResetUserInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  user: UserWhereUniqueInput;
  saveName?: Maybe<Scalars['Boolean']>;
};

export type ResetUserOutput = {
  __typename?: 'ResetUserOutput';
  status: Scalars['String'];
};

/**  Person, that resides in a specified property and unit  */
export type Resident = {
  __typename?: 'Resident';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the Resident List config, or
   *  2. As an alias to the field set on 'labelField' in the Resident List config, or
   *  3. As an alias to a 'name' field on the Resident List (if one exists), or
   *  4. As an alias to the 'id' field on the Resident List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Mobile user account  */
  user?: Maybe<User>;
  /**  Organization data, that is returned for current resident in mobile client  */
  residentOrganization?: Maybe<ResidentOrganization>;
  /**  Property, in which this person resides. Can be missing, when a resident has been registered, but there is no Property in our system yet  */
  property?: Maybe<Property>;
  /**  Property data, that is returned for current resident in mobile client  */
  residentProperty?: Maybe<ResidentProperty>;
  /**  Contains features that are enabled for user organization  */
  organizationFeatures?: Maybe<OrganizationFeatures>;
  /**  Contains billing and acquiring integration names that are enabled for this resident per category  */
  paymentCategories?: Maybe<Array<Maybe<PaymentCategory>>>;
  /**  Unit of the property, in which this person resides  */
  unitName?: Maybe<Scalars['String']>;
  /**  Type of unit, such as parking lot or flat  */
  unitType?: Maybe<Scalars['String']>;
  /**  Ref to the organization. It is filled in on the server and is read-only  */
  organization?: Maybe<Organization>;
  id: Scalars['ID'];
  /**  Normalized address  */
  address?: Maybe<Scalars['String']>;
  /**  The unique key of the address  */
  addressKey?: Maybe<Scalars['String']>;
  /**  Property address components  */
  addressMeta?: Maybe<AddressMetaField>;
  /**  The origins of the address (some strings which may looks like real address or some id)  */
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type ResidentAcquiringIntegrationContext = {
  __typename?: 'ResidentAcquiringIntegrationContext';
  id: Scalars['ID'];
  integration?: Maybe<AcquiringIntegration>;
};

export type ResidentBillingAccount = {
  __typename?: 'ResidentBillingAccount';
  id: Scalars['ID'];
};

export type ResidentBillingReceiptOutput = {
  __typename?: 'ResidentBillingReceiptOutput';
  dv: Scalars['String'];
  recipient: BillingReceiptsRecipientField;
  id: Scalars['ID'];
  period: Scalars['String'];
  toPay: Scalars['String'];
  paid: Scalars['String'];
  explicitFee: Scalars['String'];
  printableNumber?: Maybe<Scalars['String']>;
  toPayDetails?: Maybe<BillingReceiptToPayDetailsField>;
  services?: Maybe<Array<BillingReceiptServiceField>>;
  serviceConsumer: ServiceConsumer;
  currencyCode: Scalars['String'];
  category: BillingCategory;
  isPayable: Scalars['Boolean'];
};

export type ResidentBillingReceiptWhereInput = {
  AND?: Maybe<Array<Maybe<ResidentBillingReceiptWhereInput>>>;
  OR?: Maybe<Array<Maybe<ResidentBillingReceiptWhereInput>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  period?: Maybe<Scalars['String']>;
  period_not?: Maybe<Scalars['String']>;
  period_contains?: Maybe<Scalars['String']>;
  period_not_contains?: Maybe<Scalars['String']>;
  period_starts_with?: Maybe<Scalars['String']>;
  period_not_starts_with?: Maybe<Scalars['String']>;
  period_ends_with?: Maybe<Scalars['String']>;
  period_not_ends_with?: Maybe<Scalars['String']>;
  period_i?: Maybe<Scalars['String']>;
  period_not_i?: Maybe<Scalars['String']>;
  period_contains_i?: Maybe<Scalars['String']>;
  period_not_contains_i?: Maybe<Scalars['String']>;
  period_starts_with_i?: Maybe<Scalars['String']>;
  period_not_starts_with_i?: Maybe<Scalars['String']>;
  period_ends_with_i?: Maybe<Scalars['String']>;
  period_not_ends_with_i?: Maybe<Scalars['String']>;
  toPay?: Maybe<Scalars['String']>;
  toPay_not?: Maybe<Scalars['String']>;
  toPay_contains?: Maybe<Scalars['String']>;
  toPay_not_contains?: Maybe<Scalars['String']>;
  toPay_starts_with?: Maybe<Scalars['String']>;
  toPay_not_starts_with?: Maybe<Scalars['String']>;
  toPay_ends_with?: Maybe<Scalars['String']>;
  toPay_not_ends_with?: Maybe<Scalars['String']>;
  toPay_i?: Maybe<Scalars['String']>;
  toPay_not_i?: Maybe<Scalars['String']>;
  toPay_contains_i?: Maybe<Scalars['String']>;
  toPay_not_contains_i?: Maybe<Scalars['String']>;
  toPay_starts_with_i?: Maybe<Scalars['String']>;
  toPay_not_starts_with_i?: Maybe<Scalars['String']>;
  toPay_ends_with_i?: Maybe<Scalars['String']>;
  toPay_not_ends_with_i?: Maybe<Scalars['String']>;
  printableNumber?: Maybe<Scalars['String']>;
  printableNumber_not?: Maybe<Scalars['String']>;
  printableNumber_contains?: Maybe<Scalars['String']>;
  printableNumber_not_contains?: Maybe<Scalars['String']>;
  printableNumber_starts_with?: Maybe<Scalars['String']>;
  printableNumber_not_starts_with?: Maybe<Scalars['String']>;
  printableNumber_ends_with?: Maybe<Scalars['String']>;
  printableNumber_not_ends_with?: Maybe<Scalars['String']>;
  printableNumber_i?: Maybe<Scalars['String']>;
  printableNumber_not_i?: Maybe<Scalars['String']>;
  printableNumber_contains_i?: Maybe<Scalars['String']>;
  printableNumber_not_contains_i?: Maybe<Scalars['String']>;
  printableNumber_starts_with_i?: Maybe<Scalars['String']>;
  printableNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  printableNumber_ends_with_i?: Maybe<Scalars['String']>;
  printableNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  serviceConsumer?: Maybe<ServiceConsumerWhereInput>;
  serviceConsumer_is_null?: Maybe<Scalars['Boolean']>;
};

export type ResidentCreateInput = {
  user?: Maybe<UserRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type ResidentHistoryRecord = {
  __typename?: 'ResidentHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ResidentHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the ResidentHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the ResidentHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the ResidentHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  residentOrganization?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['String']>;
  residentProperty?: Maybe<Scalars['JSON']>;
  organizationFeatures?: Maybe<Scalars['JSON']>;
  paymentCategories?: Maybe<Scalars['JSON']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ResidentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ResidentHistoryRecordCreateInput = {
  user?: Maybe<Scalars['String']>;
  residentOrganization?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['String']>;
  residentProperty?: Maybe<Scalars['JSON']>;
  organizationFeatures?: Maybe<Scalars['JSON']>;
  paymentCategories?: Maybe<Scalars['JSON']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ResidentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum ResidentHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type ResidentHistoryRecordUpdateInput = {
  user?: Maybe<Scalars['String']>;
  residentOrganization?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['String']>;
  residentProperty?: Maybe<Scalars['JSON']>;
  organizationFeatures?: Maybe<Scalars['JSON']>;
  paymentCategories?: Maybe<Scalars['JSON']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ResidentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ResidentHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<ResidentHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<ResidentHistoryRecordWhereInput>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  residentOrganization?: Maybe<Scalars['JSON']>;
  residentOrganization_not?: Maybe<Scalars['JSON']>;
  residentOrganization_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  residentOrganization_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  residentProperty?: Maybe<Scalars['JSON']>;
  residentProperty_not?: Maybe<Scalars['JSON']>;
  residentProperty_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  residentProperty_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  organizationFeatures?: Maybe<Scalars['JSON']>;
  organizationFeatures_not?: Maybe<Scalars['JSON']>;
  organizationFeatures_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  organizationFeatures_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  paymentCategories?: Maybe<Scalars['JSON']>;
  paymentCategories_not?: Maybe<Scalars['JSON']>;
  paymentCategories_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  paymentCategories_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_contains?: Maybe<Scalars['String']>;
  unitType_not_contains?: Maybe<Scalars['String']>;
  unitType_starts_with?: Maybe<Scalars['String']>;
  unitType_not_starts_with?: Maybe<Scalars['String']>;
  unitType_ends_with?: Maybe<Scalars['String']>;
  unitType_not_ends_with?: Maybe<Scalars['String']>;
  unitType_i?: Maybe<Scalars['String']>;
  unitType_not_i?: Maybe<Scalars['String']>;
  unitType_contains_i?: Maybe<Scalars['String']>;
  unitType_not_contains_i?: Maybe<Scalars['String']>;
  unitType_starts_with_i?: Maybe<Scalars['String']>;
  unitType_not_starts_with_i?: Maybe<Scalars['String']>;
  unitType_ends_with_i?: Maybe<Scalars['String']>;
  unitType_not_ends_with_i?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  address?: Maybe<Scalars['String']>;
  address_not?: Maybe<Scalars['String']>;
  address_contains?: Maybe<Scalars['String']>;
  address_not_contains?: Maybe<Scalars['String']>;
  address_starts_with?: Maybe<Scalars['String']>;
  address_not_starts_with?: Maybe<Scalars['String']>;
  address_ends_with?: Maybe<Scalars['String']>;
  address_not_ends_with?: Maybe<Scalars['String']>;
  address_i?: Maybe<Scalars['String']>;
  address_not_i?: Maybe<Scalars['String']>;
  address_contains_i?: Maybe<Scalars['String']>;
  address_not_contains_i?: Maybe<Scalars['String']>;
  address_starts_with_i?: Maybe<Scalars['String']>;
  address_not_starts_with_i?: Maybe<Scalars['String']>;
  address_ends_with_i?: Maybe<Scalars['String']>;
  address_not_ends_with_i?: Maybe<Scalars['String']>;
  address_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  address_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey?: Maybe<Scalars['String']>;
  addressKey_not?: Maybe<Scalars['String']>;
  addressKey_contains?: Maybe<Scalars['String']>;
  addressKey_not_contains?: Maybe<Scalars['String']>;
  addressKey_starts_with?: Maybe<Scalars['String']>;
  addressKey_not_starts_with?: Maybe<Scalars['String']>;
  addressKey_ends_with?: Maybe<Scalars['String']>;
  addressKey_not_ends_with?: Maybe<Scalars['String']>;
  addressKey_i?: Maybe<Scalars['String']>;
  addressKey_not_i?: Maybe<Scalars['String']>;
  addressKey_contains_i?: Maybe<Scalars['String']>;
  addressKey_not_contains_i?: Maybe<Scalars['String']>;
  addressKey_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_not_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_not_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressMeta_not?: Maybe<Scalars['JSON']>;
  addressMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources?: Maybe<Scalars['JSON']>;
  addressSources_not?: Maybe<Scalars['JSON']>;
  addressSources_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<ResidentHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<ResidentHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<ResidentHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<ResidentHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ResidentHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ResidentHistoryRecordsCreateInput = {
  data?: Maybe<ResidentHistoryRecordCreateInput>;
};

export type ResidentHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ResidentHistoryRecordUpdateInput>;
};

export type ResidentProperty = {
  __typename?: 'ResidentProperty';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  address: Scalars['String'];
};

export type ResidentRelateToOneInput = {
  create?: Maybe<ResidentCreateInput>;
  connect?: Maybe<ResidentWhereUniqueInput>;
  disconnect?: Maybe<ResidentWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type ResidentScopesInput = {
  property: PropertyWhereUniqueInput;
  units?: Maybe<Array<Maybe<PropertyUnitInput>>>;
  billingAccountNumbers?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ResidentUpdateInput = {
  user?: Maybe<UserRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  address?: Maybe<Scalars['String']>;
  addressKey?: Maybe<Scalars['String']>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressSources?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type ResidentWhereInput = {
  AND?: Maybe<Array<Maybe<ResidentWhereInput>>>;
  OR?: Maybe<Array<Maybe<ResidentWhereInput>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  property?: Maybe<PropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  address?: Maybe<Scalars['String']>;
  address_not?: Maybe<Scalars['String']>;
  address_contains?: Maybe<Scalars['String']>;
  address_not_contains?: Maybe<Scalars['String']>;
  address_starts_with?: Maybe<Scalars['String']>;
  address_not_starts_with?: Maybe<Scalars['String']>;
  address_ends_with?: Maybe<Scalars['String']>;
  address_not_ends_with?: Maybe<Scalars['String']>;
  address_i?: Maybe<Scalars['String']>;
  address_not_i?: Maybe<Scalars['String']>;
  address_contains_i?: Maybe<Scalars['String']>;
  address_not_contains_i?: Maybe<Scalars['String']>;
  address_starts_with_i?: Maybe<Scalars['String']>;
  address_not_starts_with_i?: Maybe<Scalars['String']>;
  address_ends_with_i?: Maybe<Scalars['String']>;
  address_not_ends_with_i?: Maybe<Scalars['String']>;
  address_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  address_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey?: Maybe<Scalars['String']>;
  addressKey_not?: Maybe<Scalars['String']>;
  addressKey_contains?: Maybe<Scalars['String']>;
  addressKey_not_contains?: Maybe<Scalars['String']>;
  addressKey_starts_with?: Maybe<Scalars['String']>;
  addressKey_not_starts_with?: Maybe<Scalars['String']>;
  addressKey_ends_with?: Maybe<Scalars['String']>;
  addressKey_not_ends_with?: Maybe<Scalars['String']>;
  addressKey_i?: Maybe<Scalars['String']>;
  addressKey_not_i?: Maybe<Scalars['String']>;
  addressKey_contains_i?: Maybe<Scalars['String']>;
  addressKey_not_contains_i?: Maybe<Scalars['String']>;
  addressKey_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_not_starts_with_i?: Maybe<Scalars['String']>;
  addressKey_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_not_ends_with_i?: Maybe<Scalars['String']>;
  addressKey_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressKey_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressMeta?: Maybe<Scalars['JSON']>;
  addressMeta_not?: Maybe<Scalars['JSON']>;
  addressMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources?: Maybe<Scalars['JSON']>;
  addressSources_not?: Maybe<Scalars['JSON']>;
  addressSources_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  addressSources_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type ResidentWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ResidentsCreateInput = {
  data?: Maybe<ResidentCreateInput>;
};

export type ResidentsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ResidentUpdateInput>;
};

export type SendAppPushMessageData = {
  body: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  B2CAppContext?: Maybe<Scalars['String']>;
};

export type SendAppPushMessageInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  app: B2CAppWhereUniqueInput;
  user: UserWhereUniqueInput;
  type: SendAppPushMessageType;
  data: SendAppPushMessageData;
};

export type SendAppPushMessageOutput = {
  __typename?: 'SendAppPushMessageOutput';
  id: Scalars['String'];
  status: Scalars['String'];
};

export enum SendAppPushMessageType {
  VoipIncomingCallMessage = 'VOIP_INCOMING_CALL_MESSAGE',
  B2CAppMessagePush = 'B2C_APP_MESSAGE_PUSH'
}

export type SendMessageInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  to: SendMessageToInput;
  emailFrom?: Maybe<Scalars['String']>;
  type: SendMessageType;
  lang: SendMessageLang;
  meta: Scalars['JSON'];
  organization?: Maybe<OrganizationWhereUniqueInput>;
  uniqKey?: Maybe<Scalars['String']>;
};

export enum SendMessageLang {
  Ru = 'ru',
  En = 'en'
}

export type SendMessageOutput = {
  __typename?: 'SendMessageOutput';
  status: Scalars['String'];
  id: Scalars['String'];
  isDuplicateMessage?: Maybe<Scalars['Boolean']>;
};

export type SendMessageToInput = {
  user?: Maybe<UserWhereUniqueInput>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  remoteClient?: Maybe<RemoteClientWhereInput>;
};

export type SendMessageToResidentScopesServiceInput = {
  dv: Scalars['Int'];
  sender: Scalars['JSON'];
  type: SendMessageType;
  lang?: Maybe<SendMessageLang>;
  uniqKeyTemplate?: Maybe<Scalars['String']>;
  scopes: Array<ResidentScopesInput>;
  meta?: Maybe<Scalars['JSON']>;
};

export type SendMessageToResidentScopesServiceOutput = {
  __typename?: 'SendMessageToResidentScopesServiceOutput';
  status: Scalars['String'];
};

export type SendMessageToSupportInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  text: Scalars['String'];
  emailFrom?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<Scalars['Upload']>>>;
  os: Scalars['String'];
  appVersion: Scalars['String'];
  lang: SendMessageToSupportLang;
  meta: Scalars['JSON'];
};

export enum SendMessageToSupportLang {
  Ru = 'ru',
  En = 'en'
}

export type SendMessageToSupportOutput = {
  __typename?: 'SendMessageToSupportOutput';
  id: Scalars['String'];
  status: Scalars['String'];
};

export enum SendMessageType {
  InviteNewEmployee = 'INVITE_NEW_EMPLOYEE',
  ShareTicket = 'SHARE_TICKET',
  BankAccountCreationRequest = 'BANK_ACCOUNT_CREATION_REQUEST',
  DirtyInviteNewEmployeeSms = 'DIRTY_INVITE_NEW_EMPLOYEE_SMS',
  DirtyInviteNewEmployeeEmail = 'DIRTY_INVITE_NEW_EMPLOYEE_EMAIL',
  RegisterNewUser = 'REGISTER_NEW_USER',
  ResetPassword = 'RESET_PASSWORD',
  SmsVerify = 'SMS_VERIFY',
  DeveloperImportantNoteType = 'DEVELOPER_IMPORTANT_NOTE_TYPE',
  CustomerImportantNoteType = 'CUSTOMER_IMPORTANT_NOTE_TYPE',
  MessageForwardedToSupport = 'MESSAGE_FORWARDED_TO_SUPPORT',
  TicketAssigneeConnected = 'TICKET_ASSIGNEE_CONNECTED',
  TicketExecutorConnected = 'TICKET_EXECUTOR_CONNECTED',
  TrackTicketInDomaApp = 'TRACK_TICKET_IN_DOMA_APP',
  TicketStatusOpened = 'TICKET_STATUS_OPENED',
  TicketStatusInProgress = 'TICKET_STATUS_IN_PROGRESS',
  TicketStatusCompleted = 'TICKET_STATUS_COMPLETED',
  TicketStatusReturned = 'TICKET_STATUS_RETURNED',
  TicketStatusDeclined = 'TICKET_STATUS_DECLINED',
  TicketCommentAdded = 'TICKET_COMMENT_ADDED',
  MeterVerificationDateReminder = 'METER_VERIFICATION_DATE_REMINDER',
  ResidentAddBillingAccount = 'RESIDENT_ADD_BILLING_ACCOUNT',
  BillingReceiptAvailable = 'BILLING_RECEIPT_AVAILABLE',
  BillingReceiptAvailableNoAccount = 'BILLING_RECEIPT_AVAILABLE_NO_ACCOUNT',
  BillingReceiptCategoryAvailable = 'BILLING_RECEIPT_CATEGORY_AVAILABLE',
  BillingReceiptAdded = 'BILLING_RECEIPT_ADDED',
  BillingReceiptAddedWithDebt = 'BILLING_RECEIPT_ADDED_WITH_DEBT',
  BillingReceiptAddedWithNoDebt = 'BILLING_RECEIPT_ADDED_WITH_NO_DEBT',
  MeterSubmitReadingsReminder = 'METER_SUBMIT_READINGS_REMINDER',
  MeterVerificationDateExpired = 'METER_VERIFICATION_DATE_EXPIRED',
  ResidentUpgradeApp = 'RESIDENT_UPGRADE_APP',
  StaffUpgradeApp = 'STAFF_UPGRADE_APP',
  CustomContentMessagePush = 'CUSTOM_CONTENT_MESSAGE_PUSH',
  CustomContentMessageEmail = 'CUSTOM_CONTENT_MESSAGE_EMAIL',
  CustomContentMessageSms = 'CUSTOM_CONTENT_MESSAGE_SMS',
  VoipIncomingCallMessage = 'VOIP_INCOMING_CALL_MESSAGE',
  B2CAppMessagePush = 'B2C_APP_MESSAGE_PUSH',
  RecurrentPaymentProceedingSuccessResultMessage = 'RECURRENT_PAYMENT_PROCEEDING_SUCCESS_RESULT_MESSAGE',
  RecurrentPaymentProceedingUnknownErrorMessage = 'RECURRENT_PAYMENT_PROCEEDING_UNKNOWN_ERROR_MESSAGE',
  RecurrentPaymentProceedingAcquiringPaymentProceedErrorMessage = 'RECURRENT_PAYMENT_PROCEEDING_ACQUIRING_PAYMENT_PROCEED_ERROR_MESSAGE',
  RecurrentPaymentProceedingServiceConsumerNotFoundErrorMessage = 'RECURRENT_PAYMENT_PROCEEDING_SERVICE_CONSUMER_NOT_FOUND_ERROR_MESSAGE',
  RecurrentPaymentProceedingLimitExceededErrorMessage = 'RECURRENT_PAYMENT_PROCEEDING_LIMIT_EXCEEDED_ERROR_MESSAGE',
  RecurrentPaymentProceedingContextNotFoundErrorMessage = 'RECURRENT_PAYMENT_PROCEEDING_CONTEXT_NOT_FOUND_ERROR_MESSAGE',
  RecurrentPaymentProceedingContextDisabledErrorMessage = 'RECURRENT_PAYMENT_PROCEEDING_CONTEXT_DISABLED_ERROR_MESSAGE',
  RecurrentPaymentProceedingCardTokenNotValidErrorMessage = 'RECURRENT_PAYMENT_PROCEEDING_CARD_TOKEN_NOT_VALID_ERROR_MESSAGE',
  RecurrentPaymentProceedingCanNotRegisterMultiPaymentErrorMessage = 'RECURRENT_PAYMENT_PROCEEDING_CAN_NOT_REGISTER_MULTI_PAYMENT_ERROR_MESSAGE',
  RecurrentPaymentTomorrowPaymentMessage = 'RECURRENT_PAYMENT_TOMORROW_PAYMENT_MESSAGE',
  NewsItemCommonMessageType = 'NEWS_ITEM_COMMON_MESSAGE_TYPE',
  NewsItemEmergencyMessageType = 'NEWS_ITEM_EMERGENCY_MESSAGE_TYPE'
}

export type SendNewReceiptMessagesToResidentScopesInput = {
  dv: Scalars['Int'];
  sender: Scalars['JSON'];
  context: BillingIntegrationOrganizationContextWhereUniqueInput;
  category: BillingCategoryWhereUniqueInput;
  period: Scalars['String'];
  lang?: Maybe<SendMessageLang>;
  scopes: Array<Maybe<PropertyScopesInput>>;
  meta?: Maybe<Scalars['JSON']>;
};

export type SendNewReceiptMessagesToResidentScopesOutput = {
  __typename?: 'SendNewReceiptMessagesToResidentScopesOutput';
  status: Scalars['String'];
};

export type SenderField = {
  __typename?: 'SenderField';
  dv: Scalars['Int'];
  fingerprint: Scalars['String'];
};

export type SenderFieldInput = {
  dv: Scalars['Int'];
  fingerprint: Scalars['String'];
};

/**  Service Consumer object. Existence of this object means that the resident is willing to pay for certain services  */
export type ServiceConsumer = {
  __typename?: 'ServiceConsumer';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ServiceConsumer List config, or
   *  2. As an alias to the field set on 'labelField' in the ServiceConsumer List config, or
   *  3. As an alias to a 'name' field on the ServiceConsumer List (if one exists), or
   *  4. As an alias to the 'id' field on the ServiceConsumer List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  A payment category for this resident  */
  paymentCategory?: Maybe<Scalars['String']>;
  /**  Resident object  */
  resident?: Maybe<Resident>;
  /**  [DEPRECATED] Billing account, that will allow this resident to pay for certain service  */
  billingAccount?: Maybe<BillingAccount>;
  /**  [DEPRECATED] BillingAccount id, that is returned for current serviceConsumer in mobile client  */
  residentBillingAccount?: Maybe<ResidentBillingAccount>;
  /**  [DEPRECATED] Billing integration context, that this serviceConsumer is connected to  */
  billingIntegrationContext?: Maybe<BillingIntegrationOrganizationContext>;
  /**  Acquiring integration context, that this serviceConsumer is connected to  */
  acquiringIntegrationContext?: Maybe<AcquiringIntegrationContext>;
  /**  AcquiringIntegration, that is returned for current serviceConsumer in mobile client  */
  residentAcquiringIntegrationContext?: Maybe<ResidentAcquiringIntegrationContext>;
  /**  Account number taken from resident. This is what resident think his account number is  */
  accountNumber?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Organization data, that is returned for current resident in mobile client  */
  residentOrganization?: Maybe<ResidentOrganization>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type ServiceConsumerCreateInput = {
  paymentCategory?: Maybe<Scalars['String']>;
  resident?: Maybe<ResidentRelateToOneInput>;
  billingAccount?: Maybe<BillingAccountRelateToOneInput>;
  billingIntegrationContext?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  acquiringIntegrationContext?: Maybe<AcquiringIntegrationContextRelateToOneInput>;
  accountNumber?: Maybe<Scalars['String']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type ServiceConsumerHistoryRecord = {
  __typename?: 'ServiceConsumerHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ServiceConsumerHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the ServiceConsumerHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the ServiceConsumerHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the ServiceConsumerHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  paymentCategory?: Maybe<Scalars['String']>;
  resident?: Maybe<Scalars['String']>;
  billingAccount?: Maybe<Scalars['String']>;
  residentBillingAccount?: Maybe<Scalars['JSON']>;
  billingIntegrationContext?: Maybe<Scalars['String']>;
  acquiringIntegrationContext?: Maybe<Scalars['String']>;
  residentAcquiringIntegrationContext?: Maybe<Scalars['JSON']>;
  accountNumber?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  residentOrganization?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ServiceConsumerHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ServiceConsumerHistoryRecordCreateInput = {
  paymentCategory?: Maybe<Scalars['String']>;
  resident?: Maybe<Scalars['String']>;
  billingAccount?: Maybe<Scalars['String']>;
  residentBillingAccount?: Maybe<Scalars['JSON']>;
  billingIntegrationContext?: Maybe<Scalars['String']>;
  acquiringIntegrationContext?: Maybe<Scalars['String']>;
  residentAcquiringIntegrationContext?: Maybe<Scalars['JSON']>;
  accountNumber?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  residentOrganization?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ServiceConsumerHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum ServiceConsumerHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type ServiceConsumerHistoryRecordUpdateInput = {
  paymentCategory?: Maybe<Scalars['String']>;
  resident?: Maybe<Scalars['String']>;
  billingAccount?: Maybe<Scalars['String']>;
  residentBillingAccount?: Maybe<Scalars['JSON']>;
  billingIntegrationContext?: Maybe<Scalars['String']>;
  acquiringIntegrationContext?: Maybe<Scalars['String']>;
  residentAcquiringIntegrationContext?: Maybe<Scalars['JSON']>;
  accountNumber?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  residentOrganization?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ServiceConsumerHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ServiceConsumerHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<ServiceConsumerHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<ServiceConsumerHistoryRecordWhereInput>>>;
  paymentCategory?: Maybe<Scalars['String']>;
  paymentCategory_not?: Maybe<Scalars['String']>;
  paymentCategory_contains?: Maybe<Scalars['String']>;
  paymentCategory_not_contains?: Maybe<Scalars['String']>;
  paymentCategory_starts_with?: Maybe<Scalars['String']>;
  paymentCategory_not_starts_with?: Maybe<Scalars['String']>;
  paymentCategory_ends_with?: Maybe<Scalars['String']>;
  paymentCategory_not_ends_with?: Maybe<Scalars['String']>;
  paymentCategory_i?: Maybe<Scalars['String']>;
  paymentCategory_not_i?: Maybe<Scalars['String']>;
  paymentCategory_contains_i?: Maybe<Scalars['String']>;
  paymentCategory_not_contains_i?: Maybe<Scalars['String']>;
  paymentCategory_starts_with_i?: Maybe<Scalars['String']>;
  paymentCategory_not_starts_with_i?: Maybe<Scalars['String']>;
  paymentCategory_ends_with_i?: Maybe<Scalars['String']>;
  paymentCategory_not_ends_with_i?: Maybe<Scalars['String']>;
  paymentCategory_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentCategory_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  resident?: Maybe<Scalars['String']>;
  resident_not?: Maybe<Scalars['String']>;
  resident_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  resident_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  billingAccount?: Maybe<Scalars['String']>;
  billingAccount_not?: Maybe<Scalars['String']>;
  billingAccount_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  billingAccount_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  residentBillingAccount?: Maybe<Scalars['JSON']>;
  residentBillingAccount_not?: Maybe<Scalars['JSON']>;
  residentBillingAccount_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  residentBillingAccount_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  billingIntegrationContext?: Maybe<Scalars['String']>;
  billingIntegrationContext_not?: Maybe<Scalars['String']>;
  billingIntegrationContext_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  billingIntegrationContext_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  acquiringIntegrationContext?: Maybe<Scalars['String']>;
  acquiringIntegrationContext_not?: Maybe<Scalars['String']>;
  acquiringIntegrationContext_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  acquiringIntegrationContext_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  residentAcquiringIntegrationContext?: Maybe<Scalars['JSON']>;
  residentAcquiringIntegrationContext_not?: Maybe<Scalars['JSON']>;
  residentAcquiringIntegrationContext_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  residentAcquiringIntegrationContext_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  accountNumber?: Maybe<Scalars['String']>;
  accountNumber_not?: Maybe<Scalars['String']>;
  accountNumber_contains?: Maybe<Scalars['String']>;
  accountNumber_not_contains?: Maybe<Scalars['String']>;
  accountNumber_starts_with?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with?: Maybe<Scalars['String']>;
  accountNumber_ends_with?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with?: Maybe<Scalars['String']>;
  accountNumber_i?: Maybe<Scalars['String']>;
  accountNumber_not_i?: Maybe<Scalars['String']>;
  accountNumber_contains_i?: Maybe<Scalars['String']>;
  accountNumber_not_contains_i?: Maybe<Scalars['String']>;
  accountNumber_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  residentOrganization?: Maybe<Scalars['JSON']>;
  residentOrganization_not?: Maybe<Scalars['JSON']>;
  residentOrganization_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  residentOrganization_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<ServiceConsumerHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<ServiceConsumerHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<ServiceConsumerHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<ServiceConsumerHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ServiceConsumerHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ServiceConsumerHistoryRecordsCreateInput = {
  data?: Maybe<ServiceConsumerHistoryRecordCreateInput>;
};

export type ServiceConsumerHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ServiceConsumerHistoryRecordUpdateInput>;
};

export type ServiceConsumerRelateToOneInput = {
  create?: Maybe<ServiceConsumerCreateInput>;
  connect?: Maybe<ServiceConsumerWhereUniqueInput>;
  disconnect?: Maybe<ServiceConsumerWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type ServiceConsumerUpdateInput = {
  paymentCategory?: Maybe<Scalars['String']>;
  resident?: Maybe<ResidentRelateToOneInput>;
  billingAccount?: Maybe<BillingAccountRelateToOneInput>;
  billingIntegrationContext?: Maybe<BillingIntegrationOrganizationContextRelateToOneInput>;
  acquiringIntegrationContext?: Maybe<AcquiringIntegrationContextRelateToOneInput>;
  accountNumber?: Maybe<Scalars['String']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type ServiceConsumerWhereInput = {
  AND?: Maybe<Array<Maybe<ServiceConsumerWhereInput>>>;
  OR?: Maybe<Array<Maybe<ServiceConsumerWhereInput>>>;
  paymentCategory?: Maybe<Scalars['String']>;
  paymentCategory_not?: Maybe<Scalars['String']>;
  paymentCategory_contains?: Maybe<Scalars['String']>;
  paymentCategory_not_contains?: Maybe<Scalars['String']>;
  paymentCategory_starts_with?: Maybe<Scalars['String']>;
  paymentCategory_not_starts_with?: Maybe<Scalars['String']>;
  paymentCategory_ends_with?: Maybe<Scalars['String']>;
  paymentCategory_not_ends_with?: Maybe<Scalars['String']>;
  paymentCategory_i?: Maybe<Scalars['String']>;
  paymentCategory_not_i?: Maybe<Scalars['String']>;
  paymentCategory_contains_i?: Maybe<Scalars['String']>;
  paymentCategory_not_contains_i?: Maybe<Scalars['String']>;
  paymentCategory_starts_with_i?: Maybe<Scalars['String']>;
  paymentCategory_not_starts_with_i?: Maybe<Scalars['String']>;
  paymentCategory_ends_with_i?: Maybe<Scalars['String']>;
  paymentCategory_not_ends_with_i?: Maybe<Scalars['String']>;
  paymentCategory_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentCategory_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  resident?: Maybe<ResidentWhereInput>;
  resident_is_null?: Maybe<Scalars['Boolean']>;
  billingAccount?: Maybe<BillingAccountWhereInput>;
  billingAccount_is_null?: Maybe<Scalars['Boolean']>;
  billingIntegrationContext?: Maybe<BillingIntegrationOrganizationContextWhereInput>;
  billingIntegrationContext_is_null?: Maybe<Scalars['Boolean']>;
  acquiringIntegrationContext?: Maybe<AcquiringIntegrationContextWhereInput>;
  acquiringIntegrationContext_is_null?: Maybe<Scalars['Boolean']>;
  accountNumber?: Maybe<Scalars['String']>;
  accountNumber_not?: Maybe<Scalars['String']>;
  accountNumber_contains?: Maybe<Scalars['String']>;
  accountNumber_not_contains?: Maybe<Scalars['String']>;
  accountNumber_starts_with?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with?: Maybe<Scalars['String']>;
  accountNumber_ends_with?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with?: Maybe<Scalars['String']>;
  accountNumber_i?: Maybe<Scalars['String']>;
  accountNumber_not_i?: Maybe<Scalars['String']>;
  accountNumber_contains_i?: Maybe<Scalars['String']>;
  accountNumber_not_contains_i?: Maybe<Scalars['String']>;
  accountNumber_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_starts_with_i?: Maybe<Scalars['String']>;
  accountNumber_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_not_ends_with_i?: Maybe<Scalars['String']>;
  accountNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  accountNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type ServiceConsumerWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ServiceConsumersCreateInput = {
  data?: Maybe<ServiceConsumerCreateInput>;
};

export type ServiceConsumersUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ServiceConsumerUpdateInput>;
};

/**  Availability time period of service features for client organization. Can be trial or payed.  */
export type ServiceSubscription = {
  __typename?: 'ServiceSubscription';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ServiceSubscription List config, or
   *  2. As an alias to the field set on 'labelField' in the ServiceSubscription List config, or
   *  3. As an alias to a 'name' field on the ServiceSubscription List (if one exists), or
   *  4. As an alias to the 'id' field on the ServiceSubscription List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  System, from where subscription was created (our or external)  */
  type?: Maybe<ServiceSubscriptionTypeType>;
  /**  Trial mode of subscription  */
  isTrial?: Maybe<Scalars['Boolean']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  When subscription was started  */
  startAt?: Maybe<Scalars['String']>;
  /**  When subscription should be ended  */
  finishAt?: Maybe<Scalars['String']>;
  /**  How much units are payed for this subscription  */
  unitsCount?: Maybe<Scalars['Int']>;
  /**  How much one unit cost in Rubles for this subscription  */
  unitPrice?: Maybe<Scalars['String']>;
  /**  Total price of this subscription, calculated as unitCost * unitsPayed  */
  totalPrice?: Maybe<Scalars['String']>;
  /**  Currency of values for all price fields  */
  currency?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type ServiceSubscriptionCreateInput = {
  type?: Maybe<ServiceSubscriptionTypeType>;
  isTrial?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  startAt?: Maybe<Scalars['String']>;
  finishAt?: Maybe<Scalars['String']>;
  unitsCount?: Maybe<Scalars['Int']>;
  unitPrice?: Maybe<Scalars['String']>;
  totalPrice?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type ServiceSubscriptionHistoryRecord = {
  __typename?: 'ServiceSubscriptionHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the ServiceSubscriptionHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the ServiceSubscriptionHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the ServiceSubscriptionHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the ServiceSubscriptionHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  isTrial?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<Scalars['String']>;
  startAt?: Maybe<Scalars['String']>;
  finishAt?: Maybe<Scalars['String']>;
  unitsCount?: Maybe<Scalars['Int']>;
  unitPrice?: Maybe<Scalars['String']>;
  totalPrice?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ServiceSubscriptionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ServiceSubscriptionHistoryRecordCreateInput = {
  type?: Maybe<Scalars['String']>;
  isTrial?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<Scalars['String']>;
  startAt?: Maybe<Scalars['String']>;
  finishAt?: Maybe<Scalars['String']>;
  unitsCount?: Maybe<Scalars['Int']>;
  unitPrice?: Maybe<Scalars['String']>;
  totalPrice?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ServiceSubscriptionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum ServiceSubscriptionHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type ServiceSubscriptionHistoryRecordUpdateInput = {
  type?: Maybe<Scalars['String']>;
  isTrial?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<Scalars['String']>;
  startAt?: Maybe<Scalars['String']>;
  finishAt?: Maybe<Scalars['String']>;
  unitsCount?: Maybe<Scalars['Int']>;
  unitPrice?: Maybe<Scalars['String']>;
  totalPrice?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<ServiceSubscriptionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type ServiceSubscriptionHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<ServiceSubscriptionHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<ServiceSubscriptionHistoryRecordWhereInput>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isTrial?: Maybe<Scalars['Boolean']>;
  isTrial_not?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  startAt?: Maybe<Scalars['String']>;
  startAt_not?: Maybe<Scalars['String']>;
  startAt_lt?: Maybe<Scalars['String']>;
  startAt_lte?: Maybe<Scalars['String']>;
  startAt_gt?: Maybe<Scalars['String']>;
  startAt_gte?: Maybe<Scalars['String']>;
  startAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  startAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  finishAt?: Maybe<Scalars['String']>;
  finishAt_not?: Maybe<Scalars['String']>;
  finishAt_lt?: Maybe<Scalars['String']>;
  finishAt_lte?: Maybe<Scalars['String']>;
  finishAt_gt?: Maybe<Scalars['String']>;
  finishAt_gte?: Maybe<Scalars['String']>;
  finishAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  finishAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitsCount?: Maybe<Scalars['Int']>;
  unitsCount_not?: Maybe<Scalars['Int']>;
  unitsCount_lt?: Maybe<Scalars['Int']>;
  unitsCount_lte?: Maybe<Scalars['Int']>;
  unitsCount_gt?: Maybe<Scalars['Int']>;
  unitsCount_gte?: Maybe<Scalars['Int']>;
  unitsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  unitsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  unitPrice?: Maybe<Scalars['String']>;
  unitPrice_not?: Maybe<Scalars['String']>;
  unitPrice_lt?: Maybe<Scalars['String']>;
  unitPrice_lte?: Maybe<Scalars['String']>;
  unitPrice_gt?: Maybe<Scalars['String']>;
  unitPrice_gte?: Maybe<Scalars['String']>;
  unitPrice_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitPrice_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalPrice?: Maybe<Scalars['String']>;
  totalPrice_not?: Maybe<Scalars['String']>;
  totalPrice_lt?: Maybe<Scalars['String']>;
  totalPrice_lte?: Maybe<Scalars['String']>;
  totalPrice_gt?: Maybe<Scalars['String']>;
  totalPrice_gte?: Maybe<Scalars['String']>;
  totalPrice_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalPrice_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currency?: Maybe<Scalars['String']>;
  currency_not?: Maybe<Scalars['String']>;
  currency_contains?: Maybe<Scalars['String']>;
  currency_not_contains?: Maybe<Scalars['String']>;
  currency_starts_with?: Maybe<Scalars['String']>;
  currency_not_starts_with?: Maybe<Scalars['String']>;
  currency_ends_with?: Maybe<Scalars['String']>;
  currency_not_ends_with?: Maybe<Scalars['String']>;
  currency_i?: Maybe<Scalars['String']>;
  currency_not_i?: Maybe<Scalars['String']>;
  currency_contains_i?: Maybe<Scalars['String']>;
  currency_not_contains_i?: Maybe<Scalars['String']>;
  currency_starts_with_i?: Maybe<Scalars['String']>;
  currency_not_starts_with_i?: Maybe<Scalars['String']>;
  currency_ends_with_i?: Maybe<Scalars['String']>;
  currency_not_ends_with_i?: Maybe<Scalars['String']>;
  currency_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currency_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<ServiceSubscriptionHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<ServiceSubscriptionHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<ServiceSubscriptionHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<ServiceSubscriptionHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ServiceSubscriptionHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ServiceSubscriptionHistoryRecordsCreateInput = {
  data?: Maybe<ServiceSubscriptionHistoryRecordCreateInput>;
};

export type ServiceSubscriptionHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ServiceSubscriptionHistoryRecordUpdateInput>;
};

export enum ServiceSubscriptionTypeType {
  Default = 'default',
  Sbbol = 'sbbol'
}

export type ServiceSubscriptionUpdateInput = {
  type?: Maybe<ServiceSubscriptionTypeType>;
  isTrial?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  startAt?: Maybe<Scalars['String']>;
  finishAt?: Maybe<Scalars['String']>;
  unitsCount?: Maybe<Scalars['Int']>;
  unitPrice?: Maybe<Scalars['String']>;
  totalPrice?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type ServiceSubscriptionWhereInput = {
  AND?: Maybe<Array<Maybe<ServiceSubscriptionWhereInput>>>;
  OR?: Maybe<Array<Maybe<ServiceSubscriptionWhereInput>>>;
  type?: Maybe<ServiceSubscriptionTypeType>;
  type_not?: Maybe<ServiceSubscriptionTypeType>;
  type_in?: Maybe<Array<Maybe<ServiceSubscriptionTypeType>>>;
  type_not_in?: Maybe<Array<Maybe<ServiceSubscriptionTypeType>>>;
  isTrial?: Maybe<Scalars['Boolean']>;
  isTrial_not?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  startAt?: Maybe<Scalars['String']>;
  startAt_not?: Maybe<Scalars['String']>;
  startAt_lt?: Maybe<Scalars['String']>;
  startAt_lte?: Maybe<Scalars['String']>;
  startAt_gt?: Maybe<Scalars['String']>;
  startAt_gte?: Maybe<Scalars['String']>;
  startAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  startAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  finishAt?: Maybe<Scalars['String']>;
  finishAt_not?: Maybe<Scalars['String']>;
  finishAt_lt?: Maybe<Scalars['String']>;
  finishAt_lte?: Maybe<Scalars['String']>;
  finishAt_gt?: Maybe<Scalars['String']>;
  finishAt_gte?: Maybe<Scalars['String']>;
  finishAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  finishAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitsCount?: Maybe<Scalars['Int']>;
  unitsCount_not?: Maybe<Scalars['Int']>;
  unitsCount_lt?: Maybe<Scalars['Int']>;
  unitsCount_lte?: Maybe<Scalars['Int']>;
  unitsCount_gt?: Maybe<Scalars['Int']>;
  unitsCount_gte?: Maybe<Scalars['Int']>;
  unitsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  unitsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  unitPrice?: Maybe<Scalars['String']>;
  unitPrice_not?: Maybe<Scalars['String']>;
  unitPrice_lt?: Maybe<Scalars['String']>;
  unitPrice_lte?: Maybe<Scalars['String']>;
  unitPrice_gt?: Maybe<Scalars['String']>;
  unitPrice_gte?: Maybe<Scalars['String']>;
  unitPrice_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitPrice_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalPrice?: Maybe<Scalars['String']>;
  totalPrice_not?: Maybe<Scalars['String']>;
  totalPrice_lt?: Maybe<Scalars['String']>;
  totalPrice_lte?: Maybe<Scalars['String']>;
  totalPrice_gt?: Maybe<Scalars['String']>;
  totalPrice_gte?: Maybe<Scalars['String']>;
  totalPrice_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  totalPrice_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currency?: Maybe<Scalars['String']>;
  currency_not?: Maybe<Scalars['String']>;
  currency_contains?: Maybe<Scalars['String']>;
  currency_not_contains?: Maybe<Scalars['String']>;
  currency_starts_with?: Maybe<Scalars['String']>;
  currency_not_starts_with?: Maybe<Scalars['String']>;
  currency_ends_with?: Maybe<Scalars['String']>;
  currency_not_ends_with?: Maybe<Scalars['String']>;
  currency_i?: Maybe<Scalars['String']>;
  currency_not_i?: Maybe<Scalars['String']>;
  currency_contains_i?: Maybe<Scalars['String']>;
  currency_not_contains_i?: Maybe<Scalars['String']>;
  currency_starts_with_i?: Maybe<Scalars['String']>;
  currency_not_starts_with_i?: Maybe<Scalars['String']>;
  currency_ends_with_i?: Maybe<Scalars['String']>;
  currency_not_ends_with_i?: Maybe<Scalars['String']>;
  currency_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currency_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type ServiceSubscriptionWhereUniqueInput = {
  id: Scalars['ID'];
};

export type ServiceSubscriptionsCreateInput = {
  data?: Maybe<ServiceSubscriptionCreateInput>;
};

export type ServiceSubscriptionsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<ServiceSubscriptionUpdateInput>;
};

export type SetMessageStatusInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  message: MessageWhereUniqueInput;
  deliveredAt?: Maybe<Scalars['String']>;
  readAt?: Maybe<Scalars['String']>;
};

export type SetMessageStatusOutput = {
  __typename?: 'SetMessageStatusOutput';
  id: Scalars['ID'];
  status: Scalars['String'];
};

export type SettingsField = {
  __typename?: 'SettingsField';
  cardId: Scalars['String'];
};

export type SettingsFieldInput = {
  cardId: Scalars['String'];
};

export type ShareTicketInput = {
  sender: SenderFieldInput;
  employees: Array<Scalars['ID']>;
  ticketId: Scalars['ID'];
};

export type ShareTicketOutput = {
  __typename?: 'ShareTicketOutput';
  status: Scalars['String'];
};

export type SigninAsUserInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  id: Scalars['ID'];
};

export type SigninAsUserOutput = {
  __typename?: 'SigninAsUserOutput';
  user?: Maybe<User>;
  token: Scalars['String'];
};

export type SigninResidentUserInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  token: Scalars['String'];
};

export type SigninResidentUserOutput = {
  __typename?: 'SigninResidentUserOutput';
  user?: Maybe<User>;
  token: Scalars['String'];
};

export enum SortAcquiringIntegrationAccessRightHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortAcquiringIntegrationAccessRightsBy {
  IntegrationAsc = 'integration_ASC',
  IntegrationDesc = 'integration_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortAcquiringIntegrationContextHistoryRecordsBy {
  ReasonAsc = 'reason_ASC',
  ReasonDesc = 'reason_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortAcquiringIntegrationContextsBy {
  IntegrationAsc = 'integration_ASC',
  IntegrationDesc = 'integration_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  ReasonAsc = 'reason_ASC',
  ReasonDesc = 'reason_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortAcquiringIntegrationHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  DeveloperAsc = 'developer_ASC',
  DeveloperDesc = 'developer_DESC',
  PartnerUrlAsc = 'partnerUrl_ASC',
  PartnerUrlDesc = 'partnerUrl_DESC',
  AppUrlAsc = 'appUrl_ASC',
  AppUrlDesc = 'appUrl_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  CanGroupReceiptsAsc = 'canGroupReceipts_ASC',
  CanGroupReceiptsDesc = 'canGroupReceipts_DESC',
  HostUrlAsc = 'hostUrl_ASC',
  HostUrlDesc = 'hostUrl_DESC',
  SupportedBillingIntegrationsGroupAsc = 'supportedBillingIntegrationsGroup_ASC',
  SupportedBillingIntegrationsGroupDesc = 'supportedBillingIntegrationsGroup_DESC',
  DisplayPriorityAsc = 'displayPriority_ASC',
  DisplayPriorityDesc = 'displayPriority_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  ContextDefaultStatusAsc = 'contextDefaultStatus_ASC',
  ContextDefaultStatusDesc = 'contextDefaultStatus_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortAcquiringIntegrationsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  DeveloperAsc = 'developer_ASC',
  DeveloperDesc = 'developer_DESC',
  PartnerUrlAsc = 'partnerUrl_ASC',
  PartnerUrlDesc = 'partnerUrl_DESC',
  DetailedDescriptionAsc = 'detailedDescription_ASC',
  DetailedDescriptionDesc = 'detailedDescription_DESC',
  AppUrlAsc = 'appUrl_ASC',
  AppUrlDesc = 'appUrl_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  AccessRightsAsc = 'accessRights_ASC',
  AccessRightsDesc = 'accessRights_DESC',
  CanGroupReceiptsAsc = 'canGroupReceipts_ASC',
  CanGroupReceiptsDesc = 'canGroupReceipts_DESC',
  HostUrlAsc = 'hostUrl_ASC',
  HostUrlDesc = 'hostUrl_DESC',
  SupportedBillingIntegrationsGroupAsc = 'supportedBillingIntegrationsGroup_ASC',
  SupportedBillingIntegrationsGroupDesc = 'supportedBillingIntegrationsGroup_DESC',
  DisplayPriorityAsc = 'displayPriority_ASC',
  DisplayPriorityDesc = 'displayPriority_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  ContextDefaultStatusAsc = 'contextDefaultStatus_ASC',
  ContextDefaultStatusDesc = 'contextDefaultStatus_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortAssigneeScopeHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortAssigneeScopesBy {
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  TicketAsc = 'ticket_ASC',
  TicketDesc = 'ticket_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortB2BAppAccessRightHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortB2BAppAccessRightsBy {
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  AppAsc = 'app_ASC',
  AppDesc = 'app_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortB2BAppContextHistoryRecordsBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortB2BAppContextsBy {
  AppAsc = 'app_ASC',
  AppDesc = 'app_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortB2BAppHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  DeveloperAsc = 'developer_ASC',
  DeveloperDesc = 'developer_DESC',
  PartnerUrlAsc = 'partnerUrl_ASC',
  PartnerUrlDesc = 'partnerUrl_DESC',
  AppUrlAsc = 'appUrl_ASC',
  AppUrlDesc = 'appUrl_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  IsGlobalAsc = 'isGlobal_ASC',
  IsGlobalDesc = 'isGlobal_DESC',
  ContextDefaultStatusAsc = 'contextDefaultStatus_ASC',
  ContextDefaultStatusDesc = 'contextDefaultStatus_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  DisplayPriorityAsc = 'displayPriority_ASC',
  DisplayPriorityDesc = 'displayPriority_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortB2BAppPromoBlockHistoryRecordsBy {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TextVariantAsc = 'textVariant_ASC',
  TextVariantDesc = 'textVariant_DESC',
  BackgroundColorAsc = 'backgroundColor_ASC',
  BackgroundColorDesc = 'backgroundColor_DESC',
  TargetUrlAsc = 'targetUrl_ASC',
  TargetUrlDesc = 'targetUrl_DESC',
  ExternalAsc = 'external_ASC',
  ExternalDesc = 'external_DESC',
  PriorityAsc = 'priority_ASC',
  PriorityDesc = 'priority_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortB2BAppPromoBlocksBy {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  SubtitleAsc = 'subtitle_ASC',
  SubtitleDesc = 'subtitle_DESC',
  TextVariantAsc = 'textVariant_ASC',
  TextVariantDesc = 'textVariant_DESC',
  BackgroundColorAsc = 'backgroundColor_ASC',
  BackgroundColorDesc = 'backgroundColor_DESC',
  TargetUrlAsc = 'targetUrl_ASC',
  TargetUrlDesc = 'targetUrl_DESC',
  ExternalAsc = 'external_ASC',
  ExternalDesc = 'external_DESC',
  PriorityAsc = 'priority_ASC',
  PriorityDesc = 'priority_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortB2BAppsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  DeveloperAsc = 'developer_ASC',
  DeveloperDesc = 'developer_DESC',
  PartnerUrlAsc = 'partnerUrl_ASC',
  PartnerUrlDesc = 'partnerUrl_DESC',
  DetailedDescriptionAsc = 'detailedDescription_ASC',
  DetailedDescriptionDesc = 'detailedDescription_DESC',
  AppUrlAsc = 'appUrl_ASC',
  AppUrlDesc = 'appUrl_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  IsGlobalAsc = 'isGlobal_ASC',
  IsGlobalDesc = 'isGlobal_DESC',
  ContextDefaultStatusAsc = 'contextDefaultStatus_ASC',
  ContextDefaultStatusDesc = 'contextDefaultStatus_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  AccessRightsAsc = 'accessRights_ASC',
  AccessRightsDesc = 'accessRights_DESC',
  DisplayPriorityAsc = 'displayPriority_ASC',
  DisplayPriorityDesc = 'displayPriority_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortB2CAppAccessRightHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortB2CAppAccessRightsBy {
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  AppAsc = 'app_ASC',
  AppDesc = 'app_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortB2CAppBuildHistoryRecordsBy {
  VersionAsc = 'version_ASC',
  VersionDesc = 'version_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortB2CAppBuildsBy {
  AppAsc = 'app_ASC',
  AppDesc = 'app_DESC',
  VersionAsc = 'version_ASC',
  VersionDesc = 'version_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortB2CAppHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  DeveloperAsc = 'developer_ASC',
  DeveloperDesc = 'developer_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortB2CAppPropertiesBy {
  AppAsc = 'app_ASC',
  AppDesc = 'app_DESC',
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortB2CAppPropertyHistoryRecordsBy {
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortB2CAppsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  DeveloperAsc = 'developer_ASC',
  DeveloperDesc = 'developer_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  CurrentBuildAsc = 'currentBuild_ASC',
  CurrentBuildDesc = 'currentBuild_DESC',
  AccessRightsAsc = 'accessRights_ASC',
  AccessRightsDesc = 'accessRights_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankAccountHistoryRecordsBy {
  TinAsc = 'tin_ASC',
  TinDesc = 'tin_DESC',
  CountryAsc = 'country_ASC',
  CountryDesc = 'country_DESC',
  RoutingNumberAsc = 'routingNumber_ASC',
  RoutingNumberDesc = 'routingNumber_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  ApprovedAtAsc = 'approvedAt_ASC',
  ApprovedAtDesc = 'approvedAt_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  TerritoryCodeAsc = 'territoryCode_ASC',
  TerritoryCodeDesc = 'territoryCode_DESC',
  BankNameAsc = 'bankName_ASC',
  BankNameDesc = 'bankName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankAccountReportHistoryRecordsBy {
  VersionAsc = 'version_ASC',
  VersionDesc = 'version_DESC',
  TemplateAsc = 'template_ASC',
  TemplateDesc = 'template_DESC',
  PeriodAsc = 'period_ASC',
  PeriodDesc = 'period_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  AmountAtAsc = 'amountAt_ASC',
  AmountAtDesc = 'amountAt_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TotalIncomeAsc = 'totalIncome_ASC',
  TotalIncomeDesc = 'totalIncome_DESC',
  TotalOutcomeAsc = 'totalOutcome_ASC',
  TotalOutcomeDesc = 'totalOutcome_DESC',
  IsLatestAsc = 'isLatest_ASC',
  IsLatestDesc = 'isLatest_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankAccountReportTaskHistoryRecordsBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  ProgressAsc = 'progress_ASC',
  ProgressDesc = 'progress_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankAccountReportTasksBy {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  ProgressAsc = 'progress_ASC',
  ProgressDesc = 'progress_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankAccountReportsBy {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  VersionAsc = 'version_ASC',
  VersionDesc = 'version_DESC',
  TemplateAsc = 'template_ASC',
  TemplateDesc = 'template_DESC',
  PeriodAsc = 'period_ASC',
  PeriodDesc = 'period_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  AmountAtAsc = 'amountAt_ASC',
  AmountAtDesc = 'amountAt_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TotalIncomeAsc = 'totalIncome_ASC',
  TotalIncomeDesc = 'totalIncome_DESC',
  TotalOutcomeAsc = 'totalOutcome_ASC',
  TotalOutcomeDesc = 'totalOutcome_DESC',
  IsLatestAsc = 'isLatest_ASC',
  IsLatestDesc = 'isLatest_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankAccountsBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IntegrationContextAsc = 'integrationContext_ASC',
  IntegrationContextDesc = 'integrationContext_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  TinAsc = 'tin_ASC',
  TinDesc = 'tin_DESC',
  CountryAsc = 'country_ASC',
  CountryDesc = 'country_DESC',
  RoutingNumberAsc = 'routingNumber_ASC',
  RoutingNumberDesc = 'routingNumber_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  ApprovedAtAsc = 'approvedAt_ASC',
  ApprovedAtDesc = 'approvedAt_DESC',
  ApprovedByAsc = 'approvedBy_ASC',
  ApprovedByDesc = 'approvedBy_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  TerritoryCodeAsc = 'territoryCode_ASC',
  TerritoryCodeDesc = 'territoryCode_DESC',
  BankNameAsc = 'bankName_ASC',
  BankNameDesc = 'bankName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankCategoriesBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankCategoryHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankContractorAccountHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TinAsc = 'tin_ASC',
  TinDesc = 'tin_DESC',
  CountryAsc = 'country_ASC',
  CountryDesc = 'country_DESC',
  RoutingNumberAsc = 'routingNumber_ASC',
  RoutingNumberDesc = 'routingNumber_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  TerritoryCodeAsc = 'territoryCode_ASC',
  TerritoryCodeDesc = 'territoryCode_DESC',
  BankNameAsc = 'bankName_ASC',
  BankNameDesc = 'bankName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankContractorAccountsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  CostItemAsc = 'costItem_ASC',
  CostItemDesc = 'costItem_DESC',
  TinAsc = 'tin_ASC',
  TinDesc = 'tin_DESC',
  CountryAsc = 'country_ASC',
  CountryDesc = 'country_DESC',
  RoutingNumberAsc = 'routingNumber_ASC',
  RoutingNumberDesc = 'routingNumber_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  TerritoryCodeAsc = 'territoryCode_ASC',
  TerritoryCodeDesc = 'territoryCode_DESC',
  BankNameAsc = 'bankName_ASC',
  BankNameDesc = 'bankName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankCostItemHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IsOutcomeAsc = 'isOutcome_ASC',
  IsOutcomeDesc = 'isOutcome_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankCostItemsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IsOutcomeAsc = 'isOutcome_ASC',
  IsOutcomeDesc = 'isOutcome_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankIntegrationAccessRightHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankIntegrationAccessRightsBy {
  IntegrationAsc = 'integration_ASC',
  IntegrationDesc = 'integration_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankIntegrationAccountContextHistoryRecordsBy {
  EnabledAsc = 'enabled_ASC',
  EnabledDesc = 'enabled_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankIntegrationAccountContextsBy {
  IntegrationAsc = 'integration_ASC',
  IntegrationDesc = 'integration_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  EnabledAsc = 'enabled_ASC',
  EnabledDesc = 'enabled_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankIntegrationHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankIntegrationOrganizationContextHistoryRecordsBy {
  EnabledAsc = 'enabled_ASC',
  EnabledDesc = 'enabled_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankIntegrationOrganizationContextsBy {
  IntegrationAsc = 'integration_ASC',
  IntegrationDesc = 'integration_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  EnabledAsc = 'enabled_ASC',
  EnabledDesc = 'enabled_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankIntegrationsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  AccessRightsAsc = 'accessRights_ASC',
  AccessRightsDesc = 'accessRights_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankSyncTaskHistoryRecordsBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TotalCountAsc = 'totalCount_ASC',
  TotalCountDesc = 'totalCount_DESC',
  ProcessedCountAsc = 'processedCount_ASC',
  ProcessedCountDesc = 'processedCount_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankSyncTasksBy {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  IntegrationContextAsc = 'integrationContext_ASC',
  IntegrationContextDesc = 'integrationContext_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TotalCountAsc = 'totalCount_ASC',
  TotalCountDesc = 'totalCount_DESC',
  ProcessedCountAsc = 'processedCount_ASC',
  ProcessedCountDesc = 'processedCount_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBankTransactionHistoryRecordsBy {
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  IsOutcomeAsc = 'isOutcome_ASC',
  IsOutcomeDesc = 'isOutcome_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  PurposeAsc = 'purpose_ASC',
  PurposeDesc = 'purpose_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  ImportRemoteSystemAsc = 'importRemoteSystem_ASC',
  ImportRemoteSystemDesc = 'importRemoteSystem_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBankTransactionsBy {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  IntegrationContextAsc = 'integrationContext_ASC',
  IntegrationContextDesc = 'integrationContext_DESC',
  ContractorAccountAsc = 'contractorAccount_ASC',
  ContractorAccountDesc = 'contractorAccount_DESC',
  CostItemAsc = 'costItem_ASC',
  CostItemDesc = 'costItem_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  IsOutcomeAsc = 'isOutcome_ASC',
  IsOutcomeDesc = 'isOutcome_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  PurposeAsc = 'purpose_ASC',
  PurposeDesc = 'purpose_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  ImportRemoteSystemAsc = 'importRemoteSystem_ASC',
  ImportRemoteSystemDesc = 'importRemoteSystem_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBillingAccountHistoryRecordsBy {
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  GlobalIdAsc = 'globalId_ASC',
  GlobalIdDesc = 'globalId_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  FullNameAsc = 'fullName_ASC',
  FullNameDesc = 'fullName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBillingAccountsBy {
  ContextAsc = 'context_ASC',
  ContextDesc = 'context_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  GlobalIdAsc = 'globalId_ASC',
  GlobalIdDesc = 'globalId_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  FullNameAsc = 'fullName_ASC',
  FullNameDesc = 'fullName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBillingCategoriesBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBillingCategoryHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBillingIntegrationAccessRightHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBillingIntegrationAccessRightsBy {
  IntegrationAsc = 'integration_ASC',
  IntegrationDesc = 'integration_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC'
}

export enum SortBillingIntegrationHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  DeveloperAsc = 'developer_ASC',
  DeveloperDesc = 'developer_DESC',
  PartnerUrlAsc = 'partnerUrl_ASC',
  PartnerUrlDesc = 'partnerUrl_DESC',
  AppUrlAsc = 'appUrl_ASC',
  AppUrlDesc = 'appUrl_DESC',
  BillingPageTitleAsc = 'billingPageTitle_ASC',
  BillingPageTitleDesc = 'billingPageTitle_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  ContextDefaultStatusAsc = 'contextDefaultStatus_ASC',
  ContextDefaultStatusDesc = 'contextDefaultStatus_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  IsTrustedBankAccountSourceAsc = 'isTrustedBankAccountSource_ASC',
  IsTrustedBankAccountSourceDesc = 'isTrustedBankAccountSource_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  DisplayPriorityAsc = 'displayPriority_ASC',
  DisplayPriorityDesc = 'displayPriority_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBillingIntegrationOrganizationContextHistoryRecordsBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBillingIntegrationOrganizationContextsBy {
  IntegrationAsc = 'integration_ASC',
  IntegrationDesc = 'integration_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  CurrentProblemAsc = 'currentProblem_ASC',
  CurrentProblemDesc = 'currentProblem_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBillingIntegrationProblemsBy {
  ContextAsc = 'context_ASC',
  ContextDesc = 'context_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  MessageAsc = 'message_ASC',
  MessageDesc = 'message_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBillingIntegrationsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  DeveloperAsc = 'developer_ASC',
  DeveloperDesc = 'developer_DESC',
  PartnerUrlAsc = 'partnerUrl_ASC',
  PartnerUrlDesc = 'partnerUrl_DESC',
  DetailedDescriptionAsc = 'detailedDescription_ASC',
  DetailedDescriptionDesc = 'detailedDescription_DESC',
  AppUrlAsc = 'appUrl_ASC',
  AppUrlDesc = 'appUrl_DESC',
  BillingPageTitleAsc = 'billingPageTitle_ASC',
  BillingPageTitleDesc = 'billingPageTitle_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  ContextDefaultStatusAsc = 'contextDefaultStatus_ASC',
  ContextDefaultStatusDesc = 'contextDefaultStatus_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  AccessRightsAsc = 'accessRights_ASC',
  AccessRightsDesc = 'accessRights_DESC',
  IsTrustedBankAccountSourceAsc = 'isTrustedBankAccountSource_ASC',
  IsTrustedBankAccountSourceDesc = 'isTrustedBankAccountSource_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  DisplayPriorityAsc = 'displayPriority_ASC',
  DisplayPriorityDesc = 'displayPriority_DESC',
  LabelAsc = 'label_ASC',
  LabelDesc = 'label_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBillingPropertiesBy {
  ContextAsc = 'context_ASC',
  ContextDesc = 'context_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  GlobalIdAsc = 'globalId_ASC',
  GlobalIdDesc = 'globalId_DESC',
  NormalizedAddressAsc = 'normalizedAddress_ASC',
  NormalizedAddressDesc = 'normalizedAddress_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  AddressKeyAsc = 'addressKey_ASC',
  AddressKeyDesc = 'addressKey_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBillingPropertyHistoryRecordsBy {
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  GlobalIdAsc = 'globalId_ASC',
  GlobalIdDesc = 'globalId_DESC',
  NormalizedAddressAsc = 'normalizedAddress_ASC',
  NormalizedAddressDesc = 'normalizedAddress_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  AddressKeyAsc = 'addressKey_ASC',
  AddressKeyDesc = 'addressKey_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBillingReceiptHistoryRecordsBy {
  PeriodAsc = 'period_ASC',
  PeriodDesc = 'period_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  PrintableNumberAsc = 'printableNumber_ASC',
  PrintableNumberDesc = 'printableNumber_DESC',
  ToPayAsc = 'toPay_ASC',
  ToPayDesc = 'toPay_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBillingReceiptsBy {
  ContextAsc = 'context_ASC',
  ContextDesc = 'context_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  PeriodAsc = 'period_ASC',
  PeriodDesc = 'period_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  PrintableNumberAsc = 'printableNumber_ASC',
  PrintableNumberDesc = 'printableNumber_DESC',
  ToPayAsc = 'toPay_ASC',
  ToPayDesc = 'toPay_DESC',
  ReceiverAsc = 'receiver_ASC',
  ReceiverDesc = 'receiver_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortBillingRecipientHistoryRecordsBy {
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  TinAsc = 'tin_ASC',
  TinDesc = 'tin_DESC',
  IecAsc = 'iec_ASC',
  IecDesc = 'iec_DESC',
  BicAsc = 'bic_ASC',
  BicDesc = 'bic_DESC',
  BankAccountAsc = 'bankAccount_ASC',
  BankAccountDesc = 'bankAccount_DESC',
  BankNameAsc = 'bankName_ASC',
  BankNameDesc = 'bankName_DESC',
  OffsettingAccountAsc = 'offsettingAccount_ASC',
  OffsettingAccountDesc = 'offsettingAccount_DESC',
  TerritoryCodeAsc = 'territoryCode_ASC',
  TerritoryCodeDesc = 'territoryCode_DESC',
  PurposeAsc = 'purpose_ASC',
  PurposeDesc = 'purpose_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IsApprovedAsc = 'isApproved_ASC',
  IsApprovedDesc = 'isApproved_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortBillingRecipientsBy {
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  ContextAsc = 'context_ASC',
  ContextDesc = 'context_DESC',
  TinAsc = 'tin_ASC',
  TinDesc = 'tin_DESC',
  IecAsc = 'iec_ASC',
  IecDesc = 'iec_DESC',
  BicAsc = 'bic_ASC',
  BicDesc = 'bic_DESC',
  BankAccountAsc = 'bankAccount_ASC',
  BankAccountDesc = 'bankAccount_DESC',
  BankNameAsc = 'bankName_ASC',
  BankNameDesc = 'bankName_DESC',
  OffsettingAccountAsc = 'offsettingAccount_ASC',
  OffsettingAccountDesc = 'offsettingAccount_DESC',
  TerritoryCodeAsc = 'territoryCode_ASC',
  TerritoryCodeDesc = 'territoryCode_DESC',
  PurposeAsc = 'purpose_ASC',
  PurposeDesc = 'purpose_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IsApprovedAsc = 'isApproved_ASC',
  IsApprovedDesc = 'isApproved_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortConfirmPhoneActionHistoryRecordsBy {
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  TokenAsc = 'token_ASC',
  TokenDesc = 'token_DESC',
  SmsCodeAsc = 'smsCode_ASC',
  SmsCodeDesc = 'smsCode_DESC',
  SmsCodeRequestedAtAsc = 'smsCodeRequestedAt_ASC',
  SmsCodeRequestedAtDesc = 'smsCodeRequestedAt_DESC',
  SmsCodeExpiresAtAsc = 'smsCodeExpiresAt_ASC',
  SmsCodeExpiresAtDesc = 'smsCodeExpiresAt_DESC',
  RetriesAsc = 'retries_ASC',
  RetriesDesc = 'retries_DESC',
  IsPhoneVerifiedAsc = 'isPhoneVerified_ASC',
  IsPhoneVerifiedDesc = 'isPhoneVerified_DESC',
  RequestedAtAsc = 'requestedAt_ASC',
  RequestedAtDesc = 'requestedAt_DESC',
  ExpiresAtAsc = 'expiresAt_ASC',
  ExpiresAtDesc = 'expiresAt_DESC',
  CompletedAtAsc = 'completedAt_ASC',
  CompletedAtDesc = 'completedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortConfirmPhoneActionsBy {
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  TokenAsc = 'token_ASC',
  TokenDesc = 'token_DESC',
  SmsCodeAsc = 'smsCode_ASC',
  SmsCodeDesc = 'smsCode_DESC',
  SmsCodeRequestedAtAsc = 'smsCodeRequestedAt_ASC',
  SmsCodeRequestedAtDesc = 'smsCodeRequestedAt_DESC',
  SmsCodeExpiresAtAsc = 'smsCodeExpiresAt_ASC',
  SmsCodeExpiresAtDesc = 'smsCodeExpiresAt_DESC',
  RetriesAsc = 'retries_ASC',
  RetriesDesc = 'retries_DESC',
  IsPhoneVerifiedAsc = 'isPhoneVerified_ASC',
  IsPhoneVerifiedDesc = 'isPhoneVerified_DESC',
  RequestedAtAsc = 'requestedAt_ASC',
  RequestedAtDesc = 'requestedAt_DESC',
  ExpiresAtAsc = 'expiresAt_ASC',
  ExpiresAtDesc = 'expiresAt_DESC',
  CompletedAtAsc = 'completedAt_ASC',
  CompletedAtDesc = 'completedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortContactExportTaskHistoryRecordsBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  FormatAsc = 'format_ASC',
  FormatDesc = 'format_DESC',
  ExportedRecordsCountAsc = 'exportedRecordsCount_ASC',
  ExportedRecordsCountDesc = 'exportedRecordsCount_DESC',
  TotalRecordsCountAsc = 'totalRecordsCount_ASC',
  TotalRecordsCountDesc = 'totalRecordsCount_DESC',
  LocaleAsc = 'locale_ASC',
  LocaleDesc = 'locale_DESC',
  TimeZoneAsc = 'timeZone_ASC',
  TimeZoneDesc = 'timeZone_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortContactExportTasksBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  FormatAsc = 'format_ASC',
  FormatDesc = 'format_DESC',
  ExportedRecordsCountAsc = 'exportedRecordsCount_ASC',
  ExportedRecordsCountDesc = 'exportedRecordsCount_DESC',
  TotalRecordsCountAsc = 'totalRecordsCount_ASC',
  TotalRecordsCountDesc = 'totalRecordsCount_DESC',
  LocaleAsc = 'locale_ASC',
  LocaleDesc = 'locale_DESC',
  TimeZoneAsc = 'timeZone_ASC',
  TimeZoneDesc = 'timeZone_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortContactHistoryRecordsBy {
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IsVerifiedAsc = 'isVerified_ASC',
  IsVerifiedDesc = 'isVerified_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortContactRoleHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortContactRolesBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortContactsBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  RoleAsc = 'role_ASC',
  RoleDesc = 'role_DESC',
  IsVerifiedAsc = 'isVerified_ASC',
  IsVerifiedDesc = 'isVerified_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortExternalReportHistoryRecordsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortExternalReportsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IsHiddenAsc = 'isHidden_ASC',
  IsHiddenDesc = 'isHidden_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortExternalTokenAccessRightHistoryRecordsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortExternalTokenAccessRightsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortForgotPasswordActionHistoryRecordsBy {
  TokenAsc = 'token_ASC',
  TokenDesc = 'token_DESC',
  RequestedAtAsc = 'requestedAt_ASC',
  RequestedAtDesc = 'requestedAt_DESC',
  ExpiresAtAsc = 'expiresAt_ASC',
  ExpiresAtDesc = 'expiresAt_DESC',
  UsedAtAsc = 'usedAt_ASC',
  UsedAtDesc = 'usedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortForgotPasswordActionsBy {
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  TokenAsc = 'token_ASC',
  TokenDesc = 'token_DESC',
  RequestedAtAsc = 'requestedAt_ASC',
  RequestedAtDesc = 'requestedAt_DESC',
  ExpiresAtAsc = 'expiresAt_ASC',
  ExpiresAtDesc = 'expiresAt_DESC',
  UsedAtAsc = 'usedAt_ASC',
  UsedAtDesc = 'usedAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortIncidentChangesBy {
  IncidentAsc = 'incident_ASC',
  IncidentDesc = 'incident_DESC',
  DetailsFromAsc = 'detailsFrom_ASC',
  DetailsFromDesc = 'detailsFrom_DESC',
  DetailsToAsc = 'detailsTo_ASC',
  DetailsToDesc = 'detailsTo_DESC',
  StatusFromAsc = 'statusFrom_ASC',
  StatusFromDesc = 'statusFrom_DESC',
  StatusToAsc = 'statusTo_ASC',
  StatusToDesc = 'statusTo_DESC',
  TextForResidentFromAsc = 'textForResidentFrom_ASC',
  TextForResidentFromDesc = 'textForResidentFrom_DESC',
  TextForResidentToAsc = 'textForResidentTo_ASC',
  TextForResidentToDesc = 'textForResidentTo_DESC',
  WorkStartFromAsc = 'workStartFrom_ASC',
  WorkStartFromDesc = 'workStartFrom_DESC',
  WorkStartToAsc = 'workStartTo_ASC',
  WorkStartToDesc = 'workStartTo_DESC',
  WorkFinishFromAsc = 'workFinishFrom_ASC',
  WorkFinishFromDesc = 'workFinishFrom_DESC',
  WorkFinishToAsc = 'workFinishTo_ASC',
  WorkFinishToDesc = 'workFinishTo_DESC',
  WorkTypeFromAsc = 'workTypeFrom_ASC',
  WorkTypeFromDesc = 'workTypeFrom_DESC',
  WorkTypeToAsc = 'workTypeTo_ASC',
  WorkTypeToDesc = 'workTypeTo_DESC',
  OrganizationIdFromAsc = 'organizationIdFrom_ASC',
  OrganizationIdFromDesc = 'organizationIdFrom_DESC',
  OrganizationIdToAsc = 'organizationIdTo_ASC',
  OrganizationIdToDesc = 'organizationIdTo_DESC',
  OrganizationDisplayNameFromAsc = 'organizationDisplayNameFrom_ASC',
  OrganizationDisplayNameFromDesc = 'organizationDisplayNameFrom_DESC',
  OrganizationDisplayNameToAsc = 'organizationDisplayNameTo_ASC',
  OrganizationDisplayNameToDesc = 'organizationDisplayNameTo_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortIncidentClassifierHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortIncidentClassifierIncidentHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortIncidentClassifierIncidentsBy {
  IncidentAsc = 'incident_ASC',
  IncidentDesc = 'incident_DESC',
  ClassifierAsc = 'classifier_ASC',
  ClassifierDesc = 'classifier_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortIncidentClassifiersBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  ProblemAsc = 'problem_ASC',
  ProblemDesc = 'problem_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortIncidentExportTaskHistoryRecordsBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  FormatAsc = 'format_ASC',
  FormatDesc = 'format_DESC',
  ExportedRecordsCountAsc = 'exportedRecordsCount_ASC',
  ExportedRecordsCountDesc = 'exportedRecordsCount_DESC',
  TotalRecordsCountAsc = 'totalRecordsCount_ASC',
  TotalRecordsCountDesc = 'totalRecordsCount_DESC',
  LocaleAsc = 'locale_ASC',
  LocaleDesc = 'locale_DESC',
  TimeZoneAsc = 'timeZone_ASC',
  TimeZoneDesc = 'timeZone_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortIncidentExportTasksBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  FormatAsc = 'format_ASC',
  FormatDesc = 'format_DESC',
  ExportedRecordsCountAsc = 'exportedRecordsCount_ASC',
  ExportedRecordsCountDesc = 'exportedRecordsCount_DESC',
  TotalRecordsCountAsc = 'totalRecordsCount_ASC',
  TotalRecordsCountDesc = 'totalRecordsCount_DESC',
  LocaleAsc = 'locale_ASC',
  LocaleDesc = 'locale_DESC',
  TimeZoneAsc = 'timeZone_ASC',
  TimeZoneDesc = 'timeZone_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortIncidentHistoryRecordsBy {
  DetailsAsc = 'details_ASC',
  DetailsDesc = 'details_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TextForResidentAsc = 'textForResident_ASC',
  TextForResidentDesc = 'textForResident_DESC',
  WorkStartAsc = 'workStart_ASC',
  WorkStartDesc = 'workStart_DESC',
  WorkFinishAsc = 'workFinish_ASC',
  WorkFinishDesc = 'workFinish_DESC',
  WorkTypeAsc = 'workType_ASC',
  WorkTypeDesc = 'workType_DESC',
  HasAllPropertiesAsc = 'hasAllProperties_ASC',
  HasAllPropertiesDesc = 'hasAllProperties_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortIncidentPropertiesBy {
  IncidentAsc = 'incident_ASC',
  IncidentDesc = 'incident_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  PropertyAddressAsc = 'propertyAddress_ASC',
  PropertyAddressDesc = 'propertyAddress_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortIncidentPropertyHistoryRecordsBy {
  PropertyAddressAsc = 'propertyAddress_ASC',
  PropertyAddressDesc = 'propertyAddress_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortIncidentsBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  DetailsAsc = 'details_ASC',
  DetailsDesc = 'details_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TextForResidentAsc = 'textForResident_ASC',
  TextForResidentDesc = 'textForResident_DESC',
  WorkStartAsc = 'workStart_ASC',
  WorkStartDesc = 'workStart_DESC',
  WorkFinishAsc = 'workFinish_ASC',
  WorkFinishDesc = 'workFinish_DESC',
  WorkTypeAsc = 'workType_ASC',
  WorkTypeDesc = 'workType_DESC',
  HasAllPropertiesAsc = 'hasAllProperties_ASC',
  HasAllPropertiesDesc = 'hasAllProperties_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMessageAppBlackListHistoryRecordsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMessageAppBlackListsBy {
  AppAsc = 'app_ASC',
  AppDesc = 'app_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMessageBatchHistoryRecordsBy {
  MessageTypeAsc = 'messageType_ASC',
  MessageTypeDesc = 'messageType_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  MessageAsc = 'message_ASC',
  MessageDesc = 'message_DESC',
  DeepLinkAsc = 'deepLink_ASC',
  DeepLinkDesc = 'deepLink_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMessageBatchesBy {
  MessageTypeAsc = 'messageType_ASC',
  MessageTypeDesc = 'messageType_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  MessageAsc = 'message_ASC',
  MessageDesc = 'message_DESC',
  DeepLinkAsc = 'deepLink_ASC',
  DeepLinkDesc = 'deepLink_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMessageHistoryRecordsBy {
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  EmailFromAsc = 'emailFrom_ASC',
  EmailFromDesc = 'emailFrom_DESC',
  LangAsc = 'lang_ASC',
  LangDesc = 'lang_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  DeliveredAtAsc = 'deliveredAt_ASC',
  DeliveredAtDesc = 'deliveredAt_DESC',
  SentAtAsc = 'sentAt_ASC',
  SentAtDesc = 'sentAt_DESC',
  ReadAtAsc = 'readAt_ASC',
  ReadAtDesc = 'readAt_DESC',
  UniqKeyAsc = 'uniqKey_ASC',
  UniqKeyDesc = 'uniqKey_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMessageOrganizationBlackListHistoryRecordsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMessageOrganizationBlackListsBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMessageUserBlackListHistoryRecordsBy {
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMessageUserBlackListsBy {
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMessagesBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  RemoteClientAsc = 'remoteClient_ASC',
  RemoteClientDesc = 'remoteClient_DESC',
  EmailFromAsc = 'emailFrom_ASC',
  EmailFromDesc = 'emailFrom_DESC',
  LangAsc = 'lang_ASC',
  LangDesc = 'lang_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  DeliveredAtAsc = 'deliveredAt_ASC',
  DeliveredAtDesc = 'deliveredAt_DESC',
  SentAtAsc = 'sentAt_ASC',
  SentAtDesc = 'sentAt_DESC',
  ReadAtAsc = 'readAt_ASC',
  ReadAtDesc = 'readAt_DESC',
  UniqKeyAsc = 'uniqKey_ASC',
  UniqKeyDesc = 'uniqKey_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMeterHistoryRecordsBy {
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  NumberOfTariffsAsc = 'numberOfTariffs_ASC',
  NumberOfTariffsDesc = 'numberOfTariffs_DESC',
  InstallationDateAsc = 'installationDate_ASC',
  InstallationDateDesc = 'installationDate_DESC',
  CommissioningDateAsc = 'commissioningDate_ASC',
  CommissioningDateDesc = 'commissioningDate_DESC',
  VerificationDateAsc = 'verificationDate_ASC',
  VerificationDateDesc = 'verificationDate_DESC',
  NextVerificationDateAsc = 'nextVerificationDate_ASC',
  NextVerificationDateDesc = 'nextVerificationDate_DESC',
  ControlReadingsDateAsc = 'controlReadingsDate_ASC',
  ControlReadingsDateDesc = 'controlReadingsDate_DESC',
  SealingDateAsc = 'sealingDate_ASC',
  SealingDateDesc = 'sealingDate_DESC',
  AccountNumberAsc = 'accountNumber_ASC',
  AccountNumberDesc = 'accountNumber_DESC',
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  PlaceAsc = 'place_ASC',
  PlaceDesc = 'place_DESC',
  IsAutomaticAsc = 'isAutomatic_ASC',
  IsAutomaticDesc = 'isAutomatic_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMeterReadingFilterTemplateHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMeterReadingFilterTemplatesBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  EmployeeAsc = 'employee_ASC',
  EmployeeDesc = 'employee_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMeterReadingHistoryRecordsBy {
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  Value1Asc = 'value1_ASC',
  Value1Desc = 'value1_DESC',
  Value2Asc = 'value2_ASC',
  Value2Desc = 'value2_DESC',
  Value3Asc = 'value3_ASC',
  Value3Desc = 'value3_DESC',
  Value4Asc = 'value4_ASC',
  Value4Desc = 'value4_DESC',
  ClientNameAsc = 'clientName_ASC',
  ClientNameDesc = 'clientName_DESC',
  ClientEmailAsc = 'clientEmail_ASC',
  ClientEmailDesc = 'clientEmail_DESC',
  ClientPhoneAsc = 'clientPhone_ASC',
  ClientPhoneDesc = 'clientPhone_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMeterReadingSourceHistoryRecordsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMeterReadingSourcesBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMeterReadingsBy {
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  MeterAsc = 'meter_ASC',
  MeterDesc = 'meter_DESC',
  Value1Asc = 'value1_ASC',
  Value1Desc = 'value1_DESC',
  Value2Asc = 'value2_ASC',
  Value2Desc = 'value2_DESC',
  Value3Asc = 'value3_ASC',
  Value3Desc = 'value3_DESC',
  Value4Asc = 'value4_ASC',
  Value4Desc = 'value4_DESC',
  ClientAsc = 'client_ASC',
  ClientDesc = 'client_DESC',
  ContactAsc = 'contact_ASC',
  ContactDesc = 'contact_DESC',
  ClientNameAsc = 'clientName_ASC',
  ClientNameDesc = 'clientName_DESC',
  ClientEmailAsc = 'clientEmail_ASC',
  ClientEmailDesc = 'clientEmail_DESC',
  ClientPhoneAsc = 'clientPhone_ASC',
  ClientPhoneDesc = 'clientPhone_DESC',
  SourceAsc = 'source_ASC',
  SourceDesc = 'source_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMeterResourceHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  MeasureAsc = 'measure_ASC',
  MeasureDesc = 'measure_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMeterResourcesBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  MeasureAsc = 'measure_ASC',
  MeasureDesc = 'measure_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMetersBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  NumberOfTariffsAsc = 'numberOfTariffs_ASC',
  NumberOfTariffsDesc = 'numberOfTariffs_DESC',
  InstallationDateAsc = 'installationDate_ASC',
  InstallationDateDesc = 'installationDate_DESC',
  CommissioningDateAsc = 'commissioningDate_ASC',
  CommissioningDateDesc = 'commissioningDate_DESC',
  VerificationDateAsc = 'verificationDate_ASC',
  VerificationDateDesc = 'verificationDate_DESC',
  NextVerificationDateAsc = 'nextVerificationDate_ASC',
  NextVerificationDateDesc = 'nextVerificationDate_DESC',
  ControlReadingsDateAsc = 'controlReadingsDate_ASC',
  ControlReadingsDateDesc = 'controlReadingsDate_DESC',
  SealingDateAsc = 'sealingDate_ASC',
  SealingDateDesc = 'sealingDate_DESC',
  AccountNumberAsc = 'accountNumber_ASC',
  AccountNumberDesc = 'accountNumber_DESC',
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  PlaceAsc = 'place_ASC',
  PlaceDesc = 'place_DESC',
  ResourceAsc = 'resource_ASC',
  ResourceDesc = 'resource_DESC',
  IsAutomaticAsc = 'isAutomatic_ASC',
  IsAutomaticDesc = 'isAutomatic_DESC',
  B2cAppAsc = 'b2cApp_ASC',
  B2cAppDesc = 'b2cApp_DESC',
  B2bAppAsc = 'b2bApp_ASC',
  B2bAppDesc = 'b2bApp_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortMultiPaymentHistoryRecordsBy {
  ExplicitFeeAsc = 'explicitFee_ASC',
  ExplicitFeeDesc = 'explicitFee_DESC',
  ExplicitServiceChargeAsc = 'explicitServiceCharge_ASC',
  ExplicitServiceChargeDesc = 'explicitServiceCharge_DESC',
  ServiceFeeAsc = 'serviceFee_ASC',
  ServiceFeeDesc = 'serviceFee_DESC',
  ImplicitFeeAsc = 'implicitFee_ASC',
  ImplicitFeeDesc = 'implicitFee_DESC',
  AmountWithoutExplicitFeeAsc = 'amountWithoutExplicitFee_ASC',
  AmountWithoutExplicitFeeDesc = 'amountWithoutExplicitFee_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  WithdrawnAtAsc = 'withdrawnAt_ASC',
  WithdrawnAtDesc = 'withdrawnAt_DESC',
  CardNumberAsc = 'cardNumber_ASC',
  CardNumberDesc = 'cardNumber_DESC',
  PaymentWayAsc = 'paymentWay_ASC',
  PaymentWayDesc = 'paymentWay_DESC',
  PayerEmailAsc = 'payerEmail_ASC',
  PayerEmailDesc = 'payerEmail_DESC',
  ServiceCategoryAsc = 'serviceCategory_ASC',
  ServiceCategoryDesc = 'serviceCategory_DESC',
  TransactionIdAsc = 'transactionId_ASC',
  TransactionIdDesc = 'transactionId_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortMultiPaymentsBy {
  ExplicitFeeAsc = 'explicitFee_ASC',
  ExplicitFeeDesc = 'explicitFee_DESC',
  ExplicitServiceChargeAsc = 'explicitServiceCharge_ASC',
  ExplicitServiceChargeDesc = 'explicitServiceCharge_DESC',
  ServiceFeeAsc = 'serviceFee_ASC',
  ServiceFeeDesc = 'serviceFee_DESC',
  ImplicitFeeAsc = 'implicitFee_ASC',
  ImplicitFeeDesc = 'implicitFee_DESC',
  AmountWithoutExplicitFeeAsc = 'amountWithoutExplicitFee_ASC',
  AmountWithoutExplicitFeeDesc = 'amountWithoutExplicitFee_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  WithdrawnAtAsc = 'withdrawnAt_ASC',
  WithdrawnAtDesc = 'withdrawnAt_DESC',
  CardNumberAsc = 'cardNumber_ASC',
  CardNumberDesc = 'cardNumber_DESC',
  PaymentWayAsc = 'paymentWay_ASC',
  PaymentWayDesc = 'paymentWay_DESC',
  PayerEmailAsc = 'payerEmail_ASC',
  PayerEmailDesc = 'payerEmail_DESC',
  ServiceCategoryAsc = 'serviceCategory_ASC',
  ServiceCategoryDesc = 'serviceCategory_DESC',
  TransactionIdAsc = 'transactionId_ASC',
  TransactionIdDesc = 'transactionId_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  PaymentsAsc = 'payments_ASC',
  PaymentsDesc = 'payments_DESC',
  IntegrationAsc = 'integration_ASC',
  IntegrationDesc = 'integration_DESC',
  RecurrentPaymentContextAsc = 'recurrentPaymentContext_ASC',
  RecurrentPaymentContextDesc = 'recurrentPaymentContext_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortNewsItemHistoryRecordsBy {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  BodyAsc = 'body_ASC',
  BodyDesc = 'body_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  ValidBeforeAsc = 'validBefore_ASC',
  ValidBeforeDesc = 'validBefore_DESC',
  SendAtAsc = 'sendAt_ASC',
  SendAtDesc = 'sendAt_DESC',
  SentAtAsc = 'sentAt_ASC',
  SentAtDesc = 'sentAt_DESC',
  IsPublishedAsc = 'isPublished_ASC',
  IsPublishedDesc = 'isPublished_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortNewsItemScopeHistoryRecordsBy {
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortNewsItemScopesBy {
  NewsItemAsc = 'newsItem_ASC',
  NewsItemDesc = 'newsItem_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortNewsItemTemplateHistoryRecordsBy {
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  BodyAsc = 'body_ASC',
  BodyDesc = 'body_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortNewsItemTemplatesBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  BodyAsc = 'body_ASC',
  BodyDesc = 'body_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortNewsItemUserReadHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortNewsItemUserReadsBy {
  NewsItemAsc = 'newsItem_ASC',
  NewsItemDesc = 'newsItem_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortNewsItemsBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  BodyAsc = 'body_ASC',
  BodyDesc = 'body_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  ValidBeforeAsc = 'validBefore_ASC',
  ValidBeforeDesc = 'validBefore_DESC',
  SendAtAsc = 'sendAt_ASC',
  SendAtDesc = 'sendAt_DESC',
  ScopesAsc = 'scopes_ASC',
  ScopesDesc = 'scopes_DESC',
  SentAtAsc = 'sentAt_ASC',
  SentAtDesc = 'sentAt_DESC',
  IsPublishedAsc = 'isPublished_ASC',
  IsPublishedDesc = 'isPublished_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortOidcClientHistoryRecordsBy {
  ClientIdAsc = 'clientId_ASC',
  ClientIdDesc = 'clientId_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ExpiresAtAsc = 'expiresAt_ASC',
  ExpiresAtDesc = 'expiresAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortOidcClientsBy {
  ClientIdAsc = 'clientId_ASC',
  ClientIdDesc = 'clientId_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ExpiresAtAsc = 'expiresAt_ASC',
  ExpiresAtDesc = 'expiresAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortOnBoardingHistoryRecordsBy {
  CompletedAsc = 'completed_ASC',
  CompletedDesc = 'completed_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortOnBoardingStepHistoryRecordsBy {
  IconAsc = 'icon_ASC',
  IconDesc = 'icon_DESC',
  OrderAsc = 'order_ASC',
  OrderDesc = 'order_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC',
  CompletedAsc = 'completed_ASC',
  CompletedDesc = 'completed_DESC',
  ActionAsc = 'action_ASC',
  ActionDesc = 'action_DESC',
  EntityAsc = 'entity_ASC',
  EntityDesc = 'entity_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortOnBoardingStepsBy {
  IconAsc = 'icon_ASC',
  IconDesc = 'icon_DESC',
  OrderAsc = 'order_ASC',
  OrderDesc = 'order_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  RequiredAsc = 'required_ASC',
  RequiredDesc = 'required_DESC',
  CompletedAsc = 'completed_ASC',
  CompletedDesc = 'completed_DESC',
  ActionAsc = 'action_ASC',
  ActionDesc = 'action_DESC',
  EntityAsc = 'entity_ASC',
  EntityDesc = 'entity_DESC',
  OnBoardingAsc = 'onBoarding_ASC',
  OnBoardingDesc = 'onBoarding_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortOnBoardingsBy {
  CompletedAsc = 'completed_ASC',
  CompletedDesc = 'completed_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortOrganizationEmployeeHistoryRecordsBy {
  InviteCodeAsc = 'inviteCode_ASC',
  InviteCodeDesc = 'inviteCode_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  PositionAsc = 'position_ASC',
  PositionDesc = 'position_DESC',
  IsAcceptedAsc = 'isAccepted_ASC',
  IsAcceptedDesc = 'isAccepted_DESC',
  IsRejectedAsc = 'isRejected_ASC',
  IsRejectedDesc = 'isRejected_DESC',
  IsBlockedAsc = 'isBlocked_ASC',
  IsBlockedDesc = 'isBlocked_DESC',
  HasAllSpecializationsAsc = 'hasAllSpecializations_ASC',
  HasAllSpecializationsDesc = 'hasAllSpecializations_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortOrganizationEmployeeRoleHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  CanManageOrganizationAsc = 'canManageOrganization_ASC',
  CanManageOrganizationDesc = 'canManageOrganization_DESC',
  CanManageEmployeesAsc = 'canManageEmployees_ASC',
  CanManageEmployeesDesc = 'canManageEmployees_DESC',
  CanManageRolesAsc = 'canManageRoles_ASC',
  CanManageRolesDesc = 'canManageRoles_DESC',
  CanManageIntegrationsAsc = 'canManageIntegrations_ASC',
  CanManageIntegrationsDesc = 'canManageIntegrations_DESC',
  CanManagePropertiesAsc = 'canManageProperties_ASC',
  CanManagePropertiesDesc = 'canManageProperties_DESC',
  CanManageTicketsAsc = 'canManageTickets_ASC',
  CanManageTicketsDesc = 'canManageTickets_DESC',
  CanManageMetersAsc = 'canManageMeters_ASC',
  CanManageMetersDesc = 'canManageMeters_DESC',
  CanManageMeterReadingsAsc = 'canManageMeterReadings_ASC',
  CanManageMeterReadingsDesc = 'canManageMeterReadings_DESC',
  CanManageContactsAsc = 'canManageContacts_ASC',
  CanManageContactsDesc = 'canManageContacts_DESC',
  CanManageContactRolesAsc = 'canManageContactRoles_ASC',
  CanManageContactRolesDesc = 'canManageContactRoles_DESC',
  CanManageTicketCommentsAsc = 'canManageTicketComments_ASC',
  CanManageTicketCommentsDesc = 'canManageTicketComments_DESC',
  CanShareTicketsAsc = 'canShareTickets_ASC',
  CanShareTicketsDesc = 'canShareTickets_DESC',
  CanReadBillingReceiptsAsc = 'canReadBillingReceipts_ASC',
  CanReadBillingReceiptsDesc = 'canReadBillingReceipts_DESC',
  CanReadPaymentsAsc = 'canReadPayments_ASC',
  CanReadPaymentsDesc = 'canReadPayments_DESC',
  CanInviteNewOrganizationEmployeesAsc = 'canInviteNewOrganizationEmployees_ASC',
  CanInviteNewOrganizationEmployeesDesc = 'canInviteNewOrganizationEmployees_DESC',
  CanBeAssignedAsResponsibleAsc = 'canBeAssignedAsResponsible_ASC',
  CanBeAssignedAsResponsibleDesc = 'canBeAssignedAsResponsible_DESC',
  CanBeAssignedAsExecutorAsc = 'canBeAssignedAsExecutor_ASC',
  CanBeAssignedAsExecutorDesc = 'canBeAssignedAsExecutor_DESC',
  CanManageTicketPropertyHintsAsc = 'canManageTicketPropertyHints_ASC',
  CanManageTicketPropertyHintsDesc = 'canManageTicketPropertyHints_DESC',
  TicketVisibilityTypeAsc = 'ticketVisibilityType_ASC',
  TicketVisibilityTypeDesc = 'ticketVisibilityType_DESC',
  CanManagePropertyScopesAsc = 'canManagePropertyScopes_ASC',
  CanManagePropertyScopesDesc = 'canManagePropertyScopes_DESC',
  CanManageBankAccountsAsc = 'canManageBankAccounts_ASC',
  CanManageBankAccountsDesc = 'canManageBankAccounts_DESC',
  CanManageBankAccountReportTasksAsc = 'canManageBankAccountReportTasks_ASC',
  CanManageBankAccountReportTasksDesc = 'canManageBankAccountReportTasks_DESC',
  CanManageBankIntegrationAccountContextsAsc = 'canManageBankIntegrationAccountContexts_ASC',
  CanManageBankIntegrationAccountContextsDesc = 'canManageBankIntegrationAccountContexts_DESC',
  CanManageBankIntegrationOrganizationContextsAsc = 'canManageBankIntegrationOrganizationContexts_ASC',
  CanManageBankIntegrationOrganizationContextsDesc = 'canManageBankIntegrationOrganizationContexts_DESC',
  CanManageBankContractorAccountsAsc = 'canManageBankContractorAccounts_ASC',
  CanManageBankContractorAccountsDesc = 'canManageBankContractorAccounts_DESC',
  CanManageBankTransactionsAsc = 'canManageBankTransactions_ASC',
  CanManageBankTransactionsDesc = 'canManageBankTransactions_DESC',
  CanManageBankAccountReportsAsc = 'canManageBankAccountReports_ASC',
  CanManageBankAccountReportsDesc = 'canManageBankAccountReports_DESC',
  CanManageIncidentsAsc = 'canManageIncidents_ASC',
  CanManageIncidentsDesc = 'canManageIncidents_DESC',
  CanManageNewsItemsAsc = 'canManageNewsItems_ASC',
  CanManageNewsItemsDesc = 'canManageNewsItems_DESC',
  CanManageNewsItemTemplatesAsc = 'canManageNewsItemTemplates_ASC',
  CanManageNewsItemTemplatesDesc = 'canManageNewsItemTemplates_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortOrganizationEmployeeRolesBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  CanManageOrganizationAsc = 'canManageOrganization_ASC',
  CanManageOrganizationDesc = 'canManageOrganization_DESC',
  CanManageEmployeesAsc = 'canManageEmployees_ASC',
  CanManageEmployeesDesc = 'canManageEmployees_DESC',
  CanManageRolesAsc = 'canManageRoles_ASC',
  CanManageRolesDesc = 'canManageRoles_DESC',
  CanManageIntegrationsAsc = 'canManageIntegrations_ASC',
  CanManageIntegrationsDesc = 'canManageIntegrations_DESC',
  CanManagePropertiesAsc = 'canManageProperties_ASC',
  CanManagePropertiesDesc = 'canManageProperties_DESC',
  CanManageTicketsAsc = 'canManageTickets_ASC',
  CanManageTicketsDesc = 'canManageTickets_DESC',
  CanManageMetersAsc = 'canManageMeters_ASC',
  CanManageMetersDesc = 'canManageMeters_DESC',
  CanManageMeterReadingsAsc = 'canManageMeterReadings_ASC',
  CanManageMeterReadingsDesc = 'canManageMeterReadings_DESC',
  CanManageContactsAsc = 'canManageContacts_ASC',
  CanManageContactsDesc = 'canManageContacts_DESC',
  CanManageContactRolesAsc = 'canManageContactRoles_ASC',
  CanManageContactRolesDesc = 'canManageContactRoles_DESC',
  CanManageTicketCommentsAsc = 'canManageTicketComments_ASC',
  CanManageTicketCommentsDesc = 'canManageTicketComments_DESC',
  CanShareTicketsAsc = 'canShareTickets_ASC',
  CanShareTicketsDesc = 'canShareTickets_DESC',
  CanReadBillingReceiptsAsc = 'canReadBillingReceipts_ASC',
  CanReadBillingReceiptsDesc = 'canReadBillingReceipts_DESC',
  CanReadPaymentsAsc = 'canReadPayments_ASC',
  CanReadPaymentsDesc = 'canReadPayments_DESC',
  CanInviteNewOrganizationEmployeesAsc = 'canInviteNewOrganizationEmployees_ASC',
  CanInviteNewOrganizationEmployeesDesc = 'canInviteNewOrganizationEmployees_DESC',
  CanBeAssignedAsResponsibleAsc = 'canBeAssignedAsResponsible_ASC',
  CanBeAssignedAsResponsibleDesc = 'canBeAssignedAsResponsible_DESC',
  CanBeAssignedAsExecutorAsc = 'canBeAssignedAsExecutor_ASC',
  CanBeAssignedAsExecutorDesc = 'canBeAssignedAsExecutor_DESC',
  CanManageTicketPropertyHintsAsc = 'canManageTicketPropertyHints_ASC',
  CanManageTicketPropertyHintsDesc = 'canManageTicketPropertyHints_DESC',
  TicketVisibilityTypeAsc = 'ticketVisibilityType_ASC',
  TicketVisibilityTypeDesc = 'ticketVisibilityType_DESC',
  CanManagePropertyScopesAsc = 'canManagePropertyScopes_ASC',
  CanManagePropertyScopesDesc = 'canManagePropertyScopes_DESC',
  CanManageBankAccountsAsc = 'canManageBankAccounts_ASC',
  CanManageBankAccountsDesc = 'canManageBankAccounts_DESC',
  CanManageBankAccountReportTasksAsc = 'canManageBankAccountReportTasks_ASC',
  CanManageBankAccountReportTasksDesc = 'canManageBankAccountReportTasks_DESC',
  CanManageBankIntegrationAccountContextsAsc = 'canManageBankIntegrationAccountContexts_ASC',
  CanManageBankIntegrationAccountContextsDesc = 'canManageBankIntegrationAccountContexts_DESC',
  CanManageBankIntegrationOrganizationContextsAsc = 'canManageBankIntegrationOrganizationContexts_ASC',
  CanManageBankIntegrationOrganizationContextsDesc = 'canManageBankIntegrationOrganizationContexts_DESC',
  CanManageBankContractorAccountsAsc = 'canManageBankContractorAccounts_ASC',
  CanManageBankContractorAccountsDesc = 'canManageBankContractorAccounts_DESC',
  CanManageBankTransactionsAsc = 'canManageBankTransactions_ASC',
  CanManageBankTransactionsDesc = 'canManageBankTransactions_DESC',
  CanManageBankAccountReportsAsc = 'canManageBankAccountReports_ASC',
  CanManageBankAccountReportsDesc = 'canManageBankAccountReports_DESC',
  CanManageIncidentsAsc = 'canManageIncidents_ASC',
  CanManageIncidentsDesc = 'canManageIncidents_DESC',
  CanManageNewsItemsAsc = 'canManageNewsItems_ASC',
  CanManageNewsItemsDesc = 'canManageNewsItems_DESC',
  CanManageNewsItemTemplatesAsc = 'canManageNewsItemTemplates_ASC',
  CanManageNewsItemTemplatesDesc = 'canManageNewsItemTemplates_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortOrganizationEmployeeSpecializationHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortOrganizationEmployeeSpecializationsBy {
  EmployeeAsc = 'employee_ASC',
  EmployeeDesc = 'employee_DESC',
  SpecializationAsc = 'specialization_ASC',
  SpecializationDesc = 'specialization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortOrganizationEmployeesBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  InviteCodeAsc = 'inviteCode_ASC',
  InviteCodeDesc = 'inviteCode_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  RoleAsc = 'role_ASC',
  RoleDesc = 'role_DESC',
  PositionAsc = 'position_ASC',
  PositionDesc = 'position_DESC',
  IsAcceptedAsc = 'isAccepted_ASC',
  IsAcceptedDesc = 'isAccepted_DESC',
  IsRejectedAsc = 'isRejected_ASC',
  IsRejectedDesc = 'isRejected_DESC',
  IsBlockedAsc = 'isBlocked_ASC',
  IsBlockedDesc = 'isBlocked_DESC',
  HasAllSpecializationsAsc = 'hasAllSpecializations_ASC',
  HasAllSpecializationsDesc = 'hasAllSpecializations_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortOrganizationHistoryRecordsBy {
  CountryAsc = 'country_ASC',
  CountryDesc = 'country_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TinAsc = 'tin_ASC',
  TinDesc = 'tin_DESC',
  ImportRemoteSystemAsc = 'importRemoteSystem_ASC',
  ImportRemoteSystemDesc = 'importRemoteSystem_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortOrganizationLinkHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortOrganizationLinksBy {
  FromAsc = 'from_ASC',
  FromDesc = 'from_DESC',
  ToAsc = 'to_ASC',
  ToDesc = 'to_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortOrganizationsBy {
  CountryAsc = 'country_ASC',
  CountryDesc = 'country_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TinAsc = 'tin_ASC',
  TinDesc = 'tin_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EmployeesAsc = 'employees_ASC',
  EmployeesDesc = 'employees_DESC',
  RelatedOrganizationsAsc = 'relatedOrganizations_ASC',
  RelatedOrganizationsDesc = 'relatedOrganizations_DESC',
  ImportRemoteSystemAsc = 'importRemoteSystem_ASC',
  ImportRemoteSystemDesc = 'importRemoteSystem_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortPaymentHistoryRecordsBy {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  ExplicitFeeAsc = 'explicitFee_ASC',
  ExplicitFeeDesc = 'explicitFee_DESC',
  ExplicitServiceChargeAsc = 'explicitServiceCharge_ASC',
  ExplicitServiceChargeDesc = 'explicitServiceCharge_DESC',
  ImplicitFeeAsc = 'implicitFee_ASC',
  ImplicitFeeDesc = 'implicitFee_DESC',
  ServiceFeeAsc = 'serviceFee_ASC',
  ServiceFeeDesc = 'serviceFee_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  AdvancedAtAsc = 'advancedAt_ASC',
  AdvancedAtDesc = 'advancedAt_DESC',
  AccountNumberAsc = 'accountNumber_ASC',
  AccountNumberDesc = 'accountNumber_DESC',
  PeriodAsc = 'period_ASC',
  PeriodDesc = 'period_DESC',
  PurposeAsc = 'purpose_ASC',
  PurposeDesc = 'purpose_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  OrderAsc = 'order_ASC',
  OrderDesc = 'order_DESC',
  RecipientBicAsc = 'recipientBic_ASC',
  RecipientBicDesc = 'recipientBic_DESC',
  RecipientBankAccountAsc = 'recipientBankAccount_ASC',
  RecipientBankAccountDesc = 'recipientBankAccount_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortPaymentsBy {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  ExplicitFeeAsc = 'explicitFee_ASC',
  ExplicitFeeDesc = 'explicitFee_DESC',
  ExplicitServiceChargeAsc = 'explicitServiceCharge_ASC',
  ExplicitServiceChargeDesc = 'explicitServiceCharge_DESC',
  ImplicitFeeAsc = 'implicitFee_ASC',
  ImplicitFeeDesc = 'implicitFee_DESC',
  ServiceFeeAsc = 'serviceFee_ASC',
  ServiceFeeDesc = 'serviceFee_DESC',
  CurrencyCodeAsc = 'currencyCode_ASC',
  CurrencyCodeDesc = 'currencyCode_DESC',
  AdvancedAtAsc = 'advancedAt_ASC',
  AdvancedAtDesc = 'advancedAt_DESC',
  AccountNumberAsc = 'accountNumber_ASC',
  AccountNumberDesc = 'accountNumber_DESC',
  PeriodAsc = 'period_ASC',
  PeriodDesc = 'period_DESC',
  PurposeAsc = 'purpose_ASC',
  PurposeDesc = 'purpose_DESC',
  ReceiptAsc = 'receipt_ASC',
  ReceiptDesc = 'receipt_DESC',
  MultiPaymentAsc = 'multiPayment_ASC',
  MultiPaymentDesc = 'multiPayment_DESC',
  ContextAsc = 'context_ASC',
  ContextDesc = 'context_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  OrderAsc = 'order_ASC',
  OrderDesc = 'order_DESC',
  RecipientBicAsc = 'recipientBic_ASC',
  RecipientBicDesc = 'recipientBic_DESC',
  RecipientBankAccountAsc = 'recipientBankAccount_ASC',
  RecipientBankAccountDesc = 'recipientBankAccount_DESC',
  ImportIdAsc = 'importId_ASC',
  ImportIdDesc = 'importId_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortPaymentsFilterTemplateHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortPaymentsFilterTemplatesBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  EmployeeAsc = 'employee_ASC',
  EmployeeDesc = 'employee_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortPropertiesBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UnitsCountAsc = 'unitsCount_ASC',
  UnitsCountDesc = 'unitsCount_DESC',
  UninhabitedUnitsCountAsc = 'uninhabitedUnitsCount_ASC',
  UninhabitedUnitsCountDesc = 'uninhabitedUnitsCount_DESC',
  IsApprovedAsc = 'isApproved_ASC',
  IsApprovedDesc = 'isApproved_DESC',
  YearOfConstructionAsc = 'yearOfConstruction_ASC',
  YearOfConstructionDesc = 'yearOfConstruction_DESC',
  AreaAsc = 'area_ASC',
  AreaDesc = 'area_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  AddressKeyAsc = 'addressKey_ASC',
  AddressKeyDesc = 'addressKey_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortPropertyHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UnitsCountAsc = 'unitsCount_ASC',
  UnitsCountDesc = 'unitsCount_DESC',
  UninhabitedUnitsCountAsc = 'uninhabitedUnitsCount_ASC',
  UninhabitedUnitsCountDesc = 'uninhabitedUnitsCount_DESC',
  IsApprovedAsc = 'isApproved_ASC',
  IsApprovedDesc = 'isApproved_DESC',
  YearOfConstructionAsc = 'yearOfConstruction_ASC',
  YearOfConstructionDesc = 'yearOfConstruction_DESC',
  AreaAsc = 'area_ASC',
  AreaDesc = 'area_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  AddressKeyAsc = 'addressKey_ASC',
  AddressKeyDesc = 'addressKey_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortPropertyScopeHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  HasAllPropertiesAsc = 'hasAllProperties_ASC',
  HasAllPropertiesDesc = 'hasAllProperties_DESC',
  HasAllEmployeesAsc = 'hasAllEmployees_ASC',
  HasAllEmployeesDesc = 'hasAllEmployees_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortPropertyScopeOrganizationEmployeeHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortPropertyScopeOrganizationEmployeesBy {
  PropertyScopeAsc = 'propertyScope_ASC',
  PropertyScopeDesc = 'propertyScope_DESC',
  EmployeeAsc = 'employee_ASC',
  EmployeeDesc = 'employee_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortPropertyScopePropertiesBy {
  PropertyScopeAsc = 'propertyScope_ASC',
  PropertyScopeDesc = 'propertyScope_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortPropertyScopePropertyHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortPropertyScopesBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  HasAllPropertiesAsc = 'hasAllProperties_ASC',
  HasAllPropertiesDesc = 'hasAllProperties_DESC',
  HasAllEmployeesAsc = 'hasAllEmployees_ASC',
  HasAllEmployeesDesc = 'hasAllEmployees_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortRecurrentPaymentContextHistoryRecordsBy {
  EnabledAsc = 'enabled_ASC',
  EnabledDesc = 'enabled_DESC',
  LimitAsc = 'limit_ASC',
  LimitDesc = 'limit_DESC',
  AutoPayReceiptsAsc = 'autoPayReceipts_ASC',
  AutoPayReceiptsDesc = 'autoPayReceipts_DESC',
  PaymentDayAsc = 'paymentDay_ASC',
  PaymentDayDesc = 'paymentDay_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortRecurrentPaymentContextsBy {
  EnabledAsc = 'enabled_ASC',
  EnabledDesc = 'enabled_DESC',
  LimitAsc = 'limit_ASC',
  LimitDesc = 'limit_DESC',
  AutoPayReceiptsAsc = 'autoPayReceipts_ASC',
  AutoPayReceiptsDesc = 'autoPayReceipts_DESC',
  PaymentDayAsc = 'paymentDay_ASC',
  PaymentDayDesc = 'paymentDay_DESC',
  ServiceConsumerAsc = 'serviceConsumer_ASC',
  ServiceConsumerDesc = 'serviceConsumer_DESC',
  BillingCategoryAsc = 'billingCategory_ASC',
  BillingCategoryDesc = 'billingCategory_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortRecurrentPaymentHistoryRecordsBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  PayAfterAsc = 'payAfter_ASC',
  PayAfterDesc = 'payAfter_DESC',
  TryCountAsc = 'tryCount_ASC',
  TryCountDesc = 'tryCount_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortRecurrentPaymentsBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  PayAfterAsc = 'payAfter_ASC',
  PayAfterDesc = 'payAfter_DESC',
  TryCountAsc = 'tryCount_ASC',
  TryCountDesc = 'tryCount_DESC',
  RecurrentPaymentContextAsc = 'recurrentPaymentContext_ASC',
  RecurrentPaymentContextDesc = 'recurrentPaymentContext_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortRemoteClientHistoryRecordsBy {
  DeviceIdAsc = 'deviceId_ASC',
  DeviceIdDesc = 'deviceId_DESC',
  AppIdAsc = 'appId_ASC',
  AppIdDesc = 'appId_DESC',
  PushTokenAsc = 'pushToken_ASC',
  PushTokenDesc = 'pushToken_DESC',
  PushTransportAsc = 'pushTransport_ASC',
  PushTransportDesc = 'pushTransport_DESC',
  DevicePlatformAsc = 'devicePlatform_ASC',
  DevicePlatformDesc = 'devicePlatform_DESC',
  PushTypeAsc = 'pushType_ASC',
  PushTypeDesc = 'pushType_DESC',
  PushTokenVoIpAsc = 'pushTokenVoIP_ASC',
  PushTokenVoIpDesc = 'pushTokenVoIP_DESC',
  PushTransportVoIpAsc = 'pushTransportVoIP_ASC',
  PushTransportVoIpDesc = 'pushTransportVoIP_DESC',
  PushTypeVoIpAsc = 'pushTypeVoIP_ASC',
  PushTypeVoIpDesc = 'pushTypeVoIP_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortRemoteClientsBy {
  DeviceIdAsc = 'deviceId_ASC',
  DeviceIdDesc = 'deviceId_DESC',
  AppIdAsc = 'appId_ASC',
  AppIdDesc = 'appId_DESC',
  PushTokenAsc = 'pushToken_ASC',
  PushTokenDesc = 'pushToken_DESC',
  PushTransportAsc = 'pushTransport_ASC',
  PushTransportDesc = 'pushTransport_DESC',
  DevicePlatformAsc = 'devicePlatform_ASC',
  DevicePlatformDesc = 'devicePlatform_DESC',
  PushTypeAsc = 'pushType_ASC',
  PushTypeDesc = 'pushType_DESC',
  PushTokenVoIpAsc = 'pushTokenVoIP_ASC',
  PushTokenVoIpDesc = 'pushTokenVoIP_DESC',
  PushTransportVoIpAsc = 'pushTransportVoIP_ASC',
  PushTransportVoIpDesc = 'pushTransportVoIP_DESC',
  PushTypeVoIpAsc = 'pushTypeVoIP_ASC',
  PushTypeVoIpDesc = 'pushTypeVoIP_DESC',
  OwnerAsc = 'owner_ASC',
  OwnerDesc = 'owner_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortResidentBillingReceiptsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PeriodAsc = 'period_ASC',
  PeriodDesc = 'period_DESC',
  ToPayAsc = 'toPay_ASC',
  ToPayDesc = 'toPay_DESC',
  PrintableNumberAsc = 'printableNumber_ASC',
  PrintableNumberDesc = 'printableNumber_DESC',
  ServiceConsumerAsc = 'serviceConsumer_ASC',
  ServiceConsumerDesc = 'serviceConsumer_DESC'
}

export enum SortResidentHistoryRecordsBy {
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  AddressKeyAsc = 'addressKey_ASC',
  AddressKeyDesc = 'addressKey_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortResidentsBy {
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  AddressAsc = 'address_ASC',
  AddressDesc = 'address_DESC',
  AddressKeyAsc = 'addressKey_ASC',
  AddressKeyDesc = 'addressKey_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortServiceConsumerHistoryRecordsBy {
  PaymentCategoryAsc = 'paymentCategory_ASC',
  PaymentCategoryDesc = 'paymentCategory_DESC',
  AccountNumberAsc = 'accountNumber_ASC',
  AccountNumberDesc = 'accountNumber_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortServiceConsumersBy {
  PaymentCategoryAsc = 'paymentCategory_ASC',
  PaymentCategoryDesc = 'paymentCategory_DESC',
  ResidentAsc = 'resident_ASC',
  ResidentDesc = 'resident_DESC',
  BillingAccountAsc = 'billingAccount_ASC',
  BillingAccountDesc = 'billingAccount_DESC',
  BillingIntegrationContextAsc = 'billingIntegrationContext_ASC',
  BillingIntegrationContextDesc = 'billingIntegrationContext_DESC',
  AcquiringIntegrationContextAsc = 'acquiringIntegrationContext_ASC',
  AcquiringIntegrationContextDesc = 'acquiringIntegrationContext_DESC',
  AccountNumberAsc = 'accountNumber_ASC',
  AccountNumberDesc = 'accountNumber_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortServiceSubscriptionHistoryRecordsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  IsTrialAsc = 'isTrial_ASC',
  IsTrialDesc = 'isTrial_DESC',
  StartAtAsc = 'startAt_ASC',
  StartAtDesc = 'startAt_DESC',
  FinishAtAsc = 'finishAt_ASC',
  FinishAtDesc = 'finishAt_DESC',
  UnitsCountAsc = 'unitsCount_ASC',
  UnitsCountDesc = 'unitsCount_DESC',
  UnitPriceAsc = 'unitPrice_ASC',
  UnitPriceDesc = 'unitPrice_DESC',
  TotalPriceAsc = 'totalPrice_ASC',
  TotalPriceDesc = 'totalPrice_DESC',
  CurrencyAsc = 'currency_ASC',
  CurrencyDesc = 'currency_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortServiceSubscriptionsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  IsTrialAsc = 'isTrial_ASC',
  IsTrialDesc = 'isTrial_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  StartAtAsc = 'startAt_ASC',
  StartAtDesc = 'startAt_DESC',
  FinishAtAsc = 'finishAt_ASC',
  FinishAtDesc = 'finishAt_DESC',
  UnitsCountAsc = 'unitsCount_ASC',
  UnitsCountDesc = 'unitsCount_DESC',
  UnitPriceAsc = 'unitPrice_ASC',
  UnitPriceDesc = 'unitPrice_DESC',
  TotalPriceAsc = 'totalPrice_ASC',
  TotalPriceDesc = 'totalPrice_DESC',
  CurrencyAsc = 'currency_ASC',
  CurrencyDesc = 'currency_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketCategoryClassifierHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketCategoryClassifiersBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketChangesBy {
  TicketAsc = 'ticket_ASC',
  TicketDesc = 'ticket_DESC',
  StatusReopenedCounterFromAsc = 'statusReopenedCounterFrom_ASC',
  StatusReopenedCounterFromDesc = 'statusReopenedCounterFrom_DESC',
  StatusReopenedCounterToAsc = 'statusReopenedCounterTo_ASC',
  StatusReopenedCounterToDesc = 'statusReopenedCounterTo_DESC',
  ReviewValueFromAsc = 'reviewValueFrom_ASC',
  ReviewValueFromDesc = 'reviewValueFrom_DESC',
  ReviewValueToAsc = 'reviewValueTo_ASC',
  ReviewValueToDesc = 'reviewValueTo_DESC',
  ReviewCommentFromAsc = 'reviewCommentFrom_ASC',
  ReviewCommentFromDesc = 'reviewCommentFrom_DESC',
  ReviewCommentToAsc = 'reviewCommentTo_ASC',
  ReviewCommentToDesc = 'reviewCommentTo_DESC',
  QualityControlValueFromAsc = 'qualityControlValueFrom_ASC',
  QualityControlValueFromDesc = 'qualityControlValueFrom_DESC',
  QualityControlValueToAsc = 'qualityControlValueTo_ASC',
  QualityControlValueToDesc = 'qualityControlValueTo_DESC',
  QualityControlCommentFromAsc = 'qualityControlCommentFrom_ASC',
  QualityControlCommentFromDesc = 'qualityControlCommentFrom_DESC',
  QualityControlCommentToAsc = 'qualityControlCommentTo_ASC',
  QualityControlCommentToDesc = 'qualityControlCommentTo_DESC',
  StatusReasonFromAsc = 'statusReasonFrom_ASC',
  StatusReasonFromDesc = 'statusReasonFrom_DESC',
  StatusReasonToAsc = 'statusReasonTo_ASC',
  StatusReasonToDesc = 'statusReasonTo_DESC',
  DeadlineFromAsc = 'deadlineFrom_ASC',
  DeadlineFromDesc = 'deadlineFrom_DESC',
  DeadlineToAsc = 'deadlineTo_ASC',
  DeadlineToDesc = 'deadlineTo_DESC',
  ClientNameFromAsc = 'clientNameFrom_ASC',
  ClientNameFromDesc = 'clientNameFrom_DESC',
  ClientNameToAsc = 'clientNameTo_ASC',
  ClientNameToDesc = 'clientNameTo_DESC',
  ClientEmailFromAsc = 'clientEmailFrom_ASC',
  ClientEmailFromDesc = 'clientEmailFrom_DESC',
  ClientEmailToAsc = 'clientEmailTo_ASC',
  ClientEmailToDesc = 'clientEmailTo_DESC',
  ClientPhoneFromAsc = 'clientPhoneFrom_ASC',
  ClientPhoneFromDesc = 'clientPhoneFrom_DESC',
  ClientPhoneToAsc = 'clientPhoneTo_ASC',
  ClientPhoneToDesc = 'clientPhoneTo_DESC',
  DetailsFromAsc = 'detailsFrom_ASC',
  DetailsFromDesc = 'detailsFrom_DESC',
  DetailsToAsc = 'detailsTo_ASC',
  DetailsToDesc = 'detailsTo_DESC',
  IsPaidFromAsc = 'isPaidFrom_ASC',
  IsPaidFromDesc = 'isPaidFrom_DESC',
  IsPaidToAsc = 'isPaidTo_ASC',
  IsPaidToDesc = 'isPaidTo_DESC',
  IsEmergencyFromAsc = 'isEmergencyFrom_ASC',
  IsEmergencyFromDesc = 'isEmergencyFrom_DESC',
  IsEmergencyToAsc = 'isEmergencyTo_ASC',
  IsEmergencyToDesc = 'isEmergencyTo_DESC',
  IsWarrantyFromAsc = 'isWarrantyFrom_ASC',
  IsWarrantyFromDesc = 'isWarrantyFrom_DESC',
  IsWarrantyToAsc = 'isWarrantyTo_ASC',
  IsWarrantyToDesc = 'isWarrantyTo_DESC',
  IsResidentTicketFromAsc = 'isResidentTicketFrom_ASC',
  IsResidentTicketFromDesc = 'isResidentTicketFrom_DESC',
  IsResidentTicketToAsc = 'isResidentTicketTo_ASC',
  IsResidentTicketToDesc = 'isResidentTicketTo_DESC',
  CanReadByResidentFromAsc = 'canReadByResidentFrom_ASC',
  CanReadByResidentFromDesc = 'canReadByResidentFrom_DESC',
  CanReadByResidentToAsc = 'canReadByResidentTo_ASC',
  CanReadByResidentToDesc = 'canReadByResidentTo_DESC',
  PropertyAddressFromAsc = 'propertyAddressFrom_ASC',
  PropertyAddressFromDesc = 'propertyAddressFrom_DESC',
  PropertyAddressToAsc = 'propertyAddressTo_ASC',
  PropertyAddressToDesc = 'propertyAddressTo_DESC',
  SectionNameFromAsc = 'sectionNameFrom_ASC',
  SectionNameFromDesc = 'sectionNameFrom_DESC',
  SectionNameToAsc = 'sectionNameTo_ASC',
  SectionNameToDesc = 'sectionNameTo_DESC',
  SectionTypeFromAsc = 'sectionTypeFrom_ASC',
  SectionTypeFromDesc = 'sectionTypeFrom_DESC',
  SectionTypeToAsc = 'sectionTypeTo_ASC',
  SectionTypeToDesc = 'sectionTypeTo_DESC',
  FloorNameFromAsc = 'floorNameFrom_ASC',
  FloorNameFromDesc = 'floorNameFrom_DESC',
  FloorNameToAsc = 'floorNameTo_ASC',
  FloorNameToDesc = 'floorNameTo_DESC',
  UnitNameFromAsc = 'unitNameFrom_ASC',
  UnitNameFromDesc = 'unitNameFrom_DESC',
  UnitNameToAsc = 'unitNameTo_ASC',
  UnitNameToDesc = 'unitNameTo_DESC',
  UnitTypeFromAsc = 'unitTypeFrom_ASC',
  UnitTypeFromDesc = 'unitTypeFrom_DESC',
  UnitTypeToAsc = 'unitTypeTo_ASC',
  UnitTypeToDesc = 'unitTypeTo_DESC',
  DeferredUntilFromAsc = 'deferredUntilFrom_ASC',
  DeferredUntilFromDesc = 'deferredUntilFrom_DESC',
  DeferredUntilToAsc = 'deferredUntilTo_ASC',
  DeferredUntilToDesc = 'deferredUntilTo_DESC',
  OrganizationIdFromAsc = 'organizationIdFrom_ASC',
  OrganizationIdFromDesc = 'organizationIdFrom_DESC',
  OrganizationIdToAsc = 'organizationIdTo_ASC',
  OrganizationIdToDesc = 'organizationIdTo_DESC',
  OrganizationDisplayNameFromAsc = 'organizationDisplayNameFrom_ASC',
  OrganizationDisplayNameFromDesc = 'organizationDisplayNameFrom_DESC',
  OrganizationDisplayNameToAsc = 'organizationDisplayNameTo_ASC',
  OrganizationDisplayNameToDesc = 'organizationDisplayNameTo_DESC',
  StatusIdFromAsc = 'statusIdFrom_ASC',
  StatusIdFromDesc = 'statusIdFrom_DESC',
  StatusIdToAsc = 'statusIdTo_ASC',
  StatusIdToDesc = 'statusIdTo_DESC',
  StatusDisplayNameFromAsc = 'statusDisplayNameFrom_ASC',
  StatusDisplayNameFromDesc = 'statusDisplayNameFrom_DESC',
  StatusDisplayNameToAsc = 'statusDisplayNameTo_ASC',
  StatusDisplayNameToDesc = 'statusDisplayNameTo_DESC',
  ClientIdFromAsc = 'clientIdFrom_ASC',
  ClientIdFromDesc = 'clientIdFrom_DESC',
  ClientIdToAsc = 'clientIdTo_ASC',
  ClientIdToDesc = 'clientIdTo_DESC',
  ClientDisplayNameFromAsc = 'clientDisplayNameFrom_ASC',
  ClientDisplayNameFromDesc = 'clientDisplayNameFrom_DESC',
  ClientDisplayNameToAsc = 'clientDisplayNameTo_ASC',
  ClientDisplayNameToDesc = 'clientDisplayNameTo_DESC',
  ContactIdFromAsc = 'contactIdFrom_ASC',
  ContactIdFromDesc = 'contactIdFrom_DESC',
  ContactIdToAsc = 'contactIdTo_ASC',
  ContactIdToDesc = 'contactIdTo_DESC',
  ContactDisplayNameFromAsc = 'contactDisplayNameFrom_ASC',
  ContactDisplayNameFromDesc = 'contactDisplayNameFrom_DESC',
  ContactDisplayNameToAsc = 'contactDisplayNameTo_ASC',
  ContactDisplayNameToDesc = 'contactDisplayNameTo_DESC',
  AssigneeIdFromAsc = 'assigneeIdFrom_ASC',
  AssigneeIdFromDesc = 'assigneeIdFrom_DESC',
  AssigneeIdToAsc = 'assigneeIdTo_ASC',
  AssigneeIdToDesc = 'assigneeIdTo_DESC',
  AssigneeDisplayNameFromAsc = 'assigneeDisplayNameFrom_ASC',
  AssigneeDisplayNameFromDesc = 'assigneeDisplayNameFrom_DESC',
  AssigneeDisplayNameToAsc = 'assigneeDisplayNameTo_ASC',
  AssigneeDisplayNameToDesc = 'assigneeDisplayNameTo_DESC',
  ExecutorIdFromAsc = 'executorIdFrom_ASC',
  ExecutorIdFromDesc = 'executorIdFrom_DESC',
  ExecutorIdToAsc = 'executorIdTo_ASC',
  ExecutorIdToDesc = 'executorIdTo_DESC',
  ExecutorDisplayNameFromAsc = 'executorDisplayNameFrom_ASC',
  ExecutorDisplayNameFromDesc = 'executorDisplayNameFrom_DESC',
  ExecutorDisplayNameToAsc = 'executorDisplayNameTo_ASC',
  ExecutorDisplayNameToDesc = 'executorDisplayNameTo_DESC',
  ClassifierIdFromAsc = 'classifierIdFrom_ASC',
  ClassifierIdFromDesc = 'classifierIdFrom_DESC',
  ClassifierIdToAsc = 'classifierIdTo_ASC',
  ClassifierIdToDesc = 'classifierIdTo_DESC',
  ClassifierDisplayNameFromAsc = 'classifierDisplayNameFrom_ASC',
  ClassifierDisplayNameFromDesc = 'classifierDisplayNameFrom_DESC',
  ClassifierDisplayNameToAsc = 'classifierDisplayNameTo_ASC',
  ClassifierDisplayNameToDesc = 'classifierDisplayNameTo_DESC',
  RelatedIdFromAsc = 'relatedIdFrom_ASC',
  RelatedIdFromDesc = 'relatedIdFrom_DESC',
  RelatedIdToAsc = 'relatedIdTo_ASC',
  RelatedIdToDesc = 'relatedIdTo_DESC',
  RelatedDisplayNameFromAsc = 'relatedDisplayNameFrom_ASC',
  RelatedDisplayNameFromDesc = 'relatedDisplayNameFrom_DESC',
  RelatedDisplayNameToAsc = 'relatedDisplayNameTo_ASC',
  RelatedDisplayNameToDesc = 'relatedDisplayNameTo_DESC',
  PropertyIdFromAsc = 'propertyIdFrom_ASC',
  PropertyIdFromDesc = 'propertyIdFrom_DESC',
  PropertyIdToAsc = 'propertyIdTo_ASC',
  PropertyIdToDesc = 'propertyIdTo_DESC',
  PropertyDisplayNameFromAsc = 'propertyDisplayNameFrom_ASC',
  PropertyDisplayNameFromDesc = 'propertyDisplayNameFrom_DESC',
  PropertyDisplayNameToAsc = 'propertyDisplayNameTo_ASC',
  PropertyDisplayNameToDesc = 'propertyDisplayNameTo_DESC',
  SourceIdFromAsc = 'sourceIdFrom_ASC',
  SourceIdFromDesc = 'sourceIdFrom_DESC',
  SourceIdToAsc = 'sourceIdTo_ASC',
  SourceIdToDesc = 'sourceIdTo_DESC',
  SourceDisplayNameFromAsc = 'sourceDisplayNameFrom_ASC',
  SourceDisplayNameFromDesc = 'sourceDisplayNameFrom_DESC',
  SourceDisplayNameToAsc = 'sourceDisplayNameTo_ASC',
  SourceDisplayNameToDesc = 'sourceDisplayNameTo_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketClassifierHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketClassifiersBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  PlaceAsc = 'place_ASC',
  PlaceDesc = 'place_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  ProblemAsc = 'problem_ASC',
  ProblemDesc = 'problem_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketCommentFileHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketCommentFilesBy {
  TicketAsc = 'ticket_ASC',
  TicketDesc = 'ticket_DESC',
  TicketCommentAsc = 'ticketComment_ASC',
  TicketCommentDesc = 'ticketComment_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketCommentHistoryRecordsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  ContentAsc = 'content_ASC',
  ContentDesc = 'content_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketCommentsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  TicketAsc = 'ticket_ASC',
  TicketDesc = 'ticket_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  ContentAsc = 'content_ASC',
  ContentDesc = 'content_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketCommentsTimeHistoryRecordsBy {
  LastCommentAtAsc = 'lastCommentAt_ASC',
  LastCommentAtDesc = 'lastCommentAt_DESC',
  LastResidentCommentAtAsc = 'lastResidentCommentAt_ASC',
  LastResidentCommentAtDesc = 'lastResidentCommentAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketCommentsTimesBy {
  TicketAsc = 'ticket_ASC',
  TicketDesc = 'ticket_DESC',
  LastCommentAtAsc = 'lastCommentAt_ASC',
  LastCommentAtDesc = 'lastCommentAt_DESC',
  LastResidentCommentAtAsc = 'lastResidentCommentAt_ASC',
  LastResidentCommentAtDesc = 'lastResidentCommentAt_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketExportTaskHistoryRecordsBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  FormatAsc = 'format_ASC',
  FormatDesc = 'format_DESC',
  ExportedRecordsCountAsc = 'exportedRecordsCount_ASC',
  ExportedRecordsCountDesc = 'exportedRecordsCount_DESC',
  TotalRecordsCountAsc = 'totalRecordsCount_ASC',
  TotalRecordsCountDesc = 'totalRecordsCount_DESC',
  LocaleAsc = 'locale_ASC',
  LocaleDesc = 'locale_DESC',
  TimeZoneAsc = 'timeZone_ASC',
  TimeZoneDesc = 'timeZone_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketExportTasksBy {
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  FormatAsc = 'format_ASC',
  FormatDesc = 'format_DESC',
  ExportedRecordsCountAsc = 'exportedRecordsCount_ASC',
  ExportedRecordsCountDesc = 'exportedRecordsCount_DESC',
  TotalRecordsCountAsc = 'totalRecordsCount_ASC',
  TotalRecordsCountDesc = 'totalRecordsCount_DESC',
  LocaleAsc = 'locale_ASC',
  LocaleDesc = 'locale_DESC',
  TimeZoneAsc = 'timeZone_ASC',
  TimeZoneDesc = 'timeZone_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketFileHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketFilesBy {
  TicketAsc = 'ticket_ASC',
  TicketDesc = 'ticket_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketFilterTemplateHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketFilterTemplatesBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  EmployeeAsc = 'employee_ASC',
  EmployeeDesc = 'employee_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketHistoryRecordsBy {
  StatusReopenedCounterAsc = 'statusReopenedCounter_ASC',
  StatusReopenedCounterDesc = 'statusReopenedCounter_DESC',
  ReviewValueAsc = 'reviewValue_ASC',
  ReviewValueDesc = 'reviewValue_DESC',
  ReviewCommentAsc = 'reviewComment_ASC',
  ReviewCommentDesc = 'reviewComment_DESC',
  QualityControlValueAsc = 'qualityControlValue_ASC',
  QualityControlValueDesc = 'qualityControlValue_DESC',
  QualityControlCommentAsc = 'qualityControlComment_ASC',
  QualityControlCommentDesc = 'qualityControlComment_DESC',
  QualityControlUpdatedAtAsc = 'qualityControlUpdatedAt_ASC',
  QualityControlUpdatedAtDesc = 'qualityControlUpdatedAt_DESC',
  StatusUpdatedAtAsc = 'statusUpdatedAt_ASC',
  StatusUpdatedAtDesc = 'statusUpdatedAt_DESC',
  CompletedAtAsc = 'completedAt_ASC',
  CompletedAtDesc = 'completedAt_DESC',
  LastCommentAtAsc = 'lastCommentAt_ASC',
  LastCommentAtDesc = 'lastCommentAt_DESC',
  LastResidentCommentAtAsc = 'lastResidentCommentAt_ASC',
  LastResidentCommentAtDesc = 'lastResidentCommentAt_DESC',
  StatusReasonAsc = 'statusReason_ASC',
  StatusReasonDesc = 'statusReason_DESC',
  DeadlineAsc = 'deadline_ASC',
  DeadlineDesc = 'deadline_DESC',
  OrderAsc = 'order_ASC',
  OrderDesc = 'order_DESC',
  ClientNameAsc = 'clientName_ASC',
  ClientNameDesc = 'clientName_DESC',
  ClientEmailAsc = 'clientEmail_ASC',
  ClientEmailDesc = 'clientEmail_DESC',
  ClientPhoneAsc = 'clientPhone_ASC',
  ClientPhoneDesc = 'clientPhone_DESC',
  IsAutoClassifiedAsc = 'isAutoClassified_ASC',
  IsAutoClassifiedDesc = 'isAutoClassified_DESC',
  DetailsAsc = 'details_ASC',
  DetailsDesc = 'details_DESC',
  IsPaidAsc = 'isPaid_ASC',
  IsPaidDesc = 'isPaid_DESC',
  IsEmergencyAsc = 'isEmergency_ASC',
  IsEmergencyDesc = 'isEmergency_DESC',
  IsWarrantyAsc = 'isWarranty_ASC',
  IsWarrantyDesc = 'isWarranty_DESC',
  IsResidentTicketAsc = 'isResidentTicket_ASC',
  IsResidentTicketDesc = 'isResidentTicket_DESC',
  CanReadByResidentAsc = 'canReadByResident_ASC',
  CanReadByResidentDesc = 'canReadByResident_DESC',
  PropertyAddressAsc = 'propertyAddress_ASC',
  PropertyAddressDesc = 'propertyAddress_DESC',
  SectionNameAsc = 'sectionName_ASC',
  SectionNameDesc = 'sectionName_DESC',
  SectionTypeAsc = 'sectionType_ASC',
  SectionTypeDesc = 'sectionType_DESC',
  FloorNameAsc = 'floorName_ASC',
  FloorNameDesc = 'floorName_DESC',
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  DeferredUntilAsc = 'deferredUntil_ASC',
  DeferredUntilDesc = 'deferredUntil_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketOrganizationSettingHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketOrganizationSettingsBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  DefaultDeadlineDurationAsc = 'defaultDeadlineDuration_ASC',
  DefaultDeadlineDurationDesc = 'defaultDeadlineDuration_DESC',
  PaidDeadlineDurationAsc = 'paidDeadlineDuration_ASC',
  PaidDeadlineDurationDesc = 'paidDeadlineDuration_DESC',
  EmergencyDeadlineDurationAsc = 'emergencyDeadlineDuration_ASC',
  EmergencyDeadlineDurationDesc = 'emergencyDeadlineDuration_DESC',
  WarrantyDeadlineDurationAsc = 'warrantyDeadlineDuration_ASC',
  WarrantyDeadlineDurationDesc = 'warrantyDeadlineDuration_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketPlaceClassifierHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketPlaceClassifiersBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketProblemClassifierHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketProblemClassifiersBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketPropertyHintHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ContentAsc = 'content_ASC',
  ContentDesc = 'content_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketPropertyHintPropertiesBy {
  TicketPropertyHintAsc = 'ticketPropertyHint_ASC',
  TicketPropertyHintDesc = 'ticketPropertyHint_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketPropertyHintPropertyHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketPropertyHintsBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ContentAsc = 'content_ASC',
  ContentDesc = 'content_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketSourceHistoryRecordsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketSourcesBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketStatusHistoryRecordsBy {
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortTicketStatusesBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortTicketsBy {
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  StatusReopenedCounterAsc = 'statusReopenedCounter_ASC',
  StatusReopenedCounterDesc = 'statusReopenedCounter_DESC',
  ReviewValueAsc = 'reviewValue_ASC',
  ReviewValueDesc = 'reviewValue_DESC',
  ReviewCommentAsc = 'reviewComment_ASC',
  ReviewCommentDesc = 'reviewComment_DESC',
  QualityControlValueAsc = 'qualityControlValue_ASC',
  QualityControlValueDesc = 'qualityControlValue_DESC',
  QualityControlCommentAsc = 'qualityControlComment_ASC',
  QualityControlCommentDesc = 'qualityControlComment_DESC',
  QualityControlUpdatedAtAsc = 'qualityControlUpdatedAt_ASC',
  QualityControlUpdatedAtDesc = 'qualityControlUpdatedAt_DESC',
  QualityControlUpdatedByAsc = 'qualityControlUpdatedBy_ASC',
  QualityControlUpdatedByDesc = 'qualityControlUpdatedBy_DESC',
  StatusUpdatedAtAsc = 'statusUpdatedAt_ASC',
  StatusUpdatedAtDesc = 'statusUpdatedAt_DESC',
  CompletedAtAsc = 'completedAt_ASC',
  CompletedAtDesc = 'completedAt_DESC',
  LastCommentAtAsc = 'lastCommentAt_ASC',
  LastCommentAtDesc = 'lastCommentAt_DESC',
  LastResidentCommentAtAsc = 'lastResidentCommentAt_ASC',
  LastResidentCommentAtDesc = 'lastResidentCommentAt_DESC',
  StatusReasonAsc = 'statusReason_ASC',
  StatusReasonDesc = 'statusReason_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  DeadlineAsc = 'deadline_ASC',
  DeadlineDesc = 'deadline_DESC',
  OrderAsc = 'order_ASC',
  OrderDesc = 'order_DESC',
  NumberAsc = 'number_ASC',
  NumberDesc = 'number_DESC',
  ClientAsc = 'client_ASC',
  ClientDesc = 'client_DESC',
  ContactAsc = 'contact_ASC',
  ContactDesc = 'contact_DESC',
  ClientNameAsc = 'clientName_ASC',
  ClientNameDesc = 'clientName_DESC',
  ClientEmailAsc = 'clientEmail_ASC',
  ClientEmailDesc = 'clientEmail_DESC',
  ClientPhoneAsc = 'clientPhone_ASC',
  ClientPhoneDesc = 'clientPhone_DESC',
  AssigneeAsc = 'assignee_ASC',
  AssigneeDesc = 'assignee_DESC',
  ExecutorAsc = 'executor_ASC',
  ExecutorDesc = 'executor_DESC',
  CategoryClassifierAsc = 'categoryClassifier_ASC',
  CategoryClassifierDesc = 'categoryClassifier_DESC',
  PlaceClassifierAsc = 'placeClassifier_ASC',
  PlaceClassifierDesc = 'placeClassifier_DESC',
  ProblemClassifierAsc = 'problemClassifier_ASC',
  ProblemClassifierDesc = 'problemClassifier_DESC',
  ClassifierAsc = 'classifier_ASC',
  ClassifierDesc = 'classifier_DESC',
  IsAutoClassifiedAsc = 'isAutoClassified_ASC',
  IsAutoClassifiedDesc = 'isAutoClassified_DESC',
  DetailsAsc = 'details_ASC',
  DetailsDesc = 'details_DESC',
  RelatedAsc = 'related_ASC',
  RelatedDesc = 'related_DESC',
  IsPaidAsc = 'isPaid_ASC',
  IsPaidDesc = 'isPaid_DESC',
  IsEmergencyAsc = 'isEmergency_ASC',
  IsEmergencyDesc = 'isEmergency_DESC',
  IsWarrantyAsc = 'isWarranty_ASC',
  IsWarrantyDesc = 'isWarranty_DESC',
  IsResidentTicketAsc = 'isResidentTicket_ASC',
  IsResidentTicketDesc = 'isResidentTicket_DESC',
  CanReadByResidentAsc = 'canReadByResident_ASC',
  CanReadByResidentDesc = 'canReadByResident_DESC',
  PropertyAsc = 'property_ASC',
  PropertyDesc = 'property_DESC',
  PropertyAddressAsc = 'propertyAddress_ASC',
  PropertyAddressDesc = 'propertyAddress_DESC',
  SectionNameAsc = 'sectionName_ASC',
  SectionNameDesc = 'sectionName_DESC',
  SectionTypeAsc = 'sectionType_ASC',
  SectionTypeDesc = 'sectionType_DESC',
  FloorNameAsc = 'floorName_ASC',
  FloorNameDesc = 'floorName_DESC',
  UnitNameAsc = 'unitName_ASC',
  UnitNameDesc = 'unitName_DESC',
  UnitTypeAsc = 'unitType_ASC',
  UnitTypeDesc = 'unitType_DESC',
  SourceAsc = 'source_ASC',
  SourceDesc = 'source_DESC',
  DeferredUntilAsc = 'deferredUntil_ASC',
  DeferredUntilDesc = 'deferredUntil_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortUserExternalIdentitiesBy {
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdentityIdAsc = 'identityId_ASC',
  IdentityIdDesc = 'identityId_DESC',
  IdentityTypeAsc = 'identityType_ASC',
  IdentityTypeDesc = 'identityType_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortUserExternalIdentityHistoryRecordsBy {
  IdentityIdAsc = 'identityId_ASC',
  IdentityIdDesc = 'identityId_DESC',
  IdentityTypeAsc = 'identityType_ASC',
  IdentityTypeDesc = 'identityType_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortUserFavoriteTicketHistoryRecordsBy {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortUserFavoriteTicketsBy {
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  TicketAsc = 'ticket_ASC',
  TicketDesc = 'ticket_DESC',
  OrganizationAsc = 'organization_ASC',
  OrganizationDesc = 'organization_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortUserHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PasswordAsc = 'password_ASC',
  PasswordDesc = 'password_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  IsAdminAsc = 'isAdmin_ASC',
  IsAdminDesc = 'isAdmin_DESC',
  IsSupportAsc = 'isSupport_ASC',
  IsSupportDesc = 'isSupport_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  IsEmailVerifiedAsc = 'isEmailVerified_ASC',
  IsEmailVerifiedDesc = 'isEmailVerified_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  IsPhoneVerifiedAsc = 'isPhoneVerified_ASC',
  IsPhoneVerifiedDesc = 'isPhoneVerified_DESC',
  LocaleAsc = 'locale_ASC',
  LocaleDesc = 'locale_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortUserTicketCommentReadTimeHistoryRecordsBy {
  ReadCommentAtAsc = 'readCommentAt_ASC',
  ReadCommentAtDesc = 'readCommentAt_DESC',
  ReadResidentCommentAtAsc = 'readResidentCommentAt_ASC',
  ReadResidentCommentAtDesc = 'readResidentCommentAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortUserTicketCommentReadTimesBy {
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  TicketAsc = 'ticket_ASC',
  TicketDesc = 'ticket_DESC',
  ReadCommentAtAsc = 'readCommentAt_ASC',
  ReadCommentAtDesc = 'readCommentAt_DESC',
  ReadResidentCommentAtAsc = 'readResidentCommentAt_ASC',
  ReadResidentCommentAtDesc = 'readResidentCommentAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortUsersBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  IsAdminAsc = 'isAdmin_ASC',
  IsAdminDesc = 'isAdmin_DESC',
  IsSupportAsc = 'isSupport_ASC',
  IsSupportDesc = 'isSupport_DESC',
  EmailAsc = 'email_ASC',
  EmailDesc = 'email_DESC',
  IsEmailVerifiedAsc = 'isEmailVerified_ASC',
  IsEmailVerifiedDesc = 'isEmailVerified_DESC',
  PhoneAsc = 'phone_ASC',
  PhoneDesc = 'phone_DESC',
  IsPhoneVerifiedAsc = 'isPhoneVerified_ASC',
  IsPhoneVerifiedDesc = 'isPhoneVerified_DESC',
  LocaleAsc = 'locale_ASC',
  LocaleDesc = 'locale_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortWebhookHistoryRecordsBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortWebhookSubscriptionHistoryRecordsBy {
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  SyncedAtAsc = 'syncedAt_ASC',
  SyncedAtDesc = 'syncedAt_DESC',
  SyncedAmountAsc = 'syncedAmount_ASC',
  SyncedAmountDesc = 'syncedAmount_DESC',
  FailuresCountAsc = 'failuresCount_ASC',
  FailuresCountDesc = 'failuresCount_DESC',
  ModelAsc = 'model_ASC',
  ModelDesc = 'model_DESC',
  FieldsAsc = 'fields_ASC',
  FieldsDesc = 'fields_DESC',
  MaxPackSizeAsc = 'maxPackSize_ASC',
  MaxPackSizeDesc = 'maxPackSize_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC',
  HistoryDateAsc = 'history_date_ASC',
  HistoryDateDesc = 'history_date_DESC',
  HistoryActionAsc = 'history_action_ASC',
  HistoryActionDesc = 'history_action_DESC'
}

export enum SortWebhookSubscriptionsBy {
  WebhookAsc = 'webhook_ASC',
  WebhookDesc = 'webhook_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  SyncedAtAsc = 'syncedAt_ASC',
  SyncedAtDesc = 'syncedAt_DESC',
  SyncedAmountAsc = 'syncedAmount_ASC',
  SyncedAmountDesc = 'syncedAmount_DESC',
  FailuresCountAsc = 'failuresCount_ASC',
  FailuresCountDesc = 'failuresCount_DESC',
  ModelAsc = 'model_ASC',
  ModelDesc = 'model_DESC',
  FieldsAsc = 'fields_ASC',
  FieldsDesc = 'fields_DESC',
  MaxPackSizeAsc = 'maxPackSize_ASC',
  MaxPackSizeDesc = 'maxPackSize_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export enum SortWebhooksBy {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  UserAsc = 'user_ASC',
  UserDesc = 'user_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  VAsc = 'v_ASC',
  VDesc = 'v_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  CreatedByAsc = 'createdBy_ASC',
  CreatedByDesc = 'createdBy_DESC',
  UpdatedByAsc = 'updatedBy_ASC',
  UpdatedByDesc = 'updatedBy_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DvAsc = 'dv_ASC',
  DvDesc = 'dv_DESC'
}

export type StartConfirmPhoneActionInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  captcha: Scalars['String'];
  phone: Scalars['String'];
};

export type StartConfirmPhoneActionOutput = {
  __typename?: 'StartConfirmPhoneActionOutput';
  token: Scalars['String'];
};

export type StartPasswordRecoveryInput = {
  phone: Scalars['String'];
  sender: SenderFieldInput;
  dv: Scalars['Int'];
};

export type StartPasswordRecoveryOutput = {
  __typename?: 'StartPasswordRecoveryOutput';
  status: Scalars['String'];
};

export type SyncRemoteClientInput = {
  dv: Scalars['Int'];
  sender: SenderFieldInput;
  deviceId: Scalars['String'];
  appId: Scalars['String'];
  pushToken?: Maybe<Scalars['String']>;
  pushTransport?: Maybe<PushTransportType>;
  devicePlatform?: Maybe<DevicePlatformType>;
  pushType?: Maybe<PushType>;
  meta?: Maybe<Scalars['JSON']>;
  pushTokenVoIP?: Maybe<Scalars['String']>;
  pushTransportVoIP?: Maybe<PushTransportType>;
  pushTypeVoIP?: Maybe<PushType>;
};

/**  Users request or contact with the user. It has fields `clientName`, `clientPhone`, `clientEmail`, which stores contact information at the moment of creating or updating. Values of these fields are independent from related entities, like Contact, Resident etc. If by some reason related entities will be deleted, unavailable or will change its contact information, these fields will stay unchanged.So, by creating a new ticket with connection to some contact entity (Contact, Resident), these fields will be populated by its contact information if other values are not explicitly provided.  */
export type Ticket = {
  __typename?: 'Ticket';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the Ticket List config, or
   *  2. As an alias to the field set on 'labelField' in the Ticket List config, or
   *  3. As an alias to a 'name' field on the Ticket List (if one exists), or
   *  4. As an alias to the 'id' field on the Ticket List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Counter showing the number of changes `status` to `new_or_reopened`  */
  statusReopenedCounter?: Maybe<Scalars['Int']>;
  /**  Review of the ticket by a resident on a 2-point scale. 0 – ticket returned, 1 – bad review, 2 – good review  */
  reviewValue?: Maybe<TicketReviewValueType>;
  /**  Resident's comment on ticket review  */
  reviewComment?: Maybe<Scalars['String']>;
  /**  Review of the ticket by a staff on a 2-point scale (bad or good)  */
  qualityControlValue?: Maybe<TicketQualityControlValueType>;
  /**  Staff's comment on ticket review  */
  qualityControlComment?: Maybe<Scalars['String']>;
  /**  Quality control additional options that extend it.Options that do not match the score will be reset.  */
  qualityControlAdditionalOptions?: Maybe<Array<Maybe<QualityControlAdditionalOptionsType>>>;
  /**  Quality control updated at time  */
  qualityControlUpdatedAt?: Maybe<Scalars['String']>;
  /**  User who last updated quality control value/control/additional options  */
  qualityControlUpdatedBy?: Maybe<User>;
  /**  Status updated at time  */
  statusUpdatedAt?: Maybe<Scalars['String']>;
  /**  When status of the ticket was changed to completed  */
  completedAt?: Maybe<Scalars['String']>;
  /**  Last comment time in ticket  */
  lastCommentAt?: Maybe<Scalars['String']>;
  /**  Last resident comment time in ticket  */
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  /**  Text reason for status changes. Sometimes you should describe the reason why you change the `status`  */
  statusReason?: Maybe<Scalars['String']>;
  /**  Status is the step of the ticket processing workflow. Companies may have different ticket processing workflows  */
  status?: Maybe<TicketStatus>;
  /**  Time after which the ticket must be completed  */
  deadline?: Maybe<Scalars['String']>;
  /**  Field required for specific sorting of model objects  */
  order?: Maybe<Scalars['Int']>;
  /**  Autogenerated ticket human readable ID  */
  number?: Maybe<Scalars['Int']>;
  /**  Inhabitant/customer/person who has a problem or want to improve/order something. Not null if we have a registered client. This field indicates, that the Ticket is visible to a Resident and it has access to it. This field will be set to User of corresponding Resident in following cases: 1) the Ticket was created by Resident from mobile app;2) the Ticket was created by OrganizationEmployee with phone number, that matches some Resident;3) a Resident was registered after this Ticket was created and the Resident have the same phone number as in this Ticket, so this Ticket will be automatically connected to it.  */
  client?: Maybe<User>;
  /**  Contact, that reported issue, described in this ticket  */
  contact?: Maybe<Contact>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientName?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientEmail?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientPhone?: Maybe<Scalars['String']>;
  /**  Assignee/responsible employee/user who must ensure that the issue is fulfilled  */
  assignee?: Maybe<User>;
  /**  Executor employee/user who perform the issue  */
  executor?: Maybe<User>;
  /**  @deprecated  */
  categoryClassifier?: Maybe<TicketCategoryClassifier>;
  /**  @deprecated  */
  placeClassifier?: Maybe<TicketPlaceClassifier>;
  /**  @deprecated  */
  problemClassifier?: Maybe<TicketProblemClassifier>;
  /**  Valid combination of 3 classifiers  */
  classifier?: Maybe<TicketClassifier>;
  /**  Indicates that ticket has been classified automatically without human confirmation  */
  isAutoClassified?: Maybe<Scalars['Boolean']>;
  /**  Text description of the issue. Maybe written by a user or an operator  */
  details?: Maybe<Scalars['String']>;
  /**  Sometimes, it is important for us to show related issues. For example, to show related issues  */
  related?: Maybe<Ticket>;
  /**  Indicates the ticket is paid  */
  isPaid?: Maybe<Scalars['Boolean']>;
  /**  Indicates the ticket is emergency  */
  isEmergency?: Maybe<Scalars['Boolean']>;
  /**  Indicates the ticket is warranty  */
  isWarranty?: Maybe<Scalars['Boolean']>;
  /**  Determines who the ticket was created for: for a resident or not for a resident  */
  isResidentTicket?: Maybe<Scalars['Boolean']>;
  /**  Determines if a resident in the mobile app can see the ticket created in crm  */
  canReadByResident?: Maybe<Scalars['Boolean']>;
  /**  Extra analytics not related to remote system  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Property related to the Ticket  */
  property?: Maybe<Property>;
  /**  Address of property, which synced with property and displayed, if property is deleted  */
  propertyAddress?: Maybe<Scalars['String']>;
  /**  Address meta of property, which synced with property and used to form view of address, if property is deleted  */
  propertyAddressMeta?: Maybe<AddressMetaField>;
  /**  Section name/number of an apartment building (property). You need to take from Property.map  */
  sectionName?: Maybe<Scalars['String']>;
  /**  Type of section, such as parking or section  */
  sectionType?: Maybe<Scalars['String']>;
  /**  Floor of an apartment building (property). You need to take from Property.map  */
  floorName?: Maybe<Scalars['String']>;
  /**  Flat number / door number of an apartment building (property). You need to take from Property.map  */
  unitName?: Maybe<Scalars['String']>;
  /**  Type of unit, such as parking lot or flat  */
  unitType?: Maybe<Scalars['String']>;
  /**  Ticket source channel/system. Examples: call, email, visit, ...  */
  source?: Maybe<TicketSource>;
  /**  In the case of remote system sync, you can store some extra analytics. Examples: email, name, phone, ...  */
  sourceMeta?: Maybe<Scalars['JSON']>;
  /**  Date until which the ticket is deferred  */
  deferredUntil?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export enum TicketAnalyticsGroupBy {
  Day = 'day',
  Week = 'week',
  Month = 'month',
  Status = 'status',
  Property = 'property',
  CategoryClassifier = 'categoryClassifier',
  Executor = 'executor',
  Assignee = 'assignee'
}

export type TicketAnalyticsNullReplaces = {
  categoryClassifier: Scalars['String'];
  executor: Scalars['String'];
  assignee: Scalars['String'];
};

export type TicketAnalyticsReportInput = {
  where: TicketWhereInput;
  groupBy?: Maybe<Array<TicketAnalyticsGroupBy>>;
  nullReplaces: TicketAnalyticsNullReplaces;
};

export type TicketAnalyticsReportOutput = {
  __typename?: 'TicketAnalyticsReportOutput';
  groups?: Maybe<Array<TicketGroupedCounter>>;
  ticketLabels?: Maybe<Array<Maybe<TicketLabel>>>;
};

/**  Describes what type of work needs to be done to fix incident  */
export type TicketCategoryClassifier = {
  __typename?: 'TicketCategoryClassifier';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketCategoryClassifier List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketCategoryClassifier List config, or
   *  3. As an alias to a 'name' field on the TicketCategoryClassifier List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketCategoryClassifier List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. If this ref is null the object is common for all organizations  */
  organization?: Maybe<Organization>;
  /**  text description  */
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketCategoryClassifierCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketCategoryClassifierHistoryRecord = {
  __typename?: 'TicketCategoryClassifierHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketCategoryClassifierHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketCategoryClassifierHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketCategoryClassifierHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketCategoryClassifierHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCategoryClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketCategoryClassifierHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCategoryClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketCategoryClassifierHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketCategoryClassifierHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCategoryClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketCategoryClassifierHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketCategoryClassifierHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketCategoryClassifierHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketCategoryClassifierHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketCategoryClassifierHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketCategoryClassifierHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketCategoryClassifierHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketCategoryClassifierHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketCategoryClassifierHistoryRecordsCreateInput = {
  data?: Maybe<TicketCategoryClassifierHistoryRecordCreateInput>;
};

export type TicketCategoryClassifierHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketCategoryClassifierHistoryRecordUpdateInput>;
};

export type TicketCategoryClassifierRelateToOneInput = {
  create?: Maybe<TicketCategoryClassifierCreateInput>;
  connect?: Maybe<TicketCategoryClassifierWhereUniqueInput>;
  disconnect?: Maybe<TicketCategoryClassifierWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type TicketCategoryClassifierUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketCategoryClassifierWhereInput = {
  AND?: Maybe<Array<Maybe<TicketCategoryClassifierWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketCategoryClassifierWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketCategoryClassifierWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketCategoryClassifiersCreateInput = {
  data?: Maybe<TicketCategoryClassifierCreateInput>;
};

export type TicketCategoryClassifiersUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketCategoryClassifierUpdateInput>;
};

/**  Incremental changes of Ticket  */
export type TicketChange = {
  __typename?: 'TicketChange';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketChange List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketChange List config, or
   *  3. As an alias to a 'name' field on the TicketChange List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketChange List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Related ticket, whose change is logged in this entity  */
  ticket?: Maybe<Ticket>;
  /**  Counter showing the number of changes `status` to `new_or_reopened`  */
  statusReopenedCounterFrom?: Maybe<Scalars['Int']>;
  /**  Counter showing the number of changes `status` to `new_or_reopened`  */
  statusReopenedCounterTo?: Maybe<Scalars['Int']>;
  /**  Review of the ticket by a resident on a 2-point scale. 0 – ticket returned, 1 – bad review, 2 – good review  */
  reviewValueFrom?: Maybe<TicketChangeReviewValueFromType>;
  /**  Review of the ticket by a resident on a 2-point scale. 0 – ticket returned, 1 – bad review, 2 – good review  */
  reviewValueTo?: Maybe<TicketChangeReviewValueToType>;
  /**  Resident's comment on ticket review  */
  reviewCommentFrom?: Maybe<Scalars['String']>;
  /**  Resident's comment on ticket review  */
  reviewCommentTo?: Maybe<Scalars['String']>;
  /**  Review of the ticket by a staff on a 2-point scale (bad or good)  */
  qualityControlValueFrom?: Maybe<TicketChangeQualityControlValueFromType>;
  /**  Review of the ticket by a staff on a 2-point scale (bad or good)  */
  qualityControlValueTo?: Maybe<TicketChangeQualityControlValueToType>;
  /**  Staff's comment on ticket review  */
  qualityControlCommentFrom?: Maybe<Scalars['String']>;
  /**  Staff's comment on ticket review  */
  qualityControlCommentTo?: Maybe<Scalars['String']>;
  /**  Quality control additional options that extend it.Options that do not match the score will be reset.  */
  qualityControlAdditionalOptionsFrom?: Maybe<Scalars['JSON']>;
  /**  Quality control additional options that extend it.Options that do not match the score will be reset.  */
  qualityControlAdditionalOptionsTo?: Maybe<Scalars['JSON']>;
  /**  Text reason for status changes. Sometimes you should describe the reason why you change the `status`  */
  statusReasonFrom?: Maybe<Scalars['String']>;
  /**  Text reason for status changes. Sometimes you should describe the reason why you change the `status`  */
  statusReasonTo?: Maybe<Scalars['String']>;
  /**  Time after which the ticket must be completed  */
  deadlineFrom?: Maybe<Scalars['String']>;
  /**  Time after which the ticket must be completed  */
  deadlineTo?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientNameFrom?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientNameTo?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientEmailFrom?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientEmailTo?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientPhoneFrom?: Maybe<Scalars['String']>;
  /**  Inhabitant/customer/person who has a problem. Sometimes we get a problem from an unregistered client, in such cases we have a null inside the `client` and just have something here. Or sometimes clients want to change it  */
  clientPhoneTo?: Maybe<Scalars['String']>;
  /**  Text description of the issue. Maybe written by a user or an operator  */
  detailsFrom?: Maybe<Scalars['String']>;
  /**  Text description of the issue. Maybe written by a user or an operator  */
  detailsTo?: Maybe<Scalars['String']>;
  /**  Indicates the ticket is paid  */
  isPaidFrom?: Maybe<Scalars['Boolean']>;
  /**  Indicates the ticket is paid  */
  isPaidTo?: Maybe<Scalars['Boolean']>;
  /**  Indicates the ticket is emergency  */
  isEmergencyFrom?: Maybe<Scalars['Boolean']>;
  /**  Indicates the ticket is emergency  */
  isEmergencyTo?: Maybe<Scalars['Boolean']>;
  /**  Indicates the ticket is warranty  */
  isWarrantyFrom?: Maybe<Scalars['Boolean']>;
  /**  Indicates the ticket is warranty  */
  isWarrantyTo?: Maybe<Scalars['Boolean']>;
  /**  Determines who the ticket was created for: for a resident or not for a resident  */
  isResidentTicketFrom?: Maybe<Scalars['Boolean']>;
  /**  Determines who the ticket was created for: for a resident or not for a resident  */
  isResidentTicketTo?: Maybe<Scalars['Boolean']>;
  /**  Determines if a resident in the mobile app can see the ticket created in crm  */
  canReadByResidentFrom?: Maybe<Scalars['Boolean']>;
  /**  Determines if a resident in the mobile app can see the ticket created in crm  */
  canReadByResidentTo?: Maybe<Scalars['Boolean']>;
  /**  Extra analytics not related to remote system  */
  metaFrom?: Maybe<Scalars['JSON']>;
  /**  Extra analytics not related to remote system  */
  metaTo?: Maybe<Scalars['JSON']>;
  /**  Address of property, which synced with property and displayed, if property is deleted  */
  propertyAddressFrom?: Maybe<Scalars['String']>;
  /**  Address of property, which synced with property and displayed, if property is deleted  */
  propertyAddressTo?: Maybe<Scalars['String']>;
  /**  Address meta of property, which synced with property and used to form view of address, if property is deleted  */
  propertyAddressMetaFrom?: Maybe<Scalars['JSON']>;
  /**  Address meta of property, which synced with property and used to form view of address, if property is deleted  */
  propertyAddressMetaTo?: Maybe<Scalars['JSON']>;
  /**  Section name/number of an apartment building (property). You need to take from Property.map  */
  sectionNameFrom?: Maybe<Scalars['String']>;
  /**  Section name/number of an apartment building (property). You need to take from Property.map  */
  sectionNameTo?: Maybe<Scalars['String']>;
  /**  Type of section, such as parking or section  */
  sectionTypeFrom?: Maybe<Scalars['String']>;
  /**  Type of section, such as parking or section  */
  sectionTypeTo?: Maybe<Scalars['String']>;
  /**  Floor of an apartment building (property). You need to take from Property.map  */
  floorNameFrom?: Maybe<Scalars['String']>;
  /**  Floor of an apartment building (property). You need to take from Property.map  */
  floorNameTo?: Maybe<Scalars['String']>;
  /**  Flat number / door number of an apartment building (property). You need to take from Property.map  */
  unitNameFrom?: Maybe<Scalars['String']>;
  /**  Flat number / door number of an apartment building (property). You need to take from Property.map  */
  unitNameTo?: Maybe<Scalars['String']>;
  /**  Type of unit, such as parking lot or flat  */
  unitTypeFrom?: Maybe<Scalars['String']>;
  /**  Type of unit, such as parking lot or flat  */
  unitTypeTo?: Maybe<Scalars['String']>;
  /**  In the case of remote system sync, you can store some extra analytics. Examples: email, name, phone, ...  */
  sourceMetaFrom?: Maybe<Scalars['JSON']>;
  /**  In the case of remote system sync, you can store some extra analytics. Examples: email, name, phone, ...  */
  sourceMetaTo?: Maybe<Scalars['JSON']>;
  /**  Date until which the ticket is deferred  */
  deferredUntilFrom?: Maybe<Scalars['String']>;
  /**  Date until which the ticket is deferred  */
  deferredUntilTo?: Maybe<Scalars['String']>;
  /**  Old id of related entity. Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organizationIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organizationIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organizationDisplayNameFrom?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organizationDisplayNameTo?: Maybe<Scalars['String']>;
  /**  Old id of related entity. Status is the step of the ticket processing workflow. Companies may have different ticket processing workflows  */
  statusIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Status is the step of the ticket processing workflow. Companies may have different ticket processing workflows  */
  statusIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Status is the step of the ticket processing workflow. Companies may have different ticket processing workflows  */
  statusDisplayNameFrom?: Maybe<Scalars['String']>;
  statusDisplayNameFromNonLocalized?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Status is the step of the ticket processing workflow. Companies may have different ticket processing workflows  */
  statusDisplayNameTo?: Maybe<Scalars['String']>;
  statusDisplayNameToNonLocalized?: Maybe<Scalars['String']>;
  /**  Old id of related entity. Inhabitant/customer/person who has a problem or want to improve/order something. Not null if we have a registered client. This field indicates, that the Ticket is visible to a Resident and it has access to it. This field will be set to User of corresponding Resident in following cases: 1) the Ticket was created by Resident from mobile app;2) the Ticket was created by OrganizationEmployee with phone number, that matches some Resident;3) a Resident was registered after this Ticket was created and the Resident have the same phone number as in this Ticket, so this Ticket will be automatically connected to it.  */
  clientIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Inhabitant/customer/person who has a problem or want to improve/order something. Not null if we have a registered client. This field indicates, that the Ticket is visible to a Resident and it has access to it. This field will be set to User of corresponding Resident in following cases: 1) the Ticket was created by Resident from mobile app;2) the Ticket was created by OrganizationEmployee with phone number, that matches some Resident;3) a Resident was registered after this Ticket was created and the Resident have the same phone number as in this Ticket, so this Ticket will be automatically connected to it.  */
  clientIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Inhabitant/customer/person who has a problem or want to improve/order something. Not null if we have a registered client. This field indicates, that the Ticket is visible to a Resident and it has access to it. This field will be set to User of corresponding Resident in following cases: 1) the Ticket was created by Resident from mobile app;2) the Ticket was created by OrganizationEmployee with phone number, that matches some Resident;3) a Resident was registered after this Ticket was created and the Resident have the same phone number as in this Ticket, so this Ticket will be automatically connected to it.  */
  clientDisplayNameFrom?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Inhabitant/customer/person who has a problem or want to improve/order something. Not null if we have a registered client. This field indicates, that the Ticket is visible to a Resident and it has access to it. This field will be set to User of corresponding Resident in following cases: 1) the Ticket was created by Resident from mobile app;2) the Ticket was created by OrganizationEmployee with phone number, that matches some Resident;3) a Resident was registered after this Ticket was created and the Resident have the same phone number as in this Ticket, so this Ticket will be automatically connected to it.  */
  clientDisplayNameTo?: Maybe<Scalars['String']>;
  /**  Old id of related entity. Contact, that reported issue, described in this ticket  */
  contactIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Contact, that reported issue, described in this ticket  */
  contactIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Contact, that reported issue, described in this ticket  */
  contactDisplayNameFrom?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Contact, that reported issue, described in this ticket  */
  contactDisplayNameTo?: Maybe<Scalars['String']>;
  /**  Old id of related entity. Assignee/responsible employee/user who must ensure that the issue is fulfilled  */
  assigneeIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Assignee/responsible employee/user who must ensure that the issue is fulfilled  */
  assigneeIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Assignee/responsible employee/user who must ensure that the issue is fulfilled  */
  assigneeDisplayNameFrom?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Assignee/responsible employee/user who must ensure that the issue is fulfilled  */
  assigneeDisplayNameTo?: Maybe<Scalars['String']>;
  /**  Old id of related entity. Executor employee/user who perform the issue  */
  executorIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Executor employee/user who perform the issue  */
  executorIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Executor employee/user who perform the issue  */
  executorDisplayNameFrom?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Executor employee/user who perform the issue  */
  executorDisplayNameTo?: Maybe<Scalars['String']>;
  /**  Old id of related entity. Valid combination of 3 classifiers  */
  classifierIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Valid combination of 3 classifiers  */
  classifierIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Valid combination of 3 classifiers  */
  classifierDisplayNameFrom?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Valid combination of 3 classifiers  */
  classifierDisplayNameTo?: Maybe<Scalars['String']>;
  /**  Old id of related entity. Sometimes, it is important for us to show related issues. For example, to show related issues  */
  relatedIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Sometimes, it is important for us to show related issues. For example, to show related issues  */
  relatedIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Sometimes, it is important for us to show related issues. For example, to show related issues  */
  relatedDisplayNameFrom?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Sometimes, it is important for us to show related issues. For example, to show related issues  */
  relatedDisplayNameTo?: Maybe<Scalars['String']>;
  /**  Old id of related entity. Property related to the Ticket  */
  propertyIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Property related to the Ticket  */
  propertyIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Property related to the Ticket  */
  propertyDisplayNameFrom?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Property related to the Ticket  */
  propertyDisplayNameTo?: Maybe<Scalars['String']>;
  /**  Old id of related entity. Ticket source channel/system. Examples: call, email, visit, ...  */
  sourceIdFrom?: Maybe<Scalars['ID']>;
  /**  New id of related entity. Ticket source channel/system. Examples: call, email, visit, ...  */
  sourceIdTo?: Maybe<Scalars['ID']>;
  /**  Old display name of related entity. Ticket source channel/system. Examples: call, email, visit, ...  */
  sourceDisplayNameFrom?: Maybe<Scalars['String']>;
  sourceDisplayNameFromNonLocalized?: Maybe<Scalars['String']>;
  /**  New display name of related entity. Ticket source channel/system. Examples: call, email, visit, ...  */
  sourceDisplayNameTo?: Maybe<Scalars['String']>;
  sourceDisplayNameToNonLocalized?: Maybe<Scalars['String']>;
  /**  Type of user who changed the ticket, can be employee role from same organization or related, resident or deleted employee  */
  changedByRole?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketChangeCreateInput = {
  ticket?: Maybe<TicketRelateToOneInput>;
  statusReopenedCounterFrom?: Maybe<Scalars['Int']>;
  statusReopenedCounterTo?: Maybe<Scalars['Int']>;
  reviewValueFrom?: Maybe<TicketChangeReviewValueFromType>;
  reviewValueTo?: Maybe<TicketChangeReviewValueToType>;
  reviewCommentFrom?: Maybe<Scalars['String']>;
  reviewCommentTo?: Maybe<Scalars['String']>;
  qualityControlValueFrom?: Maybe<TicketChangeQualityControlValueFromType>;
  qualityControlValueTo?: Maybe<TicketChangeQualityControlValueToType>;
  qualityControlCommentFrom?: Maybe<Scalars['String']>;
  qualityControlCommentTo?: Maybe<Scalars['String']>;
  qualityControlAdditionalOptionsFrom?: Maybe<Scalars['JSON']>;
  qualityControlAdditionalOptionsTo?: Maybe<Scalars['JSON']>;
  statusReasonFrom?: Maybe<Scalars['String']>;
  statusReasonTo?: Maybe<Scalars['String']>;
  deadlineFrom?: Maybe<Scalars['String']>;
  deadlineTo?: Maybe<Scalars['String']>;
  clientNameFrom?: Maybe<Scalars['String']>;
  clientNameTo?: Maybe<Scalars['String']>;
  clientEmailFrom?: Maybe<Scalars['String']>;
  clientEmailTo?: Maybe<Scalars['String']>;
  clientPhoneFrom?: Maybe<Scalars['String']>;
  clientPhoneTo?: Maybe<Scalars['String']>;
  detailsFrom?: Maybe<Scalars['String']>;
  detailsTo?: Maybe<Scalars['String']>;
  isPaidFrom?: Maybe<Scalars['Boolean']>;
  isPaidTo?: Maybe<Scalars['Boolean']>;
  isEmergencyFrom?: Maybe<Scalars['Boolean']>;
  isEmergencyTo?: Maybe<Scalars['Boolean']>;
  isWarrantyFrom?: Maybe<Scalars['Boolean']>;
  isWarrantyTo?: Maybe<Scalars['Boolean']>;
  isResidentTicketFrom?: Maybe<Scalars['Boolean']>;
  isResidentTicketTo?: Maybe<Scalars['Boolean']>;
  canReadByResidentFrom?: Maybe<Scalars['Boolean']>;
  canReadByResidentTo?: Maybe<Scalars['Boolean']>;
  metaFrom?: Maybe<Scalars['JSON']>;
  metaTo?: Maybe<Scalars['JSON']>;
  propertyAddressFrom?: Maybe<Scalars['String']>;
  propertyAddressTo?: Maybe<Scalars['String']>;
  propertyAddressMetaFrom?: Maybe<Scalars['JSON']>;
  propertyAddressMetaTo?: Maybe<Scalars['JSON']>;
  sectionNameFrom?: Maybe<Scalars['String']>;
  sectionNameTo?: Maybe<Scalars['String']>;
  sectionTypeFrom?: Maybe<Scalars['String']>;
  sectionTypeTo?: Maybe<Scalars['String']>;
  floorNameFrom?: Maybe<Scalars['String']>;
  floorNameTo?: Maybe<Scalars['String']>;
  unitNameFrom?: Maybe<Scalars['String']>;
  unitNameTo?: Maybe<Scalars['String']>;
  unitTypeFrom?: Maybe<Scalars['String']>;
  unitTypeTo?: Maybe<Scalars['String']>;
  sourceMetaFrom?: Maybe<Scalars['JSON']>;
  sourceMetaTo?: Maybe<Scalars['JSON']>;
  deferredUntilFrom?: Maybe<Scalars['String']>;
  deferredUntilTo?: Maybe<Scalars['String']>;
  organizationIdFrom?: Maybe<Scalars['ID']>;
  organizationIdTo?: Maybe<Scalars['ID']>;
  organizationDisplayNameFrom?: Maybe<Scalars['String']>;
  organizationDisplayNameTo?: Maybe<Scalars['String']>;
  statusIdFrom?: Maybe<Scalars['ID']>;
  statusIdTo?: Maybe<Scalars['ID']>;
  statusDisplayNameFrom?: Maybe<Scalars['String']>;
  statusDisplayNameTo?: Maybe<Scalars['String']>;
  clientIdFrom?: Maybe<Scalars['ID']>;
  clientIdTo?: Maybe<Scalars['ID']>;
  clientDisplayNameFrom?: Maybe<Scalars['String']>;
  clientDisplayNameTo?: Maybe<Scalars['String']>;
  contactIdFrom?: Maybe<Scalars['ID']>;
  contactIdTo?: Maybe<Scalars['ID']>;
  contactDisplayNameFrom?: Maybe<Scalars['String']>;
  contactDisplayNameTo?: Maybe<Scalars['String']>;
  assigneeIdFrom?: Maybe<Scalars['ID']>;
  assigneeIdTo?: Maybe<Scalars['ID']>;
  assigneeDisplayNameFrom?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo?: Maybe<Scalars['String']>;
  executorIdFrom?: Maybe<Scalars['ID']>;
  executorIdTo?: Maybe<Scalars['ID']>;
  executorDisplayNameFrom?: Maybe<Scalars['String']>;
  executorDisplayNameTo?: Maybe<Scalars['String']>;
  classifierIdFrom?: Maybe<Scalars['ID']>;
  classifierIdTo?: Maybe<Scalars['ID']>;
  classifierDisplayNameFrom?: Maybe<Scalars['String']>;
  classifierDisplayNameTo?: Maybe<Scalars['String']>;
  relatedIdFrom?: Maybe<Scalars['ID']>;
  relatedIdTo?: Maybe<Scalars['ID']>;
  relatedDisplayNameFrom?: Maybe<Scalars['String']>;
  relatedDisplayNameTo?: Maybe<Scalars['String']>;
  propertyIdFrom?: Maybe<Scalars['ID']>;
  propertyIdTo?: Maybe<Scalars['ID']>;
  propertyDisplayNameFrom?: Maybe<Scalars['String']>;
  propertyDisplayNameTo?: Maybe<Scalars['String']>;
  sourceIdFrom?: Maybe<Scalars['ID']>;
  sourceIdTo?: Maybe<Scalars['ID']>;
  sourceDisplayNameFrom?: Maybe<Scalars['String']>;
  sourceDisplayNameTo?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export enum TicketChangeQualityControlValueFromType {
  Bad = 'bad',
  Good = 'good'
}

export enum TicketChangeQualityControlValueToType {
  Bad = 'bad',
  Good = 'good'
}

export enum TicketChangeReviewValueFromType {
  Bad = 'bad',
  Good = 'good',
  Returned = 'returned'
}

export enum TicketChangeReviewValueToType {
  Bad = 'bad',
  Good = 'good',
  Returned = 'returned'
}

export type TicketChangeUpdateInput = {
  ticket?: Maybe<TicketRelateToOneInput>;
  statusReopenedCounterFrom?: Maybe<Scalars['Int']>;
  statusReopenedCounterTo?: Maybe<Scalars['Int']>;
  reviewValueFrom?: Maybe<TicketChangeReviewValueFromType>;
  reviewValueTo?: Maybe<TicketChangeReviewValueToType>;
  reviewCommentFrom?: Maybe<Scalars['String']>;
  reviewCommentTo?: Maybe<Scalars['String']>;
  qualityControlValueFrom?: Maybe<TicketChangeQualityControlValueFromType>;
  qualityControlValueTo?: Maybe<TicketChangeQualityControlValueToType>;
  qualityControlCommentFrom?: Maybe<Scalars['String']>;
  qualityControlCommentTo?: Maybe<Scalars['String']>;
  qualityControlAdditionalOptionsFrom?: Maybe<Scalars['JSON']>;
  qualityControlAdditionalOptionsTo?: Maybe<Scalars['JSON']>;
  statusReasonFrom?: Maybe<Scalars['String']>;
  statusReasonTo?: Maybe<Scalars['String']>;
  deadlineFrom?: Maybe<Scalars['String']>;
  deadlineTo?: Maybe<Scalars['String']>;
  clientNameFrom?: Maybe<Scalars['String']>;
  clientNameTo?: Maybe<Scalars['String']>;
  clientEmailFrom?: Maybe<Scalars['String']>;
  clientEmailTo?: Maybe<Scalars['String']>;
  clientPhoneFrom?: Maybe<Scalars['String']>;
  clientPhoneTo?: Maybe<Scalars['String']>;
  detailsFrom?: Maybe<Scalars['String']>;
  detailsTo?: Maybe<Scalars['String']>;
  isPaidFrom?: Maybe<Scalars['Boolean']>;
  isPaidTo?: Maybe<Scalars['Boolean']>;
  isEmergencyFrom?: Maybe<Scalars['Boolean']>;
  isEmergencyTo?: Maybe<Scalars['Boolean']>;
  isWarrantyFrom?: Maybe<Scalars['Boolean']>;
  isWarrantyTo?: Maybe<Scalars['Boolean']>;
  isResidentTicketFrom?: Maybe<Scalars['Boolean']>;
  isResidentTicketTo?: Maybe<Scalars['Boolean']>;
  canReadByResidentFrom?: Maybe<Scalars['Boolean']>;
  canReadByResidentTo?: Maybe<Scalars['Boolean']>;
  metaFrom?: Maybe<Scalars['JSON']>;
  metaTo?: Maybe<Scalars['JSON']>;
  propertyAddressFrom?: Maybe<Scalars['String']>;
  propertyAddressTo?: Maybe<Scalars['String']>;
  propertyAddressMetaFrom?: Maybe<Scalars['JSON']>;
  propertyAddressMetaTo?: Maybe<Scalars['JSON']>;
  sectionNameFrom?: Maybe<Scalars['String']>;
  sectionNameTo?: Maybe<Scalars['String']>;
  sectionTypeFrom?: Maybe<Scalars['String']>;
  sectionTypeTo?: Maybe<Scalars['String']>;
  floorNameFrom?: Maybe<Scalars['String']>;
  floorNameTo?: Maybe<Scalars['String']>;
  unitNameFrom?: Maybe<Scalars['String']>;
  unitNameTo?: Maybe<Scalars['String']>;
  unitTypeFrom?: Maybe<Scalars['String']>;
  unitTypeTo?: Maybe<Scalars['String']>;
  sourceMetaFrom?: Maybe<Scalars['JSON']>;
  sourceMetaTo?: Maybe<Scalars['JSON']>;
  deferredUntilFrom?: Maybe<Scalars['String']>;
  deferredUntilTo?: Maybe<Scalars['String']>;
  organizationIdFrom?: Maybe<Scalars['ID']>;
  organizationIdTo?: Maybe<Scalars['ID']>;
  organizationDisplayNameFrom?: Maybe<Scalars['String']>;
  organizationDisplayNameTo?: Maybe<Scalars['String']>;
  statusIdFrom?: Maybe<Scalars['ID']>;
  statusIdTo?: Maybe<Scalars['ID']>;
  statusDisplayNameFrom?: Maybe<Scalars['String']>;
  statusDisplayNameTo?: Maybe<Scalars['String']>;
  clientIdFrom?: Maybe<Scalars['ID']>;
  clientIdTo?: Maybe<Scalars['ID']>;
  clientDisplayNameFrom?: Maybe<Scalars['String']>;
  clientDisplayNameTo?: Maybe<Scalars['String']>;
  contactIdFrom?: Maybe<Scalars['ID']>;
  contactIdTo?: Maybe<Scalars['ID']>;
  contactDisplayNameFrom?: Maybe<Scalars['String']>;
  contactDisplayNameTo?: Maybe<Scalars['String']>;
  assigneeIdFrom?: Maybe<Scalars['ID']>;
  assigneeIdTo?: Maybe<Scalars['ID']>;
  assigneeDisplayNameFrom?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo?: Maybe<Scalars['String']>;
  executorIdFrom?: Maybe<Scalars['ID']>;
  executorIdTo?: Maybe<Scalars['ID']>;
  executorDisplayNameFrom?: Maybe<Scalars['String']>;
  executorDisplayNameTo?: Maybe<Scalars['String']>;
  classifierIdFrom?: Maybe<Scalars['ID']>;
  classifierIdTo?: Maybe<Scalars['ID']>;
  classifierDisplayNameFrom?: Maybe<Scalars['String']>;
  classifierDisplayNameTo?: Maybe<Scalars['String']>;
  relatedIdFrom?: Maybe<Scalars['ID']>;
  relatedIdTo?: Maybe<Scalars['ID']>;
  relatedDisplayNameFrom?: Maybe<Scalars['String']>;
  relatedDisplayNameTo?: Maybe<Scalars['String']>;
  propertyIdFrom?: Maybe<Scalars['ID']>;
  propertyIdTo?: Maybe<Scalars['ID']>;
  propertyDisplayNameFrom?: Maybe<Scalars['String']>;
  propertyDisplayNameTo?: Maybe<Scalars['String']>;
  sourceIdFrom?: Maybe<Scalars['ID']>;
  sourceIdTo?: Maybe<Scalars['ID']>;
  sourceDisplayNameFrom?: Maybe<Scalars['String']>;
  sourceDisplayNameTo?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketChangeWhereInput = {
  AND?: Maybe<Array<Maybe<TicketChangeWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketChangeWhereInput>>>;
  ticket?: Maybe<TicketWhereInput>;
  ticket_is_null?: Maybe<Scalars['Boolean']>;
  statusReopenedCounterFrom?: Maybe<Scalars['Int']>;
  statusReopenedCounterFrom_not?: Maybe<Scalars['Int']>;
  statusReopenedCounterFrom_lt?: Maybe<Scalars['Int']>;
  statusReopenedCounterFrom_lte?: Maybe<Scalars['Int']>;
  statusReopenedCounterFrom_gt?: Maybe<Scalars['Int']>;
  statusReopenedCounterFrom_gte?: Maybe<Scalars['Int']>;
  statusReopenedCounterFrom_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statusReopenedCounterFrom_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statusReopenedCounterTo?: Maybe<Scalars['Int']>;
  statusReopenedCounterTo_not?: Maybe<Scalars['Int']>;
  statusReopenedCounterTo_lt?: Maybe<Scalars['Int']>;
  statusReopenedCounterTo_lte?: Maybe<Scalars['Int']>;
  statusReopenedCounterTo_gt?: Maybe<Scalars['Int']>;
  statusReopenedCounterTo_gte?: Maybe<Scalars['Int']>;
  statusReopenedCounterTo_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statusReopenedCounterTo_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  reviewValueFrom?: Maybe<TicketChangeReviewValueFromType>;
  reviewValueFrom_not?: Maybe<TicketChangeReviewValueFromType>;
  reviewValueFrom_in?: Maybe<Array<Maybe<TicketChangeReviewValueFromType>>>;
  reviewValueFrom_not_in?: Maybe<Array<Maybe<TicketChangeReviewValueFromType>>>;
  reviewValueTo?: Maybe<TicketChangeReviewValueToType>;
  reviewValueTo_not?: Maybe<TicketChangeReviewValueToType>;
  reviewValueTo_in?: Maybe<Array<Maybe<TicketChangeReviewValueToType>>>;
  reviewValueTo_not_in?: Maybe<Array<Maybe<TicketChangeReviewValueToType>>>;
  reviewCommentFrom?: Maybe<Scalars['String']>;
  reviewCommentFrom_not?: Maybe<Scalars['String']>;
  reviewCommentFrom_contains?: Maybe<Scalars['String']>;
  reviewCommentFrom_not_contains?: Maybe<Scalars['String']>;
  reviewCommentFrom_starts_with?: Maybe<Scalars['String']>;
  reviewCommentFrom_not_starts_with?: Maybe<Scalars['String']>;
  reviewCommentFrom_ends_with?: Maybe<Scalars['String']>;
  reviewCommentFrom_not_ends_with?: Maybe<Scalars['String']>;
  reviewCommentFrom_i?: Maybe<Scalars['String']>;
  reviewCommentFrom_not_i?: Maybe<Scalars['String']>;
  reviewCommentFrom_contains_i?: Maybe<Scalars['String']>;
  reviewCommentFrom_not_contains_i?: Maybe<Scalars['String']>;
  reviewCommentFrom_starts_with_i?: Maybe<Scalars['String']>;
  reviewCommentFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  reviewCommentFrom_ends_with_i?: Maybe<Scalars['String']>;
  reviewCommentFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  reviewCommentFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewCommentFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewCommentTo?: Maybe<Scalars['String']>;
  reviewCommentTo_not?: Maybe<Scalars['String']>;
  reviewCommentTo_contains?: Maybe<Scalars['String']>;
  reviewCommentTo_not_contains?: Maybe<Scalars['String']>;
  reviewCommentTo_starts_with?: Maybe<Scalars['String']>;
  reviewCommentTo_not_starts_with?: Maybe<Scalars['String']>;
  reviewCommentTo_ends_with?: Maybe<Scalars['String']>;
  reviewCommentTo_not_ends_with?: Maybe<Scalars['String']>;
  reviewCommentTo_i?: Maybe<Scalars['String']>;
  reviewCommentTo_not_i?: Maybe<Scalars['String']>;
  reviewCommentTo_contains_i?: Maybe<Scalars['String']>;
  reviewCommentTo_not_contains_i?: Maybe<Scalars['String']>;
  reviewCommentTo_starts_with_i?: Maybe<Scalars['String']>;
  reviewCommentTo_not_starts_with_i?: Maybe<Scalars['String']>;
  reviewCommentTo_ends_with_i?: Maybe<Scalars['String']>;
  reviewCommentTo_not_ends_with_i?: Maybe<Scalars['String']>;
  reviewCommentTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewCommentTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlValueFrom?: Maybe<TicketChangeQualityControlValueFromType>;
  qualityControlValueFrom_not?: Maybe<TicketChangeQualityControlValueFromType>;
  qualityControlValueFrom_in?: Maybe<Array<Maybe<TicketChangeQualityControlValueFromType>>>;
  qualityControlValueFrom_not_in?: Maybe<Array<Maybe<TicketChangeQualityControlValueFromType>>>;
  qualityControlValueTo?: Maybe<TicketChangeQualityControlValueToType>;
  qualityControlValueTo_not?: Maybe<TicketChangeQualityControlValueToType>;
  qualityControlValueTo_in?: Maybe<Array<Maybe<TicketChangeQualityControlValueToType>>>;
  qualityControlValueTo_not_in?: Maybe<Array<Maybe<TicketChangeQualityControlValueToType>>>;
  qualityControlCommentFrom?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_not?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_contains?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_not_contains?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_starts_with?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_not_starts_with?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_ends_with?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_not_ends_with?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_i?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_not_i?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_contains_i?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_not_contains_i?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_starts_with_i?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_ends_with_i?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  qualityControlCommentFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlCommentFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlCommentTo?: Maybe<Scalars['String']>;
  qualityControlCommentTo_not?: Maybe<Scalars['String']>;
  qualityControlCommentTo_contains?: Maybe<Scalars['String']>;
  qualityControlCommentTo_not_contains?: Maybe<Scalars['String']>;
  qualityControlCommentTo_starts_with?: Maybe<Scalars['String']>;
  qualityControlCommentTo_not_starts_with?: Maybe<Scalars['String']>;
  qualityControlCommentTo_ends_with?: Maybe<Scalars['String']>;
  qualityControlCommentTo_not_ends_with?: Maybe<Scalars['String']>;
  qualityControlCommentTo_i?: Maybe<Scalars['String']>;
  qualityControlCommentTo_not_i?: Maybe<Scalars['String']>;
  qualityControlCommentTo_contains_i?: Maybe<Scalars['String']>;
  qualityControlCommentTo_not_contains_i?: Maybe<Scalars['String']>;
  qualityControlCommentTo_starts_with_i?: Maybe<Scalars['String']>;
  qualityControlCommentTo_not_starts_with_i?: Maybe<Scalars['String']>;
  qualityControlCommentTo_ends_with_i?: Maybe<Scalars['String']>;
  qualityControlCommentTo_not_ends_with_i?: Maybe<Scalars['String']>;
  qualityControlCommentTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlCommentTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlAdditionalOptionsFrom?: Maybe<Scalars['JSON']>;
  qualityControlAdditionalOptionsFrom_not?: Maybe<Scalars['JSON']>;
  qualityControlAdditionalOptionsFrom_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  qualityControlAdditionalOptionsFrom_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  qualityControlAdditionalOptionsTo?: Maybe<Scalars['JSON']>;
  qualityControlAdditionalOptionsTo_not?: Maybe<Scalars['JSON']>;
  qualityControlAdditionalOptionsTo_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  qualityControlAdditionalOptionsTo_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  statusReasonFrom?: Maybe<Scalars['String']>;
  statusReasonFrom_not?: Maybe<Scalars['String']>;
  statusReasonFrom_contains?: Maybe<Scalars['String']>;
  statusReasonFrom_not_contains?: Maybe<Scalars['String']>;
  statusReasonFrom_starts_with?: Maybe<Scalars['String']>;
  statusReasonFrom_not_starts_with?: Maybe<Scalars['String']>;
  statusReasonFrom_ends_with?: Maybe<Scalars['String']>;
  statusReasonFrom_not_ends_with?: Maybe<Scalars['String']>;
  statusReasonFrom_i?: Maybe<Scalars['String']>;
  statusReasonFrom_not_i?: Maybe<Scalars['String']>;
  statusReasonFrom_contains_i?: Maybe<Scalars['String']>;
  statusReasonFrom_not_contains_i?: Maybe<Scalars['String']>;
  statusReasonFrom_starts_with_i?: Maybe<Scalars['String']>;
  statusReasonFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  statusReasonFrom_ends_with_i?: Maybe<Scalars['String']>;
  statusReasonFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  statusReasonFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusReasonFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusReasonTo?: Maybe<Scalars['String']>;
  statusReasonTo_not?: Maybe<Scalars['String']>;
  statusReasonTo_contains?: Maybe<Scalars['String']>;
  statusReasonTo_not_contains?: Maybe<Scalars['String']>;
  statusReasonTo_starts_with?: Maybe<Scalars['String']>;
  statusReasonTo_not_starts_with?: Maybe<Scalars['String']>;
  statusReasonTo_ends_with?: Maybe<Scalars['String']>;
  statusReasonTo_not_ends_with?: Maybe<Scalars['String']>;
  statusReasonTo_i?: Maybe<Scalars['String']>;
  statusReasonTo_not_i?: Maybe<Scalars['String']>;
  statusReasonTo_contains_i?: Maybe<Scalars['String']>;
  statusReasonTo_not_contains_i?: Maybe<Scalars['String']>;
  statusReasonTo_starts_with_i?: Maybe<Scalars['String']>;
  statusReasonTo_not_starts_with_i?: Maybe<Scalars['String']>;
  statusReasonTo_ends_with_i?: Maybe<Scalars['String']>;
  statusReasonTo_not_ends_with_i?: Maybe<Scalars['String']>;
  statusReasonTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusReasonTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deadlineFrom?: Maybe<Scalars['String']>;
  deadlineFrom_not?: Maybe<Scalars['String']>;
  deadlineFrom_lt?: Maybe<Scalars['String']>;
  deadlineFrom_lte?: Maybe<Scalars['String']>;
  deadlineFrom_gt?: Maybe<Scalars['String']>;
  deadlineFrom_gte?: Maybe<Scalars['String']>;
  deadlineFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deadlineFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deadlineTo?: Maybe<Scalars['String']>;
  deadlineTo_not?: Maybe<Scalars['String']>;
  deadlineTo_lt?: Maybe<Scalars['String']>;
  deadlineTo_lte?: Maybe<Scalars['String']>;
  deadlineTo_gt?: Maybe<Scalars['String']>;
  deadlineTo_gte?: Maybe<Scalars['String']>;
  deadlineTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deadlineTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientNameFrom?: Maybe<Scalars['String']>;
  clientNameFrom_not?: Maybe<Scalars['String']>;
  clientNameFrom_contains?: Maybe<Scalars['String']>;
  clientNameFrom_not_contains?: Maybe<Scalars['String']>;
  clientNameFrom_starts_with?: Maybe<Scalars['String']>;
  clientNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  clientNameFrom_ends_with?: Maybe<Scalars['String']>;
  clientNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  clientNameFrom_i?: Maybe<Scalars['String']>;
  clientNameFrom_not_i?: Maybe<Scalars['String']>;
  clientNameFrom_contains_i?: Maybe<Scalars['String']>;
  clientNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  clientNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  clientNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  clientNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  clientNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  clientNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientNameTo?: Maybe<Scalars['String']>;
  clientNameTo_not?: Maybe<Scalars['String']>;
  clientNameTo_contains?: Maybe<Scalars['String']>;
  clientNameTo_not_contains?: Maybe<Scalars['String']>;
  clientNameTo_starts_with?: Maybe<Scalars['String']>;
  clientNameTo_not_starts_with?: Maybe<Scalars['String']>;
  clientNameTo_ends_with?: Maybe<Scalars['String']>;
  clientNameTo_not_ends_with?: Maybe<Scalars['String']>;
  clientNameTo_i?: Maybe<Scalars['String']>;
  clientNameTo_not_i?: Maybe<Scalars['String']>;
  clientNameTo_contains_i?: Maybe<Scalars['String']>;
  clientNameTo_not_contains_i?: Maybe<Scalars['String']>;
  clientNameTo_starts_with_i?: Maybe<Scalars['String']>;
  clientNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  clientNameTo_ends_with_i?: Maybe<Scalars['String']>;
  clientNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  clientNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmailFrom?: Maybe<Scalars['String']>;
  clientEmailFrom_not?: Maybe<Scalars['String']>;
  clientEmailFrom_contains?: Maybe<Scalars['String']>;
  clientEmailFrom_not_contains?: Maybe<Scalars['String']>;
  clientEmailFrom_starts_with?: Maybe<Scalars['String']>;
  clientEmailFrom_not_starts_with?: Maybe<Scalars['String']>;
  clientEmailFrom_ends_with?: Maybe<Scalars['String']>;
  clientEmailFrom_not_ends_with?: Maybe<Scalars['String']>;
  clientEmailFrom_i?: Maybe<Scalars['String']>;
  clientEmailFrom_not_i?: Maybe<Scalars['String']>;
  clientEmailFrom_contains_i?: Maybe<Scalars['String']>;
  clientEmailFrom_not_contains_i?: Maybe<Scalars['String']>;
  clientEmailFrom_starts_with_i?: Maybe<Scalars['String']>;
  clientEmailFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  clientEmailFrom_ends_with_i?: Maybe<Scalars['String']>;
  clientEmailFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  clientEmailFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmailFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmailTo?: Maybe<Scalars['String']>;
  clientEmailTo_not?: Maybe<Scalars['String']>;
  clientEmailTo_contains?: Maybe<Scalars['String']>;
  clientEmailTo_not_contains?: Maybe<Scalars['String']>;
  clientEmailTo_starts_with?: Maybe<Scalars['String']>;
  clientEmailTo_not_starts_with?: Maybe<Scalars['String']>;
  clientEmailTo_ends_with?: Maybe<Scalars['String']>;
  clientEmailTo_not_ends_with?: Maybe<Scalars['String']>;
  clientEmailTo_i?: Maybe<Scalars['String']>;
  clientEmailTo_not_i?: Maybe<Scalars['String']>;
  clientEmailTo_contains_i?: Maybe<Scalars['String']>;
  clientEmailTo_not_contains_i?: Maybe<Scalars['String']>;
  clientEmailTo_starts_with_i?: Maybe<Scalars['String']>;
  clientEmailTo_not_starts_with_i?: Maybe<Scalars['String']>;
  clientEmailTo_ends_with_i?: Maybe<Scalars['String']>;
  clientEmailTo_not_ends_with_i?: Maybe<Scalars['String']>;
  clientEmailTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmailTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhoneFrom?: Maybe<Scalars['String']>;
  clientPhoneFrom_not?: Maybe<Scalars['String']>;
  clientPhoneFrom_contains?: Maybe<Scalars['String']>;
  clientPhoneFrom_not_contains?: Maybe<Scalars['String']>;
  clientPhoneFrom_starts_with?: Maybe<Scalars['String']>;
  clientPhoneFrom_not_starts_with?: Maybe<Scalars['String']>;
  clientPhoneFrom_ends_with?: Maybe<Scalars['String']>;
  clientPhoneFrom_not_ends_with?: Maybe<Scalars['String']>;
  clientPhoneFrom_i?: Maybe<Scalars['String']>;
  clientPhoneFrom_not_i?: Maybe<Scalars['String']>;
  clientPhoneFrom_contains_i?: Maybe<Scalars['String']>;
  clientPhoneFrom_not_contains_i?: Maybe<Scalars['String']>;
  clientPhoneFrom_starts_with_i?: Maybe<Scalars['String']>;
  clientPhoneFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  clientPhoneFrom_ends_with_i?: Maybe<Scalars['String']>;
  clientPhoneFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  clientPhoneFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhoneFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhoneTo?: Maybe<Scalars['String']>;
  clientPhoneTo_not?: Maybe<Scalars['String']>;
  clientPhoneTo_contains?: Maybe<Scalars['String']>;
  clientPhoneTo_not_contains?: Maybe<Scalars['String']>;
  clientPhoneTo_starts_with?: Maybe<Scalars['String']>;
  clientPhoneTo_not_starts_with?: Maybe<Scalars['String']>;
  clientPhoneTo_ends_with?: Maybe<Scalars['String']>;
  clientPhoneTo_not_ends_with?: Maybe<Scalars['String']>;
  clientPhoneTo_i?: Maybe<Scalars['String']>;
  clientPhoneTo_not_i?: Maybe<Scalars['String']>;
  clientPhoneTo_contains_i?: Maybe<Scalars['String']>;
  clientPhoneTo_not_contains_i?: Maybe<Scalars['String']>;
  clientPhoneTo_starts_with_i?: Maybe<Scalars['String']>;
  clientPhoneTo_not_starts_with_i?: Maybe<Scalars['String']>;
  clientPhoneTo_ends_with_i?: Maybe<Scalars['String']>;
  clientPhoneTo_not_ends_with_i?: Maybe<Scalars['String']>;
  clientPhoneTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhoneTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailsFrom?: Maybe<Scalars['String']>;
  detailsFrom_not?: Maybe<Scalars['String']>;
  detailsFrom_contains?: Maybe<Scalars['String']>;
  detailsFrom_not_contains?: Maybe<Scalars['String']>;
  detailsFrom_starts_with?: Maybe<Scalars['String']>;
  detailsFrom_not_starts_with?: Maybe<Scalars['String']>;
  detailsFrom_ends_with?: Maybe<Scalars['String']>;
  detailsFrom_not_ends_with?: Maybe<Scalars['String']>;
  detailsFrom_i?: Maybe<Scalars['String']>;
  detailsFrom_not_i?: Maybe<Scalars['String']>;
  detailsFrom_contains_i?: Maybe<Scalars['String']>;
  detailsFrom_not_contains_i?: Maybe<Scalars['String']>;
  detailsFrom_starts_with_i?: Maybe<Scalars['String']>;
  detailsFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  detailsFrom_ends_with_i?: Maybe<Scalars['String']>;
  detailsFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  detailsFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailsFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailsTo?: Maybe<Scalars['String']>;
  detailsTo_not?: Maybe<Scalars['String']>;
  detailsTo_contains?: Maybe<Scalars['String']>;
  detailsTo_not_contains?: Maybe<Scalars['String']>;
  detailsTo_starts_with?: Maybe<Scalars['String']>;
  detailsTo_not_starts_with?: Maybe<Scalars['String']>;
  detailsTo_ends_with?: Maybe<Scalars['String']>;
  detailsTo_not_ends_with?: Maybe<Scalars['String']>;
  detailsTo_i?: Maybe<Scalars['String']>;
  detailsTo_not_i?: Maybe<Scalars['String']>;
  detailsTo_contains_i?: Maybe<Scalars['String']>;
  detailsTo_not_contains_i?: Maybe<Scalars['String']>;
  detailsTo_starts_with_i?: Maybe<Scalars['String']>;
  detailsTo_not_starts_with_i?: Maybe<Scalars['String']>;
  detailsTo_ends_with_i?: Maybe<Scalars['String']>;
  detailsTo_not_ends_with_i?: Maybe<Scalars['String']>;
  detailsTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailsTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isPaidFrom?: Maybe<Scalars['Boolean']>;
  isPaidFrom_not?: Maybe<Scalars['Boolean']>;
  isPaidTo?: Maybe<Scalars['Boolean']>;
  isPaidTo_not?: Maybe<Scalars['Boolean']>;
  isEmergencyFrom?: Maybe<Scalars['Boolean']>;
  isEmergencyFrom_not?: Maybe<Scalars['Boolean']>;
  isEmergencyTo?: Maybe<Scalars['Boolean']>;
  isEmergencyTo_not?: Maybe<Scalars['Boolean']>;
  isWarrantyFrom?: Maybe<Scalars['Boolean']>;
  isWarrantyFrom_not?: Maybe<Scalars['Boolean']>;
  isWarrantyTo?: Maybe<Scalars['Boolean']>;
  isWarrantyTo_not?: Maybe<Scalars['Boolean']>;
  isResidentTicketFrom?: Maybe<Scalars['Boolean']>;
  isResidentTicketFrom_not?: Maybe<Scalars['Boolean']>;
  isResidentTicketTo?: Maybe<Scalars['Boolean']>;
  isResidentTicketTo_not?: Maybe<Scalars['Boolean']>;
  canReadByResidentFrom?: Maybe<Scalars['Boolean']>;
  canReadByResidentFrom_not?: Maybe<Scalars['Boolean']>;
  canReadByResidentTo?: Maybe<Scalars['Boolean']>;
  canReadByResidentTo_not?: Maybe<Scalars['Boolean']>;
  metaFrom?: Maybe<Scalars['JSON']>;
  metaFrom_not?: Maybe<Scalars['JSON']>;
  metaFrom_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  metaFrom_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  metaTo?: Maybe<Scalars['JSON']>;
  metaTo_not?: Maybe<Scalars['JSON']>;
  metaTo_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  metaTo_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  propertyAddressFrom?: Maybe<Scalars['String']>;
  propertyAddressFrom_not?: Maybe<Scalars['String']>;
  propertyAddressFrom_contains?: Maybe<Scalars['String']>;
  propertyAddressFrom_not_contains?: Maybe<Scalars['String']>;
  propertyAddressFrom_starts_with?: Maybe<Scalars['String']>;
  propertyAddressFrom_not_starts_with?: Maybe<Scalars['String']>;
  propertyAddressFrom_ends_with?: Maybe<Scalars['String']>;
  propertyAddressFrom_not_ends_with?: Maybe<Scalars['String']>;
  propertyAddressFrom_i?: Maybe<Scalars['String']>;
  propertyAddressFrom_not_i?: Maybe<Scalars['String']>;
  propertyAddressFrom_contains_i?: Maybe<Scalars['String']>;
  propertyAddressFrom_not_contains_i?: Maybe<Scalars['String']>;
  propertyAddressFrom_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddressFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddressFrom_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddressFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddressFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddressFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddressTo?: Maybe<Scalars['String']>;
  propertyAddressTo_not?: Maybe<Scalars['String']>;
  propertyAddressTo_contains?: Maybe<Scalars['String']>;
  propertyAddressTo_not_contains?: Maybe<Scalars['String']>;
  propertyAddressTo_starts_with?: Maybe<Scalars['String']>;
  propertyAddressTo_not_starts_with?: Maybe<Scalars['String']>;
  propertyAddressTo_ends_with?: Maybe<Scalars['String']>;
  propertyAddressTo_not_ends_with?: Maybe<Scalars['String']>;
  propertyAddressTo_i?: Maybe<Scalars['String']>;
  propertyAddressTo_not_i?: Maybe<Scalars['String']>;
  propertyAddressTo_contains_i?: Maybe<Scalars['String']>;
  propertyAddressTo_not_contains_i?: Maybe<Scalars['String']>;
  propertyAddressTo_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddressTo_not_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddressTo_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddressTo_not_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddressTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddressTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddressMetaFrom?: Maybe<Scalars['JSON']>;
  propertyAddressMetaFrom_not?: Maybe<Scalars['JSON']>;
  propertyAddressMetaFrom_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  propertyAddressMetaFrom_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  propertyAddressMetaTo?: Maybe<Scalars['JSON']>;
  propertyAddressMetaTo_not?: Maybe<Scalars['JSON']>;
  propertyAddressMetaTo_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  propertyAddressMetaTo_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sectionNameFrom?: Maybe<Scalars['String']>;
  sectionNameFrom_not?: Maybe<Scalars['String']>;
  sectionNameFrom_contains?: Maybe<Scalars['String']>;
  sectionNameFrom_not_contains?: Maybe<Scalars['String']>;
  sectionNameFrom_starts_with?: Maybe<Scalars['String']>;
  sectionNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  sectionNameFrom_ends_with?: Maybe<Scalars['String']>;
  sectionNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  sectionNameFrom_i?: Maybe<Scalars['String']>;
  sectionNameFrom_not_i?: Maybe<Scalars['String']>;
  sectionNameFrom_contains_i?: Maybe<Scalars['String']>;
  sectionNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  sectionNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  sectionNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  sectionNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  sectionNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  sectionNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionNameTo?: Maybe<Scalars['String']>;
  sectionNameTo_not?: Maybe<Scalars['String']>;
  sectionNameTo_contains?: Maybe<Scalars['String']>;
  sectionNameTo_not_contains?: Maybe<Scalars['String']>;
  sectionNameTo_starts_with?: Maybe<Scalars['String']>;
  sectionNameTo_not_starts_with?: Maybe<Scalars['String']>;
  sectionNameTo_ends_with?: Maybe<Scalars['String']>;
  sectionNameTo_not_ends_with?: Maybe<Scalars['String']>;
  sectionNameTo_i?: Maybe<Scalars['String']>;
  sectionNameTo_not_i?: Maybe<Scalars['String']>;
  sectionNameTo_contains_i?: Maybe<Scalars['String']>;
  sectionNameTo_not_contains_i?: Maybe<Scalars['String']>;
  sectionNameTo_starts_with_i?: Maybe<Scalars['String']>;
  sectionNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  sectionNameTo_ends_with_i?: Maybe<Scalars['String']>;
  sectionNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  sectionNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionTypeFrom?: Maybe<Scalars['String']>;
  sectionTypeFrom_not?: Maybe<Scalars['String']>;
  sectionTypeFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionTypeFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionTypeTo?: Maybe<Scalars['String']>;
  sectionTypeTo_not?: Maybe<Scalars['String']>;
  sectionTypeTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionTypeTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floorNameFrom?: Maybe<Scalars['String']>;
  floorNameFrom_not?: Maybe<Scalars['String']>;
  floorNameFrom_contains?: Maybe<Scalars['String']>;
  floorNameFrom_not_contains?: Maybe<Scalars['String']>;
  floorNameFrom_starts_with?: Maybe<Scalars['String']>;
  floorNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  floorNameFrom_ends_with?: Maybe<Scalars['String']>;
  floorNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  floorNameFrom_i?: Maybe<Scalars['String']>;
  floorNameFrom_not_i?: Maybe<Scalars['String']>;
  floorNameFrom_contains_i?: Maybe<Scalars['String']>;
  floorNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  floorNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  floorNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  floorNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  floorNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  floorNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floorNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floorNameTo?: Maybe<Scalars['String']>;
  floorNameTo_not?: Maybe<Scalars['String']>;
  floorNameTo_contains?: Maybe<Scalars['String']>;
  floorNameTo_not_contains?: Maybe<Scalars['String']>;
  floorNameTo_starts_with?: Maybe<Scalars['String']>;
  floorNameTo_not_starts_with?: Maybe<Scalars['String']>;
  floorNameTo_ends_with?: Maybe<Scalars['String']>;
  floorNameTo_not_ends_with?: Maybe<Scalars['String']>;
  floorNameTo_i?: Maybe<Scalars['String']>;
  floorNameTo_not_i?: Maybe<Scalars['String']>;
  floorNameTo_contains_i?: Maybe<Scalars['String']>;
  floorNameTo_not_contains_i?: Maybe<Scalars['String']>;
  floorNameTo_starts_with_i?: Maybe<Scalars['String']>;
  floorNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  floorNameTo_ends_with_i?: Maybe<Scalars['String']>;
  floorNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  floorNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floorNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitNameFrom?: Maybe<Scalars['String']>;
  unitNameFrom_not?: Maybe<Scalars['String']>;
  unitNameFrom_contains?: Maybe<Scalars['String']>;
  unitNameFrom_not_contains?: Maybe<Scalars['String']>;
  unitNameFrom_starts_with?: Maybe<Scalars['String']>;
  unitNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  unitNameFrom_ends_with?: Maybe<Scalars['String']>;
  unitNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  unitNameFrom_i?: Maybe<Scalars['String']>;
  unitNameFrom_not_i?: Maybe<Scalars['String']>;
  unitNameFrom_contains_i?: Maybe<Scalars['String']>;
  unitNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  unitNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  unitNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  unitNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  unitNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  unitNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitNameTo?: Maybe<Scalars['String']>;
  unitNameTo_not?: Maybe<Scalars['String']>;
  unitNameTo_contains?: Maybe<Scalars['String']>;
  unitNameTo_not_contains?: Maybe<Scalars['String']>;
  unitNameTo_starts_with?: Maybe<Scalars['String']>;
  unitNameTo_not_starts_with?: Maybe<Scalars['String']>;
  unitNameTo_ends_with?: Maybe<Scalars['String']>;
  unitNameTo_not_ends_with?: Maybe<Scalars['String']>;
  unitNameTo_i?: Maybe<Scalars['String']>;
  unitNameTo_not_i?: Maybe<Scalars['String']>;
  unitNameTo_contains_i?: Maybe<Scalars['String']>;
  unitNameTo_not_contains_i?: Maybe<Scalars['String']>;
  unitNameTo_starts_with_i?: Maybe<Scalars['String']>;
  unitNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  unitNameTo_ends_with_i?: Maybe<Scalars['String']>;
  unitNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  unitNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitTypeFrom?: Maybe<Scalars['String']>;
  unitTypeFrom_not?: Maybe<Scalars['String']>;
  unitTypeFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitTypeFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitTypeTo?: Maybe<Scalars['String']>;
  unitTypeTo_not?: Maybe<Scalars['String']>;
  unitTypeTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitTypeTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sourceMetaFrom?: Maybe<Scalars['JSON']>;
  sourceMetaFrom_not?: Maybe<Scalars['JSON']>;
  sourceMetaFrom_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sourceMetaFrom_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sourceMetaTo?: Maybe<Scalars['JSON']>;
  sourceMetaTo_not?: Maybe<Scalars['JSON']>;
  sourceMetaTo_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sourceMetaTo_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  deferredUntilFrom?: Maybe<Scalars['String']>;
  deferredUntilFrom_not?: Maybe<Scalars['String']>;
  deferredUntilFrom_lt?: Maybe<Scalars['String']>;
  deferredUntilFrom_lte?: Maybe<Scalars['String']>;
  deferredUntilFrom_gt?: Maybe<Scalars['String']>;
  deferredUntilFrom_gte?: Maybe<Scalars['String']>;
  deferredUntilFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deferredUntilFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deferredUntilTo?: Maybe<Scalars['String']>;
  deferredUntilTo_not?: Maybe<Scalars['String']>;
  deferredUntilTo_lt?: Maybe<Scalars['String']>;
  deferredUntilTo_lte?: Maybe<Scalars['String']>;
  deferredUntilTo_gt?: Maybe<Scalars['String']>;
  deferredUntilTo_gte?: Maybe<Scalars['String']>;
  deferredUntilTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deferredUntilTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationIdFrom?: Maybe<Scalars['ID']>;
  organizationIdFrom_not?: Maybe<Scalars['ID']>;
  organizationIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  organizationIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  organizationIdTo?: Maybe<Scalars['ID']>;
  organizationIdTo_not?: Maybe<Scalars['ID']>;
  organizationIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  organizationIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  organizationDisplayNameFrom?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationDisplayNameTo?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_contains?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  organizationDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusIdFrom?: Maybe<Scalars['ID']>;
  statusIdFrom_not?: Maybe<Scalars['ID']>;
  statusIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  statusIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  statusIdTo?: Maybe<Scalars['ID']>;
  statusIdTo_not?: Maybe<Scalars['ID']>;
  statusIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  statusIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  statusDisplayNameFrom?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_not?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_i?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  statusDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusDisplayNameTo?: Maybe<Scalars['String']>;
  statusDisplayNameTo_not?: Maybe<Scalars['String']>;
  statusDisplayNameTo_contains?: Maybe<Scalars['String']>;
  statusDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  statusDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  statusDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  statusDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  statusDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  statusDisplayNameTo_i?: Maybe<Scalars['String']>;
  statusDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  statusDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  statusDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  statusDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  statusDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  statusDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  statusDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  statusDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientIdFrom?: Maybe<Scalars['ID']>;
  clientIdFrom_not?: Maybe<Scalars['ID']>;
  clientIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  clientIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  clientIdTo?: Maybe<Scalars['ID']>;
  clientIdTo_not?: Maybe<Scalars['ID']>;
  clientIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  clientIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  clientDisplayNameFrom?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_not?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_i?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  clientDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientDisplayNameTo?: Maybe<Scalars['String']>;
  clientDisplayNameTo_not?: Maybe<Scalars['String']>;
  clientDisplayNameTo_contains?: Maybe<Scalars['String']>;
  clientDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  clientDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  clientDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  clientDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  clientDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  clientDisplayNameTo_i?: Maybe<Scalars['String']>;
  clientDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  clientDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  clientDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  clientDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  clientDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  clientDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  clientDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  clientDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactIdFrom?: Maybe<Scalars['ID']>;
  contactIdFrom_not?: Maybe<Scalars['ID']>;
  contactIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  contactIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  contactIdTo?: Maybe<Scalars['ID']>;
  contactIdTo_not?: Maybe<Scalars['ID']>;
  contactIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  contactIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  contactDisplayNameFrom?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_not?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_i?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  contactDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactDisplayNameTo?: Maybe<Scalars['String']>;
  contactDisplayNameTo_not?: Maybe<Scalars['String']>;
  contactDisplayNameTo_contains?: Maybe<Scalars['String']>;
  contactDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  contactDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  contactDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  contactDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  contactDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  contactDisplayNameTo_i?: Maybe<Scalars['String']>;
  contactDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  contactDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  contactDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  contactDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  contactDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  contactDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  contactDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  contactDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeIdFrom?: Maybe<Scalars['ID']>;
  assigneeIdFrom_not?: Maybe<Scalars['ID']>;
  assigneeIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  assigneeIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  assigneeIdTo?: Maybe<Scalars['ID']>;
  assigneeIdTo_not?: Maybe<Scalars['ID']>;
  assigneeIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  assigneeIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  assigneeDisplayNameFrom?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_not?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeDisplayNameTo?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_not?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_contains?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  assigneeDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  executorIdFrom?: Maybe<Scalars['ID']>;
  executorIdFrom_not?: Maybe<Scalars['ID']>;
  executorIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  executorIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  executorIdTo?: Maybe<Scalars['ID']>;
  executorIdTo_not?: Maybe<Scalars['ID']>;
  executorIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  executorIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  executorDisplayNameFrom?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_not?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_i?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  executorDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  executorDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  executorDisplayNameTo?: Maybe<Scalars['String']>;
  executorDisplayNameTo_not?: Maybe<Scalars['String']>;
  executorDisplayNameTo_contains?: Maybe<Scalars['String']>;
  executorDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  executorDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  executorDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  executorDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  executorDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  executorDisplayNameTo_i?: Maybe<Scalars['String']>;
  executorDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  executorDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  executorDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  executorDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  executorDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  executorDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  executorDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  executorDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  executorDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  classifierIdFrom?: Maybe<Scalars['ID']>;
  classifierIdFrom_not?: Maybe<Scalars['ID']>;
  classifierIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  classifierIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  classifierIdTo?: Maybe<Scalars['ID']>;
  classifierIdTo_not?: Maybe<Scalars['ID']>;
  classifierIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  classifierIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  classifierDisplayNameFrom?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_not?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_i?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  classifierDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  classifierDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  classifierDisplayNameTo?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_not?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_contains?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_i?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  classifierDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  classifierDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  relatedIdFrom?: Maybe<Scalars['ID']>;
  relatedIdFrom_not?: Maybe<Scalars['ID']>;
  relatedIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  relatedIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  relatedIdTo?: Maybe<Scalars['ID']>;
  relatedIdTo_not?: Maybe<Scalars['ID']>;
  relatedIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  relatedIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  relatedDisplayNameFrom?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_not?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_i?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  relatedDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  relatedDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  relatedDisplayNameTo?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_not?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_contains?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_i?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  relatedDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  relatedDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyIdFrom?: Maybe<Scalars['ID']>;
  propertyIdFrom_not?: Maybe<Scalars['ID']>;
  propertyIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  propertyIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  propertyIdTo?: Maybe<Scalars['ID']>;
  propertyIdTo_not?: Maybe<Scalars['ID']>;
  propertyIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  propertyIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  propertyDisplayNameFrom?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_not?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_i?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  propertyDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyDisplayNameTo?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_not?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_contains?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_i?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  propertyDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sourceIdFrom?: Maybe<Scalars['ID']>;
  sourceIdFrom_not?: Maybe<Scalars['ID']>;
  sourceIdFrom_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  sourceIdFrom_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  sourceIdTo?: Maybe<Scalars['ID']>;
  sourceIdTo_not?: Maybe<Scalars['ID']>;
  sourceIdTo_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  sourceIdTo_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  sourceDisplayNameFrom?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_not?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_contains?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_not_contains?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_starts_with?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_not_starts_with?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_ends_with?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_not_ends_with?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_i?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_not_i?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_contains_i?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_not_contains_i?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_starts_with_i?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_not_starts_with_i?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_ends_with_i?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_not_ends_with_i?: Maybe<Scalars['String']>;
  sourceDisplayNameFrom_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sourceDisplayNameFrom_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sourceDisplayNameTo?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_not?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_contains?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_not_contains?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_starts_with?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_not_starts_with?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_ends_with?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_not_ends_with?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_i?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_not_i?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_contains_i?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_not_contains_i?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_starts_with_i?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_not_starts_with_i?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_ends_with_i?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_not_ends_with_i?: Maybe<Scalars['String']>;
  sourceDisplayNameTo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sourceDisplayNameTo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketChangeWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketChangesCreateInput = {
  data?: Maybe<TicketChangeCreateInput>;
};

export type TicketChangesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketChangeUpdateInput>;
};

/**  Rules for all possible valid combinations of classifiers  */
export type TicketClassifier = {
  __typename?: 'TicketClassifier';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketClassifier List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketClassifier List config, or
   *  3. As an alias to a 'name' field on the TicketClassifier List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketClassifier List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. If this ref is null the object is common for all organizations  */
  organization?: Maybe<Organization>;
  /**  Location of incident  */
  place?: Maybe<TicketPlaceClassifier>;
  /**  Type of work to fix incident  */
  category?: Maybe<TicketCategoryClassifier>;
  /**  What needs to be done  */
  problem?: Maybe<TicketProblemClassifier>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketClassifierCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  place?: Maybe<TicketPlaceClassifierRelateToOneInput>;
  category?: Maybe<TicketCategoryClassifierRelateToOneInput>;
  problem?: Maybe<TicketProblemClassifierRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketClassifierHistoryRecord = {
  __typename?: 'TicketClassifierHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketClassifierHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketClassifierHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketClassifierHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketClassifierHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  problem?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketClassifierHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  problem?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketClassifierHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketClassifierHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  place?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  problem?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketClassifierHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketClassifierHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketClassifierHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  place?: Maybe<Scalars['String']>;
  place_not?: Maybe<Scalars['String']>;
  place_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  place_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category?: Maybe<Scalars['String']>;
  category_not?: Maybe<Scalars['String']>;
  category_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  category_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  problem?: Maybe<Scalars['String']>;
  problem_not?: Maybe<Scalars['String']>;
  problem_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  problem_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketClassifierHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketClassifierHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketClassifierHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketClassifierHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketClassifierHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketClassifierHistoryRecordsCreateInput = {
  data?: Maybe<TicketClassifierHistoryRecordCreateInput>;
};

export type TicketClassifierHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketClassifierHistoryRecordUpdateInput>;
};

export type TicketClassifierRelateToOneInput = {
  create?: Maybe<TicketClassifierCreateInput>;
  connect?: Maybe<TicketClassifierWhereUniqueInput>;
  disconnect?: Maybe<TicketClassifierWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type TicketClassifierUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  place?: Maybe<TicketPlaceClassifierRelateToOneInput>;
  category?: Maybe<TicketCategoryClassifierRelateToOneInput>;
  problem?: Maybe<TicketProblemClassifierRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketClassifierWhereInput = {
  AND?: Maybe<Array<Maybe<TicketClassifierWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketClassifierWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  place?: Maybe<TicketPlaceClassifierWhereInput>;
  place_is_null?: Maybe<Scalars['Boolean']>;
  category?: Maybe<TicketCategoryClassifierWhereInput>;
  category_is_null?: Maybe<Scalars['Boolean']>;
  problem?: Maybe<TicketProblemClassifierWhereInput>;
  problem_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketClassifierWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketClassifiersCreateInput = {
  data?: Maybe<TicketClassifierCreateInput>;
};

export type TicketClassifiersUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketClassifierUpdateInput>;
};

/**  Textual comment for tickets  */
export type TicketComment = {
  __typename?: 'TicketComment';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketComment List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketComment List config, or
   *  3. As an alias to a 'name' field on the TicketComment List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketComment List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Comment type (internal for an organization or with a resident)  */
  type?: Maybe<Scalars['String']>;
  /**  Related ticket of the comment  */
  ticket?: Maybe<Ticket>;
  /**  User, who created the comment  */
  user?: Maybe<User>;
  /**  Plain text content  */
  content?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketCommentCreateInput = {
  type?: Maybe<Scalars['String']>;
  ticket?: Maybe<TicketRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  content?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  File attached to the ticket comment  */
export type TicketCommentFile = {
  __typename?: 'TicketCommentFile';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketCommentFile List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketCommentFile List config, or
   *  3. As an alias to a 'name' field on the TicketCommentFile List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketCommentFile List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  File object with meta information and publicUrl  */
  file?: Maybe<File>;
  /**  Link to ticket  */
  ticket?: Maybe<Ticket>;
  /**  Link to ticket comment  */
  ticketComment?: Maybe<TicketComment>;
  /**  Ref to the organization. It is filled in on the server and is read-only  */
  organization?: Maybe<Organization>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketCommentFileCreateInput = {
  file?: Maybe<Scalars['Upload']>;
  ticket?: Maybe<TicketRelateToOneInput>;
  ticketComment?: Maybe<TicketCommentRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketCommentFileHistoryRecord = {
  __typename?: 'TicketCommentFileHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketCommentFileHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketCommentFileHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketCommentFileHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketCommentFileHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  file?: Maybe<Scalars['JSON']>;
  ticket?: Maybe<Scalars['String']>;
  ticketComment?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCommentFileHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketCommentFileHistoryRecordCreateInput = {
  file?: Maybe<Scalars['JSON']>;
  ticket?: Maybe<Scalars['String']>;
  ticketComment?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCommentFileHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketCommentFileHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketCommentFileHistoryRecordUpdateInput = {
  file?: Maybe<Scalars['JSON']>;
  ticket?: Maybe<Scalars['String']>;
  ticketComment?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCommentFileHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketCommentFileHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketCommentFileHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketCommentFileHistoryRecordWhereInput>>>;
  file?: Maybe<Scalars['JSON']>;
  file_not?: Maybe<Scalars['JSON']>;
  file_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  ticket?: Maybe<Scalars['String']>;
  ticket_not?: Maybe<Scalars['String']>;
  ticket_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketComment?: Maybe<Scalars['String']>;
  ticketComment_not?: Maybe<Scalars['String']>;
  ticketComment_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketComment_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketCommentFileHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketCommentFileHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketCommentFileHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketCommentFileHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketCommentFileHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketCommentFileHistoryRecordsCreateInput = {
  data?: Maybe<TicketCommentFileHistoryRecordCreateInput>;
};

export type TicketCommentFileHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentFileHistoryRecordUpdateInput>;
};

export type TicketCommentFileUpdateInput = {
  file?: Maybe<Scalars['Upload']>;
  ticket?: Maybe<TicketRelateToOneInput>;
  ticketComment?: Maybe<TicketCommentRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketCommentFileWhereInput = {
  AND?: Maybe<Array<Maybe<TicketCommentFileWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketCommentFileWhereInput>>>;
  file?: Maybe<Scalars['String']>;
  file_not?: Maybe<Scalars['String']>;
  file_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket?: Maybe<TicketWhereInput>;
  ticket_is_null?: Maybe<Scalars['Boolean']>;
  ticketComment?: Maybe<TicketCommentWhereInput>;
  ticketComment_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketCommentFileWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketCommentFilesCreateInput = {
  data?: Maybe<TicketCommentFileCreateInput>;
};

export type TicketCommentFilesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentFileUpdateInput>;
};

/**  A keystone list  */
export type TicketCommentHistoryRecord = {
  __typename?: 'TicketCommentHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketCommentHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketCommentHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketCommentHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketCommentHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCommentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketCommentHistoryRecordCreateInput = {
  type?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCommentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketCommentHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketCommentHistoryRecordUpdateInput = {
  type?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCommentHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketCommentHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketCommentHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketCommentHistoryRecordWhereInput>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket?: Maybe<Scalars['String']>;
  ticket_not?: Maybe<Scalars['String']>;
  ticket_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  content?: Maybe<Scalars['String']>;
  content_not?: Maybe<Scalars['String']>;
  content_contains?: Maybe<Scalars['String']>;
  content_not_contains?: Maybe<Scalars['String']>;
  content_starts_with?: Maybe<Scalars['String']>;
  content_not_starts_with?: Maybe<Scalars['String']>;
  content_ends_with?: Maybe<Scalars['String']>;
  content_not_ends_with?: Maybe<Scalars['String']>;
  content_i?: Maybe<Scalars['String']>;
  content_not_i?: Maybe<Scalars['String']>;
  content_contains_i?: Maybe<Scalars['String']>;
  content_not_contains_i?: Maybe<Scalars['String']>;
  content_starts_with_i?: Maybe<Scalars['String']>;
  content_not_starts_with_i?: Maybe<Scalars['String']>;
  content_ends_with_i?: Maybe<Scalars['String']>;
  content_not_ends_with_i?: Maybe<Scalars['String']>;
  content_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketCommentHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketCommentHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketCommentHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketCommentHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketCommentHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketCommentHistoryRecordsCreateInput = {
  data?: Maybe<TicketCommentHistoryRecordCreateInput>;
};

export type TicketCommentHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentHistoryRecordUpdateInput>;
};

export type TicketCommentRelateToOneInput = {
  create?: Maybe<TicketCommentCreateInput>;
  connect?: Maybe<TicketCommentWhereUniqueInput>;
  disconnect?: Maybe<TicketCommentWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type TicketCommentUpdateInput = {
  type?: Maybe<Scalars['String']>;
  ticket?: Maybe<TicketRelateToOneInput>;
  user?: Maybe<UserRelateToOneInput>;
  content?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketCommentWhereInput = {
  AND?: Maybe<Array<Maybe<TicketCommentWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketCommentWhereInput>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket?: Maybe<TicketWhereInput>;
  ticket_is_null?: Maybe<Scalars['Boolean']>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  content?: Maybe<Scalars['String']>;
  content_not?: Maybe<Scalars['String']>;
  content_contains?: Maybe<Scalars['String']>;
  content_not_contains?: Maybe<Scalars['String']>;
  content_starts_with?: Maybe<Scalars['String']>;
  content_not_starts_with?: Maybe<Scalars['String']>;
  content_ends_with?: Maybe<Scalars['String']>;
  content_not_ends_with?: Maybe<Scalars['String']>;
  content_i?: Maybe<Scalars['String']>;
  content_not_i?: Maybe<Scalars['String']>;
  content_contains_i?: Maybe<Scalars['String']>;
  content_not_contains_i?: Maybe<Scalars['String']>;
  content_starts_with_i?: Maybe<Scalars['String']>;
  content_not_starts_with_i?: Maybe<Scalars['String']>;
  content_ends_with_i?: Maybe<Scalars['String']>;
  content_not_ends_with_i?: Maybe<Scalars['String']>;
  content_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketCommentWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketCommentsCreateInput = {
  data?: Maybe<TicketCommentCreateInput>;
};

/**  The time of the last comment and the last comment of the resident in a specific ticket  */
export type TicketCommentsTime = {
  __typename?: 'TicketCommentsTime';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketCommentsTime List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketCommentsTime List config, or
   *  3. As an alias to a 'name' field on the TicketCommentsTime List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketCommentsTime List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Link to the ticket  */
  ticket?: Maybe<Ticket>;
  /**  Time of last comment with resident type in this ticket  */
  lastCommentAt?: Maybe<Scalars['String']>;
  /**  Time of last comment with resident user in this ticket  */
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  /**  Ref to the organization. It is filled in on the server and is read-only  */
  organization?: Maybe<Organization>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketCommentsTimeCreateInput = {
  ticket?: Maybe<TicketRelateToOneInput>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketCommentsTimeHistoryRecord = {
  __typename?: 'TicketCommentsTimeHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketCommentsTimeHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketCommentsTimeHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketCommentsTimeHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketCommentsTimeHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCommentsTimeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketCommentsTimeHistoryRecordCreateInput = {
  ticket?: Maybe<Scalars['String']>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCommentsTimeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketCommentsTimeHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketCommentsTimeHistoryRecordUpdateInput = {
  ticket?: Maybe<Scalars['String']>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketCommentsTimeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketCommentsTimeHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketCommentsTimeHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketCommentsTimeHistoryRecordWhereInput>>>;
  ticket?: Maybe<Scalars['String']>;
  ticket_not?: Maybe<Scalars['String']>;
  ticket_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastCommentAt_not?: Maybe<Scalars['String']>;
  lastCommentAt_lt?: Maybe<Scalars['String']>;
  lastCommentAt_lte?: Maybe<Scalars['String']>;
  lastCommentAt_gt?: Maybe<Scalars['String']>;
  lastCommentAt_gte?: Maybe<Scalars['String']>;
  lastCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_not?: Maybe<Scalars['String']>;
  lastResidentCommentAt_lt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_lte?: Maybe<Scalars['String']>;
  lastResidentCommentAt_gt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_gte?: Maybe<Scalars['String']>;
  lastResidentCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastResidentCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketCommentsTimeHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketCommentsTimeHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketCommentsTimeHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketCommentsTimeHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketCommentsTimeHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketCommentsTimeHistoryRecordsCreateInput = {
  data?: Maybe<TicketCommentsTimeHistoryRecordCreateInput>;
};

export type TicketCommentsTimeHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentsTimeHistoryRecordUpdateInput>;
};

export type TicketCommentsTimeUpdateInput = {
  ticket?: Maybe<TicketRelateToOneInput>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketCommentsTimeWhereInput = {
  AND?: Maybe<Array<Maybe<TicketCommentsTimeWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketCommentsTimeWhereInput>>>;
  ticket?: Maybe<TicketWhereInput>;
  ticket_is_null?: Maybe<Scalars['Boolean']>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastCommentAt_not?: Maybe<Scalars['String']>;
  lastCommentAt_lt?: Maybe<Scalars['String']>;
  lastCommentAt_lte?: Maybe<Scalars['String']>;
  lastCommentAt_gt?: Maybe<Scalars['String']>;
  lastCommentAt_gte?: Maybe<Scalars['String']>;
  lastCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_not?: Maybe<Scalars['String']>;
  lastResidentCommentAt_lt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_lte?: Maybe<Scalars['String']>;
  lastResidentCommentAt_gt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_gte?: Maybe<Scalars['String']>;
  lastResidentCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastResidentCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketCommentsTimeWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketCommentsTimesCreateInput = {
  data?: Maybe<TicketCommentsTimeCreateInput>;
};

export type TicketCommentsTimesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentsTimeUpdateInput>;
};

export type TicketCommentsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketCommentUpdateInput>;
};

export type TicketCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  statusReopenedCounter?: Maybe<Scalars['Int']>;
  reviewValue?: Maybe<TicketReviewValueType>;
  reviewComment?: Maybe<Scalars['String']>;
  qualityControlValue?: Maybe<TicketQualityControlValueType>;
  qualityControlComment?: Maybe<Scalars['String']>;
  qualityControlAdditionalOptions?: Maybe<Array<Maybe<QualityControlAdditionalOptionsType>>>;
  qualityControlUpdatedAt?: Maybe<Scalars['String']>;
  qualityControlUpdatedBy?: Maybe<UserRelateToOneInput>;
  statusUpdatedAt?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['String']>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  statusReason?: Maybe<Scalars['String']>;
  status?: Maybe<TicketStatusRelateToOneInput>;
  deadline?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  client?: Maybe<UserRelateToOneInput>;
  contact?: Maybe<ContactRelateToOneInput>;
  clientName?: Maybe<Scalars['String']>;
  clientEmail?: Maybe<Scalars['String']>;
  clientPhone?: Maybe<Scalars['String']>;
  assignee?: Maybe<UserRelateToOneInput>;
  executor?: Maybe<UserRelateToOneInput>;
  categoryClassifier?: Maybe<TicketCategoryClassifierRelateToOneInput>;
  placeClassifier?: Maybe<TicketPlaceClassifierRelateToOneInput>;
  problemClassifier?: Maybe<TicketProblemClassifierRelateToOneInput>;
  classifier?: Maybe<TicketClassifierRelateToOneInput>;
  isAutoClassified?: Maybe<Scalars['Boolean']>;
  details?: Maybe<Scalars['String']>;
  related?: Maybe<TicketRelateToOneInput>;
  isPaid?: Maybe<Scalars['Boolean']>;
  isEmergency?: Maybe<Scalars['Boolean']>;
  isWarranty?: Maybe<Scalars['Boolean']>;
  isResidentTicket?: Maybe<Scalars['Boolean']>;
  canReadByResident?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  property?: Maybe<PropertyRelateToOneInput>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  sectionName?: Maybe<Scalars['String']>;
  sectionType?: Maybe<Scalars['String']>;
  floorName?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  source?: Maybe<TicketSourceRelateToOneInput>;
  sourceMeta?: Maybe<Scalars['JSON']>;
  deferredUntil?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketExportOptions = {
  __typename?: 'TicketExportOptions';
  commentIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  haveAllComments?: Maybe<Scalars['Boolean']>;
  haveListCompletedWorks?: Maybe<Scalars['Boolean']>;
  haveConsumedMaterials?: Maybe<Scalars['Boolean']>;
  haveTotalCostWork?: Maybe<Scalars['Boolean']>;
};

export type TicketExportOptionsInput = {
  commentIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  haveAllComments?: Maybe<Scalars['Boolean']>;
  haveListCompletedWorks?: Maybe<Scalars['Boolean']>;
  haveConsumedMaterials?: Maybe<Scalars['Boolean']>;
  haveTotalCostWork?: Maybe<Scalars['Boolean']>;
};

/**  Stores requested export format, status of export job, link to exported file and information about progress of export job  */
export type TicketExportTask = {
  __typename?: 'TicketExportTask';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketExportTask List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketExportTask List config, or
   *  3. As an alias to a 'name' field on the TicketExportTask List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketExportTask List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Status of export job  */
  status?: Maybe<TicketExportTaskStatusType>;
  /**  Requested export file format  */
  format?: Maybe<TicketExportTaskFormatType>;
  /**  How many records at the moment are exported  */
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  /**  Total records to export that will be determined at server side in export operation  */
  totalRecordsCount?: Maybe<Scalars['Int']>;
  /**  Meta information about file, saved outside of database somewhere. Shape of meta information JSON object is specific to file adapter, used by saving a file.  */
  file?: Maybe<File>;
  /**  Stores information about query and ids of exported and failed records  */
  meta?: Maybe<Scalars['JSON']>;
  /**  Filtering conditions for records to export  */
  where?: Maybe<Scalars['JSON']>;
  /**  Sorting parameters for records to export  */
  sortBy?: Maybe<Scalars['JSON']>;
  /**  Requested export locale, in that the resulting file will be rendered  */
  locale?: Maybe<Scalars['String']>;
  /**  To requested timeZone all datetime fields will be converted  */
  timeZone?: Maybe<Scalars['String']>;
  /**  User that requested this exporting operation. Will be used for read access checks to display all exported tasks somewhere and to display progress indicator of ongoing exporting task for current user  */
  user?: Maybe<User>;
  /**  Options for exporting tickets into PDF format  */
  options?: Maybe<TicketExportOptions>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketExportTaskCreateInput = {
  status?: Maybe<TicketExportTaskStatusType>;
  format?: Maybe<TicketExportTaskFormatType>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['Upload']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<UserRelateToOneInput>;
  options?: Maybe<TicketExportOptionsInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export enum TicketExportTaskFormatType {
  Excel = 'excel',
  Pdf = 'pdf'
}

/**  A keystone list  */
export type TicketExportTaskHistoryRecord = {
  __typename?: 'TicketExportTaskHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketExportTaskHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketExportTaskHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketExportTaskHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketExportTaskHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  options?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketExportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketExportTaskHistoryRecordCreateInput = {
  status?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  options?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketExportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketExportTaskHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketExportTaskHistoryRecordUpdateInput = {
  status?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['String']>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  options?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketExportTaskHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketExportTaskHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketExportTaskHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketExportTaskHistoryRecordWhereInput>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_contains?: Maybe<Scalars['String']>;
  status_not_contains?: Maybe<Scalars['String']>;
  status_starts_with?: Maybe<Scalars['String']>;
  status_not_starts_with?: Maybe<Scalars['String']>;
  status_ends_with?: Maybe<Scalars['String']>;
  status_not_ends_with?: Maybe<Scalars['String']>;
  status_i?: Maybe<Scalars['String']>;
  status_not_i?: Maybe<Scalars['String']>;
  status_contains_i?: Maybe<Scalars['String']>;
  status_not_contains_i?: Maybe<Scalars['String']>;
  status_starts_with_i?: Maybe<Scalars['String']>;
  status_not_starts_with_i?: Maybe<Scalars['String']>;
  status_ends_with_i?: Maybe<Scalars['String']>;
  status_not_ends_with_i?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  format?: Maybe<Scalars['String']>;
  format_not?: Maybe<Scalars['String']>;
  format_contains?: Maybe<Scalars['String']>;
  format_not_contains?: Maybe<Scalars['String']>;
  format_starts_with?: Maybe<Scalars['String']>;
  format_not_starts_with?: Maybe<Scalars['String']>;
  format_ends_with?: Maybe<Scalars['String']>;
  format_not_ends_with?: Maybe<Scalars['String']>;
  format_i?: Maybe<Scalars['String']>;
  format_not_i?: Maybe<Scalars['String']>;
  format_contains_i?: Maybe<Scalars['String']>;
  format_not_contains_i?: Maybe<Scalars['String']>;
  format_starts_with_i?: Maybe<Scalars['String']>;
  format_not_starts_with_i?: Maybe<Scalars['String']>;
  format_ends_with_i?: Maybe<Scalars['String']>;
  format_not_ends_with_i?: Maybe<Scalars['String']>;
  format_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  format_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  exportedRecordsCount_not?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  exportedRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount_not?: Maybe<Scalars['Int']>;
  totalRecordsCount_lt?: Maybe<Scalars['Int']>;
  totalRecordsCount_lte?: Maybe<Scalars['Int']>;
  totalRecordsCount_gt?: Maybe<Scalars['Int']>;
  totalRecordsCount_gte?: Maybe<Scalars['Int']>;
  totalRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  file?: Maybe<Scalars['JSON']>;
  file_not?: Maybe<Scalars['JSON']>;
  file_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where?: Maybe<Scalars['JSON']>;
  where_not?: Maybe<Scalars['JSON']>;
  where_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy?: Maybe<Scalars['JSON']>;
  sortBy_not?: Maybe<Scalars['JSON']>;
  sortBy_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  locale?: Maybe<Scalars['String']>;
  locale_not?: Maybe<Scalars['String']>;
  locale_contains?: Maybe<Scalars['String']>;
  locale_not_contains?: Maybe<Scalars['String']>;
  locale_starts_with?: Maybe<Scalars['String']>;
  locale_not_starts_with?: Maybe<Scalars['String']>;
  locale_ends_with?: Maybe<Scalars['String']>;
  locale_not_ends_with?: Maybe<Scalars['String']>;
  locale_i?: Maybe<Scalars['String']>;
  locale_not_i?: Maybe<Scalars['String']>;
  locale_contains_i?: Maybe<Scalars['String']>;
  locale_not_contains_i?: Maybe<Scalars['String']>;
  locale_starts_with_i?: Maybe<Scalars['String']>;
  locale_not_starts_with_i?: Maybe<Scalars['String']>;
  locale_ends_with_i?: Maybe<Scalars['String']>;
  locale_not_ends_with_i?: Maybe<Scalars['String']>;
  locale_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  locale_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone?: Maybe<Scalars['String']>;
  timeZone_not?: Maybe<Scalars['String']>;
  timeZone_contains?: Maybe<Scalars['String']>;
  timeZone_not_contains?: Maybe<Scalars['String']>;
  timeZone_starts_with?: Maybe<Scalars['String']>;
  timeZone_not_starts_with?: Maybe<Scalars['String']>;
  timeZone_ends_with?: Maybe<Scalars['String']>;
  timeZone_not_ends_with?: Maybe<Scalars['String']>;
  timeZone_i?: Maybe<Scalars['String']>;
  timeZone_not_i?: Maybe<Scalars['String']>;
  timeZone_contains_i?: Maybe<Scalars['String']>;
  timeZone_not_contains_i?: Maybe<Scalars['String']>;
  timeZone_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_not_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_not_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  options?: Maybe<Scalars['JSON']>;
  options_not?: Maybe<Scalars['JSON']>;
  options_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  options_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketExportTaskHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketExportTaskHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketExportTaskHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketExportTaskHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketExportTaskHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketExportTaskHistoryRecordsCreateInput = {
  data?: Maybe<TicketExportTaskHistoryRecordCreateInput>;
};

export type TicketExportTaskHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketExportTaskHistoryRecordUpdateInput>;
};

export enum TicketExportTaskStatusType {
  Processing = 'processing',
  Completed = 'completed',
  Error = 'error',
  Cancelled = 'cancelled'
}

export type TicketExportTaskUpdateInput = {
  status?: Maybe<TicketExportTaskStatusType>;
  format?: Maybe<TicketExportTaskFormatType>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  file?: Maybe<Scalars['Upload']>;
  meta?: Maybe<Scalars['JSON']>;
  where?: Maybe<Scalars['JSON']>;
  sortBy?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  user?: Maybe<UserRelateToOneInput>;
  options?: Maybe<TicketExportOptionsInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketExportTaskWhereInput = {
  AND?: Maybe<Array<Maybe<TicketExportTaskWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketExportTaskWhereInput>>>;
  status?: Maybe<TicketExportTaskStatusType>;
  status_not?: Maybe<TicketExportTaskStatusType>;
  status_in?: Maybe<Array<Maybe<TicketExportTaskStatusType>>>;
  status_not_in?: Maybe<Array<Maybe<TicketExportTaskStatusType>>>;
  format?: Maybe<TicketExportTaskFormatType>;
  format_not?: Maybe<TicketExportTaskFormatType>;
  format_in?: Maybe<Array<Maybe<TicketExportTaskFormatType>>>;
  format_not_in?: Maybe<Array<Maybe<TicketExportTaskFormatType>>>;
  exportedRecordsCount?: Maybe<Scalars['Int']>;
  exportedRecordsCount_not?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_lte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gt?: Maybe<Scalars['Int']>;
  exportedRecordsCount_gte?: Maybe<Scalars['Int']>;
  exportedRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  exportedRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount?: Maybe<Scalars['Int']>;
  totalRecordsCount_not?: Maybe<Scalars['Int']>;
  totalRecordsCount_lt?: Maybe<Scalars['Int']>;
  totalRecordsCount_lte?: Maybe<Scalars['Int']>;
  totalRecordsCount_gt?: Maybe<Scalars['Int']>;
  totalRecordsCount_gte?: Maybe<Scalars['Int']>;
  totalRecordsCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalRecordsCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  file?: Maybe<Scalars['String']>;
  file_not?: Maybe<Scalars['String']>;
  file_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where?: Maybe<Scalars['JSON']>;
  where_not?: Maybe<Scalars['JSON']>;
  where_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  where_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy?: Maybe<Scalars['JSON']>;
  sortBy_not?: Maybe<Scalars['JSON']>;
  sortBy_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sortBy_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  locale?: Maybe<Scalars['String']>;
  locale_not?: Maybe<Scalars['String']>;
  locale_contains?: Maybe<Scalars['String']>;
  locale_not_contains?: Maybe<Scalars['String']>;
  locale_starts_with?: Maybe<Scalars['String']>;
  locale_not_starts_with?: Maybe<Scalars['String']>;
  locale_ends_with?: Maybe<Scalars['String']>;
  locale_not_ends_with?: Maybe<Scalars['String']>;
  locale_i?: Maybe<Scalars['String']>;
  locale_not_i?: Maybe<Scalars['String']>;
  locale_contains_i?: Maybe<Scalars['String']>;
  locale_not_contains_i?: Maybe<Scalars['String']>;
  locale_starts_with_i?: Maybe<Scalars['String']>;
  locale_not_starts_with_i?: Maybe<Scalars['String']>;
  locale_ends_with_i?: Maybe<Scalars['String']>;
  locale_not_ends_with_i?: Maybe<Scalars['String']>;
  locale_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  locale_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone?: Maybe<Scalars['String']>;
  timeZone_not?: Maybe<Scalars['String']>;
  timeZone_contains?: Maybe<Scalars['String']>;
  timeZone_not_contains?: Maybe<Scalars['String']>;
  timeZone_starts_with?: Maybe<Scalars['String']>;
  timeZone_not_starts_with?: Maybe<Scalars['String']>;
  timeZone_ends_with?: Maybe<Scalars['String']>;
  timeZone_not_ends_with?: Maybe<Scalars['String']>;
  timeZone_i?: Maybe<Scalars['String']>;
  timeZone_not_i?: Maybe<Scalars['String']>;
  timeZone_contains_i?: Maybe<Scalars['String']>;
  timeZone_not_contains_i?: Maybe<Scalars['String']>;
  timeZone_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_not_starts_with_i?: Maybe<Scalars['String']>;
  timeZone_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_not_ends_with_i?: Maybe<Scalars['String']>;
  timeZone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  timeZone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  options?: Maybe<TicketExportOptionsInput>;
  options_not?: Maybe<TicketExportOptionsInput>;
  options_in?: Maybe<Array<Maybe<TicketExportOptionsInput>>>;
  options_not_in?: Maybe<Array<Maybe<TicketExportOptionsInput>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketExportTaskWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketExportTasksCreateInput = {
  data?: Maybe<TicketExportTaskCreateInput>;
};

export type TicketExportTasksUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketExportTaskUpdateInput>;
};

/**  File attached to the ticket  */
export type TicketFile = {
  __typename?: 'TicketFile';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketFile List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketFile List config, or
   *  3. As an alias to a 'name' field on the TicketFile List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketFile List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  File object with meta information and publicUrl  */
  file?: Maybe<File>;
  /**  Link to ticket  */
  ticket?: Maybe<Ticket>;
  /**  Ref to the organization. It is filled in on the server and is read-only  */
  organization?: Maybe<Organization>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketFileCreateInput = {
  file?: Maybe<Scalars['Upload']>;
  ticket?: Maybe<TicketRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketFileHistoryRecord = {
  __typename?: 'TicketFileHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketFileHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketFileHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketFileHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketFileHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  file?: Maybe<Scalars['JSON']>;
  ticket?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketFileHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketFileHistoryRecordCreateInput = {
  file?: Maybe<Scalars['JSON']>;
  ticket?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketFileHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketFileHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketFileHistoryRecordUpdateInput = {
  file?: Maybe<Scalars['JSON']>;
  ticket?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketFileHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketFileHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketFileHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketFileHistoryRecordWhereInput>>>;
  file?: Maybe<Scalars['JSON']>;
  file_not?: Maybe<Scalars['JSON']>;
  file_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  ticket?: Maybe<Scalars['String']>;
  ticket_not?: Maybe<Scalars['String']>;
  ticket_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketFileHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketFileHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketFileHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketFileHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketFileHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketFileHistoryRecordsCreateInput = {
  data?: Maybe<TicketFileHistoryRecordCreateInput>;
};

export type TicketFileHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketFileHistoryRecordUpdateInput>;
};

export type TicketFileUpdateInput = {
  file?: Maybe<Scalars['Upload']>;
  ticket?: Maybe<TicketRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketFileWhereInput = {
  AND?: Maybe<Array<Maybe<TicketFileWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketFileWhereInput>>>;
  file?: Maybe<Scalars['String']>;
  file_not?: Maybe<Scalars['String']>;
  file_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  file_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket?: Maybe<TicketWhereInput>;
  ticket_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketFileWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketFilesCreateInput = {
  data?: Maybe<TicketFileCreateInput>;
};

export type TicketFilesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketFileUpdateInput>;
};

export type TicketFilter = {
  __typename?: 'TicketFilter';
  organization?: Maybe<Array<Maybe<Scalars['String']>>>;
  number?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<Array<Maybe<Scalars['String']>>>;
  details?: Maybe<Scalars['String']>;
  property?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyScope?: Maybe<Array<Maybe<Scalars['String']>>>;
  address?: Maybe<Scalars['String']>;
  clientName?: Maybe<Scalars['String']>;
  executor?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignee?: Maybe<Array<Maybe<Scalars['String']>>>;
  executorName?: Maybe<Scalars['String']>;
  deadline?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeName?: Maybe<Scalars['String']>;
  attributes?: Maybe<Array<Maybe<Scalars['String']>>>;
  source?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionName?: Maybe<Array<Maybe<Scalars['String']>>>;
  floorName?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName?: Maybe<Array<Maybe<Scalars['String']>>>;
  placeClassifier?: Maybe<Array<Maybe<Scalars['String']>>>;
  categoryClassifier?: Maybe<Array<Maybe<Scalars['String']>>>;
  problemClassifier?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhone?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewValue?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlValue?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactIsNull?: Maybe<Array<Maybe<Scalars['String']>>>;
  completedAt?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastCommentAt?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
};

/**  Employee specific ticket filter template  */
export type TicketFilterTemplate = {
  __typename?: 'TicketFilterTemplate';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketFilterTemplate List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketFilterTemplate List config, or
   *  3. As an alias to a 'name' field on the TicketFilterTemplate List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketFilterTemplate List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ticket filter template name  */
  name?: Maybe<Scalars['String']>;
  /**  Link to employee, who created this template  */
  employee?: Maybe<OrganizationEmployee>;
  /**  Filter that match the given template  */
  fields?: Maybe<TicketFilter>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketFilterTemplateCreateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<OrganizationEmployeeRelateToOneInput>;
  fields?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketFilterTemplateHistoryRecord = {
  __typename?: 'TicketFilterTemplateHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketFilterTemplateHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketFilterTemplateHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketFilterTemplateHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketFilterTemplateHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketFilterTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketFilterTemplateHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketFilterTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketFilterTemplateHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketFilterTemplateHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketFilterTemplateHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketFilterTemplateHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketFilterTemplateHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketFilterTemplateHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee?: Maybe<Scalars['String']>;
  employee_not?: Maybe<Scalars['String']>;
  employee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fields?: Maybe<Scalars['JSON']>;
  fields_not?: Maybe<Scalars['JSON']>;
  fields_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketFilterTemplateHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketFilterTemplateHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketFilterTemplateHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketFilterTemplateHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketFilterTemplateHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketFilterTemplateHistoryRecordsCreateInput = {
  data?: Maybe<TicketFilterTemplateHistoryRecordCreateInput>;
};

export type TicketFilterTemplateHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketFilterTemplateHistoryRecordUpdateInput>;
};

export type TicketFilterTemplateUpdateInput = {
  name?: Maybe<Scalars['String']>;
  employee?: Maybe<OrganizationEmployeeRelateToOneInput>;
  fields?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketFilterTemplateWhereInput = {
  AND?: Maybe<Array<Maybe<TicketFilterTemplateWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketFilterTemplateWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  employee?: Maybe<OrganizationEmployeeWhereInput>;
  employee_is_null?: Maybe<Scalars['Boolean']>;
  fields?: Maybe<Scalars['JSON']>;
  fields_not?: Maybe<Scalars['JSON']>;
  fields_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketFilterTemplateWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketFilterTemplatesCreateInput = {
  data?: Maybe<TicketFilterTemplateCreateInput>;
};

export type TicketFilterTemplatesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketFilterTemplateUpdateInput>;
};

export type TicketGroupedCounter = {
  __typename?: 'TicketGroupedCounter';
  count: Scalars['Int'];
  status?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  dayGroup: Scalars['String'];
  categoryClassifier?: Maybe<Scalars['String']>;
  executor?: Maybe<Scalars['String']>;
  assignee?: Maybe<Scalars['String']>;
};

/**  A keystone list  */
export type TicketHistoryRecord = {
  __typename?: 'TicketHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  statusReopenedCounter?: Maybe<Scalars['Int']>;
  reviewValue?: Maybe<Scalars['String']>;
  reviewComment?: Maybe<Scalars['String']>;
  qualityControlValue?: Maybe<Scalars['String']>;
  qualityControlComment?: Maybe<Scalars['String']>;
  qualityControlAdditionalOptions?: Maybe<Scalars['JSON']>;
  qualityControlUpdatedAt?: Maybe<Scalars['String']>;
  qualityControlUpdatedBy?: Maybe<Scalars['String']>;
  statusUpdatedAt?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['String']>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  statusReason?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  deadline?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['JSON']>;
  client?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  clientName?: Maybe<Scalars['String']>;
  clientEmail?: Maybe<Scalars['String']>;
  clientPhone?: Maybe<Scalars['String']>;
  assignee?: Maybe<Scalars['String']>;
  executor?: Maybe<Scalars['String']>;
  categoryClassifier?: Maybe<Scalars['String']>;
  placeClassifier?: Maybe<Scalars['String']>;
  problemClassifier?: Maybe<Scalars['String']>;
  classifier?: Maybe<Scalars['String']>;
  isAutoClassified?: Maybe<Scalars['Boolean']>;
  details?: Maybe<Scalars['String']>;
  related?: Maybe<Scalars['String']>;
  isPaid?: Maybe<Scalars['Boolean']>;
  isEmergency?: Maybe<Scalars['Boolean']>;
  isWarranty?: Maybe<Scalars['Boolean']>;
  isResidentTicket?: Maybe<Scalars['Boolean']>;
  canReadByResident?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  sectionName?: Maybe<Scalars['String']>;
  sectionType?: Maybe<Scalars['String']>;
  floorName?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  sourceMeta?: Maybe<Scalars['JSON']>;
  deferredUntil?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  statusReopenedCounter?: Maybe<Scalars['Int']>;
  reviewValue?: Maybe<Scalars['String']>;
  reviewComment?: Maybe<Scalars['String']>;
  qualityControlValue?: Maybe<Scalars['String']>;
  qualityControlComment?: Maybe<Scalars['String']>;
  qualityControlAdditionalOptions?: Maybe<Scalars['JSON']>;
  qualityControlUpdatedAt?: Maybe<Scalars['String']>;
  qualityControlUpdatedBy?: Maybe<Scalars['String']>;
  statusUpdatedAt?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['String']>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  statusReason?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  deadline?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['JSON']>;
  client?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  clientName?: Maybe<Scalars['String']>;
  clientEmail?: Maybe<Scalars['String']>;
  clientPhone?: Maybe<Scalars['String']>;
  assignee?: Maybe<Scalars['String']>;
  executor?: Maybe<Scalars['String']>;
  categoryClassifier?: Maybe<Scalars['String']>;
  placeClassifier?: Maybe<Scalars['String']>;
  problemClassifier?: Maybe<Scalars['String']>;
  classifier?: Maybe<Scalars['String']>;
  isAutoClassified?: Maybe<Scalars['Boolean']>;
  details?: Maybe<Scalars['String']>;
  related?: Maybe<Scalars['String']>;
  isPaid?: Maybe<Scalars['Boolean']>;
  isEmergency?: Maybe<Scalars['Boolean']>;
  isWarranty?: Maybe<Scalars['Boolean']>;
  isResidentTicket?: Maybe<Scalars['Boolean']>;
  canReadByResident?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  sectionName?: Maybe<Scalars['String']>;
  sectionType?: Maybe<Scalars['String']>;
  floorName?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  sourceMeta?: Maybe<Scalars['JSON']>;
  deferredUntil?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  statusReopenedCounter?: Maybe<Scalars['Int']>;
  reviewValue?: Maybe<Scalars['String']>;
  reviewComment?: Maybe<Scalars['String']>;
  qualityControlValue?: Maybe<Scalars['String']>;
  qualityControlComment?: Maybe<Scalars['String']>;
  qualityControlAdditionalOptions?: Maybe<Scalars['JSON']>;
  qualityControlUpdatedAt?: Maybe<Scalars['String']>;
  qualityControlUpdatedBy?: Maybe<Scalars['String']>;
  statusUpdatedAt?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['String']>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  statusReason?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  deadline?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['JSON']>;
  client?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  clientName?: Maybe<Scalars['String']>;
  clientEmail?: Maybe<Scalars['String']>;
  clientPhone?: Maybe<Scalars['String']>;
  assignee?: Maybe<Scalars['String']>;
  executor?: Maybe<Scalars['String']>;
  categoryClassifier?: Maybe<Scalars['String']>;
  placeClassifier?: Maybe<Scalars['String']>;
  problemClassifier?: Maybe<Scalars['String']>;
  classifier?: Maybe<Scalars['String']>;
  isAutoClassified?: Maybe<Scalars['Boolean']>;
  details?: Maybe<Scalars['String']>;
  related?: Maybe<Scalars['String']>;
  isPaid?: Maybe<Scalars['Boolean']>;
  isEmergency?: Maybe<Scalars['Boolean']>;
  isWarranty?: Maybe<Scalars['Boolean']>;
  isResidentTicket?: Maybe<Scalars['Boolean']>;
  canReadByResident?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  property?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  sectionName?: Maybe<Scalars['String']>;
  sectionType?: Maybe<Scalars['String']>;
  floorName?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  sourceMeta?: Maybe<Scalars['JSON']>;
  deferredUntil?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusReopenedCounter?: Maybe<Scalars['Int']>;
  statusReopenedCounter_not?: Maybe<Scalars['Int']>;
  statusReopenedCounter_lt?: Maybe<Scalars['Int']>;
  statusReopenedCounter_lte?: Maybe<Scalars['Int']>;
  statusReopenedCounter_gt?: Maybe<Scalars['Int']>;
  statusReopenedCounter_gte?: Maybe<Scalars['Int']>;
  statusReopenedCounter_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statusReopenedCounter_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  reviewValue?: Maybe<Scalars['String']>;
  reviewValue_not?: Maybe<Scalars['String']>;
  reviewValue_contains?: Maybe<Scalars['String']>;
  reviewValue_not_contains?: Maybe<Scalars['String']>;
  reviewValue_starts_with?: Maybe<Scalars['String']>;
  reviewValue_not_starts_with?: Maybe<Scalars['String']>;
  reviewValue_ends_with?: Maybe<Scalars['String']>;
  reviewValue_not_ends_with?: Maybe<Scalars['String']>;
  reviewValue_i?: Maybe<Scalars['String']>;
  reviewValue_not_i?: Maybe<Scalars['String']>;
  reviewValue_contains_i?: Maybe<Scalars['String']>;
  reviewValue_not_contains_i?: Maybe<Scalars['String']>;
  reviewValue_starts_with_i?: Maybe<Scalars['String']>;
  reviewValue_not_starts_with_i?: Maybe<Scalars['String']>;
  reviewValue_ends_with_i?: Maybe<Scalars['String']>;
  reviewValue_not_ends_with_i?: Maybe<Scalars['String']>;
  reviewValue_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewValue_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewComment?: Maybe<Scalars['String']>;
  reviewComment_not?: Maybe<Scalars['String']>;
  reviewComment_contains?: Maybe<Scalars['String']>;
  reviewComment_not_contains?: Maybe<Scalars['String']>;
  reviewComment_starts_with?: Maybe<Scalars['String']>;
  reviewComment_not_starts_with?: Maybe<Scalars['String']>;
  reviewComment_ends_with?: Maybe<Scalars['String']>;
  reviewComment_not_ends_with?: Maybe<Scalars['String']>;
  reviewComment_i?: Maybe<Scalars['String']>;
  reviewComment_not_i?: Maybe<Scalars['String']>;
  reviewComment_contains_i?: Maybe<Scalars['String']>;
  reviewComment_not_contains_i?: Maybe<Scalars['String']>;
  reviewComment_starts_with_i?: Maybe<Scalars['String']>;
  reviewComment_not_starts_with_i?: Maybe<Scalars['String']>;
  reviewComment_ends_with_i?: Maybe<Scalars['String']>;
  reviewComment_not_ends_with_i?: Maybe<Scalars['String']>;
  reviewComment_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewComment_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlValue?: Maybe<Scalars['String']>;
  qualityControlValue_not?: Maybe<Scalars['String']>;
  qualityControlValue_contains?: Maybe<Scalars['String']>;
  qualityControlValue_not_contains?: Maybe<Scalars['String']>;
  qualityControlValue_starts_with?: Maybe<Scalars['String']>;
  qualityControlValue_not_starts_with?: Maybe<Scalars['String']>;
  qualityControlValue_ends_with?: Maybe<Scalars['String']>;
  qualityControlValue_not_ends_with?: Maybe<Scalars['String']>;
  qualityControlValue_i?: Maybe<Scalars['String']>;
  qualityControlValue_not_i?: Maybe<Scalars['String']>;
  qualityControlValue_contains_i?: Maybe<Scalars['String']>;
  qualityControlValue_not_contains_i?: Maybe<Scalars['String']>;
  qualityControlValue_starts_with_i?: Maybe<Scalars['String']>;
  qualityControlValue_not_starts_with_i?: Maybe<Scalars['String']>;
  qualityControlValue_ends_with_i?: Maybe<Scalars['String']>;
  qualityControlValue_not_ends_with_i?: Maybe<Scalars['String']>;
  qualityControlValue_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlValue_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlComment?: Maybe<Scalars['String']>;
  qualityControlComment_not?: Maybe<Scalars['String']>;
  qualityControlComment_contains?: Maybe<Scalars['String']>;
  qualityControlComment_not_contains?: Maybe<Scalars['String']>;
  qualityControlComment_starts_with?: Maybe<Scalars['String']>;
  qualityControlComment_not_starts_with?: Maybe<Scalars['String']>;
  qualityControlComment_ends_with?: Maybe<Scalars['String']>;
  qualityControlComment_not_ends_with?: Maybe<Scalars['String']>;
  qualityControlComment_i?: Maybe<Scalars['String']>;
  qualityControlComment_not_i?: Maybe<Scalars['String']>;
  qualityControlComment_contains_i?: Maybe<Scalars['String']>;
  qualityControlComment_not_contains_i?: Maybe<Scalars['String']>;
  qualityControlComment_starts_with_i?: Maybe<Scalars['String']>;
  qualityControlComment_not_starts_with_i?: Maybe<Scalars['String']>;
  qualityControlComment_ends_with_i?: Maybe<Scalars['String']>;
  qualityControlComment_not_ends_with_i?: Maybe<Scalars['String']>;
  qualityControlComment_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlComment_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlAdditionalOptions?: Maybe<Scalars['JSON']>;
  qualityControlAdditionalOptions_not?: Maybe<Scalars['JSON']>;
  qualityControlAdditionalOptions_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  qualityControlAdditionalOptions_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  qualityControlUpdatedAt?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_not?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_lt?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_lte?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_gt?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_gte?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlUpdatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlUpdatedBy?: Maybe<Scalars['String']>;
  qualityControlUpdatedBy_not?: Maybe<Scalars['String']>;
  qualityControlUpdatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlUpdatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusUpdatedAt?: Maybe<Scalars['String']>;
  statusUpdatedAt_not?: Maybe<Scalars['String']>;
  statusUpdatedAt_lt?: Maybe<Scalars['String']>;
  statusUpdatedAt_lte?: Maybe<Scalars['String']>;
  statusUpdatedAt_gt?: Maybe<Scalars['String']>;
  statusUpdatedAt_gte?: Maybe<Scalars['String']>;
  statusUpdatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusUpdatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  completedAt?: Maybe<Scalars['String']>;
  completedAt_not?: Maybe<Scalars['String']>;
  completedAt_lt?: Maybe<Scalars['String']>;
  completedAt_lte?: Maybe<Scalars['String']>;
  completedAt_gt?: Maybe<Scalars['String']>;
  completedAt_gte?: Maybe<Scalars['String']>;
  completedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  completedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastCommentAt_not?: Maybe<Scalars['String']>;
  lastCommentAt_lt?: Maybe<Scalars['String']>;
  lastCommentAt_lte?: Maybe<Scalars['String']>;
  lastCommentAt_gt?: Maybe<Scalars['String']>;
  lastCommentAt_gte?: Maybe<Scalars['String']>;
  lastCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_not?: Maybe<Scalars['String']>;
  lastResidentCommentAt_lt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_lte?: Maybe<Scalars['String']>;
  lastResidentCommentAt_gt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_gte?: Maybe<Scalars['String']>;
  lastResidentCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastResidentCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusReason?: Maybe<Scalars['String']>;
  statusReason_not?: Maybe<Scalars['String']>;
  statusReason_contains?: Maybe<Scalars['String']>;
  statusReason_not_contains?: Maybe<Scalars['String']>;
  statusReason_starts_with?: Maybe<Scalars['String']>;
  statusReason_not_starts_with?: Maybe<Scalars['String']>;
  statusReason_ends_with?: Maybe<Scalars['String']>;
  statusReason_not_ends_with?: Maybe<Scalars['String']>;
  statusReason_i?: Maybe<Scalars['String']>;
  statusReason_not_i?: Maybe<Scalars['String']>;
  statusReason_contains_i?: Maybe<Scalars['String']>;
  statusReason_not_contains_i?: Maybe<Scalars['String']>;
  statusReason_starts_with_i?: Maybe<Scalars['String']>;
  statusReason_not_starts_with_i?: Maybe<Scalars['String']>;
  statusReason_ends_with_i?: Maybe<Scalars['String']>;
  statusReason_not_ends_with_i?: Maybe<Scalars['String']>;
  statusReason_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusReason_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<Scalars['String']>;
  status_not?: Maybe<Scalars['String']>;
  status_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deadline?: Maybe<Scalars['String']>;
  deadline_not?: Maybe<Scalars['String']>;
  deadline_lt?: Maybe<Scalars['String']>;
  deadline_lte?: Maybe<Scalars['String']>;
  deadline_gt?: Maybe<Scalars['String']>;
  deadline_gte?: Maybe<Scalars['String']>;
  deadline_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deadline_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  order?: Maybe<Scalars['Int']>;
  order_not?: Maybe<Scalars['Int']>;
  order_lt?: Maybe<Scalars['Int']>;
  order_lte?: Maybe<Scalars['Int']>;
  order_gt?: Maybe<Scalars['Int']>;
  order_gte?: Maybe<Scalars['Int']>;
  order_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  order_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  number?: Maybe<Scalars['JSON']>;
  number_not?: Maybe<Scalars['JSON']>;
  number_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  client?: Maybe<Scalars['String']>;
  client_not?: Maybe<Scalars['String']>;
  client_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  client_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contact?: Maybe<Scalars['String']>;
  contact_not?: Maybe<Scalars['String']>;
  contact_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contact_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientName?: Maybe<Scalars['String']>;
  clientName_not?: Maybe<Scalars['String']>;
  clientName_contains?: Maybe<Scalars['String']>;
  clientName_not_contains?: Maybe<Scalars['String']>;
  clientName_starts_with?: Maybe<Scalars['String']>;
  clientName_not_starts_with?: Maybe<Scalars['String']>;
  clientName_ends_with?: Maybe<Scalars['String']>;
  clientName_not_ends_with?: Maybe<Scalars['String']>;
  clientName_i?: Maybe<Scalars['String']>;
  clientName_not_i?: Maybe<Scalars['String']>;
  clientName_contains_i?: Maybe<Scalars['String']>;
  clientName_not_contains_i?: Maybe<Scalars['String']>;
  clientName_starts_with_i?: Maybe<Scalars['String']>;
  clientName_not_starts_with_i?: Maybe<Scalars['String']>;
  clientName_ends_with_i?: Maybe<Scalars['String']>;
  clientName_not_ends_with_i?: Maybe<Scalars['String']>;
  clientName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmail?: Maybe<Scalars['String']>;
  clientEmail_not?: Maybe<Scalars['String']>;
  clientEmail_contains?: Maybe<Scalars['String']>;
  clientEmail_not_contains?: Maybe<Scalars['String']>;
  clientEmail_starts_with?: Maybe<Scalars['String']>;
  clientEmail_not_starts_with?: Maybe<Scalars['String']>;
  clientEmail_ends_with?: Maybe<Scalars['String']>;
  clientEmail_not_ends_with?: Maybe<Scalars['String']>;
  clientEmail_i?: Maybe<Scalars['String']>;
  clientEmail_not_i?: Maybe<Scalars['String']>;
  clientEmail_contains_i?: Maybe<Scalars['String']>;
  clientEmail_not_contains_i?: Maybe<Scalars['String']>;
  clientEmail_starts_with_i?: Maybe<Scalars['String']>;
  clientEmail_not_starts_with_i?: Maybe<Scalars['String']>;
  clientEmail_ends_with_i?: Maybe<Scalars['String']>;
  clientEmail_not_ends_with_i?: Maybe<Scalars['String']>;
  clientEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhone?: Maybe<Scalars['String']>;
  clientPhone_not?: Maybe<Scalars['String']>;
  clientPhone_contains?: Maybe<Scalars['String']>;
  clientPhone_not_contains?: Maybe<Scalars['String']>;
  clientPhone_starts_with?: Maybe<Scalars['String']>;
  clientPhone_not_starts_with?: Maybe<Scalars['String']>;
  clientPhone_ends_with?: Maybe<Scalars['String']>;
  clientPhone_not_ends_with?: Maybe<Scalars['String']>;
  clientPhone_i?: Maybe<Scalars['String']>;
  clientPhone_not_i?: Maybe<Scalars['String']>;
  clientPhone_contains_i?: Maybe<Scalars['String']>;
  clientPhone_not_contains_i?: Maybe<Scalars['String']>;
  clientPhone_starts_with_i?: Maybe<Scalars['String']>;
  clientPhone_not_starts_with_i?: Maybe<Scalars['String']>;
  clientPhone_ends_with_i?: Maybe<Scalars['String']>;
  clientPhone_not_ends_with_i?: Maybe<Scalars['String']>;
  clientPhone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignee?: Maybe<Scalars['String']>;
  assignee_not?: Maybe<Scalars['String']>;
  assignee_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignee_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  executor?: Maybe<Scalars['String']>;
  executor_not?: Maybe<Scalars['String']>;
  executor_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  executor_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  categoryClassifier?: Maybe<Scalars['String']>;
  categoryClassifier_not?: Maybe<Scalars['String']>;
  categoryClassifier_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  categoryClassifier_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  placeClassifier?: Maybe<Scalars['String']>;
  placeClassifier_not?: Maybe<Scalars['String']>;
  placeClassifier_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  placeClassifier_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  problemClassifier?: Maybe<Scalars['String']>;
  problemClassifier_not?: Maybe<Scalars['String']>;
  problemClassifier_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  problemClassifier_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  classifier?: Maybe<Scalars['String']>;
  classifier_not?: Maybe<Scalars['String']>;
  classifier_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  classifier_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isAutoClassified?: Maybe<Scalars['Boolean']>;
  isAutoClassified_not?: Maybe<Scalars['Boolean']>;
  details?: Maybe<Scalars['String']>;
  details_not?: Maybe<Scalars['String']>;
  details_contains?: Maybe<Scalars['String']>;
  details_not_contains?: Maybe<Scalars['String']>;
  details_starts_with?: Maybe<Scalars['String']>;
  details_not_starts_with?: Maybe<Scalars['String']>;
  details_ends_with?: Maybe<Scalars['String']>;
  details_not_ends_with?: Maybe<Scalars['String']>;
  details_i?: Maybe<Scalars['String']>;
  details_not_i?: Maybe<Scalars['String']>;
  details_contains_i?: Maybe<Scalars['String']>;
  details_not_contains_i?: Maybe<Scalars['String']>;
  details_starts_with_i?: Maybe<Scalars['String']>;
  details_not_starts_with_i?: Maybe<Scalars['String']>;
  details_ends_with_i?: Maybe<Scalars['String']>;
  details_not_ends_with_i?: Maybe<Scalars['String']>;
  details_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  details_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  related?: Maybe<Scalars['String']>;
  related_not?: Maybe<Scalars['String']>;
  related_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  related_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isPaid?: Maybe<Scalars['Boolean']>;
  isPaid_not?: Maybe<Scalars['Boolean']>;
  isEmergency?: Maybe<Scalars['Boolean']>;
  isEmergency_not?: Maybe<Scalars['Boolean']>;
  isWarranty?: Maybe<Scalars['Boolean']>;
  isWarranty_not?: Maybe<Scalars['Boolean']>;
  isResidentTicket?: Maybe<Scalars['Boolean']>;
  isResidentTicket_not?: Maybe<Scalars['Boolean']>;
  canReadByResident?: Maybe<Scalars['Boolean']>;
  canReadByResident_not?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddress_not?: Maybe<Scalars['String']>;
  propertyAddress_contains?: Maybe<Scalars['String']>;
  propertyAddress_not_contains?: Maybe<Scalars['String']>;
  propertyAddress_starts_with?: Maybe<Scalars['String']>;
  propertyAddress_not_starts_with?: Maybe<Scalars['String']>;
  propertyAddress_ends_with?: Maybe<Scalars['String']>;
  propertyAddress_not_ends_with?: Maybe<Scalars['String']>;
  propertyAddress_i?: Maybe<Scalars['String']>;
  propertyAddress_not_i?: Maybe<Scalars['String']>;
  propertyAddress_contains_i?: Maybe<Scalars['String']>;
  propertyAddress_not_contains_i?: Maybe<Scalars['String']>;
  propertyAddress_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddress_not_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddress_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddress_not_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  propertyAddressMeta_not?: Maybe<Scalars['JSON']>;
  propertyAddressMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  propertyAddressMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sectionName?: Maybe<Scalars['String']>;
  sectionName_not?: Maybe<Scalars['String']>;
  sectionName_contains?: Maybe<Scalars['String']>;
  sectionName_not_contains?: Maybe<Scalars['String']>;
  sectionName_starts_with?: Maybe<Scalars['String']>;
  sectionName_not_starts_with?: Maybe<Scalars['String']>;
  sectionName_ends_with?: Maybe<Scalars['String']>;
  sectionName_not_ends_with?: Maybe<Scalars['String']>;
  sectionName_i?: Maybe<Scalars['String']>;
  sectionName_not_i?: Maybe<Scalars['String']>;
  sectionName_contains_i?: Maybe<Scalars['String']>;
  sectionName_not_contains_i?: Maybe<Scalars['String']>;
  sectionName_starts_with_i?: Maybe<Scalars['String']>;
  sectionName_not_starts_with_i?: Maybe<Scalars['String']>;
  sectionName_ends_with_i?: Maybe<Scalars['String']>;
  sectionName_not_ends_with_i?: Maybe<Scalars['String']>;
  sectionName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionType?: Maybe<Scalars['String']>;
  sectionType_not?: Maybe<Scalars['String']>;
  sectionType_contains?: Maybe<Scalars['String']>;
  sectionType_not_contains?: Maybe<Scalars['String']>;
  sectionType_starts_with?: Maybe<Scalars['String']>;
  sectionType_not_starts_with?: Maybe<Scalars['String']>;
  sectionType_ends_with?: Maybe<Scalars['String']>;
  sectionType_not_ends_with?: Maybe<Scalars['String']>;
  sectionType_i?: Maybe<Scalars['String']>;
  sectionType_not_i?: Maybe<Scalars['String']>;
  sectionType_contains_i?: Maybe<Scalars['String']>;
  sectionType_not_contains_i?: Maybe<Scalars['String']>;
  sectionType_starts_with_i?: Maybe<Scalars['String']>;
  sectionType_not_starts_with_i?: Maybe<Scalars['String']>;
  sectionType_ends_with_i?: Maybe<Scalars['String']>;
  sectionType_not_ends_with_i?: Maybe<Scalars['String']>;
  sectionType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floorName?: Maybe<Scalars['String']>;
  floorName_not?: Maybe<Scalars['String']>;
  floorName_contains?: Maybe<Scalars['String']>;
  floorName_not_contains?: Maybe<Scalars['String']>;
  floorName_starts_with?: Maybe<Scalars['String']>;
  floorName_not_starts_with?: Maybe<Scalars['String']>;
  floorName_ends_with?: Maybe<Scalars['String']>;
  floorName_not_ends_with?: Maybe<Scalars['String']>;
  floorName_i?: Maybe<Scalars['String']>;
  floorName_not_i?: Maybe<Scalars['String']>;
  floorName_contains_i?: Maybe<Scalars['String']>;
  floorName_not_contains_i?: Maybe<Scalars['String']>;
  floorName_starts_with_i?: Maybe<Scalars['String']>;
  floorName_not_starts_with_i?: Maybe<Scalars['String']>;
  floorName_ends_with_i?: Maybe<Scalars['String']>;
  floorName_not_ends_with_i?: Maybe<Scalars['String']>;
  floorName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floorName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_contains?: Maybe<Scalars['String']>;
  unitType_not_contains?: Maybe<Scalars['String']>;
  unitType_starts_with?: Maybe<Scalars['String']>;
  unitType_not_starts_with?: Maybe<Scalars['String']>;
  unitType_ends_with?: Maybe<Scalars['String']>;
  unitType_not_ends_with?: Maybe<Scalars['String']>;
  unitType_i?: Maybe<Scalars['String']>;
  unitType_not_i?: Maybe<Scalars['String']>;
  unitType_contains_i?: Maybe<Scalars['String']>;
  unitType_not_contains_i?: Maybe<Scalars['String']>;
  unitType_starts_with_i?: Maybe<Scalars['String']>;
  unitType_not_starts_with_i?: Maybe<Scalars['String']>;
  unitType_ends_with_i?: Maybe<Scalars['String']>;
  unitType_not_ends_with_i?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  source?: Maybe<Scalars['String']>;
  source_not?: Maybe<Scalars['String']>;
  source_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  source_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sourceMeta?: Maybe<Scalars['JSON']>;
  sourceMeta_not?: Maybe<Scalars['JSON']>;
  sourceMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sourceMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  deferredUntil?: Maybe<Scalars['String']>;
  deferredUntil_not?: Maybe<Scalars['String']>;
  deferredUntil_lt?: Maybe<Scalars['String']>;
  deferredUntil_lte?: Maybe<Scalars['String']>;
  deferredUntil_gt?: Maybe<Scalars['String']>;
  deferredUntil_gte?: Maybe<Scalars['String']>;
  deferredUntil_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deferredUntil_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketHistoryRecordsCreateInput = {
  data?: Maybe<TicketHistoryRecordCreateInput>;
};

export type TicketHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketHistoryRecordUpdateInput>;
};

export type TicketLabel = {
  __typename?: 'TicketLabel';
  label: Scalars['String'];
  color: Scalars['String'];
  value: Scalars['String'];
};

/**  Ticket settings rules for each organization. (Setting the "deadline" fields for each ticket type)  */
export type TicketOrganizationSetting = {
  __typename?: 'TicketOrganizationSetting';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketOrganizationSetting List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketOrganizationSetting List config, or
   *  3. As an alias to a 'name' field on the TicketOrganizationSetting List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketOrganizationSetting List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Default deadline duration for default tickets (ISO 8601 format)  */
  defaultDeadlineDuration?: Maybe<Scalars['String']>;
  /**  Default deadline duration for paid tickets (ISO 8601 format)  */
  paidDeadlineDuration?: Maybe<Scalars['String']>;
  /**  Default deadline duration for emergency tickets (ISO 8601 format)  */
  emergencyDeadlineDuration?: Maybe<Scalars['String']>;
  /**  Default deadline duration for warranty tickets (ISO 8601 format)  */
  warrantyDeadlineDuration?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketOrganizationSettingCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  defaultDeadlineDuration?: Maybe<Scalars['String']>;
  paidDeadlineDuration?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketOrganizationSettingHistoryRecord = {
  __typename?: 'TicketOrganizationSettingHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketOrganizationSettingHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketOrganizationSettingHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketOrganizationSettingHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketOrganizationSettingHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  defaultDeadlineDuration?: Maybe<Scalars['JSON']>;
  paidDeadlineDuration?: Maybe<Scalars['JSON']>;
  emergencyDeadlineDuration?: Maybe<Scalars['JSON']>;
  warrantyDeadlineDuration?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketOrganizationSettingHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketOrganizationSettingHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  defaultDeadlineDuration?: Maybe<Scalars['JSON']>;
  paidDeadlineDuration?: Maybe<Scalars['JSON']>;
  emergencyDeadlineDuration?: Maybe<Scalars['JSON']>;
  warrantyDeadlineDuration?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketOrganizationSettingHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketOrganizationSettingHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketOrganizationSettingHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  defaultDeadlineDuration?: Maybe<Scalars['JSON']>;
  paidDeadlineDuration?: Maybe<Scalars['JSON']>;
  emergencyDeadlineDuration?: Maybe<Scalars['JSON']>;
  warrantyDeadlineDuration?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketOrganizationSettingHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketOrganizationSettingHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketOrganizationSettingHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketOrganizationSettingHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  defaultDeadlineDuration?: Maybe<Scalars['JSON']>;
  defaultDeadlineDuration_not?: Maybe<Scalars['JSON']>;
  defaultDeadlineDuration_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  defaultDeadlineDuration_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  paidDeadlineDuration?: Maybe<Scalars['JSON']>;
  paidDeadlineDuration_not?: Maybe<Scalars['JSON']>;
  paidDeadlineDuration_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  paidDeadlineDuration_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  emergencyDeadlineDuration?: Maybe<Scalars['JSON']>;
  emergencyDeadlineDuration_not?: Maybe<Scalars['JSON']>;
  emergencyDeadlineDuration_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  emergencyDeadlineDuration_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  warrantyDeadlineDuration?: Maybe<Scalars['JSON']>;
  warrantyDeadlineDuration_not?: Maybe<Scalars['JSON']>;
  warrantyDeadlineDuration_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  warrantyDeadlineDuration_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketOrganizationSettingHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketOrganizationSettingHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketOrganizationSettingHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketOrganizationSettingHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketOrganizationSettingHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketOrganizationSettingHistoryRecordsCreateInput = {
  data?: Maybe<TicketOrganizationSettingHistoryRecordCreateInput>;
};

export type TicketOrganizationSettingHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketOrganizationSettingHistoryRecordUpdateInput>;
};

export type TicketOrganizationSettingUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  defaultDeadlineDuration?: Maybe<Scalars['String']>;
  paidDeadlineDuration?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketOrganizationSettingWhereInput = {
  AND?: Maybe<Array<Maybe<TicketOrganizationSettingWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketOrganizationSettingWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  defaultDeadlineDuration?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_not?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_contains?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_not_contains?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_starts_with?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_not_starts_with?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_ends_with?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_not_ends_with?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_i?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_not_i?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_contains_i?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_not_contains_i?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_starts_with_i?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_not_starts_with_i?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_ends_with_i?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_not_ends_with_i?: Maybe<Scalars['String']>;
  defaultDeadlineDuration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  defaultDeadlineDuration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paidDeadlineDuration?: Maybe<Scalars['String']>;
  paidDeadlineDuration_not?: Maybe<Scalars['String']>;
  paidDeadlineDuration_contains?: Maybe<Scalars['String']>;
  paidDeadlineDuration_not_contains?: Maybe<Scalars['String']>;
  paidDeadlineDuration_starts_with?: Maybe<Scalars['String']>;
  paidDeadlineDuration_not_starts_with?: Maybe<Scalars['String']>;
  paidDeadlineDuration_ends_with?: Maybe<Scalars['String']>;
  paidDeadlineDuration_not_ends_with?: Maybe<Scalars['String']>;
  paidDeadlineDuration_i?: Maybe<Scalars['String']>;
  paidDeadlineDuration_not_i?: Maybe<Scalars['String']>;
  paidDeadlineDuration_contains_i?: Maybe<Scalars['String']>;
  paidDeadlineDuration_not_contains_i?: Maybe<Scalars['String']>;
  paidDeadlineDuration_starts_with_i?: Maybe<Scalars['String']>;
  paidDeadlineDuration_not_starts_with_i?: Maybe<Scalars['String']>;
  paidDeadlineDuration_ends_with_i?: Maybe<Scalars['String']>;
  paidDeadlineDuration_not_ends_with_i?: Maybe<Scalars['String']>;
  paidDeadlineDuration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paidDeadlineDuration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  emergencyDeadlineDuration?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_not?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_contains?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_not_contains?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_starts_with?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_not_starts_with?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_ends_with?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_not_ends_with?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_i?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_not_i?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_contains_i?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_not_contains_i?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_starts_with_i?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_not_starts_with_i?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_ends_with_i?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_not_ends_with_i?: Maybe<Scalars['String']>;
  emergencyDeadlineDuration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  emergencyDeadlineDuration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  warrantyDeadlineDuration?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_not?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_contains?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_not_contains?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_starts_with?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_not_starts_with?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_ends_with?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_not_ends_with?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_i?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_not_i?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_contains_i?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_not_contains_i?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_starts_with_i?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_not_starts_with_i?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_ends_with_i?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_not_ends_with_i?: Maybe<Scalars['String']>;
  warrantyDeadlineDuration_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  warrantyDeadlineDuration_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketOrganizationSettingWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketOrganizationSettingsCreateInput = {
  data?: Maybe<TicketOrganizationSettingCreateInput>;
};

export type TicketOrganizationSettingsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketOrganizationSettingUpdateInput>;
};

/**  Describes where the incident occurred  */
export type TicketPlaceClassifier = {
  __typename?: 'TicketPlaceClassifier';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketPlaceClassifier List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketPlaceClassifier List config, or
   *  3. As an alias to a 'name' field on the TicketPlaceClassifier List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketPlaceClassifier List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. If this ref is null the object is common for all organizations  */
  organization?: Maybe<Organization>;
  /**  text content  */
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketPlaceClassifierCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketPlaceClassifierHistoryRecord = {
  __typename?: 'TicketPlaceClassifierHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketPlaceClassifierHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketPlaceClassifierHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketPlaceClassifierHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketPlaceClassifierHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketPlaceClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketPlaceClassifierHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketPlaceClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketPlaceClassifierHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketPlaceClassifierHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketPlaceClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketPlaceClassifierHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketPlaceClassifierHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketPlaceClassifierHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketPlaceClassifierHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketPlaceClassifierHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketPlaceClassifierHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketPlaceClassifierHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketPlaceClassifierHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketPlaceClassifierHistoryRecordsCreateInput = {
  data?: Maybe<TicketPlaceClassifierHistoryRecordCreateInput>;
};

export type TicketPlaceClassifierHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketPlaceClassifierHistoryRecordUpdateInput>;
};

export type TicketPlaceClassifierRelateToOneInput = {
  create?: Maybe<TicketPlaceClassifierCreateInput>;
  connect?: Maybe<TicketPlaceClassifierWhereUniqueInput>;
  disconnect?: Maybe<TicketPlaceClassifierWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type TicketPlaceClassifierUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketPlaceClassifierWhereInput = {
  AND?: Maybe<Array<Maybe<TicketPlaceClassifierWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketPlaceClassifierWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketPlaceClassifierWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketPlaceClassifiersCreateInput = {
  data?: Maybe<TicketPlaceClassifierCreateInput>;
};

export type TicketPlaceClassifiersUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketPlaceClassifierUpdateInput>;
};

/**  Describes what work needs to be done to fix incident  */
export type TicketProblemClassifier = {
  __typename?: 'TicketProblemClassifier';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketProblemClassifier List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketProblemClassifier List config, or
   *  3. As an alias to a 'name' field on the TicketProblemClassifier List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketProblemClassifier List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. If this ref is null the object is common for all organizations  */
  organization?: Maybe<Organization>;
  /**  text content  */
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketProblemClassifierCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketProblemClassifierHistoryRecord = {
  __typename?: 'TicketProblemClassifierHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketProblemClassifierHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketProblemClassifierHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketProblemClassifierHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketProblemClassifierHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketProblemClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketProblemClassifierHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketProblemClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketProblemClassifierHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketProblemClassifierHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketProblemClassifierHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketProblemClassifierHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketProblemClassifierHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketProblemClassifierHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketProblemClassifierHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketProblemClassifierHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketProblemClassifierHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketProblemClassifierHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketProblemClassifierHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketProblemClassifierHistoryRecordsCreateInput = {
  data?: Maybe<TicketProblemClassifierHistoryRecordCreateInput>;
};

export type TicketProblemClassifierHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketProblemClassifierHistoryRecordUpdateInput>;
};

export type TicketProblemClassifierRelateToOneInput = {
  create?: Maybe<TicketProblemClassifierCreateInput>;
  connect?: Maybe<TicketProblemClassifierWhereUniqueInput>;
  disconnect?: Maybe<TicketProblemClassifierWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type TicketProblemClassifierUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketProblemClassifierWhereInput = {
  AND?: Maybe<Array<Maybe<TicketProblemClassifierWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketProblemClassifierWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketProblemClassifierWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketProblemClassifiersCreateInput = {
  data?: Maybe<TicketProblemClassifierCreateInput>;
};

export type TicketProblemClassifiersUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketProblemClassifierUpdateInput>;
};

/**  Textual information in free format related to a property or group of properties, for example list of responsible for property, organization number for clients  */
export type TicketPropertyHint = {
  __typename?: 'TicketPropertyHint';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketPropertyHint List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketPropertyHint List config, or
   *  3. As an alias to a 'name' field on the TicketPropertyHint List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketPropertyHint List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. The object will be deleted if the organization ceases to exist  */
  organization?: Maybe<Organization>;
  /**  Hint name  */
  name?: Maybe<Scalars['String']>;
  /**  Textual content of help in HTML format  */
  content?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketPropertyHintCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketPropertyHintHistoryRecord = {
  __typename?: 'TicketPropertyHintHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketPropertyHintHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketPropertyHintHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketPropertyHintHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketPropertyHintHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketPropertyHintHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketPropertyHintHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketPropertyHintHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketPropertyHintHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketPropertyHintHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketPropertyHintHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketPropertyHintHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketPropertyHintHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketPropertyHintHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  content?: Maybe<Scalars['String']>;
  content_not?: Maybe<Scalars['String']>;
  content_contains?: Maybe<Scalars['String']>;
  content_not_contains?: Maybe<Scalars['String']>;
  content_starts_with?: Maybe<Scalars['String']>;
  content_not_starts_with?: Maybe<Scalars['String']>;
  content_ends_with?: Maybe<Scalars['String']>;
  content_not_ends_with?: Maybe<Scalars['String']>;
  content_i?: Maybe<Scalars['String']>;
  content_not_i?: Maybe<Scalars['String']>;
  content_contains_i?: Maybe<Scalars['String']>;
  content_not_contains_i?: Maybe<Scalars['String']>;
  content_starts_with_i?: Maybe<Scalars['String']>;
  content_not_starts_with_i?: Maybe<Scalars['String']>;
  content_ends_with_i?: Maybe<Scalars['String']>;
  content_not_ends_with_i?: Maybe<Scalars['String']>;
  content_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketPropertyHintHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketPropertyHintHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketPropertyHintHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketPropertyHintHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketPropertyHintHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketPropertyHintHistoryRecordsCreateInput = {
  data?: Maybe<TicketPropertyHintHistoryRecordCreateInput>;
};

export type TicketPropertyHintHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketPropertyHintHistoryRecordUpdateInput>;
};

export type TicketPropertyHintPropertiesCreateInput = {
  data?: Maybe<TicketPropertyHintPropertyCreateInput>;
};

export type TicketPropertyHintPropertiesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketPropertyHintPropertyUpdateInput>;
};

/**  Join entity for many-to-many relations, that determines a Property to which the TicketPropertyHint belongs  */
export type TicketPropertyHintProperty = {
  __typename?: 'TicketPropertyHintProperty';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketPropertyHintProperty List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketPropertyHintProperty List config, or
   *  3. As an alias to a 'name' field on the TicketPropertyHintProperty List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketPropertyHintProperty List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  TicketPropertyHint which belongs to property  */
  ticketPropertyHint?: Maybe<TicketPropertyHint>;
  /**  Property for which ticketPropertyHint exists  */
  property?: Maybe<Property>;
  /**  Ref to the organization. It is filled in on the server and is read-only  */
  organization?: Maybe<Organization>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketPropertyHintPropertyCreateInput = {
  ticketPropertyHint?: Maybe<TicketPropertyHintRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketPropertyHintPropertyHistoryRecord = {
  __typename?: 'TicketPropertyHintPropertyHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketPropertyHintPropertyHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketPropertyHintPropertyHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketPropertyHintPropertyHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketPropertyHintPropertyHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  ticketPropertyHint?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketPropertyHintPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketPropertyHintPropertyHistoryRecordCreateInput = {
  ticketPropertyHint?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketPropertyHintPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketPropertyHintPropertyHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketPropertyHintPropertyHistoryRecordUpdateInput = {
  ticketPropertyHint?: Maybe<Scalars['String']>;
  property?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketPropertyHintPropertyHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketPropertyHintPropertyHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketPropertyHintPropertyHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketPropertyHintPropertyHistoryRecordWhereInput>>>;
  ticketPropertyHint?: Maybe<Scalars['String']>;
  ticketPropertyHint_not?: Maybe<Scalars['String']>;
  ticketPropertyHint_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketPropertyHint_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property?: Maybe<Scalars['String']>;
  property_not?: Maybe<Scalars['String']>;
  property_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  property_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketPropertyHintPropertyHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketPropertyHintPropertyHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketPropertyHintPropertyHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketPropertyHintPropertyHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketPropertyHintPropertyHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketPropertyHintPropertyHistoryRecordsCreateInput = {
  data?: Maybe<TicketPropertyHintPropertyHistoryRecordCreateInput>;
};

export type TicketPropertyHintPropertyHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketPropertyHintPropertyHistoryRecordUpdateInput>;
};

export type TicketPropertyHintPropertyUpdateInput = {
  ticketPropertyHint?: Maybe<TicketPropertyHintRelateToOneInput>;
  property?: Maybe<PropertyRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketPropertyHintPropertyWhereInput = {
  AND?: Maybe<Array<Maybe<TicketPropertyHintPropertyWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketPropertyHintPropertyWhereInput>>>;
  ticketPropertyHint?: Maybe<TicketPropertyHintWhereInput>;
  ticketPropertyHint_is_null?: Maybe<Scalars['Boolean']>;
  property?: Maybe<PropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketPropertyHintPropertyWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketPropertyHintRelateToOneInput = {
  create?: Maybe<TicketPropertyHintCreateInput>;
  connect?: Maybe<TicketPropertyHintWhereUniqueInput>;
  disconnect?: Maybe<TicketPropertyHintWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type TicketPropertyHintUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  name?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketPropertyHintWhereInput = {
  AND?: Maybe<Array<Maybe<TicketPropertyHintWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketPropertyHintWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  content?: Maybe<Scalars['String']>;
  content_not?: Maybe<Scalars['String']>;
  content_contains?: Maybe<Scalars['String']>;
  content_not_contains?: Maybe<Scalars['String']>;
  content_starts_with?: Maybe<Scalars['String']>;
  content_not_starts_with?: Maybe<Scalars['String']>;
  content_ends_with?: Maybe<Scalars['String']>;
  content_not_ends_with?: Maybe<Scalars['String']>;
  content_i?: Maybe<Scalars['String']>;
  content_not_i?: Maybe<Scalars['String']>;
  content_contains_i?: Maybe<Scalars['String']>;
  content_not_contains_i?: Maybe<Scalars['String']>;
  content_starts_with_i?: Maybe<Scalars['String']>;
  content_not_starts_with_i?: Maybe<Scalars['String']>;
  content_ends_with_i?: Maybe<Scalars['String']>;
  content_not_ends_with_i?: Maybe<Scalars['String']>;
  content_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketPropertyHintWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketPropertyHintsCreateInput = {
  data?: Maybe<TicketPropertyHintCreateInput>;
};

export type TicketPropertyHintsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketPropertyHintUpdateInput>;
};

export enum TicketQualityControlValueType {
  Bad = 'bad',
  Good = 'good'
}

export type TicketRelateToOneInput = {
  create?: Maybe<TicketCreateInput>;
  connect?: Maybe<TicketWhereUniqueInput>;
  disconnect?: Maybe<TicketWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export type TicketReportData = {
  __typename?: 'TicketReportData';
  statusName: Scalars['String'];
  currentValue: Scalars['Int'];
  growth: Scalars['Float'];
  statusType: TicketStatusTypeType;
};

export enum TicketReportPeriodType {
  CalendarWeek = 'calendarWeek',
  Month = 'month',
  Quarter = 'quarter',
  Year = 'year'
}

export type TicketReportWidgetInput = {
  periodType: TicketReportPeriodType;
  offset?: Maybe<Scalars['Int']>;
  userOrganizationId: Scalars['String'];
};

export type TicketReportWidgetOutput = {
  __typename?: 'TicketReportWidgetOutput';
  data?: Maybe<Array<TicketReportData>>;
};

export enum TicketReviewValueType {
  Bad = 'bad',
  Good = 'good',
  Returned = 'returned'
}

/**  Ticket source. Income call, mobile app, external system, ...  */
export type TicketSource = {
  __typename?: 'TicketSource';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketSource List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketSource List config, or
   *  3. As an alias to a 'name' field on the TicketSource List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketSource List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. If this ref is null the object is common for all organizations  */
  organization?: Maybe<Organization>;
  type?: Maybe<TicketSourceTypeType>;
  /**  Localized Ticket source name  */
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketSourceCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  type?: Maybe<TicketSourceTypeType>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketSourceHistoryRecord = {
  __typename?: 'TicketSourceHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketSourceHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketSourceHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketSourceHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketSourceHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketSourceHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketSourceHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketSourceHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketSourceHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketSourceHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketSourceHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketSourceHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketSourceHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketSourceHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketSourceHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketSourceHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketSourceHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketSourceHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketSourceHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketSourceHistoryRecordsCreateInput = {
  data?: Maybe<TicketSourceHistoryRecordCreateInput>;
};

export type TicketSourceHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketSourceHistoryRecordUpdateInput>;
};

export type TicketSourceRelateToOneInput = {
  create?: Maybe<TicketSourceCreateInput>;
  connect?: Maybe<TicketSourceWhereUniqueInput>;
  disconnect?: Maybe<TicketSourceWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export enum TicketSourceTypeType {
  Email = 'email',
  MobileApp = 'mobile_app',
  RemoteSystem = 'remote_system',
  Call = 'call',
  Other = 'other',
  Visit = 'visit',
  WebApp = 'web_app',
  OrganizationSite = 'organization_site',
  Messenger = 'messenger',
  SocialNetwork = 'social_network',
  MobileAppStaff = 'mobile_app_staff',
  MobileAppResident = 'mobile_app_resident',
  CrmImport = 'crm_import'
}

export type TicketSourceUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  type?: Maybe<TicketSourceTypeType>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketSourceWhereInput = {
  AND?: Maybe<Array<Maybe<TicketSourceWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketSourceWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  type?: Maybe<TicketSourceTypeType>;
  type_not?: Maybe<TicketSourceTypeType>;
  type_in?: Maybe<Array<Maybe<TicketSourceTypeType>>>;
  type_not_in?: Maybe<Array<Maybe<TicketSourceTypeType>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketSourceWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketSourcesCreateInput = {
  data?: Maybe<TicketSourceCreateInput>;
};

export type TicketSourcesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketSourceUpdateInput>;
};

/**  Ticket status. We have a organization specific statuses  */
export type TicketStatus = {
  __typename?: 'TicketStatus';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketStatus List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketStatus List config, or
   *  3. As an alias to a 'name' field on the TicketStatus List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketStatus List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Ref to the organization. If this ref is null the object is common for all organizations  */
  organization?: Maybe<Organization>;
  /**  Ticket status. You should also increase `statusReopenedCounter` if you want to reopen ticket  */
  type?: Maybe<TicketStatusTypeType>;
  /**  Status name  */
  name?: Maybe<Scalars['String']>;
  nameNonLocalized?: Maybe<Scalars['String']>;
  /**  Status colors, includes primary (font color), secondary (background color), additional (border color), all colors presented in HEX  */
  colors?: Maybe<TicketStatusColorsField>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type TicketStatusColorsField = {
  __typename?: 'TicketStatusColorsField';
  primary?: Maybe<Scalars['String']>;
  secondary?: Maybe<Scalars['String']>;
  additional?: Maybe<Scalars['String']>;
};

export type TicketStatusCreateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  type?: Maybe<TicketStatusTypeType>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type TicketStatusHistoryRecord = {
  __typename?: 'TicketStatusHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the TicketStatusHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the TicketStatusHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the TicketStatusHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the TicketStatusHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  colors?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketStatusHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketStatusHistoryRecordCreateInput = {
  organization?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  colors?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketStatusHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum TicketStatusHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type TicketStatusHistoryRecordUpdateInput = {
  organization?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  colors?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<TicketStatusHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type TicketStatusHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<TicketStatusHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketStatusHistoryRecordWhereInput>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  colors?: Maybe<Scalars['JSON']>;
  colors_not?: Maybe<Scalars['JSON']>;
  colors_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  colors_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<TicketStatusHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<TicketStatusHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<TicketStatusHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<TicketStatusHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TicketStatusHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketStatusHistoryRecordsCreateInput = {
  data?: Maybe<TicketStatusHistoryRecordCreateInput>;
};

export type TicketStatusHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketStatusHistoryRecordUpdateInput>;
};

export type TicketStatusRelateToOneInput = {
  create?: Maybe<TicketStatusCreateInput>;
  connect?: Maybe<TicketStatusWhereUniqueInput>;
  disconnect?: Maybe<TicketStatusWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

export enum TicketStatusTypeType {
  NewOrReopened = 'new_or_reopened',
  Processing = 'processing',
  Canceled = 'canceled',
  Completed = 'completed',
  Deferred = 'deferred',
  Closed = 'closed'
}

export type TicketStatusUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  type?: Maybe<TicketStatusTypeType>;
  name?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketStatusWhereInput = {
  AND?: Maybe<Array<Maybe<TicketStatusWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketStatusWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  type?: Maybe<TicketStatusTypeType>;
  type_not?: Maybe<TicketStatusTypeType>;
  type_in?: Maybe<Array<Maybe<TicketStatusTypeType>>>;
  type_not_in?: Maybe<Array<Maybe<TicketStatusTypeType>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketStatusWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketStatusesCreateInput = {
  data?: Maybe<TicketStatusCreateInput>;
};

export type TicketStatusesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketStatusUpdateInput>;
};

export type TicketUpdateInput = {
  organization?: Maybe<OrganizationRelateToOneInput>;
  statusReopenedCounter?: Maybe<Scalars['Int']>;
  reviewValue?: Maybe<TicketReviewValueType>;
  reviewComment?: Maybe<Scalars['String']>;
  qualityControlValue?: Maybe<TicketQualityControlValueType>;
  qualityControlComment?: Maybe<Scalars['String']>;
  qualityControlAdditionalOptions?: Maybe<Array<Maybe<QualityControlAdditionalOptionsType>>>;
  qualityControlUpdatedAt?: Maybe<Scalars['String']>;
  qualityControlUpdatedBy?: Maybe<UserRelateToOneInput>;
  statusUpdatedAt?: Maybe<Scalars['String']>;
  completedAt?: Maybe<Scalars['String']>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  statusReason?: Maybe<Scalars['String']>;
  status?: Maybe<TicketStatusRelateToOneInput>;
  deadline?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  client?: Maybe<UserRelateToOneInput>;
  contact?: Maybe<ContactRelateToOneInput>;
  clientName?: Maybe<Scalars['String']>;
  clientEmail?: Maybe<Scalars['String']>;
  clientPhone?: Maybe<Scalars['String']>;
  assignee?: Maybe<UserRelateToOneInput>;
  executor?: Maybe<UserRelateToOneInput>;
  categoryClassifier?: Maybe<TicketCategoryClassifierRelateToOneInput>;
  placeClassifier?: Maybe<TicketPlaceClassifierRelateToOneInput>;
  problemClassifier?: Maybe<TicketProblemClassifierRelateToOneInput>;
  classifier?: Maybe<TicketClassifierRelateToOneInput>;
  isAutoClassified?: Maybe<Scalars['Boolean']>;
  details?: Maybe<Scalars['String']>;
  related?: Maybe<TicketRelateToOneInput>;
  isPaid?: Maybe<Scalars['Boolean']>;
  isEmergency?: Maybe<Scalars['Boolean']>;
  isWarranty?: Maybe<Scalars['Boolean']>;
  isResidentTicket?: Maybe<Scalars['Boolean']>;
  canReadByResident?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  property?: Maybe<PropertyRelateToOneInput>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  sectionName?: Maybe<Scalars['String']>;
  sectionType?: Maybe<Scalars['String']>;
  floorName?: Maybe<Scalars['String']>;
  unitName?: Maybe<Scalars['String']>;
  unitType?: Maybe<Scalars['String']>;
  source?: Maybe<TicketSourceRelateToOneInput>;
  sourceMeta?: Maybe<Scalars['JSON']>;
  deferredUntil?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type TicketWhereInput = {
  AND?: Maybe<Array<Maybe<TicketWhereInput>>>;
  OR?: Maybe<Array<Maybe<TicketWhereInput>>>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  statusReopenedCounter?: Maybe<Scalars['Int']>;
  statusReopenedCounter_not?: Maybe<Scalars['Int']>;
  statusReopenedCounter_lt?: Maybe<Scalars['Int']>;
  statusReopenedCounter_lte?: Maybe<Scalars['Int']>;
  statusReopenedCounter_gt?: Maybe<Scalars['Int']>;
  statusReopenedCounter_gte?: Maybe<Scalars['Int']>;
  statusReopenedCounter_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statusReopenedCounter_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  reviewValue?: Maybe<TicketReviewValueType>;
  reviewValue_not?: Maybe<TicketReviewValueType>;
  reviewValue_in?: Maybe<Array<Maybe<TicketReviewValueType>>>;
  reviewValue_not_in?: Maybe<Array<Maybe<TicketReviewValueType>>>;
  reviewComment?: Maybe<Scalars['String']>;
  reviewComment_not?: Maybe<Scalars['String']>;
  reviewComment_contains?: Maybe<Scalars['String']>;
  reviewComment_not_contains?: Maybe<Scalars['String']>;
  reviewComment_starts_with?: Maybe<Scalars['String']>;
  reviewComment_not_starts_with?: Maybe<Scalars['String']>;
  reviewComment_ends_with?: Maybe<Scalars['String']>;
  reviewComment_not_ends_with?: Maybe<Scalars['String']>;
  reviewComment_i?: Maybe<Scalars['String']>;
  reviewComment_not_i?: Maybe<Scalars['String']>;
  reviewComment_contains_i?: Maybe<Scalars['String']>;
  reviewComment_not_contains_i?: Maybe<Scalars['String']>;
  reviewComment_starts_with_i?: Maybe<Scalars['String']>;
  reviewComment_not_starts_with_i?: Maybe<Scalars['String']>;
  reviewComment_ends_with_i?: Maybe<Scalars['String']>;
  reviewComment_not_ends_with_i?: Maybe<Scalars['String']>;
  reviewComment_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewComment_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlValue?: Maybe<TicketQualityControlValueType>;
  qualityControlValue_not?: Maybe<TicketQualityControlValueType>;
  qualityControlValue_in?: Maybe<Array<Maybe<TicketQualityControlValueType>>>;
  qualityControlValue_not_in?: Maybe<Array<Maybe<TicketQualityControlValueType>>>;
  qualityControlComment?: Maybe<Scalars['String']>;
  qualityControlComment_not?: Maybe<Scalars['String']>;
  qualityControlComment_contains?: Maybe<Scalars['String']>;
  qualityControlComment_not_contains?: Maybe<Scalars['String']>;
  qualityControlComment_starts_with?: Maybe<Scalars['String']>;
  qualityControlComment_not_starts_with?: Maybe<Scalars['String']>;
  qualityControlComment_ends_with?: Maybe<Scalars['String']>;
  qualityControlComment_not_ends_with?: Maybe<Scalars['String']>;
  qualityControlComment_i?: Maybe<Scalars['String']>;
  qualityControlComment_not_i?: Maybe<Scalars['String']>;
  qualityControlComment_contains_i?: Maybe<Scalars['String']>;
  qualityControlComment_not_contains_i?: Maybe<Scalars['String']>;
  qualityControlComment_starts_with_i?: Maybe<Scalars['String']>;
  qualityControlComment_not_starts_with_i?: Maybe<Scalars['String']>;
  qualityControlComment_ends_with_i?: Maybe<Scalars['String']>;
  qualityControlComment_not_ends_with_i?: Maybe<Scalars['String']>;
  qualityControlComment_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlComment_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlAdditionalOptions?: Maybe<Array<Maybe<QualityControlAdditionalOptionsType>>>;
  qualityControlAdditionalOptions_not?: Maybe<Array<Maybe<QualityControlAdditionalOptionsType>>>;
  qualityControlAdditionalOptions_in?: Maybe<Array<Maybe<Array<Maybe<QualityControlAdditionalOptionsType>>>>>;
  qualityControlAdditionalOptions_not_in?: Maybe<Array<Maybe<Array<Maybe<QualityControlAdditionalOptionsType>>>>>;
  qualityControlUpdatedAt?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_not?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_lt?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_lte?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_gt?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_gte?: Maybe<Scalars['String']>;
  qualityControlUpdatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlUpdatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  qualityControlUpdatedBy?: Maybe<UserWhereInput>;
  qualityControlUpdatedBy_is_null?: Maybe<Scalars['Boolean']>;
  statusUpdatedAt?: Maybe<Scalars['String']>;
  statusUpdatedAt_not?: Maybe<Scalars['String']>;
  statusUpdatedAt_lt?: Maybe<Scalars['String']>;
  statusUpdatedAt_lte?: Maybe<Scalars['String']>;
  statusUpdatedAt_gt?: Maybe<Scalars['String']>;
  statusUpdatedAt_gte?: Maybe<Scalars['String']>;
  statusUpdatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusUpdatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  completedAt?: Maybe<Scalars['String']>;
  completedAt_not?: Maybe<Scalars['String']>;
  completedAt_lt?: Maybe<Scalars['String']>;
  completedAt_lte?: Maybe<Scalars['String']>;
  completedAt_gt?: Maybe<Scalars['String']>;
  completedAt_gte?: Maybe<Scalars['String']>;
  completedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  completedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastCommentAt?: Maybe<Scalars['String']>;
  lastCommentAt_not?: Maybe<Scalars['String']>;
  lastCommentAt_lt?: Maybe<Scalars['String']>;
  lastCommentAt_lte?: Maybe<Scalars['String']>;
  lastCommentAt_gt?: Maybe<Scalars['String']>;
  lastCommentAt_gte?: Maybe<Scalars['String']>;
  lastCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastResidentCommentAt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_not?: Maybe<Scalars['String']>;
  lastResidentCommentAt_lt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_lte?: Maybe<Scalars['String']>;
  lastResidentCommentAt_gt?: Maybe<Scalars['String']>;
  lastResidentCommentAt_gte?: Maybe<Scalars['String']>;
  lastResidentCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastResidentCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusReason?: Maybe<Scalars['String']>;
  statusReason_not?: Maybe<Scalars['String']>;
  statusReason_contains?: Maybe<Scalars['String']>;
  statusReason_not_contains?: Maybe<Scalars['String']>;
  statusReason_starts_with?: Maybe<Scalars['String']>;
  statusReason_not_starts_with?: Maybe<Scalars['String']>;
  statusReason_ends_with?: Maybe<Scalars['String']>;
  statusReason_not_ends_with?: Maybe<Scalars['String']>;
  statusReason_i?: Maybe<Scalars['String']>;
  statusReason_not_i?: Maybe<Scalars['String']>;
  statusReason_contains_i?: Maybe<Scalars['String']>;
  statusReason_not_contains_i?: Maybe<Scalars['String']>;
  statusReason_starts_with_i?: Maybe<Scalars['String']>;
  statusReason_not_starts_with_i?: Maybe<Scalars['String']>;
  statusReason_ends_with_i?: Maybe<Scalars['String']>;
  statusReason_not_ends_with_i?: Maybe<Scalars['String']>;
  statusReason_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusReason_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  status?: Maybe<TicketStatusWhereInput>;
  status_is_null?: Maybe<Scalars['Boolean']>;
  deadline?: Maybe<Scalars['String']>;
  deadline_not?: Maybe<Scalars['String']>;
  deadline_lt?: Maybe<Scalars['String']>;
  deadline_lte?: Maybe<Scalars['String']>;
  deadline_gt?: Maybe<Scalars['String']>;
  deadline_gte?: Maybe<Scalars['String']>;
  deadline_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deadline_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  order?: Maybe<Scalars['Int']>;
  order_not?: Maybe<Scalars['Int']>;
  order_lt?: Maybe<Scalars['Int']>;
  order_lte?: Maybe<Scalars['Int']>;
  order_gt?: Maybe<Scalars['Int']>;
  order_gte?: Maybe<Scalars['Int']>;
  order_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  order_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  number?: Maybe<Scalars['Int']>;
  number_not?: Maybe<Scalars['Int']>;
  number_lt?: Maybe<Scalars['Int']>;
  number_lte?: Maybe<Scalars['Int']>;
  number_gt?: Maybe<Scalars['Int']>;
  number_gte?: Maybe<Scalars['Int']>;
  number_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  number_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  client?: Maybe<UserWhereInput>;
  client_is_null?: Maybe<Scalars['Boolean']>;
  contact?: Maybe<ContactWhereInput>;
  contact_is_null?: Maybe<Scalars['Boolean']>;
  clientName?: Maybe<Scalars['String']>;
  clientName_not?: Maybe<Scalars['String']>;
  clientName_contains?: Maybe<Scalars['String']>;
  clientName_not_contains?: Maybe<Scalars['String']>;
  clientName_starts_with?: Maybe<Scalars['String']>;
  clientName_not_starts_with?: Maybe<Scalars['String']>;
  clientName_ends_with?: Maybe<Scalars['String']>;
  clientName_not_ends_with?: Maybe<Scalars['String']>;
  clientName_i?: Maybe<Scalars['String']>;
  clientName_not_i?: Maybe<Scalars['String']>;
  clientName_contains_i?: Maybe<Scalars['String']>;
  clientName_not_contains_i?: Maybe<Scalars['String']>;
  clientName_starts_with_i?: Maybe<Scalars['String']>;
  clientName_not_starts_with_i?: Maybe<Scalars['String']>;
  clientName_ends_with_i?: Maybe<Scalars['String']>;
  clientName_not_ends_with_i?: Maybe<Scalars['String']>;
  clientName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmail?: Maybe<Scalars['String']>;
  clientEmail_not?: Maybe<Scalars['String']>;
  clientEmail_contains?: Maybe<Scalars['String']>;
  clientEmail_not_contains?: Maybe<Scalars['String']>;
  clientEmail_starts_with?: Maybe<Scalars['String']>;
  clientEmail_not_starts_with?: Maybe<Scalars['String']>;
  clientEmail_ends_with?: Maybe<Scalars['String']>;
  clientEmail_not_ends_with?: Maybe<Scalars['String']>;
  clientEmail_i?: Maybe<Scalars['String']>;
  clientEmail_not_i?: Maybe<Scalars['String']>;
  clientEmail_contains_i?: Maybe<Scalars['String']>;
  clientEmail_not_contains_i?: Maybe<Scalars['String']>;
  clientEmail_starts_with_i?: Maybe<Scalars['String']>;
  clientEmail_not_starts_with_i?: Maybe<Scalars['String']>;
  clientEmail_ends_with_i?: Maybe<Scalars['String']>;
  clientEmail_not_ends_with_i?: Maybe<Scalars['String']>;
  clientEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhone?: Maybe<Scalars['String']>;
  clientPhone_not?: Maybe<Scalars['String']>;
  clientPhone_contains?: Maybe<Scalars['String']>;
  clientPhone_not_contains?: Maybe<Scalars['String']>;
  clientPhone_starts_with?: Maybe<Scalars['String']>;
  clientPhone_not_starts_with?: Maybe<Scalars['String']>;
  clientPhone_ends_with?: Maybe<Scalars['String']>;
  clientPhone_not_ends_with?: Maybe<Scalars['String']>;
  clientPhone_i?: Maybe<Scalars['String']>;
  clientPhone_not_i?: Maybe<Scalars['String']>;
  clientPhone_contains_i?: Maybe<Scalars['String']>;
  clientPhone_not_contains_i?: Maybe<Scalars['String']>;
  clientPhone_starts_with_i?: Maybe<Scalars['String']>;
  clientPhone_not_starts_with_i?: Maybe<Scalars['String']>;
  clientPhone_ends_with_i?: Maybe<Scalars['String']>;
  clientPhone_not_ends_with_i?: Maybe<Scalars['String']>;
  clientPhone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  clientPhone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignee?: Maybe<UserWhereInput>;
  assignee_is_null?: Maybe<Scalars['Boolean']>;
  executor?: Maybe<UserWhereInput>;
  executor_is_null?: Maybe<Scalars['Boolean']>;
  categoryClassifier?: Maybe<TicketCategoryClassifierWhereInput>;
  categoryClassifier_is_null?: Maybe<Scalars['Boolean']>;
  placeClassifier?: Maybe<TicketPlaceClassifierWhereInput>;
  placeClassifier_is_null?: Maybe<Scalars['Boolean']>;
  problemClassifier?: Maybe<TicketProblemClassifierWhereInput>;
  problemClassifier_is_null?: Maybe<Scalars['Boolean']>;
  classifier?: Maybe<TicketClassifierWhereInput>;
  classifier_is_null?: Maybe<Scalars['Boolean']>;
  isAutoClassified?: Maybe<Scalars['Boolean']>;
  isAutoClassified_not?: Maybe<Scalars['Boolean']>;
  details?: Maybe<Scalars['String']>;
  details_not?: Maybe<Scalars['String']>;
  details_contains?: Maybe<Scalars['String']>;
  details_not_contains?: Maybe<Scalars['String']>;
  details_starts_with?: Maybe<Scalars['String']>;
  details_not_starts_with?: Maybe<Scalars['String']>;
  details_ends_with?: Maybe<Scalars['String']>;
  details_not_ends_with?: Maybe<Scalars['String']>;
  details_i?: Maybe<Scalars['String']>;
  details_not_i?: Maybe<Scalars['String']>;
  details_contains_i?: Maybe<Scalars['String']>;
  details_not_contains_i?: Maybe<Scalars['String']>;
  details_starts_with_i?: Maybe<Scalars['String']>;
  details_not_starts_with_i?: Maybe<Scalars['String']>;
  details_ends_with_i?: Maybe<Scalars['String']>;
  details_not_ends_with_i?: Maybe<Scalars['String']>;
  details_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  details_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  related?: Maybe<TicketWhereInput>;
  related_is_null?: Maybe<Scalars['Boolean']>;
  isPaid?: Maybe<Scalars['Boolean']>;
  isPaid_not?: Maybe<Scalars['Boolean']>;
  isEmergency?: Maybe<Scalars['Boolean']>;
  isEmergency_not?: Maybe<Scalars['Boolean']>;
  isWarranty?: Maybe<Scalars['Boolean']>;
  isWarranty_not?: Maybe<Scalars['Boolean']>;
  isResidentTicket?: Maybe<Scalars['Boolean']>;
  isResidentTicket_not?: Maybe<Scalars['Boolean']>;
  canReadByResident?: Maybe<Scalars['Boolean']>;
  canReadByResident_not?: Maybe<Scalars['Boolean']>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  property?: Maybe<PropertyWhereInput>;
  property_is_null?: Maybe<Scalars['Boolean']>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyAddress_not?: Maybe<Scalars['String']>;
  propertyAddress_contains?: Maybe<Scalars['String']>;
  propertyAddress_not_contains?: Maybe<Scalars['String']>;
  propertyAddress_starts_with?: Maybe<Scalars['String']>;
  propertyAddress_not_starts_with?: Maybe<Scalars['String']>;
  propertyAddress_ends_with?: Maybe<Scalars['String']>;
  propertyAddress_not_ends_with?: Maybe<Scalars['String']>;
  propertyAddress_i?: Maybe<Scalars['String']>;
  propertyAddress_not_i?: Maybe<Scalars['String']>;
  propertyAddress_contains_i?: Maybe<Scalars['String']>;
  propertyAddress_not_contains_i?: Maybe<Scalars['String']>;
  propertyAddress_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddress_not_starts_with_i?: Maybe<Scalars['String']>;
  propertyAddress_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddress_not_ends_with_i?: Maybe<Scalars['String']>;
  propertyAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyAddressMeta?: Maybe<Scalars['JSON']>;
  propertyAddressMeta_not?: Maybe<Scalars['JSON']>;
  propertyAddressMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  propertyAddressMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sectionName?: Maybe<Scalars['String']>;
  sectionName_not?: Maybe<Scalars['String']>;
  sectionName_contains?: Maybe<Scalars['String']>;
  sectionName_not_contains?: Maybe<Scalars['String']>;
  sectionName_starts_with?: Maybe<Scalars['String']>;
  sectionName_not_starts_with?: Maybe<Scalars['String']>;
  sectionName_ends_with?: Maybe<Scalars['String']>;
  sectionName_not_ends_with?: Maybe<Scalars['String']>;
  sectionName_i?: Maybe<Scalars['String']>;
  sectionName_not_i?: Maybe<Scalars['String']>;
  sectionName_contains_i?: Maybe<Scalars['String']>;
  sectionName_not_contains_i?: Maybe<Scalars['String']>;
  sectionName_starts_with_i?: Maybe<Scalars['String']>;
  sectionName_not_starts_with_i?: Maybe<Scalars['String']>;
  sectionName_ends_with_i?: Maybe<Scalars['String']>;
  sectionName_not_ends_with_i?: Maybe<Scalars['String']>;
  sectionName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionType?: Maybe<Scalars['String']>;
  sectionType_not?: Maybe<Scalars['String']>;
  sectionType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sectionType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floorName?: Maybe<Scalars['String']>;
  floorName_not?: Maybe<Scalars['String']>;
  floorName_contains?: Maybe<Scalars['String']>;
  floorName_not_contains?: Maybe<Scalars['String']>;
  floorName_starts_with?: Maybe<Scalars['String']>;
  floorName_not_starts_with?: Maybe<Scalars['String']>;
  floorName_ends_with?: Maybe<Scalars['String']>;
  floorName_not_ends_with?: Maybe<Scalars['String']>;
  floorName_i?: Maybe<Scalars['String']>;
  floorName_not_i?: Maybe<Scalars['String']>;
  floorName_contains_i?: Maybe<Scalars['String']>;
  floorName_not_contains_i?: Maybe<Scalars['String']>;
  floorName_starts_with_i?: Maybe<Scalars['String']>;
  floorName_not_starts_with_i?: Maybe<Scalars['String']>;
  floorName_ends_with_i?: Maybe<Scalars['String']>;
  floorName_not_ends_with_i?: Maybe<Scalars['String']>;
  floorName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floorName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName?: Maybe<Scalars['String']>;
  unitName_not?: Maybe<Scalars['String']>;
  unitName_contains?: Maybe<Scalars['String']>;
  unitName_not_contains?: Maybe<Scalars['String']>;
  unitName_starts_with?: Maybe<Scalars['String']>;
  unitName_not_starts_with?: Maybe<Scalars['String']>;
  unitName_ends_with?: Maybe<Scalars['String']>;
  unitName_not_ends_with?: Maybe<Scalars['String']>;
  unitName_i?: Maybe<Scalars['String']>;
  unitName_not_i?: Maybe<Scalars['String']>;
  unitName_contains_i?: Maybe<Scalars['String']>;
  unitName_not_contains_i?: Maybe<Scalars['String']>;
  unitName_starts_with_i?: Maybe<Scalars['String']>;
  unitName_not_starts_with_i?: Maybe<Scalars['String']>;
  unitName_ends_with_i?: Maybe<Scalars['String']>;
  unitName_not_ends_with_i?: Maybe<Scalars['String']>;
  unitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType?: Maybe<Scalars['String']>;
  unitType_not?: Maybe<Scalars['String']>;
  unitType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  source?: Maybe<TicketSourceWhereInput>;
  source_is_null?: Maybe<Scalars['Boolean']>;
  sourceMeta?: Maybe<Scalars['JSON']>;
  sourceMeta_not?: Maybe<Scalars['JSON']>;
  sourceMeta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sourceMeta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  deferredUntil?: Maybe<Scalars['String']>;
  deferredUntil_not?: Maybe<Scalars['String']>;
  deferredUntil_lt?: Maybe<Scalars['String']>;
  deferredUntil_lte?: Maybe<Scalars['String']>;
  deferredUntil_gt?: Maybe<Scalars['String']>;
  deferredUntil_gte?: Maybe<Scalars['String']>;
  deferredUntil_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deferredUntil_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type TicketWhereUniqueInput = {
  id: Scalars['ID'];
};

export type TicketsCreateInput = {
  data?: Maybe<TicketCreateInput>;
};

export type TicketsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<TicketUpdateInput>;
};


/**  Individual / person / service account / impersonal company account. Used primarily for authorization purposes, optimized access control with checking of `type` field, tracking authority of performed CRUD operations. Think of `User` as a technical entity, not a business actor. Business actor entities are Resident, OrganizationEmployee etc., — they are participating in high-level business scenarios and have connected to `User`. Almost everyting, created in the system, ends up to `User` as a source of action.  */
export type User = {
  __typename?: 'User';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the User List config, or
   *  2. As an alias to the field set on 'labelField' in the User List config, or
   *  3. As an alias to a 'name' field on the User List (if one exists), or
   *  4. As an alias to the 'id' field on the User List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Name. If impersonal account should be a company name  */
  name?: Maybe<Scalars['String']>;
  hasEmail?: Maybe<Scalars['String']>;
  /**  Password. Update only  */
  password_is_set?: Maybe<Scalars['Boolean']>;
  /**  Field that allows you to distinguish CRM users from mobile app users  */
  type?: Maybe<UserTypeType>;
  /**  Superuser access to service data  */
  isAdmin?: Maybe<Scalars['Boolean']>;
  /**  Can access to "/admin/" panel. And do support tasks  */
  isSupport?: Maybe<Scalars['Boolean']>;
  /**  Email. Transformed to lower case  */
  email?: Maybe<Scalars['String']>;
  /**  Email verification flag. User verify email by access to secret link  */
  isEmailVerified?: Maybe<Scalars['Boolean']>;
  /**  Phone. In international E.164 format without spaces  */
  phone?: Maybe<Scalars['String']>;
  /**  Phone verification flag. User verify phone by access to secret sms message  */
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  /**  User loaded avatar image  */
  avatar?: Maybe<File>;
  /**  User metadata. Example: `city`, `country`, ...  */
  meta?: Maybe<Scalars['JSON']>;
  /**  The user's locale  */
  locale?: Maybe<UserLocaleType>;
  /**  Override for business access rights for list or field of provided schema  */
  customAccess?: Maybe<CustomAccess>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};


/**  Individual / person / service account / impersonal company account. Used primarily for authorization purposes, optimized access control with checking of `type` field, tracking authority of performed CRUD operations. Think of `User` as a technical entity, not a business actor. Business actor entities are Resident, OrganizationEmployee etc., — they are participating in high-level business scenarios and have connected to `User`. Almost everyting, created in the system, ends up to `User` as a source of action.  */
export type UserHasEmailArgs = {
  formatAs?: Maybe<Scalars['String']>;
};

export type UserCreateInput = {
  name?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  type?: Maybe<UserTypeType>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  isSupport?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  isEmailVerified?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  avatar?: Maybe<Scalars['Upload']>;
  meta?: Maybe<Scalars['JSON']>;
  locale?: Maybe<UserLocaleType>;
  customAccess?: Maybe<CustomAccessInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type UserExternalIdentitiesCreateInput = {
  data?: Maybe<UserExternalIdentityCreateInput>;
};

export type UserExternalIdentitiesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<UserExternalIdentityUpdateInput>;
};

/**  Individual user external identity link. Used primarily for authorization and linking to external identity provider purposes. Think of `User` as a technical entity, not a business actor.  */
export type UserExternalIdentity = {
  __typename?: 'UserExternalIdentity';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the UserExternalIdentity List config, or
   *  2. As an alias to the field set on 'labelField' in the UserExternalIdentity List config, or
   *  3. As an alias to a 'name' field on the UserExternalIdentity List (if one exists), or
   *  4. As an alias to the 'id' field on the UserExternalIdentity List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Link to user  */
  user?: Maybe<User>;
  /**  External identity id. The value of this field should be populated from an external identity provider  */
  identityId?: Maybe<Scalars['String']>;
  /**  The type of external identity that was a source for this link  */
  identityType?: Maybe<UserExternalIdentityIdentityTypeType>;
  /**  External identity provider user metadata  */
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type UserExternalIdentityCreateInput = {
  user?: Maybe<UserRelateToOneInput>;
  identityId?: Maybe<Scalars['String']>;
  identityType?: Maybe<UserExternalIdentityIdentityTypeType>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type UserExternalIdentityHistoryRecord = {
  __typename?: 'UserExternalIdentityHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the UserExternalIdentityHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the UserExternalIdentityHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the UserExternalIdentityHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the UserExternalIdentityHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  identityId?: Maybe<Scalars['String']>;
  identityType?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserExternalIdentityHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type UserExternalIdentityHistoryRecordCreateInput = {
  user?: Maybe<Scalars['String']>;
  identityId?: Maybe<Scalars['String']>;
  identityType?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserExternalIdentityHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum UserExternalIdentityHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type UserExternalIdentityHistoryRecordUpdateInput = {
  user?: Maybe<Scalars['String']>;
  identityId?: Maybe<Scalars['String']>;
  identityType?: Maybe<Scalars['String']>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserExternalIdentityHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type UserExternalIdentityHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<UserExternalIdentityHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<UserExternalIdentityHistoryRecordWhereInput>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  identityId?: Maybe<Scalars['String']>;
  identityId_not?: Maybe<Scalars['String']>;
  identityId_contains?: Maybe<Scalars['String']>;
  identityId_not_contains?: Maybe<Scalars['String']>;
  identityId_starts_with?: Maybe<Scalars['String']>;
  identityId_not_starts_with?: Maybe<Scalars['String']>;
  identityId_ends_with?: Maybe<Scalars['String']>;
  identityId_not_ends_with?: Maybe<Scalars['String']>;
  identityId_i?: Maybe<Scalars['String']>;
  identityId_not_i?: Maybe<Scalars['String']>;
  identityId_contains_i?: Maybe<Scalars['String']>;
  identityId_not_contains_i?: Maybe<Scalars['String']>;
  identityId_starts_with_i?: Maybe<Scalars['String']>;
  identityId_not_starts_with_i?: Maybe<Scalars['String']>;
  identityId_ends_with_i?: Maybe<Scalars['String']>;
  identityId_not_ends_with_i?: Maybe<Scalars['String']>;
  identityId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  identityId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  identityType?: Maybe<Scalars['String']>;
  identityType_not?: Maybe<Scalars['String']>;
  identityType_contains?: Maybe<Scalars['String']>;
  identityType_not_contains?: Maybe<Scalars['String']>;
  identityType_starts_with?: Maybe<Scalars['String']>;
  identityType_not_starts_with?: Maybe<Scalars['String']>;
  identityType_ends_with?: Maybe<Scalars['String']>;
  identityType_not_ends_with?: Maybe<Scalars['String']>;
  identityType_i?: Maybe<Scalars['String']>;
  identityType_not_i?: Maybe<Scalars['String']>;
  identityType_contains_i?: Maybe<Scalars['String']>;
  identityType_not_contains_i?: Maybe<Scalars['String']>;
  identityType_starts_with_i?: Maybe<Scalars['String']>;
  identityType_not_starts_with_i?: Maybe<Scalars['String']>;
  identityType_ends_with_i?: Maybe<Scalars['String']>;
  identityType_not_ends_with_i?: Maybe<Scalars['String']>;
  identityType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  identityType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<UserExternalIdentityHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<UserExternalIdentityHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<UserExternalIdentityHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<UserExternalIdentityHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type UserExternalIdentityHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type UserExternalIdentityHistoryRecordsCreateInput = {
  data?: Maybe<UserExternalIdentityHistoryRecordCreateInput>;
};

export type UserExternalIdentityHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<UserExternalIdentityHistoryRecordUpdateInput>;
};

export enum UserExternalIdentityIdentityTypeType {
  SberId = 'sber_id',
  Sbbol = 'sbbol'
}

export type UserExternalIdentityUpdateInput = {
  user?: Maybe<UserRelateToOneInput>;
  identityId?: Maybe<Scalars['String']>;
  identityType?: Maybe<UserExternalIdentityIdentityTypeType>;
  meta?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type UserExternalIdentityWhereInput = {
  AND?: Maybe<Array<Maybe<UserExternalIdentityWhereInput>>>;
  OR?: Maybe<Array<Maybe<UserExternalIdentityWhereInput>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  identityId?: Maybe<Scalars['String']>;
  identityId_not?: Maybe<Scalars['String']>;
  identityId_contains?: Maybe<Scalars['String']>;
  identityId_not_contains?: Maybe<Scalars['String']>;
  identityId_starts_with?: Maybe<Scalars['String']>;
  identityId_not_starts_with?: Maybe<Scalars['String']>;
  identityId_ends_with?: Maybe<Scalars['String']>;
  identityId_not_ends_with?: Maybe<Scalars['String']>;
  identityId_i?: Maybe<Scalars['String']>;
  identityId_not_i?: Maybe<Scalars['String']>;
  identityId_contains_i?: Maybe<Scalars['String']>;
  identityId_not_contains_i?: Maybe<Scalars['String']>;
  identityId_starts_with_i?: Maybe<Scalars['String']>;
  identityId_not_starts_with_i?: Maybe<Scalars['String']>;
  identityId_ends_with_i?: Maybe<Scalars['String']>;
  identityId_not_ends_with_i?: Maybe<Scalars['String']>;
  identityId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  identityId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  identityType?: Maybe<UserExternalIdentityIdentityTypeType>;
  identityType_not?: Maybe<UserExternalIdentityIdentityTypeType>;
  identityType_in?: Maybe<Array<Maybe<UserExternalIdentityIdentityTypeType>>>;
  identityType_not_in?: Maybe<Array<Maybe<UserExternalIdentityIdentityTypeType>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type UserExternalIdentityWhereUniqueInput = {
  id: Scalars['ID'];
};

/**  Ticket that user has added to favorites  */
export type UserFavoriteTicket = {
  __typename?: 'UserFavoriteTicket';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the UserFavoriteTicket List config, or
   *  2. As an alias to the field set on 'labelField' in the UserFavoriteTicket List config, or
   *  3. As an alias to a 'name' field on the UserFavoriteTicket List (if one exists), or
   *  4. As an alias to the 'id' field on the UserFavoriteTicket List.
   */
  _label_?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
  ticket?: Maybe<Ticket>;
  /**  Ref to the organization. It is filled in on the server and is read-only  */
  organization?: Maybe<Organization>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type UserFavoriteTicketCreateInput = {
  user?: Maybe<UserRelateToOneInput>;
  ticket?: Maybe<TicketRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type UserFavoriteTicketHistoryRecord = {
  __typename?: 'UserFavoriteTicketHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the UserFavoriteTicketHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the UserFavoriteTicketHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the UserFavoriteTicketHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the UserFavoriteTicketHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserFavoriteTicketHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type UserFavoriteTicketHistoryRecordCreateInput = {
  user?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserFavoriteTicketHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum UserFavoriteTicketHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type UserFavoriteTicketHistoryRecordUpdateInput = {
  user?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserFavoriteTicketHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type UserFavoriteTicketHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<UserFavoriteTicketHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<UserFavoriteTicketHistoryRecordWhereInput>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket?: Maybe<Scalars['String']>;
  ticket_not?: Maybe<Scalars['String']>;
  ticket_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization?: Maybe<Scalars['String']>;
  organization_not?: Maybe<Scalars['String']>;
  organization_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organization_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<UserFavoriteTicketHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<UserFavoriteTicketHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<UserFavoriteTicketHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<UserFavoriteTicketHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type UserFavoriteTicketHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type UserFavoriteTicketHistoryRecordsCreateInput = {
  data?: Maybe<UserFavoriteTicketHistoryRecordCreateInput>;
};

export type UserFavoriteTicketHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<UserFavoriteTicketHistoryRecordUpdateInput>;
};

export type UserFavoriteTicketUpdateInput = {
  user?: Maybe<UserRelateToOneInput>;
  ticket?: Maybe<TicketRelateToOneInput>;
  organization?: Maybe<OrganizationRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type UserFavoriteTicketWhereInput = {
  AND?: Maybe<Array<Maybe<UserFavoriteTicketWhereInput>>>;
  OR?: Maybe<Array<Maybe<UserFavoriteTicketWhereInput>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  ticket?: Maybe<TicketWhereInput>;
  ticket_is_null?: Maybe<Scalars['Boolean']>;
  organization?: Maybe<OrganizationWhereInput>;
  organization_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type UserFavoriteTicketWhereUniqueInput = {
  id: Scalars['ID'];
};

export type UserFavoriteTicketsCreateInput = {
  data?: Maybe<UserFavoriteTicketCreateInput>;
};

export type UserFavoriteTicketsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<UserFavoriteTicketUpdateInput>;
};

/**  A keystone list  */
export type UserHistoryRecord = {
  __typename?: 'UserHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the UserHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the UserHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the UserHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the UserHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  hasEmail?: Maybe<Scalars['JSON']>;
  password?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  isSupport?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  isEmailVerified?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  avatar?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  customAccess?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type UserHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  hasEmail?: Maybe<Scalars['JSON']>;
  password?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  isSupport?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  isEmailVerified?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  avatar?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  customAccess?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum UserHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type UserHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  hasEmail?: Maybe<Scalars['JSON']>;
  password?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  isSupport?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  isEmailVerified?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  avatar?: Maybe<Scalars['JSON']>;
  meta?: Maybe<Scalars['JSON']>;
  locale?: Maybe<Scalars['String']>;
  customAccess?: Maybe<Scalars['JSON']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type UserHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<UserHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<UserHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  hasEmail?: Maybe<Scalars['JSON']>;
  hasEmail_not?: Maybe<Scalars['JSON']>;
  hasEmail_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  hasEmail_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  password?: Maybe<Scalars['String']>;
  password_not?: Maybe<Scalars['String']>;
  password_contains?: Maybe<Scalars['String']>;
  password_not_contains?: Maybe<Scalars['String']>;
  password_starts_with?: Maybe<Scalars['String']>;
  password_not_starts_with?: Maybe<Scalars['String']>;
  password_ends_with?: Maybe<Scalars['String']>;
  password_not_ends_with?: Maybe<Scalars['String']>;
  password_i?: Maybe<Scalars['String']>;
  password_not_i?: Maybe<Scalars['String']>;
  password_contains_i?: Maybe<Scalars['String']>;
  password_not_contains_i?: Maybe<Scalars['String']>;
  password_starts_with_i?: Maybe<Scalars['String']>;
  password_not_starts_with_i?: Maybe<Scalars['String']>;
  password_ends_with_i?: Maybe<Scalars['String']>;
  password_not_ends_with_i?: Maybe<Scalars['String']>;
  password_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  password_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Scalars['String']>;
  type_not?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_i?: Maybe<Scalars['String']>;
  type_not_i?: Maybe<Scalars['String']>;
  type_contains_i?: Maybe<Scalars['String']>;
  type_not_contains_i?: Maybe<Scalars['String']>;
  type_starts_with_i?: Maybe<Scalars['String']>;
  type_not_starts_with_i?: Maybe<Scalars['String']>;
  type_ends_with_i?: Maybe<Scalars['String']>;
  type_not_ends_with_i?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  isAdmin_not?: Maybe<Scalars['Boolean']>;
  isSupport?: Maybe<Scalars['Boolean']>;
  isSupport_not?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isEmailVerified?: Maybe<Scalars['Boolean']>;
  isEmailVerified_not?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  isPhoneVerified_not?: Maybe<Scalars['Boolean']>;
  avatar?: Maybe<Scalars['JSON']>;
  avatar_not?: Maybe<Scalars['JSON']>;
  avatar_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  avatar_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  locale?: Maybe<Scalars['String']>;
  locale_not?: Maybe<Scalars['String']>;
  locale_contains?: Maybe<Scalars['String']>;
  locale_not_contains?: Maybe<Scalars['String']>;
  locale_starts_with?: Maybe<Scalars['String']>;
  locale_not_starts_with?: Maybe<Scalars['String']>;
  locale_ends_with?: Maybe<Scalars['String']>;
  locale_not_ends_with?: Maybe<Scalars['String']>;
  locale_i?: Maybe<Scalars['String']>;
  locale_not_i?: Maybe<Scalars['String']>;
  locale_contains_i?: Maybe<Scalars['String']>;
  locale_not_contains_i?: Maybe<Scalars['String']>;
  locale_starts_with_i?: Maybe<Scalars['String']>;
  locale_not_starts_with_i?: Maybe<Scalars['String']>;
  locale_ends_with_i?: Maybe<Scalars['String']>;
  locale_not_ends_with_i?: Maybe<Scalars['String']>;
  locale_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  locale_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customAccess?: Maybe<Scalars['JSON']>;
  customAccess_not?: Maybe<Scalars['JSON']>;
  customAccess_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  customAccess_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<UserHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<UserHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<UserHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<UserHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type UserHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type UserHistoryRecordsCreateInput = {
  data?: Maybe<UserHistoryRecordCreateInput>;
};

export type UserHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<UserHistoryRecordUpdateInput>;
};

export enum UserLocaleType {
  Ru = 'ru',
  En = 'en'
}

export type UserRelateToOneInput = {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

/**  Time when a comment from a resident was last read by a specific user in a specific ticket  */
export type UserTicketCommentReadTime = {
  __typename?: 'UserTicketCommentReadTime';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the UserTicketCommentReadTime List config, or
   *  2. As an alias to the field set on 'labelField' in the UserTicketCommentReadTime List config, or
   *  3. As an alias to a 'name' field on the UserTicketCommentReadTime List (if one exists), or
   *  4. As an alias to the 'id' field on the UserTicketCommentReadTime List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  The user who read the comment  */
  user?: Maybe<User>;
  /**  Ticket in which the user read the comment  */
  ticket?: Maybe<Ticket>;
  /**  Time when the last comment was last read by the user  */
  readCommentAt?: Maybe<Scalars['String']>;
  /**  Time when the last comment from a resident was last read by the user  */
  readResidentCommentAt?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type UserTicketCommentReadTimeCreateInput = {
  user?: Maybe<UserRelateToOneInput>;
  ticket?: Maybe<TicketRelateToOneInput>;
  readCommentAt?: Maybe<Scalars['String']>;
  readResidentCommentAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type UserTicketCommentReadTimeHistoryRecord = {
  __typename?: 'UserTicketCommentReadTimeHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the UserTicketCommentReadTimeHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the UserTicketCommentReadTimeHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the UserTicketCommentReadTimeHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the UserTicketCommentReadTimeHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  readCommentAt?: Maybe<Scalars['String']>;
  readResidentCommentAt?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserTicketCommentReadTimeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type UserTicketCommentReadTimeHistoryRecordCreateInput = {
  user?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  readCommentAt?: Maybe<Scalars['String']>;
  readResidentCommentAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserTicketCommentReadTimeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum UserTicketCommentReadTimeHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type UserTicketCommentReadTimeHistoryRecordUpdateInput = {
  user?: Maybe<Scalars['String']>;
  ticket?: Maybe<Scalars['String']>;
  readCommentAt?: Maybe<Scalars['String']>;
  readResidentCommentAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<UserTicketCommentReadTimeHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type UserTicketCommentReadTimeHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<UserTicketCommentReadTimeHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<UserTicketCommentReadTimeHistoryRecordWhereInput>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket?: Maybe<Scalars['String']>;
  ticket_not?: Maybe<Scalars['String']>;
  ticket_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticket_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readCommentAt?: Maybe<Scalars['String']>;
  readCommentAt_not?: Maybe<Scalars['String']>;
  readCommentAt_lt?: Maybe<Scalars['String']>;
  readCommentAt_lte?: Maybe<Scalars['String']>;
  readCommentAt_gt?: Maybe<Scalars['String']>;
  readCommentAt_gte?: Maybe<Scalars['String']>;
  readCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readResidentCommentAt?: Maybe<Scalars['String']>;
  readResidentCommentAt_not?: Maybe<Scalars['String']>;
  readResidentCommentAt_lt?: Maybe<Scalars['String']>;
  readResidentCommentAt_lte?: Maybe<Scalars['String']>;
  readResidentCommentAt_gt?: Maybe<Scalars['String']>;
  readResidentCommentAt_gte?: Maybe<Scalars['String']>;
  readResidentCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readResidentCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<UserTicketCommentReadTimeHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<UserTicketCommentReadTimeHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<UserTicketCommentReadTimeHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<UserTicketCommentReadTimeHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type UserTicketCommentReadTimeHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type UserTicketCommentReadTimeHistoryRecordsCreateInput = {
  data?: Maybe<UserTicketCommentReadTimeHistoryRecordCreateInput>;
};

export type UserTicketCommentReadTimeHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<UserTicketCommentReadTimeHistoryRecordUpdateInput>;
};

export type UserTicketCommentReadTimeUpdateInput = {
  user?: Maybe<UserRelateToOneInput>;
  ticket?: Maybe<TicketRelateToOneInput>;
  readCommentAt?: Maybe<Scalars['String']>;
  readResidentCommentAt?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type UserTicketCommentReadTimeWhereInput = {
  AND?: Maybe<Array<Maybe<UserTicketCommentReadTimeWhereInput>>>;
  OR?: Maybe<Array<Maybe<UserTicketCommentReadTimeWhereInput>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  ticket?: Maybe<TicketWhereInput>;
  ticket_is_null?: Maybe<Scalars['Boolean']>;
  readCommentAt?: Maybe<Scalars['String']>;
  readCommentAt_not?: Maybe<Scalars['String']>;
  readCommentAt_lt?: Maybe<Scalars['String']>;
  readCommentAt_lte?: Maybe<Scalars['String']>;
  readCommentAt_gt?: Maybe<Scalars['String']>;
  readCommentAt_gte?: Maybe<Scalars['String']>;
  readCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readResidentCommentAt?: Maybe<Scalars['String']>;
  readResidentCommentAt_not?: Maybe<Scalars['String']>;
  readResidentCommentAt_lt?: Maybe<Scalars['String']>;
  readResidentCommentAt_lte?: Maybe<Scalars['String']>;
  readResidentCommentAt_gt?: Maybe<Scalars['String']>;
  readResidentCommentAt_gte?: Maybe<Scalars['String']>;
  readResidentCommentAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  readResidentCommentAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type UserTicketCommentReadTimeWhereUniqueInput = {
  id: Scalars['ID'];
};

export type UserTicketCommentReadTimesCreateInput = {
  data?: Maybe<UserTicketCommentReadTimeCreateInput>;
};

export type UserTicketCommentReadTimesUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<UserTicketCommentReadTimeUpdateInput>;
};

export enum UserTypeType {
  Staff = 'staff',
  Resident = 'resident',
  Service = 'service'
}

export type UserUpdateInput = {
  name?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  type?: Maybe<UserTypeType>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  isSupport?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  isEmailVerified?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  avatar?: Maybe<Scalars['Upload']>;
  meta?: Maybe<Scalars['JSON']>;
  locale?: Maybe<UserLocaleType>;
  customAccess?: Maybe<CustomAccessInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type UserWhereInput = {
  AND?: Maybe<Array<Maybe<UserWhereInput>>>;
  OR?: Maybe<Array<Maybe<UserWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  password_is_set?: Maybe<Scalars['Boolean']>;
  type?: Maybe<UserTypeType>;
  type_not?: Maybe<UserTypeType>;
  type_in?: Maybe<Array<Maybe<UserTypeType>>>;
  type_not_in?: Maybe<Array<Maybe<UserTypeType>>>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  isAdmin_not?: Maybe<Scalars['Boolean']>;
  isSupport?: Maybe<Scalars['Boolean']>;
  isSupport_not?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  email_not?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_i?: Maybe<Scalars['String']>;
  email_not_i?: Maybe<Scalars['String']>;
  email_contains_i?: Maybe<Scalars['String']>;
  email_not_contains_i?: Maybe<Scalars['String']>;
  email_starts_with_i?: Maybe<Scalars['String']>;
  email_not_starts_with_i?: Maybe<Scalars['String']>;
  email_ends_with_i?: Maybe<Scalars['String']>;
  email_not_ends_with_i?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isEmailVerified?: Maybe<Scalars['Boolean']>;
  isEmailVerified_not?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  phone_not?: Maybe<Scalars['String']>;
  phone_contains?: Maybe<Scalars['String']>;
  phone_not_contains?: Maybe<Scalars['String']>;
  phone_starts_with?: Maybe<Scalars['String']>;
  phone_not_starts_with?: Maybe<Scalars['String']>;
  phone_ends_with?: Maybe<Scalars['String']>;
  phone_not_ends_with?: Maybe<Scalars['String']>;
  phone_i?: Maybe<Scalars['String']>;
  phone_not_i?: Maybe<Scalars['String']>;
  phone_contains_i?: Maybe<Scalars['String']>;
  phone_not_contains_i?: Maybe<Scalars['String']>;
  phone_starts_with_i?: Maybe<Scalars['String']>;
  phone_not_starts_with_i?: Maybe<Scalars['String']>;
  phone_ends_with_i?: Maybe<Scalars['String']>;
  phone_not_ends_with_i?: Maybe<Scalars['String']>;
  phone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  isPhoneVerified?: Maybe<Scalars['Boolean']>;
  isPhoneVerified_not?: Maybe<Scalars['Boolean']>;
  avatar?: Maybe<Scalars['String']>;
  avatar_not?: Maybe<Scalars['String']>;
  avatar_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  avatar_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  meta?: Maybe<Scalars['JSON']>;
  meta_not?: Maybe<Scalars['JSON']>;
  meta_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  meta_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  locale?: Maybe<UserLocaleType>;
  locale_not?: Maybe<UserLocaleType>;
  locale_in?: Maybe<Array<Maybe<UserLocaleType>>>;
  locale_not_in?: Maybe<Array<Maybe<UserLocaleType>>>;
  customAccess?: Maybe<CustomAccessInput>;
  customAccess_not?: Maybe<CustomAccessInput>;
  customAccess_in?: Maybe<Array<Maybe<CustomAccessInput>>>;
  customAccess_not_in?: Maybe<Array<Maybe<CustomAccessInput>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type UserWhereUniqueInput = {
  id: Scalars['ID'];
};

export type UsersCreateInput = {
  data?: Maybe<UserCreateInput>;
};

export type UsersUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<UserUpdateInput>;
};

/** Technical map of the 'village' type Property object. We assume that there will be different maps for different property types.  */
export type VillageMap = {
  __typename?: 'VillageMap';
  dv: Scalars['Int'];
  type?: Maybe<VillageMapType>;
};

export enum VillageMapType {
  Village = 'village'
}

/**  Webhooks are a way that the APP can send automated web callback with some messages to other apps or system to inform them about any updates. How does it work: 1. When objects are created or changed, we make requests to the GraphQL API to get data on behalf of the specified user; 2. Then we send the data to remote url. Webhook model contains basic configuration of integration, such as external server url, name, encryption parameters and so on.  */
export type Webhook = {
  __typename?: 'Webhook';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the Webhook List config, or
   *  2. As an alias to the field set on 'labelField' in the Webhook List config, or
   *  3. As an alias to a 'name' field on the Webhook List (if one exists), or
   *  4. As an alias to the 'id' field on the Webhook List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Short name used to distinguish this hook from others. Usually it's the name of the integration  */
  name?: Maybe<Scalars['String']>;
  /**  Any other details that reveal the purpose of this hook  */
  description?: Maybe<Scalars['String']>;
  /**  Webhook target URL to which requests will be sent  */
  url?: Maybe<Scalars['String']>;
  /**  The user on whose behalf a request is being made to the GraphQL API to prepare webhook data  */
  user?: Maybe<User>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type WebhookCreateInput = {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type WebhookHistoryRecord = {
  __typename?: 'WebhookHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the WebhookHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the WebhookHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the WebhookHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the WebhookHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<WebhookHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type WebhookHistoryRecordCreateInput = {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<WebhookHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum WebhookHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type WebhookHistoryRecordUpdateInput = {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<WebhookHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type WebhookHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<WebhookHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<WebhookHistoryRecordWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  url_starts_with?: Maybe<Scalars['String']>;
  url_not_starts_with?: Maybe<Scalars['String']>;
  url_ends_with?: Maybe<Scalars['String']>;
  url_not_ends_with?: Maybe<Scalars['String']>;
  url_i?: Maybe<Scalars['String']>;
  url_not_i?: Maybe<Scalars['String']>;
  url_contains_i?: Maybe<Scalars['String']>;
  url_not_contains_i?: Maybe<Scalars['String']>;
  url_starts_with_i?: Maybe<Scalars['String']>;
  url_not_starts_with_i?: Maybe<Scalars['String']>;
  url_ends_with_i?: Maybe<Scalars['String']>;
  url_not_ends_with_i?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<Scalars['String']>;
  user_not?: Maybe<Scalars['String']>;
  user_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<WebhookHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<WebhookHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<WebhookHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<WebhookHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type WebhookHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type WebhookHistoryRecordsCreateInput = {
  data?: Maybe<WebhookHistoryRecordCreateInput>;
};

export type WebhookHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<WebhookHistoryRecordUpdateInput>;
};

export type WebhookRelateToOneInput = {
  create?: Maybe<WebhookCreateInput>;
  connect?: Maybe<WebhookWhereUniqueInput>;
  disconnect?: Maybe<WebhookWhereUniqueInput>;
  disconnectAll?: Maybe<Scalars['Boolean']>;
};

/**  Determines which models the WebHook will be subscribed to. When model changes subscription task will be triggered to resolve changed data and send a webhook  */
export type WebhookSubscription = {
  __typename?: 'WebhookSubscription';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the WebhookSubscription List config, or
   *  2. As an alias to the field set on 'labelField' in the WebhookSubscription List config, or
   *  3. As an alias to a 'name' field on the WebhookSubscription List (if one exists), or
   *  4. As an alias to the 'id' field on the WebhookSubscription List.
   */
  _label_?: Maybe<Scalars['String']>;
  /**  Link to a webhook containing information about integration  */
  webhook?: Maybe<Webhook>;
  /**  Webhook target URL to which requests will be sent. Overrides url from webhook relation. Used in case when you need to send specific model to a separate url  */
  url?: Maybe<Scalars['String']>;
  /**  The time was the data was last synced. At the next synchronization, only objects that have changed since that time will be sent.  */
  syncedAt?: Maybe<Scalars['String']>;
  /**  The number of objects successfully delivered by webhooks. On successful synchronization, the syncedAt field is updated and syncedAmount becomes 0. If the remote server fails, syncedAt will not be updated, and syncedAmount will increment to the number of successfully delivered objects.  */
  syncedAmount?: Maybe<Scalars['Int']>;
  /**  The number of consecutive failures to send webhooks to a remote server. Field value is automatically incremented when the specified url is unavailable or the server response was not ok, but no more than once per hour. Field value is automatically reset to 0 when the remote server is successfully reached (syncedAt or syncedAmount changed), or can be manually reset by support. As soon as the counter reaches the value 10, which is interpreted as the unavailability of the external service for at least 10 hours, the webhook will stop being sent to this url. In this case, you will need to manually reset the counter via support to resume sending.  */
  failuresCount?: Maybe<Scalars['Int']>;
  /**  The data model (schema) that the webhook is subscribed to  */
  model?: Maybe<Scalars['String']>;
  /**  String representing list of model fields in graphql-query format. Exactly the fields specified here will be sent by the webhook. Correct examples: "field1 field2 { subfield }", "{ field1 relation { subfield } }"  */
  fields?: Maybe<Scalars['String']>;
  /**  Filters which is stored in JSON and used to filter models sent by the webhook. Examples of filters can be found in ModelWhereInput GQL type, where Model is name of your model  */
  filters?: Maybe<Scalars['JSON']>;
  /**  The maximum number of objects that the server can send in one request. The default is 100, and maxPackSize cannot be set beyond this value. In most cases, you do not need to override this field, but it is recommended to lower this value for requests with a large number of related fields or in case of external restrictions of the server accepting webhooks.  */
  maxPackSize?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  /**  Identifies a user, which has created this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  createdBy?: Maybe<User>;
  /**  Identifies a user, which has updated this record. It is a technical connection, that can represent real users, as well as automated systems (bots, scripts). This field should not participate in business logic.  */
  updatedBy?: Maybe<User>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  /**  Data structure Version  */
  dv?: Maybe<Scalars['Int']>;
  /**  Client-side device identification used for the anti-fraud detection. Example `{ dv: 1, fingerprint: 'VaxSw2aXZa'}`. Where the `fingerprint` should be the same for the same devices and it's not linked to the user ID. It's the device ID like browser / mobile application / remote system  */
  sender?: Maybe<SenderField>;
};

export type WebhookSubscriptionCreateInput = {
  webhook?: Maybe<WebhookRelateToOneInput>;
  url?: Maybe<Scalars['String']>;
  syncedAt?: Maybe<Scalars['String']>;
  syncedAmount?: Maybe<Scalars['Int']>;
  failuresCount?: Maybe<Scalars['Int']>;
  model?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['String']>;
  filters?: Maybe<Scalars['JSON']>;
  maxPackSize?: Maybe<Scalars['Int']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

/**  A keystone list  */
export type WebhookSubscriptionHistoryRecord = {
  __typename?: 'WebhookSubscriptionHistoryRecord';
  /**
   * This virtual field will be resolved in one of the following ways (in this order):
   *  1. Execution of 'labelResolver' set on the WebhookSubscriptionHistoryRecord List config, or
   *  2. As an alias to the field set on 'labelField' in the WebhookSubscriptionHistoryRecord List config, or
   *  3. As an alias to a 'name' field on the WebhookSubscriptionHistoryRecord List (if one exists), or
   *  4. As an alias to the 'id' field on the WebhookSubscriptionHistoryRecord List.
   */
  _label_?: Maybe<Scalars['String']>;
  webhook?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  syncedAt?: Maybe<Scalars['String']>;
  syncedAmount?: Maybe<Scalars['Int']>;
  failuresCount?: Maybe<Scalars['Int']>;
  model?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['String']>;
  filters?: Maybe<Scalars['JSON']>;
  maxPackSize?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<WebhookSubscriptionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type WebhookSubscriptionHistoryRecordCreateInput = {
  webhook?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  syncedAt?: Maybe<Scalars['String']>;
  syncedAmount?: Maybe<Scalars['Int']>;
  failuresCount?: Maybe<Scalars['Int']>;
  model?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['String']>;
  filters?: Maybe<Scalars['JSON']>;
  maxPackSize?: Maybe<Scalars['Int']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<WebhookSubscriptionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export enum WebhookSubscriptionHistoryRecordHistoryActionType {
  C = 'c',
  U = 'u',
  D = 'd'
}

export type WebhookSubscriptionHistoryRecordUpdateInput = {
  webhook?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  syncedAt?: Maybe<Scalars['String']>;
  syncedAmount?: Maybe<Scalars['Int']>;
  failuresCount?: Maybe<Scalars['Int']>;
  model?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['String']>;
  filters?: Maybe<Scalars['JSON']>;
  maxPackSize?: Maybe<Scalars['Int']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  updatedBy?: Maybe<Scalars['String']>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['JSON']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<Scalars['JSON']>;
  history_date?: Maybe<Scalars['String']>;
  history_action?: Maybe<WebhookSubscriptionHistoryRecordHistoryActionType>;
  history_id?: Maybe<Scalars['String']>;
};

export type WebhookSubscriptionHistoryRecordWhereInput = {
  AND?: Maybe<Array<Maybe<WebhookSubscriptionHistoryRecordWhereInput>>>;
  OR?: Maybe<Array<Maybe<WebhookSubscriptionHistoryRecordWhereInput>>>;
  webhook?: Maybe<Scalars['String']>;
  webhook_not?: Maybe<Scalars['String']>;
  webhook_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  webhook_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  url_starts_with?: Maybe<Scalars['String']>;
  url_not_starts_with?: Maybe<Scalars['String']>;
  url_ends_with?: Maybe<Scalars['String']>;
  url_not_ends_with?: Maybe<Scalars['String']>;
  url_i?: Maybe<Scalars['String']>;
  url_not_i?: Maybe<Scalars['String']>;
  url_contains_i?: Maybe<Scalars['String']>;
  url_not_contains_i?: Maybe<Scalars['String']>;
  url_starts_with_i?: Maybe<Scalars['String']>;
  url_not_starts_with_i?: Maybe<Scalars['String']>;
  url_ends_with_i?: Maybe<Scalars['String']>;
  url_not_ends_with_i?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  syncedAt?: Maybe<Scalars['String']>;
  syncedAt_not?: Maybe<Scalars['String']>;
  syncedAt_lt?: Maybe<Scalars['String']>;
  syncedAt_lte?: Maybe<Scalars['String']>;
  syncedAt_gt?: Maybe<Scalars['String']>;
  syncedAt_gte?: Maybe<Scalars['String']>;
  syncedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  syncedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  syncedAmount?: Maybe<Scalars['Int']>;
  syncedAmount_not?: Maybe<Scalars['Int']>;
  syncedAmount_lt?: Maybe<Scalars['Int']>;
  syncedAmount_lte?: Maybe<Scalars['Int']>;
  syncedAmount_gt?: Maybe<Scalars['Int']>;
  syncedAmount_gte?: Maybe<Scalars['Int']>;
  syncedAmount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  syncedAmount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  failuresCount?: Maybe<Scalars['Int']>;
  failuresCount_not?: Maybe<Scalars['Int']>;
  failuresCount_lt?: Maybe<Scalars['Int']>;
  failuresCount_lte?: Maybe<Scalars['Int']>;
  failuresCount_gt?: Maybe<Scalars['Int']>;
  failuresCount_gte?: Maybe<Scalars['Int']>;
  failuresCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  failuresCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  model?: Maybe<Scalars['String']>;
  model_not?: Maybe<Scalars['String']>;
  model_contains?: Maybe<Scalars['String']>;
  model_not_contains?: Maybe<Scalars['String']>;
  model_starts_with?: Maybe<Scalars['String']>;
  model_not_starts_with?: Maybe<Scalars['String']>;
  model_ends_with?: Maybe<Scalars['String']>;
  model_not_ends_with?: Maybe<Scalars['String']>;
  model_i?: Maybe<Scalars['String']>;
  model_not_i?: Maybe<Scalars['String']>;
  model_contains_i?: Maybe<Scalars['String']>;
  model_not_contains_i?: Maybe<Scalars['String']>;
  model_starts_with_i?: Maybe<Scalars['String']>;
  model_not_starts_with_i?: Maybe<Scalars['String']>;
  model_ends_with_i?: Maybe<Scalars['String']>;
  model_not_ends_with_i?: Maybe<Scalars['String']>;
  model_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  model_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fields?: Maybe<Scalars['String']>;
  fields_not?: Maybe<Scalars['String']>;
  fields_contains?: Maybe<Scalars['String']>;
  fields_not_contains?: Maybe<Scalars['String']>;
  fields_starts_with?: Maybe<Scalars['String']>;
  fields_not_starts_with?: Maybe<Scalars['String']>;
  fields_ends_with?: Maybe<Scalars['String']>;
  fields_not_ends_with?: Maybe<Scalars['String']>;
  fields_i?: Maybe<Scalars['String']>;
  fields_not_i?: Maybe<Scalars['String']>;
  fields_contains_i?: Maybe<Scalars['String']>;
  fields_not_contains_i?: Maybe<Scalars['String']>;
  fields_starts_with_i?: Maybe<Scalars['String']>;
  fields_not_starts_with_i?: Maybe<Scalars['String']>;
  fields_ends_with_i?: Maybe<Scalars['String']>;
  fields_not_ends_with_i?: Maybe<Scalars['String']>;
  fields_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fields_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  filters?: Maybe<Scalars['JSON']>;
  filters_not?: Maybe<Scalars['JSON']>;
  filters_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  filters_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  maxPackSize?: Maybe<Scalars['Int']>;
  maxPackSize_not?: Maybe<Scalars['Int']>;
  maxPackSize_lt?: Maybe<Scalars['Int']>;
  maxPackSize_lte?: Maybe<Scalars['Int']>;
  maxPackSize_gt?: Maybe<Scalars['Int']>;
  maxPackSize_gte?: Maybe<Scalars['Int']>;
  maxPackSize_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  maxPackSize_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<Scalars['String']>;
  createdBy_not?: Maybe<Scalars['String']>;
  createdBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy?: Maybe<Scalars['String']>;
  updatedBy_not?: Maybe<Scalars['String']>;
  updatedBy_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedBy_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['JSON']>;
  newId_not?: Maybe<Scalars['JSON']>;
  newId_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<Scalars['JSON']>;
  sender_not?: Maybe<Scalars['JSON']>;
  sender_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  sender_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  history_date?: Maybe<Scalars['String']>;
  history_date_not?: Maybe<Scalars['String']>;
  history_date_lt?: Maybe<Scalars['String']>;
  history_date_lte?: Maybe<Scalars['String']>;
  history_date_gt?: Maybe<Scalars['String']>;
  history_date_gte?: Maybe<Scalars['String']>;
  history_date_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_date_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_action?: Maybe<WebhookSubscriptionHistoryRecordHistoryActionType>;
  history_action_not?: Maybe<WebhookSubscriptionHistoryRecordHistoryActionType>;
  history_action_in?: Maybe<Array<Maybe<WebhookSubscriptionHistoryRecordHistoryActionType>>>;
  history_action_not_in?: Maybe<Array<Maybe<WebhookSubscriptionHistoryRecordHistoryActionType>>>;
  history_id?: Maybe<Scalars['String']>;
  history_id_not?: Maybe<Scalars['String']>;
  history_id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  history_id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type WebhookSubscriptionHistoryRecordWhereUniqueInput = {
  id: Scalars['ID'];
};

export type WebhookSubscriptionHistoryRecordsCreateInput = {
  data?: Maybe<WebhookSubscriptionHistoryRecordCreateInput>;
};

export type WebhookSubscriptionHistoryRecordsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<WebhookSubscriptionHistoryRecordUpdateInput>;
};

export type WebhookSubscriptionUpdateInput = {
  webhook?: Maybe<WebhookRelateToOneInput>;
  url?: Maybe<Scalars['String']>;
  syncedAt?: Maybe<Scalars['String']>;
  syncedAmount?: Maybe<Scalars['Int']>;
  failuresCount?: Maybe<Scalars['Int']>;
  model?: Maybe<Scalars['String']>;
  fields?: Maybe<Scalars['String']>;
  filters?: Maybe<Scalars['JSON']>;
  maxPackSize?: Maybe<Scalars['Int']>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type WebhookSubscriptionWhereInput = {
  AND?: Maybe<Array<Maybe<WebhookSubscriptionWhereInput>>>;
  OR?: Maybe<Array<Maybe<WebhookSubscriptionWhereInput>>>;
  webhook?: Maybe<WebhookWhereInput>;
  webhook_is_null?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  url_starts_with?: Maybe<Scalars['String']>;
  url_not_starts_with?: Maybe<Scalars['String']>;
  url_ends_with?: Maybe<Scalars['String']>;
  url_not_ends_with?: Maybe<Scalars['String']>;
  url_i?: Maybe<Scalars['String']>;
  url_not_i?: Maybe<Scalars['String']>;
  url_contains_i?: Maybe<Scalars['String']>;
  url_not_contains_i?: Maybe<Scalars['String']>;
  url_starts_with_i?: Maybe<Scalars['String']>;
  url_not_starts_with_i?: Maybe<Scalars['String']>;
  url_ends_with_i?: Maybe<Scalars['String']>;
  url_not_ends_with_i?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  syncedAt?: Maybe<Scalars['String']>;
  syncedAt_not?: Maybe<Scalars['String']>;
  syncedAt_lt?: Maybe<Scalars['String']>;
  syncedAt_lte?: Maybe<Scalars['String']>;
  syncedAt_gt?: Maybe<Scalars['String']>;
  syncedAt_gte?: Maybe<Scalars['String']>;
  syncedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  syncedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  syncedAmount?: Maybe<Scalars['Int']>;
  syncedAmount_not?: Maybe<Scalars['Int']>;
  syncedAmount_lt?: Maybe<Scalars['Int']>;
  syncedAmount_lte?: Maybe<Scalars['Int']>;
  syncedAmount_gt?: Maybe<Scalars['Int']>;
  syncedAmount_gte?: Maybe<Scalars['Int']>;
  syncedAmount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  syncedAmount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  failuresCount?: Maybe<Scalars['Int']>;
  failuresCount_not?: Maybe<Scalars['Int']>;
  failuresCount_lt?: Maybe<Scalars['Int']>;
  failuresCount_lte?: Maybe<Scalars['Int']>;
  failuresCount_gt?: Maybe<Scalars['Int']>;
  failuresCount_gte?: Maybe<Scalars['Int']>;
  failuresCount_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  failuresCount_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  model?: Maybe<Scalars['String']>;
  model_not?: Maybe<Scalars['String']>;
  model_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  model_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fields?: Maybe<Scalars['String']>;
  fields_not?: Maybe<Scalars['String']>;
  fields_contains?: Maybe<Scalars['String']>;
  fields_not_contains?: Maybe<Scalars['String']>;
  fields_starts_with?: Maybe<Scalars['String']>;
  fields_not_starts_with?: Maybe<Scalars['String']>;
  fields_ends_with?: Maybe<Scalars['String']>;
  fields_not_ends_with?: Maybe<Scalars['String']>;
  fields_i?: Maybe<Scalars['String']>;
  fields_not_i?: Maybe<Scalars['String']>;
  fields_contains_i?: Maybe<Scalars['String']>;
  fields_not_contains_i?: Maybe<Scalars['String']>;
  fields_starts_with_i?: Maybe<Scalars['String']>;
  fields_not_starts_with_i?: Maybe<Scalars['String']>;
  fields_ends_with_i?: Maybe<Scalars['String']>;
  fields_not_ends_with_i?: Maybe<Scalars['String']>;
  fields_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fields_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  filters?: Maybe<Scalars['JSON']>;
  filters_not?: Maybe<Scalars['JSON']>;
  filters_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  filters_not_in?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  maxPackSize?: Maybe<Scalars['Int']>;
  maxPackSize_not?: Maybe<Scalars['Int']>;
  maxPackSize_lt?: Maybe<Scalars['Int']>;
  maxPackSize_lte?: Maybe<Scalars['Int']>;
  maxPackSize_gt?: Maybe<Scalars['Int']>;
  maxPackSize_gte?: Maybe<Scalars['Int']>;
  maxPackSize_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  maxPackSize_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type WebhookSubscriptionWhereUniqueInput = {
  id: Scalars['ID'];
};

export type WebhookSubscriptionsCreateInput = {
  data?: Maybe<WebhookSubscriptionCreateInput>;
};

export type WebhookSubscriptionsUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<WebhookSubscriptionUpdateInput>;
};

export type WebhookUpdateInput = {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  user?: Maybe<UserRelateToOneInput>;
  v?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  createdBy?: Maybe<UserRelateToOneInput>;
  updatedBy?: Maybe<UserRelateToOneInput>;
  deletedAt?: Maybe<Scalars['String']>;
  newId?: Maybe<Scalars['String']>;
  dv?: Maybe<Scalars['Int']>;
  sender?: Maybe<SenderFieldInput>;
};

export type WebhookWhereInput = {
  AND?: Maybe<Array<Maybe<WebhookWhereInput>>>;
  OR?: Maybe<Array<Maybe<WebhookWhereInput>>>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_i?: Maybe<Scalars['String']>;
  name_not_i?: Maybe<Scalars['String']>;
  name_contains_i?: Maybe<Scalars['String']>;
  name_not_contains_i?: Maybe<Scalars['String']>;
  name_starts_with_i?: Maybe<Scalars['String']>;
  name_not_starts_with_i?: Maybe<Scalars['String']>;
  name_ends_with_i?: Maybe<Scalars['String']>;
  name_not_ends_with_i?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Scalars['String']>;
  description_not?: Maybe<Scalars['String']>;
  description_contains?: Maybe<Scalars['String']>;
  description_not_contains?: Maybe<Scalars['String']>;
  description_starts_with?: Maybe<Scalars['String']>;
  description_not_starts_with?: Maybe<Scalars['String']>;
  description_ends_with?: Maybe<Scalars['String']>;
  description_not_ends_with?: Maybe<Scalars['String']>;
  description_i?: Maybe<Scalars['String']>;
  description_not_i?: Maybe<Scalars['String']>;
  description_contains_i?: Maybe<Scalars['String']>;
  description_not_contains_i?: Maybe<Scalars['String']>;
  description_starts_with_i?: Maybe<Scalars['String']>;
  description_not_starts_with_i?: Maybe<Scalars['String']>;
  description_ends_with_i?: Maybe<Scalars['String']>;
  description_not_ends_with_i?: Maybe<Scalars['String']>;
  description_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  description_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url?: Maybe<Scalars['String']>;
  url_not?: Maybe<Scalars['String']>;
  url_contains?: Maybe<Scalars['String']>;
  url_not_contains?: Maybe<Scalars['String']>;
  url_starts_with?: Maybe<Scalars['String']>;
  url_not_starts_with?: Maybe<Scalars['String']>;
  url_ends_with?: Maybe<Scalars['String']>;
  url_not_ends_with?: Maybe<Scalars['String']>;
  url_i?: Maybe<Scalars['String']>;
  url_not_i?: Maybe<Scalars['String']>;
  url_contains_i?: Maybe<Scalars['String']>;
  url_not_contains_i?: Maybe<Scalars['String']>;
  url_starts_with_i?: Maybe<Scalars['String']>;
  url_not_starts_with_i?: Maybe<Scalars['String']>;
  url_ends_with_i?: Maybe<Scalars['String']>;
  url_not_ends_with_i?: Maybe<Scalars['String']>;
  url_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  url_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  user?: Maybe<UserWhereInput>;
  user_is_null?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  id_not?: Maybe<Scalars['ID']>;
  id_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  id_not_in?: Maybe<Array<Maybe<Scalars['ID']>>>;
  v?: Maybe<Scalars['Int']>;
  v_not?: Maybe<Scalars['Int']>;
  v_lt?: Maybe<Scalars['Int']>;
  v_lte?: Maybe<Scalars['Int']>;
  v_gt?: Maybe<Scalars['Int']>;
  v_gte?: Maybe<Scalars['Int']>;
  v_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  v_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  createdAt?: Maybe<Scalars['String']>;
  createdAt_not?: Maybe<Scalars['String']>;
  createdAt_lt?: Maybe<Scalars['String']>;
  createdAt_lte?: Maybe<Scalars['String']>;
  createdAt_gt?: Maybe<Scalars['String']>;
  createdAt_gte?: Maybe<Scalars['String']>;
  createdAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt?: Maybe<Scalars['String']>;
  updatedAt_not?: Maybe<Scalars['String']>;
  updatedAt_lt?: Maybe<Scalars['String']>;
  updatedAt_lte?: Maybe<Scalars['String']>;
  updatedAt_gt?: Maybe<Scalars['String']>;
  updatedAt_gte?: Maybe<Scalars['String']>;
  updatedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdBy?: Maybe<UserWhereInput>;
  createdBy_is_null?: Maybe<Scalars['Boolean']>;
  updatedBy?: Maybe<UserWhereInput>;
  updatedBy_is_null?: Maybe<Scalars['Boolean']>;
  deletedAt?: Maybe<Scalars['String']>;
  deletedAt_not?: Maybe<Scalars['String']>;
  deletedAt_lt?: Maybe<Scalars['String']>;
  deletedAt_lte?: Maybe<Scalars['String']>;
  deletedAt_gt?: Maybe<Scalars['String']>;
  deletedAt_gte?: Maybe<Scalars['String']>;
  deletedAt_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  deletedAt_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId?: Maybe<Scalars['String']>;
  newId_not?: Maybe<Scalars['String']>;
  newId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  dv?: Maybe<Scalars['Int']>;
  dv_not?: Maybe<Scalars['Int']>;
  dv_lt?: Maybe<Scalars['Int']>;
  dv_lte?: Maybe<Scalars['Int']>;
  dv_gt?: Maybe<Scalars['Int']>;
  dv_gte?: Maybe<Scalars['Int']>;
  dv_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  dv_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  sender?: Maybe<SenderFieldInput>;
  sender_not?: Maybe<SenderFieldInput>;
  sender_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
  sender_not_in?: Maybe<Array<Maybe<SenderFieldInput>>>;
};

export type WebhookWhereUniqueInput = {
  id: Scalars['ID'];
};

export type WebhooksCreateInput = {
  data?: Maybe<WebhookCreateInput>;
};

export type WebhooksUpdateInput = {
  id: Scalars['ID'];
  data?: Maybe<WebhookUpdateInput>;
};

export type _ListAccess = {
  __typename?: '_ListAccess';
  /**
   * Access Control settings for the currently logged in (or anonymous)
   * user when performing 'create' operations.
   * NOTE: 'create' can only return a Boolean.
   * It is not possible to specify a declarative Where clause for this
   * operation
   */
  create?: Maybe<Scalars['Boolean']>;
  /**
   * Access Control settings for the currently logged in (or anonymous)
   * user when performing 'read' operations.
   */
  read?: Maybe<Scalars['JSON']>;
  /**
   * Access Control settings for the currently logged in (or anonymous)
   * user when performing 'update' operations.
   */
  update?: Maybe<Scalars['JSON']>;
  /**
   * Access Control settings for the currently logged in (or anonymous)
   * user when performing 'delete' operations.
   */
  delete?: Maybe<Scalars['JSON']>;
  /**
   * Access Control settings for the currently logged in (or anonymous)
   * user when performing 'auth' operations.
   */
  auth?: Maybe<Scalars['JSON']>;
};

export type _ListInputTypes = {
  __typename?: '_ListInputTypes';
  /** Input type for matching multiple items */
  whereInput?: Maybe<Scalars['String']>;
  /** Input type for matching a unique item */
  whereUniqueInput?: Maybe<Scalars['String']>;
  /** Create mutation input type name */
  createInput?: Maybe<Scalars['String']>;
  /** Create many mutation input type name */
  createManyInput?: Maybe<Scalars['String']>;
  /** Update mutation name input */
  updateInput?: Maybe<Scalars['String']>;
  /** Update many mutation name input */
  updateManyInput?: Maybe<Scalars['String']>;
};

export type _ListMeta = {
  __typename?: '_ListMeta';
  /** The Keystone list key */
  key?: Maybe<Scalars['String']>;
  /**
   * The Keystone List name
   * @deprecated Use `key` instead
   */
  name?: Maybe<Scalars['String']>;
  /** The list's user-facing description */
  description?: Maybe<Scalars['String']>;
  /** The list's display name in the Admin UI */
  label?: Maybe<Scalars['String']>;
  /** The list's singular display name */
  singular?: Maybe<Scalars['String']>;
  /** The list's plural display name */
  plural?: Maybe<Scalars['String']>;
  /** The list's data path */
  path?: Maybe<Scalars['String']>;
  /** Access control configuration for the currently authenticated request */
  access?: Maybe<_ListAccess>;
  /** Information on the generated GraphQL schema */
  schema?: Maybe<_ListSchema>;
};

export type _ListMutations = {
  __typename?: '_ListMutations';
  /** Create mutation name */
  create?: Maybe<Scalars['String']>;
  /** Create many mutation name */
  createMany?: Maybe<Scalars['String']>;
  /** Update mutation name */
  update?: Maybe<Scalars['String']>;
  /** Update many mutation name */
  updateMany?: Maybe<Scalars['String']>;
  /** Delete mutation name */
  delete?: Maybe<Scalars['String']>;
  /** Delete many mutation name */
  deleteMany?: Maybe<Scalars['String']>;
};

export type _ListQueries = {
  __typename?: '_ListQueries';
  /** Single-item query name */
  item?: Maybe<Scalars['String']>;
  /** All-items query name */
  list?: Maybe<Scalars['String']>;
  /** List metadata query name */
  meta?: Maybe<Scalars['String']>;
};

export type _ListSchema = {
  __typename?: '_ListSchema';
  /** The typename as used in GraphQL queries */
  type?: Maybe<Scalars['String']>;
  /**
   * Top level GraphQL query names which either return this type, or
   * provide aggregate information about this type
   */
  queries?: Maybe<_ListQueries>;
  /** Top-level GraphQL mutation names */
  mutations?: Maybe<_ListMutations>;
  /** Top-level GraphQL input types */
  inputTypes?: Maybe<_ListInputTypes>;
  /** Information about fields defined on this list */
  fields?: Maybe<Array<Maybe<_ListSchemaFields>>>;
  /**
   * Information about fields on other types which return this type, or
   * provide aggregate information about this type
   */
  relatedFields?: Maybe<Array<Maybe<_ListSchemaRelatedFields>>>;
};


export type _ListSchemaFieldsArgs = {
  where?: Maybe<_ListSchemaFieldsInput>;
};

export type _ListSchemaFields = {
  __typename?: '_ListSchemaFields';
  /** The path of the field in its list */
  path?: Maybe<Scalars['String']>;
  /**
   * The name of the field in its list
   * @deprecated Use `path` instead
   */
  name?: Maybe<Scalars['String']>;
  /** The field type (ie, Checkbox, Text, etc) */
  type?: Maybe<Scalars['String']>;
};

export type _ListSchemaFieldsInput = {
  type?: Maybe<Scalars['String']>;
};

export type _ListSchemaRelatedFields = {
  __typename?: '_ListSchemaRelatedFields';
  /** The typename as used in GraphQL queries */
  type?: Maybe<Scalars['String']>;
  /** A list of GraphQL field names */
  fields?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type _QueryMeta = {
  __typename?: '_QueryMeta';
  count?: Maybe<Scalars['Int']>;
};

export type _KsListsMetaInput = {
  key?: Maybe<Scalars['String']>;
  /** Whether this is an auxiliary helper list */
  auxiliary?: Maybe<Scalars['Boolean']>;
};

export type AuthenticateUserOutput = {
  __typename?: 'authenticateUserOutput';
  /**  Used to make subsequent authenticated requests by setting this token in a header: 'Authorization: Bearer <token>'.  */
  token?: Maybe<Scalars['String']>;
  /**  Retrieve information on the newly authenticated User here.  */
  item?: Maybe<User>;
};

export type ResidentOrganization = {
  __typename?: 'residentOrganization';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  tin?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
};

export type UnauthenticateUserOutput = {
  __typename?: 'unauthenticateUserOutput';
  /**
   * `true` when unauthentication succeeds.
   * NOTE: unauthentication always succeeds when the request has an invalid or missing authentication token.
   */
  success?: Maybe<Scalars['Boolean']>;
};
