// This file is autogenerated by @graphql-codegen/cli
// Do not edit / add anything manually, since it will be overridden by codegen

import * as Types from '@app/condo/gql/operation.types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

export * from '@app/condo/gql/operation.types'

const defaultOptions = {} as const;
export const FloorInfoFragmentDoc = gql`
    fragment FloorInfo on BuildingFloor {
  id
  type
  index
  name
  units {
    id
    type
    unitType
    name
    label
    preview
  }
}
    `;
export const SectionOrParkingInfoFragmentDoc = gql`
    fragment SectionOrParkingInfo on BuildingSection {
  id
  type
  index
  name
  preview
  floors {
    ...FloorInfo
  }
}
    ${FloorInfoFragmentDoc}`;
export const AddressMetaForTableAddressFragmentDoc = gql`
    fragment AddressMetaForTableAddress on AddressMetaField {
  data {
    street_with_type
    house_type
    house
    block_type
    block
    flat_type
    flat
    region_type_full
    region
    region_with_type
    city_with_type
    city
    settlement_with_type
    area_with_type
  }
}
    `;
export const GetPaymentsFilesDocument = gql`
    query getPaymentsFiles($where: PaymentsFileWhereInput!, $sortBy: [SortPaymentsFilesBy!], $first: Int!, $skip: Int) {
  paymentsFiles: allPaymentsFiles(
    where: $where
    sortBy: $sortBy
    first: $first
    skip: $skip
  ) {
    id
    number
    loadedAt
    file {
      id
      originalFilename
      publicUrl
      mimetype
    }
    context {
      id
    }
    bankAccount
    paymentPeriodStartDate
    paymentPeriodEndDay
    paymentsCount
    amount
    name
    status
    paymentOrder
  }
  meta: _allPaymentsFilesMeta(where: $where) {
    count
  }
}
    `;

/**
 * __useGetPaymentsFilesQuery__
 *
 * To run a query within a React component, call `useGetPaymentsFilesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPaymentsFilesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPaymentsFilesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      sortBy: // value for 'sortBy'
 *      first: // value for 'first'
 *      skip: // value for 'skip'
 *   },
 * });
 */
export function useGetPaymentsFilesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetPaymentsFilesQuery, Types.GetPaymentsFilesQueryVariables> & ({ variables: Types.GetPaymentsFilesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetPaymentsFilesQuery, Types.GetPaymentsFilesQueryVariables>(GetPaymentsFilesDocument, options);
      }
export function useGetPaymentsFilesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetPaymentsFilesQuery, Types.GetPaymentsFilesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetPaymentsFilesQuery, Types.GetPaymentsFilesQueryVariables>(GetPaymentsFilesDocument, options);
        }
export function useGetPaymentsFilesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetPaymentsFilesQuery, Types.GetPaymentsFilesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetPaymentsFilesQuery, Types.GetPaymentsFilesQueryVariables>(GetPaymentsFilesDocument, options);
        }
export type GetPaymentsFilesQueryHookResult = ReturnType<typeof useGetPaymentsFilesQuery>;
export type GetPaymentsFilesLazyQueryHookResult = ReturnType<typeof useGetPaymentsFilesLazyQuery>;
export type GetPaymentsFilesSuspenseQueryHookResult = ReturnType<typeof useGetPaymentsFilesSuspenseQuery>;
export type GetPaymentsFilesQueryResult = Apollo.QueryResult<Types.GetPaymentsFilesQuery, Types.GetPaymentsFilesQueryVariables>;
export const CheckPaymentsFilesExistenceDocument = gql`
    query checkPaymentsFilesExistence($where: PaymentsFileWhereInput!) {
  paymentsFiles: allPaymentsFiles(where: $where, first: 1) {
    id
  }
}
    `;

/**
 * __useCheckPaymentsFilesExistenceQuery__
 *
 * To run a query within a React component, call `useCheckPaymentsFilesExistenceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckPaymentsFilesExistenceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckPaymentsFilesExistenceQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useCheckPaymentsFilesExistenceQuery(baseOptions: Apollo.QueryHookOptions<Types.CheckPaymentsFilesExistenceQuery, Types.CheckPaymentsFilesExistenceQueryVariables> & ({ variables: Types.CheckPaymentsFilesExistenceQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.CheckPaymentsFilesExistenceQuery, Types.CheckPaymentsFilesExistenceQueryVariables>(CheckPaymentsFilesExistenceDocument, options);
      }
export function useCheckPaymentsFilesExistenceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.CheckPaymentsFilesExistenceQuery, Types.CheckPaymentsFilesExistenceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.CheckPaymentsFilesExistenceQuery, Types.CheckPaymentsFilesExistenceQueryVariables>(CheckPaymentsFilesExistenceDocument, options);
        }
export function useCheckPaymentsFilesExistenceSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.CheckPaymentsFilesExistenceQuery, Types.CheckPaymentsFilesExistenceQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.CheckPaymentsFilesExistenceQuery, Types.CheckPaymentsFilesExistenceQueryVariables>(CheckPaymentsFilesExistenceDocument, options);
        }
export type CheckPaymentsFilesExistenceQueryHookResult = ReturnType<typeof useCheckPaymentsFilesExistenceQuery>;
export type CheckPaymentsFilesExistenceLazyQueryHookResult = ReturnType<typeof useCheckPaymentsFilesExistenceLazyQuery>;
export type CheckPaymentsFilesExistenceSuspenseQueryHookResult = ReturnType<typeof useCheckPaymentsFilesExistenceSuspenseQuery>;
export type CheckPaymentsFilesExistenceQueryResult = Apollo.QueryResult<Types.CheckPaymentsFilesExistenceQuery, Types.CheckPaymentsFilesExistenceQueryVariables>;
export const UpdatePaymentsFileDocument = gql`
    mutation updatePaymentsFile($id: ID!, $data: PaymentsFileUpdateInput!) {
  paymentsFile: updatePaymentsFile(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdatePaymentsFileMutationFn = Apollo.MutationFunction<Types.UpdatePaymentsFileMutation, Types.UpdatePaymentsFileMutationVariables>;

/**
 * __useUpdatePaymentsFileMutation__
 *
 * To run a mutation, you first call `useUpdatePaymentsFileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePaymentsFileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePaymentsFileMutation, { data, loading, error }] = useUpdatePaymentsFileMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdatePaymentsFileMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdatePaymentsFileMutation, Types.UpdatePaymentsFileMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdatePaymentsFileMutation, Types.UpdatePaymentsFileMutationVariables>(UpdatePaymentsFileDocument, options);
      }
export type UpdatePaymentsFileMutationHookResult = ReturnType<typeof useUpdatePaymentsFileMutation>;
export type UpdatePaymentsFileMutationResult = Apollo.MutationResult<Types.UpdatePaymentsFileMutation>;
export type UpdatePaymentsFileMutationOptions = Apollo.BaseMutationOptions<Types.UpdatePaymentsFileMutation, Types.UpdatePaymentsFileMutationVariables>;
export const GetBankAccountReportTasksDocument = gql`
    query getBankAccountReportTasks($where: BankAccountReportTaskWhereInput!) {
  tasks: allBankAccountReportTasks(where: $where) {
    id
    progress
    status
    __typename
  }
}
    `;

/**
 * __useGetBankAccountReportTasksQuery__
 *
 * To run a query within a React component, call `useGetBankAccountReportTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBankAccountReportTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBankAccountReportTasksQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetBankAccountReportTasksQuery(baseOptions: Apollo.QueryHookOptions<Types.GetBankAccountReportTasksQuery, Types.GetBankAccountReportTasksQueryVariables> & ({ variables: Types.GetBankAccountReportTasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetBankAccountReportTasksQuery, Types.GetBankAccountReportTasksQueryVariables>(GetBankAccountReportTasksDocument, options);
      }
export function useGetBankAccountReportTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetBankAccountReportTasksQuery, Types.GetBankAccountReportTasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetBankAccountReportTasksQuery, Types.GetBankAccountReportTasksQueryVariables>(GetBankAccountReportTasksDocument, options);
        }
export function useGetBankAccountReportTasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetBankAccountReportTasksQuery, Types.GetBankAccountReportTasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetBankAccountReportTasksQuery, Types.GetBankAccountReportTasksQueryVariables>(GetBankAccountReportTasksDocument, options);
        }
export type GetBankAccountReportTasksQueryHookResult = ReturnType<typeof useGetBankAccountReportTasksQuery>;
export type GetBankAccountReportTasksLazyQueryHookResult = ReturnType<typeof useGetBankAccountReportTasksLazyQuery>;
export type GetBankAccountReportTasksSuspenseQueryHookResult = ReturnType<typeof useGetBankAccountReportTasksSuspenseQuery>;
export type GetBankAccountReportTasksQueryResult = Apollo.QueryResult<Types.GetBankAccountReportTasksQuery, Types.GetBankAccountReportTasksQueryVariables>;
export const CreateBankAccountReportTaskDocument = gql`
    mutation createBankAccountReportTask($data: BankAccountReportTaskCreateInput!) {
  task: createBankAccountReportTask(data: $data) {
    id
    progress
    status
    __typename
  }
}
    `;
export type CreateBankAccountReportTaskMutationFn = Apollo.MutationFunction<Types.CreateBankAccountReportTaskMutation, Types.CreateBankAccountReportTaskMutationVariables>;

/**
 * __useCreateBankAccountReportTaskMutation__
 *
 * To run a mutation, you first call `useCreateBankAccountReportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBankAccountReportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBankAccountReportTaskMutation, { data, loading, error }] = useCreateBankAccountReportTaskMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateBankAccountReportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateBankAccountReportTaskMutation, Types.CreateBankAccountReportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateBankAccountReportTaskMutation, Types.CreateBankAccountReportTaskMutationVariables>(CreateBankAccountReportTaskDocument, options);
      }
export type CreateBankAccountReportTaskMutationHookResult = ReturnType<typeof useCreateBankAccountReportTaskMutation>;
export type CreateBankAccountReportTaskMutationResult = Apollo.MutationResult<Types.CreateBankAccountReportTaskMutation>;
export type CreateBankAccountReportTaskMutationOptions = Apollo.BaseMutationOptions<Types.CreateBankAccountReportTaskMutation, Types.CreateBankAccountReportTaskMutationVariables>;
export const UpdateBankAccountReportTaskDocument = gql`
    mutation updateBankAccountReportTask($id: ID!, $data: BankAccountReportTaskUpdateInput!) {
  task: updateBankAccountReportTask(data: $data, id: $id) {
    id
    progress
    status
    __typename
  }
}
    `;
export type UpdateBankAccountReportTaskMutationFn = Apollo.MutationFunction<Types.UpdateBankAccountReportTaskMutation, Types.UpdateBankAccountReportTaskMutationVariables>;

/**
 * __useUpdateBankAccountReportTaskMutation__
 *
 * To run a mutation, you first call `useUpdateBankAccountReportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBankAccountReportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBankAccountReportTaskMutation, { data, loading, error }] = useUpdateBankAccountReportTaskMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateBankAccountReportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateBankAccountReportTaskMutation, Types.UpdateBankAccountReportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateBankAccountReportTaskMutation, Types.UpdateBankAccountReportTaskMutationVariables>(UpdateBankAccountReportTaskDocument, options);
      }
export type UpdateBankAccountReportTaskMutationHookResult = ReturnType<typeof useUpdateBankAccountReportTaskMutation>;
export type UpdateBankAccountReportTaskMutationResult = Apollo.MutationResult<Types.UpdateBankAccountReportTaskMutation>;
export type UpdateBankAccountReportTaskMutationOptions = Apollo.BaseMutationOptions<Types.UpdateBankAccountReportTaskMutation, Types.UpdateBankAccountReportTaskMutationVariables>;
export const GetBankSyncTasksDocument = gql`
    query getBankSyncTasks($where: BankSyncTaskWhereInput!) {
  tasks: allBankSyncTasks(where: $where) {
    id
    status
    processedCount
    totalCount
    meta
    property {
      id
    }
    options {
      type
    }
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
}
    `;

/**
 * __useGetBankSyncTasksQuery__
 *
 * To run a query within a React component, call `useGetBankSyncTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBankSyncTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBankSyncTasksQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetBankSyncTasksQuery(baseOptions: Apollo.QueryHookOptions<Types.GetBankSyncTasksQuery, Types.GetBankSyncTasksQueryVariables> & ({ variables: Types.GetBankSyncTasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetBankSyncTasksQuery, Types.GetBankSyncTasksQueryVariables>(GetBankSyncTasksDocument, options);
      }
export function useGetBankSyncTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetBankSyncTasksQuery, Types.GetBankSyncTasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetBankSyncTasksQuery, Types.GetBankSyncTasksQueryVariables>(GetBankSyncTasksDocument, options);
        }
export function useGetBankSyncTasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetBankSyncTasksQuery, Types.GetBankSyncTasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetBankSyncTasksQuery, Types.GetBankSyncTasksQueryVariables>(GetBankSyncTasksDocument, options);
        }
export type GetBankSyncTasksQueryHookResult = ReturnType<typeof useGetBankSyncTasksQuery>;
export type GetBankSyncTasksLazyQueryHookResult = ReturnType<typeof useGetBankSyncTasksLazyQuery>;
export type GetBankSyncTasksSuspenseQueryHookResult = ReturnType<typeof useGetBankSyncTasksSuspenseQuery>;
export type GetBankSyncTasksQueryResult = Apollo.QueryResult<Types.GetBankSyncTasksQuery, Types.GetBankSyncTasksQueryVariables>;
export const CreateBankSyncTaskDocument = gql`
    mutation createBankSyncTask($data: BankSyncTaskCreateInput!) {
  task: createBankSyncTask(data: $data) {
    id
    status
    processedCount
    totalCount
    meta
    property {
      id
    }
    options {
      type
    }
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
}
    `;
export type CreateBankSyncTaskMutationFn = Apollo.MutationFunction<Types.CreateBankSyncTaskMutation, Types.CreateBankSyncTaskMutationVariables>;

/**
 * __useCreateBankSyncTaskMutation__
 *
 * To run a mutation, you first call `useCreateBankSyncTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateBankSyncTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createBankSyncTaskMutation, { data, loading, error }] = useCreateBankSyncTaskMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateBankSyncTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateBankSyncTaskMutation, Types.CreateBankSyncTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateBankSyncTaskMutation, Types.CreateBankSyncTaskMutationVariables>(CreateBankSyncTaskDocument, options);
      }
export type CreateBankSyncTaskMutationHookResult = ReturnType<typeof useCreateBankSyncTaskMutation>;
export type CreateBankSyncTaskMutationResult = Apollo.MutationResult<Types.CreateBankSyncTaskMutation>;
export type CreateBankSyncTaskMutationOptions = Apollo.BaseMutationOptions<Types.CreateBankSyncTaskMutation, Types.CreateBankSyncTaskMutationVariables>;
export const UpdateBankSyncTaskDocument = gql`
    mutation updateBankSyncTask($id: ID!, $data: BankSyncTaskUpdateInput!) {
  task: updateBankSyncTask(data: $data, id: $id) {
    id
    status
    processedCount
    totalCount
    meta
    property {
      id
    }
    options {
      type
    }
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
}
    `;
export type UpdateBankSyncTaskMutationFn = Apollo.MutationFunction<Types.UpdateBankSyncTaskMutation, Types.UpdateBankSyncTaskMutationVariables>;

/**
 * __useUpdateBankSyncTaskMutation__
 *
 * To run a mutation, you first call `useUpdateBankSyncTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBankSyncTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBankSyncTaskMutation, { data, loading, error }] = useUpdateBankSyncTaskMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateBankSyncTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateBankSyncTaskMutation, Types.UpdateBankSyncTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateBankSyncTaskMutation, Types.UpdateBankSyncTaskMutationVariables>(UpdateBankSyncTaskDocument, options);
      }
export type UpdateBankSyncTaskMutationHookResult = ReturnType<typeof useUpdateBankSyncTaskMutation>;
export type UpdateBankSyncTaskMutationResult = Apollo.MutationResult<Types.UpdateBankSyncTaskMutation>;
export type UpdateBankSyncTaskMutationOptions = Apollo.BaseMutationOptions<Types.UpdateBankSyncTaskMutation, Types.UpdateBankSyncTaskMutationVariables>;
export const GetBillingIntegrationOrganizationContextsDocument = gql`
    query getBillingIntegrationOrganizationContexts($integration: BillingIntegrationWhereInput!, $organization: OrganizationWhereInput!) {
  contexts: allBillingIntegrationOrganizationContexts(
    where: {integration: $integration, organization: $organization}
    first: 1
  ) {
    id
    lastReport
  }
}
    `;

/**
 * __useGetBillingIntegrationOrganizationContextsQuery__
 *
 * To run a query within a React component, call `useGetBillingIntegrationOrganizationContextsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBillingIntegrationOrganizationContextsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBillingIntegrationOrganizationContextsQuery({
 *   variables: {
 *      integration: // value for 'integration'
 *      organization: // value for 'organization'
 *   },
 * });
 */
export function useGetBillingIntegrationOrganizationContextsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetBillingIntegrationOrganizationContextsQuery, Types.GetBillingIntegrationOrganizationContextsQueryVariables> & ({ variables: Types.GetBillingIntegrationOrganizationContextsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetBillingIntegrationOrganizationContextsQuery, Types.GetBillingIntegrationOrganizationContextsQueryVariables>(GetBillingIntegrationOrganizationContextsDocument, options);
      }
export function useGetBillingIntegrationOrganizationContextsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetBillingIntegrationOrganizationContextsQuery, Types.GetBillingIntegrationOrganizationContextsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetBillingIntegrationOrganizationContextsQuery, Types.GetBillingIntegrationOrganizationContextsQueryVariables>(GetBillingIntegrationOrganizationContextsDocument, options);
        }
export function useGetBillingIntegrationOrganizationContextsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetBillingIntegrationOrganizationContextsQuery, Types.GetBillingIntegrationOrganizationContextsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetBillingIntegrationOrganizationContextsQuery, Types.GetBillingIntegrationOrganizationContextsQueryVariables>(GetBillingIntegrationOrganizationContextsDocument, options);
        }
export type GetBillingIntegrationOrganizationContextsQueryHookResult = ReturnType<typeof useGetBillingIntegrationOrganizationContextsQuery>;
export type GetBillingIntegrationOrganizationContextsLazyQueryHookResult = ReturnType<typeof useGetBillingIntegrationOrganizationContextsLazyQuery>;
export type GetBillingIntegrationOrganizationContextsSuspenseQueryHookResult = ReturnType<typeof useGetBillingIntegrationOrganizationContextsSuspenseQuery>;
export type GetBillingIntegrationOrganizationContextsQueryResult = Apollo.QueryResult<Types.GetBillingIntegrationOrganizationContextsQuery, Types.GetBillingIntegrationOrganizationContextsQueryVariables>;
export const GetBillingReceiptsByPropertyCountDocument = gql`
    query getBillingReceiptsByPropertyCount($context: BillingIntegrationOrganizationContextWhereInput!, $property: BillingPropertyWhereInput!, $period_gte: String!) {
  count: _allBillingReceiptsMeta(
    where: {context: $context, property: $property, period_gte: $period_gte}
  ) {
    count
  }
}
    `;

/**
 * __useGetBillingReceiptsByPropertyCountQuery__
 *
 * To run a query within a React component, call `useGetBillingReceiptsByPropertyCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBillingReceiptsByPropertyCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBillingReceiptsByPropertyCountQuery({
 *   variables: {
 *      context: // value for 'context'
 *      property: // value for 'property'
 *      period_gte: // value for 'period_gte'
 *   },
 * });
 */
export function useGetBillingReceiptsByPropertyCountQuery(baseOptions: Apollo.QueryHookOptions<Types.GetBillingReceiptsByPropertyCountQuery, Types.GetBillingReceiptsByPropertyCountQueryVariables> & ({ variables: Types.GetBillingReceiptsByPropertyCountQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetBillingReceiptsByPropertyCountQuery, Types.GetBillingReceiptsByPropertyCountQueryVariables>(GetBillingReceiptsByPropertyCountDocument, options);
      }
export function useGetBillingReceiptsByPropertyCountLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetBillingReceiptsByPropertyCountQuery, Types.GetBillingReceiptsByPropertyCountQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetBillingReceiptsByPropertyCountQuery, Types.GetBillingReceiptsByPropertyCountQueryVariables>(GetBillingReceiptsByPropertyCountDocument, options);
        }
export function useGetBillingReceiptsByPropertyCountSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetBillingReceiptsByPropertyCountQuery, Types.GetBillingReceiptsByPropertyCountQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetBillingReceiptsByPropertyCountQuery, Types.GetBillingReceiptsByPropertyCountQueryVariables>(GetBillingReceiptsByPropertyCountDocument, options);
        }
export type GetBillingReceiptsByPropertyCountQueryHookResult = ReturnType<typeof useGetBillingReceiptsByPropertyCountQuery>;
export type GetBillingReceiptsByPropertyCountLazyQueryHookResult = ReturnType<typeof useGetBillingReceiptsByPropertyCountLazyQuery>;
export type GetBillingReceiptsByPropertyCountSuspenseQueryHookResult = ReturnType<typeof useGetBillingReceiptsByPropertyCountSuspenseQuery>;
export type GetBillingReceiptsByPropertyCountQueryResult = Apollo.QueryResult<Types.GetBillingReceiptsByPropertyCountQuery, Types.GetBillingReceiptsByPropertyCountQueryVariables>;
export const GetProcessingTasksDocument = gql`
    query getProcessingTasks($userId: ID!, $createdAtGte: String!) {
  allTicketDocumentGenerationTasks(
    where: {status: processing, user: {id: $userId}, createdAt_gte: $createdAtGte}
  ) {
    id
    progress
    status
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
  allTicketExportTasks(
    where: {status: processing, user: {id: $userId}, createdAt_gte: $createdAtGte}
  ) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
  allIncidentExportTasks(
    where: {status: processing, user: {id: $userId}, createdAt_gte: $createdAtGte}
  ) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
  allContactExportTasks(
    where: {status: processing, user: {id: $userId}, createdAt_gte: $createdAtGte}
  ) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
  allBankSyncTasks(
    where: {status: processing, user: {id: $userId}, createdAt_gte: $createdAtGte}
  ) {
    id
    status
    processedCount
    totalCount
    meta
    property {
      id
    }
    options {
      type
    }
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
  allBankAccountReportTasks(
    where: {status: processing, user: {id: $userId}, createdAt_gte: $createdAtGte}
  ) {
    id
    progress
    status
    __typename
  }
  allNewsItemRecipientsExportTasks(
    where: {status: processing, user: {id: $userId}, createdAt_gte: $createdAtGte}
  ) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
  allMeterReadingsImportTasks(
    where: {status: processing, user: {id: $userId}, createdAt_gte: $createdAtGte}
  ) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    errorFile {
      publicUrl
    }
    errorMessage
    totalRecordsCount
    processedRecordsCount
    __typename
  }
  allMeterReadingExportTasks(
    where: {status: processing, user: {id: $userId}, createdAt_gte: $createdAtGte}
  ) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;

/**
 * __useGetProcessingTasksQuery__
 *
 * To run a query within a React component, call `useGetProcessingTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProcessingTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProcessingTasksQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      createdAtGte: // value for 'createdAtGte'
 *   },
 * });
 */
export function useGetProcessingTasksQuery(baseOptions: Apollo.QueryHookOptions<Types.GetProcessingTasksQuery, Types.GetProcessingTasksQueryVariables> & ({ variables: Types.GetProcessingTasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetProcessingTasksQuery, Types.GetProcessingTasksQueryVariables>(GetProcessingTasksDocument, options);
      }
export function useGetProcessingTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetProcessingTasksQuery, Types.GetProcessingTasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetProcessingTasksQuery, Types.GetProcessingTasksQueryVariables>(GetProcessingTasksDocument, options);
        }
export function useGetProcessingTasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetProcessingTasksQuery, Types.GetProcessingTasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetProcessingTasksQuery, Types.GetProcessingTasksQueryVariables>(GetProcessingTasksDocument, options);
        }
export type GetProcessingTasksQueryHookResult = ReturnType<typeof useGetProcessingTasksQuery>;
export type GetProcessingTasksLazyQueryHookResult = ReturnType<typeof useGetProcessingTasksLazyQuery>;
export type GetProcessingTasksSuspenseQueryHookResult = ReturnType<typeof useGetProcessingTasksSuspenseQuery>;
export type GetProcessingTasksQueryResult = Apollo.QueryResult<Types.GetProcessingTasksQuery, Types.GetProcessingTasksQueryVariables>;
export const GetContactByIdDocument = gql`
    query getContactById($id: ID!) {
  contacts: allContacts(where: {id: $id}, first: 1) {
    id
    name
    email
    phone
    unitName
    unitType
    isVerified
    ownershipPercentage
    note
    communityFee
    organization {
      id
    }
    property {
      id
      address
    }
    role {
      id
      name
    }
  }
}
    `;

/**
 * __useGetContactByIdQuery__
 *
 * To run a query within a React component, call `useGetContactByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetContactByIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetContactByIdQuery, Types.GetContactByIdQueryVariables> & ({ variables: Types.GetContactByIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetContactByIdQuery, Types.GetContactByIdQueryVariables>(GetContactByIdDocument, options);
      }
export function useGetContactByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetContactByIdQuery, Types.GetContactByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetContactByIdQuery, Types.GetContactByIdQueryVariables>(GetContactByIdDocument, options);
        }
export function useGetContactByIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetContactByIdQuery, Types.GetContactByIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetContactByIdQuery, Types.GetContactByIdQueryVariables>(GetContactByIdDocument, options);
        }
export type GetContactByIdQueryHookResult = ReturnType<typeof useGetContactByIdQuery>;
export type GetContactByIdLazyQueryHookResult = ReturnType<typeof useGetContactByIdLazyQuery>;
export type GetContactByIdSuspenseQueryHookResult = ReturnType<typeof useGetContactByIdSuspenseQuery>;
export type GetContactByIdQueryResult = Apollo.QueryResult<Types.GetContactByIdQuery, Types.GetContactByIdQueryVariables>;
export const GetContactByUnitDocument = gql`
    query getContactByUnit($propertyId: ID!, $unitName: String!, $unitType: ContactUnitTypeType!) {
  contacts: allContacts(
    where: {unitName: $unitName, unitType: $unitType, property: {id: $propertyId}}
    first: 50
  ) {
    id
    name
    email
    phone
    role {
      id
      name
    }
    isVerified
  }
}
    `;

/**
 * __useGetContactByUnitQuery__
 *
 * To run a query within a React component, call `useGetContactByUnitQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactByUnitQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactByUnitQuery({
 *   variables: {
 *      propertyId: // value for 'propertyId'
 *      unitName: // value for 'unitName'
 *      unitType: // value for 'unitType'
 *   },
 * });
 */
export function useGetContactByUnitQuery(baseOptions: Apollo.QueryHookOptions<Types.GetContactByUnitQuery, Types.GetContactByUnitQueryVariables> & ({ variables: Types.GetContactByUnitQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetContactByUnitQuery, Types.GetContactByUnitQueryVariables>(GetContactByUnitDocument, options);
      }
export function useGetContactByUnitLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetContactByUnitQuery, Types.GetContactByUnitQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetContactByUnitQuery, Types.GetContactByUnitQueryVariables>(GetContactByUnitDocument, options);
        }
export function useGetContactByUnitSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetContactByUnitQuery, Types.GetContactByUnitQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetContactByUnitQuery, Types.GetContactByUnitQueryVariables>(GetContactByUnitDocument, options);
        }
export type GetContactByUnitQueryHookResult = ReturnType<typeof useGetContactByUnitQuery>;
export type GetContactByUnitLazyQueryHookResult = ReturnType<typeof useGetContactByUnitLazyQuery>;
export type GetContactByUnitSuspenseQueryHookResult = ReturnType<typeof useGetContactByUnitSuspenseQuery>;
export type GetContactByUnitQueryResult = Apollo.QueryResult<Types.GetContactByUnitQuery, Types.GetContactByUnitQueryVariables>;
export const GetContactsExistenceDocument = gql`
    query getContactsExistence($where: ContactWhereInput) {
  contacts: allContacts(first: 1, where: $where) {
    id
  }
}
    `;

/**
 * __useGetContactsExistenceQuery__
 *
 * To run a query within a React component, call `useGetContactsExistenceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactsExistenceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactsExistenceQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetContactsExistenceQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetContactsExistenceQuery, Types.GetContactsExistenceQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetContactsExistenceQuery, Types.GetContactsExistenceQueryVariables>(GetContactsExistenceDocument, options);
      }
export function useGetContactsExistenceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetContactsExistenceQuery, Types.GetContactsExistenceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetContactsExistenceQuery, Types.GetContactsExistenceQueryVariables>(GetContactsExistenceDocument, options);
        }
export function useGetContactsExistenceSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetContactsExistenceQuery, Types.GetContactsExistenceQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetContactsExistenceQuery, Types.GetContactsExistenceQueryVariables>(GetContactsExistenceDocument, options);
        }
export type GetContactsExistenceQueryHookResult = ReturnType<typeof useGetContactsExistenceQuery>;
export type GetContactsExistenceLazyQueryHookResult = ReturnType<typeof useGetContactsExistenceLazyQuery>;
export type GetContactsExistenceSuspenseQueryHookResult = ReturnType<typeof useGetContactsExistenceSuspenseQuery>;
export type GetContactsExistenceQueryResult = Apollo.QueryResult<Types.GetContactsExistenceQuery, Types.GetContactsExistenceQueryVariables>;
export const GetContactForClientCardDocument = gql`
    query getContactForClientCard($where: ContactWhereInput, $first: Int!, $skip: Int, $sortBy: [SortContactsBy!]) {
  contacts: allContacts(
    where: $where
    first: $first
    skip: $skip
    sortBy: $sortBy
  ) {
    id
    name
    unitName
    unitType
    phone
    email
    ownershipPercentage
    note
    communityFee
    organization {
      id
      name
      phoneNumberPrefix
    }
    property {
      id
      address
      addressMeta {
        ...AddressMetaForTableAddress
      }
      map {
        sections {
          ...SectionOrParkingInfo
        }
        parking {
          ...SectionOrParkingInfo
        }
      }
    }
  }
}
    ${AddressMetaForTableAddressFragmentDoc}
${SectionOrParkingInfoFragmentDoc}`;

/**
 * __useGetContactForClientCardQuery__
 *
 * To run a query within a React component, call `useGetContactForClientCardQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactForClientCardQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactForClientCardQuery({
 *   variables: {
 *      where: // value for 'where'
 *      first: // value for 'first'
 *      skip: // value for 'skip'
 *      sortBy: // value for 'sortBy'
 *   },
 * });
 */
export function useGetContactForClientCardQuery(baseOptions: Apollo.QueryHookOptions<Types.GetContactForClientCardQuery, Types.GetContactForClientCardQueryVariables> & ({ variables: Types.GetContactForClientCardQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetContactForClientCardQuery, Types.GetContactForClientCardQueryVariables>(GetContactForClientCardDocument, options);
      }
export function useGetContactForClientCardLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetContactForClientCardQuery, Types.GetContactForClientCardQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetContactForClientCardQuery, Types.GetContactForClientCardQueryVariables>(GetContactForClientCardDocument, options);
        }
export function useGetContactForClientCardSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetContactForClientCardQuery, Types.GetContactForClientCardQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetContactForClientCardQuery, Types.GetContactForClientCardQueryVariables>(GetContactForClientCardDocument, options);
        }
export type GetContactForClientCardQueryHookResult = ReturnType<typeof useGetContactForClientCardQuery>;
export type GetContactForClientCardLazyQueryHookResult = ReturnType<typeof useGetContactForClientCardLazyQuery>;
export type GetContactForClientCardSuspenseQueryHookResult = ReturnType<typeof useGetContactForClientCardSuspenseQuery>;
export type GetContactForClientCardQueryResult = Apollo.QueryResult<Types.GetContactForClientCardQuery, Types.GetContactForClientCardQueryVariables>;
export const GetContactsForTableDocument = gql`
    query getContactsForTable($where: ContactWhereInput, $first: Int, $skip: Int, $sortBy: [SortContactsBy!]) {
  contacts: allContacts(
    where: $where
    first: $first
    skip: $skip
    sortBy: $sortBy
  ) {
    id
    name
    unitName
    unitType
    phone
    email
    ownershipPercentage
    note
    communityFee
    organization {
      id
      name
    }
    property {
      id
      deletedAt
      address
      addressMeta {
        ...AddressMetaForTableAddress
      }
    }
    role {
      id
      name
    }
  }
  meta: _allContactsMeta(where: $where) {
    count
  }
}
    ${AddressMetaForTableAddressFragmentDoc}`;

/**
 * __useGetContactsForTableQuery__
 *
 * To run a query within a React component, call `useGetContactsForTableQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactsForTableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactsForTableQuery({
 *   variables: {
 *      where: // value for 'where'
 *      first: // value for 'first'
 *      skip: // value for 'skip'
 *      sortBy: // value for 'sortBy'
 *   },
 * });
 */
export function useGetContactsForTableQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetContactsForTableQuery, Types.GetContactsForTableQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetContactsForTableQuery, Types.GetContactsForTableQueryVariables>(GetContactsForTableDocument, options);
      }
export function useGetContactsForTableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetContactsForTableQuery, Types.GetContactsForTableQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetContactsForTableQuery, Types.GetContactsForTableQueryVariables>(GetContactsForTableDocument, options);
        }
export function useGetContactsForTableSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetContactsForTableQuery, Types.GetContactsForTableQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetContactsForTableQuery, Types.GetContactsForTableQueryVariables>(GetContactsForTableDocument, options);
        }
export type GetContactsForTableQueryHookResult = ReturnType<typeof useGetContactsForTableQuery>;
export type GetContactsForTableLazyQueryHookResult = ReturnType<typeof useGetContactsForTableLazyQuery>;
export type GetContactsForTableSuspenseQueryHookResult = ReturnType<typeof useGetContactsForTableSuspenseQuery>;
export type GetContactsForTableQueryResult = Apollo.QueryResult<Types.GetContactsForTableQuery, Types.GetContactsForTableQueryVariables>;
export const GetContactEditorContactsDocument = gql`
    query getContactEditorContacts($where: ContactWhereInput) {
  contacts: allContacts(where: $where, first: 100) {
    id
    phone
    name
  }
}
    `;

/**
 * __useGetContactEditorContactsQuery__
 *
 * To run a query within a React component, call `useGetContactEditorContactsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactEditorContactsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactEditorContactsQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetContactEditorContactsQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetContactEditorContactsQuery, Types.GetContactEditorContactsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetContactEditorContactsQuery, Types.GetContactEditorContactsQueryVariables>(GetContactEditorContactsDocument, options);
      }
export function useGetContactEditorContactsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetContactEditorContactsQuery, Types.GetContactEditorContactsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetContactEditorContactsQuery, Types.GetContactEditorContactsQueryVariables>(GetContactEditorContactsDocument, options);
        }
export function useGetContactEditorContactsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetContactEditorContactsQuery, Types.GetContactEditorContactsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetContactEditorContactsQuery, Types.GetContactEditorContactsQueryVariables>(GetContactEditorContactsDocument, options);
        }
export type GetContactEditorContactsQueryHookResult = ReturnType<typeof useGetContactEditorContactsQuery>;
export type GetContactEditorContactsLazyQueryHookResult = ReturnType<typeof useGetContactEditorContactsLazyQuery>;
export type GetContactEditorContactsSuspenseQueryHookResult = ReturnType<typeof useGetContactEditorContactsSuspenseQuery>;
export type GetContactEditorContactsQueryResult = Apollo.QueryResult<Types.GetContactEditorContactsQuery, Types.GetContactEditorContactsQueryVariables>;
export const CreateContactDocument = gql`
    mutation createContact($data: ContactCreateInput!) {
  contact: createContact(data: $data) {
    id
    phone
    unitName
    unitType
    property {
      id
    }
  }
}
    `;
export type CreateContactMutationFn = Apollo.MutationFunction<Types.CreateContactMutation, Types.CreateContactMutationVariables>;

/**
 * __useCreateContactMutation__
 *
 * To run a mutation, you first call `useCreateContactMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateContactMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createContactMutation, { data, loading, error }] = useCreateContactMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateContactMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateContactMutation, Types.CreateContactMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateContactMutation, Types.CreateContactMutationVariables>(CreateContactDocument, options);
      }
export type CreateContactMutationHookResult = ReturnType<typeof useCreateContactMutation>;
export type CreateContactMutationResult = Apollo.MutationResult<Types.CreateContactMutation>;
export type CreateContactMutationOptions = Apollo.BaseMutationOptions<Types.CreateContactMutation, Types.CreateContactMutationVariables>;
export const UpdateContactDocument = gql`
    mutation updateContact($id: ID!, $data: ContactUpdateInput!) {
  contact: updateContact(id: $id, data: $data) {
    id
    phone
    unitName
    unitType
    property {
      id
    }
  }
}
    `;
export type UpdateContactMutationFn = Apollo.MutationFunction<Types.UpdateContactMutation, Types.UpdateContactMutationVariables>;

/**
 * __useUpdateContactMutation__
 *
 * To run a mutation, you first call `useUpdateContactMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateContactMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateContactMutation, { data, loading, error }] = useUpdateContactMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateContactMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateContactMutation, Types.UpdateContactMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateContactMutation, Types.UpdateContactMutationVariables>(UpdateContactDocument, options);
      }
export type UpdateContactMutationHookResult = ReturnType<typeof useUpdateContactMutation>;
export type UpdateContactMutationResult = Apollo.MutationResult<Types.UpdateContactMutation>;
export type UpdateContactMutationOptions = Apollo.BaseMutationOptions<Types.UpdateContactMutation, Types.UpdateContactMutationVariables>;
export const GetContactExportTasksDocument = gql`
    query getContactExportTasks($where: ContactExportTaskWhereInput!) {
  tasks: allContactExportTasks(where: $where) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;

/**
 * __useGetContactExportTasksQuery__
 *
 * To run a query within a React component, call `useGetContactExportTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactExportTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactExportTasksQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetContactExportTasksQuery(baseOptions: Apollo.QueryHookOptions<Types.GetContactExportTasksQuery, Types.GetContactExportTasksQueryVariables> & ({ variables: Types.GetContactExportTasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetContactExportTasksQuery, Types.GetContactExportTasksQueryVariables>(GetContactExportTasksDocument, options);
      }
export function useGetContactExportTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetContactExportTasksQuery, Types.GetContactExportTasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetContactExportTasksQuery, Types.GetContactExportTasksQueryVariables>(GetContactExportTasksDocument, options);
        }
export function useGetContactExportTasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetContactExportTasksQuery, Types.GetContactExportTasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetContactExportTasksQuery, Types.GetContactExportTasksQueryVariables>(GetContactExportTasksDocument, options);
        }
export type GetContactExportTasksQueryHookResult = ReturnType<typeof useGetContactExportTasksQuery>;
export type GetContactExportTasksLazyQueryHookResult = ReturnType<typeof useGetContactExportTasksLazyQuery>;
export type GetContactExportTasksSuspenseQueryHookResult = ReturnType<typeof useGetContactExportTasksSuspenseQuery>;
export type GetContactExportTasksQueryResult = Apollo.QueryResult<Types.GetContactExportTasksQuery, Types.GetContactExportTasksQueryVariables>;
export const CreateContactExportTaskDocument = gql`
    mutation createContactExportTask($data: ContactExportTaskCreateInput!) {
  task: createContactExportTask(data: $data) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;
export type CreateContactExportTaskMutationFn = Apollo.MutationFunction<Types.CreateContactExportTaskMutation, Types.CreateContactExportTaskMutationVariables>;

/**
 * __useCreateContactExportTaskMutation__
 *
 * To run a mutation, you first call `useCreateContactExportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateContactExportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createContactExportTaskMutation, { data, loading, error }] = useCreateContactExportTaskMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateContactExportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateContactExportTaskMutation, Types.CreateContactExportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateContactExportTaskMutation, Types.CreateContactExportTaskMutationVariables>(CreateContactExportTaskDocument, options);
      }
export type CreateContactExportTaskMutationHookResult = ReturnType<typeof useCreateContactExportTaskMutation>;
export type CreateContactExportTaskMutationResult = Apollo.MutationResult<Types.CreateContactExportTaskMutation>;
export type CreateContactExportTaskMutationOptions = Apollo.BaseMutationOptions<Types.CreateContactExportTaskMutation, Types.CreateContactExportTaskMutationVariables>;
export const UpdateContactExportTaskDocument = gql`
    mutation updateContactExportTask($id: ID!, $data: ContactExportTaskUpdateInput!) {
  task: updateContactExportTask(data: $data, id: $id) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;
export type UpdateContactExportTaskMutationFn = Apollo.MutationFunction<Types.UpdateContactExportTaskMutation, Types.UpdateContactExportTaskMutationVariables>;

/**
 * __useUpdateContactExportTaskMutation__
 *
 * To run a mutation, you first call `useUpdateContactExportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateContactExportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateContactExportTaskMutation, { data, loading, error }] = useUpdateContactExportTaskMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateContactExportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateContactExportTaskMutation, Types.UpdateContactExportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateContactExportTaskMutation, Types.UpdateContactExportTaskMutationVariables>(UpdateContactExportTaskDocument, options);
      }
export type UpdateContactExportTaskMutationHookResult = ReturnType<typeof useUpdateContactExportTaskMutation>;
export type UpdateContactExportTaskMutationResult = Apollo.MutationResult<Types.UpdateContactExportTaskMutation>;
export type UpdateContactExportTaskMutationOptions = Apollo.BaseMutationOptions<Types.UpdateContactExportTaskMutation, Types.UpdateContactExportTaskMutationVariables>;
export const GetCommonOrOrganizationContactRolesDocument = gql`
    query getCommonOrOrganizationContactRoles($organizationId: ID!) {
  roles: allContactRoles(
    where: {OR: [{organization_is_null: true}, {organization: {id: $organizationId}}]}
  ) {
    id
    name
  }
}
    `;

/**
 * __useGetCommonOrOrganizationContactRolesQuery__
 *
 * To run a query within a React component, call `useGetCommonOrOrganizationContactRolesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCommonOrOrganizationContactRolesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCommonOrOrganizationContactRolesQuery({
 *   variables: {
 *      organizationId: // value for 'organizationId'
 *   },
 * });
 */
export function useGetCommonOrOrganizationContactRolesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetCommonOrOrganizationContactRolesQuery, Types.GetCommonOrOrganizationContactRolesQueryVariables> & ({ variables: Types.GetCommonOrOrganizationContactRolesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetCommonOrOrganizationContactRolesQuery, Types.GetCommonOrOrganizationContactRolesQueryVariables>(GetCommonOrOrganizationContactRolesDocument, options);
      }
export function useGetCommonOrOrganizationContactRolesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetCommonOrOrganizationContactRolesQuery, Types.GetCommonOrOrganizationContactRolesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetCommonOrOrganizationContactRolesQuery, Types.GetCommonOrOrganizationContactRolesQueryVariables>(GetCommonOrOrganizationContactRolesDocument, options);
        }
export function useGetCommonOrOrganizationContactRolesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetCommonOrOrganizationContactRolesQuery, Types.GetCommonOrOrganizationContactRolesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetCommonOrOrganizationContactRolesQuery, Types.GetCommonOrOrganizationContactRolesQueryVariables>(GetCommonOrOrganizationContactRolesDocument, options);
        }
export type GetCommonOrOrganizationContactRolesQueryHookResult = ReturnType<typeof useGetCommonOrOrganizationContactRolesQuery>;
export type GetCommonOrOrganizationContactRolesLazyQueryHookResult = ReturnType<typeof useGetCommonOrOrganizationContactRolesLazyQuery>;
export type GetCommonOrOrganizationContactRolesSuspenseQueryHookResult = ReturnType<typeof useGetCommonOrOrganizationContactRolesSuspenseQuery>;
export type GetCommonOrOrganizationContactRolesQueryResult = Apollo.QueryResult<Types.GetCommonOrOrganizationContactRolesQuery, Types.GetCommonOrOrganizationContactRolesQueryVariables>;
export const GetTicketInvoicesDocument = gql`
    query getTicketInvoices($ticketId: ID!) {
  invoices: allInvoices(
    where: {ticket: {id: $ticketId}}
    sortBy: [createdAt_DESC]
    first: 100
  ) {
    id
    status
    number
    paymentType
    status
    currencyCode
    rows {
      name
      toPay
      isMin
      count
      sku
    }
    organization {
      id
    }
    createdBy {
      id
      name
      type
    }
    ticket {
      id
    }
  }
}
    `;

/**
 * __useGetTicketInvoicesQuery__
 *
 * To run a query within a React component, call `useGetTicketInvoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketInvoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketInvoicesQuery({
 *   variables: {
 *      ticketId: // value for 'ticketId'
 *   },
 * });
 */
export function useGetTicketInvoicesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketInvoicesQuery, Types.GetTicketInvoicesQueryVariables> & ({ variables: Types.GetTicketInvoicesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketInvoicesQuery, Types.GetTicketInvoicesQueryVariables>(GetTicketInvoicesDocument, options);
      }
export function useGetTicketInvoicesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketInvoicesQuery, Types.GetTicketInvoicesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketInvoicesQuery, Types.GetTicketInvoicesQueryVariables>(GetTicketInvoicesDocument, options);
        }
export function useGetTicketInvoicesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketInvoicesQuery, Types.GetTicketInvoicesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketInvoicesQuery, Types.GetTicketInvoicesQueryVariables>(GetTicketInvoicesDocument, options);
        }
export type GetTicketInvoicesQueryHookResult = ReturnType<typeof useGetTicketInvoicesQuery>;
export type GetTicketInvoicesLazyQueryHookResult = ReturnType<typeof useGetTicketInvoicesLazyQuery>;
export type GetTicketInvoicesSuspenseQueryHookResult = ReturnType<typeof useGetTicketInvoicesSuspenseQuery>;
export type GetTicketInvoicesQueryResult = Apollo.QueryResult<Types.GetTicketInvoicesQuery, Types.GetTicketInvoicesQueryVariables>;
export const GetPublishTicketInvoicesDocument = gql`
    query getPublishTicketInvoices($ticketId: ID!, $first: Int!) {
  publishInvoices: allInvoices(
    where: {ticket: {id: $ticketId}, status: published}
    first: $first
  ) {
    id
  }
}
    `;

/**
 * __useGetPublishTicketInvoicesQuery__
 *
 * To run a query within a React component, call `useGetPublishTicketInvoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPublishTicketInvoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPublishTicketInvoicesQuery({
 *   variables: {
 *      ticketId: // value for 'ticketId'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useGetPublishTicketInvoicesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetPublishTicketInvoicesQuery, Types.GetPublishTicketInvoicesQueryVariables> & ({ variables: Types.GetPublishTicketInvoicesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetPublishTicketInvoicesQuery, Types.GetPublishTicketInvoicesQueryVariables>(GetPublishTicketInvoicesDocument, options);
      }
export function useGetPublishTicketInvoicesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetPublishTicketInvoicesQuery, Types.GetPublishTicketInvoicesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetPublishTicketInvoicesQuery, Types.GetPublishTicketInvoicesQueryVariables>(GetPublishTicketInvoicesDocument, options);
        }
export function useGetPublishTicketInvoicesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetPublishTicketInvoicesQuery, Types.GetPublishTicketInvoicesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetPublishTicketInvoicesQuery, Types.GetPublishTicketInvoicesQueryVariables>(GetPublishTicketInvoicesDocument, options);
        }
export type GetPublishTicketInvoicesQueryHookResult = ReturnType<typeof useGetPublishTicketInvoicesQuery>;
export type GetPublishTicketInvoicesLazyQueryHookResult = ReturnType<typeof useGetPublishTicketInvoicesLazyQuery>;
export type GetPublishTicketInvoicesSuspenseQueryHookResult = ReturnType<typeof useGetPublishTicketInvoicesSuspenseQuery>;
export type GetPublishTicketInvoicesQueryResult = Apollo.QueryResult<Types.GetPublishTicketInvoicesQuery, Types.GetPublishTicketInvoicesQueryVariables>;
export const GetInvoicesByIdsDocument = gql`
    query getInvoicesByIds($ids: [ID!]!) {
  invoices: allInvoices(where: {id_in: $ids}, sortBy: [createdAt_DESC]) {
    id
    status
    number
    paymentType
    status
    currencyCode
    rows {
      name
      toPay
      isMin
      count
      sku
    }
    organization {
      id
    }
    createdBy {
      id
      name
      type
    }
    ticket {
      id
    }
  }
}
    `;

/**
 * __useGetInvoicesByIdsQuery__
 *
 * To run a query within a React component, call `useGetInvoicesByIdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInvoicesByIdsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInvoicesByIdsQuery({
 *   variables: {
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function useGetInvoicesByIdsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetInvoicesByIdsQuery, Types.GetInvoicesByIdsQueryVariables> & ({ variables: Types.GetInvoicesByIdsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetInvoicesByIdsQuery, Types.GetInvoicesByIdsQueryVariables>(GetInvoicesByIdsDocument, options);
      }
export function useGetInvoicesByIdsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetInvoicesByIdsQuery, Types.GetInvoicesByIdsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetInvoicesByIdsQuery, Types.GetInvoicesByIdsQueryVariables>(GetInvoicesByIdsDocument, options);
        }
export function useGetInvoicesByIdsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetInvoicesByIdsQuery, Types.GetInvoicesByIdsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetInvoicesByIdsQuery, Types.GetInvoicesByIdsQueryVariables>(GetInvoicesByIdsDocument, options);
        }
export type GetInvoicesByIdsQueryHookResult = ReturnType<typeof useGetInvoicesByIdsQuery>;
export type GetInvoicesByIdsLazyQueryHookResult = ReturnType<typeof useGetInvoicesByIdsLazyQuery>;
export type GetInvoicesByIdsSuspenseQueryHookResult = ReturnType<typeof useGetInvoicesByIdsSuspenseQuery>;
export type GetInvoicesByIdsQueryResult = Apollo.QueryResult<Types.GetInvoicesByIdsQuery, Types.GetInvoicesByIdsQueryVariables>;
export const CreateInvoiceDocument = gql`
    mutation createInvoice($data: InvoiceCreateInput!) {
  invoice: createInvoice(data: $data) {
    id
  }
}
    `;
export type CreateInvoiceMutationFn = Apollo.MutationFunction<Types.CreateInvoiceMutation, Types.CreateInvoiceMutationVariables>;

/**
 * __useCreateInvoiceMutation__
 *
 * To run a mutation, you first call `useCreateInvoiceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateInvoiceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createInvoiceMutation, { data, loading, error }] = useCreateInvoiceMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateInvoiceMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateInvoiceMutation, Types.CreateInvoiceMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateInvoiceMutation, Types.CreateInvoiceMutationVariables>(CreateInvoiceDocument, options);
      }
export type CreateInvoiceMutationHookResult = ReturnType<typeof useCreateInvoiceMutation>;
export type CreateInvoiceMutationResult = Apollo.MutationResult<Types.CreateInvoiceMutation>;
export type CreateInvoiceMutationOptions = Apollo.BaseMutationOptions<Types.CreateInvoiceMutation, Types.CreateInvoiceMutationVariables>;
export const GetMeterReadingExportTasksDocument = gql`
    query getMeterReadingExportTasks($where: MeterReadingExportTaskWhereInput!) {
  tasks: allMeterReadingExportTasks(where: $where) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;

/**
 * __useGetMeterReadingExportTasksQuery__
 *
 * To run a query within a React component, call `useGetMeterReadingExportTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMeterReadingExportTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMeterReadingExportTasksQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetMeterReadingExportTasksQuery(baseOptions: Apollo.QueryHookOptions<Types.GetMeterReadingExportTasksQuery, Types.GetMeterReadingExportTasksQueryVariables> & ({ variables: Types.GetMeterReadingExportTasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetMeterReadingExportTasksQuery, Types.GetMeterReadingExportTasksQueryVariables>(GetMeterReadingExportTasksDocument, options);
      }
export function useGetMeterReadingExportTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetMeterReadingExportTasksQuery, Types.GetMeterReadingExportTasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetMeterReadingExportTasksQuery, Types.GetMeterReadingExportTasksQueryVariables>(GetMeterReadingExportTasksDocument, options);
        }
export function useGetMeterReadingExportTasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetMeterReadingExportTasksQuery, Types.GetMeterReadingExportTasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetMeterReadingExportTasksQuery, Types.GetMeterReadingExportTasksQueryVariables>(GetMeterReadingExportTasksDocument, options);
        }
export type GetMeterReadingExportTasksQueryHookResult = ReturnType<typeof useGetMeterReadingExportTasksQuery>;
export type GetMeterReadingExportTasksLazyQueryHookResult = ReturnType<typeof useGetMeterReadingExportTasksLazyQuery>;
export type GetMeterReadingExportTasksSuspenseQueryHookResult = ReturnType<typeof useGetMeterReadingExportTasksSuspenseQuery>;
export type GetMeterReadingExportTasksQueryResult = Apollo.QueryResult<Types.GetMeterReadingExportTasksQuery, Types.GetMeterReadingExportTasksQueryVariables>;
export const CreateMeterReadingExportTaskDocument = gql`
    mutation createMeterReadingExportTask($data: MeterReadingExportTaskCreateInput!) {
  task: createMeterReadingExportTask(data: $data) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;
export type CreateMeterReadingExportTaskMutationFn = Apollo.MutationFunction<Types.CreateMeterReadingExportTaskMutation, Types.CreateMeterReadingExportTaskMutationVariables>;

/**
 * __useCreateMeterReadingExportTaskMutation__
 *
 * To run a mutation, you first call `useCreateMeterReadingExportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateMeterReadingExportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createMeterReadingExportTaskMutation, { data, loading, error }] = useCreateMeterReadingExportTaskMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateMeterReadingExportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateMeterReadingExportTaskMutation, Types.CreateMeterReadingExportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateMeterReadingExportTaskMutation, Types.CreateMeterReadingExportTaskMutationVariables>(CreateMeterReadingExportTaskDocument, options);
      }
export type CreateMeterReadingExportTaskMutationHookResult = ReturnType<typeof useCreateMeterReadingExportTaskMutation>;
export type CreateMeterReadingExportTaskMutationResult = Apollo.MutationResult<Types.CreateMeterReadingExportTaskMutation>;
export type CreateMeterReadingExportTaskMutationOptions = Apollo.BaseMutationOptions<Types.CreateMeterReadingExportTaskMutation, Types.CreateMeterReadingExportTaskMutationVariables>;
export const UpdateMeterReadingExportTaskDocument = gql`
    mutation updateMeterReadingExportTask($id: ID!, $data: MeterReadingExportTaskUpdateInput!) {
  task: updateMeterReadingExportTask(data: $data, id: $id) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;
export type UpdateMeterReadingExportTaskMutationFn = Apollo.MutationFunction<Types.UpdateMeterReadingExportTaskMutation, Types.UpdateMeterReadingExportTaskMutationVariables>;

/**
 * __useUpdateMeterReadingExportTaskMutation__
 *
 * To run a mutation, you first call `useUpdateMeterReadingExportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMeterReadingExportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMeterReadingExportTaskMutation, { data, loading, error }] = useUpdateMeterReadingExportTaskMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateMeterReadingExportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateMeterReadingExportTaskMutation, Types.UpdateMeterReadingExportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateMeterReadingExportTaskMutation, Types.UpdateMeterReadingExportTaskMutationVariables>(UpdateMeterReadingExportTaskDocument, options);
      }
export type UpdateMeterReadingExportTaskMutationHookResult = ReturnType<typeof useUpdateMeterReadingExportTaskMutation>;
export type UpdateMeterReadingExportTaskMutationResult = Apollo.MutationResult<Types.UpdateMeterReadingExportTaskMutation>;
export type UpdateMeterReadingExportTaskMutationOptions = Apollo.BaseMutationOptions<Types.UpdateMeterReadingExportTaskMutation, Types.UpdateMeterReadingExportTaskMutationVariables>;
export const GetMeterReadingsImportTasksDocument = gql`
    query getMeterReadingsImportTasks($where: MeterReadingsImportTaskWhereInput!) {
  tasks: allMeterReadingsImportTasks(where: $where) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    errorFile {
      publicUrl
    }
    errorMessage
    totalRecordsCount
    processedRecordsCount
    __typename
  }
}
    `;

/**
 * __useGetMeterReadingsImportTasksQuery__
 *
 * To run a query within a React component, call `useGetMeterReadingsImportTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMeterReadingsImportTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMeterReadingsImportTasksQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetMeterReadingsImportTasksQuery(baseOptions: Apollo.QueryHookOptions<Types.GetMeterReadingsImportTasksQuery, Types.GetMeterReadingsImportTasksQueryVariables> & ({ variables: Types.GetMeterReadingsImportTasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetMeterReadingsImportTasksQuery, Types.GetMeterReadingsImportTasksQueryVariables>(GetMeterReadingsImportTasksDocument, options);
      }
export function useGetMeterReadingsImportTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetMeterReadingsImportTasksQuery, Types.GetMeterReadingsImportTasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetMeterReadingsImportTasksQuery, Types.GetMeterReadingsImportTasksQueryVariables>(GetMeterReadingsImportTasksDocument, options);
        }
export function useGetMeterReadingsImportTasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetMeterReadingsImportTasksQuery, Types.GetMeterReadingsImportTasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetMeterReadingsImportTasksQuery, Types.GetMeterReadingsImportTasksQueryVariables>(GetMeterReadingsImportTasksDocument, options);
        }
export type GetMeterReadingsImportTasksQueryHookResult = ReturnType<typeof useGetMeterReadingsImportTasksQuery>;
export type GetMeterReadingsImportTasksLazyQueryHookResult = ReturnType<typeof useGetMeterReadingsImportTasksLazyQuery>;
export type GetMeterReadingsImportTasksSuspenseQueryHookResult = ReturnType<typeof useGetMeterReadingsImportTasksSuspenseQuery>;
export type GetMeterReadingsImportTasksQueryResult = Apollo.QueryResult<Types.GetMeterReadingsImportTasksQuery, Types.GetMeterReadingsImportTasksQueryVariables>;
export const CreateMeterReadingsImportTaskDocument = gql`
    mutation createMeterReadingsImportTask($data: MeterReadingsImportTaskCreateInput!) {
  task: createMeterReadingsImportTask(data: $data) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    errorFile {
      publicUrl
    }
    errorMessage
    totalRecordsCount
    processedRecordsCount
    __typename
  }
}
    `;
export type CreateMeterReadingsImportTaskMutationFn = Apollo.MutationFunction<Types.CreateMeterReadingsImportTaskMutation, Types.CreateMeterReadingsImportTaskMutationVariables>;

/**
 * __useCreateMeterReadingsImportTaskMutation__
 *
 * To run a mutation, you first call `useCreateMeterReadingsImportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateMeterReadingsImportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createMeterReadingsImportTaskMutation, { data, loading, error }] = useCreateMeterReadingsImportTaskMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateMeterReadingsImportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateMeterReadingsImportTaskMutation, Types.CreateMeterReadingsImportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateMeterReadingsImportTaskMutation, Types.CreateMeterReadingsImportTaskMutationVariables>(CreateMeterReadingsImportTaskDocument, options);
      }
export type CreateMeterReadingsImportTaskMutationHookResult = ReturnType<typeof useCreateMeterReadingsImportTaskMutation>;
export type CreateMeterReadingsImportTaskMutationResult = Apollo.MutationResult<Types.CreateMeterReadingsImportTaskMutation>;
export type CreateMeterReadingsImportTaskMutationOptions = Apollo.BaseMutationOptions<Types.CreateMeterReadingsImportTaskMutation, Types.CreateMeterReadingsImportTaskMutationVariables>;
export const UpdateMeterReadingsImportTaskDocument = gql`
    mutation updateMeterReadingsImportTask($id: ID!, $data: MeterReadingsImportTaskUpdateInput!) {
  task: updateMeterReadingsImportTask(data: $data, id: $id) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    errorFile {
      publicUrl
    }
    errorMessage
    totalRecordsCount
    processedRecordsCount
    __typename
  }
}
    `;
export type UpdateMeterReadingsImportTaskMutationFn = Apollo.MutationFunction<Types.UpdateMeterReadingsImportTaskMutation, Types.UpdateMeterReadingsImportTaskMutationVariables>;

/**
 * __useUpdateMeterReadingsImportTaskMutation__
 *
 * To run a mutation, you first call `useUpdateMeterReadingsImportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateMeterReadingsImportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateMeterReadingsImportTaskMutation, { data, loading, error }] = useUpdateMeterReadingsImportTaskMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateMeterReadingsImportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateMeterReadingsImportTaskMutation, Types.UpdateMeterReadingsImportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateMeterReadingsImportTaskMutation, Types.UpdateMeterReadingsImportTaskMutationVariables>(UpdateMeterReadingsImportTaskDocument, options);
      }
export type UpdateMeterReadingsImportTaskMutationHookResult = ReturnType<typeof useUpdateMeterReadingsImportTaskMutation>;
export type UpdateMeterReadingsImportTaskMutationResult = Apollo.MutationResult<Types.UpdateMeterReadingsImportTaskMutation>;
export type UpdateMeterReadingsImportTaskMutationOptions = Apollo.BaseMutationOptions<Types.UpdateMeterReadingsImportTaskMutation, Types.UpdateMeterReadingsImportTaskMutationVariables>;
export const GetAllMiniAppsDocument = gql`
    query getAllMiniApps($data: AllMiniAppsInput!) {
  allMiniApps: allMiniApps(data: $data) {
    id
    name
    shortDescription
    connected
    accessible
    category
    logo
    label
    icon
    menuCategory
  }
}
    `;

/**
 * __useGetAllMiniAppsQuery__
 *
 * To run a query within a React component, call `useGetAllMiniAppsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllMiniAppsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllMiniAppsQuery({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useGetAllMiniAppsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetAllMiniAppsQuery, Types.GetAllMiniAppsQueryVariables> & ({ variables: Types.GetAllMiniAppsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetAllMiniAppsQuery, Types.GetAllMiniAppsQueryVariables>(GetAllMiniAppsDocument, options);
      }
export function useGetAllMiniAppsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetAllMiniAppsQuery, Types.GetAllMiniAppsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetAllMiniAppsQuery, Types.GetAllMiniAppsQueryVariables>(GetAllMiniAppsDocument, options);
        }
export function useGetAllMiniAppsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetAllMiniAppsQuery, Types.GetAllMiniAppsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetAllMiniAppsQuery, Types.GetAllMiniAppsQueryVariables>(GetAllMiniAppsDocument, options);
        }
export type GetAllMiniAppsQueryHookResult = ReturnType<typeof useGetAllMiniAppsQuery>;
export type GetAllMiniAppsLazyQueryHookResult = ReturnType<typeof useGetAllMiniAppsLazyQuery>;
export type GetAllMiniAppsSuspenseQueryHookResult = ReturnType<typeof useGetAllMiniAppsSuspenseQuery>;
export type GetAllMiniAppsQueryResult = Apollo.QueryResult<Types.GetAllMiniAppsQuery, Types.GetAllMiniAppsQueryVariables>;
export const GetB2BAppsWithMessageSettingsDocument = gql`
    query getB2BAppsWithMessageSettings($messageTypes: [MessageType]) {
  settings: allAppMessageSettings(
    where: {type_in: $messageTypes, b2bApp_is_null: false}
  ) {
    b2bApp {
      id
    }
    type
  }
}
    `;

/**
 * __useGetB2BAppsWithMessageSettingsQuery__
 *
 * To run a query within a React component, call `useGetB2BAppsWithMessageSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetB2BAppsWithMessageSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetB2BAppsWithMessageSettingsQuery({
 *   variables: {
 *      messageTypes: // value for 'messageTypes'
 *   },
 * });
 */
export function useGetB2BAppsWithMessageSettingsQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetB2BAppsWithMessageSettingsQuery, Types.GetB2BAppsWithMessageSettingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetB2BAppsWithMessageSettingsQuery, Types.GetB2BAppsWithMessageSettingsQueryVariables>(GetB2BAppsWithMessageSettingsDocument, options);
      }
export function useGetB2BAppsWithMessageSettingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetB2BAppsWithMessageSettingsQuery, Types.GetB2BAppsWithMessageSettingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetB2BAppsWithMessageSettingsQuery, Types.GetB2BAppsWithMessageSettingsQueryVariables>(GetB2BAppsWithMessageSettingsDocument, options);
        }
export function useGetB2BAppsWithMessageSettingsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetB2BAppsWithMessageSettingsQuery, Types.GetB2BAppsWithMessageSettingsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetB2BAppsWithMessageSettingsQuery, Types.GetB2BAppsWithMessageSettingsQueryVariables>(GetB2BAppsWithMessageSettingsDocument, options);
        }
export type GetB2BAppsWithMessageSettingsQueryHookResult = ReturnType<typeof useGetB2BAppsWithMessageSettingsQuery>;
export type GetB2BAppsWithMessageSettingsLazyQueryHookResult = ReturnType<typeof useGetB2BAppsWithMessageSettingsLazyQuery>;
export type GetB2BAppsWithMessageSettingsSuspenseQueryHookResult = ReturnType<typeof useGetB2BAppsWithMessageSettingsSuspenseQuery>;
export type GetB2BAppsWithMessageSettingsQueryResult = Apollo.QueryResult<Types.GetB2BAppsWithMessageSettingsQuery, Types.GetB2BAppsWithMessageSettingsQueryVariables>;
export const GetGlobalB2BAppsDocument = gql`
    query getGlobalB2BApps {
  b2bApps: allB2BApps(where: {isGlobal: true, isHidden: false}, first: 100) {
    id
    appUrl
    features
  }
}
    `;

/**
 * __useGetGlobalB2BAppsQuery__
 *
 * To run a query within a React component, call `useGetGlobalB2BAppsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGlobalB2BAppsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGlobalB2BAppsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetGlobalB2BAppsQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetGlobalB2BAppsQuery, Types.GetGlobalB2BAppsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetGlobalB2BAppsQuery, Types.GetGlobalB2BAppsQueryVariables>(GetGlobalB2BAppsDocument, options);
      }
export function useGetGlobalB2BAppsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetGlobalB2BAppsQuery, Types.GetGlobalB2BAppsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetGlobalB2BAppsQuery, Types.GetGlobalB2BAppsQueryVariables>(GetGlobalB2BAppsDocument, options);
        }
export function useGetGlobalB2BAppsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetGlobalB2BAppsQuery, Types.GetGlobalB2BAppsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetGlobalB2BAppsQuery, Types.GetGlobalB2BAppsQueryVariables>(GetGlobalB2BAppsDocument, options);
        }
export type GetGlobalB2BAppsQueryHookResult = ReturnType<typeof useGetGlobalB2BAppsQuery>;
export type GetGlobalB2BAppsLazyQueryHookResult = ReturnType<typeof useGetGlobalB2BAppsLazyQuery>;
export type GetGlobalB2BAppsSuspenseQueryHookResult = ReturnType<typeof useGetGlobalB2BAppsSuspenseQuery>;
export type GetGlobalB2BAppsQueryResult = Apollo.QueryResult<Types.GetGlobalB2BAppsQuery, Types.GetGlobalB2BAppsQueryVariables>;
export const GetUserB2BAppRolesDocument = gql`
    query getUserB2BAppRoles($employeeRoleId: ID, $b2bAppIds: [ID]) {
  b2bRoles: allB2BAppRoles(
    where: {role: {id: $employeeRoleId}, app: {id_in: $b2bAppIds}}
  ) {
    id
    app {
      id
    }
  }
}
    `;

/**
 * __useGetUserB2BAppRolesQuery__
 *
 * To run a query within a React component, call `useGetUserB2BAppRolesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserB2BAppRolesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserB2BAppRolesQuery({
 *   variables: {
 *      employeeRoleId: // value for 'employeeRoleId'
 *      b2bAppIds: // value for 'b2bAppIds'
 *   },
 * });
 */
export function useGetUserB2BAppRolesQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetUserB2BAppRolesQuery, Types.GetUserB2BAppRolesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetUserB2BAppRolesQuery, Types.GetUserB2BAppRolesQueryVariables>(GetUserB2BAppRolesDocument, options);
      }
export function useGetUserB2BAppRolesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetUserB2BAppRolesQuery, Types.GetUserB2BAppRolesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetUserB2BAppRolesQuery, Types.GetUserB2BAppRolesQueryVariables>(GetUserB2BAppRolesDocument, options);
        }
export function useGetUserB2BAppRolesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetUserB2BAppRolesQuery, Types.GetUserB2BAppRolesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetUserB2BAppRolesQuery, Types.GetUserB2BAppRolesQueryVariables>(GetUserB2BAppRolesDocument, options);
        }
export type GetUserB2BAppRolesQueryHookResult = ReturnType<typeof useGetUserB2BAppRolesQuery>;
export type GetUserB2BAppRolesLazyQueryHookResult = ReturnType<typeof useGetUserB2BAppRolesLazyQuery>;
export type GetUserB2BAppRolesSuspenseQueryHookResult = ReturnType<typeof useGetUserB2BAppRolesSuspenseQuery>;
export type GetUserB2BAppRolesQueryResult = Apollo.QueryResult<Types.GetUserB2BAppRolesQuery, Types.GetUserB2BAppRolesQueryVariables>;
export const GetNewsItemRecipientsExportTasksDocument = gql`
    query getNewsItemRecipientsExportTasks($where: NewsItemRecipientsExportTaskWhereInput!) {
  tasks: allNewsItemRecipientsExportTasks(where: $where) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
}
    `;

/**
 * __useGetNewsItemRecipientsExportTasksQuery__
 *
 * To run a query within a React component, call `useGetNewsItemRecipientsExportTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNewsItemRecipientsExportTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNewsItemRecipientsExportTasksQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetNewsItemRecipientsExportTasksQuery(baseOptions: Apollo.QueryHookOptions<Types.GetNewsItemRecipientsExportTasksQuery, Types.GetNewsItemRecipientsExportTasksQueryVariables> & ({ variables: Types.GetNewsItemRecipientsExportTasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetNewsItemRecipientsExportTasksQuery, Types.GetNewsItemRecipientsExportTasksQueryVariables>(GetNewsItemRecipientsExportTasksDocument, options);
      }
export function useGetNewsItemRecipientsExportTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetNewsItemRecipientsExportTasksQuery, Types.GetNewsItemRecipientsExportTasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetNewsItemRecipientsExportTasksQuery, Types.GetNewsItemRecipientsExportTasksQueryVariables>(GetNewsItemRecipientsExportTasksDocument, options);
        }
export function useGetNewsItemRecipientsExportTasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetNewsItemRecipientsExportTasksQuery, Types.GetNewsItemRecipientsExportTasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetNewsItemRecipientsExportTasksQuery, Types.GetNewsItemRecipientsExportTasksQueryVariables>(GetNewsItemRecipientsExportTasksDocument, options);
        }
export type GetNewsItemRecipientsExportTasksQueryHookResult = ReturnType<typeof useGetNewsItemRecipientsExportTasksQuery>;
export type GetNewsItemRecipientsExportTasksLazyQueryHookResult = ReturnType<typeof useGetNewsItemRecipientsExportTasksLazyQuery>;
export type GetNewsItemRecipientsExportTasksSuspenseQueryHookResult = ReturnType<typeof useGetNewsItemRecipientsExportTasksSuspenseQuery>;
export type GetNewsItemRecipientsExportTasksQueryResult = Apollo.QueryResult<Types.GetNewsItemRecipientsExportTasksQuery, Types.GetNewsItemRecipientsExportTasksQueryVariables>;
export const CreateNewsItemRecipientsExportTaskDocument = gql`
    mutation createNewsItemRecipientsExportTask($data: NewsItemRecipientsExportTaskCreateInput!) {
  task: createNewsItemRecipientsExportTask(data: $data) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
}
    `;
export type CreateNewsItemRecipientsExportTaskMutationFn = Apollo.MutationFunction<Types.CreateNewsItemRecipientsExportTaskMutation, Types.CreateNewsItemRecipientsExportTaskMutationVariables>;

/**
 * __useCreateNewsItemRecipientsExportTaskMutation__
 *
 * To run a mutation, you first call `useCreateNewsItemRecipientsExportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateNewsItemRecipientsExportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createNewsItemRecipientsExportTaskMutation, { data, loading, error }] = useCreateNewsItemRecipientsExportTaskMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateNewsItemRecipientsExportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateNewsItemRecipientsExportTaskMutation, Types.CreateNewsItemRecipientsExportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateNewsItemRecipientsExportTaskMutation, Types.CreateNewsItemRecipientsExportTaskMutationVariables>(CreateNewsItemRecipientsExportTaskDocument, options);
      }
export type CreateNewsItemRecipientsExportTaskMutationHookResult = ReturnType<typeof useCreateNewsItemRecipientsExportTaskMutation>;
export type CreateNewsItemRecipientsExportTaskMutationResult = Apollo.MutationResult<Types.CreateNewsItemRecipientsExportTaskMutation>;
export type CreateNewsItemRecipientsExportTaskMutationOptions = Apollo.BaseMutationOptions<Types.CreateNewsItemRecipientsExportTaskMutation, Types.CreateNewsItemRecipientsExportTaskMutationVariables>;
export const UpdateNewsItemRecipientsExportTaskDocument = gql`
    mutation updateNewsItemRecipientsExportTask($id: ID!, $data: NewsItemRecipientsExportTaskUpdateInput!) {
  task: updateNewsItemRecipientsExportTask(data: $data, id: $id) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
}
    `;
export type UpdateNewsItemRecipientsExportTaskMutationFn = Apollo.MutationFunction<Types.UpdateNewsItemRecipientsExportTaskMutation, Types.UpdateNewsItemRecipientsExportTaskMutationVariables>;

/**
 * __useUpdateNewsItemRecipientsExportTaskMutation__
 *
 * To run a mutation, you first call `useUpdateNewsItemRecipientsExportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateNewsItemRecipientsExportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateNewsItemRecipientsExportTaskMutation, { data, loading, error }] = useUpdateNewsItemRecipientsExportTaskMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateNewsItemRecipientsExportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateNewsItemRecipientsExportTaskMutation, Types.UpdateNewsItemRecipientsExportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateNewsItemRecipientsExportTaskMutation, Types.UpdateNewsItemRecipientsExportTaskMutationVariables>(UpdateNewsItemRecipientsExportTaskDocument, options);
      }
export type UpdateNewsItemRecipientsExportTaskMutationHookResult = ReturnType<typeof useUpdateNewsItemRecipientsExportTaskMutation>;
export type UpdateNewsItemRecipientsExportTaskMutationResult = Apollo.MutationResult<Types.UpdateNewsItemRecipientsExportTaskMutation>;
export type UpdateNewsItemRecipientsExportTaskMutationOptions = Apollo.BaseMutationOptions<Types.UpdateNewsItemRecipientsExportTaskMutation, Types.UpdateNewsItemRecipientsExportTaskMutationVariables>;
export const GetNewsSharingRecipientsDocument = gql`
    query getNewsSharingRecipients($data: GetNewsSharingRecipientsInput!) {
  recipients: getNewsSharingRecipients(data: $data) {
    id
    name
    receiversCount
  }
}
    `;

/**
 * __useGetNewsSharingRecipientsQuery__
 *
 * To run a query within a React component, call `useGetNewsSharingRecipientsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNewsSharingRecipientsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNewsSharingRecipientsQuery({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useGetNewsSharingRecipientsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetNewsSharingRecipientsQuery, Types.GetNewsSharingRecipientsQueryVariables> & ({ variables: Types.GetNewsSharingRecipientsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetNewsSharingRecipientsQuery, Types.GetNewsSharingRecipientsQueryVariables>(GetNewsSharingRecipientsDocument, options);
      }
export function useGetNewsSharingRecipientsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetNewsSharingRecipientsQuery, Types.GetNewsSharingRecipientsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetNewsSharingRecipientsQuery, Types.GetNewsSharingRecipientsQueryVariables>(GetNewsSharingRecipientsDocument, options);
        }
export function useGetNewsSharingRecipientsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetNewsSharingRecipientsQuery, Types.GetNewsSharingRecipientsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetNewsSharingRecipientsQuery, Types.GetNewsSharingRecipientsQueryVariables>(GetNewsSharingRecipientsDocument, options);
        }
export type GetNewsSharingRecipientsQueryHookResult = ReturnType<typeof useGetNewsSharingRecipientsQuery>;
export type GetNewsSharingRecipientsLazyQueryHookResult = ReturnType<typeof useGetNewsSharingRecipientsLazyQuery>;
export type GetNewsSharingRecipientsSuspenseQueryHookResult = ReturnType<typeof useGetNewsSharingRecipientsSuspenseQuery>;
export type GetNewsSharingRecipientsQueryResult = Apollo.QueryResult<Types.GetNewsSharingRecipientsQuery, Types.GetNewsSharingRecipientsQueryVariables>;
export const GetUserMessagesDocument = gql`
    query getUserMessages($userId: ID, $organizationId: ID, $types: [MessageType!], $skip: Int = 0) {
  messages: allMessages(
    where: {user: {id: $userId}, organization: {id: $organizationId}, type_in: $types}
    first: 10
    skip: $skip
    sortBy: [createdAt_DESC]
  ) {
    id
    type
    createdAt
    meta
    defaultContent {
      content
    }
  }
}
    `;

/**
 * __useGetUserMessagesQuery__
 *
 * To run a query within a React component, call `useGetUserMessagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserMessagesQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      organizationId: // value for 'organizationId'
 *      types: // value for 'types'
 *      skip: // value for 'skip'
 *   },
 * });
 */
export function useGetUserMessagesQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetUserMessagesQuery, Types.GetUserMessagesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetUserMessagesQuery, Types.GetUserMessagesQueryVariables>(GetUserMessagesDocument, options);
      }
export function useGetUserMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetUserMessagesQuery, Types.GetUserMessagesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetUserMessagesQuery, Types.GetUserMessagesQueryVariables>(GetUserMessagesDocument, options);
        }
export function useGetUserMessagesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetUserMessagesQuery, Types.GetUserMessagesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetUserMessagesQuery, Types.GetUserMessagesQueryVariables>(GetUserMessagesDocument, options);
        }
export type GetUserMessagesQueryHookResult = ReturnType<typeof useGetUserMessagesQuery>;
export type GetUserMessagesLazyQueryHookResult = ReturnType<typeof useGetUserMessagesLazyQuery>;
export type GetUserMessagesSuspenseQueryHookResult = ReturnType<typeof useGetUserMessagesSuspenseQuery>;
export type GetUserMessagesQueryResult = Apollo.QueryResult<Types.GetUserMessagesQuery, Types.GetUserMessagesQueryVariables>;
export const SyncTourStepsDocument = gql`
    mutation syncTourSteps($data: SyncTourStepsInput!) {
  result: syncTourSteps(data: $data) {
    ok
  }
}
    `;
export type SyncTourStepsMutationFn = Apollo.MutationFunction<Types.SyncTourStepsMutation, Types.SyncTourStepsMutationVariables>;

/**
 * __useSyncTourStepsMutation__
 *
 * To run a mutation, you first call `useSyncTourStepsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSyncTourStepsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [syncTourStepsMutation, { data, loading, error }] = useSyncTourStepsMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useSyncTourStepsMutation(baseOptions?: Apollo.MutationHookOptions<Types.SyncTourStepsMutation, Types.SyncTourStepsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.SyncTourStepsMutation, Types.SyncTourStepsMutationVariables>(SyncTourStepsDocument, options);
      }
export type SyncTourStepsMutationHookResult = ReturnType<typeof useSyncTourStepsMutation>;
export type SyncTourStepsMutationResult = Apollo.MutationResult<Types.SyncTourStepsMutation>;
export type SyncTourStepsMutationOptions = Apollo.BaseMutationOptions<Types.SyncTourStepsMutation, Types.SyncTourStepsMutationVariables>;
export const GetTourStepsDocument = gql`
    query getTourSteps($where: TourStepWhereInput!, $sortBy: [SortTourStepsBy!]) {
  tourSteps: allTourSteps(where: $where, sortBy: $sortBy, first: 100) {
    id
    type
    status
  }
}
    `;

/**
 * __useGetTourStepsQuery__
 *
 * To run a query within a React component, call `useGetTourStepsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTourStepsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTourStepsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      sortBy: // value for 'sortBy'
 *   },
 * });
 */
export function useGetTourStepsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTourStepsQuery, Types.GetTourStepsQueryVariables> & ({ variables: Types.GetTourStepsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTourStepsQuery, Types.GetTourStepsQueryVariables>(GetTourStepsDocument, options);
      }
export function useGetTourStepsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTourStepsQuery, Types.GetTourStepsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTourStepsQuery, Types.GetTourStepsQueryVariables>(GetTourStepsDocument, options);
        }
export function useGetTourStepsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTourStepsQuery, Types.GetTourStepsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTourStepsQuery, Types.GetTourStepsQueryVariables>(GetTourStepsDocument, options);
        }
export type GetTourStepsQueryHookResult = ReturnType<typeof useGetTourStepsQuery>;
export type GetTourStepsLazyQueryHookResult = ReturnType<typeof useGetTourStepsLazyQuery>;
export type GetTourStepsSuspenseQueryHookResult = ReturnType<typeof useGetTourStepsSuspenseQuery>;
export type GetTourStepsQueryResult = Apollo.QueryResult<Types.GetTourStepsQuery, Types.GetTourStepsQueryVariables>;
export const UpdateTourStepDocument = gql`
    mutation updateTourStep($id: ID!, $data: TourStepUpdateInput!) {
  tourStep: updateTourStep(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateTourStepMutationFn = Apollo.MutationFunction<Types.UpdateTourStepMutation, Types.UpdateTourStepMutationVariables>;

/**
 * __useUpdateTourStepMutation__
 *
 * To run a mutation, you first call `useUpdateTourStepMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTourStepMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTourStepMutation, { data, loading, error }] = useUpdateTourStepMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTourStepMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateTourStepMutation, Types.UpdateTourStepMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateTourStepMutation, Types.UpdateTourStepMutationVariables>(UpdateTourStepDocument, options);
      }
export type UpdateTourStepMutationHookResult = ReturnType<typeof useUpdateTourStepMutation>;
export type UpdateTourStepMutationResult = Apollo.MutationResult<Types.UpdateTourStepMutation>;
export type UpdateTourStepMutationOptions = Apollo.BaseMutationOptions<Types.UpdateTourStepMutation, Types.UpdateTourStepMutationVariables>;
export const AcceptOrRejectOrganizationEmployeeRequestDocument = gql`
    mutation acceptOrRejectOrganizationEmployeeRequest($data: AcceptOrRejectOrganizationEmployeeRequestInput!) {
  request: acceptOrRejectOrganizationEmployeeRequest(data: $data) {
    id
  }
}
    `;
export type AcceptOrRejectOrganizationEmployeeRequestMutationFn = Apollo.MutationFunction<Types.AcceptOrRejectOrganizationEmployeeRequestMutation, Types.AcceptOrRejectOrganizationEmployeeRequestMutationVariables>;

/**
 * __useAcceptOrRejectOrganizationEmployeeRequestMutation__
 *
 * To run a mutation, you first call `useAcceptOrRejectOrganizationEmployeeRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAcceptOrRejectOrganizationEmployeeRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [acceptOrRejectOrganizationEmployeeRequestMutation, { data, loading, error }] = useAcceptOrRejectOrganizationEmployeeRequestMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useAcceptOrRejectOrganizationEmployeeRequestMutation(baseOptions?: Apollo.MutationHookOptions<Types.AcceptOrRejectOrganizationEmployeeRequestMutation, Types.AcceptOrRejectOrganizationEmployeeRequestMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.AcceptOrRejectOrganizationEmployeeRequestMutation, Types.AcceptOrRejectOrganizationEmployeeRequestMutationVariables>(AcceptOrRejectOrganizationEmployeeRequestDocument, options);
      }
export type AcceptOrRejectOrganizationEmployeeRequestMutationHookResult = ReturnType<typeof useAcceptOrRejectOrganizationEmployeeRequestMutation>;
export type AcceptOrRejectOrganizationEmployeeRequestMutationResult = Apollo.MutationResult<Types.AcceptOrRejectOrganizationEmployeeRequestMutation>;
export type AcceptOrRejectOrganizationEmployeeRequestMutationOptions = Apollo.BaseMutationOptions<Types.AcceptOrRejectOrganizationEmployeeRequestMutation, Types.AcceptOrRejectOrganizationEmployeeRequestMutationVariables>;
export const AcceptOrRejectOrganizationInviteDocument = gql`
    mutation acceptOrRejectOrganizationInvite($id: ID!, $data: AcceptOrRejectOrganizationInviteInput!) {
  invite: acceptOrRejectOrganizationInviteById(id: $id, data: $data) {
    id
    isAccepted
    isRejected
    isBlocked
    organization {
      type
    }
  }
}
    `;
export type AcceptOrRejectOrganizationInviteMutationFn = Apollo.MutationFunction<Types.AcceptOrRejectOrganizationInviteMutation, Types.AcceptOrRejectOrganizationInviteMutationVariables>;

/**
 * __useAcceptOrRejectOrganizationInviteMutation__
 *
 * To run a mutation, you first call `useAcceptOrRejectOrganizationInviteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAcceptOrRejectOrganizationInviteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [acceptOrRejectOrganizationInviteMutation, { data, loading, error }] = useAcceptOrRejectOrganizationInviteMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useAcceptOrRejectOrganizationInviteMutation(baseOptions?: Apollo.MutationHookOptions<Types.AcceptOrRejectOrganizationInviteMutation, Types.AcceptOrRejectOrganizationInviteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.AcceptOrRejectOrganizationInviteMutation, Types.AcceptOrRejectOrganizationInviteMutationVariables>(AcceptOrRejectOrganizationInviteDocument, options);
      }
export type AcceptOrRejectOrganizationInviteMutationHookResult = ReturnType<typeof useAcceptOrRejectOrganizationInviteMutation>;
export type AcceptOrRejectOrganizationInviteMutationResult = Apollo.MutationResult<Types.AcceptOrRejectOrganizationInviteMutation>;
export type AcceptOrRejectOrganizationInviteMutationOptions = Apollo.BaseMutationOptions<Types.AcceptOrRejectOrganizationInviteMutation, Types.AcceptOrRejectOrganizationInviteMutationVariables>;
export const FindOrganizationsByTinDocument = gql`
    query findOrganizationsByTin($data: FindOrganizationsByTinInput!) {
  data: findOrganizationsByTin(data: $data) {
    organizations {
      id
      name
    }
  }
}
    `;

/**
 * __useFindOrganizationsByTinQuery__
 *
 * To run a query within a React component, call `useFindOrganizationsByTinQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindOrganizationsByTinQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindOrganizationsByTinQuery({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useFindOrganizationsByTinQuery(baseOptions: Apollo.QueryHookOptions<Types.FindOrganizationsByTinQuery, Types.FindOrganizationsByTinQueryVariables> & ({ variables: Types.FindOrganizationsByTinQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.FindOrganizationsByTinQuery, Types.FindOrganizationsByTinQueryVariables>(FindOrganizationsByTinDocument, options);
      }
export function useFindOrganizationsByTinLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.FindOrganizationsByTinQuery, Types.FindOrganizationsByTinQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.FindOrganizationsByTinQuery, Types.FindOrganizationsByTinQueryVariables>(FindOrganizationsByTinDocument, options);
        }
export function useFindOrganizationsByTinSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.FindOrganizationsByTinQuery, Types.FindOrganizationsByTinQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.FindOrganizationsByTinQuery, Types.FindOrganizationsByTinQueryVariables>(FindOrganizationsByTinDocument, options);
        }
export type FindOrganizationsByTinQueryHookResult = ReturnType<typeof useFindOrganizationsByTinQuery>;
export type FindOrganizationsByTinLazyQueryHookResult = ReturnType<typeof useFindOrganizationsByTinLazyQuery>;
export type FindOrganizationsByTinSuspenseQueryHookResult = ReturnType<typeof useFindOrganizationsByTinSuspenseQuery>;
export type FindOrganizationsByTinQueryResult = Apollo.QueryResult<Types.FindOrganizationsByTinQuery, Types.FindOrganizationsByTinQueryVariables>;
export const GetActiveOrganizationEmployeeDocument = gql`
    query getActiveOrganizationEmployee($userId: ID!, $employeeId: ID) {
  employees: allOrganizationEmployees(
    where: {id: $employeeId, organization: {type_in: [MANAGING_COMPANY, SERVICE_PROVIDER]}, user: {id: $userId, type: staff}, isAccepted: true, isBlocked: false, isRejected: false}
    first: 1
    skip: 0
    sortBy: [createdAt_DESC]
  ) {
    id
    name
    email
    phone
    hasAllSpecializations
    isRejected
    isAccepted
    isBlocked
    position
    organization {
      id
      country
      name
      type
      tin
      features
      statusTransitions
      importId
      importRemoteSystem
      meta
    }
    role {
      id
      name
      nameNonLocalized
      isEditable
      isDefault
      statusTransitions
      ticketVisibilityType
      canReadAnalytics
      canManageOrganization
      canManageOrganizationEmployeeRequests
      canManageCallRecords
      canDownloadCallRecords
      canReadEmployees
      canManageEmployees
      canInviteNewOrganizationEmployees
      canManageRoles
      canManageTicketPropertyHints
      canManageIntegrations
      canImportBillingReceipts
      canReadBillingReceipts
      canReadPayments
      canManageProperties
      canReadProperties
      canReadDocuments
      canManageDocuments
      canReadTickets
      canManageTickets
      canReadContacts
      canManageContacts
      canManageContactRoles
      canManageTicketComments
      canManagePropertyScopes
      canShareTickets
      canBeAssignedAsResponsible
      canBeAssignedAsExecutor
      canManageMeters
      canManageMeterReadings
      canManageBankAccounts
      canManageBankContractorAccounts
      canManageBankIntegrationAccountContexts
      canManageBankIntegrationOrganizationContexts
      canManageBankTransactions
      canManageBankAccountReports
      canManageBankAccountReportTasks
      canManageBankAccountReports
      canReadIncidents
      canManageIncidents
      canReadNewsItems
      canManageNewsItems
      canManageNewsItemTemplates
      canManageMobileFeatureConfigs
      canManageB2BApps
      canReadMeters
      canReadSettings
      canReadExternalReports
      canReadServices
      canReadCallRecords
      canReadInvoices
      canManageInvoices
      canReadMarketItems
      canManageMarketItems
      canManageMarketItemPrices
      canReadMarketItemPrices
      canReadMarketPriceScopes
      canManageMarketPriceScopes
      canReadMarketplace
      canManageMarketplace
      canReadPaymentsWithInvoices
      canReadTour
      canManageTour
      canReadMarketSetting
      canManageMarketSetting
      canManageTicketAutoAssignments
    }
  }
}
    `;

/**
 * __useGetActiveOrganizationEmployeeQuery__
 *
 * To run a query within a React component, call `useGetActiveOrganizationEmployeeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetActiveOrganizationEmployeeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetActiveOrganizationEmployeeQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      employeeId: // value for 'employeeId'
 *   },
 * });
 */
export function useGetActiveOrganizationEmployeeQuery(baseOptions: Apollo.QueryHookOptions<Types.GetActiveOrganizationEmployeeQuery, Types.GetActiveOrganizationEmployeeQueryVariables> & ({ variables: Types.GetActiveOrganizationEmployeeQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetActiveOrganizationEmployeeQuery, Types.GetActiveOrganizationEmployeeQueryVariables>(GetActiveOrganizationEmployeeDocument, options);
      }
export function useGetActiveOrganizationEmployeeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetActiveOrganizationEmployeeQuery, Types.GetActiveOrganizationEmployeeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetActiveOrganizationEmployeeQuery, Types.GetActiveOrganizationEmployeeQueryVariables>(GetActiveOrganizationEmployeeDocument, options);
        }
export function useGetActiveOrganizationEmployeeSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetActiveOrganizationEmployeeQuery, Types.GetActiveOrganizationEmployeeQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetActiveOrganizationEmployeeQuery, Types.GetActiveOrganizationEmployeeQueryVariables>(GetActiveOrganizationEmployeeDocument, options);
        }
export type GetActiveOrganizationEmployeeQueryHookResult = ReturnType<typeof useGetActiveOrganizationEmployeeQuery>;
export type GetActiveOrganizationEmployeeLazyQueryHookResult = ReturnType<typeof useGetActiveOrganizationEmployeeLazyQuery>;
export type GetActiveOrganizationEmployeeSuspenseQueryHookResult = ReturnType<typeof useGetActiveOrganizationEmployeeSuspenseQuery>;
export type GetActiveOrganizationEmployeeQueryResult = Apollo.QueryResult<Types.GetActiveOrganizationEmployeeQuery, Types.GetActiveOrganizationEmployeeQueryVariables>;
export const GetActualOrganizationEmployeesDocument = gql`
    query getActualOrganizationEmployees($userId: ID!) {
  actualEmployees: allOrganizationEmployees(
    where: {user: {id: $userId}, isAccepted: true, isRejected: false, isBlocked: false, organization: {type_in: [MANAGING_COMPANY, SERVICE_PROVIDER]}}
    first: 500
  ) {
    id
    organization {
      id
      name
      importId
      importRemoteSystem
    }
  }
}
    `;

/**
 * __useGetActualOrganizationEmployeesQuery__
 *
 * To run a query within a React component, call `useGetActualOrganizationEmployeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetActualOrganizationEmployeesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetActualOrganizationEmployeesQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetActualOrganizationEmployeesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetActualOrganizationEmployeesQuery, Types.GetActualOrganizationEmployeesQueryVariables> & ({ variables: Types.GetActualOrganizationEmployeesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetActualOrganizationEmployeesQuery, Types.GetActualOrganizationEmployeesQueryVariables>(GetActualOrganizationEmployeesDocument, options);
      }
export function useGetActualOrganizationEmployeesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetActualOrganizationEmployeesQuery, Types.GetActualOrganizationEmployeesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetActualOrganizationEmployeesQuery, Types.GetActualOrganizationEmployeesQueryVariables>(GetActualOrganizationEmployeesDocument, options);
        }
export function useGetActualOrganizationEmployeesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetActualOrganizationEmployeesQuery, Types.GetActualOrganizationEmployeesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetActualOrganizationEmployeesQuery, Types.GetActualOrganizationEmployeesQueryVariables>(GetActualOrganizationEmployeesDocument, options);
        }
export type GetActualOrganizationEmployeesQueryHookResult = ReturnType<typeof useGetActualOrganizationEmployeesQuery>;
export type GetActualOrganizationEmployeesLazyQueryHookResult = ReturnType<typeof useGetActualOrganizationEmployeesLazyQuery>;
export type GetActualOrganizationEmployeesSuspenseQueryHookResult = ReturnType<typeof useGetActualOrganizationEmployeesSuspenseQuery>;
export type GetActualOrganizationEmployeesQueryResult = Apollo.QueryResult<Types.GetActualOrganizationEmployeesQuery, Types.GetActualOrganizationEmployeesQueryVariables>;
export const GetEmployeesForClientCardDocument = gql`
    query getEmployeesForClientCard($where: OrganizationEmployeeWhereInput, $sortBy: [SortOrganizationEmployeesBy!], $first: Int!, $skip: Int) {
  employees: allOrganizationEmployees(
    where: $where
    sortBy: $sortBy
    first: $first
    skip: $skip
  ) {
    id
    name
    phone
    organization {
      phoneNumberPrefix
    }
  }
}
    `;

/**
 * __useGetEmployeesForClientCardQuery__
 *
 * To run a query within a React component, call `useGetEmployeesForClientCardQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeesForClientCardQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeesForClientCardQuery({
 *   variables: {
 *      where: // value for 'where'
 *      sortBy: // value for 'sortBy'
 *      first: // value for 'first'
 *      skip: // value for 'skip'
 *   },
 * });
 */
export function useGetEmployeesForClientCardQuery(baseOptions: Apollo.QueryHookOptions<Types.GetEmployeesForClientCardQuery, Types.GetEmployeesForClientCardQueryVariables> & ({ variables: Types.GetEmployeesForClientCardQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetEmployeesForClientCardQuery, Types.GetEmployeesForClientCardQueryVariables>(GetEmployeesForClientCardDocument, options);
      }
export function useGetEmployeesForClientCardLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetEmployeesForClientCardQuery, Types.GetEmployeesForClientCardQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetEmployeesForClientCardQuery, Types.GetEmployeesForClientCardQueryVariables>(GetEmployeesForClientCardDocument, options);
        }
export function useGetEmployeesForClientCardSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetEmployeesForClientCardQuery, Types.GetEmployeesForClientCardQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetEmployeesForClientCardQuery, Types.GetEmployeesForClientCardQueryVariables>(GetEmployeesForClientCardDocument, options);
        }
export type GetEmployeesForClientCardQueryHookResult = ReturnType<typeof useGetEmployeesForClientCardQuery>;
export type GetEmployeesForClientCardLazyQueryHookResult = ReturnType<typeof useGetEmployeesForClientCardLazyQuery>;
export type GetEmployeesForClientCardSuspenseQueryHookResult = ReturnType<typeof useGetEmployeesForClientCardSuspenseQuery>;
export type GetEmployeesForClientCardQueryResult = Apollo.QueryResult<Types.GetEmployeesForClientCardQuery, Types.GetEmployeesForClientCardQueryVariables>;
export const GetUserOrganizationEmployeeExistsDocument = gql`
    query getUserOrganizationEmployeeExists($userId: ID!) {
  employees: allOrganizationEmployees(
    where: {user: {id: $userId}, isAccepted: true, isRejected: false, isBlocked: false, organization: {type_in: [MANAGING_COMPANY, SERVICE_PROVIDER]}}
    first: 1
  ) {
    id
  }
}
    `;

/**
 * __useGetUserOrganizationEmployeeExistsQuery__
 *
 * To run a query within a React component, call `useGetUserOrganizationEmployeeExistsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserOrganizationEmployeeExistsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserOrganizationEmployeeExistsQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetUserOrganizationEmployeeExistsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetUserOrganizationEmployeeExistsQuery, Types.GetUserOrganizationEmployeeExistsQueryVariables> & ({ variables: Types.GetUserOrganizationEmployeeExistsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetUserOrganizationEmployeeExistsQuery, Types.GetUserOrganizationEmployeeExistsQueryVariables>(GetUserOrganizationEmployeeExistsDocument, options);
      }
export function useGetUserOrganizationEmployeeExistsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetUserOrganizationEmployeeExistsQuery, Types.GetUserOrganizationEmployeeExistsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetUserOrganizationEmployeeExistsQuery, Types.GetUserOrganizationEmployeeExistsQueryVariables>(GetUserOrganizationEmployeeExistsDocument, options);
        }
export function useGetUserOrganizationEmployeeExistsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetUserOrganizationEmployeeExistsQuery, Types.GetUserOrganizationEmployeeExistsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetUserOrganizationEmployeeExistsQuery, Types.GetUserOrganizationEmployeeExistsQueryVariables>(GetUserOrganizationEmployeeExistsDocument, options);
        }
export type GetUserOrganizationEmployeeExistsQueryHookResult = ReturnType<typeof useGetUserOrganizationEmployeeExistsQuery>;
export type GetUserOrganizationEmployeeExistsLazyQueryHookResult = ReturnType<typeof useGetUserOrganizationEmployeeExistsLazyQuery>;
export type GetUserOrganizationEmployeeExistsSuspenseQueryHookResult = ReturnType<typeof useGetUserOrganizationEmployeeExistsSuspenseQuery>;
export type GetUserOrganizationEmployeeExistsQueryResult = Apollo.QueryResult<Types.GetUserOrganizationEmployeeExistsQuery, Types.GetUserOrganizationEmployeeExistsQueryVariables>;
export const GetEmployeeInvitesCountDocument = gql`
    query getEmployeeInvitesCount($userId: ID!) {
  meta: _allOrganizationEmployeesMeta(
    where: {user: {id: $userId}, isAccepted: false, isRejected: false, isBlocked: false, organization: {type_in: [MANAGING_COMPANY, SERVICE_PROVIDER]}}
  ) {
    count
  }
}
    `;

/**
 * __useGetEmployeeInvitesCountQuery__
 *
 * To run a query within a React component, call `useGetEmployeeInvitesCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeeInvitesCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeeInvitesCountQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetEmployeeInvitesCountQuery(baseOptions: Apollo.QueryHookOptions<Types.GetEmployeeInvitesCountQuery, Types.GetEmployeeInvitesCountQueryVariables> & ({ variables: Types.GetEmployeeInvitesCountQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetEmployeeInvitesCountQuery, Types.GetEmployeeInvitesCountQueryVariables>(GetEmployeeInvitesCountDocument, options);
      }
export function useGetEmployeeInvitesCountLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetEmployeeInvitesCountQuery, Types.GetEmployeeInvitesCountQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetEmployeeInvitesCountQuery, Types.GetEmployeeInvitesCountQueryVariables>(GetEmployeeInvitesCountDocument, options);
        }
export function useGetEmployeeInvitesCountSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetEmployeeInvitesCountQuery, Types.GetEmployeeInvitesCountQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetEmployeeInvitesCountQuery, Types.GetEmployeeInvitesCountQueryVariables>(GetEmployeeInvitesCountDocument, options);
        }
export type GetEmployeeInvitesCountQueryHookResult = ReturnType<typeof useGetEmployeeInvitesCountQuery>;
export type GetEmployeeInvitesCountLazyQueryHookResult = ReturnType<typeof useGetEmployeeInvitesCountLazyQuery>;
export type GetEmployeeInvitesCountSuspenseQueryHookResult = ReturnType<typeof useGetEmployeeInvitesCountSuspenseQuery>;
export type GetEmployeeInvitesCountQueryResult = Apollo.QueryResult<Types.GetEmployeeInvitesCountQuery, Types.GetEmployeeInvitesCountQueryVariables>;
export const GetLastEmployeeInviteDocument = gql`
    query getLastEmployeeInvite($userId: ID!) {
  employees: allOrganizationEmployees(
    where: {user: {id: $userId}, isAccepted: false, isRejected: false, isBlocked: false, organization: {type_in: [MANAGING_COMPANY, SERVICE_PROVIDER]}}
    first: 1
    sortBy: [createdAt_DESC]
  ) {
    id
    organization {
      id
      name
    }
  }
}
    `;

/**
 * __useGetLastEmployeeInviteQuery__
 *
 * To run a query within a React component, call `useGetLastEmployeeInviteQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLastEmployeeInviteQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLastEmployeeInviteQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetLastEmployeeInviteQuery(baseOptions: Apollo.QueryHookOptions<Types.GetLastEmployeeInviteQuery, Types.GetLastEmployeeInviteQueryVariables> & ({ variables: Types.GetLastEmployeeInviteQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetLastEmployeeInviteQuery, Types.GetLastEmployeeInviteQueryVariables>(GetLastEmployeeInviteDocument, options);
      }
export function useGetLastEmployeeInviteLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetLastEmployeeInviteQuery, Types.GetLastEmployeeInviteQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetLastEmployeeInviteQuery, Types.GetLastEmployeeInviteQueryVariables>(GetLastEmployeeInviteDocument, options);
        }
export function useGetLastEmployeeInviteSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetLastEmployeeInviteQuery, Types.GetLastEmployeeInviteQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetLastEmployeeInviteQuery, Types.GetLastEmployeeInviteQueryVariables>(GetLastEmployeeInviteDocument, options);
        }
export type GetLastEmployeeInviteQueryHookResult = ReturnType<typeof useGetLastEmployeeInviteQuery>;
export type GetLastEmployeeInviteLazyQueryHookResult = ReturnType<typeof useGetLastEmployeeInviteLazyQuery>;
export type GetLastEmployeeInviteSuspenseQueryHookResult = ReturnType<typeof useGetLastEmployeeInviteSuspenseQuery>;
export type GetLastEmployeeInviteQueryResult = Apollo.QueryResult<Types.GetLastEmployeeInviteQuery, Types.GetLastEmployeeInviteQueryVariables>;
export const GetContactEditorOrganizationEmployeesDocument = gql`
    query getContactEditorOrganizationEmployees($where: OrganizationEmployeeWhereInput) {
  employees: allOrganizationEmployees(where: $where, first: 100) {
    id
    name
    phone
  }
}
    `;

/**
 * __useGetContactEditorOrganizationEmployeesQuery__
 *
 * To run a query within a React component, call `useGetContactEditorOrganizationEmployeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactEditorOrganizationEmployeesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactEditorOrganizationEmployeesQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetContactEditorOrganizationEmployeesQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetContactEditorOrganizationEmployeesQuery, Types.GetContactEditorOrganizationEmployeesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetContactEditorOrganizationEmployeesQuery, Types.GetContactEditorOrganizationEmployeesQueryVariables>(GetContactEditorOrganizationEmployeesDocument, options);
      }
export function useGetContactEditorOrganizationEmployeesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetContactEditorOrganizationEmployeesQuery, Types.GetContactEditorOrganizationEmployeesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetContactEditorOrganizationEmployeesQuery, Types.GetContactEditorOrganizationEmployeesQueryVariables>(GetContactEditorOrganizationEmployeesDocument, options);
        }
export function useGetContactEditorOrganizationEmployeesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetContactEditorOrganizationEmployeesQuery, Types.GetContactEditorOrganizationEmployeesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetContactEditorOrganizationEmployeesQuery, Types.GetContactEditorOrganizationEmployeesQueryVariables>(GetContactEditorOrganizationEmployeesDocument, options);
        }
export type GetContactEditorOrganizationEmployeesQueryHookResult = ReturnType<typeof useGetContactEditorOrganizationEmployeesQuery>;
export type GetContactEditorOrganizationEmployeesLazyQueryHookResult = ReturnType<typeof useGetContactEditorOrganizationEmployeesLazyQuery>;
export type GetContactEditorOrganizationEmployeesSuspenseQueryHookResult = ReturnType<typeof useGetContactEditorOrganizationEmployeesSuspenseQuery>;
export type GetContactEditorOrganizationEmployeesQueryResult = Apollo.QueryResult<Types.GetContactEditorOrganizationEmployeesQuery, Types.GetContactEditorOrganizationEmployeesQueryVariables>;
export const GetOrganizationEmployeeByUserAndOrganizationDocument = gql`
    query getOrganizationEmployeeByUserAndOrganization($userId: ID!, $organizationId: ID!) {
  employees: allOrganizationEmployees(
    where: {user: {id: $userId}, organization: {id: $organizationId}}
    first: 1
  ) {
    id
  }
}
    `;

/**
 * __useGetOrganizationEmployeeByUserAndOrganizationQuery__
 *
 * To run a query within a React component, call `useGetOrganizationEmployeeByUserAndOrganizationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationEmployeeByUserAndOrganizationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationEmployeeByUserAndOrganizationQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      organizationId: // value for 'organizationId'
 *   },
 * });
 */
export function useGetOrganizationEmployeeByUserAndOrganizationQuery(baseOptions: Apollo.QueryHookOptions<Types.GetOrganizationEmployeeByUserAndOrganizationQuery, Types.GetOrganizationEmployeeByUserAndOrganizationQueryVariables> & ({ variables: Types.GetOrganizationEmployeeByUserAndOrganizationQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetOrganizationEmployeeByUserAndOrganizationQuery, Types.GetOrganizationEmployeeByUserAndOrganizationQueryVariables>(GetOrganizationEmployeeByUserAndOrganizationDocument, options);
      }
export function useGetOrganizationEmployeeByUserAndOrganizationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetOrganizationEmployeeByUserAndOrganizationQuery, Types.GetOrganizationEmployeeByUserAndOrganizationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetOrganizationEmployeeByUserAndOrganizationQuery, Types.GetOrganizationEmployeeByUserAndOrganizationQueryVariables>(GetOrganizationEmployeeByUserAndOrganizationDocument, options);
        }
export function useGetOrganizationEmployeeByUserAndOrganizationSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetOrganizationEmployeeByUserAndOrganizationQuery, Types.GetOrganizationEmployeeByUserAndOrganizationQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetOrganizationEmployeeByUserAndOrganizationQuery, Types.GetOrganizationEmployeeByUserAndOrganizationQueryVariables>(GetOrganizationEmployeeByUserAndOrganizationDocument, options);
        }
export type GetOrganizationEmployeeByUserAndOrganizationQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeByUserAndOrganizationQuery>;
export type GetOrganizationEmployeeByUserAndOrganizationLazyQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeByUserAndOrganizationLazyQuery>;
export type GetOrganizationEmployeeByUserAndOrganizationSuspenseQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeByUserAndOrganizationSuspenseQuery>;
export type GetOrganizationEmployeeByUserAndOrganizationQueryResult = Apollo.QueryResult<Types.GetOrganizationEmployeeByUserAndOrganizationQuery, Types.GetOrganizationEmployeeByUserAndOrganizationQueryVariables>;
export const GetOrganizationEmployeeByUserAndOrganizationIdDocument = gql`
    query getOrganizationEmployeeByUserAndOrganizationId($userId: ID!, $organizationId: ID!) {
  employee: allOrganizationEmployees(
    where: {user: {id: $userId}, organization: {id: $organizationId}}
    first: 1
  ) {
    id
    name
    phone
    email
  }
}
    `;

/**
 * __useGetOrganizationEmployeeByUserAndOrganizationIdQuery__
 *
 * To run a query within a React component, call `useGetOrganizationEmployeeByUserAndOrganizationIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationEmployeeByUserAndOrganizationIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationEmployeeByUserAndOrganizationIdQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      organizationId: // value for 'organizationId'
 *   },
 * });
 */
export function useGetOrganizationEmployeeByUserAndOrganizationIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetOrganizationEmployeeByUserAndOrganizationIdQuery, Types.GetOrganizationEmployeeByUserAndOrganizationIdQueryVariables> & ({ variables: Types.GetOrganizationEmployeeByUserAndOrganizationIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetOrganizationEmployeeByUserAndOrganizationIdQuery, Types.GetOrganizationEmployeeByUserAndOrganizationIdQueryVariables>(GetOrganizationEmployeeByUserAndOrganizationIdDocument, options);
      }
export function useGetOrganizationEmployeeByUserAndOrganizationIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetOrganizationEmployeeByUserAndOrganizationIdQuery, Types.GetOrganizationEmployeeByUserAndOrganizationIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetOrganizationEmployeeByUserAndOrganizationIdQuery, Types.GetOrganizationEmployeeByUserAndOrganizationIdQueryVariables>(GetOrganizationEmployeeByUserAndOrganizationIdDocument, options);
        }
export function useGetOrganizationEmployeeByUserAndOrganizationIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetOrganizationEmployeeByUserAndOrganizationIdQuery, Types.GetOrganizationEmployeeByUserAndOrganizationIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetOrganizationEmployeeByUserAndOrganizationIdQuery, Types.GetOrganizationEmployeeByUserAndOrganizationIdQueryVariables>(GetOrganizationEmployeeByUserAndOrganizationIdDocument, options);
        }
export type GetOrganizationEmployeeByUserAndOrganizationIdQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeByUserAndOrganizationIdQuery>;
export type GetOrganizationEmployeeByUserAndOrganizationIdLazyQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeByUserAndOrganizationIdLazyQuery>;
export type GetOrganizationEmployeeByUserAndOrganizationIdSuspenseQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeByUserAndOrganizationIdSuspenseQuery>;
export type GetOrganizationEmployeeByUserAndOrganizationIdQueryResult = Apollo.QueryResult<Types.GetOrganizationEmployeeByUserAndOrganizationIdQuery, Types.GetOrganizationEmployeeByUserAndOrganizationIdQueryVariables>;
export const GetEmployeesInvitesByUserIdAndOrganizationTypeDocument = gql`
    query getEmployeesInvitesByUserIdAndOrganizationType($userId: ID!, $organizationType: [OrganizationTypeType!]) {
  invitations: allOrganizationEmployees(
    where: {user: {id: $userId}, organization: {type_in: $organizationType}, isAccepted: false, isRejected: false, isBlocked: false}
    first: 10
  ) {
    id
    organization {
      name
    }
  }
}
    `;

/**
 * __useGetEmployeesInvitesByUserIdAndOrganizationTypeQuery__
 *
 * To run a query within a React component, call `useGetEmployeesInvitesByUserIdAndOrganizationTypeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeesInvitesByUserIdAndOrganizationTypeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeesInvitesByUserIdAndOrganizationTypeQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      organizationType: // value for 'organizationType'
 *   },
 * });
 */
export function useGetEmployeesInvitesByUserIdAndOrganizationTypeQuery(baseOptions: Apollo.QueryHookOptions<Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQuery, Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQueryVariables> & ({ variables: Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQuery, Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQueryVariables>(GetEmployeesInvitesByUserIdAndOrganizationTypeDocument, options);
      }
export function useGetEmployeesInvitesByUserIdAndOrganizationTypeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQuery, Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQuery, Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQueryVariables>(GetEmployeesInvitesByUserIdAndOrganizationTypeDocument, options);
        }
export function useGetEmployeesInvitesByUserIdAndOrganizationTypeSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQuery, Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQuery, Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQueryVariables>(GetEmployeesInvitesByUserIdAndOrganizationTypeDocument, options);
        }
export type GetEmployeesInvitesByUserIdAndOrganizationTypeQueryHookResult = ReturnType<typeof useGetEmployeesInvitesByUserIdAndOrganizationTypeQuery>;
export type GetEmployeesInvitesByUserIdAndOrganizationTypeLazyQueryHookResult = ReturnType<typeof useGetEmployeesInvitesByUserIdAndOrganizationTypeLazyQuery>;
export type GetEmployeesInvitesByUserIdAndOrganizationTypeSuspenseQueryHookResult = ReturnType<typeof useGetEmployeesInvitesByUserIdAndOrganizationTypeSuspenseQuery>;
export type GetEmployeesInvitesByUserIdAndOrganizationTypeQueryResult = Apollo.QueryResult<Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQuery, Types.GetEmployeesInvitesByUserIdAndOrganizationTypeQueryVariables>;
export const GetLastUserOrganizationEmployeeRequestDocument = gql`
    query getLastUserOrganizationEmployeeRequest($userId: ID!) {
  requests: allOrganizationEmployeeRequests(
    where: {user: {id: $userId}, isAccepted: false}
    first: 1
    sortBy: [createdAt_DESC]
  ) {
    id
    organizationId
    organizationName
    isRejected
    isAccepted
    retries
  }
}
    `;

/**
 * __useGetLastUserOrganizationEmployeeRequestQuery__
 *
 * To run a query within a React component, call `useGetLastUserOrganizationEmployeeRequestQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLastUserOrganizationEmployeeRequestQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLastUserOrganizationEmployeeRequestQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetLastUserOrganizationEmployeeRequestQuery(baseOptions: Apollo.QueryHookOptions<Types.GetLastUserOrganizationEmployeeRequestQuery, Types.GetLastUserOrganizationEmployeeRequestQueryVariables> & ({ variables: Types.GetLastUserOrganizationEmployeeRequestQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetLastUserOrganizationEmployeeRequestQuery, Types.GetLastUserOrganizationEmployeeRequestQueryVariables>(GetLastUserOrganizationEmployeeRequestDocument, options);
      }
export function useGetLastUserOrganizationEmployeeRequestLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetLastUserOrganizationEmployeeRequestQuery, Types.GetLastUserOrganizationEmployeeRequestQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetLastUserOrganizationEmployeeRequestQuery, Types.GetLastUserOrganizationEmployeeRequestQueryVariables>(GetLastUserOrganizationEmployeeRequestDocument, options);
        }
export function useGetLastUserOrganizationEmployeeRequestSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetLastUserOrganizationEmployeeRequestQuery, Types.GetLastUserOrganizationEmployeeRequestQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetLastUserOrganizationEmployeeRequestQuery, Types.GetLastUserOrganizationEmployeeRequestQueryVariables>(GetLastUserOrganizationEmployeeRequestDocument, options);
        }
export type GetLastUserOrganizationEmployeeRequestQueryHookResult = ReturnType<typeof useGetLastUserOrganizationEmployeeRequestQuery>;
export type GetLastUserOrganizationEmployeeRequestLazyQueryHookResult = ReturnType<typeof useGetLastUserOrganizationEmployeeRequestLazyQuery>;
export type GetLastUserOrganizationEmployeeRequestSuspenseQueryHookResult = ReturnType<typeof useGetLastUserOrganizationEmployeeRequestSuspenseQuery>;
export type GetLastUserOrganizationEmployeeRequestQueryResult = Apollo.QueryResult<Types.GetLastUserOrganizationEmployeeRequestQuery, Types.GetLastUserOrganizationEmployeeRequestQueryVariables>;
export const GetLastActiveOrganizationEmployeeRequestByTinDocument = gql`
    query getLastActiveOrganizationEmployeeRequestByTin($userId: ID!, $tin: String!) {
  requests: allOrganizationEmployeeRequests(
    where: {user: {id: $userId}, organizationTin: $tin, isAccepted: false, isRejected: false}
    first: 1
    sortBy: [createdAt_DESC]
  ) {
    id
    organizationName
  }
}
    `;

/**
 * __useGetLastActiveOrganizationEmployeeRequestByTinQuery__
 *
 * To run a query within a React component, call `useGetLastActiveOrganizationEmployeeRequestByTinQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLastActiveOrganizationEmployeeRequestByTinQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLastActiveOrganizationEmployeeRequestByTinQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      tin: // value for 'tin'
 *   },
 * });
 */
export function useGetLastActiveOrganizationEmployeeRequestByTinQuery(baseOptions: Apollo.QueryHookOptions<Types.GetLastActiveOrganizationEmployeeRequestByTinQuery, Types.GetLastActiveOrganizationEmployeeRequestByTinQueryVariables> & ({ variables: Types.GetLastActiveOrganizationEmployeeRequestByTinQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetLastActiveOrganizationEmployeeRequestByTinQuery, Types.GetLastActiveOrganizationEmployeeRequestByTinQueryVariables>(GetLastActiveOrganizationEmployeeRequestByTinDocument, options);
      }
export function useGetLastActiveOrganizationEmployeeRequestByTinLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetLastActiveOrganizationEmployeeRequestByTinQuery, Types.GetLastActiveOrganizationEmployeeRequestByTinQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetLastActiveOrganizationEmployeeRequestByTinQuery, Types.GetLastActiveOrganizationEmployeeRequestByTinQueryVariables>(GetLastActiveOrganizationEmployeeRequestByTinDocument, options);
        }
export function useGetLastActiveOrganizationEmployeeRequestByTinSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetLastActiveOrganizationEmployeeRequestByTinQuery, Types.GetLastActiveOrganizationEmployeeRequestByTinQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetLastActiveOrganizationEmployeeRequestByTinQuery, Types.GetLastActiveOrganizationEmployeeRequestByTinQueryVariables>(GetLastActiveOrganizationEmployeeRequestByTinDocument, options);
        }
export type GetLastActiveOrganizationEmployeeRequestByTinQueryHookResult = ReturnType<typeof useGetLastActiveOrganizationEmployeeRequestByTinQuery>;
export type GetLastActiveOrganizationEmployeeRequestByTinLazyQueryHookResult = ReturnType<typeof useGetLastActiveOrganizationEmployeeRequestByTinLazyQuery>;
export type GetLastActiveOrganizationEmployeeRequestByTinSuspenseQueryHookResult = ReturnType<typeof useGetLastActiveOrganizationEmployeeRequestByTinSuspenseQuery>;
export type GetLastActiveOrganizationEmployeeRequestByTinQueryResult = Apollo.QueryResult<Types.GetLastActiveOrganizationEmployeeRequestByTinQuery, Types.GetLastActiveOrganizationEmployeeRequestByTinQueryVariables>;
export const GetRequestsForUserOrganizationsDocument = gql`
    query getRequestsForUserOrganizations($userId: ID!, $userOrganizationIds: [ID!]) {
  requests: allOrganizationEmployeeRequests(
    where: {user: {id_not: $userId}, organization: {id_in: $userOrganizationIds}, isAccepted: false, isRejected: false}
    first: 100
    sortBy: [createdAt_DESC]
  ) {
    id
    userName
    userPhone
    organizationName
    organizationId
  }
}
    `;

/**
 * __useGetRequestsForUserOrganizationsQuery__
 *
 * To run a query within a React component, call `useGetRequestsForUserOrganizationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRequestsForUserOrganizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRequestsForUserOrganizationsQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      userOrganizationIds: // value for 'userOrganizationIds'
 *   },
 * });
 */
export function useGetRequestsForUserOrganizationsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetRequestsForUserOrganizationsQuery, Types.GetRequestsForUserOrganizationsQueryVariables> & ({ variables: Types.GetRequestsForUserOrganizationsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetRequestsForUserOrganizationsQuery, Types.GetRequestsForUserOrganizationsQueryVariables>(GetRequestsForUserOrganizationsDocument, options);
      }
export function useGetRequestsForUserOrganizationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetRequestsForUserOrganizationsQuery, Types.GetRequestsForUserOrganizationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetRequestsForUserOrganizationsQuery, Types.GetRequestsForUserOrganizationsQueryVariables>(GetRequestsForUserOrganizationsDocument, options);
        }
export function useGetRequestsForUserOrganizationsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetRequestsForUserOrganizationsQuery, Types.GetRequestsForUserOrganizationsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetRequestsForUserOrganizationsQuery, Types.GetRequestsForUserOrganizationsQueryVariables>(GetRequestsForUserOrganizationsDocument, options);
        }
export type GetRequestsForUserOrganizationsQueryHookResult = ReturnType<typeof useGetRequestsForUserOrganizationsQuery>;
export type GetRequestsForUserOrganizationsLazyQueryHookResult = ReturnType<typeof useGetRequestsForUserOrganizationsLazyQuery>;
export type GetRequestsForUserOrganizationsSuspenseQueryHookResult = ReturnType<typeof useGetRequestsForUserOrganizationsSuspenseQuery>;
export type GetRequestsForUserOrganizationsQueryResult = Apollo.QueryResult<Types.GetRequestsForUserOrganizationsQuery, Types.GetRequestsForUserOrganizationsQueryVariables>;
export const GetOrganizationEmployeeRolesByOrganizationDocument = gql`
    query getOrganizationEmployeeRolesByOrganization($organizationId: ID!) {
  roles: allOrganizationEmployeeRoles(
    where: {organization: {id: $organizationId}}
    first: 100
  ) {
    id
    name
    description
  }
}
    `;

/**
 * __useGetOrganizationEmployeeRolesByOrganizationQuery__
 *
 * To run a query within a React component, call `useGetOrganizationEmployeeRolesByOrganizationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationEmployeeRolesByOrganizationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationEmployeeRolesByOrganizationQuery({
 *   variables: {
 *      organizationId: // value for 'organizationId'
 *   },
 * });
 */
export function useGetOrganizationEmployeeRolesByOrganizationQuery(baseOptions: Apollo.QueryHookOptions<Types.GetOrganizationEmployeeRolesByOrganizationQuery, Types.GetOrganizationEmployeeRolesByOrganizationQueryVariables> & ({ variables: Types.GetOrganizationEmployeeRolesByOrganizationQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetOrganizationEmployeeRolesByOrganizationQuery, Types.GetOrganizationEmployeeRolesByOrganizationQueryVariables>(GetOrganizationEmployeeRolesByOrganizationDocument, options);
      }
export function useGetOrganizationEmployeeRolesByOrganizationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetOrganizationEmployeeRolesByOrganizationQuery, Types.GetOrganizationEmployeeRolesByOrganizationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetOrganizationEmployeeRolesByOrganizationQuery, Types.GetOrganizationEmployeeRolesByOrganizationQueryVariables>(GetOrganizationEmployeeRolesByOrganizationDocument, options);
        }
export function useGetOrganizationEmployeeRolesByOrganizationSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetOrganizationEmployeeRolesByOrganizationQuery, Types.GetOrganizationEmployeeRolesByOrganizationQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetOrganizationEmployeeRolesByOrganizationQuery, Types.GetOrganizationEmployeeRolesByOrganizationQueryVariables>(GetOrganizationEmployeeRolesByOrganizationDocument, options);
        }
export type GetOrganizationEmployeeRolesByOrganizationQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeRolesByOrganizationQuery>;
export type GetOrganizationEmployeeRolesByOrganizationLazyQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeRolesByOrganizationLazyQuery>;
export type GetOrganizationEmployeeRolesByOrganizationSuspenseQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeRolesByOrganizationSuspenseQuery>;
export type GetOrganizationEmployeeRolesByOrganizationQueryResult = Apollo.QueryResult<Types.GetOrganizationEmployeeRolesByOrganizationQuery, Types.GetOrganizationEmployeeRolesByOrganizationQueryVariables>;
export const GetOrganizationEmployeeSpecializationsDocument = gql`
    query getOrganizationEmployeeSpecializations($employeeId: ID!) {
  organizationEmployeeSpecializations: allOrganizationEmployeeSpecializations(
    where: {employee: {id: $employeeId}}
    first: 100
  ) {
    id
    employee {
      id
    }
    specialization {
      id
    }
  }
}
    `;

/**
 * __useGetOrganizationEmployeeSpecializationsQuery__
 *
 * To run a query within a React component, call `useGetOrganizationEmployeeSpecializationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationEmployeeSpecializationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationEmployeeSpecializationsQuery({
 *   variables: {
 *      employeeId: // value for 'employeeId'
 *   },
 * });
 */
export function useGetOrganizationEmployeeSpecializationsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetOrganizationEmployeeSpecializationsQuery, Types.GetOrganizationEmployeeSpecializationsQueryVariables> & ({ variables: Types.GetOrganizationEmployeeSpecializationsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetOrganizationEmployeeSpecializationsQuery, Types.GetOrganizationEmployeeSpecializationsQueryVariables>(GetOrganizationEmployeeSpecializationsDocument, options);
      }
export function useGetOrganizationEmployeeSpecializationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetOrganizationEmployeeSpecializationsQuery, Types.GetOrganizationEmployeeSpecializationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetOrganizationEmployeeSpecializationsQuery, Types.GetOrganizationEmployeeSpecializationsQueryVariables>(GetOrganizationEmployeeSpecializationsDocument, options);
        }
export function useGetOrganizationEmployeeSpecializationsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetOrganizationEmployeeSpecializationsQuery, Types.GetOrganizationEmployeeSpecializationsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetOrganizationEmployeeSpecializationsQuery, Types.GetOrganizationEmployeeSpecializationsQueryVariables>(GetOrganizationEmployeeSpecializationsDocument, options);
        }
export type GetOrganizationEmployeeSpecializationsQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeSpecializationsQuery>;
export type GetOrganizationEmployeeSpecializationsLazyQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeSpecializationsLazyQuery>;
export type GetOrganizationEmployeeSpecializationsSuspenseQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeSpecializationsSuspenseQuery>;
export type GetOrganizationEmployeeSpecializationsQueryResult = Apollo.QueryResult<Types.GetOrganizationEmployeeSpecializationsQuery, Types.GetOrganizationEmployeeSpecializationsQueryVariables>;
export const RegisterNewOrganizationDocument = gql`
    mutation registerNewOrganization($data: RegisterNewOrganizationInput!) {
  organization: registerNewOrganization(data: $data) {
    id
  }
}
    `;
export type RegisterNewOrganizationMutationFn = Apollo.MutationFunction<Types.RegisterNewOrganizationMutation, Types.RegisterNewOrganizationMutationVariables>;

/**
 * __useRegisterNewOrganizationMutation__
 *
 * To run a mutation, you first call `useRegisterNewOrganizationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRegisterNewOrganizationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [registerNewOrganizationMutation, { data, loading, error }] = useRegisterNewOrganizationMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useRegisterNewOrganizationMutation(baseOptions?: Apollo.MutationHookOptions<Types.RegisterNewOrganizationMutation, Types.RegisterNewOrganizationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.RegisterNewOrganizationMutation, Types.RegisterNewOrganizationMutationVariables>(RegisterNewOrganizationDocument, options);
      }
export type RegisterNewOrganizationMutationHookResult = ReturnType<typeof useRegisterNewOrganizationMutation>;
export type RegisterNewOrganizationMutationResult = Apollo.MutationResult<Types.RegisterNewOrganizationMutation>;
export type RegisterNewOrganizationMutationOptions = Apollo.BaseMutationOptions<Types.RegisterNewOrganizationMutation, Types.RegisterNewOrganizationMutationVariables>;
export const SendOrganizationEmployeeRequestDocument = gql`
    mutation sendOrganizationEmployeeRequest($data: SendOrganizationEmployeeRequestInput!) {
  request: sendOrganizationEmployeeRequest(data: $data) {
    id
    organizationName
  }
}
    `;
export type SendOrganizationEmployeeRequestMutationFn = Apollo.MutationFunction<Types.SendOrganizationEmployeeRequestMutation, Types.SendOrganizationEmployeeRequestMutationVariables>;

/**
 * __useSendOrganizationEmployeeRequestMutation__
 *
 * To run a mutation, you first call `useSendOrganizationEmployeeRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendOrganizationEmployeeRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendOrganizationEmployeeRequestMutation, { data, loading, error }] = useSendOrganizationEmployeeRequestMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useSendOrganizationEmployeeRequestMutation(baseOptions?: Apollo.MutationHookOptions<Types.SendOrganizationEmployeeRequestMutation, Types.SendOrganizationEmployeeRequestMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.SendOrganizationEmployeeRequestMutation, Types.SendOrganizationEmployeeRequestMutationVariables>(SendOrganizationEmployeeRequestDocument, options);
      }
export type SendOrganizationEmployeeRequestMutationHookResult = ReturnType<typeof useSendOrganizationEmployeeRequestMutation>;
export type SendOrganizationEmployeeRequestMutationResult = Apollo.MutationResult<Types.SendOrganizationEmployeeRequestMutation>;
export type SendOrganizationEmployeeRequestMutationOptions = Apollo.BaseMutationOptions<Types.SendOrganizationEmployeeRequestMutation, Types.SendOrganizationEmployeeRequestMutationVariables>;
export const GetPropertyWithMapByIdDocument = gql`
    query getPropertyWithMapById($id: ID!) {
  property: allProperties(where: {id: $id}, first: 1) {
    id
    organization {
      id
      name
    }
    map {
      sections {
        ...SectionOrParkingInfo
      }
      parking {
        ...SectionOrParkingInfo
      }
      dv
    }
  }
}
    ${SectionOrParkingInfoFragmentDoc}`;

/**
 * __useGetPropertyWithMapByIdQuery__
 *
 * To run a query within a React component, call `useGetPropertyWithMapByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyWithMapByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyWithMapByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetPropertyWithMapByIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetPropertyWithMapByIdQuery, Types.GetPropertyWithMapByIdQueryVariables> & ({ variables: Types.GetPropertyWithMapByIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetPropertyWithMapByIdQuery, Types.GetPropertyWithMapByIdQueryVariables>(GetPropertyWithMapByIdDocument, options);
      }
export function useGetPropertyWithMapByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetPropertyWithMapByIdQuery, Types.GetPropertyWithMapByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetPropertyWithMapByIdQuery, Types.GetPropertyWithMapByIdQueryVariables>(GetPropertyWithMapByIdDocument, options);
        }
export function useGetPropertyWithMapByIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetPropertyWithMapByIdQuery, Types.GetPropertyWithMapByIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetPropertyWithMapByIdQuery, Types.GetPropertyWithMapByIdQueryVariables>(GetPropertyWithMapByIdDocument, options);
        }
export type GetPropertyWithMapByIdQueryHookResult = ReturnType<typeof useGetPropertyWithMapByIdQuery>;
export type GetPropertyWithMapByIdLazyQueryHookResult = ReturnType<typeof useGetPropertyWithMapByIdLazyQuery>;
export type GetPropertyWithMapByIdSuspenseQueryHookResult = ReturnType<typeof useGetPropertyWithMapByIdSuspenseQuery>;
export type GetPropertyWithMapByIdQueryResult = Apollo.QueryResult<Types.GetPropertyWithMapByIdQuery, Types.GetPropertyWithMapByIdQueryVariables>;
export const GetPropertyByIdDocument = gql`
    query getPropertyById($id: ID!) {
  properties: allProperties(where: {id: $id}, first: 1) {
    id
    address
    organization {
      id
    }
    map {
      sections {
        ...SectionOrParkingInfo
      }
      parking {
        ...SectionOrParkingInfo
      }
    }
  }
}
    ${SectionOrParkingInfoFragmentDoc}`;

/**
 * __useGetPropertyByIdQuery__
 *
 * To run a query within a React component, call `useGetPropertyByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetPropertyByIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetPropertyByIdQuery, Types.GetPropertyByIdQueryVariables> & ({ variables: Types.GetPropertyByIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetPropertyByIdQuery, Types.GetPropertyByIdQueryVariables>(GetPropertyByIdDocument, options);
      }
export function useGetPropertyByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetPropertyByIdQuery, Types.GetPropertyByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetPropertyByIdQuery, Types.GetPropertyByIdQueryVariables>(GetPropertyByIdDocument, options);
        }
export function useGetPropertyByIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetPropertyByIdQuery, Types.GetPropertyByIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetPropertyByIdQuery, Types.GetPropertyByIdQueryVariables>(GetPropertyByIdDocument, options);
        }
export type GetPropertyByIdQueryHookResult = ReturnType<typeof useGetPropertyByIdQuery>;
export type GetPropertyByIdLazyQueryHookResult = ReturnType<typeof useGetPropertyByIdLazyQuery>;
export type GetPropertyByIdSuspenseQueryHookResult = ReturnType<typeof useGetPropertyByIdSuspenseQuery>;
export type GetPropertyByIdQueryResult = Apollo.QueryResult<Types.GetPropertyByIdQuery, Types.GetPropertyByIdQueryVariables>;
export const GetLastCreatedPropertyByOrganizationIdDocument = gql`
    query getLastCreatedPropertyByOrganizationId($organizationId: ID!) {
  properties: allProperties(
    where: {organization: {id: $organizationId}}
    sortBy: [createdAt_DESC]
    first: 1
  ) {
    id
  }
}
    `;

/**
 * __useGetLastCreatedPropertyByOrganizationIdQuery__
 *
 * To run a query within a React component, call `useGetLastCreatedPropertyByOrganizationIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLastCreatedPropertyByOrganizationIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLastCreatedPropertyByOrganizationIdQuery({
 *   variables: {
 *      organizationId: // value for 'organizationId'
 *   },
 * });
 */
export function useGetLastCreatedPropertyByOrganizationIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetLastCreatedPropertyByOrganizationIdQuery, Types.GetLastCreatedPropertyByOrganizationIdQueryVariables> & ({ variables: Types.GetLastCreatedPropertyByOrganizationIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetLastCreatedPropertyByOrganizationIdQuery, Types.GetLastCreatedPropertyByOrganizationIdQueryVariables>(GetLastCreatedPropertyByOrganizationIdDocument, options);
      }
export function useGetLastCreatedPropertyByOrganizationIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetLastCreatedPropertyByOrganizationIdQuery, Types.GetLastCreatedPropertyByOrganizationIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetLastCreatedPropertyByOrganizationIdQuery, Types.GetLastCreatedPropertyByOrganizationIdQueryVariables>(GetLastCreatedPropertyByOrganizationIdDocument, options);
        }
export function useGetLastCreatedPropertyByOrganizationIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetLastCreatedPropertyByOrganizationIdQuery, Types.GetLastCreatedPropertyByOrganizationIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetLastCreatedPropertyByOrganizationIdQuery, Types.GetLastCreatedPropertyByOrganizationIdQueryVariables>(GetLastCreatedPropertyByOrganizationIdDocument, options);
        }
export type GetLastCreatedPropertyByOrganizationIdQueryHookResult = ReturnType<typeof useGetLastCreatedPropertyByOrganizationIdQuery>;
export type GetLastCreatedPropertyByOrganizationIdLazyQueryHookResult = ReturnType<typeof useGetLastCreatedPropertyByOrganizationIdLazyQuery>;
export type GetLastCreatedPropertyByOrganizationIdSuspenseQueryHookResult = ReturnType<typeof useGetLastCreatedPropertyByOrganizationIdSuspenseQuery>;
export type GetLastCreatedPropertyByOrganizationIdQueryResult = Apollo.QueryResult<Types.GetLastCreatedPropertyByOrganizationIdQuery, Types.GetLastCreatedPropertyByOrganizationIdQueryVariables>;
export const GetPropertyScopePropertiesDocument = gql`
    query getPropertyScopeProperties($propertyScopeIds: [ID!]) {
  propertyScopeProperty: allPropertyScopeProperties(
    where: {propertyScope: {id_in: $propertyScopeIds}}
    first: 300
  ) {
    id
    propertyScope {
      id
    }
    property {
      id
    }
  }
}
    `;

/**
 * __useGetPropertyScopePropertiesQuery__
 *
 * To run a query within a React component, call `useGetPropertyScopePropertiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyScopePropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyScopePropertiesQuery({
 *   variables: {
 *      propertyScopeIds: // value for 'propertyScopeIds'
 *   },
 * });
 */
export function useGetPropertyScopePropertiesQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetPropertyScopePropertiesQuery, Types.GetPropertyScopePropertiesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetPropertyScopePropertiesQuery, Types.GetPropertyScopePropertiesQueryVariables>(GetPropertyScopePropertiesDocument, options);
      }
export function useGetPropertyScopePropertiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetPropertyScopePropertiesQuery, Types.GetPropertyScopePropertiesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetPropertyScopePropertiesQuery, Types.GetPropertyScopePropertiesQueryVariables>(GetPropertyScopePropertiesDocument, options);
        }
export function useGetPropertyScopePropertiesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetPropertyScopePropertiesQuery, Types.GetPropertyScopePropertiesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetPropertyScopePropertiesQuery, Types.GetPropertyScopePropertiesQueryVariables>(GetPropertyScopePropertiesDocument, options);
        }
export type GetPropertyScopePropertiesQueryHookResult = ReturnType<typeof useGetPropertyScopePropertiesQuery>;
export type GetPropertyScopePropertiesLazyQueryHookResult = ReturnType<typeof useGetPropertyScopePropertiesLazyQuery>;
export type GetPropertyScopePropertiesSuspenseQueryHookResult = ReturnType<typeof useGetPropertyScopePropertiesSuspenseQuery>;
export type GetPropertyScopePropertiesQueryResult = Apollo.QueryResult<Types.GetPropertyScopePropertiesQuery, Types.GetPropertyScopePropertiesQueryVariables>;
export const GetPropertyScopesDocument = gql`
    query getPropertyScopes($organizationId: ID!, $propertyScopeIds: [ID!]) {
  propertyScope: allPropertyScopes(
    where: {organization: {id: $organizationId}, OR: [{id_in: $propertyScopeIds}, {hasAllEmployees: true}]}
    first: 100
  ) {
    id
    hasAllProperties
  }
}
    `;

/**
 * __useGetPropertyScopesQuery__
 *
 * To run a query within a React component, call `useGetPropertyScopesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyScopesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyScopesQuery({
 *   variables: {
 *      organizationId: // value for 'organizationId'
 *      propertyScopeIds: // value for 'propertyScopeIds'
 *   },
 * });
 */
export function useGetPropertyScopesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetPropertyScopesQuery, Types.GetPropertyScopesQueryVariables> & ({ variables: Types.GetPropertyScopesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetPropertyScopesQuery, Types.GetPropertyScopesQueryVariables>(GetPropertyScopesDocument, options);
      }
export function useGetPropertyScopesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetPropertyScopesQuery, Types.GetPropertyScopesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetPropertyScopesQuery, Types.GetPropertyScopesQueryVariables>(GetPropertyScopesDocument, options);
        }
export function useGetPropertyScopesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetPropertyScopesQuery, Types.GetPropertyScopesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetPropertyScopesQuery, Types.GetPropertyScopesQueryVariables>(GetPropertyScopesDocument, options);
        }
export type GetPropertyScopesQueryHookResult = ReturnType<typeof useGetPropertyScopesQuery>;
export type GetPropertyScopesLazyQueryHookResult = ReturnType<typeof useGetPropertyScopesLazyQuery>;
export type GetPropertyScopesSuspenseQueryHookResult = ReturnType<typeof useGetPropertyScopesSuspenseQuery>;
export type GetPropertyScopesQueryResult = Apollo.QueryResult<Types.GetPropertyScopesQuery, Types.GetPropertyScopesQueryVariables>;
export const GetPropertyScopeOrganizationEmployeesDocument = gql`
    query getPropertyScopeOrganizationEmployees($employeeId: ID!) {
  propertyScopeOrganizationEmployees: allPropertyScopeOrganizationEmployees(
    where: {employee: {id: $employeeId}}
    first: 300
  ) {
    id
    propertyScope {
      id
    }
    employee {
      id
    }
  }
}
    `;

/**
 * __useGetPropertyScopeOrganizationEmployeesQuery__
 *
 * To run a query within a React component, call `useGetPropertyScopeOrganizationEmployeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyScopeOrganizationEmployeesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyScopeOrganizationEmployeesQuery({
 *   variables: {
 *      employeeId: // value for 'employeeId'
 *   },
 * });
 */
export function useGetPropertyScopeOrganizationEmployeesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetPropertyScopeOrganizationEmployeesQuery, Types.GetPropertyScopeOrganizationEmployeesQueryVariables> & ({ variables: Types.GetPropertyScopeOrganizationEmployeesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetPropertyScopeOrganizationEmployeesQuery, Types.GetPropertyScopeOrganizationEmployeesQueryVariables>(GetPropertyScopeOrganizationEmployeesDocument, options);
      }
export function useGetPropertyScopeOrganizationEmployeesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetPropertyScopeOrganizationEmployeesQuery, Types.GetPropertyScopeOrganizationEmployeesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetPropertyScopeOrganizationEmployeesQuery, Types.GetPropertyScopeOrganizationEmployeesQueryVariables>(GetPropertyScopeOrganizationEmployeesDocument, options);
        }
export function useGetPropertyScopeOrganizationEmployeesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetPropertyScopeOrganizationEmployeesQuery, Types.GetPropertyScopeOrganizationEmployeesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetPropertyScopeOrganizationEmployeesQuery, Types.GetPropertyScopeOrganizationEmployeesQueryVariables>(GetPropertyScopeOrganizationEmployeesDocument, options);
        }
export type GetPropertyScopeOrganizationEmployeesQueryHookResult = ReturnType<typeof useGetPropertyScopeOrganizationEmployeesQuery>;
export type GetPropertyScopeOrganizationEmployeesLazyQueryHookResult = ReturnType<typeof useGetPropertyScopeOrganizationEmployeesLazyQuery>;
export type GetPropertyScopeOrganizationEmployeesSuspenseQueryHookResult = ReturnType<typeof useGetPropertyScopeOrganizationEmployeesSuspenseQuery>;
export type GetPropertyScopeOrganizationEmployeesQueryResult = Apollo.QueryResult<Types.GetPropertyScopeOrganizationEmployeesQuery, Types.GetPropertyScopeOrganizationEmployeesQueryVariables>;
export const GetServiceSubscriptionDocument = gql`
    query getServiceSubscription($organizationId: ID!) {
  subscriptions: allServiceSubscriptions(
    where: {organization: {id: $organizationId}}
    first: 1
    sortBy: [startAt_DESC]
  ) {
    id
    isTrial
    finishAt
    type
  }
}
    `;

/**
 * __useGetServiceSubscriptionQuery__
 *
 * To run a query within a React component, call `useGetServiceSubscriptionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetServiceSubscriptionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetServiceSubscriptionQuery({
 *   variables: {
 *      organizationId: // value for 'organizationId'
 *   },
 * });
 */
export function useGetServiceSubscriptionQuery(baseOptions: Apollo.QueryHookOptions<Types.GetServiceSubscriptionQuery, Types.GetServiceSubscriptionQueryVariables> & ({ variables: Types.GetServiceSubscriptionQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetServiceSubscriptionQuery, Types.GetServiceSubscriptionQueryVariables>(GetServiceSubscriptionDocument, options);
      }
export function useGetServiceSubscriptionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetServiceSubscriptionQuery, Types.GetServiceSubscriptionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetServiceSubscriptionQuery, Types.GetServiceSubscriptionQueryVariables>(GetServiceSubscriptionDocument, options);
        }
export function useGetServiceSubscriptionSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetServiceSubscriptionQuery, Types.GetServiceSubscriptionQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetServiceSubscriptionQuery, Types.GetServiceSubscriptionQueryVariables>(GetServiceSubscriptionDocument, options);
        }
export type GetServiceSubscriptionQueryHookResult = ReturnType<typeof useGetServiceSubscriptionQuery>;
export type GetServiceSubscriptionLazyQueryHookResult = ReturnType<typeof useGetServiceSubscriptionLazyQuery>;
export type GetServiceSubscriptionSuspenseQueryHookResult = ReturnType<typeof useGetServiceSubscriptionSuspenseQuery>;
export type GetServiceSubscriptionQueryResult = Apollo.QueryResult<Types.GetServiceSubscriptionQuery, Types.GetServiceSubscriptionQueryVariables>;
export const GetTrialServiceSubscriptionDocument = gql`
    query getTrialServiceSubscription($organizationId: ID!, $finishAtLte: String, $finishAtGte: String) {
  subscriptions: allServiceSubscriptions(
    where: {organization: {id: $organizationId}, type: sbbol, isTrial: true, finishAt_lte: $finishAtLte, finishAt_gte: $finishAtGte}
    first: 1
    sortBy: [startAt_DESC]
  ) {
    id
    finishAt
  }
}
    `;

/**
 * __useGetTrialServiceSubscriptionQuery__
 *
 * To run a query within a React component, call `useGetTrialServiceSubscriptionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTrialServiceSubscriptionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTrialServiceSubscriptionQuery({
 *   variables: {
 *      organizationId: // value for 'organizationId'
 *      finishAtLte: // value for 'finishAtLte'
 *      finishAtGte: // value for 'finishAtGte'
 *   },
 * });
 */
export function useGetTrialServiceSubscriptionQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTrialServiceSubscriptionQuery, Types.GetTrialServiceSubscriptionQueryVariables> & ({ variables: Types.GetTrialServiceSubscriptionQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTrialServiceSubscriptionQuery, Types.GetTrialServiceSubscriptionQueryVariables>(GetTrialServiceSubscriptionDocument, options);
      }
export function useGetTrialServiceSubscriptionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTrialServiceSubscriptionQuery, Types.GetTrialServiceSubscriptionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTrialServiceSubscriptionQuery, Types.GetTrialServiceSubscriptionQueryVariables>(GetTrialServiceSubscriptionDocument, options);
        }
export function useGetTrialServiceSubscriptionSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTrialServiceSubscriptionQuery, Types.GetTrialServiceSubscriptionQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTrialServiceSubscriptionQuery, Types.GetTrialServiceSubscriptionQueryVariables>(GetTrialServiceSubscriptionDocument, options);
        }
export type GetTrialServiceSubscriptionQueryHookResult = ReturnType<typeof useGetTrialServiceSubscriptionQuery>;
export type GetTrialServiceSubscriptionLazyQueryHookResult = ReturnType<typeof useGetTrialServiceSubscriptionLazyQuery>;
export type GetTrialServiceSubscriptionSuspenseQueryHookResult = ReturnType<typeof useGetTrialServiceSubscriptionSuspenseQuery>;
export type GetTrialServiceSubscriptionQueryResult = Apollo.QueryResult<Types.GetTrialServiceSubscriptionQuery, Types.GetTrialServiceSubscriptionQueryVariables>;
export const GetCallRecordFragmentExistenceDocument = gql`
    query getCallRecordFragmentExistence($organizationId: ID!) {
  callRecordFragments: allCallRecordFragments(
    where: {organization: {id: $organizationId}}
    first: 1
  ) {
    id
  }
}
    `;

/**
 * __useGetCallRecordFragmentExistenceQuery__
 *
 * To run a query within a React component, call `useGetCallRecordFragmentExistenceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCallRecordFragmentExistenceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCallRecordFragmentExistenceQuery({
 *   variables: {
 *      organizationId: // value for 'organizationId'
 *   },
 * });
 */
export function useGetCallRecordFragmentExistenceQuery(baseOptions: Apollo.QueryHookOptions<Types.GetCallRecordFragmentExistenceQuery, Types.GetCallRecordFragmentExistenceQueryVariables> & ({ variables: Types.GetCallRecordFragmentExistenceQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetCallRecordFragmentExistenceQuery, Types.GetCallRecordFragmentExistenceQueryVariables>(GetCallRecordFragmentExistenceDocument, options);
      }
export function useGetCallRecordFragmentExistenceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetCallRecordFragmentExistenceQuery, Types.GetCallRecordFragmentExistenceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetCallRecordFragmentExistenceQuery, Types.GetCallRecordFragmentExistenceQueryVariables>(GetCallRecordFragmentExistenceDocument, options);
        }
export function useGetCallRecordFragmentExistenceSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetCallRecordFragmentExistenceQuery, Types.GetCallRecordFragmentExistenceQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetCallRecordFragmentExistenceQuery, Types.GetCallRecordFragmentExistenceQueryVariables>(GetCallRecordFragmentExistenceDocument, options);
        }
export type GetCallRecordFragmentExistenceQueryHookResult = ReturnType<typeof useGetCallRecordFragmentExistenceQuery>;
export type GetCallRecordFragmentExistenceLazyQueryHookResult = ReturnType<typeof useGetCallRecordFragmentExistenceLazyQuery>;
export type GetCallRecordFragmentExistenceSuspenseQueryHookResult = ReturnType<typeof useGetCallRecordFragmentExistenceSuspenseQuery>;
export type GetCallRecordFragmentExistenceQueryResult = Apollo.QueryResult<Types.GetCallRecordFragmentExistenceQuery, Types.GetCallRecordFragmentExistenceQueryVariables>;
export const GetTicketCallRecordsFragmentsDocument = gql`
    query getTicketCallRecordsFragments($ticketId: ID!) {
  callRecordFragments: allCallRecordFragments(
    where: {ticket: {id: $ticketId}}
    sortBy: [createdAt_DESC]
  ) {
    id
    callRecord {
      id
      isIncomingCall
      callerPhone
      destCallerPhone
      startedAt
      file {
        publicUrl
        id
      }
    }
  }
}
    `;

/**
 * __useGetTicketCallRecordsFragmentsQuery__
 *
 * To run a query within a React component, call `useGetTicketCallRecordsFragmentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketCallRecordsFragmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketCallRecordsFragmentsQuery({
 *   variables: {
 *      ticketId: // value for 'ticketId'
 *   },
 * });
 */
export function useGetTicketCallRecordsFragmentsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketCallRecordsFragmentsQuery, Types.GetTicketCallRecordsFragmentsQueryVariables> & ({ variables: Types.GetTicketCallRecordsFragmentsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketCallRecordsFragmentsQuery, Types.GetTicketCallRecordsFragmentsQueryVariables>(GetTicketCallRecordsFragmentsDocument, options);
      }
export function useGetTicketCallRecordsFragmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketCallRecordsFragmentsQuery, Types.GetTicketCallRecordsFragmentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketCallRecordsFragmentsQuery, Types.GetTicketCallRecordsFragmentsQueryVariables>(GetTicketCallRecordsFragmentsDocument, options);
        }
export function useGetTicketCallRecordsFragmentsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketCallRecordsFragmentsQuery, Types.GetTicketCallRecordsFragmentsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketCallRecordsFragmentsQuery, Types.GetTicketCallRecordsFragmentsQueryVariables>(GetTicketCallRecordsFragmentsDocument, options);
        }
export type GetTicketCallRecordsFragmentsQueryHookResult = ReturnType<typeof useGetTicketCallRecordsFragmentsQuery>;
export type GetTicketCallRecordsFragmentsLazyQueryHookResult = ReturnType<typeof useGetTicketCallRecordsFragmentsLazyQuery>;
export type GetTicketCallRecordsFragmentsSuspenseQueryHookResult = ReturnType<typeof useGetTicketCallRecordsFragmentsSuspenseQuery>;
export type GetTicketCallRecordsFragmentsQueryResult = Apollo.QueryResult<Types.GetTicketCallRecordsFragmentsQuery, Types.GetTicketCallRecordsFragmentsQueryVariables>;
export const GetIncidentsDocument = gql`
    query getIncidents($where: IncidentWhereInput, $sortBy: [SortIncidentsBy!], $first: Int!) {
  incidents: allIncidents(where: $where, sortBy: $sortBy, first: $first) {
    id
    details
    workStart
    workFinish
    status
    details
  }
}
    `;

/**
 * __useGetIncidentsQuery__
 *
 * To run a query within a React component, call `useGetIncidentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIncidentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIncidentsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      sortBy: // value for 'sortBy'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useGetIncidentsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetIncidentsQuery, Types.GetIncidentsQueryVariables> & ({ variables: Types.GetIncidentsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetIncidentsQuery, Types.GetIncidentsQueryVariables>(GetIncidentsDocument, options);
      }
export function useGetIncidentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetIncidentsQuery, Types.GetIncidentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetIncidentsQuery, Types.GetIncidentsQueryVariables>(GetIncidentsDocument, options);
        }
export function useGetIncidentsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetIncidentsQuery, Types.GetIncidentsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetIncidentsQuery, Types.GetIncidentsQueryVariables>(GetIncidentsDocument, options);
        }
export type GetIncidentsQueryHookResult = ReturnType<typeof useGetIncidentsQuery>;
export type GetIncidentsLazyQueryHookResult = ReturnType<typeof useGetIncidentsLazyQuery>;
export type GetIncidentsSuspenseQueryHookResult = ReturnType<typeof useGetIncidentsSuspenseQuery>;
export type GetIncidentsQueryResult = Apollo.QueryResult<Types.GetIncidentsQuery, Types.GetIncidentsQueryVariables>;
export const GetIncidentByIdDocument = gql`
    query getIncidentById($incidentId: ID!) {
  incident: Incident(where: {id: $incidentId}) {
    id
    status
    createdAt
    createdBy {
      id
      name
    }
    number
    details
    organization {
      id
      name
    }
    workStart
    workFinish
    workType
    textForResident
    hasAllProperties
  }
}
    `;

/**
 * __useGetIncidentByIdQuery__
 *
 * To run a query within a React component, call `useGetIncidentByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIncidentByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIncidentByIdQuery({
 *   variables: {
 *      incidentId: // value for 'incidentId'
 *   },
 * });
 */
export function useGetIncidentByIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetIncidentByIdQuery, Types.GetIncidentByIdQueryVariables> & ({ variables: Types.GetIncidentByIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetIncidentByIdQuery, Types.GetIncidentByIdQueryVariables>(GetIncidentByIdDocument, options);
      }
export function useGetIncidentByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetIncidentByIdQuery, Types.GetIncidentByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetIncidentByIdQuery, Types.GetIncidentByIdQueryVariables>(GetIncidentByIdDocument, options);
        }
export function useGetIncidentByIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetIncidentByIdQuery, Types.GetIncidentByIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetIncidentByIdQuery, Types.GetIncidentByIdQueryVariables>(GetIncidentByIdDocument, options);
        }
export type GetIncidentByIdQueryHookResult = ReturnType<typeof useGetIncidentByIdQuery>;
export type GetIncidentByIdLazyQueryHookResult = ReturnType<typeof useGetIncidentByIdLazyQuery>;
export type GetIncidentByIdSuspenseQueryHookResult = ReturnType<typeof useGetIncidentByIdSuspenseQuery>;
export type GetIncidentByIdQueryResult = Apollo.QueryResult<Types.GetIncidentByIdQuery, Types.GetIncidentByIdQueryVariables>;
export const CreateIncidentDocument = gql`
    mutation createIncident($data: IncidentCreateInput!) {
  incident: createIncident(data: $data) {
    id
  }
}
    `;
export type CreateIncidentMutationFn = Apollo.MutationFunction<Types.CreateIncidentMutation, Types.CreateIncidentMutationVariables>;

/**
 * __useCreateIncidentMutation__
 *
 * To run a mutation, you first call `useCreateIncidentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateIncidentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createIncidentMutation, { data, loading, error }] = useCreateIncidentMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateIncidentMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateIncidentMutation, Types.CreateIncidentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateIncidentMutation, Types.CreateIncidentMutationVariables>(CreateIncidentDocument, options);
      }
export type CreateIncidentMutationHookResult = ReturnType<typeof useCreateIncidentMutation>;
export type CreateIncidentMutationResult = Apollo.MutationResult<Types.CreateIncidentMutation>;
export type CreateIncidentMutationOptions = Apollo.BaseMutationOptions<Types.CreateIncidentMutation, Types.CreateIncidentMutationVariables>;
export const UpdateIncidentDocument = gql`
    mutation updateIncident($id: ID!, $data: IncidentUpdateInput!) {
  incident: updateIncident(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateIncidentMutationFn = Apollo.MutationFunction<Types.UpdateIncidentMutation, Types.UpdateIncidentMutationVariables>;

/**
 * __useUpdateIncidentMutation__
 *
 * To run a mutation, you first call `useUpdateIncidentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateIncidentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateIncidentMutation, { data, loading, error }] = useUpdateIncidentMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateIncidentMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateIncidentMutation, Types.UpdateIncidentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateIncidentMutation, Types.UpdateIncidentMutationVariables>(UpdateIncidentDocument, options);
      }
export type UpdateIncidentMutationHookResult = ReturnType<typeof useUpdateIncidentMutation>;
export type UpdateIncidentMutationResult = Apollo.MutationResult<Types.UpdateIncidentMutation>;
export type UpdateIncidentMutationOptions = Apollo.BaseMutationOptions<Types.UpdateIncidentMutation, Types.UpdateIncidentMutationVariables>;
export const GetIncidentChangesByIncidentIdDocument = gql`
    query getIncidentChangesByIncidentId($incidentId: ID!) {
  incidentChanges: allIncidentChanges(
    where: {incident: {id: $incidentId}}
    sortBy: [createdAt_DESC]
    first: 100
  ) {
    id
    createdAt
    detailsFrom
    detailsTo
    statusFrom
    statusTo
    textForResidentFrom
    textForResidentTo
    workStartFrom
    workStartTo
    workFinishFrom
    workFinishTo
    workTypeFrom
    workTypeTo
    organizationIdFrom
    organizationIdTo
    organizationDisplayNameFrom
    organizationDisplayNameTo
    changedByRole
    createdBy {
      name
    }
  }
}
    `;

/**
 * __useGetIncidentChangesByIncidentIdQuery__
 *
 * To run a query within a React component, call `useGetIncidentChangesByIncidentIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIncidentChangesByIncidentIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIncidentChangesByIncidentIdQuery({
 *   variables: {
 *      incidentId: // value for 'incidentId'
 *   },
 * });
 */
export function useGetIncidentChangesByIncidentIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetIncidentChangesByIncidentIdQuery, Types.GetIncidentChangesByIncidentIdQueryVariables> & ({ variables: Types.GetIncidentChangesByIncidentIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetIncidentChangesByIncidentIdQuery, Types.GetIncidentChangesByIncidentIdQueryVariables>(GetIncidentChangesByIncidentIdDocument, options);
      }
export function useGetIncidentChangesByIncidentIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetIncidentChangesByIncidentIdQuery, Types.GetIncidentChangesByIncidentIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetIncidentChangesByIncidentIdQuery, Types.GetIncidentChangesByIncidentIdQueryVariables>(GetIncidentChangesByIncidentIdDocument, options);
        }
export function useGetIncidentChangesByIncidentIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetIncidentChangesByIncidentIdQuery, Types.GetIncidentChangesByIncidentIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetIncidentChangesByIncidentIdQuery, Types.GetIncidentChangesByIncidentIdQueryVariables>(GetIncidentChangesByIncidentIdDocument, options);
        }
export type GetIncidentChangesByIncidentIdQueryHookResult = ReturnType<typeof useGetIncidentChangesByIncidentIdQuery>;
export type GetIncidentChangesByIncidentIdLazyQueryHookResult = ReturnType<typeof useGetIncidentChangesByIncidentIdLazyQuery>;
export type GetIncidentChangesByIncidentIdSuspenseQueryHookResult = ReturnType<typeof useGetIncidentChangesByIncidentIdSuspenseQuery>;
export type GetIncidentChangesByIncidentIdQueryResult = Apollo.QueryResult<Types.GetIncidentChangesByIncidentIdQuery, Types.GetIncidentChangesByIncidentIdQueryVariables>;
export const GetIncidentClassifierIncidentByIncidentIdDocument = gql`
    query getIncidentClassifierIncidentByIncidentId($incidentId: ID!) {
  incidentClassifierIncident: allIncidentClassifierIncidents(
    where: {incident: {id: $incidentId}}
    first: 200
  ) {
    id
    incident {
      id
    }
    classifier {
      id
      category {
        name
      }
      problem {
        name
      }
    }
  }
}
    `;

/**
 * __useGetIncidentClassifierIncidentByIncidentIdQuery__
 *
 * To run a query within a React component, call `useGetIncidentClassifierIncidentByIncidentIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIncidentClassifierIncidentByIncidentIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIncidentClassifierIncidentByIncidentIdQuery({
 *   variables: {
 *      incidentId: // value for 'incidentId'
 *   },
 * });
 */
export function useGetIncidentClassifierIncidentByIncidentIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetIncidentClassifierIncidentByIncidentIdQuery, Types.GetIncidentClassifierIncidentByIncidentIdQueryVariables> & ({ variables: Types.GetIncidentClassifierIncidentByIncidentIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetIncidentClassifierIncidentByIncidentIdQuery, Types.GetIncidentClassifierIncidentByIncidentIdQueryVariables>(GetIncidentClassifierIncidentByIncidentIdDocument, options);
      }
export function useGetIncidentClassifierIncidentByIncidentIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetIncidentClassifierIncidentByIncidentIdQuery, Types.GetIncidentClassifierIncidentByIncidentIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetIncidentClassifierIncidentByIncidentIdQuery, Types.GetIncidentClassifierIncidentByIncidentIdQueryVariables>(GetIncidentClassifierIncidentByIncidentIdDocument, options);
        }
export function useGetIncidentClassifierIncidentByIncidentIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetIncidentClassifierIncidentByIncidentIdQuery, Types.GetIncidentClassifierIncidentByIncidentIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetIncidentClassifierIncidentByIncidentIdQuery, Types.GetIncidentClassifierIncidentByIncidentIdQueryVariables>(GetIncidentClassifierIncidentByIncidentIdDocument, options);
        }
export type GetIncidentClassifierIncidentByIncidentIdQueryHookResult = ReturnType<typeof useGetIncidentClassifierIncidentByIncidentIdQuery>;
export type GetIncidentClassifierIncidentByIncidentIdLazyQueryHookResult = ReturnType<typeof useGetIncidentClassifierIncidentByIncidentIdLazyQuery>;
export type GetIncidentClassifierIncidentByIncidentIdSuspenseQueryHookResult = ReturnType<typeof useGetIncidentClassifierIncidentByIncidentIdSuspenseQuery>;
export type GetIncidentClassifierIncidentByIncidentIdQueryResult = Apollo.QueryResult<Types.GetIncidentClassifierIncidentByIncidentIdQuery, Types.GetIncidentClassifierIncidentByIncidentIdQueryVariables>;
export const GetIncidentClassifierIncidentDocument = gql`
    query getIncidentClassifierIncident($where: IncidentClassifierIncidentWhereInput!, $first: Int!) {
  incidentClassifierIncident: allIncidentClassifierIncidents(
    where: $where
    first: $first
  ) {
    id
    incident {
      id
    }
  }
}
    `;

/**
 * __useGetIncidentClassifierIncidentQuery__
 *
 * To run a query within a React component, call `useGetIncidentClassifierIncidentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIncidentClassifierIncidentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIncidentClassifierIncidentQuery({
 *   variables: {
 *      where: // value for 'where'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useGetIncidentClassifierIncidentQuery(baseOptions: Apollo.QueryHookOptions<Types.GetIncidentClassifierIncidentQuery, Types.GetIncidentClassifierIncidentQueryVariables> & ({ variables: Types.GetIncidentClassifierIncidentQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetIncidentClassifierIncidentQuery, Types.GetIncidentClassifierIncidentQueryVariables>(GetIncidentClassifierIncidentDocument, options);
      }
export function useGetIncidentClassifierIncidentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetIncidentClassifierIncidentQuery, Types.GetIncidentClassifierIncidentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetIncidentClassifierIncidentQuery, Types.GetIncidentClassifierIncidentQueryVariables>(GetIncidentClassifierIncidentDocument, options);
        }
export function useGetIncidentClassifierIncidentSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetIncidentClassifierIncidentQuery, Types.GetIncidentClassifierIncidentQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetIncidentClassifierIncidentQuery, Types.GetIncidentClassifierIncidentQueryVariables>(GetIncidentClassifierIncidentDocument, options);
        }
export type GetIncidentClassifierIncidentQueryHookResult = ReturnType<typeof useGetIncidentClassifierIncidentQuery>;
export type GetIncidentClassifierIncidentLazyQueryHookResult = ReturnType<typeof useGetIncidentClassifierIncidentLazyQuery>;
export type GetIncidentClassifierIncidentSuspenseQueryHookResult = ReturnType<typeof useGetIncidentClassifierIncidentSuspenseQuery>;
export type GetIncidentClassifierIncidentQueryResult = Apollo.QueryResult<Types.GetIncidentClassifierIncidentQuery, Types.GetIncidentClassifierIncidentQueryVariables>;
export const CreateIncidentClassifierIncidentDocument = gql`
    mutation createIncidentClassifierIncident($data: IncidentClassifierIncidentCreateInput!) {
  incidentClassifierIncident: createIncidentClassifierIncident(data: $data) {
    id
  }
}
    `;
export type CreateIncidentClassifierIncidentMutationFn = Apollo.MutationFunction<Types.CreateIncidentClassifierIncidentMutation, Types.CreateIncidentClassifierIncidentMutationVariables>;

/**
 * __useCreateIncidentClassifierIncidentMutation__
 *
 * To run a mutation, you first call `useCreateIncidentClassifierIncidentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateIncidentClassifierIncidentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createIncidentClassifierIncidentMutation, { data, loading, error }] = useCreateIncidentClassifierIncidentMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateIncidentClassifierIncidentMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateIncidentClassifierIncidentMutation, Types.CreateIncidentClassifierIncidentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateIncidentClassifierIncidentMutation, Types.CreateIncidentClassifierIncidentMutationVariables>(CreateIncidentClassifierIncidentDocument, options);
      }
export type CreateIncidentClassifierIncidentMutationHookResult = ReturnType<typeof useCreateIncidentClassifierIncidentMutation>;
export type CreateIncidentClassifierIncidentMutationResult = Apollo.MutationResult<Types.CreateIncidentClassifierIncidentMutation>;
export type CreateIncidentClassifierIncidentMutationOptions = Apollo.BaseMutationOptions<Types.CreateIncidentClassifierIncidentMutation, Types.CreateIncidentClassifierIncidentMutationVariables>;
export const UpdateIncidentClassifierIncidentDocument = gql`
    mutation updateIncidentClassifierIncident($id: ID!, $data: IncidentClassifierIncidentUpdateInput!) {
  incidentClassifierIncident: updateIncidentClassifierIncident(
    id: $id
    data: $data
  ) {
    id
  }
}
    `;
export type UpdateIncidentClassifierIncidentMutationFn = Apollo.MutationFunction<Types.UpdateIncidentClassifierIncidentMutation, Types.UpdateIncidentClassifierIncidentMutationVariables>;

/**
 * __useUpdateIncidentClassifierIncidentMutation__
 *
 * To run a mutation, you first call `useUpdateIncidentClassifierIncidentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateIncidentClassifierIncidentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateIncidentClassifierIncidentMutation, { data, loading, error }] = useUpdateIncidentClassifierIncidentMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateIncidentClassifierIncidentMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateIncidentClassifierIncidentMutation, Types.UpdateIncidentClassifierIncidentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateIncidentClassifierIncidentMutation, Types.UpdateIncidentClassifierIncidentMutationVariables>(UpdateIncidentClassifierIncidentDocument, options);
      }
export type UpdateIncidentClassifierIncidentMutationHookResult = ReturnType<typeof useUpdateIncidentClassifierIncidentMutation>;
export type UpdateIncidentClassifierIncidentMutationResult = Apollo.MutationResult<Types.UpdateIncidentClassifierIncidentMutation>;
export type UpdateIncidentClassifierIncidentMutationOptions = Apollo.BaseMutationOptions<Types.UpdateIncidentClassifierIncidentMutation, Types.UpdateIncidentClassifierIncidentMutationVariables>;
export const GetIncidentExportTasksDocument = gql`
    query getIncidentExportTasks($where: IncidentExportTaskWhereInput!) {
  tasks: allIncidentExportTasks(where: $where) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;

/**
 * __useGetIncidentExportTasksQuery__
 *
 * To run a query within a React component, call `useGetIncidentExportTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIncidentExportTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIncidentExportTasksQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetIncidentExportTasksQuery(baseOptions: Apollo.QueryHookOptions<Types.GetIncidentExportTasksQuery, Types.GetIncidentExportTasksQueryVariables> & ({ variables: Types.GetIncidentExportTasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetIncidentExportTasksQuery, Types.GetIncidentExportTasksQueryVariables>(GetIncidentExportTasksDocument, options);
      }
export function useGetIncidentExportTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetIncidentExportTasksQuery, Types.GetIncidentExportTasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetIncidentExportTasksQuery, Types.GetIncidentExportTasksQueryVariables>(GetIncidentExportTasksDocument, options);
        }
export function useGetIncidentExportTasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetIncidentExportTasksQuery, Types.GetIncidentExportTasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetIncidentExportTasksQuery, Types.GetIncidentExportTasksQueryVariables>(GetIncidentExportTasksDocument, options);
        }
export type GetIncidentExportTasksQueryHookResult = ReturnType<typeof useGetIncidentExportTasksQuery>;
export type GetIncidentExportTasksLazyQueryHookResult = ReturnType<typeof useGetIncidentExportTasksLazyQuery>;
export type GetIncidentExportTasksSuspenseQueryHookResult = ReturnType<typeof useGetIncidentExportTasksSuspenseQuery>;
export type GetIncidentExportTasksQueryResult = Apollo.QueryResult<Types.GetIncidentExportTasksQuery, Types.GetIncidentExportTasksQueryVariables>;
export const CreateIncidentExportTaskDocument = gql`
    mutation createIncidentExportTask($data: IncidentExportTaskCreateInput!) {
  task: createIncidentExportTask(data: $data) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;
export type CreateIncidentExportTaskMutationFn = Apollo.MutationFunction<Types.CreateIncidentExportTaskMutation, Types.CreateIncidentExportTaskMutationVariables>;

/**
 * __useCreateIncidentExportTaskMutation__
 *
 * To run a mutation, you first call `useCreateIncidentExportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateIncidentExportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createIncidentExportTaskMutation, { data, loading, error }] = useCreateIncidentExportTaskMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateIncidentExportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateIncidentExportTaskMutation, Types.CreateIncidentExportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateIncidentExportTaskMutation, Types.CreateIncidentExportTaskMutationVariables>(CreateIncidentExportTaskDocument, options);
      }
export type CreateIncidentExportTaskMutationHookResult = ReturnType<typeof useCreateIncidentExportTaskMutation>;
export type CreateIncidentExportTaskMutationResult = Apollo.MutationResult<Types.CreateIncidentExportTaskMutation>;
export type CreateIncidentExportTaskMutationOptions = Apollo.BaseMutationOptions<Types.CreateIncidentExportTaskMutation, Types.CreateIncidentExportTaskMutationVariables>;
export const UpdateIncidentExportTaskDocument = gql`
    mutation updateIncidentExportTask($id: ID!, $data: IncidentExportTaskUpdateInput!) {
  task: updateIncidentExportTask(data: $data, id: $id) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;
export type UpdateIncidentExportTaskMutationFn = Apollo.MutationFunction<Types.UpdateIncidentExportTaskMutation, Types.UpdateIncidentExportTaskMutationVariables>;

/**
 * __useUpdateIncidentExportTaskMutation__
 *
 * To run a mutation, you first call `useUpdateIncidentExportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateIncidentExportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateIncidentExportTaskMutation, { data, loading, error }] = useUpdateIncidentExportTaskMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateIncidentExportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateIncidentExportTaskMutation, Types.UpdateIncidentExportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateIncidentExportTaskMutation, Types.UpdateIncidentExportTaskMutationVariables>(UpdateIncidentExportTaskDocument, options);
      }
export type UpdateIncidentExportTaskMutationHookResult = ReturnType<typeof useUpdateIncidentExportTaskMutation>;
export type UpdateIncidentExportTaskMutationResult = Apollo.MutationResult<Types.UpdateIncidentExportTaskMutation>;
export type UpdateIncidentExportTaskMutationOptions = Apollo.BaseMutationOptions<Types.UpdateIncidentExportTaskMutation, Types.UpdateIncidentExportTaskMutationVariables>;
export const GetIncidentPropertiesDocument = gql`
    query getIncidentProperties($where: IncidentPropertyWhereInput!, $first: Int!) {
  incidentProperties: allIncidentProperties(where: $where, first: $first) {
    id
    incident {
      id
    }
  }
}
    `;

/**
 * __useGetIncidentPropertiesQuery__
 *
 * To run a query within a React component, call `useGetIncidentPropertiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIncidentPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIncidentPropertiesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useGetIncidentPropertiesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetIncidentPropertiesQuery, Types.GetIncidentPropertiesQueryVariables> & ({ variables: Types.GetIncidentPropertiesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetIncidentPropertiesQuery, Types.GetIncidentPropertiesQueryVariables>(GetIncidentPropertiesDocument, options);
      }
export function useGetIncidentPropertiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetIncidentPropertiesQuery, Types.GetIncidentPropertiesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetIncidentPropertiesQuery, Types.GetIncidentPropertiesQueryVariables>(GetIncidentPropertiesDocument, options);
        }
export function useGetIncidentPropertiesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetIncidentPropertiesQuery, Types.GetIncidentPropertiesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetIncidentPropertiesQuery, Types.GetIncidentPropertiesQueryVariables>(GetIncidentPropertiesDocument, options);
        }
export type GetIncidentPropertiesQueryHookResult = ReturnType<typeof useGetIncidentPropertiesQuery>;
export type GetIncidentPropertiesLazyQueryHookResult = ReturnType<typeof useGetIncidentPropertiesLazyQuery>;
export type GetIncidentPropertiesSuspenseQueryHookResult = ReturnType<typeof useGetIncidentPropertiesSuspenseQuery>;
export type GetIncidentPropertiesQueryResult = Apollo.QueryResult<Types.GetIncidentPropertiesQuery, Types.GetIncidentPropertiesQueryVariables>;
export const GetIncidentPropertiesByIncidentIdDocument = gql`
    query getIncidentPropertiesByIncidentId($incidentId: ID!) {
  incidentProperties: allIncidentProperties(
    where: {incident: {id: $incidentId}}
    first: 100
  ) {
    id
    incident {
      id
    }
    property {
      id
      addressMeta {
        value
      }
      address
    }
    propertyAddress
    propertyAddressMeta {
      value
    }
  }
}
    `;

/**
 * __useGetIncidentPropertiesByIncidentIdQuery__
 *
 * To run a query within a React component, call `useGetIncidentPropertiesByIncidentIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIncidentPropertiesByIncidentIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIncidentPropertiesByIncidentIdQuery({
 *   variables: {
 *      incidentId: // value for 'incidentId'
 *   },
 * });
 */
export function useGetIncidentPropertiesByIncidentIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetIncidentPropertiesByIncidentIdQuery, Types.GetIncidentPropertiesByIncidentIdQueryVariables> & ({ variables: Types.GetIncidentPropertiesByIncidentIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetIncidentPropertiesByIncidentIdQuery, Types.GetIncidentPropertiesByIncidentIdQueryVariables>(GetIncidentPropertiesByIncidentIdDocument, options);
      }
export function useGetIncidentPropertiesByIncidentIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetIncidentPropertiesByIncidentIdQuery, Types.GetIncidentPropertiesByIncidentIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetIncidentPropertiesByIncidentIdQuery, Types.GetIncidentPropertiesByIncidentIdQueryVariables>(GetIncidentPropertiesByIncidentIdDocument, options);
        }
export function useGetIncidentPropertiesByIncidentIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetIncidentPropertiesByIncidentIdQuery, Types.GetIncidentPropertiesByIncidentIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetIncidentPropertiesByIncidentIdQuery, Types.GetIncidentPropertiesByIncidentIdQueryVariables>(GetIncidentPropertiesByIncidentIdDocument, options);
        }
export type GetIncidentPropertiesByIncidentIdQueryHookResult = ReturnType<typeof useGetIncidentPropertiesByIncidentIdQuery>;
export type GetIncidentPropertiesByIncidentIdLazyQueryHookResult = ReturnType<typeof useGetIncidentPropertiesByIncidentIdLazyQuery>;
export type GetIncidentPropertiesByIncidentIdSuspenseQueryHookResult = ReturnType<typeof useGetIncidentPropertiesByIncidentIdSuspenseQuery>;
export type GetIncidentPropertiesByIncidentIdQueryResult = Apollo.QueryResult<Types.GetIncidentPropertiesByIncidentIdQuery, Types.GetIncidentPropertiesByIncidentIdQueryVariables>;
export const GetFullIncidentPropertiesByIncidentIdDocument = gql`
    query getFullIncidentPropertiesByIncidentId($incidentId: ID!) {
  incidentProperties: allIncidentProperties(
    where: {incident: {id: $incidentId}}
    first: 100
  ) {
    id
    incident {
      id
    }
    property {
      id
      addressMeta {
        value
        unrestricted_value
        ...AddressMetaForTableAddress
      }
      address
    }
  }
}
    ${AddressMetaForTableAddressFragmentDoc}`;

/**
 * __useGetFullIncidentPropertiesByIncidentIdQuery__
 *
 * To run a query within a React component, call `useGetFullIncidentPropertiesByIncidentIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFullIncidentPropertiesByIncidentIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFullIncidentPropertiesByIncidentIdQuery({
 *   variables: {
 *      incidentId: // value for 'incidentId'
 *   },
 * });
 */
export function useGetFullIncidentPropertiesByIncidentIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetFullIncidentPropertiesByIncidentIdQuery, Types.GetFullIncidentPropertiesByIncidentIdQueryVariables> & ({ variables: Types.GetFullIncidentPropertiesByIncidentIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetFullIncidentPropertiesByIncidentIdQuery, Types.GetFullIncidentPropertiesByIncidentIdQueryVariables>(GetFullIncidentPropertiesByIncidentIdDocument, options);
      }
export function useGetFullIncidentPropertiesByIncidentIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetFullIncidentPropertiesByIncidentIdQuery, Types.GetFullIncidentPropertiesByIncidentIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetFullIncidentPropertiesByIncidentIdQuery, Types.GetFullIncidentPropertiesByIncidentIdQueryVariables>(GetFullIncidentPropertiesByIncidentIdDocument, options);
        }
export function useGetFullIncidentPropertiesByIncidentIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetFullIncidentPropertiesByIncidentIdQuery, Types.GetFullIncidentPropertiesByIncidentIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetFullIncidentPropertiesByIncidentIdQuery, Types.GetFullIncidentPropertiesByIncidentIdQueryVariables>(GetFullIncidentPropertiesByIncidentIdDocument, options);
        }
export type GetFullIncidentPropertiesByIncidentIdQueryHookResult = ReturnType<typeof useGetFullIncidentPropertiesByIncidentIdQuery>;
export type GetFullIncidentPropertiesByIncidentIdLazyQueryHookResult = ReturnType<typeof useGetFullIncidentPropertiesByIncidentIdLazyQuery>;
export type GetFullIncidentPropertiesByIncidentIdSuspenseQueryHookResult = ReturnType<typeof useGetFullIncidentPropertiesByIncidentIdSuspenseQuery>;
export type GetFullIncidentPropertiesByIncidentIdQueryResult = Apollo.QueryResult<Types.GetFullIncidentPropertiesByIncidentIdQuery, Types.GetFullIncidentPropertiesByIncidentIdQueryVariables>;
export const CreateIncidentPropertyDocument = gql`
    mutation createIncidentProperty($data: IncidentPropertyCreateInput!) {
  incidentProperty: createIncidentProperty(data: $data) {
    id
  }
}
    `;
export type CreateIncidentPropertyMutationFn = Apollo.MutationFunction<Types.CreateIncidentPropertyMutation, Types.CreateIncidentPropertyMutationVariables>;

/**
 * __useCreateIncidentPropertyMutation__
 *
 * To run a mutation, you first call `useCreateIncidentPropertyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateIncidentPropertyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createIncidentPropertyMutation, { data, loading, error }] = useCreateIncidentPropertyMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateIncidentPropertyMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateIncidentPropertyMutation, Types.CreateIncidentPropertyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateIncidentPropertyMutation, Types.CreateIncidentPropertyMutationVariables>(CreateIncidentPropertyDocument, options);
      }
export type CreateIncidentPropertyMutationHookResult = ReturnType<typeof useCreateIncidentPropertyMutation>;
export type CreateIncidentPropertyMutationResult = Apollo.MutationResult<Types.CreateIncidentPropertyMutation>;
export type CreateIncidentPropertyMutationOptions = Apollo.BaseMutationOptions<Types.CreateIncidentPropertyMutation, Types.CreateIncidentPropertyMutationVariables>;
export const UpdateIncidentPropertyDocument = gql`
    mutation updateIncidentProperty($id: ID!, $data: IncidentPropertyUpdateInput!) {
  incidentProperty: updateIncidentProperty(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateIncidentPropertyMutationFn = Apollo.MutationFunction<Types.UpdateIncidentPropertyMutation, Types.UpdateIncidentPropertyMutationVariables>;

/**
 * __useUpdateIncidentPropertyMutation__
 *
 * To run a mutation, you first call `useUpdateIncidentPropertyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateIncidentPropertyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateIncidentPropertyMutation, { data, loading, error }] = useUpdateIncidentPropertyMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateIncidentPropertyMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateIncidentPropertyMutation, Types.UpdateIncidentPropertyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateIncidentPropertyMutation, Types.UpdateIncidentPropertyMutationVariables>(UpdateIncidentPropertyDocument, options);
      }
export type UpdateIncidentPropertyMutationHookResult = ReturnType<typeof useUpdateIncidentPropertyMutation>;
export type UpdateIncidentPropertyMutationResult = Apollo.MutationResult<Types.UpdateIncidentPropertyMutation>;
export type UpdateIncidentPropertyMutationOptions = Apollo.BaseMutationOptions<Types.UpdateIncidentPropertyMutation, Types.UpdateIncidentPropertyMutationVariables>;
export const PredictTicketClassificationDocument = gql`
    query predictTicketClassification($details: String!) {
  ticketClassification: predictTicketClassification(data: {details: $details}) {
    id
    place {
      id
      name
    }
    category {
      id
      name
    }
  }
}
    `;

/**
 * __usePredictTicketClassificationQuery__
 *
 * To run a query within a React component, call `usePredictTicketClassificationQuery` and pass it any options that fit your needs.
 * When your component renders, `usePredictTicketClassificationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePredictTicketClassificationQuery({
 *   variables: {
 *      details: // value for 'details'
 *   },
 * });
 */
export function usePredictTicketClassificationQuery(baseOptions: Apollo.QueryHookOptions<Types.PredictTicketClassificationQuery, Types.PredictTicketClassificationQueryVariables> & ({ variables: Types.PredictTicketClassificationQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.PredictTicketClassificationQuery, Types.PredictTicketClassificationQueryVariables>(PredictTicketClassificationDocument, options);
      }
export function usePredictTicketClassificationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.PredictTicketClassificationQuery, Types.PredictTicketClassificationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.PredictTicketClassificationQuery, Types.PredictTicketClassificationQueryVariables>(PredictTicketClassificationDocument, options);
        }
export function usePredictTicketClassificationSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.PredictTicketClassificationQuery, Types.PredictTicketClassificationQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.PredictTicketClassificationQuery, Types.PredictTicketClassificationQueryVariables>(PredictTicketClassificationDocument, options);
        }
export type PredictTicketClassificationQueryHookResult = ReturnType<typeof usePredictTicketClassificationQuery>;
export type PredictTicketClassificationLazyQueryHookResult = ReturnType<typeof usePredictTicketClassificationLazyQuery>;
export type PredictTicketClassificationSuspenseQueryHookResult = ReturnType<typeof usePredictTicketClassificationSuspenseQuery>;
export type PredictTicketClassificationQueryResult = Apollo.QueryResult<Types.PredictTicketClassificationQuery, Types.PredictTicketClassificationQueryVariables>;
export const ShareTicketDocument = gql`
    mutation shareTicket($data: ShareTicketInput!) {
  ticket: shareTicket(data: $data) {
    status
  }
}
    `;
export type ShareTicketMutationFn = Apollo.MutationFunction<Types.ShareTicketMutation, Types.ShareTicketMutationVariables>;

/**
 * __useShareTicketMutation__
 *
 * To run a mutation, you first call `useShareTicketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useShareTicketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [shareTicketMutation, { data, loading, error }] = useShareTicketMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useShareTicketMutation(baseOptions?: Apollo.MutationHookOptions<Types.ShareTicketMutation, Types.ShareTicketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.ShareTicketMutation, Types.ShareTicketMutationVariables>(ShareTicketDocument, options);
      }
export type ShareTicketMutationHookResult = ReturnType<typeof useShareTicketMutation>;
export type ShareTicketMutationResult = Apollo.MutationResult<Types.ShareTicketMutation>;
export type ShareTicketMutationOptions = Apollo.BaseMutationOptions<Types.ShareTicketMutation, Types.ShareTicketMutationVariables>;
export const GetTicketsDocument = gql`
    query getTickets($where: TicketWhereInput!, $sortBy: [SortTicketsBy!], $first: Int!, $skip: Int) {
  tickets: allTickets(where: $where, sortBy: $sortBy, first: $first, skip: $skip) {
    id
    number
    createdAt
    isEmergency
    isPayable
    isWarranty
    statusReopenedCounter
    statusUpdatedAt
    completedAt
    deadline
    lastResidentCommentAt
    lastCommentWithResidentTypeAt
    lastCommentWithOrganizationTypeAt
    lastCommentWithResidentTypeCreatedByUserType
    propertyAddressMeta {
      ...AddressMetaForTableAddress
    }
    propertyAddress
    sectionType
    sectionName
    floorName
    unitType
    unitName
    details
    clientName
    clientPhone
    classifier {
      id
      category {
        id
        name
      }
      place {
        id
        name
      }
    }
    contact {
      id
      name
    }
    executor {
      id
      name
    }
    assignee {
      id
      name
    }
    organization {
      id
      name
      phoneNumberPrefix
    }
    property {
      id
      deletedAt
      address
      addressMeta {
        ...AddressMetaForTableAddress
      }
    }
    status {
      id
      type
      name
      colors {
        primary
        secondary
      }
    }
    createdBy {
      id
      name
    }
    source {
      id
      name
    }
  }
  meta: _allTicketsMeta(where: $where) {
    count
  }
}
    ${AddressMetaForTableAddressFragmentDoc}`;

/**
 * __useGetTicketsQuery__
 *
 * To run a query within a React component, call `useGetTicketsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      sortBy: // value for 'sortBy'
 *      first: // value for 'first'
 *      skip: // value for 'skip'
 *   },
 * });
 */
export function useGetTicketsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketsQuery, Types.GetTicketsQueryVariables> & ({ variables: Types.GetTicketsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketsQuery, Types.GetTicketsQueryVariables>(GetTicketsDocument, options);
      }
export function useGetTicketsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketsQuery, Types.GetTicketsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketsQuery, Types.GetTicketsQueryVariables>(GetTicketsDocument, options);
        }
export function useGetTicketsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketsQuery, Types.GetTicketsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketsQuery, Types.GetTicketsQueryVariables>(GetTicketsDocument, options);
        }
export type GetTicketsQueryHookResult = ReturnType<typeof useGetTicketsQuery>;
export type GetTicketsLazyQueryHookResult = ReturnType<typeof useGetTicketsLazyQuery>;
export type GetTicketsSuspenseQueryHookResult = ReturnType<typeof useGetTicketsSuspenseQuery>;
export type GetTicketsQueryResult = Apollo.QueryResult<Types.GetTicketsQuery, Types.GetTicketsQueryVariables>;
export const GetTicketsForClientCardDocument = gql`
    query getTicketsForClientCard($where: TicketWhereInput!, $sortBy: [SortTicketsBy!], $first: Int!, $skip: Int) {
  tickets: allTickets(where: $where, sortBy: $sortBy, first: $first, skip: $skip) {
    id
    number
    createdAt
    lastCommentAt
    propertyAddressMeta {
      ...AddressMetaForTableAddress
    }
    propertyAddress
    sectionType
    isEmergency
    isWarranty
    isPayable
    statusReopenedCounter
    sectionName
    floorName
    unitType
    unitName
    details
    clientName
    clientPhone
    clientEmail
    classifier {
      id
      category {
        id
        name
      }
      place {
        id
        name
      }
    }
    contact {
      id
      name
    }
    organization {
      id
      name
      phoneNumberPrefix
    }
    property {
      id
      deletedAt
      address
      addressMeta {
        ...AddressMetaForTableAddress
      }
      map {
        sections {
          ...SectionOrParkingInfo
        }
        parking {
          ...SectionOrParkingInfo
        }
      }
    }
    status {
      id
      type
      name
      colors {
        primary
        secondary
      }
    }
  }
}
    ${AddressMetaForTableAddressFragmentDoc}
${SectionOrParkingInfoFragmentDoc}`;

/**
 * __useGetTicketsForClientCardQuery__
 *
 * To run a query within a React component, call `useGetTicketsForClientCardQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketsForClientCardQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketsForClientCardQuery({
 *   variables: {
 *      where: // value for 'where'
 *      sortBy: // value for 'sortBy'
 *      first: // value for 'first'
 *      skip: // value for 'skip'
 *   },
 * });
 */
export function useGetTicketsForClientCardQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketsForClientCardQuery, Types.GetTicketsForClientCardQueryVariables> & ({ variables: Types.GetTicketsForClientCardQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketsForClientCardQuery, Types.GetTicketsForClientCardQueryVariables>(GetTicketsForClientCardDocument, options);
      }
export function useGetTicketsForClientCardLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketsForClientCardQuery, Types.GetTicketsForClientCardQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketsForClientCardQuery, Types.GetTicketsForClientCardQueryVariables>(GetTicketsForClientCardDocument, options);
        }
export function useGetTicketsForClientCardSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketsForClientCardQuery, Types.GetTicketsForClientCardQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketsForClientCardQuery, Types.GetTicketsForClientCardQueryVariables>(GetTicketsForClientCardDocument, options);
        }
export type GetTicketsForClientCardQueryHookResult = ReturnType<typeof useGetTicketsForClientCardQuery>;
export type GetTicketsForClientCardLazyQueryHookResult = ReturnType<typeof useGetTicketsForClientCardLazyQuery>;
export type GetTicketsForClientCardSuspenseQueryHookResult = ReturnType<typeof useGetTicketsForClientCardSuspenseQuery>;
export type GetTicketsForClientCardQueryResult = Apollo.QueryResult<Types.GetTicketsForClientCardQuery, Types.GetTicketsForClientCardQueryVariables>;
export const CheckTicketExistenceDocument = gql`
    query checkTicketExistence($where: TicketWhereInput!) {
  tickets: allTickets(where: $where, first: 1) {
    id
  }
}
    `;

/**
 * __useCheckTicketExistenceQuery__
 *
 * To run a query within a React component, call `useCheckTicketExistenceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckTicketExistenceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckTicketExistenceQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useCheckTicketExistenceQuery(baseOptions: Apollo.QueryHookOptions<Types.CheckTicketExistenceQuery, Types.CheckTicketExistenceQueryVariables> & ({ variables: Types.CheckTicketExistenceQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.CheckTicketExistenceQuery, Types.CheckTicketExistenceQueryVariables>(CheckTicketExistenceDocument, options);
      }
export function useCheckTicketExistenceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.CheckTicketExistenceQuery, Types.CheckTicketExistenceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.CheckTicketExistenceQuery, Types.CheckTicketExistenceQueryVariables>(CheckTicketExistenceDocument, options);
        }
export function useCheckTicketExistenceSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.CheckTicketExistenceQuery, Types.CheckTicketExistenceQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.CheckTicketExistenceQuery, Types.CheckTicketExistenceQueryVariables>(CheckTicketExistenceDocument, options);
        }
export type CheckTicketExistenceQueryHookResult = ReturnType<typeof useCheckTicketExistenceQuery>;
export type CheckTicketExistenceLazyQueryHookResult = ReturnType<typeof useCheckTicketExistenceLazyQuery>;
export type CheckTicketExistenceSuspenseQueryHookResult = ReturnType<typeof useCheckTicketExistenceSuspenseQuery>;
export type CheckTicketExistenceQueryResult = Apollo.QueryResult<Types.CheckTicketExistenceQuery, Types.CheckTicketExistenceQueryVariables>;
export const GetTicketsCountDocument = gql`
    query getTicketsCount($where: TicketWhereInput!) {
  meta: _allTicketsMeta(where: $where) {
    count
  }
}
    `;

/**
 * __useGetTicketsCountQuery__
 *
 * To run a query within a React component, call `useGetTicketsCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketsCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketsCountQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetTicketsCountQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketsCountQuery, Types.GetTicketsCountQueryVariables> & ({ variables: Types.GetTicketsCountQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketsCountQuery, Types.GetTicketsCountQueryVariables>(GetTicketsCountDocument, options);
      }
export function useGetTicketsCountLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketsCountQuery, Types.GetTicketsCountQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketsCountQuery, Types.GetTicketsCountQueryVariables>(GetTicketsCountDocument, options);
        }
export function useGetTicketsCountSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketsCountQuery, Types.GetTicketsCountQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketsCountQuery, Types.GetTicketsCountQueryVariables>(GetTicketsCountDocument, options);
        }
export type GetTicketsCountQueryHookResult = ReturnType<typeof useGetTicketsCountQuery>;
export type GetTicketsCountLazyQueryHookResult = ReturnType<typeof useGetTicketsCountLazyQuery>;
export type GetTicketsCountSuspenseQueryHookResult = ReturnType<typeof useGetTicketsCountSuspenseQuery>;
export type GetTicketsCountQueryResult = Apollo.QueryResult<Types.GetTicketsCountQuery, Types.GetTicketsCountQueryVariables>;
export const GetOrganizationEmployeeTicketsCountForReassignmentDocument = gql`
    query getOrganizationEmployeeTicketsCountForReassignment($userId: ID!, $organizationId: ID!) {
  meta: _allTicketsMeta(
    where: {organization: {id: $organizationId}, OR: {assignee: {id: $userId}, executor: {id: $userId}}, status: {type_in: [new_or_reopened, processing, deferred]}}
  ) {
    count
  }
}
    `;

/**
 * __useGetOrganizationEmployeeTicketsCountForReassignmentQuery__
 *
 * To run a query within a React component, call `useGetOrganizationEmployeeTicketsCountForReassignmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationEmployeeTicketsCountForReassignmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationEmployeeTicketsCountForReassignmentQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      organizationId: // value for 'organizationId'
 *   },
 * });
 */
export function useGetOrganizationEmployeeTicketsCountForReassignmentQuery(baseOptions: Apollo.QueryHookOptions<Types.GetOrganizationEmployeeTicketsCountForReassignmentQuery, Types.GetOrganizationEmployeeTicketsCountForReassignmentQueryVariables> & ({ variables: Types.GetOrganizationEmployeeTicketsCountForReassignmentQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetOrganizationEmployeeTicketsCountForReassignmentQuery, Types.GetOrganizationEmployeeTicketsCountForReassignmentQueryVariables>(GetOrganizationEmployeeTicketsCountForReassignmentDocument, options);
      }
export function useGetOrganizationEmployeeTicketsCountForReassignmentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetOrganizationEmployeeTicketsCountForReassignmentQuery, Types.GetOrganizationEmployeeTicketsCountForReassignmentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetOrganizationEmployeeTicketsCountForReassignmentQuery, Types.GetOrganizationEmployeeTicketsCountForReassignmentQueryVariables>(GetOrganizationEmployeeTicketsCountForReassignmentDocument, options);
        }
export function useGetOrganizationEmployeeTicketsCountForReassignmentSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetOrganizationEmployeeTicketsCountForReassignmentQuery, Types.GetOrganizationEmployeeTicketsCountForReassignmentQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetOrganizationEmployeeTicketsCountForReassignmentQuery, Types.GetOrganizationEmployeeTicketsCountForReassignmentQueryVariables>(GetOrganizationEmployeeTicketsCountForReassignmentDocument, options);
        }
export type GetOrganizationEmployeeTicketsCountForReassignmentQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeTicketsCountForReassignmentQuery>;
export type GetOrganizationEmployeeTicketsCountForReassignmentLazyQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeTicketsCountForReassignmentLazyQuery>;
export type GetOrganizationEmployeeTicketsCountForReassignmentSuspenseQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeTicketsCountForReassignmentSuspenseQuery>;
export type GetOrganizationEmployeeTicketsCountForReassignmentQueryResult = Apollo.QueryResult<Types.GetOrganizationEmployeeTicketsCountForReassignmentQuery, Types.GetOrganizationEmployeeTicketsCountForReassignmentQueryVariables>;
export const GetTicketsCountersByStatusDocument = gql`
    query getTicketsCountersByStatus($whereWithoutStatuses: TicketWhereInput!) {
  new_or_reopened: _allTicketsMeta(
    where: {AND: [$whereWithoutStatuses, {status: {type: new_or_reopened}}]}
  ) {
    count
  }
  processing: _allTicketsMeta(
    where: {AND: [$whereWithoutStatuses, {status: {type: processing}}]}
  ) {
    count
  }
  deferred: _allTicketsMeta(
    where: {AND: [$whereWithoutStatuses, {status: {type: deferred}}]}
  ) {
    count
  }
  canceled: _allTicketsMeta(
    where: {AND: [$whereWithoutStatuses, {status: {type: canceled}}]}
  ) {
    count
  }
  completed: _allTicketsMeta(
    where: {AND: [$whereWithoutStatuses, {status: {type: completed}}]}
  ) {
    count
  }
  closed: _allTicketsMeta(
    where: {AND: [$whereWithoutStatuses, {status: {type: closed}}]}
  ) {
    count
  }
}
    `;

/**
 * __useGetTicketsCountersByStatusQuery__
 *
 * To run a query within a React component, call `useGetTicketsCountersByStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketsCountersByStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketsCountersByStatusQuery({
 *   variables: {
 *      whereWithoutStatuses: // value for 'whereWithoutStatuses'
 *   },
 * });
 */
export function useGetTicketsCountersByStatusQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketsCountersByStatusQuery, Types.GetTicketsCountersByStatusQueryVariables> & ({ variables: Types.GetTicketsCountersByStatusQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketsCountersByStatusQuery, Types.GetTicketsCountersByStatusQueryVariables>(GetTicketsCountersByStatusDocument, options);
      }
export function useGetTicketsCountersByStatusLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketsCountersByStatusQuery, Types.GetTicketsCountersByStatusQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketsCountersByStatusQuery, Types.GetTicketsCountersByStatusQueryVariables>(GetTicketsCountersByStatusDocument, options);
        }
export function useGetTicketsCountersByStatusSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketsCountersByStatusQuery, Types.GetTicketsCountersByStatusQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketsCountersByStatusQuery, Types.GetTicketsCountersByStatusQueryVariables>(GetTicketsCountersByStatusDocument, options);
        }
export type GetTicketsCountersByStatusQueryHookResult = ReturnType<typeof useGetTicketsCountersByStatusQuery>;
export type GetTicketsCountersByStatusLazyQueryHookResult = ReturnType<typeof useGetTicketsCountersByStatusLazyQuery>;
export type GetTicketsCountersByStatusSuspenseQueryHookResult = ReturnType<typeof useGetTicketsCountersByStatusSuspenseQuery>;
export type GetTicketsCountersByStatusQueryResult = Apollo.QueryResult<Types.GetTicketsCountersByStatusQuery, Types.GetTicketsCountersByStatusQueryVariables>;
export const GetTicketByIdDocument = gql`
    query getTicketById($id: ID!) {
  tickets: allTickets(where: {id: $id}, first: 1) {
    id
    number
    propertyAddress
    propertyAddressMeta {
      ...AddressMetaForTableAddress
    }
    createdAt
    isEmergency
    isPayable
    isWarranty
    statusReopenedCounter
    statusUpdatedAt
    canReadByResident
    qualityControlValue
    qualityControlAdditionalOptions
    qualityControlComment
    feedbackValue
    feedbackAdditionalOptions
    feedbackComment
    deadline
    deferredUntil
    completedAt
    unitType
    unitName
    sectionName
    sectionType
    floorName
    isResidentTicket
    clientName
    clientPhone
    details
    isPayable
    organization {
      id
      type
      name
      statusTransitions
      country
    }
    assignee {
      id
    }
    executor {
      id
    }
    property {
      id
      deletedAt
      address
      addressMeta {
        ...AddressMetaForTableAddress
      }
    }
    classifier {
      id
      place {
        id
        name
      }
      category {
        id
        name
      }
      problem {
        id
        name
      }
    }
    createdBy {
      id
      name
      type
    }
    source {
      id
      name
    }
    status {
      id
      type
      name
      colors {
        primary
        secondary
      }
    }
    client {
      id
    }
    contact {
      id
      name
      phone
    }
  }
}
    ${AddressMetaForTableAddressFragmentDoc}`;

/**
 * __useGetTicketByIdQuery__
 *
 * To run a query within a React component, call `useGetTicketByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetTicketByIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketByIdQuery, Types.GetTicketByIdQueryVariables> & ({ variables: Types.GetTicketByIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketByIdQuery, Types.GetTicketByIdQueryVariables>(GetTicketByIdDocument, options);
      }
export function useGetTicketByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketByIdQuery, Types.GetTicketByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketByIdQuery, Types.GetTicketByIdQueryVariables>(GetTicketByIdDocument, options);
        }
export function useGetTicketByIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketByIdQuery, Types.GetTicketByIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketByIdQuery, Types.GetTicketByIdQueryVariables>(GetTicketByIdDocument, options);
        }
export type GetTicketByIdQueryHookResult = ReturnType<typeof useGetTicketByIdQuery>;
export type GetTicketByIdLazyQueryHookResult = ReturnType<typeof useGetTicketByIdLazyQuery>;
export type GetTicketByIdSuspenseQueryHookResult = ReturnType<typeof useGetTicketByIdSuspenseQuery>;
export type GetTicketByIdQueryResult = Apollo.QueryResult<Types.GetTicketByIdQuery, Types.GetTicketByIdQueryVariables>;
export const GetTicketByCreatedByDocument = gql`
    query getTicketByCreatedBy($userId: ID!) {
  tickets: allTickets(where: {createdBy: {id: $userId}}, first: 1) {
    id
  }
}
    `;

/**
 * __useGetTicketByCreatedByQuery__
 *
 * To run a query within a React component, call `useGetTicketByCreatedByQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketByCreatedByQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketByCreatedByQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetTicketByCreatedByQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketByCreatedByQuery, Types.GetTicketByCreatedByQueryVariables> & ({ variables: Types.GetTicketByCreatedByQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketByCreatedByQuery, Types.GetTicketByCreatedByQueryVariables>(GetTicketByCreatedByDocument, options);
      }
export function useGetTicketByCreatedByLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketByCreatedByQuery, Types.GetTicketByCreatedByQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketByCreatedByQuery, Types.GetTicketByCreatedByQueryVariables>(GetTicketByCreatedByDocument, options);
        }
export function useGetTicketByCreatedBySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketByCreatedByQuery, Types.GetTicketByCreatedByQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketByCreatedByQuery, Types.GetTicketByCreatedByQueryVariables>(GetTicketByCreatedByDocument, options);
        }
export type GetTicketByCreatedByQueryHookResult = ReturnType<typeof useGetTicketByCreatedByQuery>;
export type GetTicketByCreatedByLazyQueryHookResult = ReturnType<typeof useGetTicketByCreatedByLazyQuery>;
export type GetTicketByCreatedBySuspenseQueryHookResult = ReturnType<typeof useGetTicketByCreatedBySuspenseQuery>;
export type GetTicketByCreatedByQueryResult = Apollo.QueryResult<Types.GetTicketByCreatedByQuery, Types.GetTicketByCreatedByQueryVariables>;
export const GetTicketLastCommentsTimeDocument = gql`
    query getTicketLastCommentsTime($id: ID!) {
  ticketCommentTimes: allTickets(where: {id: $id}, first: 1) {
    id
    lastResidentCommentAt
    lastCommentWithResidentTypeAt
  }
}
    `;

/**
 * __useGetTicketLastCommentsTimeQuery__
 *
 * To run a query within a React component, call `useGetTicketLastCommentsTimeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketLastCommentsTimeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketLastCommentsTimeQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetTicketLastCommentsTimeQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketLastCommentsTimeQuery, Types.GetTicketLastCommentsTimeQueryVariables> & ({ variables: Types.GetTicketLastCommentsTimeQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketLastCommentsTimeQuery, Types.GetTicketLastCommentsTimeQueryVariables>(GetTicketLastCommentsTimeDocument, options);
      }
export function useGetTicketLastCommentsTimeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketLastCommentsTimeQuery, Types.GetTicketLastCommentsTimeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketLastCommentsTimeQuery, Types.GetTicketLastCommentsTimeQueryVariables>(GetTicketLastCommentsTimeDocument, options);
        }
export function useGetTicketLastCommentsTimeSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketLastCommentsTimeQuery, Types.GetTicketLastCommentsTimeQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketLastCommentsTimeQuery, Types.GetTicketLastCommentsTimeQueryVariables>(GetTicketLastCommentsTimeDocument, options);
        }
export type GetTicketLastCommentsTimeQueryHookResult = ReturnType<typeof useGetTicketLastCommentsTimeQuery>;
export type GetTicketLastCommentsTimeLazyQueryHookResult = ReturnType<typeof useGetTicketLastCommentsTimeLazyQuery>;
export type GetTicketLastCommentsTimeSuspenseQueryHookResult = ReturnType<typeof useGetTicketLastCommentsTimeSuspenseQuery>;
export type GetTicketLastCommentsTimeQueryResult = Apollo.QueryResult<Types.GetTicketLastCommentsTimeQuery, Types.GetTicketLastCommentsTimeQueryVariables>;
export const GetTicketsByContactDocument = gql`
    query getTicketsByContact($contactId: ID!) {
  tickets: allTickets(
    where: {contact: {id: $contactId}}
    sortBy: [createdAt_DESC]
    first: 100
  ) {
    id
    details
    createdAt
    number
    status {
      id
      name
    }
    property {
      id
      address
    }
  }
}
    `;

/**
 * __useGetTicketsByContactQuery__
 *
 * To run a query within a React component, call `useGetTicketsByContactQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketsByContactQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketsByContactQuery({
 *   variables: {
 *      contactId: // value for 'contactId'
 *   },
 * });
 */
export function useGetTicketsByContactQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketsByContactQuery, Types.GetTicketsByContactQueryVariables> & ({ variables: Types.GetTicketsByContactQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketsByContactQuery, Types.GetTicketsByContactQueryVariables>(GetTicketsByContactDocument, options);
      }
export function useGetTicketsByContactLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketsByContactQuery, Types.GetTicketsByContactQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketsByContactQuery, Types.GetTicketsByContactQueryVariables>(GetTicketsByContactDocument, options);
        }
export function useGetTicketsByContactSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketsByContactQuery, Types.GetTicketsByContactQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketsByContactQuery, Types.GetTicketsByContactQueryVariables>(GetTicketsByContactDocument, options);
        }
export type GetTicketsByContactQueryHookResult = ReturnType<typeof useGetTicketsByContactQuery>;
export type GetTicketsByContactLazyQueryHookResult = ReturnType<typeof useGetTicketsByContactLazyQuery>;
export type GetTicketsByContactSuspenseQueryHookResult = ReturnType<typeof useGetTicketsByContactSuspenseQuery>;
export type GetTicketsByContactQueryResult = Apollo.QueryResult<Types.GetTicketsByContactQuery, Types.GetTicketsByContactQueryVariables>;
export const GetOrganizationEmployeeTicketsForReassignmentDocument = gql`
    query getOrganizationEmployeeTicketsForReassignment($userId: ID!, $organizationId: ID!, $first: Int!) {
  tickets: allTickets(
    where: {organization: {id: $organizationId}, OR: {assignee: {id: $userId}, executor: {id: $userId}}, status: {type_in: [new_or_reopened, processing, deferred]}}
    first: $first
    sortBy: [createdAt_DESC]
  ) {
    id
    assignee {
      id
    }
    executor {
      id
    }
  }
}
    `;

/**
 * __useGetOrganizationEmployeeTicketsForReassignmentQuery__
 *
 * To run a query within a React component, call `useGetOrganizationEmployeeTicketsForReassignmentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganizationEmployeeTicketsForReassignmentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganizationEmployeeTicketsForReassignmentQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      organizationId: // value for 'organizationId'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useGetOrganizationEmployeeTicketsForReassignmentQuery(baseOptions: Apollo.QueryHookOptions<Types.GetOrganizationEmployeeTicketsForReassignmentQuery, Types.GetOrganizationEmployeeTicketsForReassignmentQueryVariables> & ({ variables: Types.GetOrganizationEmployeeTicketsForReassignmentQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetOrganizationEmployeeTicketsForReassignmentQuery, Types.GetOrganizationEmployeeTicketsForReassignmentQueryVariables>(GetOrganizationEmployeeTicketsForReassignmentDocument, options);
      }
export function useGetOrganizationEmployeeTicketsForReassignmentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetOrganizationEmployeeTicketsForReassignmentQuery, Types.GetOrganizationEmployeeTicketsForReassignmentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetOrganizationEmployeeTicketsForReassignmentQuery, Types.GetOrganizationEmployeeTicketsForReassignmentQueryVariables>(GetOrganizationEmployeeTicketsForReassignmentDocument, options);
        }
export function useGetOrganizationEmployeeTicketsForReassignmentSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetOrganizationEmployeeTicketsForReassignmentQuery, Types.GetOrganizationEmployeeTicketsForReassignmentQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetOrganizationEmployeeTicketsForReassignmentQuery, Types.GetOrganizationEmployeeTicketsForReassignmentQueryVariables>(GetOrganizationEmployeeTicketsForReassignmentDocument, options);
        }
export type GetOrganizationEmployeeTicketsForReassignmentQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeTicketsForReassignmentQuery>;
export type GetOrganizationEmployeeTicketsForReassignmentLazyQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeTicketsForReassignmentLazyQuery>;
export type GetOrganizationEmployeeTicketsForReassignmentSuspenseQueryHookResult = ReturnType<typeof useGetOrganizationEmployeeTicketsForReassignmentSuspenseQuery>;
export type GetOrganizationEmployeeTicketsForReassignmentQueryResult = Apollo.QueryResult<Types.GetOrganizationEmployeeTicketsForReassignmentQuery, Types.GetOrganizationEmployeeTicketsForReassignmentQueryVariables>;
export const CreateTicketDocument = gql`
    mutation createTicket($data: TicketCreateInput!) {
  ticket: createTicket(data: $data) {
    id
    number
    clientPhone
    property {
      id
    }
    contact {
      id
    }
    unitName
    unitType
  }
}
    `;
export type CreateTicketMutationFn = Apollo.MutationFunction<Types.CreateTicketMutation, Types.CreateTicketMutationVariables>;

/**
 * __useCreateTicketMutation__
 *
 * To run a mutation, you first call `useCreateTicketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTicketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTicketMutation, { data, loading, error }] = useCreateTicketMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateTicketMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateTicketMutation, Types.CreateTicketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateTicketMutation, Types.CreateTicketMutationVariables>(CreateTicketDocument, options);
      }
export type CreateTicketMutationHookResult = ReturnType<typeof useCreateTicketMutation>;
export type CreateTicketMutationResult = Apollo.MutationResult<Types.CreateTicketMutation>;
export type CreateTicketMutationOptions = Apollo.BaseMutationOptions<Types.CreateTicketMutation, Types.CreateTicketMutationVariables>;
export const UpdateTicketDocument = gql`
    mutation updateTicket($id: ID!, $data: TicketUpdateInput!) {
  ticket: updateTicket(id: $id, data: $data) {
    id
    clientPhone
    unitName
    unitType
  }
}
    `;
export type UpdateTicketMutationFn = Apollo.MutationFunction<Types.UpdateTicketMutation, Types.UpdateTicketMutationVariables>;

/**
 * __useUpdateTicketMutation__
 *
 * To run a mutation, you first call `useUpdateTicketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTicketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTicketMutation, { data, loading, error }] = useUpdateTicketMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTicketMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateTicketMutation, Types.UpdateTicketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateTicketMutation, Types.UpdateTicketMutationVariables>(UpdateTicketDocument, options);
      }
export type UpdateTicketMutationHookResult = ReturnType<typeof useUpdateTicketMutation>;
export type UpdateTicketMutationResult = Apollo.MutationResult<Types.UpdateTicketMutation>;
export type UpdateTicketMutationOptions = Apollo.BaseMutationOptions<Types.UpdateTicketMutation, Types.UpdateTicketMutationVariables>;
export const UpdateOrganizationEmployeeTicketsForReassignmentDocument = gql`
    mutation updateOrganizationEmployeeTicketsForReassignment($data: [TicketsUpdateInput]) {
  tickets: updateTickets(data: $data) {
    id
  }
}
    `;
export type UpdateOrganizationEmployeeTicketsForReassignmentMutationFn = Apollo.MutationFunction<Types.UpdateOrganizationEmployeeTicketsForReassignmentMutation, Types.UpdateOrganizationEmployeeTicketsForReassignmentMutationVariables>;

/**
 * __useUpdateOrganizationEmployeeTicketsForReassignmentMutation__
 *
 * To run a mutation, you first call `useUpdateOrganizationEmployeeTicketsForReassignmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateOrganizationEmployeeTicketsForReassignmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateOrganizationEmployeeTicketsForReassignmentMutation, { data, loading, error }] = useUpdateOrganizationEmployeeTicketsForReassignmentMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateOrganizationEmployeeTicketsForReassignmentMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateOrganizationEmployeeTicketsForReassignmentMutation, Types.UpdateOrganizationEmployeeTicketsForReassignmentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateOrganizationEmployeeTicketsForReassignmentMutation, Types.UpdateOrganizationEmployeeTicketsForReassignmentMutationVariables>(UpdateOrganizationEmployeeTicketsForReassignmentDocument, options);
      }
export type UpdateOrganizationEmployeeTicketsForReassignmentMutationHookResult = ReturnType<typeof useUpdateOrganizationEmployeeTicketsForReassignmentMutation>;
export type UpdateOrganizationEmployeeTicketsForReassignmentMutationResult = Apollo.MutationResult<Types.UpdateOrganizationEmployeeTicketsForReassignmentMutation>;
export type UpdateOrganizationEmployeeTicketsForReassignmentMutationOptions = Apollo.BaseMutationOptions<Types.UpdateOrganizationEmployeeTicketsForReassignmentMutation, Types.UpdateOrganizationEmployeeTicketsForReassignmentMutationVariables>;
export const GetTicketChangesDocument = gql`
    query getTicketChanges($ticketId: ID!) {
  ticketChanges: allTicketChanges(
    where: {ticket: {id: $ticketId}}
    sortBy: [actualCreationDate_DESC]
    first: 100
  ) {
    id
    actualCreationDate
    createdAt
    createdBy {
      id
      name
    }
    changedByRole
    canReadByResidentFrom
    canReadByResidentTo
    deadlineFrom
    deadlineTo
    deferredUntilFrom
    deferredUntilTo
    statusReopenedCounterFrom
    statusReopenedCounterTo
    statusReasonFrom
    statusReasonTo
    clientNameFrom
    clientNameTo
    clientEmailFrom
    clientEmailTo
    clientPhoneFrom
    clientPhoneTo
    detailsFrom
    detailsTo
    isPaidFrom
    isPaidTo
    isPayableFrom
    isPayableTo
    isEmergencyFrom
    isEmergencyTo
    isWarrantyFrom
    isWarrantyTo
    metaFrom
    metaTo
    sectionNameFrom
    sectionNameTo
    sectionTypeFrom
    sectionTypeTo
    floorNameFrom
    floorNameTo
    unitNameFrom
    unitNameTo
    unitTypeFrom
    unitTypeTo
    sourceMetaFrom
    sourceMetaTo
    organizationIdFrom
    organizationIdTo
    organizationDisplayNameFrom
    organizationDisplayNameTo
    statusIdFrom
    statusIdTo
    statusDisplayNameFrom
    statusDisplayNameTo
    clientIdFrom
    clientIdTo
    clientDisplayNameFrom
    clientDisplayNameTo
    classifierIdFrom
    classifierIdTo
    classifierDisplayNameFrom
    classifierDisplayNameTo
    contactIdFrom
    contactIdTo
    contactDisplayNameFrom
    contactDisplayNameTo
    assigneeIdFrom
    assigneeIdTo
    assigneeDisplayNameFrom
    assigneeDisplayNameTo
    executorIdFrom
    executorIdTo
    executorDisplayNameFrom
    executorDisplayNameTo
    relatedIdFrom
    relatedIdTo
    relatedDisplayNameFrom
    relatedDisplayNameTo
    propertyIdFrom
    propertyIdTo
    propertyDisplayNameFrom
    propertyDisplayNameTo
    sourceIdFrom
    sourceIdTo
    sourceDisplayNameFrom
    sourceDisplayNameTo
    feedbackValueFrom
    feedbackValueTo
    feedbackCommentFrom
    feedbackCommentTo
    feedbackAdditionalOptionsFrom
    feedbackAdditionalOptionsTo
    qualityControlValueFrom
    qualityControlValueTo
    qualityControlCommentFrom
    qualityControlCommentTo
    qualityControlAdditionalOptionsFrom
    qualityControlAdditionalOptionsTo
  }
}
    `;

/**
 * __useGetTicketChangesQuery__
 *
 * To run a query within a React component, call `useGetTicketChangesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketChangesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketChangesQuery({
 *   variables: {
 *      ticketId: // value for 'ticketId'
 *   },
 * });
 */
export function useGetTicketChangesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketChangesQuery, Types.GetTicketChangesQueryVariables> & ({ variables: Types.GetTicketChangesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketChangesQuery, Types.GetTicketChangesQueryVariables>(GetTicketChangesDocument, options);
      }
export function useGetTicketChangesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketChangesQuery, Types.GetTicketChangesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketChangesQuery, Types.GetTicketChangesQueryVariables>(GetTicketChangesDocument, options);
        }
export function useGetTicketChangesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketChangesQuery, Types.GetTicketChangesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketChangesQuery, Types.GetTicketChangesQueryVariables>(GetTicketChangesDocument, options);
        }
export type GetTicketChangesQueryHookResult = ReturnType<typeof useGetTicketChangesQuery>;
export type GetTicketChangesLazyQueryHookResult = ReturnType<typeof useGetTicketChangesLazyQuery>;
export type GetTicketChangesSuspenseQueryHookResult = ReturnType<typeof useGetTicketChangesSuspenseQuery>;
export type GetTicketChangesQueryResult = Apollo.QueryResult<Types.GetTicketChangesQuery, Types.GetTicketChangesQueryVariables>;
export const GetTicketCommentsDocument = gql`
    query getTicketComments($ticketId: ID!) {
  ticketComments: allTicketComments(
    where: {ticket: {id: $ticketId}}
    sortBy: [createdAt_DESC]
    first: 100
  ) {
    id
    type
    createdAt
    updatedAt
    deletedAt
    content
    user {
      id
      type
      name
    }
  }
}
    `;

/**
 * __useGetTicketCommentsQuery__
 *
 * To run a query within a React component, call `useGetTicketCommentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketCommentsQuery({
 *   variables: {
 *      ticketId: // value for 'ticketId'
 *   },
 * });
 */
export function useGetTicketCommentsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketCommentsQuery, Types.GetTicketCommentsQueryVariables> & ({ variables: Types.GetTicketCommentsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketCommentsQuery, Types.GetTicketCommentsQueryVariables>(GetTicketCommentsDocument, options);
      }
export function useGetTicketCommentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketCommentsQuery, Types.GetTicketCommentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketCommentsQuery, Types.GetTicketCommentsQueryVariables>(GetTicketCommentsDocument, options);
        }
export function useGetTicketCommentsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketCommentsQuery, Types.GetTicketCommentsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketCommentsQuery, Types.GetTicketCommentsQueryVariables>(GetTicketCommentsDocument, options);
        }
export type GetTicketCommentsQueryHookResult = ReturnType<typeof useGetTicketCommentsQuery>;
export type GetTicketCommentsLazyQueryHookResult = ReturnType<typeof useGetTicketCommentsLazyQuery>;
export type GetTicketCommentsSuspenseQueryHookResult = ReturnType<typeof useGetTicketCommentsSuspenseQuery>;
export type GetTicketCommentsQueryResult = Apollo.QueryResult<Types.GetTicketCommentsQuery, Types.GetTicketCommentsQueryVariables>;
export const GetPollTicketCommentsDocument = gql`
    query getPollTicketComments($where: TicketCommentWhereInput!, $first: Int!) {
  ticketComments: allTicketComments(
    where: $where
    first: $first
    sortBy: [updatedAt_DESC]
  ) {
    id
    updatedAt
    ticket {
      id
    }
  }
}
    `;

/**
 * __useGetPollTicketCommentsQuery__
 *
 * To run a query within a React component, call `useGetPollTicketCommentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPollTicketCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPollTicketCommentsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useGetPollTicketCommentsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetPollTicketCommentsQuery, Types.GetPollTicketCommentsQueryVariables> & ({ variables: Types.GetPollTicketCommentsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetPollTicketCommentsQuery, Types.GetPollTicketCommentsQueryVariables>(GetPollTicketCommentsDocument, options);
      }
export function useGetPollTicketCommentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetPollTicketCommentsQuery, Types.GetPollTicketCommentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetPollTicketCommentsQuery, Types.GetPollTicketCommentsQueryVariables>(GetPollTicketCommentsDocument, options);
        }
export function useGetPollTicketCommentsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetPollTicketCommentsQuery, Types.GetPollTicketCommentsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetPollTicketCommentsQuery, Types.GetPollTicketCommentsQueryVariables>(GetPollTicketCommentsDocument, options);
        }
export type GetPollTicketCommentsQueryHookResult = ReturnType<typeof useGetPollTicketCommentsQuery>;
export type GetPollTicketCommentsLazyQueryHookResult = ReturnType<typeof useGetPollTicketCommentsLazyQuery>;
export type GetPollTicketCommentsSuspenseQueryHookResult = ReturnType<typeof useGetPollTicketCommentsSuspenseQuery>;
export type GetPollTicketCommentsQueryResult = Apollo.QueryResult<Types.GetPollTicketCommentsQuery, Types.GetPollTicketCommentsQueryVariables>;
export const GetTicketCommentsForClientCardDocument = gql`
    query getTicketCommentsForClientCard($where: TicketCommentWhereInput!, $first: Int!) {
  ticketComments: allTicketComments(
    where: $where
    first: $first
    sortBy: [updatedAt_DESC]
  ) {
    content
    ticket {
      id
    }
  }
}
    `;

/**
 * __useGetTicketCommentsForClientCardQuery__
 *
 * To run a query within a React component, call `useGetTicketCommentsForClientCardQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketCommentsForClientCardQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketCommentsForClientCardQuery({
 *   variables: {
 *      where: // value for 'where'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useGetTicketCommentsForClientCardQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketCommentsForClientCardQuery, Types.GetTicketCommentsForClientCardQueryVariables> & ({ variables: Types.GetTicketCommentsForClientCardQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketCommentsForClientCardQuery, Types.GetTicketCommentsForClientCardQueryVariables>(GetTicketCommentsForClientCardDocument, options);
      }
export function useGetTicketCommentsForClientCardLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketCommentsForClientCardQuery, Types.GetTicketCommentsForClientCardQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketCommentsForClientCardQuery, Types.GetTicketCommentsForClientCardQueryVariables>(GetTicketCommentsForClientCardDocument, options);
        }
export function useGetTicketCommentsForClientCardSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketCommentsForClientCardQuery, Types.GetTicketCommentsForClientCardQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketCommentsForClientCardQuery, Types.GetTicketCommentsForClientCardQueryVariables>(GetTicketCommentsForClientCardDocument, options);
        }
export type GetTicketCommentsForClientCardQueryHookResult = ReturnType<typeof useGetTicketCommentsForClientCardQuery>;
export type GetTicketCommentsForClientCardLazyQueryHookResult = ReturnType<typeof useGetTicketCommentsForClientCardLazyQuery>;
export type GetTicketCommentsForClientCardSuspenseQueryHookResult = ReturnType<typeof useGetTicketCommentsForClientCardSuspenseQuery>;
export type GetTicketCommentsForClientCardQueryResult = Apollo.QueryResult<Types.GetTicketCommentsForClientCardQuery, Types.GetTicketCommentsForClientCardQueryVariables>;
export const UpdateTicketCommentDocument = gql`
    mutation updateTicketComment($id: ID!, $data: TicketCommentUpdateInput!) {
  ticketComment: updateTicketComment(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateTicketCommentMutationFn = Apollo.MutationFunction<Types.UpdateTicketCommentMutation, Types.UpdateTicketCommentMutationVariables>;

/**
 * __useUpdateTicketCommentMutation__
 *
 * To run a mutation, you first call `useUpdateTicketCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTicketCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTicketCommentMutation, { data, loading, error }] = useUpdateTicketCommentMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTicketCommentMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateTicketCommentMutation, Types.UpdateTicketCommentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateTicketCommentMutation, Types.UpdateTicketCommentMutationVariables>(UpdateTicketCommentDocument, options);
      }
export type UpdateTicketCommentMutationHookResult = ReturnType<typeof useUpdateTicketCommentMutation>;
export type UpdateTicketCommentMutationResult = Apollo.MutationResult<Types.UpdateTicketCommentMutation>;
export type UpdateTicketCommentMutationOptions = Apollo.BaseMutationOptions<Types.UpdateTicketCommentMutation, Types.UpdateTicketCommentMutationVariables>;
export const CreateTicketCommentDocument = gql`
    mutation createTicketComment($data: TicketCommentCreateInput!) {
  ticketComment: createTicketComment(data: $data) {
    id
  }
}
    `;
export type CreateTicketCommentMutationFn = Apollo.MutationFunction<Types.CreateTicketCommentMutation, Types.CreateTicketCommentMutationVariables>;

/**
 * __useCreateTicketCommentMutation__
 *
 * To run a mutation, you first call `useCreateTicketCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTicketCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTicketCommentMutation, { data, loading, error }] = useCreateTicketCommentMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateTicketCommentMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateTicketCommentMutation, Types.CreateTicketCommentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateTicketCommentMutation, Types.CreateTicketCommentMutationVariables>(CreateTicketCommentDocument, options);
      }
export type CreateTicketCommentMutationHookResult = ReturnType<typeof useCreateTicketCommentMutation>;
export type CreateTicketCommentMutationResult = Apollo.MutationResult<Types.CreateTicketCommentMutation>;
export type CreateTicketCommentMutationOptions = Apollo.BaseMutationOptions<Types.CreateTicketCommentMutation, Types.CreateTicketCommentMutationVariables>;
export const GetTicketCommentsFilesDocument = gql`
    query getTicketCommentsFiles($ticketCommentsIds: [ID!]!) {
  files: allTicketCommentFiles(
    where: {ticketComment: {id_in: $ticketCommentsIds}}
    first: 100
    sortBy: [createdAt_DESC]
  ) {
    id
    file {
      originalFilename
      mimetype
      publicUrl
    }
    ticketComment {
      id
    }
  }
}
    `;

/**
 * __useGetTicketCommentsFilesQuery__
 *
 * To run a query within a React component, call `useGetTicketCommentsFilesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketCommentsFilesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketCommentsFilesQuery({
 *   variables: {
 *      ticketCommentsIds: // value for 'ticketCommentsIds'
 *   },
 * });
 */
export function useGetTicketCommentsFilesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketCommentsFilesQuery, Types.GetTicketCommentsFilesQueryVariables> & ({ variables: Types.GetTicketCommentsFilesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketCommentsFilesQuery, Types.GetTicketCommentsFilesQueryVariables>(GetTicketCommentsFilesDocument, options);
      }
export function useGetTicketCommentsFilesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketCommentsFilesQuery, Types.GetTicketCommentsFilesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketCommentsFilesQuery, Types.GetTicketCommentsFilesQueryVariables>(GetTicketCommentsFilesDocument, options);
        }
export function useGetTicketCommentsFilesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketCommentsFilesQuery, Types.GetTicketCommentsFilesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketCommentsFilesQuery, Types.GetTicketCommentsFilesQueryVariables>(GetTicketCommentsFilesDocument, options);
        }
export type GetTicketCommentsFilesQueryHookResult = ReturnType<typeof useGetTicketCommentsFilesQuery>;
export type GetTicketCommentsFilesLazyQueryHookResult = ReturnType<typeof useGetTicketCommentsFilesLazyQuery>;
export type GetTicketCommentsFilesSuspenseQueryHookResult = ReturnType<typeof useGetTicketCommentsFilesSuspenseQuery>;
export type GetTicketCommentsFilesQueryResult = Apollo.QueryResult<Types.GetTicketCommentsFilesQuery, Types.GetTicketCommentsFilesQueryVariables>;
export const GetTicketDocumentGenerationTasksDocument = gql`
    query getTicketDocumentGenerationTasks($where: TicketDocumentGenerationTaskWhereInput!) {
  tasks: allTicketDocumentGenerationTasks(where: $where) {
    id
    progress
    status
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
}
    `;

/**
 * __useGetTicketDocumentGenerationTasksQuery__
 *
 * To run a query within a React component, call `useGetTicketDocumentGenerationTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketDocumentGenerationTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketDocumentGenerationTasksQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetTicketDocumentGenerationTasksQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketDocumentGenerationTasksQuery, Types.GetTicketDocumentGenerationTasksQueryVariables> & ({ variables: Types.GetTicketDocumentGenerationTasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketDocumentGenerationTasksQuery, Types.GetTicketDocumentGenerationTasksQueryVariables>(GetTicketDocumentGenerationTasksDocument, options);
      }
export function useGetTicketDocumentGenerationTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketDocumentGenerationTasksQuery, Types.GetTicketDocumentGenerationTasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketDocumentGenerationTasksQuery, Types.GetTicketDocumentGenerationTasksQueryVariables>(GetTicketDocumentGenerationTasksDocument, options);
        }
export function useGetTicketDocumentGenerationTasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketDocumentGenerationTasksQuery, Types.GetTicketDocumentGenerationTasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketDocumentGenerationTasksQuery, Types.GetTicketDocumentGenerationTasksQueryVariables>(GetTicketDocumentGenerationTasksDocument, options);
        }
export type GetTicketDocumentGenerationTasksQueryHookResult = ReturnType<typeof useGetTicketDocumentGenerationTasksQuery>;
export type GetTicketDocumentGenerationTasksLazyQueryHookResult = ReturnType<typeof useGetTicketDocumentGenerationTasksLazyQuery>;
export type GetTicketDocumentGenerationTasksSuspenseQueryHookResult = ReturnType<typeof useGetTicketDocumentGenerationTasksSuspenseQuery>;
export type GetTicketDocumentGenerationTasksQueryResult = Apollo.QueryResult<Types.GetTicketDocumentGenerationTasksQuery, Types.GetTicketDocumentGenerationTasksQueryVariables>;
export const CreateTicketDocumentGenerationTaskDocument = gql`
    mutation createTicketDocumentGenerationTask($data: TicketDocumentGenerationTaskCreateInput!) {
  task: createTicketDocumentGenerationTask(data: $data) {
    id
    progress
    status
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
}
    `;
export type CreateTicketDocumentGenerationTaskMutationFn = Apollo.MutationFunction<Types.CreateTicketDocumentGenerationTaskMutation, Types.CreateTicketDocumentGenerationTaskMutationVariables>;

/**
 * __useCreateTicketDocumentGenerationTaskMutation__
 *
 * To run a mutation, you first call `useCreateTicketDocumentGenerationTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTicketDocumentGenerationTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTicketDocumentGenerationTaskMutation, { data, loading, error }] = useCreateTicketDocumentGenerationTaskMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateTicketDocumentGenerationTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateTicketDocumentGenerationTaskMutation, Types.CreateTicketDocumentGenerationTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateTicketDocumentGenerationTaskMutation, Types.CreateTicketDocumentGenerationTaskMutationVariables>(CreateTicketDocumentGenerationTaskDocument, options);
      }
export type CreateTicketDocumentGenerationTaskMutationHookResult = ReturnType<typeof useCreateTicketDocumentGenerationTaskMutation>;
export type CreateTicketDocumentGenerationTaskMutationResult = Apollo.MutationResult<Types.CreateTicketDocumentGenerationTaskMutation>;
export type CreateTicketDocumentGenerationTaskMutationOptions = Apollo.BaseMutationOptions<Types.CreateTicketDocumentGenerationTaskMutation, Types.CreateTicketDocumentGenerationTaskMutationVariables>;
export const UpdateTicketDocumentGenerationTaskDocument = gql`
    mutation updateTicketDocumentGenerationTask($id: ID!, $data: TicketDocumentGenerationTaskUpdateInput!) {
  task: updateTicketDocumentGenerationTask(data: $data, id: $id) {
    id
    progress
    status
    file {
      publicUrl
      originalFilename
    }
    __typename
  }
}
    `;
export type UpdateTicketDocumentGenerationTaskMutationFn = Apollo.MutationFunction<Types.UpdateTicketDocumentGenerationTaskMutation, Types.UpdateTicketDocumentGenerationTaskMutationVariables>;

/**
 * __useUpdateTicketDocumentGenerationTaskMutation__
 *
 * To run a mutation, you first call `useUpdateTicketDocumentGenerationTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTicketDocumentGenerationTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTicketDocumentGenerationTaskMutation, { data, loading, error }] = useUpdateTicketDocumentGenerationTaskMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTicketDocumentGenerationTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateTicketDocumentGenerationTaskMutation, Types.UpdateTicketDocumentGenerationTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateTicketDocumentGenerationTaskMutation, Types.UpdateTicketDocumentGenerationTaskMutationVariables>(UpdateTicketDocumentGenerationTaskDocument, options);
      }
export type UpdateTicketDocumentGenerationTaskMutationHookResult = ReturnType<typeof useUpdateTicketDocumentGenerationTaskMutation>;
export type UpdateTicketDocumentGenerationTaskMutationResult = Apollo.MutationResult<Types.UpdateTicketDocumentGenerationTaskMutation>;
export type UpdateTicketDocumentGenerationTaskMutationOptions = Apollo.BaseMutationOptions<Types.UpdateTicketDocumentGenerationTaskMutation, Types.UpdateTicketDocumentGenerationTaskMutationVariables>;
export const GetTicketExportTasksDocument = gql`
    query getTicketExportTasks($where: TicketExportTaskWhereInput!) {
  tasks: allTicketExportTasks(where: $where) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;

/**
 * __useGetTicketExportTasksQuery__
 *
 * To run a query within a React component, call `useGetTicketExportTasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketExportTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketExportTasksQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetTicketExportTasksQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketExportTasksQuery, Types.GetTicketExportTasksQueryVariables> & ({ variables: Types.GetTicketExportTasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketExportTasksQuery, Types.GetTicketExportTasksQueryVariables>(GetTicketExportTasksDocument, options);
      }
export function useGetTicketExportTasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketExportTasksQuery, Types.GetTicketExportTasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketExportTasksQuery, Types.GetTicketExportTasksQueryVariables>(GetTicketExportTasksDocument, options);
        }
export function useGetTicketExportTasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketExportTasksQuery, Types.GetTicketExportTasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketExportTasksQuery, Types.GetTicketExportTasksQueryVariables>(GetTicketExportTasksDocument, options);
        }
export type GetTicketExportTasksQueryHookResult = ReturnType<typeof useGetTicketExportTasksQuery>;
export type GetTicketExportTasksLazyQueryHookResult = ReturnType<typeof useGetTicketExportTasksLazyQuery>;
export type GetTicketExportTasksSuspenseQueryHookResult = ReturnType<typeof useGetTicketExportTasksSuspenseQuery>;
export type GetTicketExportTasksQueryResult = Apollo.QueryResult<Types.GetTicketExportTasksQuery, Types.GetTicketExportTasksQueryVariables>;
export const CreateTicketExportTaskDocument = gql`
    mutation createTicketExportTask($data: TicketExportTaskCreateInput!) {
  task: createTicketExportTask(data: $data) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;
export type CreateTicketExportTaskMutationFn = Apollo.MutationFunction<Types.CreateTicketExportTaskMutation, Types.CreateTicketExportTaskMutationVariables>;

/**
 * __useCreateTicketExportTaskMutation__
 *
 * To run a mutation, you first call `useCreateTicketExportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTicketExportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTicketExportTaskMutation, { data, loading, error }] = useCreateTicketExportTaskMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateTicketExportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateTicketExportTaskMutation, Types.CreateTicketExportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateTicketExportTaskMutation, Types.CreateTicketExportTaskMutationVariables>(CreateTicketExportTaskDocument, options);
      }
export type CreateTicketExportTaskMutationHookResult = ReturnType<typeof useCreateTicketExportTaskMutation>;
export type CreateTicketExportTaskMutationResult = Apollo.MutationResult<Types.CreateTicketExportTaskMutation>;
export type CreateTicketExportTaskMutationOptions = Apollo.BaseMutationOptions<Types.CreateTicketExportTaskMutation, Types.CreateTicketExportTaskMutationVariables>;
export const UpdateTicketExportTaskDocument = gql`
    mutation updateTicketExportTask($id: ID!, $data: TicketExportTaskUpdateInput!) {
  task: updateTicketExportTask(data: $data, id: $id) {
    id
    status
    file {
      publicUrl
      originalFilename
    }
    totalRecordsCount
    exportedRecordsCount
    __typename
  }
}
    `;
export type UpdateTicketExportTaskMutationFn = Apollo.MutationFunction<Types.UpdateTicketExportTaskMutation, Types.UpdateTicketExportTaskMutationVariables>;

/**
 * __useUpdateTicketExportTaskMutation__
 *
 * To run a mutation, you first call `useUpdateTicketExportTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTicketExportTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTicketExportTaskMutation, { data, loading, error }] = useUpdateTicketExportTaskMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateTicketExportTaskMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateTicketExportTaskMutation, Types.UpdateTicketExportTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateTicketExportTaskMutation, Types.UpdateTicketExportTaskMutationVariables>(UpdateTicketExportTaskDocument, options);
      }
export type UpdateTicketExportTaskMutationHookResult = ReturnType<typeof useUpdateTicketExportTaskMutation>;
export type UpdateTicketExportTaskMutationResult = Apollo.MutationResult<Types.UpdateTicketExportTaskMutation>;
export type UpdateTicketExportTaskMutationOptions = Apollo.BaseMutationOptions<Types.UpdateTicketExportTaskMutation, Types.UpdateTicketExportTaskMutationVariables>;
export const GetTicketFilesDocument = gql`
    query getTicketFiles($ticketId: ID!) {
  ticketFiles: allTicketFiles(
    where: {ticket: {id: $ticketId}}
    sortBy: [createdAt_ASC]
    first: 100
  ) {
    id
    ticket {
      id
    }
    file {
      id
      originalFilename
      publicUrl
    }
  }
}
    `;

/**
 * __useGetTicketFilesQuery__
 *
 * To run a query within a React component, call `useGetTicketFilesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketFilesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketFilesQuery({
 *   variables: {
 *      ticketId: // value for 'ticketId'
 *   },
 * });
 */
export function useGetTicketFilesQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketFilesQuery, Types.GetTicketFilesQueryVariables> & ({ variables: Types.GetTicketFilesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketFilesQuery, Types.GetTicketFilesQueryVariables>(GetTicketFilesDocument, options);
      }
export function useGetTicketFilesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketFilesQuery, Types.GetTicketFilesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketFilesQuery, Types.GetTicketFilesQueryVariables>(GetTicketFilesDocument, options);
        }
export function useGetTicketFilesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketFilesQuery, Types.GetTicketFilesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketFilesQuery, Types.GetTicketFilesQueryVariables>(GetTicketFilesDocument, options);
        }
export type GetTicketFilesQueryHookResult = ReturnType<typeof useGetTicketFilesQuery>;
export type GetTicketFilesLazyQueryHookResult = ReturnType<typeof useGetTicketFilesLazyQuery>;
export type GetTicketFilesSuspenseQueryHookResult = ReturnType<typeof useGetTicketFilesSuspenseQuery>;
export type GetTicketFilesQueryResult = Apollo.QueryResult<Types.GetTicketFilesQuery, Types.GetTicketFilesQueryVariables>;
export const GetTicketPropertyHintByIdDocument = gql`
    query getTicketPropertyHintById($id: ID!) {
  ticketPropertyHints: allTicketPropertyHints(where: {id: $id}, first: 1) {
    id
    organization {
      id
    }
    name
    content
  }
}
    `;

/**
 * __useGetTicketPropertyHintByIdQuery__
 *
 * To run a query within a React component, call `useGetTicketPropertyHintByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketPropertyHintByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketPropertyHintByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetTicketPropertyHintByIdQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketPropertyHintByIdQuery, Types.GetTicketPropertyHintByIdQueryVariables> & ({ variables: Types.GetTicketPropertyHintByIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketPropertyHintByIdQuery, Types.GetTicketPropertyHintByIdQueryVariables>(GetTicketPropertyHintByIdDocument, options);
      }
export function useGetTicketPropertyHintByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketPropertyHintByIdQuery, Types.GetTicketPropertyHintByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketPropertyHintByIdQuery, Types.GetTicketPropertyHintByIdQueryVariables>(GetTicketPropertyHintByIdDocument, options);
        }
export function useGetTicketPropertyHintByIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketPropertyHintByIdQuery, Types.GetTicketPropertyHintByIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketPropertyHintByIdQuery, Types.GetTicketPropertyHintByIdQueryVariables>(GetTicketPropertyHintByIdDocument, options);
        }
export type GetTicketPropertyHintByIdQueryHookResult = ReturnType<typeof useGetTicketPropertyHintByIdQuery>;
export type GetTicketPropertyHintByIdLazyQueryHookResult = ReturnType<typeof useGetTicketPropertyHintByIdLazyQuery>;
export type GetTicketPropertyHintByIdSuspenseQueryHookResult = ReturnType<typeof useGetTicketPropertyHintByIdSuspenseQuery>;
export type GetTicketPropertyHintByIdQueryResult = Apollo.QueryResult<Types.GetTicketPropertyHintByIdQuery, Types.GetTicketPropertyHintByIdQueryVariables>;
export const GetTicketPropertyHintPropertyByPropertyDocument = gql`
    query getTicketPropertyHintPropertyByProperty($propertyId: ID!) {
  ticketPropertyHintProperty: allTicketPropertyHintProperties(
    where: {property: {id: $propertyId}}
    first: 1
  ) {
    id
    ticketPropertyHint {
      id
    }
  }
}
    `;

/**
 * __useGetTicketPropertyHintPropertyByPropertyQuery__
 *
 * To run a query within a React component, call `useGetTicketPropertyHintPropertyByPropertyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketPropertyHintPropertyByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketPropertyHintPropertyByPropertyQuery({
 *   variables: {
 *      propertyId: // value for 'propertyId'
 *   },
 * });
 */
export function useGetTicketPropertyHintPropertyByPropertyQuery(baseOptions: Apollo.QueryHookOptions<Types.GetTicketPropertyHintPropertyByPropertyQuery, Types.GetTicketPropertyHintPropertyByPropertyQueryVariables> & ({ variables: Types.GetTicketPropertyHintPropertyByPropertyQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketPropertyHintPropertyByPropertyQuery, Types.GetTicketPropertyHintPropertyByPropertyQueryVariables>(GetTicketPropertyHintPropertyByPropertyDocument, options);
      }
export function useGetTicketPropertyHintPropertyByPropertyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketPropertyHintPropertyByPropertyQuery, Types.GetTicketPropertyHintPropertyByPropertyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketPropertyHintPropertyByPropertyQuery, Types.GetTicketPropertyHintPropertyByPropertyQueryVariables>(GetTicketPropertyHintPropertyByPropertyDocument, options);
        }
export function useGetTicketPropertyHintPropertyByPropertySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketPropertyHintPropertyByPropertyQuery, Types.GetTicketPropertyHintPropertyByPropertyQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketPropertyHintPropertyByPropertyQuery, Types.GetTicketPropertyHintPropertyByPropertyQueryVariables>(GetTicketPropertyHintPropertyByPropertyDocument, options);
        }
export type GetTicketPropertyHintPropertyByPropertyQueryHookResult = ReturnType<typeof useGetTicketPropertyHintPropertyByPropertyQuery>;
export type GetTicketPropertyHintPropertyByPropertyLazyQueryHookResult = ReturnType<typeof useGetTicketPropertyHintPropertyByPropertyLazyQuery>;
export type GetTicketPropertyHintPropertyByPropertySuspenseQueryHookResult = ReturnType<typeof useGetTicketPropertyHintPropertyByPropertySuspenseQuery>;
export type GetTicketPropertyHintPropertyByPropertyQueryResult = Apollo.QueryResult<Types.GetTicketPropertyHintPropertyByPropertyQuery, Types.GetTicketPropertyHintPropertyByPropertyQueryVariables>;
export const GetTicketSourcesDocument = gql`
    query getTicketSources($types: [TicketSourceTypeType!]) {
  sources: allTicketSources(where: {type_in: $types}) {
    id
    name
  }
}
    `;

/**
 * __useGetTicketSourcesQuery__
 *
 * To run a query within a React component, call `useGetTicketSourcesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketSourcesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketSourcesQuery({
 *   variables: {
 *      types: // value for 'types'
 *   },
 * });
 */
export function useGetTicketSourcesQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetTicketSourcesQuery, Types.GetTicketSourcesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketSourcesQuery, Types.GetTicketSourcesQueryVariables>(GetTicketSourcesDocument, options);
      }
export function useGetTicketSourcesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketSourcesQuery, Types.GetTicketSourcesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketSourcesQuery, Types.GetTicketSourcesQueryVariables>(GetTicketSourcesDocument, options);
        }
export function useGetTicketSourcesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketSourcesQuery, Types.GetTicketSourcesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketSourcesQuery, Types.GetTicketSourcesQueryVariables>(GetTicketSourcesDocument, options);
        }
export type GetTicketSourcesQueryHookResult = ReturnType<typeof useGetTicketSourcesQuery>;
export type GetTicketSourcesLazyQueryHookResult = ReturnType<typeof useGetTicketSourcesLazyQuery>;
export type GetTicketSourcesSuspenseQueryHookResult = ReturnType<typeof useGetTicketSourcesSuspenseQuery>;
export type GetTicketSourcesQueryResult = Apollo.QueryResult<Types.GetTicketSourcesQuery, Types.GetTicketSourcesQueryVariables>;
export const GetTicketStatusesDocument = gql`
    query getTicketStatuses {
  statuses: allTicketStatuses(first: 100) {
    id
    name
    type
    colors {
      primary
      secondary
    }
  }
}
    `;

/**
 * __useGetTicketStatusesQuery__
 *
 * To run a query within a React component, call `useGetTicketStatusesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTicketStatusesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTicketStatusesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetTicketStatusesQuery(baseOptions?: Apollo.QueryHookOptions<Types.GetTicketStatusesQuery, Types.GetTicketStatusesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetTicketStatusesQuery, Types.GetTicketStatusesQueryVariables>(GetTicketStatusesDocument, options);
      }
export function useGetTicketStatusesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetTicketStatusesQuery, Types.GetTicketStatusesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetTicketStatusesQuery, Types.GetTicketStatusesQueryVariables>(GetTicketStatusesDocument, options);
        }
export function useGetTicketStatusesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetTicketStatusesQuery, Types.GetTicketStatusesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetTicketStatusesQuery, Types.GetTicketStatusesQueryVariables>(GetTicketStatusesDocument, options);
        }
export type GetTicketStatusesQueryHookResult = ReturnType<typeof useGetTicketStatusesQuery>;
export type GetTicketStatusesLazyQueryHookResult = ReturnType<typeof useGetTicketStatusesLazyQuery>;
export type GetTicketStatusesSuspenseQueryHookResult = ReturnType<typeof useGetTicketStatusesSuspenseQuery>;
export type GetTicketStatusesQueryResult = Apollo.QueryResult<Types.GetTicketStatusesQuery, Types.GetTicketStatusesQueryVariables>;
export const GetUserFavoriteTicketsDocument = gql`
    query getUserFavoriteTickets($userId: ID!, $ticketWhere: TicketWhereInput) {
  userFavoriteTickets: allUserFavoriteTickets(
    where: {user: {id: $userId}, ticket: $ticketWhere}
    first: 500
  ) {
    id
    ticket {
      id
    }
  }
  meta: _allUserFavoriteTicketsMeta(
    where: {user: {id: $userId}, ticket: $ticketWhere}
  ) {
    count
  }
}
    `;

/**
 * __useGetUserFavoriteTicketsQuery__
 *
 * To run a query within a React component, call `useGetUserFavoriteTicketsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserFavoriteTicketsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserFavoriteTicketsQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      ticketWhere: // value for 'ticketWhere'
 *   },
 * });
 */
export function useGetUserFavoriteTicketsQuery(baseOptions: Apollo.QueryHookOptions<Types.GetUserFavoriteTicketsQuery, Types.GetUserFavoriteTicketsQueryVariables> & ({ variables: Types.GetUserFavoriteTicketsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetUserFavoriteTicketsQuery, Types.GetUserFavoriteTicketsQueryVariables>(GetUserFavoriteTicketsDocument, options);
      }
export function useGetUserFavoriteTicketsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetUserFavoriteTicketsQuery, Types.GetUserFavoriteTicketsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetUserFavoriteTicketsQuery, Types.GetUserFavoriteTicketsQueryVariables>(GetUserFavoriteTicketsDocument, options);
        }
export function useGetUserFavoriteTicketsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetUserFavoriteTicketsQuery, Types.GetUserFavoriteTicketsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetUserFavoriteTicketsQuery, Types.GetUserFavoriteTicketsQueryVariables>(GetUserFavoriteTicketsDocument, options);
        }
export type GetUserFavoriteTicketsQueryHookResult = ReturnType<typeof useGetUserFavoriteTicketsQuery>;
export type GetUserFavoriteTicketsLazyQueryHookResult = ReturnType<typeof useGetUserFavoriteTicketsLazyQuery>;
export type GetUserFavoriteTicketsSuspenseQueryHookResult = ReturnType<typeof useGetUserFavoriteTicketsSuspenseQuery>;
export type GetUserFavoriteTicketsQueryResult = Apollo.QueryResult<Types.GetUserFavoriteTicketsQuery, Types.GetUserFavoriteTicketsQueryVariables>;
export const GetUserTicketCommentsReadTimeDocument = gql`
    query getUserTicketCommentsReadTime($userId: ID!, $ticketIds: [ID!]) {
  objs: allUserTicketCommentReadTimes(
    where: {user: {id: $userId}, ticket: {id_in: $ticketIds}}
  ) {
    id
    readCommentAt
    readResidentCommentAt
    readOrganizationCommentAt
    ticket {
      id
    }
  }
}
    `;

/**
 * __useGetUserTicketCommentsReadTimeQuery__
 *
 * To run a query within a React component, call `useGetUserTicketCommentsReadTimeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserTicketCommentsReadTimeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserTicketCommentsReadTimeQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *      ticketIds: // value for 'ticketIds'
 *   },
 * });
 */
export function useGetUserTicketCommentsReadTimeQuery(baseOptions: Apollo.QueryHookOptions<Types.GetUserTicketCommentsReadTimeQuery, Types.GetUserTicketCommentsReadTimeQueryVariables> & ({ variables: Types.GetUserTicketCommentsReadTimeQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetUserTicketCommentsReadTimeQuery, Types.GetUserTicketCommentsReadTimeQueryVariables>(GetUserTicketCommentsReadTimeDocument, options);
      }
export function useGetUserTicketCommentsReadTimeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetUserTicketCommentsReadTimeQuery, Types.GetUserTicketCommentsReadTimeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetUserTicketCommentsReadTimeQuery, Types.GetUserTicketCommentsReadTimeQueryVariables>(GetUserTicketCommentsReadTimeDocument, options);
        }
export function useGetUserTicketCommentsReadTimeSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetUserTicketCommentsReadTimeQuery, Types.GetUserTicketCommentsReadTimeQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetUserTicketCommentsReadTimeQuery, Types.GetUserTicketCommentsReadTimeQueryVariables>(GetUserTicketCommentsReadTimeDocument, options);
        }
export type GetUserTicketCommentsReadTimeQueryHookResult = ReturnType<typeof useGetUserTicketCommentsReadTimeQuery>;
export type GetUserTicketCommentsReadTimeLazyQueryHookResult = ReturnType<typeof useGetUserTicketCommentsReadTimeLazyQuery>;
export type GetUserTicketCommentsReadTimeSuspenseQueryHookResult = ReturnType<typeof useGetUserTicketCommentsReadTimeSuspenseQuery>;
export type GetUserTicketCommentsReadTimeQueryResult = Apollo.QueryResult<Types.GetUserTicketCommentsReadTimeQuery, Types.GetUserTicketCommentsReadTimeQueryVariables>;
export const CreateUserTicketCommentReadTimeDocument = gql`
    mutation createUserTicketCommentReadTime($data: UserTicketCommentReadTimeCreateInput) {
  obj: createUserTicketCommentReadTime(data: $data) {
    id
  }
}
    `;
export type CreateUserTicketCommentReadTimeMutationFn = Apollo.MutationFunction<Types.CreateUserTicketCommentReadTimeMutation, Types.CreateUserTicketCommentReadTimeMutationVariables>;

/**
 * __useCreateUserTicketCommentReadTimeMutation__
 *
 * To run a mutation, you first call `useCreateUserTicketCommentReadTimeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserTicketCommentReadTimeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserTicketCommentReadTimeMutation, { data, loading, error }] = useCreateUserTicketCommentReadTimeMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreateUserTicketCommentReadTimeMutation(baseOptions?: Apollo.MutationHookOptions<Types.CreateUserTicketCommentReadTimeMutation, Types.CreateUserTicketCommentReadTimeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CreateUserTicketCommentReadTimeMutation, Types.CreateUserTicketCommentReadTimeMutationVariables>(CreateUserTicketCommentReadTimeDocument, options);
      }
export type CreateUserTicketCommentReadTimeMutationHookResult = ReturnType<typeof useCreateUserTicketCommentReadTimeMutation>;
export type CreateUserTicketCommentReadTimeMutationResult = Apollo.MutationResult<Types.CreateUserTicketCommentReadTimeMutation>;
export type CreateUserTicketCommentReadTimeMutationOptions = Apollo.BaseMutationOptions<Types.CreateUserTicketCommentReadTimeMutation, Types.CreateUserTicketCommentReadTimeMutationVariables>;
export const UpdateUserTicketCommentReadTimeDocument = gql`
    mutation updateUserTicketCommentReadTime($id: ID!, $data: UserTicketCommentReadTimeUpdateInput) {
  obj: updateUserTicketCommentReadTime(id: $id, data: $data) {
    id
  }
}
    `;
export type UpdateUserTicketCommentReadTimeMutationFn = Apollo.MutationFunction<Types.UpdateUserTicketCommentReadTimeMutation, Types.UpdateUserTicketCommentReadTimeMutationVariables>;

/**
 * __useUpdateUserTicketCommentReadTimeMutation__
 *
 * To run a mutation, you first call `useUpdateUserTicketCommentReadTimeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserTicketCommentReadTimeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserTicketCommentReadTimeMutation, { data, loading, error }] = useUpdateUserTicketCommentReadTimeMutation({
 *   variables: {
 *      id: // value for 'id'
 *      data: // value for 'data'
 *   },
 * });
 */
export function useUpdateUserTicketCommentReadTimeMutation(baseOptions?: Apollo.MutationHookOptions<Types.UpdateUserTicketCommentReadTimeMutation, Types.UpdateUserTicketCommentReadTimeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.UpdateUserTicketCommentReadTimeMutation, Types.UpdateUserTicketCommentReadTimeMutationVariables>(UpdateUserTicketCommentReadTimeDocument, options);
      }
export type UpdateUserTicketCommentReadTimeMutationHookResult = ReturnType<typeof useUpdateUserTicketCommentReadTimeMutation>;
export type UpdateUserTicketCommentReadTimeMutationResult = Apollo.MutationResult<Types.UpdateUserTicketCommentReadTimeMutation>;
export type UpdateUserTicketCommentReadTimeMutationOptions = Apollo.BaseMutationOptions<Types.UpdateUserTicketCommentReadTimeMutation, Types.UpdateUserTicketCommentReadTimeMutationVariables>;
export const AuthenticateOrRegisterUserWithTokenDocument = gql`
    mutation authenticateOrRegisterUserWithToken($data: AuthenticateOrRegisterUserWithTokenInput!) {
  result: authenticateOrRegisterUserWithToken(data: $data) {
    user: item {
      id
    }
  }
}
    `;
export type AuthenticateOrRegisterUserWithTokenMutationFn = Apollo.MutationFunction<Types.AuthenticateOrRegisterUserWithTokenMutation, Types.AuthenticateOrRegisterUserWithTokenMutationVariables>;

/**
 * __useAuthenticateOrRegisterUserWithTokenMutation__
 *
 * To run a mutation, you first call `useAuthenticateOrRegisterUserWithTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAuthenticateOrRegisterUserWithTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [authenticateOrRegisterUserWithTokenMutation, { data, loading, error }] = useAuthenticateOrRegisterUserWithTokenMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useAuthenticateOrRegisterUserWithTokenMutation(baseOptions?: Apollo.MutationHookOptions<Types.AuthenticateOrRegisterUserWithTokenMutation, Types.AuthenticateOrRegisterUserWithTokenMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.AuthenticateOrRegisterUserWithTokenMutation, Types.AuthenticateOrRegisterUserWithTokenMutationVariables>(AuthenticateOrRegisterUserWithTokenDocument, options);
      }
export type AuthenticateOrRegisterUserWithTokenMutationHookResult = ReturnType<typeof useAuthenticateOrRegisterUserWithTokenMutation>;
export type AuthenticateOrRegisterUserWithTokenMutationResult = Apollo.MutationResult<Types.AuthenticateOrRegisterUserWithTokenMutation>;
export type AuthenticateOrRegisterUserWithTokenMutationOptions = Apollo.BaseMutationOptions<Types.AuthenticateOrRegisterUserWithTokenMutation, Types.AuthenticateOrRegisterUserWithTokenMutationVariables>;
export const AuthenticateUserWithPhoneAndPasswordDocument = gql`
    mutation authenticateUserWithPhoneAndPassword($data: AuthenticateUserWithPhoneAndPasswordInput!) {
  result: authenticateUserWithPhoneAndPassword(data: $data) {
    item {
      id
    }
  }
}
    `;
export type AuthenticateUserWithPhoneAndPasswordMutationFn = Apollo.MutationFunction<Types.AuthenticateUserWithPhoneAndPasswordMutation, Types.AuthenticateUserWithPhoneAndPasswordMutationVariables>;

/**
 * __useAuthenticateUserWithPhoneAndPasswordMutation__
 *
 * To run a mutation, you first call `useAuthenticateUserWithPhoneAndPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAuthenticateUserWithPhoneAndPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [authenticateUserWithPhoneAndPasswordMutation, { data, loading, error }] = useAuthenticateUserWithPhoneAndPasswordMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useAuthenticateUserWithPhoneAndPasswordMutation(baseOptions?: Apollo.MutationHookOptions<Types.AuthenticateUserWithPhoneAndPasswordMutation, Types.AuthenticateUserWithPhoneAndPasswordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.AuthenticateUserWithPhoneAndPasswordMutation, Types.AuthenticateUserWithPhoneAndPasswordMutationVariables>(AuthenticateUserWithPhoneAndPasswordDocument, options);
      }
export type AuthenticateUserWithPhoneAndPasswordMutationHookResult = ReturnType<typeof useAuthenticateUserWithPhoneAndPasswordMutation>;
export type AuthenticateUserWithPhoneAndPasswordMutationResult = Apollo.MutationResult<Types.AuthenticateUserWithPhoneAndPasswordMutation>;
export type AuthenticateUserWithPhoneAndPasswordMutationOptions = Apollo.BaseMutationOptions<Types.AuthenticateUserWithPhoneAndPasswordMutation, Types.AuthenticateUserWithPhoneAndPasswordMutationVariables>;
export const ChangePasswordWithTokenDocument = gql`
    mutation changePasswordWithToken($data: ChangePasswordWithTokenInput!) {
  result: changePasswordWithToken(data: $data) {
    status
    phone
  }
}
    `;
export type ChangePasswordWithTokenMutationFn = Apollo.MutationFunction<Types.ChangePasswordWithTokenMutation, Types.ChangePasswordWithTokenMutationVariables>;

/**
 * __useChangePasswordWithTokenMutation__
 *
 * To run a mutation, you first call `useChangePasswordWithTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangePasswordWithTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changePasswordWithTokenMutation, { data, loading, error }] = useChangePasswordWithTokenMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useChangePasswordWithTokenMutation(baseOptions?: Apollo.MutationHookOptions<Types.ChangePasswordWithTokenMutation, Types.ChangePasswordWithTokenMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.ChangePasswordWithTokenMutation, Types.ChangePasswordWithTokenMutationVariables>(ChangePasswordWithTokenDocument, options);
      }
export type ChangePasswordWithTokenMutationHookResult = ReturnType<typeof useChangePasswordWithTokenMutation>;
export type ChangePasswordWithTokenMutationResult = Apollo.MutationResult<Types.ChangePasswordWithTokenMutation>;
export type ChangePasswordWithTokenMutationOptions = Apollo.BaseMutationOptions<Types.ChangePasswordWithTokenMutation, Types.ChangePasswordWithTokenMutationVariables>;
export const CheckUserExistenceDocument = gql`
    query checkUserExistence($data: CheckUserExistenceInput!) {
  result: checkUserExistence(data: $data) {
    isUserExists
    isNameSet
    isEmailSet
    isPhoneSet
    isPasswordSet
  }
}
    `;

/**
 * __useCheckUserExistenceQuery__
 *
 * To run a query within a React component, call `useCheckUserExistenceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckUserExistenceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckUserExistenceQuery({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCheckUserExistenceQuery(baseOptions: Apollo.QueryHookOptions<Types.CheckUserExistenceQuery, Types.CheckUserExistenceQueryVariables> & ({ variables: Types.CheckUserExistenceQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.CheckUserExistenceQuery, Types.CheckUserExistenceQueryVariables>(CheckUserExistenceDocument, options);
      }
export function useCheckUserExistenceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.CheckUserExistenceQuery, Types.CheckUserExistenceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.CheckUserExistenceQuery, Types.CheckUserExistenceQueryVariables>(CheckUserExistenceDocument, options);
        }
export function useCheckUserExistenceSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.CheckUserExistenceQuery, Types.CheckUserExistenceQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.CheckUserExistenceQuery, Types.CheckUserExistenceQueryVariables>(CheckUserExistenceDocument, options);
        }
export type CheckUserExistenceQueryHookResult = ReturnType<typeof useCheckUserExistenceQuery>;
export type CheckUserExistenceLazyQueryHookResult = ReturnType<typeof useCheckUserExistenceLazyQuery>;
export type CheckUserExistenceSuspenseQueryHookResult = ReturnType<typeof useCheckUserExistenceSuspenseQuery>;
export type CheckUserExistenceQueryResult = Apollo.QueryResult<Types.CheckUserExistenceQuery, Types.CheckUserExistenceQueryVariables>;
export const CompleteConfirmPhoneActionDocument = gql`
    mutation completeConfirmPhoneAction($data: CompleteConfirmPhoneActionInput!) {
  result: completeConfirmPhoneAction(data: $data) {
    status
  }
}
    `;
export type CompleteConfirmPhoneActionMutationFn = Apollo.MutationFunction<Types.CompleteConfirmPhoneActionMutation, Types.CompleteConfirmPhoneActionMutationVariables>;

/**
 * __useCompleteConfirmPhoneActionMutation__
 *
 * To run a mutation, you first call `useCompleteConfirmPhoneActionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCompleteConfirmPhoneActionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [completeConfirmPhoneActionMutation, { data, loading, error }] = useCompleteConfirmPhoneActionMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCompleteConfirmPhoneActionMutation(baseOptions?: Apollo.MutationHookOptions<Types.CompleteConfirmPhoneActionMutation, Types.CompleteConfirmPhoneActionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.CompleteConfirmPhoneActionMutation, Types.CompleteConfirmPhoneActionMutationVariables>(CompleteConfirmPhoneActionDocument, options);
      }
export type CompleteConfirmPhoneActionMutationHookResult = ReturnType<typeof useCompleteConfirmPhoneActionMutation>;
export type CompleteConfirmPhoneActionMutationResult = Apollo.MutationResult<Types.CompleteConfirmPhoneActionMutation>;
export type CompleteConfirmPhoneActionMutationOptions = Apollo.BaseMutationOptions<Types.CompleteConfirmPhoneActionMutation, Types.CompleteConfirmPhoneActionMutationVariables>;
export const GetPhoneByConfirmPhoneActionTokenDocument = gql`
    query getPhoneByConfirmPhoneActionToken($data: GetPhoneByConfirmPhoneActionTokenInput!) {
  result: getPhoneByConfirmPhoneActionToken(data: $data) {
    phone
    isPhoneVerified
  }
}
    `;

/**
 * __useGetPhoneByConfirmPhoneActionTokenQuery__
 *
 * To run a query within a React component, call `useGetPhoneByConfirmPhoneActionTokenQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPhoneByConfirmPhoneActionTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPhoneByConfirmPhoneActionTokenQuery({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useGetPhoneByConfirmPhoneActionTokenQuery(baseOptions: Apollo.QueryHookOptions<Types.GetPhoneByConfirmPhoneActionTokenQuery, Types.GetPhoneByConfirmPhoneActionTokenQueryVariables> & ({ variables: Types.GetPhoneByConfirmPhoneActionTokenQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.GetPhoneByConfirmPhoneActionTokenQuery, Types.GetPhoneByConfirmPhoneActionTokenQueryVariables>(GetPhoneByConfirmPhoneActionTokenDocument, options);
      }
export function useGetPhoneByConfirmPhoneActionTokenLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.GetPhoneByConfirmPhoneActionTokenQuery, Types.GetPhoneByConfirmPhoneActionTokenQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.GetPhoneByConfirmPhoneActionTokenQuery, Types.GetPhoneByConfirmPhoneActionTokenQueryVariables>(GetPhoneByConfirmPhoneActionTokenDocument, options);
        }
export function useGetPhoneByConfirmPhoneActionTokenSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.GetPhoneByConfirmPhoneActionTokenQuery, Types.GetPhoneByConfirmPhoneActionTokenQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.GetPhoneByConfirmPhoneActionTokenQuery, Types.GetPhoneByConfirmPhoneActionTokenQueryVariables>(GetPhoneByConfirmPhoneActionTokenDocument, options);
        }
export type GetPhoneByConfirmPhoneActionTokenQueryHookResult = ReturnType<typeof useGetPhoneByConfirmPhoneActionTokenQuery>;
export type GetPhoneByConfirmPhoneActionTokenLazyQueryHookResult = ReturnType<typeof useGetPhoneByConfirmPhoneActionTokenLazyQuery>;
export type GetPhoneByConfirmPhoneActionTokenSuspenseQueryHookResult = ReturnType<typeof useGetPhoneByConfirmPhoneActionTokenSuspenseQuery>;
export type GetPhoneByConfirmPhoneActionTokenQueryResult = Apollo.QueryResult<Types.GetPhoneByConfirmPhoneActionTokenQuery, Types.GetPhoneByConfirmPhoneActionTokenQueryVariables>;
export const ResendConfirmPhoneActionSmsDocument = gql`
    mutation resendConfirmPhoneActionSms($data: ResendConfirmPhoneActionSmsInput!) {
  result: resendConfirmPhoneActionSms(data: $data) {
    status
  }
}
    `;
export type ResendConfirmPhoneActionSmsMutationFn = Apollo.MutationFunction<Types.ResendConfirmPhoneActionSmsMutation, Types.ResendConfirmPhoneActionSmsMutationVariables>;

/**
 * __useResendConfirmPhoneActionSmsMutation__
 *
 * To run a mutation, you first call `useResendConfirmPhoneActionSmsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResendConfirmPhoneActionSmsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resendConfirmPhoneActionSmsMutation, { data, loading, error }] = useResendConfirmPhoneActionSmsMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useResendConfirmPhoneActionSmsMutation(baseOptions?: Apollo.MutationHookOptions<Types.ResendConfirmPhoneActionSmsMutation, Types.ResendConfirmPhoneActionSmsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.ResendConfirmPhoneActionSmsMutation, Types.ResendConfirmPhoneActionSmsMutationVariables>(ResendConfirmPhoneActionSmsDocument, options);
      }
export type ResendConfirmPhoneActionSmsMutationHookResult = ReturnType<typeof useResendConfirmPhoneActionSmsMutation>;
export type ResendConfirmPhoneActionSmsMutationResult = Apollo.MutationResult<Types.ResendConfirmPhoneActionSmsMutation>;
export type ResendConfirmPhoneActionSmsMutationOptions = Apollo.BaseMutationOptions<Types.ResendConfirmPhoneActionSmsMutation, Types.ResendConfirmPhoneActionSmsMutationVariables>;
export const StartConfirmPhoneActionDocument = gql`
    mutation startConfirmPhoneAction($data: StartConfirmPhoneActionInput!) {
  result: startConfirmPhoneAction(data: $data) {
    token
  }
}
    `;
export type StartConfirmPhoneActionMutationFn = Apollo.MutationFunction<Types.StartConfirmPhoneActionMutation, Types.StartConfirmPhoneActionMutationVariables>;

/**
 * __useStartConfirmPhoneActionMutation__
 *
 * To run a mutation, you first call `useStartConfirmPhoneActionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useStartConfirmPhoneActionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [startConfirmPhoneActionMutation, { data, loading, error }] = useStartConfirmPhoneActionMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useStartConfirmPhoneActionMutation(baseOptions?: Apollo.MutationHookOptions<Types.StartConfirmPhoneActionMutation, Types.StartConfirmPhoneActionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.StartConfirmPhoneActionMutation, Types.StartConfirmPhoneActionMutationVariables>(StartConfirmPhoneActionDocument, options);
      }
export type StartConfirmPhoneActionMutationHookResult = ReturnType<typeof useStartConfirmPhoneActionMutation>;
export type StartConfirmPhoneActionMutationResult = Apollo.MutationResult<Types.StartConfirmPhoneActionMutation>;
export type StartConfirmPhoneActionMutationOptions = Apollo.BaseMutationOptions<Types.StartConfirmPhoneActionMutation, Types.StartConfirmPhoneActionMutationVariables>;
export const AuthenticatedUserDocument = gql`
    query authenticatedUser {
  authenticatedUser {
    id
    name
    avatar {
      publicUrl
    }
    phone
    email
    isAdmin
    isSupport
    rightsSet {
      id
    }
    type
    locale
    showGlobalHints
  }
}
    `;

/**
 * __useAuthenticatedUserQuery__
 *
 * To run a query within a React component, call `useAuthenticatedUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useAuthenticatedUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAuthenticatedUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useAuthenticatedUserQuery(baseOptions?: Apollo.QueryHookOptions<Types.AuthenticatedUserQuery, Types.AuthenticatedUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Types.AuthenticatedUserQuery, Types.AuthenticatedUserQueryVariables>(AuthenticatedUserDocument, options);
      }
export function useAuthenticatedUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Types.AuthenticatedUserQuery, Types.AuthenticatedUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Types.AuthenticatedUserQuery, Types.AuthenticatedUserQueryVariables>(AuthenticatedUserDocument, options);
        }
export function useAuthenticatedUserSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Types.AuthenticatedUserQuery, Types.AuthenticatedUserQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Types.AuthenticatedUserQuery, Types.AuthenticatedUserQueryVariables>(AuthenticatedUserDocument, options);
        }
export type AuthenticatedUserQueryHookResult = ReturnType<typeof useAuthenticatedUserQuery>;
export type AuthenticatedUserLazyQueryHookResult = ReturnType<typeof useAuthenticatedUserLazyQuery>;
export type AuthenticatedUserSuspenseQueryHookResult = ReturnType<typeof useAuthenticatedUserSuspenseQuery>;
export type AuthenticatedUserQueryResult = Apollo.QueryResult<Types.AuthenticatedUserQuery, Types.AuthenticatedUserQueryVariables>;
export const SignOutDocument = gql`
    mutation signOut {
  unauthenticateUser {
    success
  }
}
    `;
export type SignOutMutationFn = Apollo.MutationFunction<Types.SignOutMutation, Types.SignOutMutationVariables>;

/**
 * __useSignOutMutation__
 *
 * To run a mutation, you first call `useSignOutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignOutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signOutMutation, { data, loading, error }] = useSignOutMutation({
 *   variables: {
 *   },
 * });
 */
export function useSignOutMutation(baseOptions?: Apollo.MutationHookOptions<Types.SignOutMutation, Types.SignOutMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<Types.SignOutMutation, Types.SignOutMutationVariables>(SignOutDocument, options);
      }
export type SignOutMutationHookResult = ReturnType<typeof useSignOutMutation>;
export type SignOutMutationResult = Apollo.MutationResult<Types.SignOutMutation>;
export type SignOutMutationOptions = Apollo.BaseMutationOptions<Types.SignOutMutation, Types.SignOutMutationVariables>;