/**
 * Generated by `createschema user.User 'name:Text;password:Text;phone:Text;email:Text'`
 */

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@dev-api/domains/user/access/User')
const { MIN_PASSWORD_LENGTH } = require('@dev-api/domains/user/constants')


const User = new GQLListSchema('User', {
    schemaDoc: 'Account of individual developer or development company.',
    fields: {
        name: {
            schemaDoc: 'Name. If impersonal account should be a company name',
            type: 'Text',
            isRequired: true,
        },
        password: {
            schemaDoc: 'User password used for authentication. Self-update only field',
            type: 'Password',
            isRequired: true,
            rejectCommon: true,
            minLength: MIN_PASSWORD_LENGTH,
            access: access.canAccessToPasswordField,
        },
        email: {
            schemaDoc: 'User email. Required for authentication',
            type: 'Text',
            isRequired: true,
            access: access.canAccessToEmailField,
        },
        isAdmin: {
            schemaDoc: 'Provides a superuser access to any schema data',
            type: 'Checkbox',
            isRequired: true,
            access: access.canAccessToAccessControlField,
            defaultValue: false,
        },
        isSupport: {
            schemaDoc: 'Provide access to admin-panel, where different task can be performed',
            type: 'Checkbox',
            isRequired: true,
            access: access.canAccessToAccessControlField,
            defaultValue: false,
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['email'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'user_unique_email',
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadUsers,
        create: access.canManageUsers,
        update: access.canManageUsers,
        delete: false,
        auth: true,
    },
})

module.exports = {
    User,
}
