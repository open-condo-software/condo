/**
 * Generated by `createschema user.User 'name:Text;password:Text;phone:Text;email:Text'`
 */

const get = require('lodash/get')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@dev-api/domains/user/access/User')
const { INVALID_PHONE, PASSWORD_TOO_SIMPLE } = require('@dev-api/domains/user/constants/errors')
const { isValidPassword } = require('@dev-api/domains/user/utils/password')
const { normalizePhone } = require('@dev-api/domains/user/utils/phone')

const ERRORS = {
    INVALID_PHONE: {
        code: BAD_USER_INPUT,
        message: 'The provided phone number is in the wrong format',
        type: INVALID_PHONE,
    },
    PASSWORD_TOO_SIMPLE: {
        code: BAD_USER_INPUT,
        message: 'The provided password is too simple',
        type: PASSWORD_TOO_SIMPLE,
    },
}


const User = new GQLListSchema('User', {
    schemaDoc: 'Account of individual developer or development company.',
    fields: {
        name: {
            schemaDoc: 'Name. If impersonal account should be a company name',
            type: 'Text',
            isRequired: true,
        },
        password: {
            schemaDoc: 'User password used for authentication. Self-update only field',
            type: 'Password',
            isRequired: true,
            access: access.canAccessToPasswordField,
            hooks: {
                validateInput: ({ resolvedData, fieldPath, existingItem, context }) => {
                    const phone = get(resolvedData, 'phone', get(existingItem, 'phone'))
                    if (resolvedData.hasOwnProperty(fieldPath) && resolvedData[fieldPath] &&
                        !isValidPassword(resolvedData[fieldPath], { phone })) {
                        throw new GQLError(ERRORS.PASSWORD_TOO_SIMPLE, context)
                    }
                },
            },
        },
        phone: {
            schemaDoc: 'User phone. Required for authentication, used as main contact info',
            type: 'Text',
            isRequired: true,
            access: access.canAccessToPhoneField,
            hooks: {
                resolveInput: ({ resolvedData, fieldPath }) => {
                    if (resolvedData.hasOwnProperty(fieldPath)) {
                        return normalizePhone(resolvedData[fieldPath]) || resolvedData[fieldPath]
                    } else {
                        return undefined
                    }
                },
                validateInput: ({ resolvedData, fieldPath, context }) => {
                    if (!resolvedData[fieldPath] && normalizePhone(resolvedData[fieldPath]) !== resolvedData[fieldPath]) {
                        throw new GQLError(ERRORS.INVALID_PHONE, context)
                    }
                },
            },
        },
        email: {
            schemaDoc: 'User email. Currently used only for internal Keystone mutations.',
            type: 'Text',
            isRequired: false,
            access: {
                read: false,
                create: false,
                update: false,
            },
        },
        isAdmin: {
            schemaDoc: 'Provides a superuser access to any schema data',
            type: 'Checkbox',
            isRequired: true,
            access: access.canAccessToAccessControlField,
            defaultValue: false,
        },
        isSupport: {
            schemaDoc: 'Provide access to admin-panel, where different task can be performed',
            type: 'Checkbox',
            isRequired: true,
            access: access.canAccessToAccessControlField,
            defaultValue: false,
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['phone'],
                condition: 'Q(deletedAt__isnull=True)',
                name: 'user_unique_phone',
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadUsers,
        create: access.canManageUsers,
        update: access.canManageUsers,
        delete: false,
        auth: true,
    },
})

module.exports = {
    User,
    ERRORS,
}
