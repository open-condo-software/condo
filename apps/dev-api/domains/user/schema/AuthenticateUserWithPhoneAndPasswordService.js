/**
 * Generated by `createservice user.AuthenticateUserWithPhoneAndPasswordService`
 */

const { GQLCustomSchema, getByCondition, getSchemaCtx } = require('@open-condo/keystone/schema')

const AuthenticateUserWithPhoneAndPasswordService = new GQLCustomSchema('AuthenticateUserWithPhoneAndPasswordService', {
    types: [
        {
            access: true,
            type: 'input AuthenticateUserWithPhoneAndPasswordInput { phone: String!, password: String! }',
        },
        {
            access: true,
            type: 'type AuthenticateUserWithPhoneAndPasswordOutput { token: String!, item: User! }',
        },
    ],
    
    mutations: [
        {
            access: true,
            schema: 'authenticateUserWithPhoneAndPassword(data: AuthenticateUserWithPhoneAndPasswordInput!): AuthenticateUserWithPhoneAndPasswordOutput',
            resolver: async (parent, args, context) => {
                const { data: { phone, password } } = args

                const user = await getByCondition('User', {
                    deletedAt: null,
                    phone,
                })

                if (!user) {
                    throw new Error('NOT FOUND')
                }

                const { keystone } = getSchemaCtx('User')
                const { auth: { User: { password: PasswordStrategy } } } = keystone
                const list = PasswordStrategy.getList()
                const { success } = await PasswordStrategy._matchItem(user, { password }, list.fieldsByPath['password'] )

                if (!success) {
                    throw new Error('NOT SUCCESS')
                }

                const token = await context.startAuthedSession({ item: user, list: keystone.lists['User'] })

                return {
                    token,
                    item: user,
                }
            },
        },
    ],
    
})

module.exports = {
    AuthenticateUserWithPhoneAndPasswordService,
}
