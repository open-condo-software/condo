/**
 * Generated by `createservice user.RegisterNewUserService --type mutations`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { ConfirmEmailAction } = require('@dev-api/domains/user/utils/serverSchema')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {
    NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY: {
        mutation: 'registerNewUser',
        variable: ['data', 'someVar'], // TODO(codegen): Provide path to a query/mutation variable, whose value caused this error. Remove this property, if variables are not relevant to this error
        code: BAD_USER_INPUT, // TODO(codegen): use one of the basic codes, declared in '@open-condo/keystone/errors'
        // type: NOT_FOUND, // TODO(codegen): use value from `constants/errors.js` either from 'common' or current domain
        message: 'Describe what happened for developer',
        messageForUser: 'api.user.registerNewUser.NAME_OF_ERROR_FOR_USAGE_INSIDE_THIS_MODULE_ONLY', // TODO(codegen): localized message for user, use translation files
    },
}

const RegisterNewUserService = new GQLCustomSchema('RegisterNewUserService', {
    types: [
        {
            access: true,
            type: 'input StartConfirmEmailActionInput { dv: Int!, sender: SenderFieldInput!, email: String!  }',
        },
        {
            access: true,
            type: 'type StartConfirmEmailActionOutput { success: Boolean!, email: String!  }',
        },
        {
            access: true,
            type: 'input RegisterNewUserInput { dv: Int!, sender: JSON!, name: String!, password: String!, confirmAction: String!  }',
        },
        {
            access: true,
            type: 'type RegisterNewUserOutput { id: String! }',
        },
    ],
    
    mutations: [
        {
            access: true,
            schema: 'startConfirmEmailAction(data: StartConfirmEmailActionInput!): StartConfirmEmailActionOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { dv, sender, email } } = args

                const action = await ConfirmEmailAction.create(context, {
                    dv,
                    sender,
                    email,
                })

                return { success: true, email: action.email }
            },
        },
        {
            access: true,
            schema: 'finishConfirmEmailAction(data: FinishConfirmEmailActionInput!): StartConfirmEmailActionOutput',
        },
        {
            access: true,
            schema: 'registerNewUser(data: RegisterNewUserInput!): RegisterNewUserOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data } = args
                return {
                    id: null,
                }
            },
        },
    ],
    
})

module.exports = {
    RegisterNewUserService,
}
