/**
 * Generated by `createservice user.RegisterNewUserService`
 */

const dayjs = require('dayjs')

const { GQLCustomSchema, getById } = require('@open-condo/keystone/schema')

const { User, ConfirmPhoneAction } = require('@dev-api/domains/user/utils/serverSchema')

const RegisterNewUserService = new GQLCustomSchema('RegisterNewUserService', {
    types: [
        {
            access: true,
            type: 'input RegisterNewUserInput { dv: Int!, sender: SenderFieldInput!, confirmPhoneActionId: String!, name: String!, password: String!}',
        },
    ],
    
    mutations: [
        {
            access: true,
            schema: 'registerNewUser(data: RegisterNewUserInput!): User',
            resolver: async (parent, args, context) => {
                const { data: { dv, sender, confirmPhoneActionId, name, password } } = args

                const currentTime = dayjs().toISOString()
                const confirmAction = await ConfirmPhoneAction.getOne(context, {
                    id: confirmPhoneActionId,
                    isVerified: true,
                    expiresAt_gte: currentTime,
                })

                if (!confirmAction) {
                    throw new Error('NOT FOUND')
                }


                const createdUser = await User.create(context, {
                    name,
                    dv,
                    sender,
                    phone: confirmAction.phone,
                    password,
                })

                return await getById('User', createdUser.id)
            },
        },
    ],
    
})

module.exports = {
    RegisterNewUserService,
}
