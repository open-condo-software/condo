/**
 * Generated by `createservice user.ConfirmPhoneActionService`
 */
const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')

const conf = require('@open-condo/config')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { CONFIRM_ACTION_TTL_IN_SEC, CONFIRM_ACTION_CODE_LENGTH } = require('@dev-api/domains/user/constants')
const { ConfirmPhoneAction } = require('@dev-api/domains/user/utils/serverSchema')

const SMS_WHITE_LIST = JSON.parse(conf['SMS_WHITE_LIST'] || '{}')

const ConfirmPhoneActionService = new GQLCustomSchema('ConfirmPhoneActionService', {
    types: [
        {
            access: true,
            type: 'input StartConfirmPhoneActionInput { dv: Int!, sender: SenderFieldInput!, phone: String! }',
        },
        {
            access: true,
            type: 'type StartConfirmPhoneActionOutput { actionId: String!, phone: String! }',
        },
        {
            access: true,
            type: 'input CompleteConfirmPhoneActionInput { dv: Int!, sender: SenderFieldInput!, actionId: String!, code: String! }',
        },
        {
            access: true,
            type: 'type CompleteConfirmPhoneActionOutput { status: String! }',
        },
    ],
    
    mutations: [
        {
            access: true,
            schema: 'startConfirmPhoneAction(data: StartConfirmPhoneActionInput!): StartConfirmPhoneActionOutput',
            resolver: async (parent, args, context) => {
                const { data: { dv, sender, phone } } = args
                const code = SMS_WHITE_LIST.hasOwnProperty(phone)
                    ? SMS_WHITE_LIST[phone]
                    : faker.random.numeric(CONFIRM_ACTION_CODE_LENGTH)

                const actionPayload = {
                    phone,
                    code,
                    expiresAt: dayjs().add(CONFIRM_ACTION_TTL_IN_SEC, 'second').toISOString(),
                    dv,
                    sender,
                }

                const createdAction = await ConfirmPhoneAction.create(context, actionPayload)

                return {
                    actionId: createdAction.id,
                    phone: createdAction.phone,
                }
            },
        },
        {
            access: true,
            schema: 'completeConfirmPhoneAction(data: CompleteConfirmPhoneActionInput!): CompleteConfirmPhoneActionOutput',
            resolver: async (parent, args, context) => {
                const { data: { dv, sender, actionId, code } } = args

                const currentTime = dayjs().toISOString()
                const requestedAction = await ConfirmPhoneAction.getOne(context, {
                    id: actionId,
                    code,
                    expiresAt_gt: currentTime,
                    isVerified: false,
                })

                if (!requestedAction) {
                    throw new Error('NOT FOUND')
                }

                await ConfirmPhoneAction.update(context, requestedAction.id, {
                    isVerified: true,
                    dv,
                    sender,
                })

                return {
                    status: 'success',
                }
            },
        },
    ],
})

module.exports = {
    ConfirmPhoneActionService,
}
