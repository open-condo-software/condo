/**
 * Generated by `createservice user.ConfirmEmailActionService '--type=mutations'`
 */

const dayjs = require('dayjs')

const conf = require('@open-condo/config')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT, TOO_MANY_REQUESTS } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { normalizeEmail } = require('@condo/domains/common/utils/mail')
const { sendMessage } = require('@dev-api/domains/common/utils/email')
const { extractReqLocale, getLocalizedMessage } = require('@dev-api/domains/common/utils/messages')
const access = require('@dev-api/domains/user/access/ConfirmEmailActionService')
const {
    CONFIRM_EMAIL_ACTION_DAILY_LIMIT_BY_EMAIL,
    CONFIRM_EMAIL_ACTION_DAILY_LIMIT_BY_IP,
    CONFIRM_EMAIL_ACTION_CODE_LENGTH,
    CONFIRM_EMAIL_ACTION_TTL_IN_SEC,
} = require('@dev-api/domains/user/constants')
const {
    INVALID_EMAIL,
    EMAILS_DAILY_LIMIT_REACHED,
} = require('@dev-api/domains/user/constants/errors')
const { RedisGuard } = require('@dev-api/domains/user/utils/guards')
const { generateNumericCode } = require('@dev-api/domains/user/utils/password')
const { ConfirmEmailAction } = require('@dev-api/domains/user/utils/serverSchema')

const EMAIL_WHITE_LIST = JSON.parse(conf['EMAIL_WHITE_LIST'] || '{}')
const IP_WHITE_LIST = JSON.parse(conf['IP_WHITE_LIST'] || '[]')

const ERRORS = {
    INVALID_EMAIL: {
        code: BAD_USER_INPUT,
        type: INVALID_EMAIL,
        message: 'The provided email is in the wrong format',
        messageForUser: 'errors.INVALID_EMAIL.message',
    },
    EMAILS_FOR_IP_DAY_LIMIT_REACHED: {
        code: TOO_MANY_REQUESTS,
        type: EMAILS_DAILY_LIMIT_REACHED,
        message: 'Your IP address has exceeded the daily email request limit',
        messageForUser: 'errors.EMAILS_DAILY_LIMIT_REACHED.ip.message',
    },
    EMAILS_FOR_PHONE_DAY_LIMIT_REACHED: {
        code: TOO_MANY_REQUESTS,
        type: EMAILS_DAILY_LIMIT_REACHED,
        message: 'The specified email has exceeded the daily SMS request limit',
        messageForUser: 'errors.EMAILS_DAILY_LIMIT_REACHED.email.message',
    },
}

const redisGuard = new RedisGuard()

async function checkDailyMailingLimits (email, context) {
    const rawIP = context.req.ip
    const ip = rawIP.split(':').pop()

    if (EMAIL_WHITE_LIST.hasOwnProperty(email) || IP_WHITE_LIST.includes(ip)) {
        return
    }

    const byIpCounter = await redisGuard.incrementDayCounter(`confirm_email_action:ip:${ip}`)
    if (byIpCounter > CONFIRM_EMAIL_ACTION_DAILY_LIMIT_BY_IP) {
        throw new GQLError(ERRORS.EMAILS_FOR_IP_DAY_LIMIT_REACHED, context)
    }

    const byEmailCounter = await redisGuard.incrementDayCounter(`confirm_email_action:email:${email}`)
    if (byEmailCounter > CONFIRM_EMAIL_ACTION_DAILY_LIMIT_BY_EMAIL) {
        throw new GQLError(ERRORS.EMAILS_FOR_PHONE_DAY_LIMIT_REACHED, context)
    }
}

const ConfirmEmailActionService = new GQLCustomSchema('ConfirmEmailActionService', {
    types: [
        {
            access: true,
            type: 'input StartConfirmEmailActionInput { dv: Int!, sender: SenderFieldInput!, email: String! }',
        },
        {
            access: true,
            type: 'type StartConfirmEmailActionOutput { actionId: String!, email: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canConfirmEmailAction,
            schema: 'startConfirmEmailAction(data: StartConfirmEmailActionInput!): StartConfirmEmailActionOutput',
            resolver: async (parent, args, context, info, extra = {}) => {
                const { data: { dv, sender, email } } = args

                const normalizedEmail = normalizeEmail(email)
                if (!normalizedEmail) {
                    throw new GQLError(ERRORS.INVALID_EMAIL, context)
                }

                await checkDailyMailingLimits(normalizedEmail, context)

                const code = EMAIL_WHITE_LIST.hasOwnProperty(normalizedEmail)
                    ? EMAIL_WHITE_LIST[normalizedEmail]
                    : generateNumericCode(CONFIRM_EMAIL_ACTION_CODE_LENGTH)

                const actionPayload = {
                    email: normalizedEmail,
                    code,
                    expiresAt: dayjs().add(CONFIRM_EMAIL_ACTION_TTL_IN_SEC, 'second').toISOString(),
                    dv,
                    sender,
                }

                const createdAction = await ConfirmEmailAction.create(context, actionPayload)

                const locale = extractReqLocale(context.req)
                const subject = getLocalizedMessage('messages.confirmEmailAction.subject', { locale })
                const body = getLocalizedMessage('messages.confirmEmailAction.body', {
                    locale,
                    values: { code },
                })

                await sendMessage(normalizedEmail, subject, body)

                return {
                    actionId: createdAction.id,
                    email: createdAction.email,
                }
            },
        },
    ],
    
})

module.exports = {
    ConfirmEmailActionService,
}
