/**
 * Generated by `createschema user.User 'name:Text;password:Text;phone:Text;email:Text'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const { faker } = require('@faker-js/faker')
const { countryPhoneData } = require('phone')
const { makeLoggedInClient, makeClient } = require('@open-condo/keystone/test.utils')

const { generateGQLTestUtils, throwIfError } = require('@open-condo/codegen/generate.test.utils')
const { getAppEnvValue } = require('@open-condo/cli')
const { generateNumericCode } = require('@dev-api/domains/user/utils/password')

const {
    User: UserGQL,
    ConfirmEmailAction: ConfirmEmailActionGQL,
    ConfirmPhoneAction: ConfirmPhoneActionGQL,
    REGISTER_NEW_USER_MUTATION,
    AUTHENTICATE_USER_WITH_PHONE_AND_PASSWORD_MUTATION,
    START_CONFIRM_PHONE_ACTION_MUTATION,
    COMPLETE_CONFIRM_PHONE_ACTION_MUTATION,
    START_CONFIRM_EMAIL_ACTION_MUTATION,
    COMPLETE_CONFIRM_EMAIL_ACTION_MUTATION,
} = require('@dev-api/domains/user/gql')
const conf = require("@open-condo/config");
const get = require('lodash/get')
const max = require('lodash/max')
const repeat = require('lodash/repeat')
const {
    CONFIRM_PHONE_ACTION_CODE_LENGTH,
    CONFIRM_PHONE_ACTION_TTL_IN_SEC,
    CONFIRM_EMAIL_ACTION_CODE_LENGTH,
    CONFIRM_EMAIL_ACTION_TTL_IN_SEC,
} = require("@dev-api/domains/user/constants");
const dayjs = require("dayjs");
const { generateGqlQueries } = require("@open-condo/codegen/generate.gql")
/* AUTOGENERATE MARKER <IMPORT> */

const User = generateGQLTestUtils(UserGQL)
const ConfirmEmailAction = generateGQLTestUtils(ConfirmEmailActionGQL)
const ConfirmPhoneAction = generateGQLTestUtils(ConfirmPhoneActionGQL)
/* AUTOGENERATE MARKER <CONST> */

const DEFAULT_TEST_ADMIN_IDENTITY = conf.DEFAULT_TEST_ADMIN_IDENTITY || '+79068888888'
const DEFAULT_TEST_ADMIN_SECRET = conf.DEFAULT_TEST_ADMIN_SECRET || '3a74b3f07978'

const CondoUser = generateGQLTestUtils(generateGqlQueries('User', '{ type name email meta deletedAt }'))

function createTestPhone () {
    const { country_code, mobile_begin_with, phone_number_lengths } = faker.helpers.arrayElement(countryPhoneData.filter(x => get(x, 'mobile_begin_with.length', 0) > 0))
    const length = max(phone_number_lengths)
    const code = String(faker.helpers.arrayElement(mobile_begin_with))

    return faker.phone.number('+' + country_code + code + repeat('#', length - code.length))
}

async function createTestUser (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        name: faker.internet.userName(),
        phone: createTestPhone(),
        password: faker.internet.password(),
        ...extraAttrs,
    }
    const obj = await User.create(client, attrs)
    return [obj, attrs]
}

async function updateTestUser (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await User.update(client, id, attrs)
    return [obj, attrs]
}

async function createTestConfirmEmailAction (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        email: faker.internet.email(),
        code: generateNumericCode(CONFIRM_EMAIL_ACTION_CODE_LENGTH),
        expiresAt: dayjs().add(CONFIRM_EMAIL_ACTION_TTL_IN_SEC, 's').toISOString(),
        ...extraAttrs,
    }
    const obj = await ConfirmEmailAction.create(client, attrs)
    return [obj, attrs]
}

async function updateTestConfirmEmailAction (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await ConfirmEmailAction.update(client, id, attrs)
    return [obj, attrs]
}


async function createTestConfirmPhoneAction(client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        phone: createTestPhone(),
        code: generateNumericCode(CONFIRM_PHONE_ACTION_CODE_LENGTH),
        expiresAt: dayjs().add(CONFIRM_PHONE_ACTION_TTL_IN_SEC, 's').toISOString(),
        ...extraAttrs,
    }
    const obj = await ConfirmPhoneAction.create(client, attrs)
    return [obj, attrs]
}

async function updateTestConfirmPhoneAction (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await ConfirmPhoneAction.update(client, id, attrs)
    return [obj, attrs]
}

async function authenticateUserWithPhoneAndPasswordByTestClient(client, attrs = {}) {
    if (!client) throw new Error('no client')

    const { data, errors } = await client.mutate(AUTHENTICATE_USER_WITH_PHONE_AND_PASSWORD_MUTATION, { data: attrs })
    throwIfError(data, errors)
    return [data.result, attrs]
}
/* AUTOGENERATE MARKER <FACTORY> */

async function startConfirmPhoneActionByTestClient(attrs = {}, client) {
    client ??= await makeClient()
    attrs.dv ??= 1
    attrs.sender ??= { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    attrs.phone ??= createTestPhone()

    const { data, errors } = await client.mutate(START_CONFIRM_PHONE_ACTION_MUTATION, {
        data: attrs
    })
    throwIfError(data, errors)

    return [data.result, attrs]
}

async function completeConfirmPhoneActionByTestClient(id, attrs = {}, client) {
    client ??= await makeClient()
    attrs.dv ??= 1
    attrs.sender ??= { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    attrs.actionId = id
    attrs.code ??= generateNumericCode(CONFIRM_PHONE_ACTION_CODE_LENGTH)

    const { data, errors } = await client.mutate(COMPLETE_CONFIRM_PHONE_ACTION_MUTATION, {
        data: attrs,
    })
    throwIfError(data, errors)

    return [data.result, attrs]
}

async function startConfirmEmailActionByTestClient(client, attrs = {}) {
    attrs.dv ??= 1
    attrs.sender ??= { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    attrs.email ??= faker.internet.email()

    const { data, errors } = await client.mutate(START_CONFIRM_EMAIL_ACTION_MUTATION, {
        data: attrs
    })
    throwIfError(data, errors)

    return [data.result, attrs]
}

async function completeConfirmEmailActionByTestClient(client, id, attrs = {}) {
    attrs.dv ??= 1
    attrs.sender ??= { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    attrs.actionId = id
    attrs.code ??= generateNumericCode(CONFIRM_EMAIL_ACTION_CODE_LENGTH)

    const { data, errors } = await client.mutate(COMPLETE_CONFIRM_EMAIL_ACTION_MUTATION, {
        data: attrs,
    })
    throwIfError(data, errors)

    return [data.result, attrs]
}

async function verifyEmailByTestClient(client, admin, email = null) {
    if (!email) {
        email = faker.internet.email()
    }
    const [{ actionId }] = await startConfirmEmailActionByTestClient(client, { email })
    // NOTE: admin client is used to read a confirmation code
    const { code } = await ConfirmEmailAction.getOne(admin, { id: actionId })
    await completeConfirmEmailActionByTestClient(client, actionId, { code })

    return { id: actionId }
}

async function registerNewTestUser (userAttrs = {}, client) {
    // NOTE: needed to read confirmation code
    const adminClient = await makeLoggedInAdminClient()

    userAttrs.sender ??= { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    userAttrs.password ??= faker.internet.password()
    userAttrs.phone ??= createTestPhone()
    userAttrs.name ??= faker.internet.userName()
    client ??= await makeClient()

    let { sender, name, phone, password, actionId } = userAttrs

    if (!actionId) {
         [{actionId}] = await startConfirmPhoneActionByTestClient({
            sender,
            phone,
        }, client)

        const { code } = await ConfirmPhoneAction.getOne(adminClient, {id: actionId})

        await completeConfirmPhoneActionByTestClient(actionId, {
            sender,
            code,
        }, client)
    }


    const { data, errors } = await client.mutate(REGISTER_NEW_USER_MUTATION, {
        data: { dv: 1, sender, confirmPhoneAction: { id: actionId }, name, password }
    })

    throwIfError(data, errors)

    const user = data.result

    return [user, userAttrs]
}

async function makeLoggedInAdminClient () {
    return await makeLoggedInClient({ phone: DEFAULT_TEST_ADMIN_IDENTITY, password: DEFAULT_TEST_ADMIN_SECRET, })
}

async function makeLoggedInCondoAdminClient () {
    const serverUrl = conf['CONDO_DOMAIN']
    const email = await getAppEnvValue('condo', 'DEFAULT_TEST_ADMIN_IDENTITY')
    const password = await getAppEnvValue('condo', 'DEFAULT_TEST_ADMIN_SECRET')
    return await makeLoggedInClient({ email, password }, serverUrl)
}

async function makeRegisteredAndLoggedInUser () {
    const client = await makeClient()
    const [user, userAttrs] = await registerNewTestUser({}, client)
    Object.assign(user, userAttrs)
    client.user = user
    await authenticateUserWithPhoneAndPasswordByTestClient(client, {
        phone: userAttrs.phone,
        password: userAttrs.password,
    })

    return client
}

async function makeLoggedInSupportClient () {
    const admin = await makeLoggedInAdminClient()
    const client = await makeRegisteredAndLoggedInUser()
    await updateTestUser(admin, client.user.id, {
        isSupport: true
    })

    return client
}

module.exports = {
    User, createTestUser, updateTestUser,
    ConfirmPhoneAction, createTestConfirmPhoneAction, updateTestConfirmPhoneAction,
    ConfirmEmailAction, createTestConfirmEmailAction, updateTestConfirmEmailAction,
    startConfirmPhoneActionByTestClient, completeConfirmPhoneActionByTestClient,
    startConfirmEmailActionByTestClient, completeConfirmEmailActionByTestClient, verifyEmailByTestClient,
    registerNewTestUser, authenticateUserWithPhoneAndPasswordByTestClient,
    makeLoggedInAdminClient, makeRegisteredAndLoggedInUser, makeLoggedInSupportClient,
    createTestPhone,
    makeLoggedInCondoAdminClient,
    CondoUser,
/* AUTOGENERATE MARKER <EXPORTS> */
}
