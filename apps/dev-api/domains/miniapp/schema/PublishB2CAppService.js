/**
 * Generated by `createservice miniapp.PublishB2CAppService`
 */

const got = require('got')

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { developmentClient, productionClient } = require('@dev-api/domains/common/utils/serverClients')
const { CondoB2CAppGql } = require('@dev-api/domains/condo/gql')
const access = require('@dev-api/domains/miniapp/access/PublishB2CAppService')
const { DEFAULT_COLOR_SCHEMA } = require('@dev-api/domains/miniapp/constants/b2c')
const { AVAILABLE_ENVIRONMENTS, PROD_ENVIRONMENT } = require('@dev-api/domains/miniapp/constants/environments')
const { FIRST_PUBLISH_WITHOUT_INFO, APP_NOT_FOUND } = require('@dev-api/domains/miniapp/constants/errors')
const { B2CApp } = require('@dev-api/domains/miniapp/utils/serverSchema/index')

const ERRORS = {
    FIRST_PUBLISH_WITHOUT_INFO: {
        code: BAD_USER_INPUT,
        type: FIRST_PUBLISH_WITHOUT_INFO,
        message: 'The first publication of the application should include information about the application',
        messageForUser: 'errors.FIRST_PUBLISH_WITHOUT_INFO.message',
    },
    APP_NOT_FOUND: {
        code: BAD_USER_INPUT,
        type: APP_NOT_FOUND,
        message: 'The application with the specified ID was not found',
        messageForUser: 'errors.APP_NOT_FOUND.message',
    },
}

const PublishB2CAppService = new GQLCustomSchema('PublishB2CAppService', {
    types: [
        {
            access: true,
            type: 'input B2CAppPublishOptions { info: Boolean, buildVersion: String }',
        },
        {
            access: true,
            type: `enum AppEnvironment { ${AVAILABLE_ENVIRONMENTS.join(' ')} }`,
        },
        {
            access: true,
            type: 'input PublishB2CAppInput { dv: Int!, sender: SenderFieldInput!, app: B2CAppWhereUniqueInput!, environment: AppEnvironment!, options: B2CAppPublishOptions! }',
        },
        {
            access: true,
            type: 'type PublishB2CAppOutput { success: Boolean! }',
        },
    ],
    
    mutations: [
        {
            access: access.canPublishB2CApp,
            schema: 'publishB2CApp(data: PublishB2CAppInput!): PublishB2CAppOutput',
            resolver: async (parent, args, context) => {
                const { data: { app: { id }, options, environment, dv, sender } } = args
                const exportField = `${environment}ExportId`

                const app = await B2CApp.getOne(context, { id, deletedAt: null })
                if (!app) {
                    throw new GQLError(ERRORS.APP_NOT_FOUND, context)
                }
                if (!app[exportField] && !options.info) {
                    throw new GQLError(ERRORS.FIRST_PUBLISH_WITHOUT_INFO, context)
                }

                const bot = environment === PROD_ENVIRONMENT ? productionClient : developmentClient

                // Step 1. Create / update app if needed
                if (options.info) {
                    const appPayload = {
                        dv,
                        sender,
                        name: app.name,
                        developer: app.developer || app.createdBy.name,
                        colorSchema: DEFAULT_COLOR_SCHEMA,
                        logo: bot.createUploadFile(app.logo
                            ? got.stream(app.logo.publicUrl)
                            : undefined
                        ),
                    }

                    if (!app[exportField]) {
                        const res = await bot.createModel({
                            modelGql: CondoB2CAppGql,
                            createInput: appPayload,
                        })
                        console.log(res)
                    }
                }

                return {
                    success: false,
                }
            },
        },
    ],
    
})

module.exports = {
    PublishB2CAppService,
}
