/**
 * Generated by `createservice miniapp.AllB2CAppPropertiesService '--type=queries'`
 */

const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')

const { GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
    expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const { APP_NOT_FOUND } = require('@dev-api/domains/miniapp/constants/errors')
const { PROD_ENVIRONMENT, DEV_ENVIRONMENT } = require('@dev-api/domains/miniapp/constants/publishing')
const { PUBLISH_REQUEST_APPROVED_STATUS } = require('@dev-api/domains/miniapp/constants/publishing')
const {
    createTestB2CApp,
    updateCondoB2CApp,
    publishB2CAppByTestClient,
    B2CApp,
    createCondoB2CAppProperties,
    createTestB2CAppPublishRequest,
    allB2CAppPropertiesByTestClient,
} = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
    makeLoggedInCondoAdminClient,
} = require('@dev-api/domains/user/utils/testSchema')

 
describe('AllB2CAppPropertiesService', () => {
    let condoAdmin
    let admin
    let support
    let user
    let anotherUser
    let anonymous

    let app
    let devProperties
    let prodProperties
    beforeAll(async () => {
        condoAdmin = await makeLoggedInCondoAdminClient()
        admin = await makeLoggedInAdminClient()
        support = await makeLoggedInSupportClient()
        user = await makeRegisteredAndLoggedInUser()
        anotherUser = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient();

        [app] = await createTestB2CApp(user)
        await createTestB2CAppPublishRequest(support, app, {
            isAppTested: true,
            isContractSigned: true,
            isInfoApproved: true,
            status: PUBLISH_REQUEST_APPROVED_STATUS,
        })

        // NOTE: Code below is hacky :),
        // since in test environment single condo instance is used as prod and dev stand at the same time,
        // publish mutation will merge this case into single app,
        // so allProperties query will return properties from both stands, so we'll have x2 results
        // To achieve separation I'll explicitly set importId for apps to null, so findExportedModel will work as for separate stands
        await publishB2CAppByTestClient(user, app)
        app = await B2CApp.getOne(user, { id: app.id })
        await updateCondoB2CApp(condoAdmin, { id: app.developmentExportId }, { importId: null, importRemoteSystem: null })
        await publishB2CAppByTestClient(user, app, { info: true }, PROD_ENVIRONMENT)
        app = await B2CApp.getOne(user, { id: app.id })
        await updateCondoB2CApp(condoAdmin, { id: app.productionExportId }, { importId: null, importRemoteSystem: null });

        [devProperties] = await createCondoB2CAppProperties(condoAdmin, { id: app.developmentExportId }, 35);
        [prodProperties] = await createCondoB2CAppProperties(condoAdmin, { id: app.productionExportId }, 35)
    })
    describe('Access tests', () => {
        test('Admin can see properties of all apps', async () => {
            const [devResult] = await allB2CAppPropertiesByTestClient(admin, app, DEV_ENVIRONMENT)
            expect(devResult).toHaveProperty(['meta', 'count'], 35)
            expect(devResult).toHaveProperty('objs', expect.arrayContaining(devProperties))
            const [prodResult] = await allB2CAppPropertiesByTestClient(admin, app, PROD_ENVIRONMENT)
            expect(prodResult).toHaveProperty(['meta', 'count'], 35)
            expect(prodResult).toHaveProperty('objs', expect.arrayContaining(prodProperties))
        })
        test('Support can see properties of all apps', async () => {
            const [devResult] = await allB2CAppPropertiesByTestClient(support, app, DEV_ENVIRONMENT)
            expect(devResult).toHaveProperty(['meta', 'count'], 35)
            expect(devResult).toHaveProperty('objs', expect.arrayContaining(devProperties))
            const [prodResult] = await allB2CAppPropertiesByTestClient(support, app, PROD_ENVIRONMENT)
            expect(prodResult).toHaveProperty(['meta', 'count'], 35)
            expect(prodResult).toHaveProperty('objs', expect.arrayContaining(prodProperties))
        })
        describe('User', () => {
            test('Can see properties of app he created', async () => {
                const [devResult] = await allB2CAppPropertiesByTestClient(user, app, DEV_ENVIRONMENT)
                expect(devResult).toHaveProperty(['meta', 'count'], 35)
                expect(devResult).toHaveProperty('objs', expect.arrayContaining(devProperties))
                const [prodResult] = await allB2CAppPropertiesByTestClient(user, app, PROD_ENVIRONMENT)
                expect(prodResult).toHaveProperty(['meta', 'count'], 35)
                expect(prodResult).toHaveProperty('objs', expect.arrayContaining(prodProperties))
            })
            test('Cannot see properties of another apps', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await allB2CAppPropertiesByTestClient(anotherUser, app, DEV_ENVIRONMENT)
                })
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await allB2CAppPropertiesByTestClient(anotherUser, app, PROD_ENVIRONMENT)
                })
            })
        })
        test('Anonymous cannot see any properties', async () => {
            await expectToThrowAuthenticationErrorToResult(async () => {
                await allB2CAppPropertiesByTestClient(anonymous, app, DEV_ENVIRONMENT)
            })
            await expectToThrowAuthenticationErrorToResult(async () => {
                await allB2CAppPropertiesByTestClient(anonymous, app, PROD_ENVIRONMENT)
            })
        })
    })
    describe('Logic tests', () => {
        test('Meta count must not change because of pagination', async () => {
            const [devResult] = await allB2CAppPropertiesByTestClient(user, app, DEV_ENVIRONMENT, {
                first: 10,
                skip: 5,
            })
            expect(devResult).toHaveProperty(['meta', 'count'], 35)
            expect(devResult).toHaveProperty('objs')
            expect(devResult.objs).toHaveLength(10)
        })
        test('Must throw APP_NOT_FOUND error, if invalid app id passed', async () => {
            await expectToThrowGQLError(async () => {
                await allB2CAppPropertiesByTestClient(support, { id: faker.datatype.uuid() }, DEV_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')
            await expectToThrowGQLError(async () => {
                await allB2CAppPropertiesByTestClient(support, { id: faker.datatype.uuid() }, PROD_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')
        })
        test('Must throw APP_NOT_FOUND error, if app has no export id field', async () => {
            const [devOnlyApp] = await createTestB2CApp(user)
            await expectToThrowGQLError(async () => {
                await allB2CAppPropertiesByTestClient(user, devOnlyApp, DEV_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')

            await publishB2CAppByTestClient(user, devOnlyApp)
            const updatedDevOnlyApp = await B2CApp.getOne(user, { id: devOnlyApp.id })
            expect(updatedDevOnlyApp).toHaveProperty('developmentExportId', expect.stringContaining(''))
            expect(updatedDevOnlyApp).toHaveProperty('productionExportId', null)

            const [devResult] = await allB2CAppPropertiesByTestClient(user, updatedDevOnlyApp, DEV_ENVIRONMENT)
            expect(devResult).toHaveProperty(['meta', 'count'], 0)
            expect(devResult).toHaveProperty('objs', [])

            await expectToThrowGQLError(async () => {
                await allB2CAppPropertiesByTestClient(user, updatedDevOnlyApp, PROD_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')
        })
        test('Must throw APP_NOT_FOUND error, if app was deleted in condo', async () => {
            let [app] = await createTestB2CApp(user)
            await createTestB2CAppPublishRequest(support, app, {
                isAppTested: true,
                isContractSigned: true,
                isInfoApproved: true,
                status: PUBLISH_REQUEST_APPROVED_STATUS,
            })
            await publishB2CAppByTestClient(user, app)
            app = await B2CApp.getOne(user, { id: app.id })
            await updateCondoB2CApp(condoAdmin, { id: app.developmentExportId }, { importId: null, importRemoteSystem: null })
            await publishB2CAppByTestClient(user, app, { info: true }, PROD_ENVIRONMENT)
            app = await B2CApp.getOne(user, { id: app.id })
            await updateCondoB2CApp(condoAdmin, { id: app.productionExportId }, { importId: null, importRemoteSystem: null })

            const [devResult] = await allB2CAppPropertiesByTestClient(user, app, DEV_ENVIRONMENT)
            expect(devResult).toHaveProperty(['meta', 'count'], 0)
            const [prodResult] = await allB2CAppPropertiesByTestClient(user, app, PROD_ENVIRONMENT)
            expect(prodResult).toHaveProperty(['meta', 'count'], 0)

            await updateCondoB2CApp(condoAdmin, { id: app.developmentExportId }, {
                deletedAt: dayjs().toISOString(),
            })

            await expectToThrowGQLError(async () => {
                await allB2CAppPropertiesByTestClient(user, app, DEV_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')
            const [secondProdResult] = await allB2CAppPropertiesByTestClient(user, app, PROD_ENVIRONMENT)
            expect(secondProdResult).toHaveProperty(['meta', 'count'], 0)

            await updateCondoB2CApp(condoAdmin, { id: app.productionExportId }, {
                deletedAt: dayjs().toISOString(),
            })
            await expectToThrowGQLError(async () => {
                await allB2CAppPropertiesByTestClient(user, app, DEV_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')
            await expectToThrowGQLError(async () => {
                await allB2CAppPropertiesByTestClient(user, app, PROD_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')
        })
        test('Pagination must work', async () => {
            const [firstDevResult] = await allB2CAppPropertiesByTestClient(user, app, DEV_ENVIRONMENT, {
                first: 20,
                skip: 0,
            })
            expect(firstDevResult.objs).toHaveLength(20)
            const [secondDevResult] = await allB2CAppPropertiesByTestClient(user, app, DEV_ENVIRONMENT, {
                first: 20,
                skip: 20,
            })
            expect(secondDevResult.objs).toHaveLength(15)
            const totalDevResult = firstDevResult.objs.concat(secondDevResult.objs)
            expect(totalDevResult).toEqual(expect.arrayContaining(devProperties))

            const [firstProdResult] = await allB2CAppPropertiesByTestClient(user, app, PROD_ENVIRONMENT, {
                first: 20,
                skip: 0,
            })
            expect(firstProdResult.objs).toHaveLength(20)
            const [secondProdResult] = await allB2CAppPropertiesByTestClient(user, app, PROD_ENVIRONMENT, {
                first: 20,
                skip: 20,
            })
            expect(secondProdResult.objs).toHaveLength(15)
            const totalProdResult = firstProdResult.objs.concat(secondProdResult.objs)
            expect(totalProdResult).toEqual(expect.arrayContaining(prodProperties))
        })
    })
})