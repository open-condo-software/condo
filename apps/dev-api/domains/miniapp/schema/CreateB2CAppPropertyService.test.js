/**
 * Generated by `createservice miniapp.CreateB2CAppPropertyService`
 */

const { faker } = require('@faker-js/faker')
const dayjs = require('dayjs')

const { GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const {
    makeClient,
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
    expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const { APP_NOT_FOUND } = require('@dev-api/domains/miniapp/constants/errors')
const {
    PROD_ENVIRONMENT,
    DEV_ENVIRONMENT,
    PUBLISH_REQUEST_APPROVED_STATUS,
} = require('@dev-api/domains/miniapp/constants/publishing')
const {
    createTestB2CApp,
    createTestB2CAppPublishRequest,
    publishB2CAppByTestClient,
    createB2CAppPropertyByTestClient,
    CondoB2CAppProperty,
    B2CApp,
    updateCondoB2CApp,
} = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
    makeLoggedInCondoAdminClient,
} = require('@dev-api/domains/user/utils/testSchema')

describe('CreateB2CAppPropertyService', () => {
    let admin
    let support
    let user
    let anotherUser
    let anonymous
    let condoAdmin
    let app
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeLoggedInSupportClient()
        user = await makeRegisteredAndLoggedInUser()
        anotherUser = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient()
        condoAdmin = await makeLoggedInCondoAdminClient();

        [app] = await createTestB2CApp(user)
        await publishB2CAppByTestClient(user, app)
        await createTestB2CAppPublishRequest(support, app, {
            isAppTested: true,
            isContractSigned: true,
            isInfoApproved: true,
            status: PUBLISH_REQUEST_APPROVED_STATUS,
        })
        await publishB2CAppByTestClient(user, app, { info: true }, PROD_ENVIRONMENT)
    })
    describe('Access tests', () => {
        test('Admin can create property for any app', async () => {
            const [devProperty] = await createB2CAppPropertyByTestClient(admin, app, DEV_ENVIRONMENT)
            expect(devProperty).toHaveProperty('id')
            expect(devProperty).toHaveProperty('address')
            const readDevProperty = await CondoB2CAppProperty.getOne(condoAdmin, { id: devProperty.id })
            expect(readDevProperty).toEqual(expect.objectContaining(devProperty))

            const [prodProperty] = await createB2CAppPropertyByTestClient(admin, app, PROD_ENVIRONMENT)
            expect(prodProperty).toHaveProperty('id')
            expect(prodProperty).toHaveProperty('address')
            const readProdProperty = await CondoB2CAppProperty.getOne(condoAdmin, { id: prodProperty.id })
            expect(readProdProperty).toEqual(expect.objectContaining(prodProperty))
        })
        test('Support can create property for any app', async () => {
            const [devProperty] = await createB2CAppPropertyByTestClient(support, app, DEV_ENVIRONMENT)
            expect(devProperty).toHaveProperty('id')
            expect(devProperty).toHaveProperty('address')
            const readDevProperty = await CondoB2CAppProperty.getOne(condoAdmin, { id: devProperty.id })
            expect(readDevProperty).toEqual(expect.objectContaining(devProperty))

            const [prodProperty] = await createB2CAppPropertyByTestClient(support, app, PROD_ENVIRONMENT)
            expect(prodProperty).toHaveProperty('id')
            expect(prodProperty).toHaveProperty('address')
            const readProdProperty = await CondoB2CAppProperty.getOne(condoAdmin, { id: prodProperty.id })
            expect(readProdProperty).toEqual(expect.objectContaining(prodProperty))
        })
        describe('User', () => {
            test('Can create properties for app he created', async () => {
                const [devProperty] = await createB2CAppPropertyByTestClient(user, app, DEV_ENVIRONMENT)
                expect(devProperty).toHaveProperty('id')
                expect(devProperty).toHaveProperty('address')
                const readDevProperty = await CondoB2CAppProperty.getOne(condoAdmin, { id: devProperty.id })
                expect(readDevProperty).toEqual(expect.objectContaining(devProperty))

                const [prodProperty] = await createB2CAppPropertyByTestClient(user, app, PROD_ENVIRONMENT)
                expect(prodProperty).toHaveProperty('id')
                expect(prodProperty).toHaveProperty('address')
                const readProdProperty = await CondoB2CAppProperty.getOne(condoAdmin, { id: prodProperty.id })
                expect(readProdProperty).toEqual(expect.objectContaining(prodProperty))
            })
            test('Cannot for other apps', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await createB2CAppPropertyByTestClient(anotherUser, app, DEV_ENVIRONMENT)
                })
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await createB2CAppPropertyByTestClient(anotherUser, app, PROD_ENVIRONMENT)
                })
            })
        })
        test('Anonymous cannot create any property', async () => {
            await expectToThrowAuthenticationErrorToResult(async () => {
                await createB2CAppPropertyByTestClient(anonymous, app, DEV_ENVIRONMENT)
            })
            await expectToThrowAuthenticationErrorToResult(async () => {
                await createB2CAppPropertyByTestClient(anonymous, app, PROD_ENVIRONMENT)
            })
        })
    })
    describe('Logic test',  () => {
        test('Must throw error if app does not exist in dev-api', async () => {
            await expectToThrowGQLError(async () => {
                await createB2CAppPropertyByTestClient(support, { id: faker.datatype.uuid() }, DEV_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')
            await expectToThrowGQLError(async () => {
                await createB2CAppPropertyByTestClient(support, { id: faker.datatype.uuid() }, PROD_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')
        })
        test('Must throw error if app does not exist in condo', async () => {
            const [app] = await createTestB2CApp(user)
            await publishB2CAppByTestClient(user, app)
            await createTestB2CAppPublishRequest(support, app, {
                isAppTested: true,
                isContractSigned: true,
                isInfoApproved: true,
                status: PUBLISH_REQUEST_APPROVED_STATUS,
            })
            await publishB2CAppByTestClient(user, app, { info: true }, PROD_ENVIRONMENT)
            const updatedApp = await B2CApp.getOne(user, { id: app.id })
            // NOTE: prod and dev apps are same in test environment, since single condo instance is acting for both envs
            await updateCondoB2CApp(condoAdmin, { id: updatedApp.developmentExportId }, {
                deletedAt: dayjs().toISOString(),
            })

            await expectToThrowGQLError(async () => {
                await createB2CAppPropertyByTestClient(support, app, DEV_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')
            await expectToThrowGQLError(async () => {
                await createB2CAppPropertyByTestClient(support, app, PROD_ENVIRONMENT)
            }, {
                code: BAD_USER_INPUT,
                type: APP_NOT_FOUND,
            }, 'result')
        })
    })
})
