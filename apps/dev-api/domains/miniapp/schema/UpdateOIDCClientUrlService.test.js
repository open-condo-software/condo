/**
 * Generated by `createservice miniapp.UpdateOIDCClientUrlService`
 */
const omit = require('lodash/omit')

const { GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
    expectToThrowGQLError,
} = require('@open-condo/keystone/test.utils')

const { INVALID_URL, HTTPS_ONLY  } = require('@dev-api/domains/miniapp/constants/errors')
const { PROD_ENVIRONMENT } = require('@dev-api/domains/miniapp/constants/publishing')
const {
    updateOIDCClientUrlByTestClient,
    createTestB2CApp,
    createOIDCClientByTestClient,
    CondoOIDCClient,
} = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
    makeLoggedInCondoAdminClient,
} = require('@dev-api/domains/user/utils/testSchema')
 
describe('UpdateOIDCClientUrlService', () => {
    let admin
    let support
    let b2cUser
    let b2cApp
    let b2bUser
    let anonymous
    let condoAdmin
    let oidcClient
    let initialCondoOidcClient
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeLoggedInSupportClient()
        b2cUser = await makeRegisteredAndLoggedInUser()
        b2bUser = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient()
        condoAdmin = await makeLoggedInCondoAdminClient();

        [b2cApp] = await createTestB2CApp(b2cUser);
        [oidcClient] = await createOIDCClientByTestClient(b2cUser, b2cApp)
        initialCondoOidcClient = await CondoOIDCClient.getOne(condoAdmin, { id: oidcClient.id })
    })
    describe('Access tests', () => {
        test('Admin can update url of any app', async () => {
            const [updatedClient] = await updateOIDCClientUrlByTestClient(admin, b2cApp)
            expect(updatedClient).toHaveProperty('id', initialCondoOidcClient.id)
        })
        test('Support can update url of any app', async () => {
            const [updatedClient] = await updateOIDCClientUrlByTestClient(support, b2cApp)
            expect(updatedClient).toHaveProperty('id', initialCondoOidcClient.id)
        })
        describe('User', () => {
            test('Can update url for app he created', async () => {
                const [updatedClient] = await updateOIDCClientUrlByTestClient(b2cUser, b2cApp)
                expect(updatedClient).toHaveProperty('id', initialCondoOidcClient.id)
            })
            test('Cannot update url for other apps', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await updateOIDCClientUrlByTestClient(b2bUser, b2cApp)
                })
            })
        })
        test('Anonymous cannot update url for any app', async () => {
            await expectToThrowAuthenticationErrorToResult(async () => {
                await updateOIDCClientUrlByTestClient(anonymous, b2cApp)
            })
        })
        describe('Logic tests', () => {
            test('Must change payload field properly', async () => {
                const [updatedClient, attrs] = await updateOIDCClientUrlByTestClient(b2cUser, b2cApp)
                expect(updatedClient).toHaveProperty('id', initialCondoOidcClient.id)
                expect(updatedClient).toHaveProperty('clientId', initialCondoOidcClient.clientId)
                expect(updatedClient).toHaveProperty('redirectUri', attrs.redirectUri)

                const updatedCondoClient = await CondoOIDCClient.getOne(condoAdmin, { id: updatedClient.id })
                const initialPayload = omit(initialCondoOidcClient.payload, 'redirect_uris')
                const updatedPayload = omit(updatedCondoClient.payload, 'redirect_uris')
                expect(initialPayload).toEqual(updatedPayload)
                expect(updatedCondoClient).toHaveProperty(['payload', 'redirect_uris'], [updatedClient.redirectUri])
            })
            describe('Must accept only valid urls', () => {
                const validCases = [
                    ['https://jwt.io/'],
                    ['https://github.com/open-condo-software'],
                    ['http://localhost:4005/'],
                    ['https://jwt.io/route?param=123'],
                ]
                const invalidCases = [
                    ['google.com'],
                    ['ftp://jwt.io'],
                    ['some_string'],
                ]
                test.each(validCases)('%p must pass', async (redirectUri) => {
                    const [updatedClient] = await updateOIDCClientUrlByTestClient(b2cUser, b2cApp, {
                        redirectUri,
                    })
                    expect(updatedClient).toHaveProperty('redirectUri', redirectUri)
                })
                test.each(invalidCases)('%p must fail', async (redirectUri) => {
                    await expectToThrowGQLError(async () => {
                        await updateOIDCClientUrlByTestClient(b2cUser, b2cApp, {
                            redirectUri,
                        })
                    }, {
                        code: BAD_USER_INPUT,
                        type: INVALID_URL,
                    }, 'result')
                })
            })
            test('Must accept only https for production', async () => {
                const redirectUri = 'http://jwt.io/callback'
                const [updatedClient] = await updateOIDCClientUrlByTestClient(b2cUser, b2cApp, {
                    redirectUri,
                })
                expect(updatedClient).toHaveProperty('redirectUri', redirectUri)

                // NOTE: In test env both condo stands are the same, so no need to create another OIDC Client here
                await expectToThrowGQLError(async () => {
                    await updateOIDCClientUrlByTestClient(b2cUser, b2cApp, {
                        redirectUri,
                        environment: PROD_ENVIRONMENT,
                    })
                }, {
                    code: BAD_USER_INPUT,
                    type: HTTPS_ONLY,
                }, 'result')
            })
        })
    })
})