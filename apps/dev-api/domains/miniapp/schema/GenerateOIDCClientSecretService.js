/**
 * Generated by `createservice miniapp.GenerateOIDCClientSecretService`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { REMOTE_SYSTEM } = require('@dev-api/domains/common/constants/common')
const { productionClient, developmentClient } = require('@dev-api/domains/common/utils/serverClients')
const { CondoOIDCClientGql } = require('@dev-api/domains/condo/gql')
const access = require('@dev-api/domains/miniapp/access/GenerateOIDCClientSecretService')
const { OIDC_CLIENT_NOT_FOUND } = require('@dev-api/domains/miniapp/constants/errors')
const { PROD_ENVIRONMENT } = require('@dev-api/domains/miniapp/constants/publishing')
const { generateClientSecret } = require('@dev-api/domains/miniapp/utils/serverSchema/oidcClient')

const ERRORS = {
    OIDC_CLIENT_NOT_FOUND: {
        code: BAD_USER_INPUT,
        type: OIDC_CLIENT_NOT_FOUND,
        message: 'OIDC client for the specified application was not found',
        messageForUser: 'errors.OIDC_CLIENT_NOT_FOUND.message',
    },
}


const GenerateOIDCClientSecretService = new GQLCustomSchema('GenerateOIDCClientSecretService', {
    types: [
        {
            access: true,
            type: 'input GenerateOIDCClientSecretInput { dv: Int!, sender: SenderFieldInput!, app: AppWhereUniqueInput!, environment: AppEnvironment! }',
        },
    ],
    mutations: [
        {
            access: access.canGenerateOIDCClientSecret,
            schema: 'generateOIDCClientSecret(data: GenerateOIDCClientSecretInput!): OIDCClientWithSecret',
            resolver: async (parent, args, context) => {
                const { data: { app, environment, dv, sender } } = args

                const serverClient = environment === PROD_ENVIRONMENT
                    ? productionClient
                    : developmentClient

                const oidcClients = await serverClient.getModels({
                    modelGql: CondoOIDCClientGql,
                    where: {
                        clientId: app.id,
                        importId: app.id,
                        importRemoteSystem: REMOTE_SYSTEM,
                    },
                })

                if (!oidcClients.length) {
                    throw new GQLError(ERRORS.OIDC_CLIENT_NOT_FOUND, context)
                }

                const oidcClient = oidcClients[0]
                const updatedClient = await serverClient.updateModel({
                    modelGql: CondoOIDCClientGql,
                    id: oidcClient.id,
                    updateInput: {
                        dv,
                        sender,
                        payload: { ...oidcClient.payload, client_secret: generateClientSecret() },
                    },
                })

                return {
                    id: updatedClient.id,
                    clientId: updatedClient.clientId,
                    clientSecret: updatedClient.payload.client_secret,
                    redirectUri: updatedClient.payload.redirect_uris[0],
                }
            },
        },
    ],
    
})

module.exports = {
    GenerateOIDCClientSecretService,
}
