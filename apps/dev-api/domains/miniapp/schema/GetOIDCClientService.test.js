/**
 * Generated by `createservice miniapp.GetOIDCClientService '--type=queries'`
 */

const { makeClient } = require('@open-condo/keystone/test.utils')
const { expectToThrowAccessDeniedErrorToResult, expectToThrowAuthenticationErrorToResult } = require('@open-condo/keystone/test.utils')

const { getOIDCClientByTestClient, createTestB2CApp, createOIDCClientByTestClient } = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
} = require('@dev-api/domains/user/utils/testSchema')
 
describe('GetOIDCClientService', () => {
    let admin
    let support
    let b2cUser
    let b2cApp
    let b2bUser
    let anonymous
    let oidcClient
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeLoggedInSupportClient()
        b2cUser = await makeRegisteredAndLoggedInUser()
        b2bUser = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient();

        [b2cApp] = await createTestB2CApp(b2cUser);
        [oidcClient] = await createOIDCClientByTestClient(b2cUser, b2cApp)
    })
    describe('Access tests', () => {
        test('Admin can get OIDC client of any app', async () => {
            const [readClient] = await getOIDCClientByTestClient(admin, b2cApp)
            expect(readClient).toHaveProperty('id', oidcClient.id)
            expect(readClient).toHaveProperty('clientId', oidcClient.clientId)
            expect(readClient).toHaveProperty('redirectUri', oidcClient.redirectUri)
        })
        test('Support can get OIDC client of any app', async () => {
            const [readClient] = await getOIDCClientByTestClient(support, b2cApp)
            expect(readClient).toHaveProperty('id', oidcClient.id)
            expect(readClient).toHaveProperty('clientId', oidcClient.clientId)
            expect(readClient).toHaveProperty('redirectUri', oidcClient.redirectUri)
        })
        describe('User', () => {
            test('Can get OIDC client of app he created', async () => {
                const [readClient] = await getOIDCClientByTestClient(b2cUser, b2cApp)
                expect(readClient).toHaveProperty('id', oidcClient.id)
                expect(readClient).toHaveProperty('clientId', oidcClient.clientId)
                expect(readClient).toHaveProperty('redirectUri', oidcClient.redirectUri)
            })
            test('Cannot for other apps', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await getOIDCClientByTestClient(b2bUser, b2cApp)
                })
            })
        })
        test('Anonymous cannot get any OIDC client', async () => {
            await expectToThrowAuthenticationErrorToResult(async () => {
                await getOIDCClientByTestClient(anonymous, b2cApp)
            })
        })
    })
    describe('Logic tests', () => {
        test('Must not contain extra fields such as clientSecret', async () => {
            const [readClient] = await getOIDCClientByTestClient(b2cUser, b2cApp)
            expect(readClient).toEqual({
                id: oidcClient.id,
                clientId: oidcClient.clientId,
                redirectUri: oidcClient.redirectUri,
            })
        })
    })
})