/**
 * Generated by `createschema miniapp.B2CAppAccessRight 'app:Relationship:B2CApp:CASCADE; condoUserId:Text'`
 */

const { faker } = require('@faker-js/faker')

const {
    makeClient,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObj,
} = require('@open-condo/keystone/test.utils')

const { normalizeEmail } = require('@condo/domains/common/utils/mail')
const {
    createTestB2CApp,
    B2CAppAccessRight,
    createTestB2CAppAccessRight,
    updateTestB2CAppAccessRight,
    registerAppUserServiceByTestClient,
} = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
    verifyEmailByTestClient,
} = require('@dev-api/domains/user/utils/testSchema')


describe('B2CAppAccessRight', () => {
    let actors = {
        admin: undefined,
        support: undefined,
        user: undefined,
        anonymous: undefined,
    }

    let app
    let email
    let condoUserId
    let accessRight
    const accessDeniedRoles = ['admin', 'support', 'user']
    beforeAll(async () => {
        actors.admin = await makeLoggedInAdminClient()
        actors.support = await makeLoggedInSupportClient()
        actors.user = await makeRegisteredAndLoggedInUser()
        actors.anonymous = await makeClient();

        [app] = await createTestB2CApp(actors.user)
        email = faker.internet.email()
        const confirmAction = await verifyEmailByTestClient(actors.user, actors.admin, email)
        const [{ id }] = await registerAppUserServiceByTestClient(actors.user, app, confirmAction)
        condoUserId = id
        accessRight = await B2CAppAccessRight.getOne(actors.admin, { app: { id: app.id } })
    })
    describe('CRUD tests', () => {
        describe('Create', () => {
            describe('B2CAppAccessRight cannot be created manually', () => {
                test.each(accessDeniedRoles)('%p cannot create', async (role) => {
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestB2CAppAccessRight(actors[role], app, condoUserId)
                    })
                })
                test('Anonymous cannot create', async () => {
                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await createTestB2CAppAccessRight(actors.anonymous, app, condoUserId)
                    })
                })
            })
        })
        describe('Update', () => {
            describe('B2CAppAccessRight cannot be updated manually', () => {
                test.each(accessDeniedRoles)('%p cannot update', async (role) => {
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestB2CAppAccessRight(actors[role], accessRight.id, { condoUserId: faker.datatype.uuid() })
                    })
                })
                test('Anonymous cannot update', async () => {
                    await expectToThrowAuthenticationErrorToObj(async () => {
                        await updateTestB2CAppAccessRight(actors.anonymous, accessRight.id, { condoUserId: faker.datatype.uuid() })
                    })
                })
            })
        })
        describe('Read', () => {
            test('Admin can read any B2CAccessRight', async () => {
                const right = await B2CAppAccessRight.getOne(actors.admin, { app: { id: app.id } })
                expect(right).toBeDefined()
            })
            test('Support can read any B2CAccessRight', async () => {
                const right = await B2CAppAccessRight.getOne(actors.support, { app: { id: app.id } })
                expect(right).toBeDefined()
            })
            describe('User', () => {
                test('Can read B2CAccessRight linked to app he created', async () => {
                    const right = await B2CAppAccessRight.getOne(actors.user, { app: { id: app.id } })
                    expect(right).toBeDefined()
                    expect(right).toHaveProperty('condoUserEmail', normalizeEmail(email))
                })
                test('Cannot read other B2CAccessRights', async () => {
                    const anotherUser = await makeRegisteredAndLoggedInUser()
                    const right = await B2CAppAccessRight.getOne(anotherUser, { app: { id: app.id } })
                    expect(right).not.toBeDefined()
                })
            })
        })
        describe('Hard-delete', () => {
            describe('B2CAppAccessRight cannot be hard-deleted', () => {
                test.each(Object.keys(actors))('%p cannot hard-delete', async (role) => {
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await B2CAppAccessRight.delete(actors[role], accessRight.id)
                    })
                })
            })
        })
    })
})
