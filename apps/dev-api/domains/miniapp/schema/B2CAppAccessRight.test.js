/**
 * Generated by `createschema miniapp.B2CAppAccessRight 'app:Relationship:B2CApp:CASCADE; condoUserId:Text'`
 */

const { faker } = require('@faker-js/faker')

const { makeClient } = require('@open-condo/keystone/test.utils')

const { REGISTER_SERVICE_USER_MUTATION } = require('@dev-api/domains/common/gql')
const {
    createTestB2CApp,
    B2CAppAccessRight,
    createTestB2CAppAccessRight,
    updateTestB2CAppAccessRight,
} = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
    makeLoggedInCondoAdminClient,
} = require('@dev-api/domains/user/utils/testSchema')


describe('B2CAppAccessRight', () => {
    let admin
    let support
    let user
    let anonymous
    let condoAdmin
    let condoUser
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeLoggedInSupportClient()
        user = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient()
        condoAdmin = await makeLoggedInCondoAdminClient()
        const response = await condoAdmin.mutate(REGISTER_SERVICE_USER_MUTATION, {
            data: {
                email: faker.internet.email(),
                dv: 1,
                sender: { dv: 1, fingerprint: faker.random.alphaNumeric(8) },
                name: faker.internet.userName(),
            },
        })
        condoUser = response.data.result
    })
    describe('CRUD tests', () => {
        describe('Create', () => {
            test('Admin can', async () => {
                const [app] = await createTestB2CApp(user)
                const [right] = await createTestB2CAppAccessRight(admin, app, condoUser.id)
                expect(right).toHaveProperty('id')
                expect(right).toHaveProperty(['app', 'id'], app.id)
                expect(right).toHaveProperty('condoUserId', condoUser.id)
            })
        })
    })
})
