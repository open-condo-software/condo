/**
 * Generated by `createservice miniapp.CreateB2CAppPropertyService`
 */

const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { CondoB2CAppPropertyGql } = require('@dev-api/domains/condo/gql')
const access = require('@dev-api/domains/miniapp/access/CreateB2CAppPropertyService')
const { findCondoApp } = require('@dev-api/domains/miniapp/utils/serverSchema/findCondoApp')

const CreateB2CAppPropertyService = new GQLCustomSchema('CreateB2CAppPropertyService', {
    types: [
        {
            access: true,
            type: 'input CreateB2CAppPropertyInput { dv: Int!, sender: SenderFieldInput!, app: B2CAppWhereUniqueInput!, environment: AppEnvironment!, address: String! }',
        },
        {
            access: true,
            type: 'type CreateB2CAppPropertyOutput { id: String!, address: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canCreateB2CAppProperty,
            schema: 'createB2CAppProperty(data: CreateB2CAppPropertyInput!): CreateB2CAppPropertyOutput',
            resolver: async (parent, args, context) => {
                const { data: { dv, sender, address } } = args

                const { condoApp, serverClient } = await findCondoApp({ args, context })

                return await serverClient.createModel({
                    modelGql: CondoB2CAppPropertyGql,
                    createInput: {
                        dv,
                        sender,
                        app: { connect: { id: condoApp.id } },
                        address,
                    },
                })
            },
        },
    ],
    
})

module.exports = {
    CreateB2CAppPropertyService,
}
