/**
 * Generated by `createservice miniapp.CreateOIDCClientService`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, getByCondition } = require('@open-condo/keystone/schema')

const { REMOTE_SYSTEM } = require('@dev-api/domains/common/constants/common')
const { productionClient, developmentClient } = require('@dev-api/domains/common/utils/serverClients')
const { CondoOIDCClientGql } = require('@dev-api/domains/condo/gql')
const access = require('@dev-api/domains/miniapp/access/CreateOIDCClientService')
const { APP_NOT_FOUND } = require('@dev-api/domains/miniapp/constants/errors')
const { PROD_ENVIRONMENT } = require('@dev-api/domains/miniapp/constants/publishing')

const { generatePayload } = require('../utils/serverSchema/oidcClient')

const ERRORS = {
    APP_NOT_FOUND: {
        code: BAD_USER_INPUT,
        type: APP_NOT_FOUND,
        message: 'The application with the specified ID was not found',
        messageForUser: 'errors.APP_NOT_FOUND.message',
    },
}

const CreateOIDCClientService = new GQLCustomSchema('CreateOIDCClientService', {
    types: [
        {
            access: true,
            type: 'input CreateOIDCClientInput { dv: Int!, sender: SenderFieldInput!, app: AppWhereUniqueInput!, environment: AppEnvironment!, redirectUri: String! }',
        },
        {
            access: true,
            type: 'type OIDCClientWithSecret { id: String!, clientId: String!, clientSecret: String!, redirectUri: String! }',
        },
    ],
    
    mutations: [
        {
            access: access.canCreateOIDCClient,
            schema: 'createOIDCClient(data: CreateOIDCClientInput!): OIDCClientWithSecret',
            resolver: async (parent, args, context) => {
                const { data: { dv, sender, app, environment, redirectUri } } = args

                const b2cApp = await getByCondition('B2CApp', { id: app.id, deletedAt: null })
                if (!b2cApp) {
                    throw new GQLError(ERRORS.APP_NOT_FOUND, context)
                }

                const serverClient = environment === PROD_ENVIRONMENT
                    ? productionClient
                    : developmentClient

                const oidcClient = await serverClient.createModel({
                    modelGql: CondoOIDCClientGql,
                    createInput: {
                        dv,
                        sender,
                        clientId: app.id,
                        payload: generatePayload(app.id, redirectUri),
                        name: b2cApp.name,
                        isEnabled: false,
                        importId: app.id,
                        importRemoteSystem: REMOTE_SYSTEM,
                    },
                })

                return {
                    id: oidcClient.id,
                    clientId: oidcClient.clientId,
                    clientSecret: oidcClient.payload.client_secret,
                    redirectUri: oidcClient.payload.redirect_uris[0],
                }
            },
        },
    ],
    
})

module.exports = {
    CreateOIDCClientService,
}
