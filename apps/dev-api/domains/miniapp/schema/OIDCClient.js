/**
 * Generated by `createschema miniapp.OIDCClient 'b2cApp:Relationship:B2CApp:CASCADE; clientId:Text; clientSecret:Text; grantTypes:Json; responseTypes:Json; developmentRedirectUri:Url; productionRedirectUri:Url'`
 */

const { faker } = require('@faker-js/faker')

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@dev-api/domains/miniapp/access/OIDCClient')
const { OIDC_CLIENT_UNIQUE_B2C_APP_CONSTRAINT } = require('@dev-api/domains/miniapp/constants/constraints')
const { OIDC_SECRET_LENGTH, OIDC_SECRET_CHAR_PATTERN } = require('@dev-api/domains/miniapp/constants/oidc')
const { exportable } = require('@dev-api/domains/miniapp/plugins/exportable')
const { GRANT_TYPES_FIELD, RESPONSE_TYPES_FIELD } = require('@dev-api/domains/miniapp/schema/fields/OIDCClient')


const OIDCClient = new GQLListSchema('OIDCClient', {
    schemaDoc: 'OIDC client configuration for a specific app',
    fields: {
        b2cApp: {
            schemaDoc: 'Link to the B2C application to which this configuration applies',
            type: 'Relationship',
            ref: 'B2CApp',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },
        clientId: {
            schemaDoc: 'OIDC Client ID',
            type: 'Text',
            isRequired: true,
            hooks: {
                resolveInput ({ operation }) {
                    // NOTE: Used app id for simplicity
                    if (operation === 'create') {
                        return faker.datatype.uuid()
                    }
                },
            },
            access: {
                read: true,
                create: false,
                update: false,
            },
        },
        clientSecret: {
            schemaDoc: 'OIDC Client Secret',
            type: 'Text',
            isRequired: true,
            hooks: {
                resolveInput ({ operation, originalInput, fieldPath }) {
                    // NOTE: Secret must be strong enough, so we should generate it server-side
                    if (operation === 'create' || originalInput.hasOwnProperty(fieldPath)) {
                        return faker.internet.password(OIDC_SECRET_LENGTH, false, OIDC_SECRET_CHAR_PATTERN)
                    }
                },
            },
        },
        grantTypes: GRANT_TYPES_FIELD,
        responseTypes: RESPONSE_TYPES_FIELD,
        developmentRedirectUri: {
            schemaDoc: 'Callback url used for development environment',
            type: 'Url',
            isRequired: false,
        },
        productionRedirectUri: {
            schemaDoc: 'Callback url used for production',
            type: 'Url',
            isRequired: false,
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['b2cApp'],
                condition: 'Q(deletedAt__isnull=True)',
                name: OIDC_CLIENT_UNIQUE_B2C_APP_CONSTRAINT,
            },
        ],
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical(), exportable()],
    access: {
        read: access.canReadOIDCClients,
        create: access.canManageOIDCClients,
        update: access.canManageOIDCClients,
        delete: false,
        auth: true,
    },
})

module.exports = {
    OIDCClient,
}
