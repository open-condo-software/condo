/**
 * Generated by `createservice miniapp.ImportB2CAppService`
 */

const {
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
    makeClient,
} = require('@open-condo/keystone/test.utils')

const { REMOTE_SYSTEM } = require('@dev-api/domains/common/constants/common')
const { PUBLISH_REQUEST_APPROVED_STATUS, PUBLISH_REQUEST_PENDING_STATUS } = require('@dev-api/domains/miniapp/constants/publishing')
const {
    importB2CAppByTestClient,
    createTestB2CApp,
    createTestB2CAppBuild,
    createCondoB2CApp,
    createCondoB2CAppBuild,
    createTestB2CAppPublishRequest,
    B2CApp,
    B2CAppBuild,
    B2CAppPublishRequest,
    CondoB2CApp,
    CondoB2CAppBuild,
} = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
    makeLoggedInCondoAdminClient,
} = require('@dev-api/domains/user/utils/testSchema')
 
describe('ImportB2CAppService', () => {
    let admin
    let support
    let condoAdmin
    let user
    let anonymous
    let app
    let condoDevApp
    let condoProdApp
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        condoAdmin = await makeLoggedInCondoAdminClient()
        support = await makeLoggedInSupportClient()
        user = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient()
    })
    describe('Access tests', () => {
        beforeEach(async () => {
            [app] = await createTestB2CApp(user);
            [condoDevApp] = await createCondoB2CApp(condoAdmin);
            [condoProdApp] = await createCondoB2CApp(condoAdmin)
        })
        test('Admin can import any app', async () => {
            const [result] = await importB2CAppByTestClient(admin, app, condoDevApp, condoProdApp)
            expect(result).toHaveProperty('success', true)
        })
        test('Support can import any app', async () => {
            const [result] = await importB2CAppByTestClient(support, app, condoDevApp, condoProdApp)
            expect(result).toHaveProperty('success', true)
        })
        test('App owner cannot import app', async () => {
            await expectToThrowAccessDeniedErrorToResult(async () => {
                await importB2CAppByTestClient(user, app, condoDevApp, condoProdApp)
            })
        })
        test('Anonymous cannot import app', async () => {
            await expectToThrowAuthenticationErrorToResult(async () => {
                await importB2CAppByTestClient(anonymous, app, condoDevApp, condoProdApp)
            })
        })
    })
    describe('Logic tests', () => {
        describe('App info', () => {
            beforeEach(async () => {
                [app] = await createTestB2CApp(user);
                [condoDevApp] = await createCondoB2CApp(condoAdmin);
                [condoProdApp] = await createCondoB2CApp(condoAdmin)
            })
            test('App must be updated with info from condo dev app if prod app is not specified', async () => {
                const [result] = await importB2CAppByTestClient(support, app, condoDevApp, null)
                expect(result).toHaveProperty('success', true)

                const updatedApp = await B2CApp.getOne(support, { id: app.id })
                expect(updatedApp).toHaveProperty('name', condoDevApp.name)
                expect(updatedApp).toHaveProperty('developer', condoDevApp.developer)
                expect(updatedApp).toHaveProperty(['logo', 'originalFilename'], condoDevApp.logo.filename)
                expect(updatedApp).toHaveProperty('developmentExportId', condoDevApp.id)
            })
            test('App must be updated with info from condo prod app if prod app is specified', async () => {
                const [result] = await importB2CAppByTestClient(support, app, condoDevApp, condoProdApp)
                expect(result).toHaveProperty('success', true)

                const updatedApp = await B2CApp.getOne(support, { id: app.id })
                expect(updatedApp).toHaveProperty('name', condoProdApp.name)
                expect(updatedApp).toHaveProperty('developer', condoProdApp.developer)
                expect(updatedApp).toHaveProperty(['logo', 'originalFilename'], condoProdApp.logo.filename)
                expect(updatedApp).toHaveProperty('developmentExportId', condoDevApp.id)
                expect(updatedApp).toHaveProperty('productionExportId', condoProdApp.id)
            })
            test('Condo apps must be updated to include importId and importRemoteSystem', async () => {
                const [result] = await importB2CAppByTestClient(support, app, condoDevApp, condoProdApp)
                expect(result).toHaveProperty('success', true)

                const updatedDevApp = await CondoB2CApp.getOne(condoAdmin, { id: condoDevApp.id })
                expect(updatedDevApp).toHaveProperty('importId', app.id)
                expect(updatedDevApp).toHaveProperty('importRemoteSystem', REMOTE_SYSTEM)

                const updatedProdApp = await CondoB2CApp.getOne(condoAdmin, { id: condoProdApp.id })
                expect(updatedProdApp).toHaveProperty('importId', app.id)
                expect(updatedProdApp).toHaveProperty('importRemoteSystem', REMOTE_SYSTEM)
            })
            test('App info must not be updated if options.info set to false', async () => {
                const [result] = await importB2CAppByTestClient(support, app, condoDevApp, condoProdApp, { options: { info: false, builds: true, publish: true } })
                expect(result).toHaveProperty('success', true)

                const updatedApp = await B2CApp.getOne(support, { id: app.id })
                expect(updatedApp).toHaveProperty('v', 1)
            })
        })
        describe('App builds', () => {
            let validDevBuilds
            let validProdBuilds

            let appBuilds
            let condoUpdatedDevBuilds
            let condoUpdatedProdBuilds
            let manuallyCreatedSuffixedVersion


            beforeAll(async () => {
                validDevBuilds = []
                validProdBuilds = []
                const [app]  = await createTestB2CApp(user)
                const [condoDevApp] = await createCondoB2CApp(condoAdmin)
                const [condoProdApp] = await createCondoB2CApp(condoAdmin)
                for (let i = 0; i < 15; i++) {
                    const [devBuild] = await createCondoB2CAppBuild(condoAdmin, condoDevApp)
                    const [prodBuild] = await createCondoB2CAppBuild(condoAdmin, condoProdApp)
                    validDevBuilds.push(devBuild)
                    validProdBuilds.push(prodBuild)
                }
                await createCondoB2CAppBuild(condoAdmin, condoDevApp, {
                    version: 'my-custom-version',
                })
                await createCondoB2CAppBuild(condoAdmin, condoProdApp, {
                    version: '1.0.0-suffix',
                })

                const [existingCondoBuild] = await createCondoB2CAppBuild(condoAdmin, condoProdApp)
                manuallyCreatedSuffixedVersion = `${existingCondoBuild.version}-prod`
                await createTestB2CAppBuild(support, app, {
                    version: manuallyCreatedSuffixedVersion,
                })

                await importB2CAppByTestClient(support, app, condoDevApp, condoProdApp)

                appBuilds = await B2CAppBuild.getAll(support, { app: { id: app.id } })
                condoUpdatedDevBuilds = await CondoB2CAppBuild.getAll(condoAdmin, { app: { id: condoDevApp.id } })
                condoUpdatedProdBuilds = await CondoB2CAppBuild.getAll(condoAdmin, { app: { id: condoProdApp.id } })
            })
            test('Only builds with non-suffixed semantic version must be imported', async () => {
                expect(appBuilds).toHaveLength(31)
                const expectedVersions = validDevBuilds
                    .map(build => `${build.version}-dev`)
                    .concat(validProdBuilds.map(build => `${build.version}-prod`))
                    .concat([manuallyCreatedSuffixedVersion])
                    .map(version => expect.objectContaining({ version }))
                expect(appBuilds).toEqual(expect.arrayContaining(expectedVersions))
            })
            test('All imported builds must have valid exportIds', async () => {
                const expectedExportsPayload = validDevBuilds
                    .map(build => ({ version: `${build.version}-dev`, developmentExportId: build.id, productionExportId: null }))
                    .concat(validProdBuilds
                        .map(build => ({ version: `${build.version}-prod`, productionExportId: build.id, developmentExportId: null }))
                    )
                    .concat([
                        { version: manuallyCreatedSuffixedVersion, productionExportId: null, developmentExportId: null },
                    ])
                    .map(build => expect.objectContaining(build))
                expect(appBuilds).toEqual(expect.arrayContaining(expectedExportsPayload))
            })
            test('Condo builds must be updated to include importId and importRemoteSystem', async () => {
                const expectedCondoDevBuilds = appBuilds
                    .filter(build => build.developmentExportId)
                    .map(build => expect.objectContaining({ id: build.developmentExportId, importId: build.id, importRemoteSystem: REMOTE_SYSTEM }))
                expect(expectedCondoDevBuilds).toHaveLength(15)
                expect(condoUpdatedDevBuilds).toEqual(expect.arrayContaining(expectedCondoDevBuilds))
                const expectedCondoProdBuilds = appBuilds
                    .filter(build => build.productionExportId)
                    .map(build => expect.objectContaining({ id: build.productionExportId, importId: build.id, importRemoteSystem: REMOTE_SYSTEM }))
                expect(expectedCondoProdBuilds).toHaveLength(15)
                expect(condoUpdatedProdBuilds).toEqual(expect.arrayContaining(expectedCondoProdBuilds))
            })
            test('Builds should not be imported if options.builds set to false', async () => {
                const [app] = await createTestB2CApp(user)
                const [condoDevApp] = await createCondoB2CApp(condoAdmin)
                await createCondoB2CAppBuild(condoAdmin, condoDevApp)
                const [condoProdApp] = await createCondoB2CApp(condoAdmin)
                await createCondoB2CAppBuild(condoAdmin, condoProdApp)

                const [firstResult] = await importB2CAppByTestClient(support, app, condoDevApp, condoProdApp, { options: { info: true, builds: false, publish: true } })
                expect(firstResult).toHaveProperty('success', true)

                const allBuilds = await B2CAppBuild.getAll(support, { app: { id: app.id } })
                expect(allBuilds).toHaveLength(0)

                const [secondResult] = await importB2CAppByTestClient(support, app, condoDevApp, condoProdApp, { options: { info: true, builds: true, publish: true } })
                expect(secondResult).toHaveProperty('success', true)

                const allNewBuilds = await B2CAppBuild.getAll(support, { app: { id: app.id } })
                expect(allNewBuilds).toHaveLength(2)
            })
        })
        describe('Publish request', () => {
            test('Publish request must be created if options.publish set to true', async () => {
                const [app] = await createTestB2CApp(user)
                const [condoDevApp] = await createCondoB2CApp(condoAdmin)
                const noRequest = await B2CAppPublishRequest.getOne(support, { app: { id: app.id } })
                expect(noRequest).not.toBeDefined()

                const [result] = await importB2CAppByTestClient(support, app, condoDevApp, condoProdApp)
                expect(result).toHaveProperty('success', true)

                const request = await B2CAppPublishRequest.getOne(support, { app: { id: app.id } })
                expect(request).toHaveProperty('isAppTested', true)
                expect(request).toHaveProperty('isContractSigned', true)
                expect(request).toHaveProperty('isInfoApproved', true)
                expect(request).toHaveProperty('status', PUBLISH_REQUEST_APPROVED_STATUS)
            })
            test('Existing publish request must be updated if options.publish set to true', async () => {
                const [app] = await createTestB2CApp(user)
                const [condoDevApp] = await createCondoB2CApp(condoAdmin)
                const [initialRequest] = await createTestB2CAppPublishRequest(support, app)

                expect(initialRequest).toHaveProperty('isAppTested', false)
                expect(initialRequest).toHaveProperty('isContractSigned', false)
                expect(initialRequest).toHaveProperty('isInfoApproved', false)
                expect(initialRequest).toHaveProperty('status', PUBLISH_REQUEST_PENDING_STATUS)

                const [result] = await importB2CAppByTestClient(support, app, condoDevApp, condoProdApp)
                expect(result).toHaveProperty('success', true)
                const request = await B2CAppPublishRequest.getOne(support, { id: initialRequest.id })

                expect(request).toHaveProperty('isAppTested', true)
                expect(request).toHaveProperty('isContractSigned', true)
                expect(request).toHaveProperty('isInfoApproved', true)
                expect(request).toHaveProperty('status', PUBLISH_REQUEST_APPROVED_STATUS)
            })
            test('Publish request must not be created if options.publish set to false', async () => {
                const [app] = await createTestB2CApp(user)
                const [condoDevApp] = await createCondoB2CApp(condoAdmin)

                const [result] = await importB2CAppByTestClient(support, app, condoDevApp, condoProdApp, { options: { info: true, builds: true, publish: false } })
                expect(result).toHaveProperty('success', true)

                const request = await B2CAppPublishRequest.getOne(support, { app: { id: app.id } })
                expect(request).not.toBeDefined()
            })
        })
    })
})