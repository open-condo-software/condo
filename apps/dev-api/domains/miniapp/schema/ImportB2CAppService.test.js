/**
 * Generated by `createservice miniapp.ImportB2CAppService`
 */

const path = require('path')

const { faker } = require('@faker-js/faker')

const { generateGqlQueries } = require('@open-condo/codegen/generate.gql')
const { generateGQLTestUtils } = require('@open-condo/codegen/generate.test.utils')
const {
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    makeClient,
    UploadingFile,
} = require('@open-condo/keystone/test.utils')

const { DEFAULT_COLOR_SCHEMA } = require('@dev-api/domains/miniapp/constants/b2c')
const { importB2CAppByTestClient, createTestB2CApp } = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
    makeLoggedInCondoAdminClient,
} = require('@dev-api/domains/user/utils/testSchema')

const CondoB2CApp = generateGQLTestUtils(generateGqlQueries('B2CApp', '{ id name developer logo { publicUrl } currentBuild { id } importId importRemoteSystem deletedAt v }'))


async function createCondoB2CApp (client) {
    const attrs = {
        dv: 1,
        sender: { dv: 1, fingerprint: faker.random.alphaNumeric(8) },
        name: faker.commerce.productName(),
        developer: faker.company.name(),
        colorSchema: DEFAULT_COLOR_SCHEMA,
        logo: new UploadingFile(path.join(__dirname, '..', 'assets', 'b2cDefaultLogo.png')),
    }

    const obj = await CondoB2CApp.create(client, attrs)
    return [obj, attrs]
}
 
describe('ImportB2CAppService', () => {
    let admin
    let support
    let condoAdmin
    let user
    let anonymous
    let app
    let condoDevApp
    let condoProdApp
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        condoAdmin = await makeLoggedInCondoAdminClient()
        support = await makeLoggedInSupportClient()
        user = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient()
    })
    beforeEach(async () => {
        [app] = await createTestB2CApp(user);
        [condoDevApp] = await createCondoB2CApp(condoAdmin);
        [condoProdApp] = await createCondoB2CApp(condoAdmin)
    })
    describe('Access tests', () => {
        test('Admin can import any app', async () => {
            const [result] = await importB2CAppByTestClient(admin, app, condoDevApp, condoProdApp)
            expect(result).toHaveProperty('success', true)
        })
    })
})