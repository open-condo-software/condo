/**
 * Generated by `createservice miniapp.ImportB2CAppService`
 */

const fs = require('fs')
const path = require('path')

const got = require('got')
const get = require('lodash/get')

const { generateGqlQueries } = require('@open-condo/codegen/generate.gql')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT, INTERNAL_ERROR } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { REMOTE_SYSTEM } = require('@dev-api/domains/common/constants/common')
const { productionClient, developmentClient } = require('@dev-api/domains/common/utils/serverClients')
const access = require('@dev-api/domains/miniapp/access/ImportB2CAppService')
const { DEFAULT_COLOR_SCHEMA } = require('@dev-api/domains/miniapp/constants/b2c')
const { B2CApp } = require('@dev-api/domains/miniapp/utils/serverSchema')

/**
 * List of possible errors, that this custom schema can throw
 * They will be rendered in documentation section in GraphiQL for this custom schema
 */
const ERRORS = {

}

const stream = fs.createReadStream(path.join(__dirname, '..', 'assets', 'b2cDefaultLogo.png'))

const testFile = {
    file: {
        stream,
        filename: 'test.png',
        mimetype: 'image/png',
        encoding: '7bit',
        createReadStream () {
            return stream
        },
    },
    promise: Promise.resolve({
        stream: stream,
        filename: 'test.png',
        mimetype: 'image/png',
        encoding: '7bit',
        createReadStream () {
            return stream
        },
    }),
}

const CondoB2CAppGQL = generateGqlQueries('B2CApp', '{ id developer name logo { publicUrl filename } }')

const ImportB2CAppService = new GQLCustomSchema('ImportB2CAppService', {
    types: [
        {
            access: true,
            type: 'input ImportB2CAppFromInput { developmentApp: B2CAppWhereUniqueInput, productionApp: B2CAppWhereUniqueInput }',
        },
        {
            access: true,
            type: 'input ImportB2CAppToInput { app: B2CAppWhereUniqueInput! }',
        },
        {
            access: true,
            type: 'input ImportB2CAppInput { dv: Int!, sender: SenderFieldInput!, from: ImportB2CAppFromInput!, to: ImportB2CAppToInput! }',
        },
        {
            access: true,
            type: 'type ImportB2CAppOutput { success: Boolean! }',
        },
    ],
    
    mutations: [
        {
            access: access.canImportB2CApp,
            schema: 'importB2CApp(data: ImportB2CAppInput!): ImportB2CAppOutput',
            resolver: async (parent, args, context) => {
                const {
                    data: {
                        dv,
                        sender,
                        from,
                        to: { app: { id: appId } },
                    },
                } = args

                const developmentAppId = get(from, ['developmentApp', 'id'])
                const productionAppId = get(from, ['productionApp', 'id'])
                let devApp, prodApp

                // Step 1. App info sync
                if (developmentAppId) {
                    devApp = await developmentClient.updateModel({
                        modelGql: CondoB2CAppGQL,
                        id: developmentAppId,
                        updateInput: {
                            dv,
                            sender,
                            importId: appId,
                            importRemoteSystem: REMOTE_SYSTEM,
                        },
                    })
                }

                if (productionAppId) {
                    prodApp = await productionClient.updateModel({
                        modelGql: CondoB2CAppGQL,
                        id: productionAppId,
                        updateInput: {
                            dv,
                            sender,
                            importId: appId,
                            importRemoteSystem: REMOTE_SYSTEM,
                        },
                    })
                }

                // Use fetched apps to update dev-api app with priority to production one
                if (prodApp) {
                    await B2CApp.update(context, appId, {
                        dv,
                        sender,
                        name: prodApp.name,
                        developer: prodApp.developer,
                        logo: testFile,
                        productionExportId: productionAppId,
                    })
                }
                // if (devApp) {
                //     // If prod data is used -> update only exportId
                //     if (prodApp) {
                //         await B2CApp.update(context, appId, {
                //             dv,
                //             sender,
                //             developmentExportId: developmentAppId,
                //         })
                //     } else {
                //         await B2CApp.update(context, appId, {
                //             dv,
                //             sender,
                //             name: devApp.name,
                //             developer: devApp.developer,
                //             logo: developmentClient.createUploadFile(
                //                 got.stream(devApp.logo.publicUrl, {
                //                     headers: { 'Authorization': `Bearer ${developmentClient.authToken}` },
                //                 }),
                //                 devApp.logo.filename
                //             ),
                //             developmentExportId: developmentAppId,
                //         })
                //     }
                // }

                return {
                    success: true,
                }
            },
        },
    ],
    
})

module.exports = {
    ImportB2CAppService,
}
