/**
 * Generated by `createservice miniapp.AllB2CAppPropertiesService '--type=queries'`
 */

const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { GQLCustomSchema, getByCondition } = require('@open-condo/keystone/schema')

const { productionClient, developmentClient } = require('@dev-api/domains/common/utils/serverClients')
const { CondoB2CAppPropertyGql, CondoB2CAppGql } = require('@dev-api/domains/condo/gql')
const access = require('@dev-api/domains/miniapp/access/AllB2CAppPropertiesService')
const { APP_NOT_FOUND } = require('@dev-api/domains/miniapp/constants/errors')
const { PROD_ENVIRONMENT } = require('@dev-api/domains/miniapp/constants/publishing')

const ERRORS = {
    APP_NOT_FOUND: {
        code: BAD_USER_INPUT,
        type: APP_NOT_FOUND,
        message: 'The application with the specified ID was not found',
        messageForUser: 'errors.APP_NOT_FOUND.message',
    },
}


const AllB2CAppPropertiesService = new GQLCustomSchema('AllB2CAppPropertiesService', {
    types: [
        {
            access: true,
            type: 'input AllB2CAppPropertiesInput { app: B2CAppWhereUniqueInput!, first: Int!, skip: Int!, environment: AppEnvironment! }',
        },
        {
            access: true,
            type: 'type B2CAppProperty { id: ID!, address: String! }',
        },
        {
            access: true,
            type: 'type B2CAppPropertyMeta { count: Int! }',
        },
        {
            access: true,
            type: 'type AllB2CAppPropertiesOutput { objs: B2CAppProperty!, meta: B2CAppPropertyMeta! }',
        },
    ],
    
    queries: [
        {
            access: access.canExecuteAllB2CAppProperties,
            schema: 'allB2CAppProperties (data: AllB2CAppPropertiesInput!): AllB2CAppPropertiesOutput',
            resolver: async (parent, args, context) => {
                const { data: { app: { id }, first, skip, environment } } = args

                const exportField = `${environment}ExportId`
                const serverClient = environment === PROD_ENVIRONMENT
                    ? productionClient
                    : developmentClient

                const app = await getByCondition('B2CApp', { id, deletedAt: null })
                if (!app || !app[exportField]) {
                    throw new GQLError(ERRORS.APP_NOT_FOUND, context)
                }

                const condoAppId = app[exportField]
                const condoApp = await serverClient.findExportedModel({
                    modelGql: CondoB2CAppGql,
                    exportId: condoAppId,
                    id: app.id,
                    context,
                })

                if (!condoApp) {
                    throw new GQLError(ERRORS.APP_NOT_FOUND, context)
                }

                return await serverClient.getModelsWithCount({
                    modelGql: CondoB2CAppPropertyGql,
                    where: {
                        app: { id: condoApp.id },
                    },
                    first,
                    skip,
                    sortBy: ['createdAt_DESC'],
                })
            },
        },
    ],
    
})

module.exports = {
    AllB2CAppPropertiesService,
}
