/**
 * Generated by `createservice miniapp.AllB2CAppPropertiesService '--type=queries'`
 */

const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { CondoB2CAppPropertyGql } = require('@dev-api/domains/condo/gql')
const access = require('@dev-api/domains/miniapp/access/AllB2CAppPropertiesService')
const { findCondoApp } = require('@dev-api/domains/miniapp/utils/serverSchema/findCondoApp')


const AllB2CAppPropertiesService = new GQLCustomSchema('AllB2CAppPropertiesService', {
    types: [
        {
            access: true,
            type: 'input AllB2CAppPropertiesInput { app: B2CAppWhereUniqueInput!, first: Int!, skip: Int!, environment: AppEnvironment! }',
        },
        {
            access: true,
            type: 'type B2CAppProperty { id: ID!, address: String! }',
        },
        {
            access: true,
            type: 'type B2CAppPropertyMeta { count: Int! }',
        },
        {
            access: true,
            type: 'type AllB2CAppPropertiesOutput { objs: [B2CAppProperty!]!, meta: B2CAppPropertyMeta! }',
        },
    ],
    
    queries: [
        {
            access: access.canExecuteAllB2CAppProperties,
            schema: 'allB2CAppProperties (data: AllB2CAppPropertiesInput!): AllB2CAppPropertiesOutput',
            resolver: async (parent, args, context) => {
                const { data: { first, skip } } = args

                const { condoApp, serverClient } = await findCondoApp({ args, context })

                return  await serverClient.getModelsWithCount({
                    modelGql: CondoB2CAppPropertyGql,
                    where: {
                        app: { id: condoApp.id },
                    },
                    first,
                    skip,
                    sortBy: ['createdAt_DESC'],
                })
            },
        },
    ],
    
})

module.exports = {
    AllB2CAppPropertiesService,
}
