/**
 * Generated by `createschema miniapp.B2CAppProperty 'app:Relationship:B2CApp:CASCADE;'`
 */

const dayjs = require('dayjs')

const { makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowUniqueConstraintViolationError,
    catchErrorFrom,
} = require('@open-condo/keystone/test.utils')

const {
    createTestB2CApp,
    B2CAppProperty,
    createTestB2CAppProperty,
    createTestB2CAppProperties,
    updateTestB2CAppProperty,
    updateTestB2CAppProperties,
    getFakeAddress,
} = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
} = require('@dev-api/domains/user/utils/testSchema')


describe('B2CAppProperty', () => {
    let admin
    let support
    let user
    let anotherUser
    let anonymous
    let app
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeLoggedInSupportClient()
        user = await makeRegisteredAndLoggedInUser()
        anotherUser = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient();
        [app] = await createTestB2CApp(user)
    })
    describe('CRUD', () => {
        describe('Create', () => {
            test('Admin can', async () => {
                const [property] = await createTestB2CAppProperty(admin, app)
                expect(property).toHaveProperty('address')
                expect(property).toHaveProperty('addressKey')
            })
            test('Support can', async () => {
                const [property] = await createTestB2CAppProperty(support, app)
                expect(property).toHaveProperty('address')
                expect(property).toHaveProperty('addressKey')
            })
            describe('User', () => {
                test('App creator can', async () => {
                    const [property] = await createTestB2CAppProperty(user, app)
                    expect(property).toHaveProperty('address')
                    expect(property).toHaveProperty('addressKey')
                })
                test('Other users cannot', async () => {
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestB2CAppProperty(anotherUser, app)
                    })
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestB2CAppProperty(anonymous, app)
                })
            })
        })
        describe('Read', () => {
            let property
            beforeAll(async () => {
                [property] = await createTestB2CAppProperty(support, app)
            })
            test('Admin can', async () => {
                const readProperty = await B2CAppProperty.getOne(admin, { id: property.id })
                expect(readProperty).toHaveProperty('id', readProperty.id)
            })
            test('Support can', async () => {
                const readProperty = await B2CAppProperty.getOne(support, { id: property.id })
                expect(readProperty).toHaveProperty('id', readProperty.id)
            })
            describe('User', () => {
                test('App creator can', async () => {
                    const readProperty = await B2CAppProperty.getOne(user, { id: property.id })
                    expect(readProperty).toHaveProperty('id', readProperty.id)
                })
                test('Others cannot', async () => {
                    const readProperty = await B2CAppProperty.getOne(anotherUser, { id: anotherUser.id })
                    expect(readProperty).not.toBeDefined()
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await B2CAppProperty.getOne(anonymous, { id: anotherUser.id })
                })
            })
        })
        describe('Update/Soft-delete', () => {
            let address, addressMeta
            const deletedAt = dayjs().toISOString()
            let property
            beforeEach(async () => {
                [property] = await createTestB2CAppProperty(support, app);
                [address, addressMeta] = getFakeAddress()
            })
            test('Admin can', async () => {
                const [updated] = await updateTestB2CAppProperty(admin, property.id, { address, addressMeta })
                expect(updated).toHaveProperty('address', address.toLowerCase())
                const [deleted] = await updateTestB2CAppProperty(admin, property.id, { deletedAt })
                expect(deleted.deletedAt).not.toBeNull()
            })
            test('Support can', async () => {
                const [updated] = await updateTestB2CAppProperty(support, property.id, { address, addressMeta })
                expect(updated).toHaveProperty('address', address.toLowerCase())
                const [deleted] = await updateTestB2CAppProperty(support, property.id, { deletedAt })
                expect(deleted.deletedAt).not.toBeNull()
            })
            describe('User', () => {
                test('App creator can', async () => {
                    const [updated] = await updateTestB2CAppProperty(user, property.id, { address, addressMeta })
                    expect(updated).toHaveProperty('address', address.toLowerCase())
                    const [deleted] = await updateTestB2CAppProperty(user, property.id, { deletedAt })
                    expect(deleted.deletedAt).not.toBeNull()
                })
                test('Other users cannot', async () => {
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestB2CAppProperty(anotherUser, property.id, { address, addressMeta })
                    })
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await updateTestB2CAppProperty(anotherUser, property.id, { deletedAt })
                    })
                })
            })
            test('Anonymous cannot', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestB2CAppProperty(anonymous, property.id, { address, addressMeta })
                })
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await updateTestB2CAppProperty(anonymous, property.id, { deletedAt })
                })
            })
        })
        test('Hard delete is prohibited', async () => {
            const [property] = await createTestB2CAppProperty(user, app)
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await B2CAppProperty.delete(admin, property.id)
            })
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await B2CAppProperty.delete(support, property.id)
            })
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await B2CAppProperty.delete(user, property.id)
            })
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await B2CAppProperty.delete(anotherUser, property.id)
            })
            await expectToThrowAccessDeniedErrorToObj(async () => {
                await B2CAppProperty.delete(anonymous, property.id)
            })
        })
        test('Bulk create / update is supported', async () => {
            const [createdProperties] = await createTestB2CAppProperties(user, [
                { app: { connect: { id: app.id } } },
                { app: { connect: { id: app.id } } },
                { app: { connect: { id: app.id } } },
            ])
            expect(createdProperties).toHaveLength(3)
            expect(createdProperties).toEqual([
                expect.objectContaining({ id: expect.stringContaining('') }),
                expect.objectContaining({ id: expect.stringContaining('') }),
                expect.objectContaining({ id: expect.stringContaining('') }),
            ])

            const [updatedProperties] = await updateTestB2CAppProperties(user, createdProperties.map(property => ({
                id: property.id,
                data: {
                    deletedAt: dayjs().toISOString(),
                },
            })))
            expect(updatedProperties).toEqual([
                expect.objectContaining({ deletedAt: expect.stringContaining('') }),
                expect.objectContaining({ deletedAt: expect.stringContaining('') }),
                expect.objectContaining({ deletedAt: expect.stringContaining('') }),
            ])
        })
    })
    describe('Fields', () => {
        describe('app', () => {
            test('"app" field cannot be updated', async () => {
                const [property] = await createTestB2CAppProperty(admin, app)
                const [anotherApp] = await createTestB2CApp(admin)
                expect(property).toHaveProperty('id')
                await catchErrorFrom(async () => {
                    await updateTestB2CAppProperty(admin, property.id, {
                        app: { connect: { id: anotherApp.id } },
                    })
                }, (caught) => {
                    expect(caught.errors[0].message).toContain('Field "app" is not defined by type "B2CAppPropertyUpdateInput"')
                })
            })
        })
    })
    describe('Constraints', () => {
        test('Cannot create another property for app with same address', async () => {
            const [address, addressMeta] = await getFakeAddress()
            const lowerAddress = address.toLowerCase()
            const [property] = await createTestB2CAppProperty(admin, app, { address, addressMeta })
            expect(property).toHaveProperty('address', lowerAddress)

            await expectToThrowUniqueConstraintViolationError(async () => {
                await createTestB2CAppProperty(admin, app, { address: lowerAddress, addressMeta })
            }, 'b2c_app_property_unique_app_address')

            const [anotherApp] = await createTestB2CApp(admin)
            const [anotherAppProperty] = await createTestB2CAppProperty(admin, anotherApp, { address, addressMeta })
            expect(anotherAppProperty).toHaveProperty('address', lowerAddress)

            const [deletedProperty] = await updateTestB2CAppProperty(admin, property.id, {
                deletedAt: dayjs().toISOString(),
            })
            expect(deletedProperty.deletedAt).not.toBeNull()

            const [newProperty] = await createTestB2CAppProperty(admin, app, { address, addressMeta })
            expect(newProperty).toHaveProperty('address', lowerAddress)
        })
    })
})
