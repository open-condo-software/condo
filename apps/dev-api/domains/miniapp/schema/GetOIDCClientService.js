/**
 * Generated by `createservice miniapp.GetOIDCClientService '--type=queries'`
 */

const { GQLCustomSchema } = require('@open-condo/keystone/schema')

const { REMOTE_SYSTEM } = require('@dev-api/domains/common/constants/common')
const { productionClient, developmentClient } = require('@dev-api/domains/common/utils/serverClients')
const { CondoOIDCClientGql } = require('@dev-api/domains/condo/gql')
const access = require('@dev-api/domains/miniapp/access/GetOIDCClientService')
const { PROD_ENVIRONMENT } = require('@dev-api/domains/miniapp/constants/publishing')

function getOIDCClientWhere (app) {
    return {
        clientId: app.id,
        importId: app.id,
        importRemoteSystem: REMOTE_SYSTEM,
    }
}

const GetOIDCClientService = new GQLCustomSchema('GetOIDCClientService', {
    types: [
        {
            access: true,
            type: 'input AppWhereUniqueInput { id: ID! }',
        },
        {
            access: true,
            type: 'input GetOIDCClientInput { app: AppWhereUniqueInput!, environment: AppEnvironment! }',
        },
        {
            access: true,
            type: 'type OIDCClient { id: String!, clientId: String!, redirectUri: String! }',
        },
    ],
    
    queries: [
        {
            access: access.canGetOIDCClient,
            schema: 'OIDCClient (data: GetOIDCClientInput!): OIDCClient',
            resolver: async (parent, args) => {
                const { data: { app, environment } } = args

                const serverClient = environment === PROD_ENVIRONMENT
                    ? productionClient
                    : developmentClient

                const oidcClients = await serverClient.getModels({
                    modelGql: CondoOIDCClientGql,
                    where: getOIDCClientWhere(app),
                    first: 1,
                })

                if (!oidcClients.length) {
                    return null
                }

                const oidcClient = oidcClients[0]

                return {
                    id: oidcClient.id,
                    clientId: oidcClient.clientId,
                    redirectUri: oidcClient.payload.redirect_uris[0],
                }
            },
        },
    ],
    
})

module.exports = {
    GetOIDCClientService,
    getOIDCClientWhere,
}
