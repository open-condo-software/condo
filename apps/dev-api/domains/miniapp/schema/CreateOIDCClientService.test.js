/**
 * Generated by `createservice miniapp.CreateOIDCClientService`
 */

const { makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
    expectToThrowUniqueConstraintViolationError,
} = require('@open-condo/keystone/test.utils')

const { REMOTE_SYSTEM } = require('@dev-api/domains/common/constants/common')
const { OIDC_SECRET_CHAR_POOL, OIDC_SECRET_LENGTH, OIDC_CLIENT_DEFAULT_PAYLOAD } = require('@dev-api/domains/miniapp/constants/oidc')
const { CondoOIDCClient, createOIDCClientByTestClient, createTestB2CApp } = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
    makeLoggedInCondoAdminClient,
} = require('@dev-api/domains/user/utils/testSchema')
 
describe('CreateOIDCClientService', () => {
    let admin
    let support
    let b2cUser
    let b2cApp
    let b2bUser
    let anonymous
    let condoAdmin
    let oidcClient
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeLoggedInSupportClient()
        b2cUser = await makeRegisteredAndLoggedInUser()
        b2bUser = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient()
        condoAdmin = await makeLoggedInCondoAdminClient();

        [b2cApp] = await createTestB2CApp(b2cUser)
    })
    afterEach(async () => {
        if (oidcClient) {
            await CondoOIDCClient.softDelete(condoAdmin, oidcClient.id)
            oidcClient = undefined
        }
    })
    describe('Access tests', () => {
        test('Admin can create OIDC client for any app', async () => {
            [oidcClient] = await createOIDCClientByTestClient(admin, b2cApp)
            expect(oidcClient).toHaveProperty('id')
        })
        test('Support can create OIDC client for any app', async () => {
            [oidcClient] = await createOIDCClientByTestClient(support, b2cApp)
            expect(oidcClient).toHaveProperty('id')
        })
        describe('User', () => {
            test('Can create OIDC client for app he created', async () => {
                [oidcClient] = await createOIDCClientByTestClient(b2cUser, b2cApp)
                expect(oidcClient).toHaveProperty('id')
            })
            test('Cannot create OIDC client for other apps', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await createOIDCClientByTestClient(b2bUser, b2cApp)
                })
            })
        })
        test('Anonymous cannot create any OIDC client', async () => {
            await expectToThrowAuthenticationErrorToResult(async () => {
                await createOIDCClientByTestClient(anonymous, b2cApp)
            })
        })
    })
    describe('Logic tests', () => {
        test('Must return correct data', async () => {
            const [result, attrs] = await createOIDCClientByTestClient(b2cUser, b2cApp)
            oidcClient = result
            expect(oidcClient).toHaveProperty('id')
            expect(oidcClient).toHaveProperty('clientId', b2cApp.id)
            expect(oidcClient).toHaveProperty('clientSecret')
            expect(oidcClient.clientSecret).toMatch(new RegExp(`^[${OIDC_SECRET_CHAR_POOL}]{${OIDC_SECRET_LENGTH}}$`))
            expect(oidcClient).toHaveProperty('redirectUri', attrs.redirectUri)
        })
        test('Created condo OIDC client must have correct fields', async () => {
            [oidcClient] = await createOIDCClientByTestClient(b2cUser, b2cApp)
            const condoOIDCClient = await CondoOIDCClient.getOne(condoAdmin, { id: oidcClient.id })
            expect(condoOIDCClient).toHaveProperty('isEnabled', false)
            expect(condoOIDCClient).toHaveProperty('name', b2cApp.name)
            expect(condoOIDCClient).toHaveProperty('clientId', b2cApp.id)
            expect(condoOIDCClient).toHaveProperty('payload', {
                ...OIDC_CLIENT_DEFAULT_PAYLOAD,
                redirect_uris: [oidcClient.redirectUri],
                client_id: oidcClient.clientId,
                client_secret: oidcClient.clientSecret,
            })
            expect(condoOIDCClient).toHaveProperty('importId', b2cApp.id)
            expect(condoOIDCClient).toHaveProperty('importRemoteSystem', REMOTE_SYSTEM)
        })
        test('Cannot create multiple OIDC clients for a single app', async () => {
            [oidcClient] = await createOIDCClientByTestClient(b2cUser, b2cApp)
            expect(oidcClient).toHaveProperty('id')
            await expectToThrowUniqueConstraintViolationError(async () => {
                await createOIDCClientByTestClient(b2cUser, b2cApp)
            }, 'oidc_client_unique_clientId')
        })
    })
})