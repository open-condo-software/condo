/**
 * Generated by `createschema miniapp.OIDCClient 'b2cApp:Relationship:B2CApp:CASCADE; clientId:Text; clientSecret:Text; grantTypes:Json; responseTypes:Json; developmentRedirectUri:Url; productionRedirectUri:Url'`
 */

const dayjs = require('dayjs')

const { makeClient } = require('@open-condo/keystone/test.utils')
const {
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
    expectToThrowAccessDeniedErrorToObjects,
} = require('@open-condo/keystone/test.utils')

const {
    OIDCClient,
    createTestOIDCClient,
    updateTestOIDCClient,
    createTestB2CApp,
} = require('@dev-api/domains/miniapp/utils/testSchema')
const { makeLoggedInAdminClient, makeLoggedInSupportClient, makeRegisteredAndLoggedInUser } = require('@dev-api/domains/user/utils/testSchema')



describe('OIDCClient', () => {
    let admin
    let support
    let user
    let anotherUser
    let anonymous
    let b2cApp
    let oidcClient
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeLoggedInSupportClient()
        user = await makeRegisteredAndLoggedInUser()
        anotherUser = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient();
        [b2cApp] = await createTestB2CApp(user)
    })
    afterEach(async () => {
        if (oidcClient) {
            await updateTestOIDCClient(admin, oidcClient.id, {
                deletedAt: dayjs().toISOString(),
            })
            oidcClient = undefined
        }
    })
    describe('CRUD', () => {
        describe('Create', () => {
            test('Admin can create OIDC client for any app', async () => {
                [oidcClient] = await createTestOIDCClient(admin, b2cApp)
                expect(oidcClient).toHaveProperty('id')
            })
            test('Support can create OIDC client for any app', async () => {
                [oidcClient] = await createTestOIDCClient(support, b2cApp)
                expect(oidcClient).toHaveProperty('id')
            })
            describe('User', () => {
                test('Can create OIDC client for app he created', async () => {
                    [oidcClient] = await createTestOIDCClient(user, b2cApp)
                    expect(oidcClient).toHaveProperty('id')
                })
                test('Cannot for other apps', async () => {
                    await expectToThrowAccessDeniedErrorToObj(async () => {
                        await createTestOIDCClient(anotherUser, b2cApp)
                    })
                })
            })
            test('Anonymous cannot create any OIDC client', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestOIDCClient(anonymous, b2cApp)
                })
            })
        })
    })
})
