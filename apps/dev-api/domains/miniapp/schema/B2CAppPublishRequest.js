/**
 * Generated by `createschema miniapp.B2CAppPublishRequest 'app:Relationship:B2CApp:CASCADE; status:Text'`
 */

const { userIsAdminOrIsSupport } = require('@open-condo/keystone/access')
const { GQLError, GQLErrorCode: { BAD_USER_INPUT } } = require('@open-condo/keystone/errors')
const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')
const { webHooked } = require('@open-condo/webhooks/plugins')

const access = require('@dev-api/domains/miniapp/access/B2CAppPublishRequest')
const { B2C_APP_PUBLISH_REQUEST_UNIQUE_CONSTRAINT } = require('@dev-api/domains/miniapp/constants/constraints')
const { APPROVE_NOT_ALLOWED } = require('@dev-api/domains/miniapp/constants/errors')
const {
    PUBLISH_REQUEST_PENDING_STATUS,
    PUBLISH_REQUEST_APPROVED_STATUS,
    PUBLISH_REQUEST_STATUS_OPTIONS,
} = require('@dev-api/domains/miniapp/constants/publishing')

const ERRORS = {
    APPROVE_NOT_ALLOWED: {
        code: BAD_USER_INPUT,
        type: APPROVE_NOT_ALLOWED,
        message: `Cannot change status to "${PUBLISH_REQUEST_APPROVED_STATUS}" until all prerequisites are met`,
    },
}

const B2CAppPublishRequest = new GQLListSchema('B2CAppPublishRequest', {
    schemaDoc:
        'A model that determines the ability to publish a mini-application to the production stand, ' +
        'as well as the status of passing the pre-release checkout',
    fields: {
        app: {
            schemaDoc: 'Reference to the application to which this request applies',
            type: 'Relationship',
            ref: 'B2CApp',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
            access: {
                read: true,
                create: true,
                update: false,
            },
        },
        status: {
            schemaDoc: 'Status of consideration of the current request',
            adminDoc: `You should check all model Checkboxes before moving request to "${PUBLISH_REQUEST_APPROVED_STATUS}" status`,
            type: 'Select',
            dataType: 'string',
            isRequired: true,
            options: PUBLISH_REQUEST_STATUS_OPTIONS,
            defaultValue: PUBLISH_REQUEST_PENDING_STATUS,
            access: {
                read: true,
                create: userIsAdminOrIsSupport,
                update: userIsAdminOrIsSupport,
            },
        },
        isAppTested: {
            schemaDoc:
                'Whether the application has been tested before release. ' +
                'Required prerequisite for obtaining permission to publish',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: false,
            access: {
                read: true,
                create: userIsAdminOrIsSupport,
                update: userIsAdminOrIsSupport,
            },
        },
        isContractSigned: {
            schemaDoc:
                'A partnership agreement must be concluded before publication. ' +
                'This checkbox is responsible for the existence of such a contract. ' +
                'Required prerequisite for obtaining permission to publish',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: false,
            access: {
                read: true,
                create: userIsAdminOrIsSupport,
                update: userIsAdminOrIsSupport,
            },
        },
        isInfoApproved: {
            schemaDoc:
                'Before publishing for the first time, it is necessary to ensure that ' +
                'all information about the application is valid and understandable for the user. ' +
                'Required prerequisite for obtaining permission to publish',
            type: 'Checkbox',
            isRequired: true,
            defaultValue: false,
            access: {
                read: true,
                create: userIsAdminOrIsSupport,
                update: userIsAdminOrIsSupport,
            },
        },
    },
    kmigratorOptions: {
        constraints: [
            {
                type: 'models.UniqueConstraint',
                fields: ['app'],
                condition: 'Q(deletedAt__isnull=True)',
                name: B2C_APP_PUBLISH_REQUEST_UNIQUE_CONSTRAINT,
            },
        ],
    },
    hooks: {
        validateInput ({ resolvedData, existingItem, context }) {
            if (resolvedData['status'] === PUBLISH_REQUEST_APPROVED_STATUS) {
                const newItem = { ...existingItem, ...resolvedData }
                if (!newItem['isAppTested'] || !newItem['isContractSigned'] || !newItem['isInfoApproved']) {
                    throw new GQLError(ERRORS.APPROVE_NOT_ALLOWED, context)
                }
            }
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical(), webHooked()],
    access: {
        read: access.canReadB2CAppPublishRequests,
        create: access.canManageB2CAppPublishRequests,
        update: access.canManageB2CAppPublishRequests,
        delete: false,
        auth: true,
    },
})

module.exports = {
    B2CAppPublishRequest,
}
