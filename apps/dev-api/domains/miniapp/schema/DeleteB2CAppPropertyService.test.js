/**
 * Generated by `createservice miniapp.DeleteB2CAppPropertyService`
 */

const {
    makeClient,
    expectToThrowAccessDeniedErrorToResult,
    expectToThrowAuthenticationErrorToResult,
} = require('@open-condo/keystone/test.utils')

const {
    PUBLISH_REQUEST_APPROVED_STATUS,
    PROD_ENVIRONMENT,
    DEV_ENVIRONMENT,
} = require('@dev-api/domains/miniapp/constants/publishing')
const {
    createCondoB2CAppProperties,
    createTestB2CApp,
    publishB2CAppByTestClient,
    B2CApp,
    deleteB2CAppPropertyByTestClient,
    createTestB2CAppPublishRequest,
} = require('@dev-api/domains/miniapp/utils/testSchema')
const {
    makeLoggedInAdminClient,
    makeLoggedInSupportClient,
    makeRegisteredAndLoggedInUser,
    makeLoggedInCondoAdminClient,
} = require('@dev-api/domains/user/utils/testSchema')
 
describe('DeleteB2CAppPropertyService', () => {
    let admin
    let support
    let user
    let anotherUser
    let anonymous
    let condoAdmin
    let app
    beforeAll(async () => {
        admin = await makeLoggedInAdminClient()
        support = await makeLoggedInSupportClient()
        user = await makeRegisteredAndLoggedInUser()
        anotherUser = await makeRegisteredAndLoggedInUser()
        anonymous = await makeClient()
        condoAdmin = await makeLoggedInCondoAdminClient();

        [app] = await createTestB2CApp(user)
        await publishB2CAppByTestClient(user, app)
        await createTestB2CAppPublishRequest(support, app, {
            isAppTested: true,
            isContractSigned: true,
            isInfoApproved: true,
            status: PUBLISH_REQUEST_APPROVED_STATUS,
        })
        await publishB2CAppByTestClient(user, app, { info: true }, PROD_ENVIRONMENT)
        app = await B2CApp.getOne(user, { id: app.id })
    })
    describe('Access tests', () => {
        let devProperty
        let prodProperty
        beforeEach(async () => {
            [[devProperty]] = await createCondoB2CAppProperties(condoAdmin, { id: app.developmentExportId }, 1);
            [[prodProperty]] = await createCondoB2CAppProperties(condoAdmin, { id: app.productionExportId }, 1)
        })
        test('Admin can delete any property', async () => {
            const [devResult] = await deleteB2CAppPropertyByTestClient(admin, devProperty.id, DEV_ENVIRONMENT)
            expect(devResult).toHaveProperty('deletedAt')
            expect(devResult).toHaveProperty('id', devProperty.id)
            expect(devResult).toHaveProperty('address', devProperty.address)
            expect(devResult.deletedAt).not.toBeNull()
            const [prodResult] = await deleteB2CAppPropertyByTestClient(admin, prodProperty.id, PROD_ENVIRONMENT)
            expect(prodResult).toHaveProperty('deletedAt')
            expect(prodResult).toHaveProperty('id', prodProperty.id)
            expect(prodResult).toHaveProperty('address', prodProperty.address)
            expect(prodResult.deletedAt).not.toBeNull()
        })
        test('Support can delete any property', async () => {
            const [devResult] = await deleteB2CAppPropertyByTestClient(support, devProperty.id, DEV_ENVIRONMENT)
            expect(devResult).toHaveProperty('deletedAt')
            expect(devResult).toHaveProperty('id', devProperty.id)
            expect(devResult.deletedAt).not.toBeNull()
            const [prodResult] = await deleteB2CAppPropertyByTestClient(support, prodProperty.id, PROD_ENVIRONMENT)
            expect(prodResult).toHaveProperty('deletedAt')
            expect(prodResult).toHaveProperty('id', prodProperty.id)
            expect(prodResult.deletedAt).not.toBeNull()
        })
        describe('User', () => {
            test('Can delete properties linked to imported which was created by user', async () => {
                const [devResult] = await deleteB2CAppPropertyByTestClient(user, devProperty.id, DEV_ENVIRONMENT)
                expect(devResult).toHaveProperty('deletedAt')
                expect(devResult).toHaveProperty('id', devProperty.id)
                expect(devResult.deletedAt).not.toBeNull()
                const [prodResult] = await deleteB2CAppPropertyByTestClient(user, prodProperty.id, PROD_ENVIRONMENT)
                expect(prodResult).toHaveProperty('deletedAt')
                expect(prodResult).toHaveProperty('id', prodProperty.id)
                expect(prodResult.deletedAt).not.toBeNull()
            })
            test('Cannot otherwise', async () => {
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await deleteB2CAppPropertyByTestClient(anotherUser, devProperty.id, DEV_ENVIRONMENT)
                })
                await expectToThrowAccessDeniedErrorToResult(async () => {
                    await deleteB2CAppPropertyByTestClient(anotherUser, prodProperty.id, PROD_ENVIRONMENT)
                })
            })
        })
        test('Anonymous cannot delete anything', async () => {
            await expectToThrowAuthenticationErrorToResult(async () => {
                await deleteB2CAppPropertyByTestClient(anonymous, devProperty.id, DEV_ENVIRONMENT)
            })
            await expectToThrowAuthenticationErrorToResult(async () => {
                await deleteB2CAppPropertyByTestClient(anonymous, prodProperty.id, PROD_ENVIRONMENT)
            })
        })
    })
})