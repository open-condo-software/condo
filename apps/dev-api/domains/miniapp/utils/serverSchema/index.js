/**
 * Generated by `createschema miniapp.B2CApp 'name:Text'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */

const { generateServerUtils } = require('@open-condo/codegen/generate.server.utils')
const { execGqlWithoutAccess } = require('@open-condo/codegen/generate.server.utils')

const {
    B2CApp: B2CAppGQL,
    B2CAppAccessRight: B2CAppAccessRightGQL,
    B2CAppBuild: B2CAppBuildGQL,
    B2CAppPublishRequest: B2CAppPublishRequestGQL,
    PUBLISH_B2C_APP_MUTATION,
    IMPORT_B2C_APP_MUTATION,
    CREATE_B2C_APP_PROPERTY_MUTATION,
    DELETE_B2C_APP_PROPERTY_MUTATION,
    ALL_B2C_APP_PROPERTIES_QUERY,
    GET_OIDC_CLIENT_QUERY,
    CREATE_OIDC_CLIENT_MUTATION,
    GENERATE_OIDC_CLIENT_SECRET_MUTATION,
    UPDATE_OIDC_CLIENT_URL_MUTATION,
    REGISTER_APP_USER_SERVICE_MUTATION,
} = require('@dev-api/domains/miniapp/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const B2CApp = generateServerUtils(B2CAppGQL)
const B2CAppAccessRight = generateServerUtils(B2CAppAccessRightGQL)
const B2CAppBuild = generateServerUtils(B2CAppBuildGQL)
const B2CAppPublishRequest = generateServerUtils(B2CAppPublishRequestGQL)

async function publishB2CApp (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')

    return await execGqlWithoutAccess(context, {
        query: PUBLISH_B2C_APP_MUTATION,
        variables: { data },
        errorMessage: '[error] Unable to publishB2CApp',
        dataPath: 'obj',
    })
}

async function importB2CApp (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: IMPORT_B2C_APP_MUTATION,
        variables: { data },
        errorMessage: '[error] Unable to importB2CApp',
        dataPath: 'obj',
    })
}

async function allB2CAppProperties (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: ALL_B2C_APP_PROPERTIES_QUERY,
        variables: { data },
        errorMessage: '[error] Unable to get allB2CAppProperties',
        dataPath: 'obj',
    })
}

async function createB2CAppProperty (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: CREATE_B2C_APP_PROPERTY_MUTATION,
        variables: { data },
        errorMessage: '[error] Unable to createB2CAppProperty',
        dataPath: 'obj',
    })
}

async function deleteB2CAppProperty (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: DELETE_B2C_APP_PROPERTY_MUTATION,
        variables: { data },
        errorMessage: '[error] Unable to deleteB2CAppProperty',
        dataPath: 'obj',
    })
}

async function getOIDCClient (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')

    return await execGqlWithoutAccess(context, {
        query: GET_OIDC_CLIENT_QUERY,
        variables: { data },
        errorMessage: '[error] Unable to getOIDCClient',
        dataPath: 'result',
    })
}

async function createOIDCClient (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: CREATE_OIDC_CLIENT_MUTATION,
        variables: { data },
        errorMessage: '[error] Unable to createOIDCClient',
        dataPath: 'result',
    })
}

async function generateOIDCClientSecret (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: GENERATE_OIDC_CLIENT_SECRET_MUTATION,
        variables: { data },
        errorMessage: '[error] Unable to generateOIDCClientSecret',
        dataPath: 'result',
    })
}

async function updateOIDCClientUrl (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: UPDATE_OIDC_CLIENT_URL_MUTATION,
        variables: { data },
        errorMessage: '[error] Unable to updateOIDCClientUrl',
        dataPath: 'result',
    })
}
async function registerAppUserService (context, data) {
    if (!context) throw new Error('no context')
    if (!data) throw new Error('no data')
    if (!data.sender) throw new Error('no data.sender')

    return await execGqlWithoutAccess(context, {
        query: REGISTER_APP_USER_SERVICE_MUTATION,
        variables: { data },
        errorMessage: '[error] Unable to registerAppUserService',
        dataPath: 'obj',
    })
}

/* AUTOGENERATE MARKER <CONST> */

module.exports = {
    B2CApp,
    B2CAppAccessRight,
    B2CAppBuild,
    B2CAppPublishRequest,
    publishB2CApp,
    importB2CApp,
    allB2CAppProperties,
    createB2CAppProperty,
    deleteB2CAppProperty,
    getOIDCClient,
    createOIDCClient,
    generateOIDCClientSecret,
    updateOIDCClientUrl,
    registerAppUserService,
/* AUTOGENERATE MARKER <EXPORTS> */
}
