/**
 * Generated by `createschema miniapp.B2CApp 'name:Text'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const { faker } = require('@faker-js/faker')
const { generateGQLTestUtils } = require('@open-condo/codegen/generate.test.utils')

const { B2CApp: B2CAppGQL } = require('@dev-api/domains/miniapp/gql')
/* AUTOGENERATE MARKER <IMPORT> */

const B2CApp = generateGQLTestUtils(B2CAppGQL)
/* AUTOGENERATE MARKER <CONST> */

async function createTestB2CApp (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const name = `${faker.commerce.product()}`

    const attrs = {
        dv: 1,
        sender,
        name,
        ...extraAttrs,
    }
    const obj = await B2CApp.create(client, attrs)
    return [obj, attrs]
}

async function updateTestB2CApp (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await B2CApp.update(client, id, attrs)
    return [obj, attrs]
}

async function updateTestB2CApps (client, attrsArray) {
    if (!client) throw new Error('no client')
    if (!Array.isArray(attrsArray)) throw new Error('payload is not an array')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const data = attrsArray.map(item => ({ id: item.id, data: { ...item.data, dv: 1, sender } }))
    const objs = await B2CApp.updateMany(client, data)

    return [objs, data]
}

/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    B2CApp, createTestB2CApp, updateTestB2CApp, updateTestB2CApps,
/* AUTOGENERATE MARKER <EXPORTS> */
}
