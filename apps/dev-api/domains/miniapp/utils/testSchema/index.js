/**
 * Generated by `createschema miniapp.B2CApp 'name:Text'`
 * In most cases you should not change it by hands
 * Please, don't remove `AUTOGENERATE MARKER`s
 */
const { faker } = require('@faker-js/faker')
const conf = require('@open-condo/config')
const path = require('path')
const { generateGQLTestUtils, throwIfError } = require('@open-condo/codegen/generate.test.utils')

const {
    B2CApp: B2CAppGQL,
    B2CAppBuild: B2CAppBuildGQL,
    B2CAppPublishRequest: B2CAppPublishRequestGQL,
    PUBLISH_B2C_APP_MUTATION,
} = require('@dev-api/domains/miniapp/gql')
const { UploadingFile } = require('@open-condo/keystone/test.utils')
const { DEV_ENVIRONMENT } = require('@dev-api/domains/miniapp/constants/publishing')
/* AUTOGENERATE MARKER <IMPORT> */

const B2CApp = generateGQLTestUtils(B2CAppGQL)
const B2CAppBuild = generateGQLTestUtils(B2CAppBuildGQL)
const B2CAppPublishRequest = generateGQLTestUtils(B2CAppPublishRequestGQL)
/* AUTOGENERATE MARKER <CONST> */

const FAKE_BUILD_ASSET_PATH = path.resolve(conf.PROJECT_ROOT, 'apps/dev-api/domains/miniapp/utils/testSchema/assets/build.zip')

async function createTestB2CApp (client, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const name = `${faker.commerce.product()}`

    const attrs = {
        dv: 1,
        sender,
        name,
        ...extraAttrs,
    }
    const obj = await B2CApp.create(client, attrs)
    return [obj, attrs]
}

async function updateTestB2CApp (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await B2CApp.update(client, id, attrs)
    return [obj, attrs]
}

async function updateTestB2CApps (client, attrsArray) {
    if (!client) throw new Error('no client')
    if (!Array.isArray(attrsArray)) throw new Error('payload is not an array')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const data = attrsArray.map(item => ({ id: item.id, data: { ...item.data, dv: 1, sender } }))
    const objs = await B2CApp.updateMany(client, data)

    return [objs, data]
}

function generateBuildVersion () {
    return `${faker.datatype.number()}.${faker.datatype.number()}.${faker.datatype.number()}`
}

async function createTestB2CAppBuild (client, app, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!app || !app.id) throw new Error('no app.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }
    const version = generateBuildVersion()
    const data = new UploadingFile(FAKE_BUILD_ASSET_PATH)

    const attrs = {
        dv: 1,
        sender,
        app: { connect: { id: app.id } },
        data,
        version,
        ...extraAttrs,
    }
    const obj = await B2CAppBuild.create(client, attrs)
    return [obj, attrs]
}

async function updateTestB2CAppBuild (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await B2CAppBuild.update(client, id, attrs)
    return [obj, attrs]
}

async function publishB2CAppByTestClient(client, app, options = undefined, environment = DEV_ENVIRONMENT) {
    if (!client) throw new Error('no client')
    if (!app || !app.id) throw new Error('no app')

    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        app: { id: app.id },
        environment,
        options: options || { info: true },
    }
    const { data, errors } = await client.mutate(PUBLISH_B2C_APP_MUTATION, { data: attrs })
    throwIfError(data, errors)
    return [data.result, attrs]
}
async function createTestB2CAppPublishRequest (client, app, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!app || !app.id) throw new Error('no app.id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        app: { connect: { id: app.id } },
        ...extraAttrs,
    }
    const obj = await B2CAppPublishRequest.create(client, attrs)
    return [obj, attrs]
}

async function updateTestB2CAppPublishRequest (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await B2CAppPublishRequest.update(client, id, attrs)
    return [obj, attrs]
}

/* AUTOGENERATE MARKER <FACTORY> */

module.exports = {
    B2CApp, createTestB2CApp, updateTestB2CApp, updateTestB2CApps,
    B2CAppBuild, createTestB2CAppBuild, updateTestB2CAppBuild, generateBuildVersion,
    B2CAppPublishRequest, createTestB2CAppPublishRequest, updateTestB2CAppPublishRequest,
    publishB2CAppByTestClient,
/* AUTOGENERATE MARKER <EXPORTS> */
}
