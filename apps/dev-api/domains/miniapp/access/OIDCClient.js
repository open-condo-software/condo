/**
 * Generated by `createschema miniapp.OIDCClient 'b2cApp:Relationship:B2CApp:CASCADE; clientId:Text; clientSecret:Text; grantTypes:Json; responseTypes:Json; developmentRedirectUri:Url; productionRedirectUri:Url'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

const { canReadAppLinkedModelAsOwner } = require('@dev-api/domains/miniapp/utils/serverSchema/access')

async function canReadOIDCClients (args) {
    const { authentication: { item: user } } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return canReadAppLinkedModelAsOwner(args, 'b2cApp')
}

async function canManageOIDCClients ({ authentication: { item: user }, originalInput, operation, itemIds, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    let b2cAppsIds = []

    if (operation === 'create') {
        b2cAppsIds = (Array.isArray(originalInput)
            ? originalInput.map(input => get(input, ['data', 'b2cApp', 'connect', 'id']))
            : [get(originalInput, ['b2cApp', 'connect', 'id'])])
            .filter(id => id)
    } else if (operation === 'update') {
        const ids = itemIds || [itemId]
        const clients = await find('OIDCClient', { deletedAt: null, id_in: ids })
        if (clients.length !== new Set(ids).size) {
            return false
        }
        b2cAppsIds = clients.filter(client => client.b2cApp).map(client => client.b2cApp)
    }

    if (!b2cAppsIds.length) {
        return false
    }

    if (b2cAppsIds.length) {
        const b2cApps = await find('B2CApp', { id_in: b2cAppsIds, deletedAt: null })
        if (b2cApps.length !== (new Set(b2cAppsIds)).size) {
            return false
        }
        const hasAccessViaB2CApp = b2cApps.every(app => app.createdBy === user.id)
        if (!hasAccessViaB2CApp) {
            return false
        }
    }

    return true
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadOIDCClients,
    canManageOIDCClients,
}
