/**
 * Generated by `createschema miniapp.B2CAppPublishRequest 'app:Relationship:B2CApp:CASCADE; status:Text'`
 */

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')

const { canCreateB2CAppLinkedModelAsOwner, canReadAppLinkedModelAsOwner } = require('@dev-api/domains/miniapp/utils/serverSchema/access')

async function canReadB2CAppPublishRequests (args) {
    const { authentication: { item: user } } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return canReadAppLinkedModelAsOwner(args)
}

async function canManageB2CAppPublishRequests (args) {
    const { authentication: { item: user }, operation } = args
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (operation === 'create') {
        return await canCreateB2CAppLinkedModelAsOwner(args)
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadB2CAppPublishRequests,
    canManageB2CAppPublishRequests,
}
