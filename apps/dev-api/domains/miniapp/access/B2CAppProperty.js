/**
 * Generated by `createschema miniapp.B2CAppProperty 'app:Relationship:B2CApp:CASCADE;'`
 */

const get = require('lodash/get')

const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { find } = require('@open-condo/keystone/schema')

async function canReadB2CAppProperties ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin || user.isSupport) return {}

    return { app: { createdBy: { id: user.id } } }
}

async function canManageB2CAppProperties ({ authentication: { item: user }, originalInput, operation, itemId, itemIds }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    if (operation === 'create') {
        const appIds = Array.isArray(originalInput)
            ? originalInput.map(input => get(input, ['data', 'app', 'connect', 'id']))
            : [get(originalInput, ['app', 'connect', 'id'])]
        if (appIds.some(id => !id)) {
            return false
        }
        const apps = await find('B2CApp', { id_in: appIds, deletedAt: null })
        if (apps.length !== (new Set(appIds)).size) {
            return false
        }

        return apps.every(app => app.createdBy === user.id)
    } else if (operation === 'update') {
        const ids = itemIds || [itemId]
        const items = await find('B2CAppProperty', { id_in: ids, deletedAt: null })
        if (items.length !== (new Set(ids)).size) {
            return false
        }
        const appIds = items.map(item => item.app)
        if (appIds.some(id => !id)) {
            return false
        }
        const apps = await find('B2CApp', { id_in: appIds, deletedAt: null })
        if (apps.length !== (new Set(appIds)).size) {
            return false
        }

        return apps.every(app => app.createdBy === user.id)
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadB2CAppProperties,
    canManageB2CAppProperties,
}
