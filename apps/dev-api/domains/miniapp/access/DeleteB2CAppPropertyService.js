/**
 * Generated by `createservice miniapp.DeleteB2CAppPropertyService`
 */
const { throwAuthenticationError } = require('@open-condo/keystone/apolloErrorFormatter')
const { getByCondition } = require('@open-condo/keystone/schema')

const { REMOTE_SYSTEM } = require('@dev-api/domains/common/constants/common')
const { productionClient, developmentClient } = require('@dev-api/domains/common/utils/serverClients')
const { CondoB2CAppPropertyGql } = require('@dev-api/domains/condo/gql')
const { PROD_ENVIRONMENT } = require('@dev-api/domains/miniapp/constants/publishing')

async function canDeleteB2CAppProperty ({ authentication: { item: user }, args }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin || user.isSupport) return true

    const { data: { id, environment } } = args

    const serverClient = environment === PROD_ENVIRONMENT
        ? productionClient
        : developmentClient

    const foundProperties = await serverClient.getModels({
        modelGql: CondoB2CAppPropertyGql,
        where: {
            id,
            app: { importRemoteSystem: REMOTE_SYSTEM },
        },
        first: 1,
    })
    if (!foundProperties || !foundProperties.length) return false

    const property = foundProperties[0]
    if (!property || !property.app || !property.app.importId) return false

    const app = await getByCondition('B2CApp', { id: property.app.importId, deletedAt: null })

    return Boolean(app && app.createdBy === user.id)
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canDeleteB2CAppProperty,
}