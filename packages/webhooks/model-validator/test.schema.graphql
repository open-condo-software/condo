"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input SenderFieldInput {
    dv: Int!
    fingerprint: String!
}

input UserWhereUniqueInput {
    id: ID!
}


type MyModel  {
    stringField: String
    fileField: File
    boolField: Boolean
    manyRelation(where: MyRelationModelWhereInput, search: String, orderBy: String, first: Int, skip: Int): [MyRelationModel!]!
    id: ID!
    intField: Int
    typedField: MyTypedField
    manyEnumField: [MyModelFieldEnum!]
}

type File {
    publicUrl: String
}

type MyTypedField {
    dv: Int!
    subfield: String!
}

type MyRelationModel {
    model: MyModel
    id: ID!
}

input MyModelWhereInput {
    AND: [MyModelWhereInput]
    OR: [MyModelWhereInput]
    stringField: String
    stringField_not: String
    stringField_contains: String
    stringField_not_contains: String
    stringField_starts_with: String
    stringField_not_starts_with: String
    stringField_ends_with: String
    stringField_not_ends_with: String
    stringField_i: String
    stringField_not_i: String
    stringField_contains_i: String
    stringField_not_contains_i: String
    stringField_starts_with_i: String
    stringField_not_starts_with_i: String
    stringField_ends_with_i: String
    stringField_not_ends_with_i: String
    stringField_in: [String]
    stringField_not_in: [String]
    fileField: String
    fileField_not: String
    fileField_in: [String]
    fileField_not_in: [String]
    boolField: Boolean
    boolField_not: Boolean

    """ condition must be true for all nodes """
    manyRelation_every: MyRelationModelWhereInput

    """ condition must be true for at least 1 node """
    manyRelation_some: MyRelationModelWhereInput

    """ condition must be false for all nodes """
    manyRelations_none: MyRelationModelWhereInput
    manyEnumField: [MyModelFieldEnum!]
    manyEnumField_not: [MyModelFieldEnum!]
    manyEnumField_in: [[MyModelFieldEnum!]]
    manyEnumField_not_in: [[MyModelFieldEnum!]]
    id: ID
    id_not: ID
    id_in: [ID]
    id_not_in: [ID]
    intField: Int
    intField_not: Int
    intField_lt: Int
    intField_lte: Int
    intField_gt: Int
    intField_gte: Int
    intField_in: [Int]
    intField_not_in: [Int]
    createdAt: String
    createdAt_not: String
    createdAt_lt: String
    createdAt_lte: String
    createdAt_gt: String
    createdAt_gte: String
    createdAt_in: [String]
    createdAt_not_in: [String]
    updatedAt: String
    updatedAt_not: String
    updatedAt_lt: String
    updatedAt_lte: String
    updatedAt_gt: String
    updatedAt_gte: String
    updatedAt_in: [String]
    updatedAt_not_in: [String]
    createdBy: UserWhereInput
    createdBy_is_null: Boolean
    updatedBy: UserWhereInput
    updatedBy_is_null: Boolean
    deletedAt: String
    deletedAt_not: String
    deletedAt_lt: String
    deletedAt_lte: String
    deletedAt_gt: String
    deletedAt_gte: String
    deletedAt_in: [String]
    deletedAt_not_in: [String]
}

input UserWhereInput {
    id: ID
    id_not: ID
    id_in: [ID]
    id_not_in: [ID]
}

input MyRelationModelWhereInput {
    AND: [MyRelationModelWhereInput]
    OR: [MyRelationModelWhereInput]
    model: MyModelWhereInput
    model_is_null: Boolean
    id: ID
    id_not: ID
    id_in: [ID]
    id_not_in: [ID]
}

type Query {
    """ Empty query for schema to be valid. """
    myQuery(data: String): [String]
}

type Mutation {
    """ Empty mutation for schema to be valid. """
    myMutation(data: String): MyModel
}

enum MyModelFieldEnum {
    EnumValue
}
