/**
 * Generated by `createschema condo.User 'name:Text; isSupport:Checkbox; isAdmin:Checkbox; email:Text;'`
 */

const { historical, versioned, uuided, tracked, softDeleted, dvAndSender } = require('@open-condo/keystone/plugins')
const { GQLListSchema } = require('@open-condo/keystone/schema')

const access = require('@{{name}}/domains/user/access/User')
const { USER_TYPES, SERVICE_USER_TYPE } = require('@{{name}}/domains/user/constants')
const { userIsAdmin, userIsAdminOrIsThisItem } = require('@open-condo/keystone/access')


const User = new GQLListSchema('User', {
    schemaDoc: 'Users authorized by oidc auth',
    fields: {
        type: {
            schemaDoc: 'condo.User.type',
            type: 'Select',
            options: USER_TYPES,
            defaultValue: SERVICE_USER_TYPE,
            isRequired: true,
            access: {
                create: userIsAdmin,
                read: true,
                update: userIsAdmin,
            },
        },

        name: {
            schemaDoc: 'The user\'s name',
            type: 'Text',
            isRequired: true,
            access: {
                create: userIsAdmin,
                read: true,
                update: userIsAdmin,
            },
        },

        isSupport: {
            schemaDoc: 'Whether the user support or not',
            type: 'Checkbox',
            defaultValue: false,
            access: {
                create: userIsAdmin,
                read: true,
                update: userIsAdmin,
            },
        },

        isAdmin: {
            schemaDoc: 'Whether the user admin or not',
            type: 'Checkbox',
            defaultValue: false,
            access: {
                create: userIsAdmin,
                read: true,
                update: userIsAdmin,
            },
        },

        email: {
            schemaDoc: 'The user\'s email',
            type: 'Text',
            access: {
                create: userIsAdmin,
                read: userIsAdminOrIsThisItem,
                update: userIsAdmin,
            },
        },

        password: {
            schemaDoc: 'The user\'s password',
            rejectCommon: true,
            type: 'Password',
            access: {
                create: userIsAdmin,
                read: userIsAdmin,
                update: userIsAdmin,
            },
        },
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), dvAndSender(), historical()],
    access: {
        read: access.canReadUsers,
        create: access.canManageUsers,
        update: access.canManageUsers,
        delete: false,
        auth: true,
    },
})

module.exports = {
    User,
}
