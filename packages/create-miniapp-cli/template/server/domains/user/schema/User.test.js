/**
 * Generated by `createschema user.User 'name:Text; isSupport:Checkbox; isAdmin:Checkbox; email:Text;'`
 */

const {
    makeLoggedInAdminClient,
    makeClient,
    UUID_RE,
    DATETIME_RE,
    expectToThrowGQLError, expectToThrowAuthenticationError,
    expectToThrowAuthenticationErrorToObj,
    expectToThrowAuthenticationErrorToObjects,
    expectToThrowAccessDeniedErrorToObj,
} = require('@open-condo/keystone/test.utils')

const {
    User,
    createTestUser,
    updateTestUser,
    makeClientWithSupportUser,
    makeClientWithNewRegisteredAndLoggedInUser,
} = require('@pos-integration/domains/user/utils/testSchema')

describe('User', () => {
    let adminClient, supportClient, userClient, anonymousClient

    beforeAll(async () => {
        adminClient = await makeLoggedInAdminClient()
        supportClient = await makeClientWithSupportUser()
        userClient = await makeClientWithNewRegisteredAndLoggedInUser()
        anonymousClient = await makeClient()
    })

    describe('CRUD tests', () => {
        describe('create', () => {
            test('admin can', async () => {
                const [user, attrs] = await createTestUser(adminClient)

                expect(user.id).toMatch(UUID_RE)
                expect(user.dv).toEqual(1)
                expect(user.sender).toEqual(attrs.sender)
                expect(user.v).toEqual(1)
                expect(user.newId).toEqual(null)
                expect(user.deletedAt).toEqual(null)
                expect(user.createdBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(user.updatedBy).toEqual(expect.objectContaining({ id: adminClient.user.id }))
                expect(user.createdAt).toMatch(DATETIME_RE)
                expect(user.updatedAt).toMatch(DATETIME_RE)
            })

            test('support can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestUser(supportClient)
                })
            })

            test('user can\'t', async () => {
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await createTestUser(userClient)
                })
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObj(async () => {
                    await createTestUser(anonymousClient)
                })
            })
        })

        describe('update', () => {
            test('admin can', async () => {
                const [user] = await createTestUser(adminClient)

                const [obj, attrs] = await updateTestUser(adminClient, user.id)

                expect(obj.dv).toEqual(1)
                expect(obj.sender).toEqual(attrs.sender)
                expect(obj.v).toEqual(2)
            })

            test('support can\'t', async () => {
                const [user] = await createTestUser(adminClient)
                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUser(supportClient, user.id)
                })
            })

            test('user can\'t', async () => {
                const [user] = await createTestUser(adminClient)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await updateTestUser(userClient, user.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [user] = await createTestUser(adminClient)

                await expectToThrowAuthenticationError(async () => {
                    await updateTestUser(anonymousClient, user.id)
                }, 'obj')
            })
        })

        describe('hard delete', () => {
            test('admin can\'t', async () => {
                const [user] = await createTestUser(adminClient)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await User.delete(adminClient, user.id)
                })
            })

            test('support can\'t', async () => {
                const [user] = await createTestUser(adminClient)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await User.delete(supportClient, user.id)
                })
            })

            test('user can\'t', async () => {
                const [user] = await createTestUser(adminClient)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await User.delete(userClient, user.id)
                })
            })

            test('anonymous can\'t', async () => {
                const [user] = await createTestUser(adminClient)

                await expectToThrowAccessDeniedErrorToObj(async () => {
                    await User.delete(anonymousClient, user.id)
                })
            })
        })

        describe('read', () => {
            test('admin can read any user', async () => {
                const users = await User.getAll(adminClient, {
                    id_in: [adminClient.user.id, supportClient.user.id, userClient.user.id],
                })

                expect(users).toHaveLength(3)
                expect(users).toEqual(expect.arrayContaining([
                    expect.objectContaining({ id: adminClient.user.id }),
                    expect.objectContaining({ id: supportClient.user.id }),
                    expect.objectContaining({ id: userClient.user.id }),
                ]))
            })

            test('support can read any user', async () => {
                const users = await User.getAll(supportClient, {
                    id_in: [adminClient.user.id, supportClient.user.id, userClient.user.id],
                })

                expect(users).toHaveLength(3)
                expect(users).toEqual(expect.arrayContaining([
                    expect.objectContaining({ id: adminClient.user.id }),
                    expect.objectContaining({ id: supportClient.user.id }),
                    expect.objectContaining({ id: userClient.user.id }),
                ]))
            })

            test('user can read self only', async () => {
                const users = await User.getAll(userClient, {
                    id_in: [adminClient.user.id, supportClient.user.id, userClient.user.id],
                })

                expect(users).toHaveLength(1)
                expect(users[0].name).toEqual(userClient.user.name)
            })

            test('anonymous can\'t', async () => {
                await expectToThrowAuthenticationErrorToObjects(async () => {
                    await User.getAll(anonymousClient, {
                        id_in: [adminClient.user.id, supportClient.user.id, userClient.user.id],
                    })
                })
            })
        })
    })

    describe('Validation tests', () => {
        test('Should have correct dv field (=== 1)', async () => {
            const admin = await makeLoggedInAdminClient()

            await expectToThrowGQLError(
                async () => await createTestUser(admin, { dv: 100500 }),
                {
                    'code': 'BAD_USER_INPUT',
                    'type': 'DV_VERSION_MISMATCH',
                    'message': 'Wrong value for data version number',
                    'mutation': 'createUser',
                    'variable': ['data', 'dv'],
                },
            )
        })
    })
})
