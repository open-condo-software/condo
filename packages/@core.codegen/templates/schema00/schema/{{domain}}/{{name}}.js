/**
 * Generated by `{{ command }}`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('../_common')
const access = require('../../access/{{domain}}/{{name}}')

const {{ name }} = new GQLListSchema('{{ name }}', {
    // TODO(codegen): write doc for the {{ name }} domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,
{% for field in signature %}
        {{ field[0] | replace("?", "") }}: {
            // TODO(codegen): write doc for {{ name }}.{{ field[0] | replace("?", "") }} field!
            schemaDoc: 'TODO DOC!',
            type: {{ field[1] }},
{%- if field[1] === 'Relationship' %}
            rel: '{{ field[2] }}',
{%- elif field[1] === 'Select' %}
            options: '{{ field[2] }}',
{%- endif %}
{%- if field[0].endsWith('?') %}
{%- else %}
            isRequired: true,
{%- endif %}
{%- if field[1] === 'Relationship' %}
{%- if field[0].endsWith('?') %}
{%- else %}
            knexOptions: { isNotNullable: true }, // Required relationship only!
{%- endif %}
            kmigratorOptions: { null: {{ field[0].endsWith('?') }}, on_delete: 'models.{{ field[3] }}' },
{%- endif %}
        },
{% endfor %}
    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canRead{{ pluralize.plural(name) }},
        create: access.canManage{{ pluralize.plural(name) }},
        update: access.canManage{{ pluralize.plural(name) }},
        delete: false,
        auth: true,
    },
})

module.exports = {
    {{ name }},
}
