/**
 * Generated by `{{ command }}`
 */

import { pick, get } from 'lodash'

import { getClientSideSenderInfo } from '@{{app}}/domains/common/utils/userid.utils'
import { generateReactHooks } from '@{{app}}/domains/common/utils/codegeneration/generate.hooks'

import { {{ name }} as {{ name }}GQL } from '@{{app}}/domains/{{ domain }}/gql'
import { {{ name }}, {{ name }}UpdateInput } from '../../../../schema'

const FIELDS = ['id', 'deletedAt'{% for field in signature %}, '{{ field.name }}'{% endfor %}]
const RELATIONS = [{% for field in signature | selectattr("isRelation") %}'{{ field.name }}'{% if not loop.last %}, {% endif %}{% endfor %}]

interface I{{ name }}UIState {
    // TODO(codegen): write I{{ name }}UIState or extends it from
}

function convertToUIState (item: {{ name }}): I{{ name }}UIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS)
}

interface I{{ name }}UIFormState {
    // TODO(codegen): write I{{ name }}UIFormState or extends it from
}

function convertToUIFormState (state: I{{ name }}UIState): I{{ name }}UIFormState {
    const result = {}
    for (const attr in Object.keys(state)) {
        result[attr] = (RELATIONS.includes(attr)) ? state[attr].id : state[attr]
    }
    return result
}

function convertToGQLInput (state: I{{ name }}UIFormState): {{ name }}UpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr in Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks({{ name }}GQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
