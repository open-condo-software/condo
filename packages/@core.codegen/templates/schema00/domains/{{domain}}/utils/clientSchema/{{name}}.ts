/**
 * Generated by `{{ command }}`
 */

import { pick, get } from "lodash"

import { getClientSideSenderInfo } from '@domains/common/utils/userid.utils'
import { generateReactHooks } from '@domains/common/utils/codegeneration/generate.hooks'

import { {{ name }} } from '@domains/{{ domain }}/gql'

const RELATIONS = [{% for field in signature %}{% if field[1] === 'Relationship' %}'{{ field[0].replace('?', '') }}'{% if not loop.last %}, {% endif %}{% endif %}{% endfor %}]

function convertToUIState (item: {{ name }}): {{ name }}UIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, ['id', 'deletedAt'{% for field in signature %}, '{{ field[0].replace('?', '') }}'{% endfor %}])
}

function convertToUIFormState (state: {{ name }}UIState): {{ name }}UIFormState {
    const result = {}
    for (const attr in Object.keys(state)) {
        result[attr] = (RELATIONS.includes(attr)) ? state[attr].id : state[attr]
    }
    return result
}

function convertToGQLInput (state: {{ name }}UIFormState | {{ name }}UIState): {{ name }}UpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr in Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr)) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks({{ name }}, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
