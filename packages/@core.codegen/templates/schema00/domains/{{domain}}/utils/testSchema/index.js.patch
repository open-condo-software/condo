/* AUTOGENERATE MARKER <IMPORT> */
const { {{ name }}: {{ name }}GQL } = require('@{{app}}/domains/{{ domain }}/gql')
/**/

/* AUTOGENERATE MARKER <CONST> */
const {{ name }} = generateGQLTestUtils({{ name }}GQL)
/**/

/* AUTOGENERATE MARKER <FACTORY> */
async function createTest{{ name }} (client, {% for field in signature | selectattr("isRelation") | selectattr("isRequired") %}{{ field.name }}, {% endfor %}extraAttrs = {}) {
    if (!client) throw new Error('no client')
{%- for field in signature | selectattr("isRelation") | selectattr("isRequired") %}
    if (!{{ field.name }} || !{{ field.name }}.id) throw new Error('no {{ field.name }}.id')
{%- endfor %}
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    // TODO(codegen): write createTest{{ name }} logic for generate fields

    const attrs = {
        dv: 1,
        sender,
{%- for field in signature | selectattr("isRelation") | selectattr("isRequired") %}
        {{ field.name }}: { connect: { id: {{ field.name }}.id } },
{%- endfor %}
        ...extraAttrs,
    }
    const obj = await {{ name }}.create(client, attrs)
    return [obj, attrs]
}

async function updateTest{{ name }} (client, id, extraAttrs = {}) {
    if (!client) throw new Error('no client')
    if (!id) throw new Error('no id')
    const sender = { dv: 1, fingerprint: faker.random.alphaNumeric(8) }

    // TODO(codegen): check the updateTest{{ name }} logic for generate fields

    const attrs = {
        dv: 1,
        sender,
        ...extraAttrs,
    }
    const obj = await {{ name }}.update(client, id, attrs)
    return [obj, attrs]
}

/**/

/* AUTOGENERATE MARKER <EXPORTS> */
    {{ name }}, createTest{{ name }}, updateTest{{name}},
/**/
