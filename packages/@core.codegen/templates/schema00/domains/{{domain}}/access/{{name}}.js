// @ts-nocheck
/**
 * Generated by `{{ command }}`
 */

const { throwAuthenticationError } = require("@condo/domains/common/utils/apolloErrorFormatter")
const { USER_SCHEMA_NAME } = require('@condo/domains/common/constants/utils')

async function canRead{{ pluralize.plural(name) }} ({ authentication: { item, listKey } }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false

    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return {}
        // TODO(codegen): write canRead{{ pluralize.plural(name) }} logic for user!
    }

    // TODO(codegen): write canRead{{ pluralize.plural(name) }} logic for non-user!
    return false
}

async function canManage{{ pluralize.plural(name) }} ({ authentication: { item, listKey }, originalInput, operation, itemId }) {
    if (!listKey || !item) return throwAuthenticationError()
    if (item.deletedAt) return false

    if (listKey === USER_SCHEMA_NAME) {
        if (item.isAdmin) return true
        if (operation === 'create') {
            // TODO(codegen): write canManage{{ pluralize.plural(name) }} create logic!
            return true
        } else if (operation === 'update') {
            // TODO(codegen): write canManage{{ pluralize.plural(name) }} update logic!
            return true
        }
    }

    // TODO(codegen): write canRead{{ pluralize.plural(name) }} logic for non-user!
    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canRead{{ pluralize.plural(name) }},
    canManage{{ pluralize.plural(name) }},
}
