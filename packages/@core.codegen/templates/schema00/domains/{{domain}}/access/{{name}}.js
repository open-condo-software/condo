// @ts-nocheck
/**
 * Generated by `{{ command }}`
 */

const { throwAuthenticationError } = require("@condo/domains/common/utils/apolloErrorFormatter")

async function canRead{{ pluralize.plural(name) }} ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    // TODO(codegen): write canRead{{ pluralize.plural(name) }} logic for user!
    return {}
}

async function canManage{{ pluralize.plural(name) }} ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create') {
        // TODO(codegen): write canManage{{ pluralize.plural(name) }} create logic!
        return true
    } else if (operation === 'update') {
        // TODO(codegen): write canManage{{ pluralize.plural(name) }} update logic!
        return true
    }
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canRead{{ pluralize.plural(name) }},
    canManage{{ pluralize.plural(name) }},
}
