diff --git a/lib/Keystone/index.js b/lib/Keystone/index.js
index 5f76cf925886570bc5416d50d7335923d3992ae7..d1eefcdcc6505b69b7391b15af1bba49ae97b042 100644
--- a/lib/Keystone/index.js
+++ b/lib/Keystone/index.js
@@ -4,7 +4,7 @@ const memoize = require('micro-memoize');
 const falsey = require('falsey');
 const createCorsMiddleware = require('cors');
 const { execute, print } = require('graphql');
-const { GraphQLUpload } = require('graphql-upload');
+const GraphQLUpload= require('graphql-upload/GraphQLUpload.js');
 const { arrayToObject, objMerge, flatten, unique, filterValues } = require('@keystonejs/utils');
 const {
   validateFieldAccessControl,
@@ -119,7 +119,7 @@ module.exports = class Keystone {
         listKey,
         originalInput,
         operation,
-        { gqlName, itemId, itemIds, context } = {}
+        { gqlName, itemId, itemIds, context, args } = {}
       ) => {
         return validateListAccessControl({
           access: access[schemaName],
@@ -131,6 +131,7 @@ module.exports = class Keystone {
           itemId,
           itemIds,
           context,
+          args,
         });
       },
       { isPromise: true }
diff --git a/lib/ListTypes/list.js b/lib/ListTypes/list.js
index 018efdd3c3ec0a3f07749ce2980de3fbc9d6cda1..c06bbf926fbdcd971b0781979f8933e5bf13f4aa 100644
--- a/lib/ListTypes/list.js
+++ b/lib/ListTypes/list.js
@@ -483,7 +483,7 @@ module.exports = class List {
   }
 
   async listQuery(args, context, gqlName, info, from) {
-    const access = await this.checkListAccess(context, undefined, 'read', { gqlName });
+    const access = await this.checkListAccess(context, undefined, 'read', { gqlName, args });
 
     return this._itemsQuery(mergeWhereClause(args, access), { context, info, from });
   }
@@ -494,7 +494,7 @@ module.exports = class List {
       // on what the user requested
       // Evaluation takes place in ../Keystone/index.js
       getCount: async () => {
-        const access = await this.checkListAccess(context, undefined, 'read', { gqlName });
+        const access = await this.checkListAccess(context, undefined, 'read', { gqlName, args });
 
         const { count } = await this._itemsQuery(mergeWhereClause(args, access), {
           meta: true,
