name: Cleanup Old Review Namespaces

on:
  schedule:
    - cron: "0 4 * * *"
  workflow_dispatch: {}

concurrency:
  group: cleanup-old-review-namespaces
  cancel-in-progress: false

jobs:
  cleanup_old_namespaces:
    name: "Delete review namespaces older than 3 weeks + DBs"
    runs-on: self-hosted
    env:
      KUBE_CONFIG_BASE64_DATA: ${{ secrets.TEST_CLUSTER_KUBE_CONFIG_BASE64_DATA }}
      TEST_CLUSTER_DB_CREDENTIALS: ${{ secrets.TEST_CLUSTER_DB_CREDENTIALS }}
      RETENTION_DAYS: "21"
      NS_PREFIX: "review-"

    steps:
      - name: Compute cutoff timestamp
        id: cutoff
        shell: bash
        run: |
          CUTOFF_TS=$(date -u -d "${RETENTION_DAYS} days ago" +%Y-%m-%dT%H:%M:%SZ)
          echo "CUTOFF_TS=$CUTOFF_TS" >> "$GITHUB_ENV"
          echo "Cutoff: $CUTOFF_TS"

      - name: List candidate namespaces older than cutoff
        id: list_old
        shell: bash
        run: |
          kubectl --kubeconfig <(echo "$KUBE_CONFIG_BASE64_DATA" | base64 --decode) \
            get ns -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.metadata.creationTimestamp}{"\n"}{end}' \
          | awk -v prefix="$NS_PREFIX" -v cutoff="$CUTOFF_TS" '
              $1 ~ ("^" prefix) && $2 < cutoff { print $1 }
            ' | sort -u > namespaces_to_delete.txt || true

          echo "Namespaces to delete:"
          if [[ -s namespaces_to_delete.txt ]]; then cat namespaces_to_delete.txt; else echo "(none)"; fi

          NS_LIST=$(paste -sd, namespaces_to_delete.txt 2>/dev/null || true)
          echo "ns_list=$NS_LIST" >> "$GITHUB_OUTPUT"

      - name: Delete old namespaces
        if: steps.list_old.outputs.ns_list != ''
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r ns; do
            [[ -z "$ns" ]] && continue
            echo "Deleting namespace: $ns"
            kubectl --kubeconfig <(echo "$KUBE_CONFIG_BASE64_DATA" | base64 --decode) \
              delete namespace "$ns" --wait=false || {
                echo "Warning: failed to delete $ns (continuing)"; continue;
              }
          done < namespaces_to_delete.txt

      - name: Drop corresponding review databases
        if: steps.list_old.outputs.ns_list != ''
        shell: bash
        env:
          PSQL_DSN: ${{ secrets.TEST_CLUSTER_DB_CREDENTIALS }}
        run: |
          set -euo pipefail
          psql --version

          TMP_SQL="$(mktemp)"
          echo "-- Autogenerated DROP DATABASE statements" > "$TMP_SQL"

          while IFS= read -r ns; do
            [[ -z "$ns" ]] && continue
            raw="${ns#review-}"
            sanitized="$(echo "$raw" | sed 's/[^a-zA-Z0-9_-]//g; s/_/-/g' | cut -c -30)"

            if [[ -z "$sanitized" ]]; then
              echo "Skipping DB cleanup for $ns: empty derived prefix"
              continue
            fi

            echo "-- From namespace: $ns  -> prefix: $sanitized" >> "$TMP_SQL"
            cat >> "$TMP_SQL" <<EOF
            WITH to_drop AS (
              SELECT datname
              FROM pg_database
              WHERE datname LIKE '${sanitized}%'
                AND datname NOT IN ('postgres','template0','template1')
            )
            SELECT 'DROP DATABASE ' || quote_ident(datname) || ';' FROM to_drop;
            EOF
                      done < namespaces_to_delete.txt

                      echo "Planned DROP statements:"
                      psql -d "$PSQL_DSN" -Atqc "\i $TMP_SQL" | sed 's/^/  /' || true

                      echo "Executing drops..."
                      psql -d "$PSQL_DSN" -Atqc "\i $TMP_SQL" | psql -d "$PSQL_DSN"

                      echo "Database cleanup finished."

      - name: Summary
        shell: bash
        run: |
          echo "Cleanup completed."
          echo "Retention: $RETENTION_DAYS days"
          echo "Cutoff: $CUTOFF_TS"
