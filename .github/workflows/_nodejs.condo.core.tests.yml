on:
  workflow_call:
    inputs:
      domain_name:
        required: true
        type: string
      image_postfix:
        required: true
        type: string
      runs-on:
        required: false
        type: string
        default: ubuntu-latest

jobs:
  tests:
    runs-on: ${{ inputs.runs-on }}

    steps:
      - name: login to sbercloud registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.SBERCLOUD_CR_USERNAME }}
          password: ${{ secrets.SBERCLOUD_CR_PASSWORD }}

      - name: run postgresql master
        run: |
          touch ./pg_hba.conf
          echo """
          local   all             all                                     trust
          host    all             all             127.0.0.1/32            md5
          host    all             all             ::1/128                 md5
          local   replication     all                                     trust
          host    replication     all             127.0.0.1/32            md5
          host    replication     all             ::1/128                 md5
          
          host all all all md5
          host replication all 0.0.0.0/0 md5
          """ >> ./pg_hba.conf       
          
          docker network create db_network
          
          docker run --name postgre-master --network=db_network --health-cmd="CMD-SHELL pg_isready -U postgres" --health-timeout=5s --health-retries=5 --health-interval=5s -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -e POSTGRES_DB=$POSTGRES_DB -p="127.0.0.1:5432:5432" -v ./postgresql-init-replication.sql:/docker-entrypoint-initdb.d/postgresql-init-replication.sql -v ./pg_hba.conf:/etc/pg_hba.conf -d swr.ru-moscow-1.hc.sbercloud.ru/doma/utils/postgres:13.2 postgres -c hba_file=/etc/pg_hba.conf -c wal_level=replica -c hot_standby=on -c max_wal_senders=10 -c max_replication_slots=10 -c hot_standby_feedback=on
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: main

      - name: run postgresql replica
        run: |
          docker run --name postgre-replica --network=db_network --health-cmd="CMD-SHELL pg_isready -U postgres" --health-timeout=5s --health-retries=5 --health-interval=5s  -e PGUSER=$PGUSER -e PGPASSWORD=$PGPASSWORD -e POSTGRES_DB=$POSTGRES_DB -p="127.0.0.1:5433:5432" -d ${{ secrets.DOCKER_REGISTRY }}/doma/utils/postgres:13.2 bash -c "if [ ! -f /var/lib/postgresql/initialized ]; then pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgre-master --port=5432; chmod -R 0700 /var/lib/postgresql/data; touch /var/lib/postgresql/initialized; fi; postgres -c max_connections=2000"
        env:
          PGUSER: replicator
          PGPASSWORD: replicator_password

      - name: run redis
        run: |
          docker run -p="127.0.0.1:6379:6379" -d ${{ secrets.DOCKER_REGISTRY }}/doma/utils/redis:6.2

      - name: run tests
        run: |
          docker ps
          mkdir test_logs
          chmod -R a+rw ./test_logs
          docker run -e SERVER_URL=$SERVER_URL -e COOKIE_SECRET=$COOKIE_SECRET -e REDIS_URL=$REDIS_URL -e DATABASE_URL=$DATABASE_URL -e NODE_ENV=$NODE_ENV -e DISABLE_LOGGING=$DISABLE_LOGGING -e JEST_MOCKS_ENABLED=$JEST_MOCKS_ENABLED -v ./test_logs:/app/test_logs --network="host" ${{ secrets.DOCKER_REGISTRY }}${{ inputs.image_postfix }} bash -c "/app/run_condo_domain_tests.sh -d ${{ inputs.domain_name }}"
        env:
          DATABASE_URL: custom:{"default":{"read":"postgresql://postgres:postgres@127.0.0.1:5433/main","write":"postgresql://postgres:postgres@127.0.0.1/main"}}
          NODE_ENV: development
          DISABLE_LOGGING: true
          REDIS_URL: redis://127.0.0.1:6379
          COOKIE_SECRET: test
          SERVER_URL: http://localhost:3000
          JEST_MOCKS_ENABLED: true
          DATABASE_MAPPING: '[{"match":"*","query":"default","command":"default"}]'

      - name: Collect docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v1
        with:
         dest: './docker-logs'

      - name: Upload log artifact
        uses: actions/upload-artifact@v4
        if: failure()
        with:
         name: logs
         path: |
           ./test_logs/*
           *.log
           ./docker-logs
         retention-days: 2
