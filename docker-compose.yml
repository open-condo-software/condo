version: '3.8'
x-postgres-common:
  &postgres-common
  image: ${REGISTRY}postgres:16.8
  user: postgres

services:
  app:
    image: app
    profiles:
      - app
    build:
      context: .
      dockerfile: Dockerfile
    user: app
    volumes:
      - ./apps/:/app/apps
      - ./packages/:/app/packages
      - ./bin/:/app/bin
      - ./package.json:/app/package.json
      - ./.env:/app/.env
    networks:
      - app-network

  postgresdb:
    image: ${REGISTRY}alpine
    profiles: ['dbs']
    depends_on:
      - postgresdb-master
      - postgresdb-replica
    networks:
      - app-network

  postgresdb-master:
    <<: *postgres-common
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: main
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 scram-sha-256"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      command: |
        postgres
           -c wal_level=replica
           -c synchronous_commit=on
    volumes:
      - ./docker-compose-postgresql-init-replication.sql:/docker-entrypoint-initdb.d/docker-compose-postgresql-init-replication.sql
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  postgresdb-replica:
    <<: *postgres-common
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      if [ ! -f /var/lib/postgresql/initialized ]; then
        pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgresdb-master --port=5432
        chmod -R 0700 /var/lib/postgresql/data
        touch /var/lib/postgresql/initialized
      fi
      postgres -c max_connections=2000
      "
    networks:
      - app-network
    depends_on:
      postgresdb-master:
        condition: service_healthy

  redis:
    image: ${REGISTRY}redis:6.2
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - app-network
    command: ["redis-server", "--databases", "64"]

  valkey-cluster:
    image: ${REGISTRY}alpine
    profiles: ['dbs']
    depends_on:
      - valkey-node-3
      - valkey-node-2
      - valkey-node-1
      - valkey-cluster-creator

  valkey-cluster-creator:
    command:
      - valkey-cli
      - --cluster
      - create
      - localhost:7001
      - localhost:7002
      - localhost:7003
      - --cluster-yes
      - --cluster-replicas
      - '0'
    depends_on:
      valkey-node-1:
        condition: service_healthy
      valkey-node-2:
        condition: service_healthy
      valkey-node-3:
        condition: service_healthy
    image: ${REGISTRY}valkey/valkey:8.0.2
    network_mode: host
  valkey-node-1:
    command:
      - valkey-server
      - /valkey/valkey.conf
      - --port
      - '7001'
    healthcheck:
      interval: 10s
      retries: 3
      test: [ "CMD", "valkey-cli", "-p", "7001", "-c", "ping" ]
      timeout: 5s
    image: ${REGISTRY}valkey/valkey:8.0.2
    network_mode: host
    configs:
      - source: valkey.conf
        target: /valkey/valkey.conf
    ports:
      - 7001:7000
    volumes:
      - valkey-data-1:/data
  valkey-node-2:
    command:
      - valkey-server
      - /valkey/valkey.conf
      - --port
      - '7002'
    healthcheck:
      interval: 10s
      retries: 3
      test: ["CMD", "valkey-cli", "-p", "7002", "-c", "ping"]
      timeout: 5s
    image: ${REGISTRY}valkey/valkey:8.0.2
    network_mode: host
    configs:
      - source: valkey.conf
        target: /valkey/valkey.conf
    ports:
      - 7002:7000
    volumes:
      - valkey-data-2:/data
  valkey-node-3:
    command:
      - valkey-server
      - /valkey/valkey.conf
      - --port
      - '7003'
    healthcheck:
      interval: 10s
      retries: 3
      test: ["CMD", "valkey-cli", "-p", "7003", "-c", "ping"]
      timeout: 5s
    image: ${REGISTRY}valkey/valkey:8.0.2
    network_mode: host
    configs:
      - source: valkey.conf
        target: /valkey/valkey.conf
    ports:
      - 7003:7000
    volumes:
      - valkey-data-3:/data

networks:
  app-network:
    driver: bridge
volumes:
  valkey-data-1: {}
  valkey-data-2: {}
  valkey-data-3: {}
configs:
  valkey.conf:
    content: |
      cluster-enabled yes
      cluster-config-file nodes.conf
      cluster-node-timeout 5000
      appendonly yes

