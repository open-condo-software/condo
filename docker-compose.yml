version: '3.8'
x-postgres-common:
  &postgres-common
  image: postgres:13.8
  user: postgres

services:
  app:
    image: app
    build:
      context: .
      dockerfile: Dockerfile
    user: app
    volumes:
      - ./apps/:/app/apps
      - ./packages/:/app/packages
      - ./bin/:/app/bin
      - ./package.json:/app/package.json
      - ./.env:/app/.env
    networks:
      - app-network
  postgres_master:
    <<: *postgres-common
    container_name: master
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: main
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ./init_replication.sql:/docker-entrypoint-initdb.d/init_replication.sql
    networks:
      - app-network
  postgres_replica:
    <<: *postgres-common
    ports:
      - "127.0.0.1:5433:5432"
    container_name: replica
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      if [ ! -f /var/lib/postgresql/initialized ]; then
        until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_master --port=5432
        do
          sleep 1s
        done
        chmod 0700 /var/lib/postgresql/data
        touch /var/lib/postgresql/initialized
      fi
        postgres
      "
    depends_on:
      - postgres_master
    networks:
      - app-network
  redis:
    image: redis:6.2
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
